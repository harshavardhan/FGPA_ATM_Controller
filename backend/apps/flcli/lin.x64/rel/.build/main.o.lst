   1              		.file	"main.c"
   2              		.text
   3              		.p2align 4,,15
   4              		.globl	decrypt
   6              	decrypt:
   7              	.LFB75:
   8              		.cfi_startproc
   9 0000 53       		pushq	%rbx
  10              		.cfi_def_cfa_offset 16
  11              		.cfi_offset 3, -16
  12 0001 8B0F     		movl	(%rdi), %ecx
  13 0003 8B5704   		movl	4(%rdi), %edx
  14 0006 8B1E     		movl	(%rsi), %ebx
  15 0008 448B5E04 		movl	4(%rsi), %r11d
  16 000c 448B5608 		movl	8(%rsi), %r10d
  17 0010 448B4E0C 		movl	12(%rsi), %r9d
  18 0014 BE2037EF 		movl	$-957401312, %esi
  18      C6
  19 0019 0F1F8000 		.p2align 4,,10
  19      000000
  20              		.p2align 3
  21              	.L3:
  22 0020 89C8     		movl	%ecx, %eax
  23 0022 4189C8   		movl	%ecx, %r8d
  24 0025 C1E004   		sall	$4, %eax
  25 0028 41C1E805 		shrl	$5, %r8d
  26 002c 4501C8   		addl	%r9d, %r8d
  27 002f 4401D0   		addl	%r10d, %eax
  28 0032 4431C0   		xorl	%r8d, %eax
  29 0035 448D040E 		leal	(%rsi,%rcx), %r8d
  30 0039 4431C0   		xorl	%r8d, %eax
  31 003c 29C2     		subl	%eax, %edx
  32 003e 89D0     		movl	%edx, %eax
  33 0040 4189D0   		movl	%edx, %r8d
  34 0043 C1E004   		sall	$4, %eax
  35 0046 41C1E805 		shrl	$5, %r8d
  36 004a 4501D8   		addl	%r11d, %r8d
  37 004d 01D8     		addl	%ebx, %eax
  38 004f 4431C0   		xorl	%r8d, %eax
  39 0052 448D0432 		leal	(%rdx,%rsi), %r8d
  40 0056 4431C0   		xorl	%r8d, %eax
  41 0059 29C1     		subl	%eax, %ecx
  42 005b 81C64786 		addl	$1640531527, %esi
  42      C861
  43 0061 75BD     		jne	.L3
  44 0063 895704   		movl	%edx, 4(%rdi)
  45 0066 890F     		movl	%ecx, (%rdi)
  46 0068 5B       		popq	%rbx
  47              		.cfi_def_cfa_offset 8
  48 0069 C3       		ret
  49              		.cfi_endproc
  50              	.LFE75:
  52 006a 660F1F44 		.p2align 4,,15
  52      0000
  53              		.globl	encrypt
  55              	encrypt:
  56              	.LFB76:
  57              		.cfi_startproc
  58 0070 53       		pushq	%rbx
  59              		.cfi_def_cfa_offset 16
  60              		.cfi_offset 3, -16
  61 0071 8B0F     		movl	(%rdi), %ecx
  62 0073 8B5704   		movl	4(%rdi), %edx
  63 0076 8B1E     		movl	(%rsi), %ebx
  64 0078 448B5E04 		movl	4(%rsi), %r11d
  65 007c 448B5608 		movl	8(%rsi), %r10d
  66 0080 448B4E0C 		movl	12(%rsi), %r9d
  67 0084 31F6     		xorl	%esi, %esi
  68 0086 662E0F1F 		.p2align 4,,10
  68      84000000 
  68      0000
  69              		.p2align 3
  70              	.L8:
  71 0090 89D0     		movl	%edx, %eax
  72 0092 4189D0   		movl	%edx, %r8d
  73 0095 81EE4786 		subl	$1640531527, %esi
  73      C861
  74 009b C1E004   		sall	$4, %eax
  75 009e 41C1E805 		shrl	$5, %r8d
  76 00a2 4501D8   		addl	%r11d, %r8d
  77 00a5 01D8     		addl	%ebx, %eax
  78 00a7 4431C0   		xorl	%r8d, %eax
  79 00aa 448D0432 		leal	(%rdx,%rsi), %r8d
  80 00ae 4431C0   		xorl	%r8d, %eax
  81 00b1 01C1     		addl	%eax, %ecx
  82 00b3 89C8     		movl	%ecx, %eax
  83 00b5 4189C8   		movl	%ecx, %r8d
  84 00b8 C1E004   		sall	$4, %eax
  85 00bb 41C1E805 		shrl	$5, %r8d
  86 00bf 4501C8   		addl	%r9d, %r8d
  87 00c2 4401D0   		addl	%r10d, %eax
  88 00c5 4431C0   		xorl	%r8d, %eax
  89 00c8 448D0431 		leal	(%rcx,%rsi), %r8d
  90 00cc 4431C0   		xorl	%r8d, %eax
  91 00cf 01C2     		addl	%eax, %edx
  92 00d1 81FE2037 		cmpl	$-957401312, %esi
  92      EFC6
  93 00d7 75B7     		jne	.L8
  94 00d9 895704   		movl	%edx, 4(%rdi)
  95 00dc 890F     		movl	%ecx, (%rdi)
  96 00de 5B       		popq	%rbx
  97              		.cfi_def_cfa_offset 8
  98 00df C3       		ret
  99              		.cfi_endproc
 100              	.LFE76:
 102              		.p2align 4,,15
 103              		.globl	decrypt64
 105              	decrypt64:
 106              	.LFB77:
 107              		.cfi_startproc
 108 00e0 8B0F     		movl	(%rdi), %ecx
 109 00e2 8B5704   		movl	4(%rdi), %edx
 110 00e5 BE2037EF 		movl	$-957401312, %esi
 110      C6
 111 00ea 660F1F44 		.p2align 4,,10
 111      0000
 112              		.p2align 3
 113              	.L12:
 114 00f0 89C8     		movl	%ecx, %eax
 115 00f2 4189C8   		movl	%ecx, %r8d
 116 00f5 C1E004   		sall	$4, %eax
 117 00f8 41C1E805 		shrl	$5, %r8d
 118 00fc 4181E8A9 		subl	$15764393, %r8d
 118      8BF000
 119 0103 05F799FD 		addl	$1140693495, %eax
 119      43
 120 0108 4431C0   		xorl	%r8d, %eax
 121 010b 448D040E 		leal	(%rsi,%rcx), %r8d
 122 010f 4431C0   		xorl	%r8d, %eax
 123 0112 29C2     		subl	%eax, %edx
 124 0114 89D0     		movl	%edx, %eax
 125 0116 4189D0   		movl	%edx, %r8d
 126 0119 C1E004   		sall	$4, %eax
 127 011c 41C1E805 		shrl	$5, %r8d
 128 0120 4181C08F 		addl	$1979237519, %r8d
 128      C4F875
 129 0127 058CC127 		addl	$690471308, %eax
 129      29
 130 012c 4431C0   		xorl	%r8d, %eax
 131 012f 448D0432 		leal	(%rdx,%rsi), %r8d
 132 0133 4431C0   		xorl	%r8d, %eax
 133 0136 29C1     		subl	%eax, %ecx
 134 0138 81C64786 		addl	$1640531527, %esi
 134      C861
 135 013e 75B0     		jne	.L12
 136 0140 890F     		movl	%ecx, (%rdi)
 137 0142 895704   		movl	%edx, 4(%rdi)
 138 0145 C3       		ret
 139              		.cfi_endproc
 140              	.LFE77:
 142 0146 662E0F1F 		.p2align 4,,15
 142      84000000 
 142      0000
 143              		.globl	encrypt64
 145              	encrypt64:
 146              	.LFB78:
 147              		.cfi_startproc
 148 0150 8B0F     		movl	(%rdi), %ecx
 149 0152 8B5704   		movl	4(%rdi), %edx
 150 0155 31F6     		xorl	%esi, %esi
 151 0157 660F1F84 		.p2align 4,,10
 151      00000000 
 151      00
 152              		.p2align 3
 153              	.L15:
 154 0160 89D0     		movl	%edx, %eax
 155 0162 4189D0   		movl	%edx, %r8d
 156 0165 81EE4786 		subl	$1640531527, %esi
 156      C861
 157 016b C1E004   		sall	$4, %eax
 158 016e 41C1E805 		shrl	$5, %r8d
 159 0172 4181C08F 		addl	$1979237519, %r8d
 159      C4F875
 160 0179 058CC127 		addl	$690471308, %eax
 160      29
 161 017e 4431C0   		xorl	%r8d, %eax
 162 0181 448D0432 		leal	(%rdx,%rsi), %r8d
 163 0185 4431C0   		xorl	%r8d, %eax
 164 0188 01C1     		addl	%eax, %ecx
 165 018a 89C8     		movl	%ecx, %eax
 166 018c 4189C8   		movl	%ecx, %r8d
 167 018f C1E004   		sall	$4, %eax
 168 0192 41C1E805 		shrl	$5, %r8d
 169 0196 4181E8A9 		subl	$15764393, %r8d
 169      8BF000
 170 019d 05F799FD 		addl	$1140693495, %eax
 170      43
 171 01a2 4431C0   		xorl	%r8d, %eax
 172 01a5 448D0431 		leal	(%rcx,%rsi), %r8d
 173 01a9 4431C0   		xorl	%r8d, %eax
 174 01ac 01C2     		addl	%eax, %edx
 175 01ae 81FE2037 		cmpl	$-957401312, %esi
 175      EFC6
 176 01b4 75AA     		jne	.L15
 177 01b6 890F     		movl	%ecx, (%rdi)
 178 01b8 895704   		movl	%edx, 4(%rdi)
 179 01bb C3       		ret
 180              		.cfi_endproc
 181              	.LFE78:
 183 01bc 0F1F4000 		.p2align 4,,15
 184              		.globl	myHash
 186              	myHash:
 187              	.LFB79:
 188              		.cfi_startproc
 189 01c0 0FB73500 		movzwl	bankID(%rip), %esi
 189      000000
 190 01c7 BA010000 		movl	$1, %edx
 190      00
 191 01cc 440FB7C7 		movzwl	%di, %r8d
 192 01d0 89D0     		movl	%edx, %eax
 193 01d2 83E60F   		andl	$15, %esi
 194 01d5 0FB7CE   		movzwl	%si, %ecx
 195 01d8 D3E0     		sall	%cl, %eax
 196 01da 89C1     		movl	%eax, %ecx
 197 01dc 31C0     		xorl	%eax, %eax
 198 01de 83E701   		andl	$1, %edi
 199 01e1 0F45C1   		cmovne	%ecx, %eax
 200 01e4 8D4E01   		leal	1(%rsi), %ecx
 201 01e7 89D7     		movl	%edx, %edi
 202 01e9 83E10F   		andl	$15, %ecx
 203 01ec D3E7     		sall	%cl, %edi
 204 01ee 8D4E02   		leal	2(%rsi), %ecx
 205 01f1 01C7     		addl	%eax, %edi
 206 01f3 41F6C002 		testb	$2, %r8b
 207 01f7 0F44F8   		cmove	%eax, %edi
 208 01fa 83E10F   		andl	$15, %ecx
 209 01fd 89D0     		movl	%edx, %eax
 210 01ff D3E0     		sall	%cl, %eax
 211 0201 8D4E03   		leal	3(%rsi), %ecx
 212 0204 01F8     		addl	%edi, %eax
 213 0206 41F6C004 		testb	$4, %r8b
 214 020a 0F44C7   		cmove	%edi, %eax
 215 020d 83E10F   		andl	$15, %ecx
 216 0210 89D7     		movl	%edx, %edi
 217 0212 D3E7     		sall	%cl, %edi
 218 0214 8D4E04   		leal	4(%rsi), %ecx
 219 0217 01C7     		addl	%eax, %edi
 220 0219 41F6C008 		testb	$8, %r8b
 221 021d 0F44F8   		cmove	%eax, %edi
 222 0220 83E10F   		andl	$15, %ecx
 223 0223 89D0     		movl	%edx, %eax
 224 0225 D3E0     		sall	%cl, %eax
 225 0227 8D4E05   		leal	5(%rsi), %ecx
 226 022a 01F8     		addl	%edi, %eax
 227 022c 41F6C010 		testb	$16, %r8b
 228 0230 0F44C7   		cmove	%edi, %eax
 229 0233 83E10F   		andl	$15, %ecx
 230 0236 89D7     		movl	%edx, %edi
 231 0238 D3E7     		sall	%cl, %edi
 232 023a 8D4E06   		leal	6(%rsi), %ecx
 233 023d 01C7     		addl	%eax, %edi
 234 023f 41F6C020 		testb	$32, %r8b
 235 0243 0F44F8   		cmove	%eax, %edi
 236 0246 83E10F   		andl	$15, %ecx
 237 0249 89D0     		movl	%edx, %eax
 238 024b D3E0     		sall	%cl, %eax
 239 024d 8D4E07   		leal	7(%rsi), %ecx
 240 0250 01F8     		addl	%edi, %eax
 241 0252 41F6C040 		testb	$64, %r8b
 242 0256 0F44C7   		cmove	%edi, %eax
 243 0259 83E10F   		andl	$15, %ecx
 244 025c 89D7     		movl	%edx, %edi
 245 025e D3E7     		sall	%cl, %edi
 246 0260 8D4E08   		leal	8(%rsi), %ecx
 247 0263 01C7     		addl	%eax, %edi
 248 0265 41F6C080 		testb	$-128, %r8b
 249 0269 0F44F8   		cmove	%eax, %edi
 250 026c 83E10F   		andl	$15, %ecx
 251 026f 89D0     		movl	%edx, %eax
 252 0271 D3E0     		sall	%cl, %eax
 253 0273 8D4E09   		leal	9(%rsi), %ecx
 254 0276 01F8     		addl	%edi, %eax
 255 0278 41F7C000 		testl	$256, %r8d
 255      010000
 256 027f 0F44C7   		cmove	%edi, %eax
 257 0282 83E10F   		andl	$15, %ecx
 258 0285 89D7     		movl	%edx, %edi
 259 0287 D3E7     		sall	%cl, %edi
 260 0289 8D4E0A   		leal	10(%rsi), %ecx
 261 028c 01C7     		addl	%eax, %edi
 262 028e 41F7C000 		testl	$512, %r8d
 262      020000
 263 0295 0F44F8   		cmove	%eax, %edi
 264 0298 83E10F   		andl	$15, %ecx
 265 029b 89D0     		movl	%edx, %eax
 266 029d D3E0     		sall	%cl, %eax
 267 029f 8D4E0B   		leal	11(%rsi), %ecx
 268 02a2 01F8     		addl	%edi, %eax
 269 02a4 41F7C000 		testl	$1024, %r8d
 269      040000
 270 02ab 0F44C7   		cmove	%edi, %eax
 271 02ae 83E10F   		andl	$15, %ecx
 272 02b1 89D7     		movl	%edx, %edi
 273 02b3 D3E7     		sall	%cl, %edi
 274 02b5 8D4E0C   		leal	12(%rsi), %ecx
 275 02b8 01C7     		addl	%eax, %edi
 276 02ba 41F7C000 		testl	$2048, %r8d
 276      080000
 277 02c1 0F44F8   		cmove	%eax, %edi
 278 02c4 83E10F   		andl	$15, %ecx
 279 02c7 89D0     		movl	%edx, %eax
 280 02c9 D3E0     		sall	%cl, %eax
 281 02cb 8D4E0D   		leal	13(%rsi), %ecx
 282 02ce 01F8     		addl	%edi, %eax
 283 02d0 41F7C000 		testl	$4096, %r8d
 283      100000
 284 02d7 0F44C7   		cmove	%edi, %eax
 285 02da 83E10F   		andl	$15, %ecx
 286 02dd 89D7     		movl	%edx, %edi
 287 02df D3E7     		sall	%cl, %edi
 288 02e1 8D4E0E   		leal	14(%rsi), %ecx
 289 02e4 01C7     		addl	%eax, %edi
 290 02e6 41F7C000 		testl	$8192, %r8d
 290      200000
 291 02ed 0F44F8   		cmove	%eax, %edi
 292 02f0 83E10F   		andl	$15, %ecx
 293 02f3 89D0     		movl	%edx, %eax
 294 02f5 D3E0     		sall	%cl, %eax
 295 02f7 8D4E0F   		leal	15(%rsi), %ecx
 296 02fa 01F8     		addl	%edi, %eax
 297 02fc 41F7C000 		testl	$16384, %r8d
 297      400000
 298 0303 0F44C7   		cmove	%edi, %eax
 299 0306 83E10F   		andl	$15, %ecx
 300 0309 41C1F80F 		sarl	$15, %r8d
 301 030d D3E2     		sall	%cl, %edx
 302 030f 01C2     		addl	%eax, %edx
 303 0311 4585C0   		testl	%r8d, %r8d
 304 0314 0F45C2   		cmovne	%edx, %eax
 305 0317 C3       		ret
 306              		.cfi_endproc
 307              	.LFE79:
 309              		.section	.rodata.str1.1,"aMS",@progbits,1
 310              	.LC0:
 311 0000 2C00     		.string	","
 312              	.LC1:
 313 0002 256400   		.string	"%d"
 314              		.text
 315 0318 0F1F8400 		.p2align 4,,15
 315      00000000 
 316              		.globl	format
 318              	format:
 319              	.LFB80:
 320              		.cfi_startproc
 321 0320 53       		pushq	%rbx
 322              		.cfi_def_cfa_offset 16
 323              		.cfi_offset 3, -16
 324 0321 BE000000 		movl	$.LC0, %esi
 324      00
 325 0326 31DB     		xorl	%ebx, %ebx
 326 0328 E8000000 		call	strtok
 326      00
 327 032d 4885C0   		testq	%rax, %rax
 328 0330 743F     		je	.L17
 329              		.p2align 4,,10
 330 0332 660F1F44 		.p2align 3
 330      0000
 331              	.L23:
 332 0338 48630D00 		movslq	numLines(%rip), %rcx
 332      000000
 333 033f 4863D3   		movslq	%ebx, %rdx
 334 0342 4889C7   		movq	%rax, %rdi
 335 0345 BE000000 		movl	$.LC1, %esi
 335      00
 336 034a 31C0     		xorl	%eax, %eax
 337 034c 83C301   		addl	$1, %ebx
 338 034f 488D148A 		leaq	(%rdx,%rcx,4), %rdx
 339 0353 488D1495 		leaq	dataFromCSV(,%rdx,4), %rdx
 339      00000000 
 340 035b E8000000 		call	sscanf
 340      00
 341 0360 31FF     		xorl	%edi, %edi
 342 0362 BE000000 		movl	$.LC0, %esi
 342      00
 343 0367 E8000000 		call	strtok
 343      00
 344 036c 4885C0   		testq	%rax, %rax
 345 036f 75C7     		jne	.L23
 346              	.L17:
 347 0371 5B       		popq	%rbx
 348              		.cfi_def_cfa_offset 8
 349 0372 C3       		ret
 350              		.cfi_endproc
 351              	.LFE80:
 353 0373 66666666 		.p2align 4,,15
 353      2E0F1F84 
 353      00000000 
 353      00
 354              		.globl	find
 356              	find:
 357              	.LFB81:
 358              		.cfi_startproc
 359 0380 448B1500 		movl	numLines(%rip), %r10d
 359      000000
 360 0387 4585D2   		testl	%r10d, %r10d
 361 038a 7E54     		jle	.L32
 362 038c B8000000 		movl	$dataFromCSV+16, %eax
 362      00
 363 0391 41B90100 		movl	$1, %r9d
 363      0000
 364 0397 EB14     		jmp	.L30
 365 0399 0F1F8000 		.p2align 4,,10
 365      000000
 366              		.p2align 3
 367              	.L28:
 368 03a0 4183C101 		addl	$1, %r9d
 369 03a4 4883C010 		addq	$16, %rax
 370 03a8 4539D1   		cmpl	%r10d, %r9d
 371 03ab 7F33     		jg	.L32
 372              	.L30:
 373 03ad 663B38   		cmpw	(%rax), %di
 374 03b0 75EE     		jne	.L28
 375 03b2 663B7004 		cmpw	4(%rax), %si
 376 03b6 75E8     		jne	.L28
 377 03b8 4963C1   		movslq	%r9d, %rax
 378 03bb 4889C6   		movq	%rax, %rsi
 379 03be 48C1E604 		salq	$4, %rsi
 380 03c2 83BE0000 		cmpl	$1, dataFromCSV+8(%rsi)
 380      000001
 381 03c9 7418     		je	.L33
 382              	.L29:
 383 03cb 48C1E004 		salq	$4, %rax
 384 03cf 8B800000 		movl	dataFromCSV+12(%rax), %eax
 384      0000
 385 03d5 8901     		movl	%eax, (%rcx)
 386 03d7 458908   		movl	%r9d, (%r8)
 387 03da B8010000 		movl	$1, %eax
 387      00
 388 03df C3       		ret
 389              		.p2align 4,,10
 390              		.p2align 3
 391              	.L32:
 392 03e0 31C0     		xorl	%eax, %eax
 393 03e2 C3       		ret
 394              	.L33:
 395 03e3 C60201   		movb	$1, (%rdx)
 396 03e6 EBE3     		jmp	.L29
 397              		.cfi_endproc
 398              	.LFE81:
 400 03e8 0F1F8400 		.p2align 4,,15
 400      00000000 
 401              		.globl	suffBalUser
 403              	suffBalUser:
 404              	.LFB82:
 405              		.cfi_startproc
 406 03f0 393E     		cmpl	%edi, (%rsi)
 407 03f2 0F9EC0   		setle	%al
 408 03f5 C3       		ret
 409              		.cfi_endproc
 410              	.LFE82:
 412              		.section	.rodata.str1.8,"aMS",@progbits,1
 413              		.align 8
 414              	.LC2:
 415 0000 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 415      20202020 
 415      20202020 
 415      76656E64 
 415      6F722049 
 416              		.section	.rodata.str1.1
 417              	.LC3:
 418 0005 3C564944 		.string	"<VID:PID>"
 418      3A504944 
 418      3E00
 419              	.LC4:
 420 000f 69767000 		.string	"ivp"
 421              	.LC5:
 422 0013 6900     		.string	"i"
 423              		.section	.rodata.str1.8
 424 0035 000000   		.align 8
 425              	.LC6:
 426 0038 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 426      20202056 
 426      49442C20 
 426      50494420 
 426      616E6420 
 427              		.section	.rodata.str1.1
 428              	.LC7:
 429 0015 3C564944 		.string	"<VID:PID[:DID]>"
 429      3A504944 
 429      5B3A4449 
 429      445D3E00 
 430              	.LC8:
 431 0025 767000   		.string	"vp"
 432              	.LC9:
 433 0028 7600     		.string	"v"
 434              		.section	.rodata.str1.8
 435 006d 000000   		.align 8
 436              	.LC10:
 437 0070 20202020 		.string	"                    sets bank id"
 437      20202020 
 437      20202020 
 437      20202020 
 437      20202020 
 438              		.section	.rodata.str1.1
 439              	.LC11:
 440 002a 62616E6B 		.string	"bank id in decimal"
 440      20696420 
 440      696E2064 
 440      6563696D 
 440      616C00
 441              	.LC12:
 442 003d 62696400 		.string	"bid"
 443              	.LC13:
 444 0041 6200     		.string	"b"
 445              		.section	.rodata.str1.8
 446 0091 00000000 		.align 8
 446      000000
 447              	.LC14:
 448 0098 20202020 		.string	"                    starts atm service"
 448      20202020 
 448      20202020 
 448      20202020 
 448      20202020 
 449              		.section	.rodata.str1.1
 450              	.LC15:
 451 0043 61746D00 		.string	"atm"
 452              	.LC16:
 453 0047 7900     		.string	"y"
 454              		.section	.rodata.str1.8
 455 00bf 00       		.align 8
 456              	.LC17:
 457 00c0 20202020 		.string	"        gives log on more events"
 457      20202020 
 457      67697665 
 457      73206C6F 
 457      67206F6E 
 458              		.section	.rodata.str1.1
 459              	.LC18:
 460 0049 6C6F6700 		.string	"log"
 461              	.LC19:
 462 004d 6C00     		.string	"l"
 463              		.section	.rodata.str1.8
 464 00e1 00000000 		.align 8
 464      000000
 465              	.LC20:
 466 00e8 20202020 		.string	"                     print this help and exit"
 466      20202020 
 466      20202020 
 466      20202020 
 466      20202020 
 467              		.section	.rodata.str1.1
 468              	.LC21:
 469 004f 68656C70 		.string	"help"
 469      00
 470              	.LC22:
 471 0054 6800     		.string	"h"
 472              	.LC23:
 473 0056 666C636C 		.string	"flcli"
 473      6900
 474              	.LC24:
 475 005c 25733A20 		.string	"%s: insufficient memory\n"
 475      696E7375 
 475      66666963 
 475      69656E74 
 475      206D656D 
 476              	.LC25:
 477 0075 496E7661 		.string	"Invalid bankID"
 477      6C696420 
 477      62616E6B 
 477      494400
 478              	.LC26:
 479 0084 25730A00 		.string	"%s\n"
 480              		.section	.rodata.str1.8
 481 0116 0000     		.align 8
 482              	.LC27:
 483 0118 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2017 Jarvis \n\n Usage: %s"
 483      4C696E6B 
 483      20436F6D 
 483      6D616E64 
 483      2D4C696E 
 484              		.section	.rodata.str1.1
 485              	.LC28:
 486 0088 0A00     		.string	"\n"
 487              		.section	.rodata.str1.8
 488 015f 00       		.align 8
 489              	.LC29:
 490 0160 0A496E74 		.string	"\nInteract with an FPGALink device.\n\n"
 490      65726163 
 490      74207769 
 490      74682061 
 490      6E204650 
 491              		.section	.rodata.str1.1
 492              	.LC30:
 493 008a 2020252D 		.string	"  %-10s %s\n"
 493      31307320 
 493      25730A00 
 494              		.section	.rodata.str1.8
 495 0185 000000   		.align 8
 496              	.LC31:
 497 0188 54727920 		.string	"Try '%s --help' for more information.\n"
 497      27257320 
 497      2D2D6865 
 497      6C702720 
 497      666F7220 
 498 01af 00       		.align 8
 499              	.LC32:
 500 01b0 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 500      6D707469 
 500      6E672074 
 500      6F206F70 
 500      656E2063 
 501              		.section	.rodata.str1.1
 502              	.LC33:
 503 0096 4C6F6164 		.string	"Loading firmware into %s...\n"
 503      696E6720 
 503      6669726D 
 503      77617265 
 503      20696E74 
 504              	.LC34:
 505 00b3 41776169 		.string	"Awaiting renumeration"
 505      74696E67 
 505      2072656E 
 505      756D6572 
 505      6174696F 
 506              	.LC35:
 507 00c9 2E00     		.string	"."
 508              		.section	.rodata.str1.8
 509              		.align 8
 510              	.LC36:
 511 01e8 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 511      4C696E6B 
 511      20646576 
 511      69636520 
 511      64696420 
 512 021b 00000000 		.align 8
 512      00
 513              	.LC37:
 514 0220 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 514      6D707469 
 514      6E672074 
 514      6F206F70 
 514      656E2063 
 515 025d 000000   		.align 8
 516              	.LC38:
 517 0260 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 517      64206E6F 
 517      74206F70 
 517      656E2046 
 517      5047414C 
 518 02aa 00000000 		.align 8
 518      0000
 519              	.LC39:
 520 02b0 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 520      65637465 
 520      6420746F 
 520      20465047 
 520      414C696E 
 521              		.section	.rodata.str1.1
 522              	.LC40:
 523 00cb 722B00   		.string	"r+"
 524              	.LC41:
 525 00ce 53616D70 		.string	"SampleBackEndDatabase.csv"
 525      6C654261 
 525      636B456E 
 525      64446174 
 525      61626173 
 526              	.LC42:
 527 00e8 43737620 		.string	"Csv doesn't exist \n"
 527      646F6573 
 527      6E277420 
 527      65786973 
 527      74200A00 
 528              	.LC43:
 529 00fc 52656164 		.string	"Read from channel 0 = %u \n"
 529      2066726F 
 529      6D206368 
 529      616E6E65 
 529      6C203020 
 530              	.LC44:
 531 0117 52656164 		.string	"Read from channel %u = %u \n"
 531      2066726F 
 531      6D206368 
 531      616E6E65 
 531      6C202575 
 532              	.LC46:
 533 0133 56616C69 		.string	"Valid user found \n"
 533      64207573 
 533      65722066 
 533      6F756E64 
 533      200A00
 534              		.section	.rodata.str1.8
 535 02ff 00       		.align 8
 536              	.LC47:
 537 0300 53756666 		.string	"Sufficient Balance in account\n"
 537      69636965 
 537      6E742042 
 537      616C616E 
 537      63652069 
 538              		.section	.rodata.str1.1
 539              	.LC48:
 540 0146 57726974 		.string	"Write to channel %u = %u \n"
 540      6520746F 
 540      20636861 
 540      6E6E656C 
 540      20257520 
 541              	.LC49:
 542 0161 772B00   		.string	"w+"
 543              		.section	.rodata.str1.8
 544 031f 00       		.align 8
 545              	.LC50:
 546 0320 22557365 		.string	"\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (decimal)\""
 546      72204944 
 546      20286465 
 546      63696D61 
 546      6C29222C 
 547              		.section	.rodata.str1.1
 548              	.LC51:
 549 0164 257300   		.string	"%s"
 550              	.LC52:
 551 0167 496E7375 		.string	"Insufficient Balance \n"
 551      66666963 
 551      69656E74 
 551      2042616C 
 551      616E6365 
 552              	.LC53:
 553 017e 55736572 		.string	"User has admin privileges \n"
 553      20686173 
 553      2061646D 
 553      696E2070 
 553      72697669 
 554              		.section	.rodata.str1.8
 555 0365 000000   		.align 8
 556              	.LC54:
 557 0368 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 557      46504741 
 557      4C696E6B 
 557      20646576 
 557      69636520 
 558 03b4 00000000 		.align 8
 559              	.LC55:
 560 03b8 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 560      6F6E2072 
 560      65717565 
 560      73746564 
 560      20627574 
 561              		.section	.rodata.str1.1
 562              	.LC56:
 563 019a 496E7661 		.string	"Invalid user \n"
 563      6C696420 
 563      75736572 
 563      200A00
 564              		.section	.text.startup,"ax",@progbits
 565              		.p2align 4,,15
 566              		.globl	main
 568              	main:
 569              	.LFB83:
 570              		.cfi_startproc
 571 0000 4157     		pushq	%r15
 572              		.cfi_def_cfa_offset 16
 573              		.cfi_offset 15, -16
 574 0002 B9000000 		movl	$.LC2, %ecx
 574      00
 575 0007 BA000000 		movl	$.LC3, %edx
 575      00
 576 000c 4156     		pushq	%r14
 577              		.cfi_def_cfa_offset 24
 578              		.cfi_offset 14, -24
 579 000e 4155     		pushq	%r13
 580              		.cfi_def_cfa_offset 32
 581              		.cfi_offset 13, -32
 582 0010 4154     		pushq	%r12
 583              		.cfi_def_cfa_offset 40
 584              		.cfi_offset 12, -40
 585 0012 55       		pushq	%rbp
 586              		.cfi_def_cfa_offset 48
 587              		.cfi_offset 6, -48
 588 0013 53       		pushq	%rbx
 589              		.cfi_def_cfa_offset 56
 590              		.cfi_offset 3, -56
 591 0014 4881ECD8 		subq	$216, %rsp
 591      000000
 592              		.cfi_def_cfa_offset 272
 593 001b 897C2418 		movl	%edi, 24(%rsp)
 594 001f 48897424 		movq	%rsi, 16(%rsp)
 594      10
 595 0024 BF000000 		movl	$.LC5, %edi
 595      00
 596 0029 BE000000 		movl	$.LC4, %esi
 596      00
 597 002e E8000000 		call	arg_str0
 597      00
 598 0033 B9000000 		movl	$.LC6, %ecx
 598      00
 599 0038 BA000000 		movl	$.LC7, %edx
 599      00
 600 003d BE000000 		movl	$.LC8, %esi
 600      00
 601 0042 BF000000 		movl	$.LC9, %edi
 601      00
 602 0047 4989C6   		movq	%rax, %r14
 603 004a E8000000 		call	arg_str1
 603      00
 604 004f B9000000 		movl	$.LC10, %ecx
 604      00
 605 0054 BA000000 		movl	$.LC11, %edx
 605      00
 606 0059 BE000000 		movl	$.LC12, %esi
 606      00
 607 005e BF000000 		movl	$.LC13, %edi
 607      00
 608 0063 4989C7   		movq	%rax, %r15
 609 0066 E8000000 		call	arg_str0
 609      00
 610 006b BA000000 		movl	$.LC14, %edx
 610      00
 611 0070 BE000000 		movl	$.LC15, %esi
 611      00
 612 0075 BF000000 		movl	$.LC16, %edi
 612      00
 613 007a 4889C3   		movq	%rax, %rbx
 614 007d E8000000 		call	arg_lit0
 614      00
 615 0082 BA000000 		movl	$.LC17, %edx
 615      00
 616 0087 BE000000 		movl	$.LC18, %esi
 616      00
 617 008c BF000000 		movl	$.LC19, %edi
 617      00
 618 0091 48894424 		movq	%rax, 8(%rsp)
 618      08
 619 0096 E8000000 		call	arg_lit0
 619      00
 620 009b BA000000 		movl	$.LC20, %edx
 620      00
 621 00a0 BE000000 		movl	$.LC21, %esi
 621      00
 622 00a5 BF000000 		movl	$.LC22, %edi
 622      00
 623 00aa 4889C5   		movq	%rax, %rbp
 624 00ad E8000000 		call	arg_lit0
 624      00
 625 00b2 BF140000 		movl	$20, %edi
 625      00
 626 00b7 4989C4   		movq	%rax, %r12
 627 00ba E8000000 		call	arg_end
 627      00
 628 00bf 4989C5   		movq	%rax, %r13
 629 00c2 488B4424 		movq	8(%rsp), %rax
 629      08
 630 00c7 488DBC24 		leaq	144(%rsp), %rdi
 630      90000000 
 631 00cf 4C89B424 		movq	%r14, 144(%rsp)
 631      90000000 
 632 00d7 4C89BC24 		movq	%r15, 152(%rsp)
 632      98000000 
 633 00df 48899C24 		movq	%rbx, 160(%rsp)
 633      A0000000 
 634 00e7 4889AC24 		movq	%rbp, 176(%rsp)
 634      B0000000 
 635 00ef 48898424 		movq	%rax, 168(%rsp)
 635      A8000000 
 636 00f7 4C89A424 		movq	%r12, 184(%rsp)
 636      B8000000 
 637 00ff 4C89AC24 		movq	%r13, 192(%rsp)
 637      C0000000 
 638 0107 48C74424 		movq	$0, 48(%rsp)
 638      30000000 
 638      00
 639 0110 48C74424 		movq	$0, 120(%rsp)
 639      78000000 
 639      00
 640 0119 E8000000 		call	arg_nullcheck
 640      00
 641 011e 85C0     		testl	%eax, %eax
 642 0120 7470     		je	.L36
 643 0122 488B3D00 		movq	stderr(%rip), %rdi
 643      000000
 644 0129 B9000000 		movl	$.LC23, %ecx
 644      00
 645 012e BA000000 		movl	$.LC24, %edx
 645      00
 646 0133 BE010000 		movl	$1, %esi
 646      00
 647 0138 31C0     		xorl	%eax, %eax
 648 013a BB010000 		movl	$1, %ebx
 648      00
 649 013f E8000000 		call	__fprintf_chk
 649      00
 650              	.L37:
 651 0144 488B7C24 		movq	48(%rsp), %rdi
 651      30
 652 0149 E8000000 		call	flClose
 652      00
 653 014e 488B4C24 		movq	120(%rsp), %rcx
 653      78
 654 0153 4885C9   		testq	%rcx, %rcx
 655 0156 7422     		je	.L150
 656 0158 488B3D00 		movq	stderr(%rip), %rdi
 656      000000
 657 015f BA000000 		movl	$.LC26, %edx
 657      00
 658 0164 BE010000 		movl	$1, %esi
 658      00
 659 0169 31C0     		xorl	%eax, %eax
 660 016b E8000000 		call	__fprintf_chk
 660      00
 661 0170 488B7C24 		movq	120(%rsp), %rdi
 661      78
 662 0175 E8000000 		call	flFreeError
 662      00
 663              	.L150:
 664 017a 4189D9   		movl	%ebx, %r9d
 665              	.L206:
 666 017d 4881C4D8 		addq	$216, %rsp
 666      000000
 667              		.cfi_remember_state
 668              		.cfi_def_cfa_offset 56
 669 0184 4489C8   		movl	%r9d, %eax
 670 0187 5B       		popq	%rbx
 671              		.cfi_def_cfa_offset 48
 672 0188 5D       		popq	%rbp
 673              		.cfi_def_cfa_offset 40
 674 0189 415C     		popq	%r12
 675              		.cfi_def_cfa_offset 32
 676 018b 415D     		popq	%r13
 677              		.cfi_def_cfa_offset 24
 678 018d 415E     		popq	%r14
 679              		.cfi_def_cfa_offset 16
 680 018f 415F     		popq	%r15
 681              		.cfi_def_cfa_offset 8
 682 0191 C3       		ret
 683              	.L36:
 684              		.cfi_restore_state
 685 0192 488B7424 		movq	16(%rsp), %rsi
 685      10
 686 0197 8B7C2418 		movl	24(%rsp), %edi
 687 019b 488D9424 		leaq	144(%rsp), %rdx
 687      90000000 
 688 01a3 8944241C 		movl	%eax, 28(%rsp)
 689 01a7 E8000000 		call	arg_parse
 689      00
 690 01ac 837D6000 		cmpl	$0, 96(%rbp)
 691 01b0 89C1     		movl	%eax, %ecx
 692 01b2 448B4C24 		movl	28(%rsp), %r9d
 692      1C
 693 01b7 7E07     		jle	.L38
 694 01b9 C6050000 		movb	$1, LOG(%rip)
 694      000001
 695              	.L38:
 696 01c0 837B6000 		cmpl	$0, 96(%rbx)
 697 01c4 7E34     		jle	.L39
 698 01c6 488B4368 		movq	104(%rbx), %rax
 699 01ca 31F6     		xorl	%esi, %esi
 700 01cc BA0A0000 		movl	$10, %edx
 700      00
 701 01d1 894C2410 		movl	%ecx, 16(%rsp)
 702 01d5 44894C24 		movl	%r9d, 24(%rsp)
 702      18
 703 01da 488B38   		movq	(%rax), %rdi
 704 01dd E8000000 		call	strtol
 704      00
 705 01e2 83F81F   		cmpl	$31, %eax
 706 01e5 89050000 		movl	%eax, bankID(%rip)
 706      0000
 707 01eb 448B4C24 		movl	24(%rsp), %r9d
 707      18
 708 01f0 8B4C2410 		movl	16(%rsp), %ecx
 709 01f4 0F874001 		ja	.L214
 709      0000
 710              	.L39:
 711 01fa 41837C24 		cmpl	$0, 96(%r12)
 711      6000
 712 0200 7E60     		jle	.L41
 713 0202 BA000000 		movl	$.LC23, %edx
 713      00
 714 0207 BE000000 		movl	$.LC27, %esi
 714      00
 715 020c BF010000 		movl	$1, %edi
 715      00
 716 0211 31C0     		xorl	%eax, %eax
 717 0213 31DB     		xorl	%ebx, %ebx
 718 0215 E8000000 		call	__printf_chk
 718      00
 719 021a 488B3D00 		movq	stdout(%rip), %rdi
 719      000000
 720 0221 488DB424 		leaq	144(%rsp), %rsi
 720      90000000 
 721 0229 BA000000 		movl	$.LC28, %edx
 721      00
 722 022e E8000000 		call	arg_print_syntax
 722      00
 723 0233 BE000000 		movl	$.LC29, %esi
 723      00
 724 0238 BF010000 		movl	$1, %edi
 724      00
 725 023d 31C0     		xorl	%eax, %eax
 726 023f E8000000 		call	__printf_chk
 726      00
 727 0244 488B3D00 		movq	stdout(%rip), %rdi
 727      000000
 728 024b 488DB424 		leaq	144(%rsp), %rsi
 728      90000000 
 729 0253 BA000000 		movl	$.LC30, %edx
 729      00
 730 0258 E8000000 		call	arg_print_glossary
 730      00
 731 025d E9E2FEFF 		jmp	.L37
 731      FF
 732              	.L41:
 733 0262 85C9     		testl	%ecx, %ecx
 734 0264 7E3B     		jle	.L42
 735 0266 488B3D00 		movq	stdout(%rip), %rdi
 735      000000
 736 026d BA000000 		movl	$.LC23, %edx
 736      00
 737 0272 4C89EE   		movq	%r13, %rsi
 738 0275 E8000000 		call	arg_print_errors
 738      00
 739 027a B9000000 		movl	$.LC23, %ecx
 739      00
 740 027f BA000000 		movl	$.LC31, %edx
 740      00
 741              	.L212:
 742 0284 488B3D00 		movq	stderr(%rip), %rdi
 742      000000
 743 028b BE010000 		movl	$1, %esi
 743      00
 744 0290 31C0     		xorl	%eax, %eax
 745 0292 BB0C0000 		movl	$12, %ebx
 745      00
 746 0297 E8000000 		call	__fprintf_chk
 746      00
 747 029c E9A3FEFF 		jmp	.L37
 747      FF
 748              	.L42:
 749 02a1 488D7424 		leaq	120(%rsp), %rsi
 749      78
 750 02a6 31FF     		xorl	%edi, %edi
 751 02a8 44894C24 		movl	%r9d, 24(%rsp)
 751      18
 752 02ad BB010000 		movl	$1, %ebx
 752      00
 753 02b2 E8000000 		call	flInitialise
 753      00
 754 02b7 85C0     		testl	%eax, %eax
 755 02b9 0F8585FE 		jne	.L37
 755      FFFF
 756 02bf 498B4768 		movq	104(%r15), %rax
 757 02c3 BE000000 		movl	$.LC32, %esi
 757      00
 758 02c8 BF010000 		movl	$1, %edi
 758      00
 759 02cd 488B18   		movq	(%rax), %rbx
 760 02d0 31C0     		xorl	%eax, %eax
 761 02d2 4889DA   		movq	%rbx, %rdx
 762 02d5 E8000000 		call	__printf_chk
 762      00
 763 02da 488D7424 		leaq	48(%rsp), %rsi
 763      30
 764 02df 31D2     		xorl	%edx, %edx
 765 02e1 4889DF   		movq	%rbx, %rdi
 766 02e4 E8000000 		call	flOpen
 766      00
 767 02e9 85C0     		testl	%eax, %eax
 768 02eb 448B4C24 		movl	24(%rsp), %r9d
 768      18
 769 02f0 0F84AA00 		je	.L43
 769      0000
 770 02f6 41837E60 		cmpl	$0, 96(%r14)
 770      00
 771 02fb 7462     		je	.L44
 772 02fd 498B4668 		movq	104(%r14), %rax
 773 0301 BE000000 		movl	$.LC33, %esi
 773      00
 774 0306 BF010000 		movl	$1, %edi
 774      00
 775 030b 488B28   		movq	(%rax), %rbp
 776 030e 31C0     		xorl	%eax, %eax
 777 0310 4889EA   		movq	%rbp, %rdx
 778 0313 E8000000 		call	__printf_chk
 778      00
 779 0318 488D5424 		leaq	120(%rsp), %rdx
 779      78
 780 031d 4889DE   		movq	%rbx, %rsi
 781 0320 4889EF   		movq	%rbp, %rdi
 782 0323 E8000000 		call	flLoadStandardFirmware
 782      00
 783 0328 85C0     		testl	%eax, %eax
 784 032a 0F84C401 		je	.L215
 784      0000
 785              	.L148:
 786 0330 BB010000 		movl	$1, %ebx
 786      00
 787 0335 E90AFEFF 		jmp	.L37
 787      FF
 788              	.L214:
 789 033a 44894C24 		movl	%r9d, 8(%rsp)
 789      08
 790              	.L213:
 791 033f BA000000 		movl	$.LC25, %edx
 791      00
 792 0344 BE000000 		movl	$.LC26, %esi
 792      00
 793 0349 BF010000 		movl	$1, %edi
 793      00
 794 034e 31C0     		xorl	%eax, %eax
 795 0350 E8000000 		call	__printf_chk
 795      00
 796 0355 448B4C24 		movl	8(%rsp), %r9d
 796      08
 797 035a E91EFEFF 		jmp	.L206
 797      FF
 798              	.L44:
 799 035f 4889D9   		movq	%rbx, %rcx
 800 0362 BA000000 		movl	$.LC38, %edx
 800      00
 801 0367 E918FFFF 		jmp	.L212
 801      FF
 802              	.L48:
 803 036c 4889DA   		movq	%rbx, %rdx
 804 036f BE000000 		movl	$.LC37, %esi
 804      00
 805 0374 BF010000 		movl	$1, %edi
 805      00
 806 0379 31C0     		xorl	%eax, %eax
 807 037b 44894C24 		movl	%r9d, 24(%rsp)
 807      18
 808 0380 E8000000 		call	__printf_chk
 808      00
 809 0385 488D5424 		leaq	120(%rsp), %rdx
 809      78
 810 038a 488D7424 		leaq	48(%rsp), %rsi
 810      30
 811 038f 4889DF   		movq	%rbx, %rdi
 812 0392 E8000000 		call	flOpen
 812      00
 813 0397 85C0     		testl	%eax, %eax
 814 0399 448B4C24 		movl	24(%rsp), %r9d
 814      18
 815 039e 7590     		jne	.L148
 816              	.L43:
 817 03a0 488B7C24 		movq	48(%rsp), %rdi
 817      30
 818 03a5 44894C24 		movl	%r9d, 24(%rsp)
 818      18
 819 03aa E8000000 		call	flGetFirmwareVersion
 819      00
 820 03af 488B7C24 		movq	48(%rsp), %rdi
 820      30
 821 03b4 89C5     		movl	%eax, %ebp
 822 03b6 E8000000 		call	flGetFirmwareID
 822      00
 823 03bb 4189E8   		movl	%ebp, %r8d
 824 03be 0FB7C8   		movzwl	%ax, %ecx
 825 03c1 4889DA   		movq	%rbx, %rdx
 826 03c4 BE000000 		movl	$.LC39, %esi
 826      00
 827 03c9 BF010000 		movl	$1, %edi
 827      00
 828 03ce 31C0     		xorl	%eax, %eax
 829 03d0 E8000000 		call	__printf_chk
 829      00
 830 03d5 488B7C24 		movq	48(%rsp), %rdi
 830      30
 831 03da BE010000 		movl	$1, %esi
 831      00
 832 03df E8000000 		call	flIsCommCapable
 832      00
 833 03e4 488B4C24 		movq	8(%rsp), %rcx
 833      08
 834 03e9 83796000 		cmpl	$0, 96(%rcx)
 835 03ed 0F8ECC01 		jle	.L161
 835      0000
 836 03f3 84C0     		testb	%al, %al
 837 03f5 448B4C24 		movl	24(%rsp), %r9d
 837      18
 838 03fa 0F84E700 		je	.L50
 838      0000
 839 0400 488B7C24 		movq	48(%rsp), %rdi
 839      30
 840 0405 488D5424 		leaq	120(%rsp), %rdx
 840      78
 841 040a BE010000 		movl	$1, %esi
 841      00
 842 040f 44894C24 		movl	%r9d, 8(%rsp)
 842      08
 843 0414 E8000000 		call	flSelectConduit
 843      00
 844 0419 85C0     		testl	%eax, %eax
 845 041b 448B4C24 		movl	8(%rsp), %r9d
 845      08
 846 0420 0F850AFF 		jne	.L148
 846      FFFF
 847 0426 488B7C24 		movq	48(%rsp), %rdi
 847      30
 848 042b 488D5424 		leaq	120(%rsp), %rdx
 848      78
 849 0430 488D7424 		leaq	32(%rsp), %rsi
 849      20
 850 0435 44894C24 		movl	%r9d, 8(%rsp)
 850      08
 851 043a E8000000 		call	flIsFPGARunning
 851      00
 852 043f 85C0     		testl	%eax, %eax
 853 0441 0F85E9FE 		jne	.L148
 853      FFFF
 854 0447 807C2420 		cmpb	$0, 32(%rsp)
 854      00
 855 044c 0F847401 		je	.L54
 855      0000
 856 0452 BE000000 		movl	$.LC40, %esi
 856      00
 857 0457 BF000000 		movl	$.LC41, %edi
 857      00
 858 045c E8000000 		call	fopen
 858      00
 859 0461 4885C0   		testq	%rax, %rax
 860 0464 4889C3   		movq	%rax, %rbx
 861 0467 448B4C24 		movl	8(%rsp), %r9d
 861      08
 862 046c 0F84C408 		je	.L216
 862      0000
 863 0472 BF640000 		movl	$100, %edi
 863      00
 864 0477 44894C24 		movl	%r9d, 8(%rsp)
 864      08
 865 047c 48C74424 		movq	$100, 64(%rsp)
 865      40640000 
 865      00
 866 0485 E8000000 		call	malloc
 866      00
 867 048a 448B4C24 		movl	8(%rsp), %r9d
 867      08
 868 048f 48894424 		movq	%rax, 80(%rsp)
 868      50
 869 0494 EB07     		jmp	.L57
 870              	.L58:
 871 0496 83050000 		addl	$1, numLines(%rip)
 871      000001
 872              	.L57:
 873 049d 488D7424 		leaq	64(%rsp), %rsi
 873      40
 874 04a2 488D7C24 		leaq	80(%rsp), %rdi
 874      50
 875 04a7 4889D9   		movq	%rbx, %rcx
 876 04aa BA0A0000 		movl	$10, %edx
 876      00
 877 04af 44894C24 		movl	%r9d, 8(%rsp)
 877      08
 878 04b4 E8000000 		call	__getdelim
 878      00
 879 04b9 4883C001 		addq	$1, %rax
 880 04bd 448B4C24 		movl	8(%rsp), %r9d
 880      08
 881 04c2 0F840B01 		je	.L217
 881      0000
 882 04c8 833D0000 		cmpl	$0, numLines(%rip)
 882      000000
 883 04cf 74C5     		je	.L58
 884 04d1 488B7C24 		movq	80(%rsp), %rdi
 884      50
 885 04d6 44894C24 		movl	%r9d, 8(%rsp)
 885      08
 886 04db E8000000 		call	format
 886      00
 887 04e0 448B4C24 		movl	8(%rsp), %r9d
 887      08
 888 04e5 EBAF     		jmp	.L58
 889              	.L50:
 890 04e7 4889D9   		movq	%rbx, %rcx
 891 04ea BA000000 		movl	$.LC55, %edx
 891      00
 892 04ef E990FDFF 		jmp	.L212
 892      FF
 893              	.L215:
 894 04f4 BE000000 		movl	$.LC34, %esi
 894      00
 895 04f9 BF010000 		movl	$1, %edi
 895      00
 896 04fe BD3C0000 		movl	$60, %ebp
 896      00
 897 0503 E8000000 		call	__printf_chk
 897      00
 898 0508 BFE80300 		movl	$1000, %edi
 898      00
 899 050d E8000000 		call	flSleep
 899      00
 900 0512 448B4C24 		movl	24(%rsp), %r9d
 900      18
 901 0517 EB05     		jmp	.L47
 902              	.L218:
 903 0519 83ED01   		subl	$1, %ebp
 904 051c 7458     		je	.L46
 905              	.L47:
 906 051e BE000000 		movl	$.LC35, %esi
 906      00
 907 0523 BF010000 		movl	$1, %edi
 907      00
 908 0528 31C0     		xorl	%eax, %eax
 909 052a 44894C24 		movl	%r9d, 24(%rsp)
 909      18
 910 052f E8000000 		call	__printf_chk
 910      00
 911 0534 488B3D00 		movq	stdout(%rip), %rdi
 911      000000
 912 053b E8000000 		call	fflush
 912      00
 913 0540 488D5424 		leaq	120(%rsp), %rdx
 913      78
 914 0545 488DB424 		leaq	128(%rsp), %rsi
 914      80000000 
 915 054d 4889DF   		movq	%rbx, %rdi
 916 0550 E8000000 		call	flIsDeviceAvailable
 916      00
 917 0555 85C0     		testl	%eax, %eax
 918 0557 0F85D3FD 		jne	.L148
 918      FFFF
 919 055d BFFA0000 		movl	$250, %edi
 919      00
 920 0562 E8000000 		call	flSleep
 920      00
 921 0567 80BC2480 		cmpb	$0, 128(%rsp)
 921      00000000 
 922 056f 448B4C24 		movl	24(%rsp), %r9d
 922      18
 923 0574 74A3     		je	.L218
 924              	.L46:
 925 0576 31C0     		xorl	%eax, %eax
 926 0578 BE000000 		movl	$.LC28, %esi
 926      00
 927 057d BF010000 		movl	$1, %edi
 927      00
 928 0582 44894C24 		movl	%r9d, 24(%rsp)
 928      18
 929 0587 E8000000 		call	__printf_chk
 929      00
 930 058c 80BC2480 		cmpb	$0, 128(%rsp)
 930      00000000 
 931 0594 448B4C24 		movl	24(%rsp), %r9d
 931      18
 932 0599 0F85CDFD 		jne	.L48
 932      FFFF
 933 059f 488B3D00 		movq	stderr(%rip), %rdi
 933      000000
 934 05a6 4889D9   		movq	%rbx, %rcx
 935 05a9 BA000000 		movl	$.LC36, %edx
 935      00
 936 05ae BE010000 		movl	$1, %esi
 936      00
 937 05b3 31C0     		xorl	%eax, %eax
 938 05b5 E8000000 		call	__fprintf_chk
 938      00
 939 05ba E971FDFF 		jmp	.L148
 939      FF
 940              	.L161:
 941 05bf 31DB     		xorl	%ebx, %ebx
 942 05c1 E97EFBFF 		jmp	.L37
 942      FF
 943              	.L54:
 944 05c6 4889D9   		movq	%rbx, %rcx
 945 05c9 BA000000 		movl	$.LC54, %edx
 945      00
 946 05ce E9B1FCFF 		jmp	.L212
 946      FF
 947              	.L217:
 948 05d3 488B7C24 		movq	80(%rsp), %rdi
 948      50
 949 05d8 832D0000 		subl	$1, numLines(%rip)
 949      000001
 950 05df E8000000 		call	free
 950      00
 951 05e4 4889DF   		movq	%rbx, %rdi
 952 05e7 E8000000 		call	fclose
 952      00
 953 05ec 833D0000 		cmpl	$31, bankID(%rip)
 953      00001F
 954 05f3 760F     		jbe	.L210
 955 05f5 E945FDFF 		jmp	.L213
 955      FF
 956              	.L147:
 957 05fa BFE80300 		movl	$1000, %edi
 957      00
 958 05ff E8000000 		call	flSleep
 958      00
 959              	.L210:
 960 0604 BF010000 		movl	$1, %edi
 960      00
 961 0609 E8000000 		call	malloc
 961      00
 962 060e 488B7C24 		movq	48(%rsp), %rdi
 962      30
 963 0613 4C8D4424 		leaq	120(%rsp), %r8
 963      78
 964 0618 31F6     		xorl	%esi, %esi
 965 061a 4889C1   		movq	%rax, %rcx
 966 061d BA010000 		movl	$1, %edx
 966      00
 967 0622 4889C5   		movq	%rax, %rbp
 968 0625 E8000000 		call	flReadChannel
 968      00
 969 062a 85C0     		testl	%eax, %eax
 970 062c 0F85FEFC 		jne	.L148
 970      FFFF
 971 0632 803D0000 		cmpb	$0, LOG(%rip)
 971      000000
 972 0639 7413     		je	.L62
 973 063b 0FB65500 		movzbl	0(%rbp), %edx
 974 063f BE000000 		movl	$.LC43, %esi
 974      00
 975 0644 BF010000 		movl	$1, %edi
 975      00
 976 0649 E8000000 		call	__printf_chk
 976      00
 977              	.L62:
 978 064e 440FB665 		movzbl	0(%rbp), %r12d
 978      00
 979 0653 418D4424 		leal	-1(%r12), %eax
 979      FF
 980 0658 3C01     		cmpb	$1, %al
 981 065a 779E     		ja	.L147
 982 065c BB020000 		movl	$2, %ebx
 982      00
 983              	.L66:
 984 0661 BFE80300 		movl	$1000, %edi
 984      00
 985 0666 E8000000 		call	flSleep
 985      00
 986 066b 488B7C24 		movq	48(%rsp), %rdi
 986      30
 987 0670 4C8D4424 		leaq	120(%rsp), %r8
 987      78
 988 0675 31F6     		xorl	%esi, %esi
 989 0677 4889E9   		movq	%rbp, %rcx
 990 067a BA010000 		movl	$1, %edx
 990      00
 991 067f E8000000 		call	flReadChannel
 991      00
 992 0684 85C0     		testl	%eax, %eax
 993 0686 0F85A4FC 		jne	.L148
 993      FFFF
 994 068c 803D0000 		cmpb	$0, LOG(%rip)
 994      000000
 995 0693 0F85B100 		jne	.L219
 995      0000
 996              	.L64:
 997 0699 443A6500 		cmpb	0(%rbp), %r12b
 998 069d 0F8557FF 		jne	.L147
 998      FFFF
 999 06a3 80EB01   		subb	$1, %bl
 1000 06a6 75B9     		jne	.L66
 1001 06a8 C7442460 		movl	$0, 96(%rsp)
 1001      00000000 
 1002 06b0 C7442464 		movl	$0, 100(%rsp)
 1002      00000000 
 1003 06b8 4531ED   		xorl	%r13d, %r13d
 1004 06bb BB010000 		movl	$1, %ebx
 1004      00
 1005 06c0 EB19     		jmp	.L151
 1006              	.L222:
 1007 06c2 4489E9   		movl	%r13d, %ecx
 1008 06c5 D3E0     		sall	%cl, %eax
 1009 06c7 01442460 		addl	%eax, 96(%rsp)
 1010              	.L70:
 1011 06cb 83C301   		addl	$1, %ebx
 1012 06ce 4183C508 		addl	$8, %r13d
 1013 06d2 83FB09   		cmpl	$9, %ebx
 1014 06d5 0F848700 		je	.L220
 1014      0000
 1015              	.L151:
 1016 06db BF010000 		movl	$1, %edi
 1016      00
 1017 06e0 E8000000 		call	malloc
 1017      00
 1018 06e5 BFE80300 		movl	$1000, %edi
 1018      00
 1019 06ea 4989C4   		movq	%rax, %r12
 1020 06ed E8000000 		call	flSleep
 1020      00
 1021 06f2 488B7C24 		movq	48(%rsp), %rdi
 1021      30
 1022 06f7 4C8D4424 		leaq	120(%rsp), %r8
 1022      78
 1023 06fc 4C89E1   		movq	%r12, %rcx
 1024 06ff BA010000 		movl	$1, %edx
 1024      00
 1025 0704 89DE     		movl	%ebx, %esi
 1026 0706 E8000000 		call	flReadChannel
 1026      00
 1027 070b 85C0     		testl	%eax, %eax
 1028 070d 0F851DFC 		jne	.L148
 1028      FFFF
 1029 0713 803D0000 		cmpb	$0, LOG(%rip)
 1029      000000
 1030 071a 7516     		jne	.L221
 1031              	.L68:
 1032 071c 83FB04   		cmpl	$4, %ebx
 1033 071f 410FB604 		movzbl	(%r12), %eax
 1033      24
 1034 0724 769C     		jbe	.L222
 1035 0726 418D4DE0 		leal	-32(%r13), %ecx
 1036 072a D3E0     		sall	%cl, %eax
 1037 072c 01442464 		addl	%eax, 100(%rsp)
 1038 0730 EB99     		jmp	.L70
 1039              	.L221:
 1040 0732 410FB60C 		movzbl	(%r12), %ecx
 1040      24
 1041 0737 89DA     		movl	%ebx, %edx
 1042 0739 BE000000 		movl	$.LC44, %esi
 1042      00
 1043 073e BF010000 		movl	$1, %edi
 1043      00
 1044 0743 E8000000 		call	__printf_chk
 1044      00
 1045 0748 EBD2     		jmp	.L68
 1046              	.L219:
 1047 074a 0FB65500 		movzbl	0(%rbp), %edx
 1048 074e BE000000 		movl	$.LC43, %esi
 1048      00
 1049 0753 BF010000 		movl	$1, %edi
 1049      00
 1050 0758 E8000000 		call	__printf_chk
 1050      00
 1051 075d E937FFFF 		jmp	.L64
 1051      FF
 1052              	.L220:
 1053 0762 660F6F05 		movdqa	.LC45(%rip), %xmm0
 1053      00000000 
 1054 076a 488DB424 		leaq	128(%rsp), %rsi
 1054      80000000 
 1055 0772 488D7C24 		leaq	96(%rsp), %rdi
 1055      60
 1056 0777 4531F6   		xorl	%r14d, %r14d
 1057 077a 660F7F84 		movdqa	%xmm0, 128(%rsp)
 1057      24800000 
 1057      00
 1058 0783 E8000000 		call	decrypt
 1058      00
 1059 0788 31D2     		xorl	%edx, %edx
 1060 078a 31F6     		xorl	%esi, %esi
 1061 078c B8010000 		movl	$1, %eax
 1061      00
 1062 0791 8B7C2464 		movl	100(%rsp), %edi
 1063 0795 EB14     		jmp	.L75
 1064              	.L224:
 1065 0797 D3E3     		sall	%cl, %ebx
 1066 0799 448D041E 		leal	(%rsi,%rbx), %r8d
 1067 079d 85FB     		testl	%edi, %ebx
 1068 079f 410F45F0 		cmovne	%r8d, %esi
 1069              	.L73:
 1070 07a3 83C201   		addl	$1, %edx
 1071 07a6 83FA20   		cmpl	$32, %edx
 1072 07a9 741F     		je	.L223
 1073              	.L75:
 1074 07ab 8D4A01   		leal	1(%rdx), %ecx
 1075 07ae 89C3     		movl	%eax, %ebx
 1076 07b0 6683F910 		cmpw	$16, %cx
 1077 07b4 89D1     		movl	%edx, %ecx
 1078 07b6 76DF     		jbe	.L224
 1079 07b8 D3E3     		sall	%cl, %ebx
 1080 07ba 85DF     		testl	%ebx, %edi
 1081 07bc 74E5     		je	.L73
 1082 07be 8D4AF0   		leal	-16(%rdx), %ecx
 1083 07c1 89C3     		movl	%eax, %ebx
 1084 07c3 D3E3     		sall	%cl, %ebx
 1085 07c5 4101DE   		addl	%ebx, %r14d
 1086 07c8 EBD9     		jmp	.L73
 1087              	.L223:
 1088 07ca 0FB73D00 		movzwl	bankID(%rip), %edi
 1088      000000
 1089 07d1 31C0     		xorl	%eax, %eax
 1090 07d3 4531E4   		xorl	%r12d, %r12d
 1091 07d6 0FB7F6   		movzwl	%si, %esi
 1092 07d9 B201     		movb	$1, %dl
 1093 07db 83E70F   		andl	$15, %edi
 1094              	.L77:
 1095 07de 8D0C07   		leal	(%rdi,%rax), %ecx
 1096 07e1 4189D0   		movl	%edx, %r8d
 1097 07e4 89F3     		movl	%esi, %ebx
 1098 07e6 83E10F   		andl	$15, %ecx
 1099 07e9 41D3E0   		sall	%cl, %r8d
 1100 07ec 89C1     		movl	%eax, %ecx
 1101 07ee D3FB     		sarl	%cl, %ebx
 1102 07f0 4501E0   		addl	%r12d, %r8d
 1103 07f3 89D9     		movl	%ebx, %ecx
 1104 07f5 80E101   		andb	$1, %cl
 1105 07f8 450F45E0 		cmovne	%r8d, %r12d
 1106 07fc 83C001   		addl	$1, %eax
 1107 07ff 83F810   		cmpl	$16, %eax
 1108 0802 75DA     		jne	.L77
 1109 0804 BF010000 		movl	$1, %edi
 1109      00
 1110 0809 41BD0100 		movl	$1, %r13d
 1110      0000
 1111 080f E8000000 		call	malloc
 1111      00
 1112 0814 8B150000 		movl	numLines(%rip), %edx
 1112      0000
 1113 081a 4889C3   		movq	%rax, %rbx
 1114 081d B8000000 		movl	$dataFromCSV+20, %eax
 1114      00
 1115 0822 EB08     		jmp	.L78
 1116              	.L79:
 1117 0824 4183C501 		addl	$1, %r13d
 1118 0828 4883C010 		addq	$16, %rax
 1119              	.L78:
 1120 082c 4139D5   		cmpl	%edx, %r13d
 1121 082f 0F8F2C01 		jg	.L225
 1121      0000
 1122 0835 66443B70 		cmpw	-4(%rax), %r14w
 1122      FC
 1123 083a 75E8     		jne	.L79
 1124 083c 66443B20 		cmpw	(%rax), %r12w
 1125 0840 75E2     		jne	.L79
 1126 0842 4D63ED   		movslq	%r13d, %r13
 1127 0845 BE000000 		movl	$.LC46, %esi
 1127      00
 1128 084a BF010000 		movl	$1, %edi
 1128      00
 1129 084f 4C89E8   		movq	%r13, %rax
 1130 0852 48C1E004 		salq	$4, %rax
 1131 0856 448BA000 		movl	dataFromCSV+8(%rax), %r12d
 1131      000000
 1132 085d 448BB000 		movl	dataFromCSV+12(%rax), %r14d
 1132      000000
 1133 0864 31C0     		xorl	%eax, %eax
 1134 0866 E8000000 		call	__printf_chk
 1134      00
 1135 086b 4183EC01 		subl	$1, %r12d
 1136 086f 0F84DC04 		je	.L226
 1136      0000
 1137 0875 448B6424 		movl	96(%rsp), %r12d
 1137      60
 1138 087a 4539F4   		cmpl	%r14d, %r12d
 1139 087d 0F8EB901 		jle	.L227
 1139      0000
 1140 0883 803D0000 		cmpb	$0, LOG(%rip)
 1140      000000
 1141 088a 7411     		je	.L155
 1142 088c BE000000 		movl	$.LC52, %esi
 1142      00
 1143 0891 BF010000 		movl	$1, %edi
 1143      00
 1144 0896 31C0     		xorl	%eax, %eax
 1145 0898 E8000000 		call	__printf_chk
 1145      00
 1146              	.L155:
 1147 089d C60302   		movb	$2, (%rbx)
 1148 08a0 BFE80300 		movl	$1000, %edi
 1148      00
 1149 08a5 E8000000 		call	flSleep
 1149      00
 1150 08aa 803D0000 		cmpb	$0, LOG(%rip)
 1150      000000
 1151 08b1 7419     		je	.L110
 1152 08b3 0FB60B   		movzbl	(%rbx), %ecx
 1153 08b6 BA090000 		movl	$9, %edx
 1153      00
 1154 08bb BE000000 		movl	$.LC48, %esi
 1154      00
 1155 08c0 BF010000 		movl	$1, %edi
 1155      00
 1156 08c5 31C0     		xorl	%eax, %eax
 1157 08c7 E8000000 		call	__printf_chk
 1157      00
 1158              	.L110:
 1159 08cc 488B7C24 		movq	48(%rsp), %rdi
 1159      30
 1160 08d1 4C8D4424 		leaq	120(%rsp), %r8
 1160      78
 1161 08d6 4889D9   		movq	%rbx, %rcx
 1162 08d9 BA010000 		movl	$1, %edx
 1162      00
 1163 08de BE090000 		movl	$9, %esi
 1163      00
 1164 08e3 E8000000 		call	flWriteChannel
 1164      00
 1165 08e8 85C0     		testl	%eax, %eax
 1166 08ea 0F8540FA 		jne	.L148
 1166      FFFF
 1167 08f0 BB0A0000 		movl	$10, %ebx
 1167      00
 1168 08f5 EB32     		jmp	.L114
 1169              	.L111:
 1170 08f7 488B7C24 		movq	48(%rsp), %rdi
 1170      30
 1171 08fc 4C8D4424 		leaq	120(%rsp), %r8
 1171      78
 1172 0901 488D8C24 		leaq	128(%rsp), %rcx
 1172      80000000 
 1173 0909 BA010000 		movl	$1, %edx
 1173      00
 1174 090e 89DE     		movl	%ebx, %esi
 1175 0910 E8000000 		call	flWriteChannel
 1175      00
 1176 0915 85C0     		testl	%eax, %eax
 1177 0917 0F8513FA 		jne	.L148
 1177      FFFF
 1178 091d 83C301   		addl	$1, %ebx
 1179 0920 83FB12   		cmpl	$18, %ebx
 1180 0923 0F84D1FC 		je	.L147
 1180      FFFF
 1181              	.L114:
 1182 0929 BFE80300 		movl	$1000, %edi
 1182      00
 1183 092e C6842480 		movb	$0, 128(%rsp)
 1183      00000000 
 1184 0936 E8000000 		call	flSleep
 1184      00
 1185 093b 803D0000 		cmpb	$0, LOG(%rip)
 1185      000000
 1186 0942 74B3     		je	.L111
 1187 0944 0FB68C24 		movzbl	128(%rsp), %ecx
 1187      80000000 
 1188 094c 89DA     		movl	%ebx, %edx
 1189 094e BE000000 		movl	$.LC48, %esi
 1189      00
 1190 0953 BF010000 		movl	$1, %edi
 1190      00
 1191 0958 31C0     		xorl	%eax, %eax
 1192 095a E8000000 		call	__printf_chk
 1192      00
 1193 095f EB96     		jmp	.L111
 1194              	.L225:
 1195 0961 BE000000 		movl	$.LC56, %esi
 1195      00
 1196 0966 BF010000 		movl	$1, %edi
 1196      00
 1197 096b 31C0     		xorl	%eax, %eax
 1198 096d E8000000 		call	__printf_chk
 1198      00
 1199 0972 C60304   		movb	$4, (%rbx)
 1200 0975 BFE80300 		movl	$1000, %edi
 1200      00
 1201 097a E8000000 		call	flSleep
 1201      00
 1202 097f 803D0000 		cmpb	$0, LOG(%rip)
 1202      000000
 1203 0986 0F859200 		jne	.L228
 1203      0000
 1204              	.L153:
 1205 098c 488B7C24 		movq	48(%rsp), %rdi
 1205      30
 1206 0991 4C8D4424 		leaq	120(%rsp), %r8
 1206      78
 1207 0996 4889D9   		movq	%rbx, %rcx
 1208 0999 BA010000 		movl	$1, %edx
 1208      00
 1209 099e BE090000 		movl	$9, %esi
 1209      00
 1210 09a3 E8000000 		call	flWriteChannel
 1210      00
 1211 09a8 85C0     		testl	%eax, %eax
 1212 09aa 0F8580F9 		jne	.L148
 1212      FFFF
 1213 09b0 BB0A0000 		movl	$10, %ebx
 1213      00
 1214              	.L146:
 1215 09b5 BFE80300 		movl	$1000, %edi
 1215      00
 1216 09ba C6842480 		movb	$0, 128(%rsp)
 1216      00000000 
 1217 09c2 E8000000 		call	flSleep
 1217      00
 1218 09c7 803D0000 		cmpb	$0, LOG(%rip)
 1218      000000
 1219 09ce 741B     		je	.L143
 1220 09d0 0FB68C24 		movzbl	128(%rsp), %ecx
 1220      80000000 
 1221 09d8 89DA     		movl	%ebx, %edx
 1222 09da BE000000 		movl	$.LC48, %esi
 1222      00
 1223 09df BF010000 		movl	$1, %edi
 1223      00
 1224 09e4 31C0     		xorl	%eax, %eax
 1225 09e6 E8000000 		call	__printf_chk
 1225      00
 1226              	.L143:
 1227 09eb 488B7C24 		movq	48(%rsp), %rdi
 1227      30
 1228 09f0 4C8D4424 		leaq	120(%rsp), %r8
 1228      78
 1229 09f5 488D8C24 		leaq	128(%rsp), %rcx
 1229      80000000 
 1230 09fd BA010000 		movl	$1, %edx
 1230      00
 1231 0a02 89DE     		movl	%ebx, %esi
 1232 0a04 E8000000 		call	flWriteChannel
 1232      00
 1233 0a09 85C0     		testl	%eax, %eax
 1234 0a0b 0F851FF9 		jne	.L148
 1234      FFFF
 1235 0a11 83C301   		addl	$1, %ebx
 1236 0a14 83FB12   		cmpl	$18, %ebx
 1237 0a17 759C     		jne	.L146
 1238              		.p2align 4,,3
 1239 0a19 E9DCFBFF 		jmp	.L147
 1239      FF
 1240              	.L228:
 1241 0a1e 0FB60B   		movzbl	(%rbx), %ecx
 1242 0a21 BA090000 		movl	$9, %edx
 1242      00
 1243 0a26 BE000000 		movl	$.LC48, %esi
 1243      00
 1244 0a2b BF010000 		movl	$1, %edi
 1244      00
 1245 0a30 31C0     		xorl	%eax, %eax
 1246 0a32 E8000000 		call	__printf_chk
 1246      00
 1247 0a37 E950FFFF 		jmp	.L153
 1247      FF
 1248              	.L227:
 1249 0a3c 803D0000 		cmpb	$0, LOG(%rip)
 1249      000000
 1250 0a43 7411     		je	.L157
 1251 0a45 BE000000 		movl	$.LC47, %esi
 1251      00
 1252 0a4a BF010000 		movl	$1, %edi
 1252      00
 1253 0a4f 31C0     		xorl	%eax, %eax
 1254 0a51 E8000000 		call	__printf_chk
 1254      00
 1255              	.L157:
 1256 0a56 C60301   		movb	$1, (%rbx)
 1257 0a59 BFE80300 		movl	$1000, %edi
 1257      00
 1258 0a5e E8000000 		call	flSleep
 1258      00
 1259 0a63 803D0000 		cmpb	$0, LOG(%rip)
 1259      000000
 1260 0a6a 7419     		je	.L86
 1261 0a6c 0FB60B   		movzbl	(%rbx), %ecx
 1262 0a6f BA090000 		movl	$9, %edx
 1262      00
 1263 0a74 BE000000 		movl	$.LC48, %esi
 1263      00
 1264 0a79 BF010000 		movl	$1, %edi
 1264      00
 1265 0a7e 31C0     		xorl	%eax, %eax
 1266 0a80 E8000000 		call	__printf_chk
 1266      00
 1267              	.L86:
 1268 0a85 488B7C24 		movq	48(%rsp), %rdi
 1268      30
 1269 0a8a 4C8D4424 		leaq	120(%rsp), %r8
 1269      78
 1270 0a8f 4889D9   		movq	%rbx, %rcx
 1271 0a92 BA010000 		movl	$1, %edx
 1271      00
 1272 0a97 BE090000 		movl	$9, %esi
 1272      00
 1273 0a9c E8000000 		call	flWriteChannel
 1273      00
 1274 0aa1 85C0     		testl	%eax, %eax
 1275 0aa3 0F8587F8 		jne	.L148
 1275      FFFF
 1276 0aa9 BFE80300 		movl	$1000, %edi
 1276      00
 1277 0aae BB0A0000 		movl	$10, %ebx
 1277      00
 1278 0ab3 41BE0100 		movl	$1, %r14d
 1278      0000
 1279 0ab9 E8000000 		call	flSleep
 1279      00
 1280 0abe 488DB424 		leaq	128(%rsp), %rsi
 1280      80000000 
 1281 0ac6 488D7C24 		leaq	112(%rsp), %rdi
 1281      70
 1282 0acb C7442474 		movl	$0, 116(%rsp)
 1282      00000000 
 1283 0ad3 44896424 		movl	%r12d, 112(%rsp)
 1283      70
 1284 0ad8 C7842480 		movl	$690471308, 128(%rsp)
 1284      0000008C 
 1284      C12729
 1285 0ae3 C7842484 		movl	$1979237519, 132(%rsp)
 1285      0000008F 
 1285      C4F875
 1286 0aee C7842488 		movl	$1140693495, 136(%rsp)
 1286      000000F7 
 1286      99FD43
 1287 0af9 C784248C 		movl	$-15764393, 140(%rsp)
 1287      00000057 
 1287      740FFF
 1288 0b04 E8000000 		call	encrypt
 1288      00
 1289              	.L94:
 1290 0b09 8B742470 		movl	112(%rsp), %esi
 1291 0b0d 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 1291      FFFFFF
 1292 0b14 31C0     		xorl	%eax, %eax
 1293 0b16 31D2     		xorl	%edx, %edx
 1294              	.L90:
 1295 0b18 8D0C07   		leal	(%rdi,%rax), %ecx
 1296 0b1b 4589F3   		movl	%r14d, %r11d
 1297 0b1e 41D3E3   		sall	%cl, %r11d
 1298 0b21 4185F3   		testl	%esi, %r11d
 1299 0b24 740B     		je	.L88
 1300 0b26 4589F2   		movl	%r14d, %r10d
 1301 0b29 89C1     		movl	%eax, %ecx
 1302 0b2b 41D3E2   		sall	%cl, %r10d
 1303 0b2e 4401D2   		addl	%r10d, %edx
 1304              	.L88:
 1305 0b31 83C001   		addl	$1, %eax
 1306 0b34 83F808   		cmpl	$8, %eax
 1307 0b37 75DF     		jne	.L90
 1308 0b39 BFE80300 		movl	$1000, %edi
 1308      00
 1309 0b3e 88942480 		movb	%dl, 128(%rsp)
 1309      000000
 1310 0b45 E8000000 		call	flSleep
 1310      00
 1311 0b4a 488B7C24 		movq	48(%rsp), %rdi
 1311      30
 1312 0b4f 4C8D4424 		leaq	120(%rsp), %r8
 1312      78
 1313 0b54 488D8C24 		leaq	128(%rsp), %rcx
 1313      80000000 
 1314 0b5c BA010000 		movl	$1, %edx
 1314      00
 1315 0b61 89DE     		movl	%ebx, %esi
 1316 0b63 E8000000 		call	flWriteChannel
 1316      00
 1317 0b68 803D0000 		cmpb	$0, LOG(%rip)
 1317      000000
 1318 0b6f 4189C7   		movl	%eax, %r15d
 1319 0b72 0F859E01 		jne	.L229
 1319      0000
 1320              	.L91:
 1321 0b78 4585FF   		testl	%r15d, %r15d
 1322 0b7b 0F85AFF7 		jne	.L148
 1322      FFFF
 1323 0b81 83C301   		addl	$1, %ebx
 1324 0b84 83FB0E   		cmpl	$14, %ebx
 1325 0b87 7580     		jne	.L94
 1326 0b89 41BE0100 		movl	$1, %r14d
 1326      0000
 1327              	.L101:
 1328 0b8f 8B742474 		movl	116(%rsp), %esi
 1329 0b93 8D3CDD90 		leal	-112(,%rbx,8), %edi
 1329      FFFFFF
 1330 0b9a 31C0     		xorl	%eax, %eax
 1331 0b9c 31D2     		xorl	%edx, %edx
 1332              	.L97:
 1333 0b9e 8D0C07   		leal	(%rdi,%rax), %ecx
 1334 0ba1 4589F3   		movl	%r14d, %r11d
 1335 0ba4 41D3E3   		sall	%cl, %r11d
 1336 0ba7 4185F3   		testl	%esi, %r11d
 1337 0baa 740B     		je	.L95
 1338 0bac 4589F2   		movl	%r14d, %r10d
 1339 0baf 89C1     		movl	%eax, %ecx
 1340 0bb1 41D3E2   		sall	%cl, %r10d
 1341 0bb4 4401D2   		addl	%r10d, %edx
 1342              	.L95:
 1343 0bb7 83C001   		addl	$1, %eax
 1344 0bba 83F808   		cmpl	$8, %eax
 1345 0bbd 75DF     		jne	.L97
 1346 0bbf BFE80300 		movl	$1000, %edi
 1346      00
 1347 0bc4 88942480 		movb	%dl, 128(%rsp)
 1347      000000
 1348 0bcb E8000000 		call	flSleep
 1348      00
 1349 0bd0 488B7C24 		movq	48(%rsp), %rdi
 1349      30
 1350 0bd5 4C8D4424 		leaq	120(%rsp), %r8
 1350      78
 1351 0bda 488D8C24 		leaq	128(%rsp), %rcx
 1351      80000000 
 1352 0be2 BA010000 		movl	$1, %edx
 1352      00
 1353 0be7 89DE     		movl	%ebx, %esi
 1354 0be9 E8000000 		call	flWriteChannel
 1354      00
 1355 0bee 803D0000 		cmpb	$0, LOG(%rip)
 1355      000000
 1356 0bf5 4189C7   		movl	%eax, %r15d
 1357 0bf8 741B     		je	.L98
 1358 0bfa 0FB68C24 		movzbl	128(%rsp), %ecx
 1358      80000000 
 1359 0c02 89DA     		movl	%ebx, %edx
 1360 0c04 BE000000 		movl	$.LC48, %esi
 1360      00
 1361 0c09 BF010000 		movl	$1, %edi
 1361      00
 1362 0c0e 31C0     		xorl	%eax, %eax
 1363 0c10 E8000000 		call	__printf_chk
 1363      00
 1364              	.L98:
 1365 0c15 4585FF   		testl	%r15d, %r15d
 1366 0c18 0F8512F7 		jne	.L148
 1366      FFFF
 1367 0c1e 83C301   		addl	$1, %ebx
 1368 0c21 83FB12   		cmpl	$18, %ebx
 1369 0c24 0F8565FF 		jne	.L101
 1369      FFFF
 1370 0c2a 807D0001 		cmpb	$1, 0(%rbp)
 1371 0c2e 0F85C6F9 		jne	.L147
 1371      FFFF
 1372 0c34 BE000000 		movl	$.LC49, %esi
 1372      00
 1373 0c39 BF000000 		movl	$.LC41, %edi
 1373      00
 1374 0c3e 49C1E504 		salq	$4, %r13
 1375 0c42 4529A500 		subl	%r12d, dataFromCSV+12(%r13)
 1375      000000
 1376 0c49 BD010000 		movl	$1, %ebp
 1376      00
 1377 0c4e 41BC1000 		movl	$16, %r12d
 1377      0000
 1378 0c54 E8000000 		call	fopen
 1378      00
 1379 0c59 B9000000 		movl	$.LC50, %ecx
 1379      00
 1380 0c5e 4889C7   		movq	%rax, %rdi
 1381 0c61 4889C3   		movq	%rax, %rbx
 1382 0c64 BA000000 		movl	$.LC51, %edx
 1382      00
 1383 0c69 BE010000 		movl	$1, %esi
 1383      00
 1384 0c6e 31C0     		xorl	%eax, %eax
 1385 0c70 E8000000 		call	__fprintf_chk
 1385      00
 1386 0c75 BA000000 		movl	$.LC28, %edx
 1386      00
 1387 0c7a BE010000 		movl	$1, %esi
 1387      00
 1388 0c7f 4889DF   		movq	%rbx, %rdi
 1389 0c82 31C0     		xorl	%eax, %eax
 1390 0c84 E8000000 		call	__fprintf_chk
 1390      00
 1391              	.L103:
 1392 0c89 3B2D0000 		cmpl	numLines(%rip), %ebp
 1392      0000
 1393 0c8f 0F8FFD01 		jg	.L230
 1393      0000
 1394 0c95 418B8C24 		movl	dataFromCSV(%r12), %ecx
 1394      00000000 
 1395 0c9d BA000000 		movl	$.LC1, %edx
 1395      00
 1396 0ca2 BE010000 		movl	$1, %esi
 1396      00
 1397 0ca7 4889DF   		movq	%rbx, %rdi
 1398 0caa 31C0     		xorl	%eax, %eax
 1399 0cac 4531ED   		xorl	%r13d, %r13d
 1400 0caf E8000000 		call	__fprintf_chk
 1400      00
 1401              	.L159:
 1402 0cb4 BA000000 		movl	$.LC0, %edx
 1402      00
 1403 0cb9 BE010000 		movl	$1, %esi
 1403      00
 1404 0cbe 4889DF   		movq	%rbx, %rdi
 1405 0cc1 31C0     		xorl	%eax, %eax
 1406 0cc3 E8000000 		call	__fprintf_chk
 1406      00
 1407 0cc8 438B8C2C 		movl	dataFromCSV+4(%r12,%r13), %ecx
 1407      00000000 
 1408 0cd0 31C0     		xorl	%eax, %eax
 1409 0cd2 BA000000 		movl	$.LC1, %edx
 1409      00
 1410 0cd7 BE010000 		movl	$1, %esi
 1410      00
 1411 0cdc 4889DF   		movq	%rbx, %rdi
 1412 0cdf 4983C504 		addq	$4, %r13
 1413 0ce3 E8000000 		call	__fprintf_chk
 1413      00
 1414 0ce8 4983FD0C 		cmpq	$12, %r13
 1415 0cec 75C6     		jne	.L159
 1416 0cee 3B2D0000 		cmpl	numLines(%rip), %ebp
 1416      0000
 1417 0cf4 7414     		je	.L158
 1418 0cf6 BA000000 		movl	$.LC28, %edx
 1418      00
 1419 0cfb BE010000 		movl	$1, %esi
 1419      00
 1420 0d00 4889DF   		movq	%rbx, %rdi
 1421 0d03 31C0     		xorl	%eax, %eax
 1422 0d05 E8000000 		call	__fprintf_chk
 1422      00
 1423              	.L158:
 1424 0d0a 83C501   		addl	$1, %ebp
 1425 0d0d 4983C410 		addq	$16, %r12
 1426 0d11 E973FFFF 		jmp	.L103
 1426      FF
 1427              	.L229:
 1428 0d16 0FB68C24 		movzbl	128(%rsp), %ecx
 1428      80000000 
 1429 0d1e 89DA     		movl	%ebx, %edx
 1430 0d20 BE000000 		movl	$.LC48, %esi
 1430      00
 1431 0d25 BF010000 		movl	$1, %edi
 1431      00
 1432 0d2a 31C0     		xorl	%eax, %eax
 1433 0d2c E8000000 		call	__printf_chk
 1433      00
 1434 0d31 E942FEFF 		jmp	.L91
 1434      FF
 1435              	.L216:
 1436 0d36 BE000000 		movl	$.LC42, %esi
 1436      00
 1437 0d3b BF010000 		movl	$1, %edi
 1437      00
 1438 0d40 31C0     		xorl	%eax, %eax
 1439 0d42 E8000000 		call	__printf_chk
 1439      00
 1440 0d47 448B4C24 		movl	8(%rsp), %r9d
 1440      08
 1441 0d4c E92CF4FF 		jmp	.L206
 1441      FF
 1442              	.L226:
 1443 0d51 BE000000 		movl	$.LC53, %esi
 1443      00
 1444 0d56 BF010000 		movl	$1, %edi
 1444      00
 1445 0d5b 31C0     		xorl	%eax, %eax
 1446 0d5d E8000000 		call	__printf_chk
 1446      00
 1447 0d62 C60303   		movb	$3, (%rbx)
 1448 0d65 BFE80300 		movl	$1000, %edi
 1448      00
 1449 0d6a E8000000 		call	flSleep
 1449      00
 1450 0d6f 803D0000 		cmpb	$0, LOG(%rip)
 1450      000000
 1451 0d76 7419     		je	.L115
 1452 0d78 0FB60B   		movzbl	(%rbx), %ecx
 1453 0d7b BA090000 		movl	$9, %edx
 1453      00
 1454 0d80 BE000000 		movl	$.LC48, %esi
 1454      00
 1455 0d85 BF010000 		movl	$1, %edi
 1455      00
 1456 0d8a 31C0     		xorl	%eax, %eax
 1457 0d8c E8000000 		call	__printf_chk
 1457      00
 1458              	.L115:
 1459 0d91 488B7C24 		movq	48(%rsp), %rdi
 1459      30
 1460 0d96 4C8D4424 		leaq	120(%rsp), %r8
 1460      78
 1461 0d9b 4889D9   		movq	%rbx, %rcx
 1462 0d9e BA010000 		movl	$1, %edx
 1462      00
 1463 0da3 BE090000 		movl	$9, %esi
 1463      00
 1464 0da8 E8000000 		call	flWriteChannel
 1464      00
 1465 0dad 85C0     		testl	%eax, %eax
 1466 0daf 0F857BF5 		jne	.L148
 1466      FFFF
 1467 0db5 448B4424 		movl	96(%rsp), %r8d
 1467      60
 1468 0dba BE010000 		movl	$1, %esi
 1468      00
 1469 0dbf 4531C9   		xorl	%r9d, %r9d
 1470 0dc2 4531D2   		xorl	%r10d, %r10d
 1471 0dc5 4531DB   		xorl	%r11d, %r11d
 1472 0dc8 31FF     		xorl	%edi, %edi
 1473 0dca BA010000 		movl	$1, %edx
 1473      00
 1474 0dcf EB1B     		jmp	.L122
 1475              	.L233:
 1476 0dd1 4185D8   		testl	%ebx, %r8d
 1477 0dd4 740A     		je	.L118
 1478 0dd6 8D48F8   		leal	-8(%rax), %ecx
 1479 0dd9 89D3     		movl	%edx, %ebx
 1480 0ddb D3E3     		sall	%cl, %ebx
 1481 0ddd 4101DB   		addl	%ebx, %r11d
 1482              	.L118:
 1483 0de0 83C601   		addl	$1, %esi
 1484 0de3 83C001   		addl	$1, %eax
 1485 0de6 4080FE21 		cmpb	$33, %sil
 1486 0dea 7436     		je	.L231
 1487              	.L122:
 1488 0dec 89C1     		movl	%eax, %ecx
 1489 0dee 89D3     		movl	%edx, %ebx
 1490 0df0 D3E3     		sall	%cl, %ebx
 1491 0df2 4080FE08 		cmpb	$8, %sil
 1492 0df6 89D9     		movl	%ebx, %ecx
 1493 0df8 761D     		jbe	.L232
 1494 0dfa 4080FE10 		cmpb	$16, %sil
 1495 0dfe 76D1     		jbe	.L233
 1496 0e00 4080FE18 		cmpb	$24, %sil
 1497 0e04 7774     		ja	.L120
 1498 0e06 4185D8   		testl	%ebx, %r8d
 1499 0e09 74D5     		je	.L118
 1500 0e0b 8D48F0   		leal	-16(%rax), %ecx
 1501 0e0e 89D3     		movl	%edx, %ebx
 1502 0e10 D3E3     		sall	%cl, %ebx
 1503 0e12 4101DA   		addl	%ebx, %r10d
 1504 0e15 EBC9     		jmp	.L118
 1505              	.L232:
 1506 0e17 8D1C1F   		leal	(%rdi,%rbx), %ebx
 1507 0e1a 4485C1   		testl	%r8d, %ecx
 1508 0e1d 0F45FB   		cmovne	%ebx, %edi
 1509 0e20 EBBE     		jmp	.L118
 1510              	.L231:
 1511 0e22 450FB6C3 		movzbl	%r11b, %r8d
 1512 0e26 410FB6F2 		movzbl	%r10b, %esi
 1513 0e2a C7442474 		movl	$0, 116(%rsp)
 1513      00000000 
 1514 0e32 41C1E008 		sall	$8, %r8d
 1515 0e36 C1E610   		sall	$16, %esi
 1516 0e39 31C0     		xorl	%eax, %eax
 1517 0e3b BA080000 		movl	$8, %edx
 1517      00
 1518 0e40 31C9     		xorl	%ecx, %ecx
 1519 0e42 450FB6C9 		movzbl	%r9b, %r9d
 1520 0e46 400FB6FF 		movzbl	%dil, %edi
 1521              	.L123:
 1522 0e4a 85C9     		testl	%ecx, %ecx
 1523 0e4c 0F84C501 		je	.L234
 1523      0000
 1524 0e52 83F908   		cmpl	$8, %ecx
 1525 0e55 0F84B401 		je	.L235
 1525      0000
 1526 0e5b 83F910   		cmpl	$16, %ecx
 1527 0e5e 0F84A401 		je	.L236
 1527      0000
 1528 0e64 4589CA   		movl	%r9d, %r10d
 1529 0e67 41D3E2   		sall	%cl, %r10d
 1530 0e6a 4401D0   		addl	%r10d, %eax
 1531 0e6d 83FA20   		cmpl	$32, %edx
 1532 0e70 742D     		je	.L237
 1533              	.L128:
 1534 0e72 83C108   		addl	$8, %ecx
 1535 0e75 83C208   		addl	$8, %edx
 1536 0e78 EBD0     		jmp	.L123
 1537              	.L120:
 1538 0e7a 4185D8   		testl	%ebx, %r8d
 1539 0e7d 0F845DFF 		je	.L118
 1539      FFFF
 1540 0e83 8D48E8   		leal	-24(%rax), %ecx
 1541 0e86 89D3     		movl	%edx, %ebx
 1542 0e88 D3E3     		sall	%cl, %ebx
 1543 0e8a 4101D9   		addl	%ebx, %r9d
 1544 0e8d E94EFFFF 		jmp	.L118
 1544      FF
 1545              	.L230:
 1546 0e92 4889DF   		movq	%rbx, %rdi
 1547 0e95 E8000000 		call	fclose
 1547      00
 1548 0e9a E95BF7FF 		jmp	.L147
 1548      FF
 1549              	.L237:
 1550 0e9f 660F6F0D 		movdqa	.LC45(%rip), %xmm1
 1550      00000000 
 1551 0ea7 488DB424 		leaq	128(%rsp), %rsi
 1551      80000000 
 1552 0eaf 488D7C24 		leaq	112(%rsp), %rdi
 1552      70
 1553 0eb4 BB0A0000 		movl	$10, %ebx
 1553      00
 1554 0eb9 BD010000 		movl	$1, %ebp
 1554      00
 1555 0ebe 89442470 		movl	%eax, 112(%rsp)
 1556 0ec2 660F7F8C 		movdqa	%xmm1, 128(%rsp)
 1556      24800000 
 1556      00
 1557 0ecb E8000000 		call	encrypt
 1557      00
 1558              	.L135:
 1559 0ed0 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 1559      FFFFFF
 1560 0ed7 31C0     		xorl	%eax, %eax
 1561 0ed9 31D2     		xorl	%edx, %edx
 1562 0edb 8B742470 		movl	112(%rsp), %esi
 1563              	.L131:
 1564 0edf 8D0C07   		leal	(%rdi,%rax), %ecx
 1565 0ee2 4189EB   		movl	%ebp, %r11d
 1566 0ee5 41D3E3   		sall	%cl, %r11d
 1567 0ee8 4185F3   		testl	%esi, %r11d
 1568 0eeb 740B     		je	.L129
 1569 0eed 4189EB   		movl	%ebp, %r11d
 1570 0ef0 89C1     		movl	%eax, %ecx
 1571 0ef2 41D3E3   		sall	%cl, %r11d
 1572 0ef5 4401DA   		addl	%r11d, %edx
 1573              	.L129:
 1574 0ef8 83C001   		addl	$1, %eax
 1575 0efb 83F808   		cmpl	$8, %eax
 1576 0efe 75DF     		jne	.L131
 1577 0f00 BFE80300 		movl	$1000, %edi
 1577      00
 1578 0f05 88942480 		movb	%dl, 128(%rsp)
 1578      000000
 1579 0f0c E8000000 		call	flSleep
 1579      00
 1580 0f11 803D0000 		cmpb	$0, LOG(%rip)
 1580      000000
 1581 0f18 741B     		je	.L132
 1582 0f1a 0FB68C24 		movzbl	128(%rsp), %ecx
 1582      80000000 
 1583 0f22 89DA     		movl	%ebx, %edx
 1584 0f24 BE000000 		movl	$.LC48, %esi
 1584      00
 1585 0f29 BF010000 		movl	$1, %edi
 1585      00
 1586 0f2e 31C0     		xorl	%eax, %eax
 1587 0f30 E8000000 		call	__printf_chk
 1587      00
 1588              	.L132:
 1589 0f35 488B7C24 		movq	48(%rsp), %rdi
 1589      30
 1590 0f3a 4C8D4424 		leaq	120(%rsp), %r8
 1590      78
 1591 0f3f 488D8C24 		leaq	128(%rsp), %rcx
 1591      80000000 
 1592 0f47 BA010000 		movl	$1, %edx
 1592      00
 1593 0f4c 89DE     		movl	%ebx, %esi
 1594 0f4e E8000000 		call	flWriteChannel
 1594      00
 1595 0f53 85C0     		testl	%eax, %eax
 1596 0f55 0F85D5F3 		jne	.L148
 1596      FFFF
 1597 0f5b 83C301   		addl	$1, %ebx
 1598 0f5e 83FB0E   		cmpl	$14, %ebx
 1599 0f61 0F8569FF 		jne	.L135
 1599      FFFF
 1600 0f67 BD010000 		movl	$1, %ebp
 1600      00
 1601              	.L142:
 1602 0f6c 8B742474 		movl	116(%rsp), %esi
 1603 0f70 8D3CDD90 		leal	-112(,%rbx,8), %edi
 1603      FFFFFF
 1604 0f77 31C0     		xorl	%eax, %eax
 1605 0f79 31D2     		xorl	%edx, %edx
 1606              	.L138:
 1607 0f7b 8D0C07   		leal	(%rdi,%rax), %ecx
 1608 0f7e 4189EA   		movl	%ebp, %r10d
 1609 0f81 41D3E2   		sall	%cl, %r10d
 1610 0f84 4185F2   		testl	%esi, %r10d
 1611 0f87 740B     		je	.L136
 1612 0f89 4189EB   		movl	%ebp, %r11d
 1613 0f8c 89C1     		movl	%eax, %ecx
 1614 0f8e 41D3E3   		sall	%cl, %r11d
 1615 0f91 4401DA   		addl	%r11d, %edx
 1616              	.L136:
 1617 0f94 83C001   		addl	$1, %eax
 1618 0f97 83F808   		cmpl	$8, %eax
 1619 0f9a 75DF     		jne	.L138
 1620 0f9c BFE80300 		movl	$1000, %edi
 1620      00
 1621 0fa1 88942480 		movb	%dl, 128(%rsp)
 1621      000000
 1622 0fa8 E8000000 		call	flSleep
 1622      00
 1623 0fad 803D0000 		cmpb	$0, LOG(%rip)
 1623      000000
 1624 0fb4 741B     		je	.L139
 1625 0fb6 0FB68C24 		movzbl	128(%rsp), %ecx
 1625      80000000 
 1626 0fbe 89DA     		movl	%ebx, %edx
 1627 0fc0 BE000000 		movl	$.LC48, %esi
 1627      00
 1628 0fc5 BF010000 		movl	$1, %edi
 1628      00
 1629 0fca 31C0     		xorl	%eax, %eax
 1630 0fcc E8000000 		call	__printf_chk
 1630      00
 1631              	.L139:
 1632 0fd1 488B7C24 		movq	48(%rsp), %rdi
 1632      30
 1633 0fd6 4C8D4424 		leaq	120(%rsp), %r8
 1633      78
 1634 0fdb 488D8C24 		leaq	128(%rsp), %rcx
 1634      80000000 
 1635 0fe3 BA010000 		movl	$1, %edx
 1635      00
 1636 0fe8 89DE     		movl	%ebx, %esi
 1637 0fea E8000000 		call	flWriteChannel
 1637      00
 1638 0fef 85C0     		testl	%eax, %eax
 1639 0ff1 0F8539F3 		jne	.L148
 1639      FFFF
 1640 0ff7 83C301   		addl	$1, %ebx
 1641 0ffa 83FB12   		cmpl	$18, %ebx
 1642 0ffd 0F8569FF 		jne	.L142
 1642      FFFF
 1643              		.p2align 4,,3
 1644 1003 E9F2F5FF 		jmp	.L147
 1644      FF
 1645              	.L236:
 1646 1008 01F0     		addl	%esi, %eax
 1647              		.p2align 4,,3
 1648 100a E963FEFF 		jmp	.L128
 1648      FF
 1649              	.L235:
 1650 100f 4401C0   		addl	%r8d, %eax
 1651              		.p2align 4,,6
 1652 1012 E95BFEFF 		jmp	.L128
 1652      FF
 1653              	.L234:
 1654 1017 01F8     		addl	%edi, %eax
 1655              		.p2align 4,,4
 1656 1019 E954FEFF 		jmp	.L128
 1656      FF
 1657              		.cfi_endproc
 1658              	.LFE83:
 1660              		.globl	max100Limit
 1661              		.data
 1664              	max100Limit:
 1665 0000 FF       		.byte	-1
 1666              		.globl	max500Limit
 1669              	max500Limit:
 1670 0001 FF       		.byte	-1
 1671              		.globl	max1000Limit
 1674              	max1000Limit:
 1675 0002 FF       		.byte	-1
 1676              		.globl	max2000Limit
 1679              	max2000Limit:
 1680 0003 FF       		.byte	-1
 1681              		.globl	maxAmountCanBeDispensed
 1682              		.align 4
 1685              	maxAmountCanBeDispensed:
 1686 0004 FFFFFFFF 		.long	-1
 1687              		.globl	bankID
 1688 0008 00000000 		.align 16
 1688      00000000 
 1691              	bankID:
 1692 0010 FFFFFFFF 		.long	-1
 1693              		.globl	LOG
 1694              		.bss
 1695              		.align 16
 1698              	LOG:
 1699 0000 00       		.zero	1
 1700              		.globl	numLines
 1701 0001 00000000 		.align 16
 1701      00000000 
 1701      00000000 
 1701      000000
 1704              	numLines:
 1705 0010 00000000 		.zero	4
 1706              		.comm	dataFromCSV,1600080,32
 1707              		.section	.rodata.cst16,"aM",@progbits,16
 1708              		.align 16
 1709              	.LC45:
 1710 0000 8CC12729 		.long	690471308
 1711 0004 8FC4F875 		.long	1979237519
 1712 0008 F799FD43 		.long	1140693495
 1713 000c 57740FFF 		.long	-15764393
 1714              		.ident	"GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4"
 1715              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccL5ZluL.s:6      .text:0000000000000000 decrypt
     /tmp/ccL5ZluL.s:55     .text:0000000000000070 encrypt
     /tmp/ccL5ZluL.s:105    .text:00000000000000e0 decrypt64
     /tmp/ccL5ZluL.s:145    .text:0000000000000150 encrypt64
     /tmp/ccL5ZluL.s:186    .text:00000000000001c0 myHash
     /tmp/ccL5ZluL.s:1691   .data:0000000000000010 bankID
     /tmp/ccL5ZluL.s:318    .text:0000000000000320 format
     /tmp/ccL5ZluL.s:1704   .bss:0000000000000010 numLines
                            *COM*:0000000000186a50 dataFromCSV
     /tmp/ccL5ZluL.s:356    .text:0000000000000380 find
     /tmp/ccL5ZluL.s:403    .text:00000000000003f0 suffBalUser
     /tmp/ccL5ZluL.s:568    .text.startup:0000000000000000 main
     /tmp/ccL5ZluL.s:1698   .bss:0000000000000000 LOG
     /tmp/ccL5ZluL.s:1664   .data:0000000000000000 max100Limit
     /tmp/ccL5ZluL.s:1669   .data:0000000000000001 max500Limit
     /tmp/ccL5ZluL.s:1674   .data:0000000000000002 max1000Limit
     /tmp/ccL5ZluL.s:1679   .data:0000000000000003 max2000Limit
     /tmp/ccL5ZluL.s:1685   .data:0000000000000004 maxAmountCanBeDispensed
     /tmp/ccL5ZluL.s:1709   .rodata.cst16:0000000000000000 .LC45

UNDEFINED SYMBOLS
strtok
sscanf
arg_str0
arg_str1
arg_lit0
arg_end
arg_nullcheck
stderr
__fprintf_chk
flClose
flFreeError
arg_parse
strtol
__printf_chk
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadStandardFirmware
flGetFirmwareVersion
flGetFirmwareID
flIsCommCapable
flSelectConduit
flIsFPGARunning
fopen
malloc
__getdelim
flSleep
fflush
flIsDeviceAvailable
free
fclose
flReadChannel
flWriteChannel
