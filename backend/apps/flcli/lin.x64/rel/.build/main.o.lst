   1              		.file	"main.c"
   2              		.section	.rodata.str1.1,"aMS",@progbits,1
   3              	.LC0:
   4 0000 646F5772 		.string	"doWrite()"
   4      69746528 
   4      2900
   5              		.section	.text.unlikely,"ax",@progbits
   7              	doWrite:
   8              	.LFB88:
   9              		.cfi_startproc
  10 0000 4157     		pushq	%r15
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 15, -16
  13 0002 4531FF   		xorl	%r15d, %r15d
  14 0005 4156     		pushq	%r14
  15              		.cfi_def_cfa_offset 24
  16              		.cfi_offset 14, -24
  17 0007 4155     		pushq	%r13
  18              		.cfi_def_cfa_offset 32
  19              		.cfi_offset 13, -32
  20 0009 4989FD   		movq	%rdi, %r13
  21 000c 4154     		pushq	%r12
  22              		.cfi_def_cfa_offset 40
  23              		.cfi_offset 12, -40
  24 000e 4D89CC   		movq	%r9, %r12
  25 0011 55       		pushq	%rbp
  26              		.cfi_def_cfa_offset 48
  27              		.cfi_offset 6, -48
  28 0012 31ED     		xorl	%ebp, %ebp
  29 0014 53       		pushq	%rbx
  30              		.cfi_def_cfa_offset 56
  31              		.cfi_offset 3, -56
  32 0015 4889D3   		movq	%rdx, %rbx
  33 0018 4881EC38 		subq	$65592, %rsp
  33      000100
  34              		.cfi_def_cfa_offset 65648
  35 001f 64488B04 		movq	%fs:40, %rax
  35      25280000 
  35      00
  36 0028 48898424 		movq	%rax, 65576(%rsp)
  36      28000100 
  37 0030 31C0     		xorl	%eax, %eax
  38 0032 400FB6C6 		movzbl	%sil, %eax
  39 0036 48894C24 		movq	%rcx, 16(%rsp)
  39      10
  40 003b 4C894424 		movq	%r8, 24(%rsp)
  40      18
  41 0040 8944240C 		movl	%eax, 12(%rsp)
  42              	.L7:
  43 0044 488D7C24 		leaq	32(%rsp), %rdi
  43      20
  44 0049 4889D9   		movq	%rbx, %rcx
  45 004c BAFBFF00 		movl	$65531, %edx
  45      00
  46 0051 BE010000 		movl	$1, %esi
  46      00
  47 0056 E8000000 		call	fread
  47      00
  48 005b 4885C0   		testq	%rax, %rax
  49 005e 4989C6   		movq	%rax, %r14
  50 0061 745A     		je	.L2
  51 0063 8B74240C 		movl	12(%rsp), %esi
  52 0067 488D4C24 		leaq	32(%rsp), %rcx
  52      20
  53 006c 4D89E0   		movq	%r12, %r8
  54 006f 4889C2   		movq	%rax, %rdx
  55 0072 4C89EF   		movq	%r13, %rdi
  56 0075 4801C5   		addq	%rax, %rbp
  57 0078 E8000000 		call	flWriteChannelAsync
  57      00
  58 007d 85C0     		testl	%eax, %eax
  59 007f 750E     		jne	.L3
  60 0081 488D4424 		leaq	32(%rsp), %rax
  60      20
  61 0086 4A8D1430 		leaq	(%rax,%r14), %rdx
  62 008a 4889C1   		movq	%rax, %rcx
  63 008d EB14     		jmp	.L4
  64              	.L3:
  65 008f BE000000 		movl	$.LC0, %esi
  65      00
  66 0094 4C89E7   		movq	%r12, %rdi
  67 0097 E8000000 		call	errPrefix
  67      00
  68 009c B8010000 		movl	$1, %eax
  68      00
  69 00a1 EB3C     		jmp	.L5
  70              	.L4:
  71 00a3 4839D1   		cmpq	%rdx, %rcx
  72 00a6 740C     		je	.L14
  73 00a8 48FFC1   		incq	%rcx
  74 00ab 0FB641FF 		movzbl	-1(%rcx), %eax
  75 00af 4101C7   		addl	%eax, %r15d
  76 00b2 EBEF     		jmp	.L4
  77              	.L14:
  78 00b4 4981FEFB 		cmpq	$65531, %r14
  78      FF0000
  79 00bb 7487     		je	.L7
  80              	.L2:
  81 00bd 4C89E6   		movq	%r12, %rsi
  82 00c0 4C89EF   		movq	%r13, %rdi
  83 00c3 E8000000 		call	flAwaitAsyncWrites
  83      00
  84 00c8 85C0     		testl	%eax, %eax
  85 00ca 75C3     		jne	.L3
  86 00cc 488B4424 		movq	24(%rsp), %rax
  86      18
  87 00d1 66448938 		movw	%r15w, (%rax)
  88 00d5 488B4424 		movq	16(%rsp), %rax
  88      10
  89 00da 488928   		movq	%rbp, (%rax)
  90 00dd 31C0     		xorl	%eax, %eax
  91              	.L5:
  92 00df 488B9C24 		movq	65576(%rsp), %rbx
  92      28000100 
  93 00e7 6448331C 		xorq	%fs:40, %rbx
  93      25280000 
  93      00
  94 00f0 7405     		je	.L8
  95 00f2 E8000000 		call	__stack_chk_fail
  95      00
  96              	.L8:
  97 00f7 4881C438 		addq	$65592, %rsp
  97      000100
  98              		.cfi_def_cfa_offset 56
  99 00fe 5B       		popq	%rbx
 100              		.cfi_def_cfa_offset 48
 101 00ff 5D       		popq	%rbp
 102              		.cfi_def_cfa_offset 40
 103 0100 415C     		popq	%r12
 104              		.cfi_def_cfa_offset 32
 105 0102 415D     		popq	%r13
 106              		.cfi_def_cfa_offset 24
 107 0104 415E     		popq	%r14
 108              		.cfi_def_cfa_offset 16
 109 0106 415F     		popq	%r15
 110              		.cfi_def_cfa_offset 8
 111 0108 C3       		ret
 112              		.cfi_endproc
 113              	.LFE88:
 115              		.section	.rodata.str1.1
 116              	.LC1:
 117 000a 776200   		.string	"wb"
 118              	.LC2:
 119 000d 646F5265 		.string	"doRead()"
 119      61642829 
 119      00
 120              		.section	.rodata.str1.8,"aMS",@progbits,1
 121              		.align 8
 122              	.LC5:
 123 0000 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 123      20256420 
 123      62797465 
 123      73202863 
 123      6865636B 
 124              		.section	.rodata.str1.1
 125              	.LC6:
 126 0016 726200   		.string	"rb"
 127              		.section	.rodata.str1.8
 128 003d 000000   		.align 8
 129              	.LC7:
 130 0040 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 130      6520257A 
 130      75206279 
 130      74657320 
 130      28636865 
 131              		.section	.rodata.str1.1
 132              	.LC8:
 133 0019 25732061 		.string	"%s at column %d\n  %s\n  "
 133      7420636F 
 133      6C756D6E 
 133      2025640A 
 133      20202573 
 134              	.LC9:
 135 0031 2000     		.string	" "
 136              	.LC10:
 137 0033 5E0A00   		.string	"^\n"
 138              		.section	.text.unlikely
 140              	parseLine:
 141              	.LFB89:
 142              		.cfi_startproc
 143 0109 4157     		pushq	%r15
 144              		.cfi_def_cfa_offset 16
 145              		.cfi_offset 15, -16
 146 010b 31C0     		xorl	%eax, %eax
 147 010d B9080000 		movl	$8, %ecx
 147      00
 148 0112 4156     		pushq	%r14
 149              		.cfi_def_cfa_offset 24
 150              		.cfi_offset 14, -24
 151 0114 4155     		pushq	%r13
 152              		.cfi_def_cfa_offset 32
 153              		.cfi_offset 13, -32
 154 0116 4154     		pushq	%r12
 155              		.cfi_def_cfa_offset 40
 156              		.cfi_offset 12, -40
 157 0118 55       		pushq	%rbp
 158              		.cfi_def_cfa_offset 48
 159              		.cfi_offset 6, -48
 160 0119 4889FD   		movq	%rdi, %rbp
 161 011c 53       		pushq	%rbx
 162              		.cfi_def_cfa_offset 56
 163              		.cfi_offset 3, -56
 164 011d 4889D3   		movq	%rdx, %rbx
 165 0120 4881EC98 		subq	$152, %rsp
 165      000000
 166              		.cfi_def_cfa_offset 208
 167 0127 488D7C24 		leaq	112(%rsp), %rdi
 167      70
 168 012c 48897424 		movq	%rsi, 8(%rsp)
 168      08
 169 0131 BE000400 		movl	$1024, %esi
 169      00
 170 0136 F3AB     		rep stosl
 171 0138 488D7C24 		leaq	112(%rsp), %rdi
 171      70
 172 013d 4889D1   		movq	%rdx, %rcx
 173 0140 31D2     		xorl	%edx, %edx
 174 0142 E8000000 		call	bufInitialise
 174      00
 175 0147 85C0     		testl	%eax, %eax
 176 0149 0F852D09 		jne	.L96
 176      0000
 177 014f 488B4424 		movq	8(%rsp), %rax
 177      08
 178 0154 48890500 		movq	%rax, ptr(%rip)
 178      000000
 179              	.L17:
 180 015b 488B1500 		movq	ptr(%rip), %rdx
 180      000000
 181 0162 8A02     		movb	(%rdx), %al
 182 0164 3C3B     		cmpb	$59, %al
 183 0166 750C     		jne	.L167
 184 0168 48FFC2   		incq	%rdx
 185 016b 48891500 		movq	%rdx, ptr(%rip)
 185      000000
 186 0172 EBE7     		jmp	.L17
 187              	.L167:
 188 0174 3C72     		cmpb	$114, %al
 189 0176 7415     		je	.L19
 190 0178 3C77     		cmpb	$119, %al
 191 017a 0F84A603 		je	.L20
 191      0000
 192 0180 3C2B     		cmpb	$43, %al
 193 0182 0F850509 		jne	.L119
 193      0000
 194 0188 E9CF0700 		jmp	.L168
 194      00
 195              	.L19:
 196 018d 4C8D6201 		leaq	1(%rdx), %r12
 197 0191 4C892500 		movq	%r12, ptr(%rip)
 197      000000
 198 0198 E8000000 		call	__errno_location
 198      00
 199 019d 488D7424 		leaq	48(%rsp), %rsi
 199      30
 200 01a2 4989C5   		movq	%rax, %r13
 201 01a5 C7000000 		movl	$0, (%rax)
 201      0000
 202 01ab BA100000 		movl	$16, %edx
 202      00
 203 01b0 4C89E7   		movq	%r12, %rdi
 204 01b3 E8000000 		call	strtoul
 204      00
 205 01b8 41837D00 		cmpl	$0, 0(%r13)
 205      00
 206 01bd 48894424 		movq	%rax, 16(%rsp)
 206      10
 207 01c2 7411     		je	.L22
 208              	.L27:
 209 01c4 4531E4   		xorl	%r12d, %r12d
 210 01c7 4531FF   		xorl	%r15d, %r15d
 211 01ca 41BD0200 		movl	$2, %r13d
 211      0000
 212 01d0 E96D0500 		jmp	.L63
 212      00
 213              	.L22:
 214 01d5 837C2410 		cmpl	$127, 16(%rsp)
 214      7F
 215 01da 0F872A03 		ja	.L98
 215      0000
 216 01e0 488B4424 		movq	48(%rsp), %rax
 216      30
 217 01e5 8A08     		movb	(%rax), %cl
 218 01e7 48890500 		movq	%rax, ptr(%rip)
 218      000000
 219 01ee 80F93B   		cmpb	$59, %cl
 220 01f1 741A     		je	.L24
 221 01f3 84C9     		testb	%cl, %cl
 222 01f5 7416     		je	.L24
 223 01f7 80F920   		cmpb	$32, %cl
 224 01fa 7420     		je	.L25
 225              	.L29:
 226 01fc 4531E4   		xorl	%r12d, %r12d
 227 01ff 4531FF   		xorl	%r15d, %r15d
 228 0202 41BD0500 		movl	$5, %r13d
 228      0000
 229 0208 E9350500 		jmp	.L63
 229      00
 230              	.L24:
 231 020d 80F920   		cmpb	$32, %cl
 232 0210 41BC0100 		movl	$1, %r12d
 232      0000
 233 0216 0F852509 		jne	.L26
 233      0000
 234              	.L25:
 235 021c 488D7801 		leaq	1(%rax), %rdi
 236 0220 488D7424 		leaq	48(%rsp), %rsi
 236      30
 237 0225 41C74500 		movl	$0, 0(%r13)
 237      00000000 
 238 022d BA100000 		movl	$16, %edx
 238      00
 239 0232 48893D00 		movq	%rdi, ptr(%rip)
 239      000000
 240 0239 E8000000 		call	strtoul
 240      00
 241 023e 41837D00 		cmpl	$0, 0(%r13)
 241      00
 242 0243 48894424 		movq	%rax, 24(%rsp)
 242      18
 243 0248 4189C4   		movl	%eax, %r12d
 244 024b 0F8573FF 		jne	.L27
 244      FFFF
 245 0251 4C8B7424 		movq	48(%rsp), %r14
 245      30
 246 0256 418A06   		movb	(%r14), %al
 247 0259 4C893500 		movq	%r14, ptr(%rip)
 247      000000
 248 0260 3C3B     		cmpb	$59, %al
 249 0262 740A     		je	.L28
 250 0264 84C0     		testb	%al, %al
 251 0266 7406     		je	.L28
 252 0268 3C20     		cmpb	$32, %al
 253 026a 740A     		je	.L30
 254 026c EB8E     		jmp	.L29
 255              	.L28:
 256 026e 3C20     		cmpb	$32, %al
 257 0270 0F85CB08 		jne	.L26
 257      0000
 258              	.L30:
 259 0276 418A5601 		movb	1(%r14), %dl
 260 027a 498D4601 		leaq	1(%r14), %rax
 261 027e 48890500 		movq	%rax, ptr(%rip)
 261      000000
 262 0285 80FA27   		cmpb	$39, %dl
 263 0288 7409     		je	.L120
 264 028a 80FA22   		cmpb	$34, %dl
 265 028d 0F8569FF 		jne	.L29
 265      FFFF
 266              	.L120:
 267 0293 4983C602 		addq	$2, %r14
 268 0297 4C893500 		movq	%r14, ptr(%rip)
 268      000000
 269 029e 4D89F5   		movq	%r14, %r13
 270              	.L32:
 271 02a1 418A4500 		movb	0(%r13), %al
 272 02a5 38D0     		cmpb	%dl, %al
 273 02a7 740D     		je	.L33
 274 02a9 84C0     		testb	%al, %al
 275 02ab 0F846204 		je	.L107
 275      0000
 276 02b1 49FFC5   		incq	%r13
 277 02b4 EBEB     		jmp	.L32
 278              	.L33:
 279 02b6 84D2     		testb	%dl, %dl
 280 02b8 0F845504 		je	.L107
 280      0000
 281 02be 4D89EC   		movq	%r13, %r12
 282 02c1 4D29F4   		subq	%r14, %r12
 283 02c4 498D7C24 		leaq	1(%r12), %rdi
 283      01
 284 02c9 E8000000 		call	malloc
 284      00
 285 02ce 4885C0   		testq	%rax, %rax
 286 02d1 4989C7   		movq	%rax, %r15
 287 02d4 0F844704 		je	.L108
 287      0000
 288 02da 4D39F5   		cmpq	%r14, %r13
 289 02dd 0F844904 		je	.L109
 289      0000
 290 02e3 4C89E2   		movq	%r12, %rdx
 291 02e6 4C89F6   		movq	%r14, %rsi
 292 02e9 4889C7   		movq	%rax, %rdi
 293 02ec E8000000 		call	strncpy
 293      00
 294 02f1 49FFC5   		incq	%r13
 295 02f4 43C60427 		movb	$0, (%r15,%r12)
 295      00
 296 02f9 BE000000 		movl	$.LC1, %esi
 296      00
 297 02fe 4C89FF   		movq	%r15, %rdi
 298 0301 4C892D00 		movq	%r13, ptr(%rip)
 298      000000
 299 0308 E8000000 		call	fopen
 299      00
 300 030d 4885C0   		testq	%rax, %rax
 301 0310 4989C4   		movq	%rax, %r12
 302 0313 0F840202 		je	.L103
 302      0000
 303 0319 4C89FF   		movq	%r15, %rdi
 304 031c 41BD0000 		movl	$65536, %r13d
 304      0100
 305 0322 E8000000 		call	free
 305      00
 306 0327 488D7C24 		leaq	80(%rsp), %rdi
 306      50
 307 032c 31F6     		xorl	%esi, %esi
 308 032e E8000000 		call	gettimeofday
 308      00
 309 0333 488B4424 		movq	24(%rsp), %rax
 309      18
 310 0338 4989D8   		movq	%rbx, %r8
 311 033b 4889EF   		movq	%rbp, %rdi
 312 033e 3D000001 		cmpl	$65536, %eax
 312      00
 313 0343 440F46E8 		cmovbe	%eax, %r13d
 314 0347 0FB64424 		movzbl	16(%rsp), %eax
 314      10
 315 034c 31C9     		xorl	%ecx, %ecx
 316 034e 4489EA   		movl	%r13d, %edx
 317 0351 89C6     		movl	%eax, %esi
 318 0353 890424   		movl	%eax, (%rsp)
 319 0356 E8000000 		call	flReadChannelAsyncSubmit
 319      00
 320 035b 85C0     		testl	%eax, %eax
 321 035d 741B     		je	.L35
 322              	.L38:
 323 035f BE000000 		movl	$.LC2, %esi
 323      00
 324 0364 4889DF   		movq	%rbx, %rdi
 325 0367 4531FF   		xorl	%r15d, %r15d
 326 036a E8000000 		call	errPrefix
 326      00
 327 036f 41BD0100 		movl	$1, %r13d
 327      0000
 328 0375 E9060100 		jmp	.L36
 328      00
 329              	.L35:
 330 037a 8B442418 		movl	24(%rsp), %eax
 331 037e 4531FF   		xorl	%r15d, %r15d
 332 0381 4429E8   		subl	%r13d, %eax
 333 0384 4189C5   		movl	%eax, %r13d
 334              	.L37:
 335 0387 4585ED   		testl	%r13d, %r13d
 336 038a 0F849800 		je	.L169
 336      0000
 337 0390 4181FD00 		cmpl	$65536, %r13d
 337      000100
 338 0397 41BE0000 		movl	$65536, %r14d
 338      0100
 339 039d 8B3424   		movl	(%rsp), %esi
 340 03a0 450F46F5 		cmovbe	%r13d, %r14d
 341 03a4 4989D8   		movq	%rbx, %r8
 342 03a7 31C9     		xorl	%ecx, %ecx
 343 03a9 4489F2   		movl	%r14d, %edx
 344 03ac 4889EF   		movq	%rbp, %rdi
 345 03af E8000000 		call	flReadChannelAsyncSubmit
 345      00
 346 03b4 85C0     		testl	%eax, %eax
 347 03b6 75A7     		jne	.L38
 348 03b8 488D4C24 		leaq	32(%rsp), %rcx
 348      20
 349 03bd 488D7424 		leaq	64(%rsp), %rsi
 349      40
 350 03c2 4989D8   		movq	%rbx, %r8
 351 03c5 4889EF   		movq	%rbp, %rdi
 352 03c8 4529F5   		subl	%r14d, %r13d
 353 03cb 4889CA   		movq	%rcx, %rdx
 354 03ce E8000000 		call	flReadChannelAsyncAwait
 354      00
 355 03d3 85C0     		testl	%eax, %eax
 356 03d5 7588     		jne	.L38
 357 03d7 8B542420 		movl	32(%rsp), %edx
 358 03db 488B7C24 		movq	64(%rsp), %rdi
 358      40
 359 03e0 4C89E1   		movq	%r12, %rcx
 360 03e3 BE010000 		movl	$1, %esi
 360      00
 361 03e8 E8000000 		call	fwrite
 361      00
 362 03ed 3B442420 		cmpl	32(%rsp), %eax
 363 03f1 89C1     		movl	%eax, %ecx
 364 03f3 7418     		je	.L39
 365              	.L43:
 366 03f5 BE000000 		movl	$.LC2, %esi
 366      00
 367 03fa 4889DF   		movq	%rbx, %rdi
 368 03fd 4531FF   		xorl	%r15d, %r15d
 369 0400 E8000000 		call	errPrefix
 369      00
 370 0405 41BD0B00 		movl	$11, %r13d
 370      0000
 371 040b EB73     		jmp	.L36
 372              	.L39:
 373 040d 488B7424 		movq	64(%rsp), %rsi
 373      40
 374 0412 31C0     		xorl	%eax, %eax
 375              	.L40:
 376 0414 39C1     		cmpl	%eax, %ecx
 377 0416 0F846BFF 		je	.L37
 377      FFFF
 378 041c 0FB61406 		movzbl	(%rsi,%rax), %edx
 379 0420 48FFC0   		incq	%rax
 380 0423 4101D7   		addl	%edx, %r15d
 381 0426 EBEC     		jmp	.L40
 382              	.L169:
 383 0428 488D4C24 		leaq	32(%rsp), %rcx
 383      20
 384 042d 488D7424 		leaq	64(%rsp), %rsi
 384      40
 385 0432 4989D8   		movq	%rbx, %r8
 386 0435 4889EF   		movq	%rbp, %rdi
 387 0438 4889CA   		movq	%rcx, %rdx
 388 043b E8000000 		call	flReadChannelAsyncAwait
 388      00
 389 0440 85C0     		testl	%eax, %eax
 390 0442 0F8517FF 		jne	.L38
 390      FFFF
 391 0448 8B542420 		movl	32(%rsp), %edx
 392 044c 488B7C24 		movq	64(%rsp), %rdi
 392      40
 393 0451 BE010000 		movl	$1, %esi
 393      00
 394 0456 4C89E1   		movq	%r12, %rcx
 395 0459 E8000000 		call	fwrite
 395      00
 396 045e 3B442420 		cmpl	32(%rsp), %eax
 397 0462 89C6     		movl	%eax, %esi
 398 0464 758F     		jne	.L43
 399 0466 488B4C24 		movq	64(%rsp), %rcx
 399      40
 400 046b 31C0     		xorl	%eax, %eax
 401              	.L44:
 402 046d 39C6     		cmpl	%eax, %esi
 403 046f 740C     		je	.L170
 404 0471 0FB61401 		movzbl	(%rcx,%rax), %edx
 405 0475 48FFC0   		incq	%rax
 406 0478 4101D7   		addl	%edx, %r15d
 407 047b EBF0     		jmp	.L44
 408              	.L170:
 409 047d 4531ED   		xorl	%r13d, %r13d
 410              	.L36:
 411 0480 488D7C24 		leaq	96(%rsp), %rdi
 411      60
 412 0485 31F6     		xorl	%esi, %esi
 413 0487 E8000000 		call	gettimeofday
 413      00
 414 048c 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 414      000000
 415 0493 488B4C24 		movq	80(%rsp), %rcx
 415      50
 416 0498 488B4424 		movq	88(%rsp), %rax
 416      58
 417 049d 488B7424 		movq	96(%rsp), %rsi
 417      60
 418 04a2 488B5424 		movq	104(%rsp), %rdx
 418      68
 419 04a7 0F845402 		je	.L64
 419      0000
 420 04ad 4869F640 		imulq	$1000000, %rsi, %rsi
 420      420F00
 421 04b4 488B7C24 		movq	24(%rsp), %rdi
 421      18
 422 04b9 448B4424 		movl	16(%rsp), %r8d
 422      10
 423 04be 4869C940 		imulq	$1000000, %rcx, %rcx
 423      420F00
 424 04c5 4801F2   		addq	%rsi, %rdx
 425 04c8 BE000000 		movl	$.LC5, %esi
 425      00
 426 04cd 4801C8   		addq	%rcx, %rax
 427 04d0 410FB7CF 		movzwl	%r15w, %ecx
 428 04d4 4829C2   		subq	%rax, %rdx
 429 04d7 89F8     		movl	%edi, %eax
 430 04d9 F2480F2A 		cvtsi2sdq	%rdx, %xmm1
 430      CA
 431 04de 89FA     		movl	%edi, %edx
 432 04e0 BF010000 		movl	$1, %edi
 432      00
 433 04e5 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 433      C0
 434 04ea B001     		movb	$1, %al
 435 04ec F20F5E0D 		divsd	.LC3(%rip), %xmm1
 435      00000000 
 436 04f4 F20F590D 		mulsd	.LC4(%rip), %xmm1
 436      00000000 
 437 04fc F20F5EC1 		divsd	%xmm1, %xmm0
 438 0500 E8000000 		call	__printf_chk
 438      00
 439 0505 E9F70100 		jmp	.L64
 439      00
 440              	.L98:
 441 050a 4531E4   		xorl	%r12d, %r12d
 442 050d 4531FF   		xorl	%r15d, %r15d
 443 0510 41BD0300 		movl	$3, %r13d
 443      0000
 444 0516 E9270200 		jmp	.L63
 444      00
 445              	.L103:
 446 051b 41BD0B00 		movl	$11, %r13d
 446      0000
 447 0521 E91C0200 		jmp	.L63
 447      00
 448              	.L20:
 449 0526 4C8D6A01 		leaq	1(%rdx), %r13
 450 052a 48C74424 		movq	$1, 48(%rsp)
 450      30010000 
 450      00
 451 0533 4C892D00 		movq	%r13, ptr(%rip)
 451      000000
 452 053a E8000000 		call	__errno_location
 452      00
 453 053f 488D7424 		leaq	64(%rsp), %rsi
 453      40
 454 0544 4989C4   		movq	%rax, %r12
 455 0547 C7000000 		movl	$0, (%rax)
 455      0000
 456 054d BA100000 		movl	$16, %edx
 456      00
 457 0552 4C89EF   		movq	%r13, %rdi
 458 0555 E8000000 		call	strtoul
 458      00
 459 055a 41833C24 		cmpl	$0, (%r12)
 459      00
 460 055f 4989C6   		movq	%rax, %r14
 461 0562 0F85A403 		jne	.L105
 461      0000
 462 0568 4883F87F 		cmpq	$127, %rax
 463 056c 0F87AE03 		ja	.L106
 463      0000
 464 0572 488B4424 		movq	64(%rsp), %rax
 464      40
 465 0577 803820   		cmpb	$32, (%rax)
 466 057a 48890500 		movq	%rax, ptr(%rip)
 466      000000
 467 0581 0F850605 		jne	.L119
 467      0000
 468 0587 8A5001   		movb	1(%rax), %dl
 469 058a 488D7801 		leaq	1(%rax), %rdi
 470 058e 48893D00 		movq	%rdi, ptr(%rip)
 470      000000
 471 0595 80FA27   		cmpb	$39, %dl
 472 0598 7409     		je	.L121
 473 059a 80FA22   		cmpb	$34, %dl
 474 059d 0F85A701 		jne	.L58
 474      0000
 475              	.L121:
 476 05a3 488D7002 		leaq	2(%rax), %rsi
 477 05a7 66C74424 		movw	$0, 32(%rsp)
 477      200000
 478 05ae 48893500 		movq	%rsi, ptr(%rip)
 478      000000
 479 05b5 4989F4   		movq	%rsi, %r12
 480              	.L60:
 481 05b8 418A0424 		movb	(%r12), %al
 482 05bc 38D0     		cmpb	%dl, %al
 483 05be 740D     		je	.L61
 484 05c0 84C0     		testb	%al, %al
 485 05c2 0F844B01 		je	.L107
 485      0000
 486 05c8 49FFC4   		incq	%r12
 487 05cb EBEB     		jmp	.L60
 488              	.L61:
 489 05cd 84D2     		testb	%dl, %dl
 490 05cf 0F843E01 		je	.L107
 490      0000
 491 05d5 4D89E5   		movq	%r12, %r13
 492 05d8 48893424 		movq	%rsi, (%rsp)
 493 05dc 4929F5   		subq	%rsi, %r13
 494 05df 498D7D01 		leaq	1(%r13), %rdi
 495 05e3 E8000000 		call	malloc
 495      00
 496 05e8 4885C0   		testq	%rax, %rax
 497 05eb 4989C7   		movq	%rax, %r15
 498 05ee 0F842D01 		je	.L108
 498      0000
 499 05f4 488B3424 		movq	(%rsp), %rsi
 500 05f8 4939F4   		cmpq	%rsi, %r12
 501 05fb 0F842B01 		je	.L109
 501      0000
 502 0601 4C89EA   		movq	%r13, %rdx
 503 0604 4889C7   		movq	%rax, %rdi
 504 0607 49FFC4   		incq	%r12
 505 060a E8000000 		call	strncpy
 505      00
 506 060f 43C6042F 		movb	$0, (%r15,%r13)
 506      00
 507 0614 BE000000 		movl	$.LC6, %esi
 507      00
 508 0619 4C89FF   		movq	%r15, %rdi
 509 061c 4C892500 		movq	%r12, ptr(%rip)
 509      000000
 510 0623 E8000000 		call	fopen
 510      00
 511 0628 4885C0   		testq	%rax, %rax
 512 062b 4989C4   		movq	%rax, %r12
 513 062e 0F840301 		je	.L110
 513      0000
 514 0634 4C89FF   		movq	%r15, %rdi
 515 0637 E8000000 		call	free
 515      00
 516 063c 488D7C24 		leaq	80(%rsp), %rdi
 516      50
 517 0641 31F6     		xorl	%esi, %esi
 518 0643 E8000000 		call	gettimeofday
 518      00
 519 0648 488D4C24 		leaq	48(%rsp), %rcx
 519      30
 520 064d 4C8D4424 		leaq	32(%rsp), %r8
 520      20
 521 0652 4C89E2   		movq	%r12, %rdx
 522 0655 4989D9   		movq	%rbx, %r9
 523 0658 4489F6   		movl	%r14d, %esi
 524 065b 4889EF   		movq	%rbp, %rdi
 525 065e E89DF9FF 		call	doWrite
 525      FF
 526 0663 488D7C24 		leaq	96(%rsp), %rdi
 526      60
 527 0668 31F6     		xorl	%esi, %esi
 528 066a 4189C5   		movl	%eax, %r13d
 529 066d E8000000 		call	gettimeofday
 529      00
 530 0672 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 530      000000
 531 0679 488B7424 		movq	80(%rsp), %rsi
 531      50
 532 067e 488B4424 		movq	88(%rsp), %rax
 532      58
 533 0683 488B7C24 		movq	96(%rsp), %rdi
 533      60
 534 0688 488B4C24 		movq	104(%rsp), %rcx
 534      68
 535 068d 488B5424 		movq	48(%rsp), %rdx
 535      30
 536 0692 746D     		je	.L64
 537 0694 4869FF40 		imulq	$1000000, %rdi, %rdi
 537      420F00
 538 069b 4869F640 		imulq	$1000000, %rsi, %rsi
 538      420F00
 539 06a2 4801F9   		addq	%rdi, %rcx
 540 06a5 4801F0   		addq	%rsi, %rax
 541 06a8 4829C1   		subq	%rax, %rcx
 542 06ab 4885D2   		testq	%rdx, %rdx
 543 06ae F2480F2A 		cvtsi2sdq	%rcx, %xmm1
 543      C9
 544 06b3 7807     		js	.L65
 545 06b5 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 545      C2
 546 06ba EB18     		jmp	.L66
 547              	.L65:
 548 06bc 4889D0   		movq	%rdx, %rax
 549 06bf 4889D1   		movq	%rdx, %rcx
 550 06c2 48D1E8   		shrq	%rax
 551 06c5 83E101   		andl	$1, %ecx
 552 06c8 4809C8   		orq	%rcx, %rax
 553 06cb F2480F2A 		cvtsi2sdq	%rax, %xmm0
 553      C0
 554 06d0 F20F58C0 		addsd	%xmm0, %xmm0
 555              	.L66:
 556 06d4 F20F5E0D 		divsd	.LC3(%rip), %xmm1
 556      00000000 
 557 06dc 0FB74C24 		movzwl	32(%rsp), %ecx
 557      20
 558 06e1 4D89F0   		movq	%r14, %r8
 559 06e4 BE000000 		movl	$.LC7, %esi
 559      00
 560 06e9 BF010000 		movl	$1, %edi
 560      00
 561 06ee B001     		movb	$1, %al
 562 06f0 F20F590D 		mulsd	.LC4(%rip), %xmm1
 562      00000000 
 563 06f8 F20F5EC1 		divsd	%xmm1, %xmm0
 564 06fc E8000000 		call	__printf_chk
 564      00
 565              	.L64:
 566 0701 4585ED   		testl	%r13d, %r13d
 567 0704 7539     		jne	.L111
 568 0706 4C89E7   		movq	%r12, %rdi
 569 0709 E8000000 		call	fclose
 569      00
 570 070e E9350300 		jmp	.L55
 570      00
 571              	.L107:
 572 0713 4531E4   		xorl	%r12d, %r12d
 573 0716 4531FF   		xorl	%r15d, %r15d
 574 0719 41BD0600 		movl	$6, %r13d
 574      0000
 575 071f EB21     		jmp	.L63
 576              	.L108:
 577 0721 4531E4   		xorl	%r12d, %r12d
 578 0724 41BD0700 		movl	$7, %r13d
 578      0000
 579 072a EB16     		jmp	.L63
 580              	.L109:
 581 072c 4531E4   		xorl	%r12d, %r12d
 582 072f 41BD0800 		movl	$8, %r13d
 582      0000
 583 0735 EB0B     		jmp	.L63
 584              	.L110:
 585 0737 41BD0A00 		movl	$10, %r13d
 585      0000
 586 073d EB03     		jmp	.L63
 587              	.L111:
 588 073f 4531FF   		xorl	%r15d, %r15d
 589              	.L63:
 590 0742 4531F6   		xorl	%r14d, %r14d
 591 0745 E9520300 		jmp	.L16
 591      00
 592              	.L58:
 593 074a 8D72D0   		leal	-48(%rdx), %esi
 594 074d B9010000 		movl	$1, %ecx
 594      00
 595 0752 4080FE09 		cmpb	$9, %sil
 596 0756 760E     		jbe	.L68
 597 0758 83E2DF   		andl	$-33, %edx
 598 075b 31C9     		xorl	%ecx, %ecx
 599 075d 83EA41   		subl	$65, %edx
 600 0760 80FA05   		cmpb	$5, %dl
 601 0763 0F96C1   		setbe	%cl
 602              	.L68:
 603 0766 85C9     		testl	%ecx, %ecx
 604 0768 0F841F03 		je	.L119
 604      0000
 605 076e 4883C002 		addq	$2, %rax
 606              	.L70:
 607 0772 8A08     		movb	(%rax), %cl
 608 0774 BA010000 		movl	$1, %edx
 608      00
 609 0779 8D71D0   		leal	-48(%rcx), %esi
 610 077c 4080FE09 		cmpb	$9, %sil
 611 0780 760E     		jbe	.L71
 612 0782 83E1DF   		andl	$-33, %ecx
 613 0785 31D2     		xorl	%edx, %edx
 614 0787 83E941   		subl	$65, %ecx
 615 078a 80F905   		cmpb	$5, %cl
 616 078d 0F96C2   		setbe	%dl
 617              	.L71:
 618 0790 85D2     		testl	%edx, %edx
 619 0792 7405     		je	.L171
 620 0794 48FFC0   		incq	%rax
 621 0797 EBD9     		jmp	.L70
 622              	.L171:
 623 0799 4829F8   		subq	%rdi, %rax
 624 079c A801     		testb	$1, %al
 625 079e 0F859001 		jne	.L114
 625      0000
 626 07a4 48D1E8   		shrq	%rax
 627 07a7 4889C7   		movq	%rax, %rdi
 628 07aa 4989C5   		movq	%rax, %r13
 629 07ad 48894424 		movq	%rax, 48(%rsp)
 629      30
 630 07b2 E8000000 		call	malloc
 630      00
 631 07b7 488B0D00 		movq	ptr(%rip), %rcx
 631      000000
 632 07be 4989C4   		movq	%rax, %r12
 633 07c1 31D2     		xorl	%edx, %edx
 634              	.L73:
 635 07c3 4C39EA   		cmpq	%r13, %rdx
 636 07c6 744E     		je	.L172
 637 07c8 8A0451   		movb	(%rcx,%rdx,2), %al
 638 07cb 8D70D0   		leal	-48(%rax), %esi
 639 07ce 4080FE09 		cmpb	$9, %sil
 640 07d2 761A     		jbe	.L74
 641 07d4 8D709F   		leal	-97(%rax), %esi
 642 07d7 4080FE05 		cmpb	$5, %sil
 643 07db 7705     		ja	.L75
 644 07dd 8D70A9   		leal	-87(%rax), %esi
 645 07e0 EB0C     		jmp	.L74
 646              	.L75:
 647 07e2 8D70BF   		leal	-65(%rax), %esi
 648 07e5 4080FE05 		cmpb	$5, %sil
 649 07e9 7726     		ja	.L76
 650 07eb 8D70C9   		leal	-55(%rax), %esi
 651              	.L74:
 652 07ee 408A7C51 		movb	1(%rcx,%rdx,2), %dil
 652      01
 653 07f3 8D47D0   		leal	-48(%rdi), %eax
 654 07f6 3C09     		cmpb	$9, %al
 655 07f8 760E     		jbe	.L78
 656 07fa 8D479F   		leal	-97(%rdi), %eax
 657 07fd 3C05     		cmpb	$5, %al
 658 07ff 0F87E003 		ja	.L77
 658      0000
 659 0805 8D47A9   		leal	-87(%rdi), %eax
 660              	.L78:
 661 0808 C1E604   		sall	$4, %esi
 662 080b 09C6     		orl	%eax, %esi
 663 080d 41883414 		movb	%sil, (%r12,%rdx)
 664              	.L76:
 665 0811 48FFC2   		incq	%rdx
 666 0814 EBAD     		jmp	.L73
 667              	.L172:
 668 0816 4801D2   		addq	%rdx, %rdx
 669 0819 488D7C24 		leaq	80(%rsp), %rdi
 669      50
 670 081e 31F6     		xorl	%esi, %esi
 671 0820 4801D1   		addq	%rdx, %rcx
 672 0823 48890D00 		movq	%rcx, ptr(%rip)
 672      000000
 673 082a E8000000 		call	gettimeofday
 673      00
 674 082f 488B5424 		movq	48(%rsp), %rdx
 674      30
 675 0834 4989D8   		movq	%rbx, %r8
 676 0837 4C89E1   		movq	%r12, %rcx
 677 083a 4489F6   		movl	%r14d, %esi
 678 083d 4889EF   		movq	%rbp, %rdi
 679 0840 E8000000 		call	flWriteChannel
 679      00
 680 0845 488D7C24 		leaq	96(%rsp), %rdi
 680      60
 681 084a 31F6     		xorl	%esi, %esi
 682 084c 4189C5   		movl	%eax, %r13d
 683 084f E8000000 		call	gettimeofday
 683      00
 684 0854 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 684      000000
 685 085b 4C8B4C24 		movq	80(%rsp), %r9
 685      50
 686 0860 488B7C24 		movq	88(%rsp), %rdi
 686      58
 687 0865 4C8B5424 		movq	96(%rsp), %r10
 687      60
 688 086a 4C8B4424 		movq	104(%rsp), %r8
 688      68
 689 086f 488B5424 		movq	48(%rsp), %rdx
 689      30
 690 0874 0F848000 		je	.L80
 690      0000
 691 087a 31C9     		xorl	%ecx, %ecx
 692 087c 31C0     		xorl	%eax, %eax
 693              	.L81:
 694 087e 4839D1   		cmpq	%rdx, %rcx
 695 0881 740C     		je	.L173
 696 0883 410FB634 		movzbl	(%r12,%rcx), %esi
 696      0C
 697 0888 48FFC1   		incq	%rcx
 698 088b 01F0     		addl	%esi, %eax
 699 088d EBEF     		jmp	.L81
 700              	.L173:
 701 088f 4969CA40 		imulq	$1000000, %r10, %rcx
 701      420F00
 702 0896 4D69C940 		imulq	$1000000, %r9, %r9
 702      420F00
 703 089d 4C01C1   		addq	%r8, %rcx
 704 08a0 4C01CF   		addq	%r9, %rdi
 705 08a3 4829F9   		subq	%rdi, %rcx
 706 08a6 4885D2   		testq	%rdx, %rdx
 707 08a9 F2480F2A 		cvtsi2sdq	%rcx, %xmm1
 707      C9
 708 08ae 7807     		js	.L83
 709 08b0 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 709      C2
 710 08b5 EB18     		jmp	.L84
 711              	.L83:
 712 08b7 4889D1   		movq	%rdx, %rcx
 713 08ba 4889D6   		movq	%rdx, %rsi
 714 08bd 48D1E9   		shrq	%rcx
 715 08c0 83E601   		andl	$1, %esi
 716 08c3 4809F1   		orq	%rsi, %rcx
 717 08c6 F2480F2A 		cvtsi2sdq	%rcx, %xmm0
 717      C1
 718 08cb F20F58C0 		addsd	%xmm0, %xmm0
 719              	.L84:
 720 08cf F20F5E0D 		divsd	.LC3(%rip), %xmm1
 720      00000000 
 721 08d7 0FB7C8   		movzwl	%ax, %ecx
 722 08da 4D89F0   		movq	%r14, %r8
 723 08dd BE000000 		movl	$.LC7, %esi
 723      00
 724 08e2 BF010000 		movl	$1, %edi
 724      00
 725 08e7 B001     		movb	$1, %al
 726 08e9 F20F590D 		mulsd	.LC4(%rip), %xmm1
 726      00000000 
 727 08f1 F20F5EC1 		divsd	%xmm1, %xmm0
 728 08f5 E8000000 		call	__printf_chk
 728      00
 729              	.L80:
 730 08fa 4585ED   		testl	%r13d, %r13d
 731 08fd 7549     		jne	.L115
 732 08ff 4C89E7   		movq	%r12, %rdi
 733 0902 E8000000 		call	free
 733      00
 734 0907 E93C0100 		jmp	.L55
 734      00
 735              	.L105:
 736 090c 4531E4   		xorl	%r12d, %r12d
 737 090f 4531FF   		xorl	%r15d, %r15d
 738 0912 4531F6   		xorl	%r14d, %r14d
 739 0915 41BD0200 		movl	$2, %r13d
 739      0000
 740 091b E97C0100 		jmp	.L16
 740      00
 741              	.L106:
 742 0920 4531E4   		xorl	%r12d, %r12d
 743 0923 4531FF   		xorl	%r15d, %r15d
 744 0926 4531F6   		xorl	%r14d, %r14d
 745 0929 41BD0300 		movl	$3, %r13d
 745      0000
 746 092f E9680100 		jmp	.L16
 746      00
 747              	.L114:
 748 0934 4531E4   		xorl	%r12d, %r12d
 749 0937 4531FF   		xorl	%r15d, %r15d
 750 093a 4531F6   		xorl	%r14d, %r14d
 751 093d 41BD0900 		movl	$9, %r13d
 751      0000
 752 0943 E9540100 		jmp	.L16
 752      00
 753              	.L115:
 754 0948 4D89E6   		movq	%r12, %r14
 755 094b 4531FF   		xorl	%r15d, %r15d
 756 094e 4531E4   		xorl	%r12d, %r12d
 757 0951 41BD0100 		movl	$1, %r13d
 757      0000
 758 0957 E9400100 		jmp	.L16
 758      00
 759              	.L168:
 760 095c 4C8D6A01 		leaq	1(%rdx), %r13
 761 0960 4C892D00 		movq	%r13, ptr(%rip)
 761      000000
 762 0967 E8000000 		call	__errno_location
 762      00
 763 096c 488D7424 		leaq	64(%rsp), %rsi
 763      40
 764 0971 4989C4   		movq	%rax, %r12
 765 0974 C7000000 		movl	$0, (%rax)
 765      0000
 766 097a BA100000 		movl	$16, %edx
 766      00
 767 097f 4C89EF   		movq	%r13, %rdi
 768 0982 E8000000 		call	strtoul
 768      00
 769 0987 41833C24 		cmpl	$0, (%r12)
 769      00
 770 098c 753C     		jne	.L116
 771 098e 3DFF0000 		cmpl	$255, %eax
 771      00
 772 0993 773D     		ja	.L117
 773 0995 488B5424 		movq	64(%rsp), %rdx
 773      40
 774 099a 48891500 		movq	%rdx, ptr(%rip)
 774      000000
 775 09a1 8A12     		movb	(%rdx), %dl
 776 09a3 80FA3B   		cmpb	$59, %dl
 777 09a6 7404     		je	.L122
 778 09a8 84D2     		testb	%dl, %dl
 779 09aa 752E     		jne	.L118
 780              	.L122:
 781 09ac 0FB6F0   		movzbl	%al, %esi
 782 09af 4889DA   		movq	%rbx, %rdx
 783 09b2 4889EF   		movq	%rbp, %rdi
 784 09b5 E8000000 		call	flSelectConduit
 784      00
 785 09ba 85C0     		testl	%eax, %eax
 786 09bc 0F848600 		je	.L55
 786      0000
 787 09c2 41BD0100 		movl	$1, %r13d
 787      0000
 788 09c8 EB16     		jmp	.L85
 789              	.L116:
 790 09ca 41BD0200 		movl	$2, %r13d
 790      0000
 791 09d0 EB0E     		jmp	.L85
 792              	.L117:
 793 09d2 41BD0400 		movl	$4, %r13d
 793      0000
 794 09d8 EB06     		jmp	.L85
 795              	.L118:
 796 09da 41BD0500 		movl	$5, %r13d
 796      0000
 797              	.L85:
 798 09e0 4531E4   		xorl	%r12d, %r12d
 799 09e3 4531FF   		xorl	%r15d, %r15d
 800 09e6 4531F6   		xorl	%r14d, %r14d
 801 09e9 E9AE0000 		jmp	.L16
 801      00
 802              	.L175:
 803 09ee 4969C840 		imulq	$1000000, %r8, %rcx
 803      420F00
 804 09f5 F2490F2A 		cvtsi2sdq	%r15, %xmm0
 804      C7
 805 09fa 4969D140 		imulq	$1000000, %r9, %rdx
 805      420F00
 806 0a01 448B4424 		movl	16(%rsp), %r8d
 806      10
 807 0a06 4801F1   		addq	%rsi, %rcx
 808 0a09 BE000000 		movl	$.LC5, %esi
 808      00
 809 0a0e 4801FA   		addq	%rdi, %rdx
 810 0a11 BF010000 		movl	$1, %edi
 810      00
 811 0a16 4829CA   		subq	%rcx, %rdx
 812 0a19 0FB7C8   		movzwl	%ax, %ecx
 813 0a1c B001     		movb	$1, %al
 814 0a1e F2480F2A 		cvtsi2sdq	%rdx, %xmm1
 814      CA
 815 0a23 4489E2   		movl	%r12d, %edx
 816 0a26 F20F5E0D 		divsd	.LC3(%rip), %xmm1
 816      00000000 
 817 0a2e F20F590D 		mulsd	.LC4(%rip), %xmm1
 817      00000000 
 818 0a36 F20F5EC1 		divsd	%xmm1, %xmm0
 819 0a3a E8000000 		call	__printf_chk
 819      00
 820              	.L50:
 821 0a3f 4585ED   		testl	%r13d, %r13d
 822 0a42 0F858C01 		jne	.L93
 822      0000
 823              	.L55:
 824 0a48 488B0500 		movq	ptr(%rip), %rax
 824      000000
 825 0a4f 8A00     		movb	(%rax), %al
 826 0a51 3C3B     		cmpb	$59, %al
 827 0a53 0F8402F7 		je	.L17
 827      FFFF
 828 0a59 84C0     		testb	%al, %al
 829 0a5b 7530     		jne	.L119
 830 0a5d 488B5424 		movq	120(%rsp), %rdx
 830      78
 831 0a62 488B7424 		movq	112(%rsp), %rsi
 831      70
 832 0a67 31FF     		xorl	%edi, %edi
 833 0a69 4531E4   		xorl	%r12d, %r12d
 834 0a6c 4531FF   		xorl	%r15d, %r15d
 835 0a6f 4531F6   		xorl	%r14d, %r14d
 836 0a72 4531ED   		xorl	%r13d, %r13d
 837 0a75 E8000000 		call	dump
 837      00
 838 0a7a EB20     		jmp	.L16
 839              	.L96:
 840 0a7c 4531E4   		xorl	%r12d, %r12d
 841 0a7f 4531FF   		xorl	%r15d, %r15d
 842 0a82 4531F6   		xorl	%r14d, %r14d
 843 0a85 41BD0100 		movl	$1, %r13d
 843      0000
 844 0a8b EB0F     		jmp	.L16
 845              	.L119:
 846 0a8d 4531E4   		xorl	%r12d, %r12d
 847 0a90 4531FF   		xorl	%r15d, %r15d
 848 0a93 4531F6   		xorl	%r14d, %r14d
 849 0a96 41BD0500 		movl	$5, %r13d
 849      0000
 850              	.L16:
 851 0a9c 488D7C24 		leaq	112(%rsp), %rdi
 851      70
 852 0aa1 E8000000 		call	bufDestroy
 852      00
 853 0aa6 4D85E4   		testq	%r12, %r12
 854 0aa9 7408     		je	.L89
 855 0aab 4C89E7   		movq	%r12, %rdi
 856 0aae E8000000 		call	fclose
 856      00
 857              	.L89:
 858 0ab3 4C89FF   		movq	%r15, %rdi
 859 0ab6 E8000000 		call	free
 859      00
 860 0abb 4C89F7   		movq	%r14, %rdi
 861 0abe E8000000 		call	free
 861      00
 862 0ac3 4183FD01 		cmpl	$1, %r13d
 863 0ac7 0F862B01 		jbe	.L123
 863      0000
 864 0acd 4C8B0500 		movq	ptr(%rip), %r8
 864      000000
 865 0ad4 4C8B4C24 		movq	8(%rsp), %r9
 865      08
 866 0ad9 4489E8   		movl	%r13d, %eax
 867 0adc 488B0CC5 		movq	errMessages(,%rax,8), %rcx
 867      00000000 
 868 0ae4 488B3D00 		movq	stderr(%rip), %rdi
 868      000000
 869 0aeb BA000000 		movl	$.LC8, %edx
 869      00
 870 0af0 BE010000 		movl	$1, %esi
 870      00
 871 0af5 31C0     		xorl	%eax, %eax
 872 0af7 31DB     		xorl	%ebx, %ebx
 873 0af9 4D29C8   		subq	%r9, %r8
 874 0afc 4489C5   		movl	%r8d, %ebp
 875 0aff E8000000 		call	__fprintf_chk
 875      00
 876              	.L91:
 877 0b04 39EB     		cmpl	%ebp, %ebx
 878 0b06 7D1C     		jge	.L174
 879 0b08 488B3D00 		movq	stderr(%rip), %rdi
 879      000000
 880 0b0f BA000000 		movl	$.LC9, %edx
 880      00
 881 0b14 BE010000 		movl	$1, %esi
 881      00
 882 0b19 31C0     		xorl	%eax, %eax
 883 0b1b FFC3     		incl	%ebx
 884 0b1d E8000000 		call	__fprintf_chk
 884      00
 885 0b22 EBE0     		jmp	.L91
 886              	.L174:
 887 0b24 488B3D00 		movq	stderr(%rip), %rdi
 887      000000
 888 0b2b BA000000 		movl	$.LC10, %edx
 888      00
 889 0b30 BE010000 		movl	$1, %esi
 889      00
 890 0b35 31C0     		xorl	%eax, %eax
 891 0b37 E8000000 		call	__fprintf_chk
 891      00
 892 0b3c E9B70000 		jmp	.L123
 892      00
 893              	.L26:
 894 0b41 4589E7   		movl	%r12d, %r15d
 895 0b44 488D7C24 		leaq	112(%rsp), %rdi
 895      70
 896 0b49 31F6     		xorl	%esi, %esi
 897 0b4b 4889D9   		movq	%rbx, %rcx
 898 0b4e 4C89FA   		movq	%r15, %rdx
 899 0b51 4C8B7424 		movq	120(%rsp), %r14
 899      78
 900 0b56 E8000000 		call	bufAppendConst
 900      00
 901 0b5b 85C0     		testl	%eax, %eax
 902 0b5d 7575     		jne	.L93
 903 0b5f 488D7C24 		leaq	80(%rsp), %rdi
 903      50
 904 0b64 31F6     		xorl	%esi, %esi
 905 0b66 E8000000 		call	gettimeofday
 905      00
 906 0b6b 0FB67424 		movzbl	16(%rsp), %esi
 906      10
 907 0b70 4C89F1   		movq	%r14, %rcx
 908 0b73 48034C24 		addq	112(%rsp), %rcx
 908      70
 909 0b78 4989D8   		movq	%rbx, %r8
 910 0b7b 4C89FA   		movq	%r15, %rdx
 911 0b7e 4889EF   		movq	%rbp, %rdi
 912 0b81 E8000000 		call	flReadChannel
 912      00
 913 0b86 488D7C24 		leaq	96(%rsp), %rdi
 913      60
 914 0b8b 31F6     		xorl	%esi, %esi
 915 0b8d 4189C5   		movl	%eax, %r13d
 916 0b90 E8000000 		call	gettimeofday
 916      00
 917 0b95 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 917      000000
 918 0b9c 4C8B4424 		movq	80(%rsp), %r8
 918      50
 919 0ba1 488B7424 		movq	88(%rsp), %rsi
 919      58
 920 0ba6 4C8B4C24 		movq	96(%rsp), %r9
 920      60
 921 0bab 488B7C24 		movq	104(%rsp), %rdi
 921      68
 922 0bb0 0F8489FE 		je	.L50
 922      FFFF
 923 0bb6 4C037424 		addq	112(%rsp), %r14
 923      70
 924 0bbb 31C9     		xorl	%ecx, %ecx
 925 0bbd 31C0     		xorl	%eax, %eax
 926              	.L51:
 927 0bbf 4939CF   		cmpq	%rcx, %r15
 928 0bc2 0F8426FE 		je	.L175
 928      FFFF
 929 0bc8 410FB614 		movzbl	(%r14,%rcx), %edx
 929      0E
 930 0bcd 48FFC1   		incq	%rcx
 931 0bd0 01D0     		addl	%edx, %eax
 932 0bd2 EBEB     		jmp	.L51
 933              	.L93:
 934 0bd4 4531E4   		xorl	%r12d, %r12d
 935 0bd7 4531FF   		xorl	%r15d, %r15d
 936 0bda 41BD0100 		movl	$1, %r13d
 936      0000
 937 0be0 E95DFBFF 		jmp	.L63
 937      FF
 938              	.L77:
 939 0be5 8D47BF   		leal	-65(%rdi), %eax
 940 0be8 3C05     		cmpb	$5, %al
 941 0bea 0F8721FC 		ja	.L76
 941      FFFF
 942 0bf0 8D47C9   		leal	-55(%rdi), %eax
 943 0bf3 E910FCFF 		jmp	.L78
 943      FF
 944              	.L123:
 945 0bf8 4881C498 		addq	$152, %rsp
 945      000000
 946              		.cfi_def_cfa_offset 56
 947 0bff 4489E8   		movl	%r13d, %eax
 948 0c02 5B       		popq	%rbx
 949              		.cfi_def_cfa_offset 48
 950 0c03 5D       		popq	%rbp
 951              		.cfi_def_cfa_offset 40
 952 0c04 415C     		popq	%r12
 953              		.cfi_def_cfa_offset 32
 954 0c06 415D     		popq	%r13
 955              		.cfi_def_cfa_offset 24
 956 0c08 415E     		popq	%r14
 957              		.cfi_def_cfa_offset 16
 958 0c0a 415F     		popq	%r15
 959              		.cfi_def_cfa_offset 8
 960 0c0c C3       		ret
 961              		.cfi_endproc
 962              	.LFE89:
 964              		.text
 965              		.p2align 4,,15
 966              		.globl	decrypt
 968              	decrypt:
 969              	.LFB75:
 970              		.cfi_startproc
 971 0000 53       		pushq	%rbx
 972              		.cfi_def_cfa_offset 16
 973              		.cfi_offset 3, -16
 974 0001 8B0F     		movl	(%rdi), %ecx
 975 0003 8B5704   		movl	4(%rdi), %edx
 976 0006 8B1E     		movl	(%rsi), %ebx
 977 0008 448B5E04 		movl	4(%rsi), %r11d
 978 000c 448B5608 		movl	8(%rsi), %r10d
 979 0010 448B4E0C 		movl	12(%rsi), %r9d
 980 0014 BE2037EF 		movl	$-957401312, %esi
 980      C6
 981 0019 0F1F8000 		.p2align 4,,10
 981      000000
 982              		.p2align 3
 983              	.L178:
 984 0020 89C8     		movl	%ecx, %eax
 985 0022 4189C8   		movl	%ecx, %r8d
 986 0025 C1E004   		sall	$4, %eax
 987 0028 41C1E805 		shrl	$5, %r8d
 988 002c 4501C8   		addl	%r9d, %r8d
 989 002f 4401D0   		addl	%r10d, %eax
 990 0032 4431C0   		xorl	%r8d, %eax
 991 0035 448D040E 		leal	(%rsi,%rcx), %r8d
 992 0039 4431C0   		xorl	%r8d, %eax
 993 003c 29C2     		subl	%eax, %edx
 994 003e 89D0     		movl	%edx, %eax
 995 0040 4189D0   		movl	%edx, %r8d
 996 0043 C1E004   		sall	$4, %eax
 997 0046 41C1E805 		shrl	$5, %r8d
 998 004a 4501D8   		addl	%r11d, %r8d
 999 004d 01D8     		addl	%ebx, %eax
 1000 004f 4431C0   		xorl	%r8d, %eax
 1001 0052 448D0432 		leal	(%rdx,%rsi), %r8d
 1002 0056 4431C0   		xorl	%r8d, %eax
 1003 0059 29C1     		subl	%eax, %ecx
 1004 005b 81C64786 		addl	$1640531527, %esi
 1004      C861
 1005 0061 75BD     		jne	.L178
 1006 0063 895704   		movl	%edx, 4(%rdi)
 1007 0066 890F     		movl	%ecx, (%rdi)
 1008 0068 5B       		popq	%rbx
 1009              		.cfi_def_cfa_offset 8
 1010 0069 C3       		ret
 1011              		.cfi_endproc
 1012              	.LFE75:
 1014 006a 660F1F44 		.p2align 4,,15
 1014      0000
 1015              		.globl	encrypt
 1017              	encrypt:
 1018              	.LFB76:
 1019              		.cfi_startproc
 1020 0070 53       		pushq	%rbx
 1021              		.cfi_def_cfa_offset 16
 1022              		.cfi_offset 3, -16
 1023 0071 8B0F     		movl	(%rdi), %ecx
 1024 0073 8B5704   		movl	4(%rdi), %edx
 1025 0076 8B1E     		movl	(%rsi), %ebx
 1026 0078 448B5E04 		movl	4(%rsi), %r11d
 1027 007c 448B5608 		movl	8(%rsi), %r10d
 1028 0080 448B4E0C 		movl	12(%rsi), %r9d
 1029 0084 31F6     		xorl	%esi, %esi
 1030 0086 662E0F1F 		.p2align 4,,10
 1030      84000000 
 1030      0000
 1031              		.p2align 3
 1032              	.L182:
 1033 0090 89D0     		movl	%edx, %eax
 1034 0092 4189D0   		movl	%edx, %r8d
 1035 0095 81EE4786 		subl	$1640531527, %esi
 1035      C861
 1036 009b C1E004   		sall	$4, %eax
 1037 009e 41C1E805 		shrl	$5, %r8d
 1038 00a2 4501D8   		addl	%r11d, %r8d
 1039 00a5 01D8     		addl	%ebx, %eax
 1040 00a7 4431C0   		xorl	%r8d, %eax
 1041 00aa 448D0432 		leal	(%rdx,%rsi), %r8d
 1042 00ae 4431C0   		xorl	%r8d, %eax
 1043 00b1 01C1     		addl	%eax, %ecx
 1044 00b3 89C8     		movl	%ecx, %eax
 1045 00b5 4189C8   		movl	%ecx, %r8d
 1046 00b8 C1E004   		sall	$4, %eax
 1047 00bb 41C1E805 		shrl	$5, %r8d
 1048 00bf 4501C8   		addl	%r9d, %r8d
 1049 00c2 4401D0   		addl	%r10d, %eax
 1050 00c5 4431C0   		xorl	%r8d, %eax
 1051 00c8 448D0431 		leal	(%rcx,%rsi), %r8d
 1052 00cc 4431C0   		xorl	%r8d, %eax
 1053 00cf 01C2     		addl	%eax, %edx
 1054 00d1 81FE2037 		cmpl	$-957401312, %esi
 1054      EFC6
 1055 00d7 75B7     		jne	.L182
 1056 00d9 895704   		movl	%edx, 4(%rdi)
 1057 00dc 890F     		movl	%ecx, (%rdi)
 1058 00de 5B       		popq	%rbx
 1059              		.cfi_def_cfa_offset 8
 1060 00df C3       		ret
 1061              		.cfi_endproc
 1062              	.LFE76:
 1064              		.p2align 4,,15
 1065              		.globl	decrypt64
 1067              	decrypt64:
 1068              	.LFB77:
 1069              		.cfi_startproc
 1070 00e0 8B0F     		movl	(%rdi), %ecx
 1071 00e2 8B5704   		movl	4(%rdi), %edx
 1072 00e5 BE2037EF 		movl	$-957401312, %esi
 1072      C6
 1073 00ea 660F1F44 		.p2align 4,,10
 1073      0000
 1074              		.p2align 3
 1075              	.L186:
 1076 00f0 89C8     		movl	%ecx, %eax
 1077 00f2 4189C8   		movl	%ecx, %r8d
 1078 00f5 C1E004   		sall	$4, %eax
 1079 00f8 41C1E805 		shrl	$5, %r8d
 1080 00fc 4181E8A9 		subl	$15764393, %r8d
 1080      8BF000
 1081 0103 05F799FD 		addl	$1140693495, %eax
 1081      43
 1082 0108 4431C0   		xorl	%r8d, %eax
 1083 010b 448D040E 		leal	(%rsi,%rcx), %r8d
 1084 010f 4431C0   		xorl	%r8d, %eax
 1085 0112 29C2     		subl	%eax, %edx
 1086 0114 89D0     		movl	%edx, %eax
 1087 0116 4189D0   		movl	%edx, %r8d
 1088 0119 C1E004   		sall	$4, %eax
 1089 011c 41C1E805 		shrl	$5, %r8d
 1090 0120 4181C08F 		addl	$1979237519, %r8d
 1090      C4F875
 1091 0127 058CC127 		addl	$690471308, %eax
 1091      29
 1092 012c 4431C0   		xorl	%r8d, %eax
 1093 012f 448D0432 		leal	(%rdx,%rsi), %r8d
 1094 0133 4431C0   		xorl	%r8d, %eax
 1095 0136 29C1     		subl	%eax, %ecx
 1096 0138 81C64786 		addl	$1640531527, %esi
 1096      C861
 1097 013e 75B0     		jne	.L186
 1098 0140 890F     		movl	%ecx, (%rdi)
 1099 0142 895704   		movl	%edx, 4(%rdi)
 1100 0145 C3       		ret
 1101              		.cfi_endproc
 1102              	.LFE77:
 1104 0146 662E0F1F 		.p2align 4,,15
 1104      84000000 
 1104      0000
 1105              		.globl	encrypt64
 1107              	encrypt64:
 1108              	.LFB78:
 1109              		.cfi_startproc
 1110 0150 8B0F     		movl	(%rdi), %ecx
 1111 0152 8B5704   		movl	4(%rdi), %edx
 1112 0155 31F6     		xorl	%esi, %esi
 1113 0157 660F1F84 		.p2align 4,,10
 1113      00000000 
 1113      00
 1114              		.p2align 3
 1115              	.L189:
 1116 0160 89D0     		movl	%edx, %eax
 1117 0162 4189D0   		movl	%edx, %r8d
 1118 0165 81EE4786 		subl	$1640531527, %esi
 1118      C861
 1119 016b C1E004   		sall	$4, %eax
 1120 016e 41C1E805 		shrl	$5, %r8d
 1121 0172 4181C08F 		addl	$1979237519, %r8d
 1121      C4F875
 1122 0179 058CC127 		addl	$690471308, %eax
 1122      29
 1123 017e 4431C0   		xorl	%r8d, %eax
 1124 0181 448D0432 		leal	(%rdx,%rsi), %r8d
 1125 0185 4431C0   		xorl	%r8d, %eax
 1126 0188 01C1     		addl	%eax, %ecx
 1127 018a 89C8     		movl	%ecx, %eax
 1128 018c 4189C8   		movl	%ecx, %r8d
 1129 018f C1E004   		sall	$4, %eax
 1130 0192 41C1E805 		shrl	$5, %r8d
 1131 0196 4181E8A9 		subl	$15764393, %r8d
 1131      8BF000
 1132 019d 05F799FD 		addl	$1140693495, %eax
 1132      43
 1133 01a2 4431C0   		xorl	%r8d, %eax
 1134 01a5 448D0431 		leal	(%rcx,%rsi), %r8d
 1135 01a9 4431C0   		xorl	%r8d, %eax
 1136 01ac 01C2     		addl	%eax, %edx
 1137 01ae 81FE2037 		cmpl	$-957401312, %esi
 1137      EFC6
 1138 01b4 75AA     		jne	.L189
 1139 01b6 890F     		movl	%ecx, (%rdi)
 1140 01b8 895704   		movl	%edx, 4(%rdi)
 1141 01bb C3       		ret
 1142              		.cfi_endproc
 1143              	.LFE78:
 1145 01bc 0F1F4000 		.p2align 4,,15
 1146              		.globl	myHash
 1148              	myHash:
 1149              	.LFB79:
 1150              		.cfi_startproc
 1151 01c0 0FB7D7   		movzwl	%di, %edx
 1152 01c3 83E701   		andl	$1, %edi
 1153 01c6 F7DF     		negl	%edi
 1154 01c8 6681E700 		andw	$2048, %di
 1154      08
 1155 01cd F6C202   		testb	$2, %dl
 1156 01d0 8D8F0010 		leal	4096(%rdi), %ecx
 1156      0000
 1157 01d6 0F44CF   		cmove	%edi, %ecx
 1158 01d9 F6C204   		testb	$4, %dl
 1159 01dc 8D810020 		leal	8192(%rcx), %eax
 1159      0000
 1160 01e2 0F44C1   		cmove	%ecx, %eax
 1161 01e5 F6C208   		testb	$8, %dl
 1162 01e8 8D880040 		leal	16384(%rax), %ecx
 1162      0000
 1163 01ee 0F44C8   		cmove	%eax, %ecx
 1164 01f1 F6C210   		testb	$16, %dl
 1165 01f4 8D810080 		leal	-32768(%rcx), %eax
 1165      FFFF
 1166 01fa 0F44C1   		cmove	%ecx, %eax
 1167 01fd F6C220   		testb	$32, %dl
 1168 0200 8D4801   		leal	1(%rax), %ecx
 1169 0203 0F44C8   		cmove	%eax, %ecx
 1170 0206 F6C240   		testb	$64, %dl
 1171 0209 8D4102   		leal	2(%rcx), %eax
 1172 020c 0F44C1   		cmove	%ecx, %eax
 1173 020f F6C280   		testb	$-128, %dl
 1174 0212 8D4804   		leal	4(%rax), %ecx
 1175 0215 0F44C8   		cmove	%eax, %ecx
 1176 0218 F6C601   		testb	$1, %dh
 1177 021b 8D4108   		leal	8(%rcx), %eax
 1178 021e 0F44C1   		cmove	%ecx, %eax
 1179 0221 F6C602   		testb	$2, %dh
 1180 0224 8D4810   		leal	16(%rax), %ecx
 1181 0227 0F44C8   		cmove	%eax, %ecx
 1182 022a F6C604   		testb	$4, %dh
 1183 022d 8D4120   		leal	32(%rcx), %eax
 1184 0230 0F44C1   		cmove	%ecx, %eax
 1185 0233 F6C608   		testb	$8, %dh
 1186 0236 8D4840   		leal	64(%rax), %ecx
 1187 0239 0F44C8   		cmove	%eax, %ecx
 1188 023c F6C610   		testb	$16, %dh
 1189 023f 8D818000 		leal	128(%rcx), %eax
 1189      0000
 1190 0245 0F44C1   		cmove	%ecx, %eax
 1191 0248 F6C620   		testb	$32, %dh
 1192 024b 8D880001 		leal	256(%rax), %ecx
 1192      0000
 1193 0251 0F44C8   		cmove	%eax, %ecx
 1194 0254 F6C640   		testb	$64, %dh
 1195 0257 8D810002 		leal	512(%rcx), %eax
 1195      0000
 1196 025d 0F44C1   		cmove	%ecx, %eax
 1197 0260 C1FA0F   		sarl	$15, %edx
 1198 0263 8D880004 		leal	1024(%rax), %ecx
 1198      0000
 1199 0269 85D2     		testl	%edx, %edx
 1200 026b 0F45C1   		cmovne	%ecx, %eax
 1201 026e C3       		ret
 1202              		.cfi_endproc
 1203              	.LFE79:
 1205              		.section	.rodata.str1.1
 1206              	.LC11:
 1207 0036 2C00     		.string	","
 1208              	.LC12:
 1209 0038 256400   		.string	"%d"
 1210              		.text
 1211 026f 90       		.p2align 4,,15
 1212              		.globl	format
 1214              	format:
 1215              	.LFB80:
 1216              		.cfi_startproc
 1217 0270 53       		pushq	%rbx
 1218              		.cfi_def_cfa_offset 16
 1219              		.cfi_offset 3, -16
 1220 0271 BE000000 		movl	$.LC11, %esi
 1220      00
 1221 0276 31DB     		xorl	%ebx, %ebx
 1222 0278 E8000000 		call	strtok
 1222      00
 1223 027d 4885C0   		testq	%rax, %rax
 1224 0280 743F     		je	.L191
 1225              		.p2align 4,,10
 1226 0282 660F1F44 		.p2align 3
 1226      0000
 1227              	.L197:
 1228 0288 48630D00 		movslq	numLines(%rip), %rcx
 1228      000000
 1229 028f 4863D3   		movslq	%ebx, %rdx
 1230 0292 4889C7   		movq	%rax, %rdi
 1231 0295 BE000000 		movl	$.LC12, %esi
 1231      00
 1232 029a 31C0     		xorl	%eax, %eax
 1233 029c 83C301   		addl	$1, %ebx
 1234 029f 488D148A 		leaq	(%rdx,%rcx,4), %rdx
 1235 02a3 488D1495 		leaq	dataFromCSV(,%rdx,4), %rdx
 1235      00000000 
 1236 02ab E8000000 		call	sscanf
 1236      00
 1237 02b0 31FF     		xorl	%edi, %edi
 1238 02b2 BE000000 		movl	$.LC11, %esi
 1238      00
 1239 02b7 E8000000 		call	strtok
 1239      00
 1240 02bc 4885C0   		testq	%rax, %rax
 1241 02bf 75C7     		jne	.L197
 1242              	.L191:
 1243 02c1 5B       		popq	%rbx
 1244              		.cfi_def_cfa_offset 8
 1245 02c2 C3       		ret
 1246              		.cfi_endproc
 1247              	.LFE80:
 1249 02c3 66666666 		.p2align 4,,15
 1249      2E0F1F84 
 1249      00000000 
 1249      00
 1250              		.globl	find
 1252              	find:
 1253              	.LFB81:
 1254              		.cfi_startproc
 1255 02d0 448B1500 		movl	numLines(%rip), %r10d
 1255      000000
 1256 02d7 4585D2   		testl	%r10d, %r10d
 1257 02da 7E54     		jle	.L206
 1258 02dc B8000000 		movl	$dataFromCSV+16, %eax
 1258      00
 1259 02e1 41B90100 		movl	$1, %r9d
 1259      0000
 1260 02e7 EB14     		jmp	.L204
 1261 02e9 0F1F8000 		.p2align 4,,10
 1261      000000
 1262              		.p2align 3
 1263              	.L202:
 1264 02f0 4183C101 		addl	$1, %r9d
 1265 02f4 4883C010 		addq	$16, %rax
 1266 02f8 4539D1   		cmpl	%r10d, %r9d
 1267 02fb 7F33     		jg	.L206
 1268              	.L204:
 1269 02fd 663B38   		cmpw	(%rax), %di
 1270 0300 75EE     		jne	.L202
 1271 0302 663B7004 		cmpw	4(%rax), %si
 1272 0306 75E8     		jne	.L202
 1273 0308 4963C1   		movslq	%r9d, %rax
 1274 030b 4889C6   		movq	%rax, %rsi
 1275 030e 48C1E604 		salq	$4, %rsi
 1276 0312 83BE0000 		cmpl	$1, dataFromCSV+8(%rsi)
 1276      000001
 1277 0319 7418     		je	.L207
 1278              	.L203:
 1279 031b 48C1E004 		salq	$4, %rax
 1280 031f 8B800000 		movl	dataFromCSV+12(%rax), %eax
 1280      0000
 1281 0325 8901     		movl	%eax, (%rcx)
 1282 0327 458908   		movl	%r9d, (%r8)
 1283 032a B8010000 		movl	$1, %eax
 1283      00
 1284 032f C3       		ret
 1285              		.p2align 4,,10
 1286              		.p2align 3
 1287              	.L206:
 1288 0330 31C0     		xorl	%eax, %eax
 1289 0332 C3       		ret
 1290              	.L207:
 1291 0333 C60201   		movb	$1, (%rdx)
 1292 0336 EBE3     		jmp	.L203
 1293              		.cfi_endproc
 1294              	.LFE81:
 1296 0338 0F1F8400 		.p2align 4,,15
 1296      00000000 
 1297              		.globl	suffBal
 1299              	suffBal:
 1300              	.LFB82:
 1301              		.cfi_startproc
 1302 0340 B8640000 		movl	$100, %eax
 1302      00
 1303 0345 0FB6D2   		movzbl	%dl, %edx
 1304 0348 0FB6C9   		movzbl	%cl, %ecx
 1305 034b 0FAFD0   		imull	%eax, %edx
 1306 034e 0316     		addl	(%rsi), %edx
 1307 0350 450FB6C0 		movzbl	%r8b, %r8d
 1308 0354 69C9F401 		imull	$500, %ecx, %ecx
 1308      0000
 1309 035a 450FB6C9 		movzbl	%r9b, %r9d
 1310 035e 4569C0E8 		imull	$1000, %r8d, %r8d
 1310      030000
 1311 0365 01CA     		addl	%ecx, %edx
 1312 0367 4569C9D0 		imull	$2000, %r9d, %r9d
 1312      070000
 1313 036e 4401C2   		addl	%r8d, %edx
 1314 0371 4401CA   		addl	%r9d, %edx
 1315 0374 39FA     		cmpl	%edi, %edx
 1316 0376 8916     		movl	%edx, (%rsi)
 1317 0378 0F9EC0   		setle	%al
 1318 037b C3       		ret
 1319              		.cfi_endproc
 1320              	.LFE82:
 1322              		.section	.rodata.str1.8
 1323 007e 0000     		.align 8
 1324              	.LC13:
 1325 0080 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 1325      20202020 
 1325      20202020 
 1325      76656E64 
 1325      6F722049 
 1326              		.section	.rodata.str1.1
 1327              	.LC14:
 1328 003b 3C564944 		.string	"<VID:PID>"
 1328      3A504944 
 1328      3E00
 1329              	.LC15:
 1330 0045 69767000 		.string	"ivp"
 1331              	.LC16:
 1332 0049 6900     		.string	"i"
 1333              		.section	.rodata.str1.8
 1334 00b5 000000   		.align 8
 1335              	.LC17:
 1336 00b8 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 1336      20202056 
 1336      49442C20 
 1336      50494420 
 1336      616E6420 
 1337              		.section	.rodata.str1.1
 1338              	.LC18:
 1339 004b 3C564944 		.string	"<VID:PID[:DID]>"
 1339      3A504944 
 1339      5B3A4449 
 1339      445D3E00 
 1340              	.LC19:
 1341 005b 767000   		.string	"vp"
 1342              	.LC20:
 1343 005e 7600     		.string	"v"
 1344              		.section	.rodata.str1.8
 1345 00ed 000000   		.align 8
 1346              	.LC21:
 1347 00f0 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 1347      20202020 
 1347      6669726D 
 1347      77617265 
 1347      20746F20 
 1348              		.section	.rodata.str1.1
 1349              	.LC22:
 1350 0060 3C666972 		.string	"<firmware.hex>"
 1350      6D776172 
 1350      652E6865 
 1350      783E00
 1351              	.LC23:
 1352 006f 667700   		.string	"fw"
 1353              	.LC24:
 1354 0072 6600     		.string	"f"
 1355              		.section	.rodata.str1.8
 1356 011d 000000   		.align 8
 1357              	.LC25:
 1358 0120 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 1358      642F7772 
 1358      69746520 
 1358      64696769 
 1358      74616C20 
 1359              		.section	.rodata.str1.1
 1360              	.LC26:
 1361 0074 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 1361      4366675B 
 1361      2C626974 
 1361      4366675D 
 1361      2A3E00
 1362              	.LC27:
 1363 0087 706F7274 		.string	"ports"
 1363      7300
 1364              	.LC28:
 1365 008d 6400     		.string	"d"
 1366              	.LC29:
 1367 008f 20202020 		.string	"         query the JTAG chain"
 1367      20202020 
 1367      20717565 
 1367      72792074 
 1367      6865204A 
 1368              	.LC30:
 1369 00ad 3C6A7461 		.string	"<jtagBits>"
 1369      67426974 
 1369      733E00
 1370              	.LC31:
 1371 00b8 71756572 		.string	"query"
 1371      7900
 1372              	.LC32:
 1373 00be 7100     		.string	"q"
 1374              	.LC33:
 1375 00c0 20202020 		.string	"         program a device"
 1375      20202020 
 1375      2070726F 
 1375      6772616D 
 1375      20612064 
 1376              	.LC34:
 1377 00da 3C636F6E 		.string	"<config>"
 1377      6669673E 
 1377      00
 1378              	.LC35:
 1379 00e3 70726F67 		.string	"program"
 1379      72616D00 
 1380              	.LC36:
 1381 00eb 7000     		.string	"p"
 1382              		.section	.rodata.str1.8
 1383 014d 000000   		.align 8
 1384              	.LC37:
 1385 0150 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 1385      20202020 
 1385      77686963 
 1385      6820636F 
 1385      6D6D2063 
 1386              		.section	.rodata.str1.1
 1387              	.LC38:
 1388 00ed 3C636F6E 		.string	"<conduit>"
 1388      64756974 
 1388      3E00
 1389              	.LC39:
 1390 00f7 636F6E64 		.string	"conduit"
 1390      75697400 
 1391              	.LC40:
 1392 00ff 6300     		.string	"c"
 1393              		.section	.rodata.str1.8
 1394 0184 00000000 		.align 8
 1395              	.LC41:
 1396 0188 20202020 		.string	"    a series of CommFPGA actions"
 1396      61207365 
 1396      72696573 
 1396      206F6620 
 1396      436F6D6D 
 1397              		.section	.rodata.str1.1
 1398              	.LC42:
 1399 0101 3C616374 		.string	"<actionString>"
 1399      696F6E53 
 1399      7472696E 
 1399      673E00
 1400              	.LC43:
 1401 0110 61637469 		.string	"action"
 1401      6F6E00
 1402              	.LC44:
 1403 0117 6100     		.string	"a"
 1404              		.section	.rodata.str1.8
 1405 01a9 00000000 		.align 8
 1405      000000
 1406              	.LC45:
 1407 01b0 20202020 		.string	"                    start up an interactive CommFPGA session"
 1407      20202020 
 1407      20202020 
 1407      20202020 
 1407      20202020 
 1408              		.section	.rodata.str1.1
 1409              	.LC46:
 1410 0119 7368656C 		.string	"shell"
 1410      6C00
 1411              	.LC47:
 1412 011f 7300     		.string	"s"
 1413              		.section	.rodata.str1.8
 1414 01ed 000000   		.align 8
 1415              	.LC48:
 1416 01f0 20202020 		.string	"                enable benchmarking & checksumming"
 1416      20202020 
 1416      20202020 
 1416      20202020 
 1416      656E6162 
 1417              		.section	.rodata.str1.1
 1418              	.LC49:
 1419 0121 62656E63 		.string	"benchmark"
 1419      686D6172 
 1419      6B00
 1420              	.LC50:
 1421 012b 6200     		.string	"b"
 1422              		.section	.rodata.str1.8
 1423 0223 00000000 		.align 8
 1423      00
 1424              	.LC51:
 1425 0228 20202020 		.string	"                    reset the bulk endpoints"
 1425      20202020 
 1425      20202020 
 1425      20202020 
 1425      20202020 
 1426              		.section	.rodata.str1.1
 1427              	.LC52:
 1428 012d 72657365 		.string	"reset"
 1428      7400
 1429              	.LC53:
 1430 0133 7200     		.string	"r"
 1431              		.section	.rodata.str1.8
 1432 0255 000000   		.align 8
 1433              	.LC54:
 1434 0258 20202077 		.string	"   write data from channel ch to file"
 1434      72697465 
 1434      20646174 
 1434      61206672 
 1434      6F6D2063 
 1435              		.section	.rodata.str1.1
 1436              	.LC55:
 1437 0135 3C63683A 		.string	"<ch:file.bin>"
 1437      66696C65 
 1437      2E62696E 
 1437      3E00
 1438              	.LC56:
 1439 0143 64756D70 		.string	"dumploop"
 1439      6C6F6F70 
 1439      00
 1440              	.LC57:
 1441 014c 6C00     		.string	"l"
 1442              		.section	.rodata.str1.8
 1443 027e 0000     		.align 8
 1444              	.LC58:
 1445 0280 20202020 		.string	"                     print this help and exit"
 1445      20202020 
 1445      20202020 
 1445      20202020 
 1445      20202020 
 1446              		.section	.rodata.str1.1
 1447              	.LC59:
 1448 014e 68656C70 		.string	"help"
 1448      00
 1449              	.LC60:
 1450 0153 6800     		.string	"h"
 1451              		.section	.rodata.str1.8
 1452 02ae 0000     		.align 8
 1453              	.LC61:
 1454 02b0 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 1454      72697465 
 1454      20666972 
 1454      6D776172 
 1454      6520746F 
 1455              		.section	.rodata.str1.1
 1456              	.LC62:
 1457 0155 3C737464 		.string	"<std|fw.hex|fw.iic>"
 1457      7C66772E 
 1457      6865787C 
 1457      66772E69 
 1457      69633E00 
 1458              	.LC63:
 1459 0169 65657072 		.string	"eeprom"
 1459      6F6D00
 1460              		.section	.rodata.str1.8
 1461 02d7 00       		.align 8
 1462              	.LC64:
 1463 02d8 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 1463      20626163 
 1463      6B757020 
 1463      46583227 
 1463      73204545 
 1464              		.section	.rodata.str1.1
 1465              	.LC65:
 1466 0170 3C6B6269 		.string	"<kbitSize:fw.iic>"
 1466      7453697A 
 1466      653A6677 
 1466      2E696963 
 1466      3E00
 1467              	.LC66:
 1468 0182 6261636B 		.string	"backup"
 1468      757000
 1469              		.section	.rodata.str1.8
 1470 0303 00000000 		.align 8
 1470      00
 1471              	.LC67:
 1472 0308 20202020 		.string	"                    communicates with the atm module"
 1472      20202020 
 1472      20202020 
 1472      20202020 
 1472      20202020 
 1473              		.section	.rodata.str1.1
 1474              	.LC68:
 1475 0189 6C6F6F70 		.string	"loopy"
 1475      7900
 1476              	.LC69:
 1477 018f 7900     		.string	"y"
 1478              	.LC70:
 1479 0191 666C636C 		.string	"flcli"
 1479      6900
 1480              	.LC71:
 1481 0197 25733A20 		.string	"%s: insufficient memory\n"
 1481      696E7375 
 1481      66666963 
 1481      69656E74 
 1481      206D656D 
 1482              		.section	.rodata.str1.8
 1483 033d 000000   		.align 8
 1484              	.LC72:
 1485 0340 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 1485      4C696E6B 
 1485      20436F6D 
 1485      6D616E64 
 1485      2D4C696E 
 1486              		.section	.rodata.str1.1
 1487              	.LC73:
 1488 01b0 0A00     		.string	"\n"
 1489              		.section	.rodata.str1.8
 1490 0394 00000000 		.align 8
 1491              	.LC74:
 1492 0398 0A496E74 		.string	"\nInteract with an FPGALink device.\n\n"
 1492      65726163 
 1492      74207769 
 1492      74682061 
 1492      6E204650 
 1493              		.section	.rodata.str1.1
 1494              	.LC75:
 1495 01b2 2020252D 		.string	"  %-10s %s\n"
 1495      31307320 
 1495      25730A00 
 1496              		.section	.rodata.str1.8
 1497 03bd 000000   		.align 8
 1498              	.LC76:
 1499 03c0 54727920 		.string	"Try '%s --help' for more information.\n"
 1499      27257320 
 1499      2D2D6865 
 1499      6C702720 
 1499      666F7220 
 1500 03e7 00       		.align 8
 1501              	.LC77:
 1502 03e8 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 1502      6D707469 
 1502      6E672074 
 1502      6F206F70 
 1502      656E2063 
 1503              		.section	.rodata.str1.1
 1504              	.LC78:
 1505 01be 4C6F6164 		.string	"Loading firmware into %s...\n"
 1505      696E6720 
 1505      6669726D 
 1505      77617265 
 1505      20696E74 
 1506              	.LC79:
 1507 01db 41776169 		.string	"Awaiting renumeration"
 1507      74696E67 
 1507      2072656E 
 1507      756D6572 
 1507      6174696F 
 1508              	.LC80:
 1509 01f1 2E00     		.string	"."
 1510              		.section	.rodata.str1.8
 1511              		.align 8
 1512              	.LC81:
 1513 0420 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 1513      4C696E6B 
 1513      20646576 
 1513      69636520 
 1513      64696420 
 1514 0453 00000000 		.align 8
 1514      00
 1515              	.LC82:
 1516 0458 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 1516      6D707469 
 1516      6E672074 
 1516      6F206F70 
 1516      656E2063 
 1517 0495 000000   		.align 8
 1518              	.LC83:
 1519 0498 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 1519      64206E6F 
 1519      74206F70 
 1519      656E2046 
 1519      5047414C 
 1520 04e2 00000000 		.align 8
 1520      0000
 1521              	.LC84:
 1522 04e8 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 1522      65637465 
 1522      6420746F 
 1522      20465047 
 1522      414C696E 
 1523 0537 00       		.align 8
 1524              	.LC85:
 1525 0538 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM...\n"
 1525      696E6720 
 1525      74686520 
 1525      7374616E 
 1525      64617264 
 1526 0577 00       		.align 8
 1527              	.LC86:
 1528 0578 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 1528      696E6720 
 1528      63757374 
 1528      6F6D2046 
 1528      5047414C 
 1529 05b9 00000000 		.align 8
 1529      000000
 1530              	.LC87:
 1531 05c0 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 1531      696E7661 
 1531      6C696420 
 1531      61726775 
 1531      6D656E74 
 1532 05fb 00000000 		.align 8
 1532      00
 1533              	.LC88:
 1534 0600 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 1534      6E672061 
 1534      20626163 
 1534      6B757020 
 1534      6F662025 
 1535              		.section	.rodata.str1.1
 1536              	.LC89:
 1537 01f3 436F6E66 		.string	"Configuring ports...\n"
 1537      69677572 
 1537      696E6720 
 1537      706F7274 
 1537      732E2E2E 
 1538              	.LC90:
 1539 0209 25303858 		.string	"%08X"
 1539      00
 1540              		.section	.rodata.str1.8
 1541 063b 00000000 		.align 8
 1541      00
 1542              	.LC91:
 1543 0640 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 1543      6261636B 
 1543      3A202020 
 1543      32382020 
 1543      20323420 
 1544              		.section	.rodata.str1.1
 1545              	.LC92:
 1546 020e 20257300 		.string	" %s"
 1547              	.LC93:
 1548 0212 20202573 		.string	"  %s"
 1548      00
 1549              	.LC94:
 1550 0217 2025730A 		.string	" %s\n"
 1550      00
 1551              		.section	.rodata.str1.8
 1552              		.align 8
 1553              	.LC95:
 1554 0680 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 1554      46504741 
 1554      4C696E6B 
 1554      20646576 
 1554      69636520 
 1555              		.section	.rodata.str1.1
 1556              	.LC96:
 1557 021c 20203078 		.string	"  0x%08X\n"
 1557      25303858 
 1557      0A00
 1558              		.section	.rodata.str1.8
 1559 06bd 000000   		.align 8
 1560              	.LC97:
 1561 06c0 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 1561      46504741 
 1561      4C696E6B 
 1561      20646576 
 1561      69636520 
 1562              		.align 8
 1563              	.LC98:
 1564 0718 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 1564      20636861 
 1564      696E2073 
 1564      63616E20 
 1564      72657175 
 1565              		.section	.rodata.str1.1
 1566              	.LC99:
 1567 0226 50726F67 		.string	"Programming device...\n"
 1567      72616D6D 
 1567      696E6720 
 1567      64657669 
 1567      63652E2E 
 1568              		.section	.rodata.str1.8
 1569 0767 00       		.align 8
 1570              	.LC100:
 1571 0768 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 1571      72616D20 
 1571      6F706572 
 1571      6174696F 
 1571      6E207265 
 1572              		.align 8
 1573              	.LC101:
 1574 07b0 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 1574      7574696E 
 1574      6720436F 
 1574      6D6D4650 
 1574      47412061 
 1575 07e5 000000   		.align 8
 1576              	.LC102:
 1577 07e8 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 1577      46504741 
 1577      4C696E6B 
 1577      20646576 
 1577      69636520 
 1578 0834 00000000 		.align 8
 1579              	.LC103:
 1580 0838 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 1580      6F6E2072 
 1580      65717565 
 1580      73746564 
 1580      20627574 
 1581 0875 000000   		.align 8
 1582              	.LC104:
 1583 0878 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 1583      696E7661 
 1583      6C696420 
 1583      61726775 
 1583      6D656E74 
 1584 08b4 00000000 		.align 8
 1585              	.LC105:
 1586 08b8 436F7079 		.string	"Copying from channel %lu to %s"
 1586      696E6720 
 1586      66726F6D 
 1586      20636861 
 1586      6E6E656C 
 1587              		.section	.rodata.str1.1
 1588              	.LC106:
 1589 023d 0A436175 		.string	"\nCaught SIGINT, quitting...\n"
 1589      67687420 
 1589      53494749 
 1589      4E542C20 
 1589      71756974 
 1590              		.section	.rodata.str1.8
 1591 08d7 00       		.align 8
 1592              	.LC107:
 1593 08d8 0A456E74 		.string	"\nEntering CommFPGA command-line mode:\n"
 1593      6572696E 
 1593      6720436F 
 1593      6D6D4650 
 1593      47412063 
 1594              		.section	.rodata.str1.1
 1595              	.LC108:
 1596 025a 3E2000   		.string	"> "
 1597              		.section	.rodata.str1.8
 1598 08ff 00       		.align 8
 1599              	.LC109:
 1600 0900 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 1600      46504741 
 1600      4C696E6B 
 1600      20646576 
 1600      69636520 
 1601 0949 00000000 		.align 8
 1601      000000
 1602              	.LC110:
 1603 0950 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 1603      6C207265 
 1603      71756573 
 1603      74656420 
 1603      62757420 
 1604              		.section	.rodata.str1.1
 1605              	.LC112:
 1606 025d 722B00   		.string	"r+"
 1607              	.LC113:
 1608 0260 43737620 		.string	"Csv doesn't exist \n"
 1608      646F6573 
 1608      6E277420 
 1608      65786973 
 1608      74200A00 
 1609              	.LC114:
 1610 0274 64617461 		.string	"data in channel 0 = %u \n"
 1610      20696E20 
 1610      6368616E 
 1610      6E656C20 
 1610      30203D20 
 1611              	.LC115:
 1612 028d 64617461 		.string	"data in channel %u = %u \n"
 1612      20696E20 
 1612      6368616E 
 1612      6E656C20 
 1612      2575203D 
 1613              	.LC117:
 1614 02a7 756E6861 		.string	"unhashedPin %u\n"
 1614      73686564 
 1614      50696E20 
 1614      25750A00 
 1615              	.LC118:
 1616 02b7 75736572 		.string	"userID %u\n"
 1616      49442025 
 1616      750A00
 1617              	.LC119:
 1618 02c2 68617368 		.string	"hashedPin %u\n"
 1618      65645069 
 1618      6E202575 
 1618      0A00
 1619              	.LC120:
 1620 02d0 6E756D5F 		.string	"num_2000 %u\n"
 1620      32303030 
 1620      2025750A 
 1620      00
 1621              	.LC121:
 1622 02dd 6E756D5F 		.string	"num_1000 %u\n"
 1622      31303030 
 1622      2025750A 
 1622      00
 1623              	.LC122:
 1624 02ea 6E756D5F 		.string	"num_500 %u\n"
 1624      35303020 
 1624      25750A00 
 1625              	.LC123:
 1626 02f6 6E756D5F 		.string	"num_100 %u\n"
 1626      31303020 
 1626      25750A00 
 1627              	.LC124:
 1628 0302 56616C69 		.string	"Valid user found \n"
 1628      64207573 
 1628      65722066 
 1628      6F756E64 
 1628      200A00
 1629              	.LC125:
 1630 0315 62656620 		.string	"bef Enc1 %u\n"
 1630      456E6331 
 1630      2025750A 
 1630      00
 1631              	.LC126:
 1632 0322 62656620 		.string	"bef Enc0 %u\n"
 1632      456E6330 
 1632      2025750A 
 1632      00
 1633              	.LC127:
 1634 032f 61662045 		.string	"af Enc1 %u\n"
 1634      6E633120 
 1634      25750A00 
 1635              	.LC128:
 1636 033b 61662045 		.string	"af Enc0 %u\n"
 1636      6E633020 
 1636      25750A00 
 1637              	.LC129:
 1638 0347 64617461 		.string	"data to channel %u = %u \n"
 1638      20746F20 
 1638      6368616E 
 1638      6E656C20 
 1638      2575203D 
 1639              	.LC130:
 1640 0361 772B00   		.string	"w+"
 1641              		.section	.rodata.str1.8
 1642 098c 00000000 		.align 8
 1643              	.LC131:
 1644 0990 22557365 		.string	"\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (decimal)\""
 1644      72204944 
 1644      20286465 
 1644      63696D61 
 1644      6C29222C 
 1645              		.section	.rodata.str1.1
 1646              	.LC132:
 1647 0364 257300   		.string	"%s"
 1648              	.LC133:
 1649 0367 55736572 		.string	"User has admin privileges \n"
 1649      20686173 
 1649      2061646D 
 1649      696E2070 
 1649      72697669 
 1650              	.LC134:
 1651 0383 25730A00 		.string	"%s\n"
 1652              	.LC135:
 1653 0387 496E7661 		.string	"Invalid user \n"
 1653      6C696420 
 1653      75736572 
 1653      200A00
 1654              	.LC136:
 1655 0396 62616C20 		.string	"bal %u\n"
 1655      25750A00 
 1656              	.LC137:
 1657 039e 72657120 		.string	"req %u\n"
 1657      25750A00 
 1658              	.LC138:
 1659 03a6 53756666 		.string	"Suff Balance \n"
 1659      2042616C 
 1659      616E6365 
 1659      200A00
 1660              	.LC139:
 1661 03b5 496E7375 		.string	"Insuff Balance \n"
 1661      66662042 
 1661      616C616E 
 1661      6365200A 
 1661      00
 1662              		.section	.rodata.str1.8
 1663 09d5 000000   		.align 8
 1664              	.LC111:
 1665 09d8 2F686F6D 		.string	"/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/backend/apps/flcli/SampleBackEn
 1665      652F7061 
 1665      6E64752F 
 1665      4465736B 
 1665      746F702F 
 1666              		.section	.text.startup,"ax",@progbits
 1667              		.p2align 4,,15
 1668              		.globl	main
 1670              	main:
 1671              	.LFB90:
 1672              		.cfi_startproc
 1673 0000 4157     		pushq	%r15
 1674              		.cfi_def_cfa_offset 16
 1675              		.cfi_offset 15, -16
 1676 0002 B9000000 		movl	$.LC13, %ecx
 1676      00
 1677 0007 BA000000 		movl	$.LC14, %edx
 1677      00
 1678 000c 4156     		pushq	%r14
 1679              		.cfi_def_cfa_offset 24
 1680              		.cfi_offset 14, -24
 1681 000e 4155     		pushq	%r13
 1682              		.cfi_def_cfa_offset 32
 1683              		.cfi_offset 13, -32
 1684 0010 4154     		pushq	%r12
 1685              		.cfi_def_cfa_offset 40
 1686              		.cfi_offset 12, -40
 1687 0012 55       		pushq	%rbp
 1688              		.cfi_def_cfa_offset 48
 1689              		.cfi_offset 6, -48
 1690 0013 53       		pushq	%rbx
 1691              		.cfi_def_cfa_offset 56
 1692              		.cfi_offset 3, -56
 1693 0014 4881EC38 		subq	$568, %rsp
 1693      020000
 1694              		.cfi_def_cfa_offset 624
 1695 001b 897C2454 		movl	%edi, 84(%rsp)
 1696 001f 48897424 		movq	%rsi, 88(%rsp)
 1696      58
 1697 0024 BF000000 		movl	$.LC16, %edi
 1697      00
 1698 0029 BE000000 		movl	$.LC15, %esi
 1698      00
 1699 002e 64488B04 		movq	%fs:40, %rax
 1699      25280000 
 1699      00
 1700 0037 48898424 		movq	%rax, 552(%rsp)
 1700      28020000 
 1701 003f 31C0     		xorl	%eax, %eax
 1702 0041 E8000000 		call	arg_str0
 1702      00
 1703 0046 B9000000 		movl	$.LC17, %ecx
 1703      00
 1704 004b BA000000 		movl	$.LC18, %edx
 1704      00
 1705 0050 BE000000 		movl	$.LC19, %esi
 1705      00
 1706 0055 BF000000 		movl	$.LC20, %edi
 1706      00
 1707 005a 4989C4   		movq	%rax, %r12
 1708 005d E8000000 		call	arg_str1
 1708      00
 1709 0062 B9000000 		movl	$.LC21, %ecx
 1709      00
 1710 0067 BA000000 		movl	$.LC22, %edx
 1710      00
 1711 006c BE000000 		movl	$.LC23, %esi
 1711      00
 1712 0071 BF000000 		movl	$.LC24, %edi
 1712      00
 1713 0076 4989C5   		movq	%rax, %r13
 1714 0079 E8000000 		call	arg_str0
 1714      00
 1715 007e B9000000 		movl	$.LC25, %ecx
 1715      00
 1716 0083 BA000000 		movl	$.LC26, %edx
 1716      00
 1717 0088 BE000000 		movl	$.LC27, %esi
 1717      00
 1718 008d BF000000 		movl	$.LC28, %edi
 1718      00
 1719 0092 4989C7   		movq	%rax, %r15
 1720 0095 48894424 		movq	%rax, 96(%rsp)
 1720      60
 1721 009a E8000000 		call	arg_str0
 1721      00
 1722 009f B9000000 		movl	$.LC29, %ecx
 1722      00
 1723 00a4 BA000000 		movl	$.LC30, %edx
 1723      00
 1724 00a9 BE000000 		movl	$.LC31, %esi
 1724      00
 1725 00ae BF000000 		movl	$.LC32, %edi
 1725      00
 1726 00b3 48894424 		movq	%rax, 8(%rsp)
 1726      08
 1727 00b8 E8000000 		call	arg_str0
 1727      00
 1728 00bd B9000000 		movl	$.LC33, %ecx
 1728      00
 1729 00c2 BA000000 		movl	$.LC34, %edx
 1729      00
 1730 00c7 BE000000 		movl	$.LC35, %esi
 1730      00
 1731 00cc BF000000 		movl	$.LC36, %edi
 1731      00
 1732 00d1 48894424 		movq	%rax, 16(%rsp)
 1732      10
 1733 00d6 E8000000 		call	arg_str0
 1733      00
 1734 00db B9000000 		movl	$.LC37, %ecx
 1734      00
 1735 00e0 BA000000 		movl	$.LC38, %edx
 1735      00
 1736 00e5 BE000000 		movl	$.LC39, %esi
 1736      00
 1737 00ea BF000000 		movl	$.LC40, %edi
 1737      00
 1738 00ef 48894424 		movq	%rax, 40(%rsp)
 1738      28
 1739 00f4 E8000000 		call	arg_uint0
 1739      00
 1740 00f9 B9000000 		movl	$.LC41, %ecx
 1740      00
 1741 00fe BA000000 		movl	$.LC42, %edx
 1741      00
 1742 0103 BE000000 		movl	$.LC43, %esi
 1742      00
 1743 0108 BF000000 		movl	$.LC44, %edi
 1743      00
 1744 010d 48894424 		movq	%rax, 24(%rsp)
 1744      18
 1745 0112 E8000000 		call	arg_str0
 1745      00
 1746 0117 BA000000 		movl	$.LC45, %edx
 1746      00
 1747 011c BE000000 		movl	$.LC46, %esi
 1747      00
 1748 0121 BF000000 		movl	$.LC47, %edi
 1748      00
 1749 0126 48894424 		movq	%rax, 48(%rsp)
 1749      30
 1750 012b E8000000 		call	arg_lit0
 1750      00
 1751 0130 BA000000 		movl	$.LC48, %edx
 1751      00
 1752 0135 BE000000 		movl	$.LC49, %esi
 1752      00
 1753 013a BF000000 		movl	$.LC50, %edi
 1753      00
 1754 013f 48894424 		movq	%rax, 64(%rsp)
 1754      40
 1755 0144 E8000000 		call	arg_lit0
 1755      00
 1756 0149 BA000000 		movl	$.LC51, %edx
 1756      00
 1757 014e BE000000 		movl	$.LC52, %esi
 1757      00
 1758 0153 BF000000 		movl	$.LC53, %edi
 1758      00
 1759 0158 48894424 		movq	%rax, 72(%rsp)
 1759      48
 1760 015d E8000000 		call	arg_lit0
 1760      00
 1761 0162 B9000000 		movl	$.LC54, %ecx
 1761      00
 1762 0167 BA000000 		movl	$.LC55, %edx
 1762      00
 1763 016c BE000000 		movl	$.LC56, %esi
 1763      00
 1764 0171 BF000000 		movl	$.LC57, %edi
 1764      00
 1765 0176 48894424 		movq	%rax, 32(%rsp)
 1765      20
 1766 017b E8000000 		call	arg_str0
 1766      00
 1767 0180 BA000000 		movl	$.LC58, %edx
 1767      00
 1768 0185 BE000000 		movl	$.LC59, %esi
 1768      00
 1769 018a BF000000 		movl	$.LC60, %edi
 1769      00
 1770 018f 48894424 		movq	%rax, 56(%rsp)
 1770      38
 1771 0194 E8000000 		call	arg_lit0
 1771      00
 1772 0199 31FF     		xorl	%edi, %edi
 1773 019b B9000000 		movl	$.LC61, %ecx
 1773      00
 1774 01a0 BA000000 		movl	$.LC62, %edx
 1774      00
 1775 01a5 BE000000 		movl	$.LC63, %esi
 1775      00
 1776 01aa 4889C3   		movq	%rax, %rbx
 1777 01ad E8000000 		call	arg_str0
 1777      00
 1778 01b2 B9000000 		movl	$.LC64, %ecx
 1778      00
 1779 01b7 BA000000 		movl	$.LC65, %edx
 1779      00
 1780 01bc BE000000 		movl	$.LC66, %esi
 1780      00
 1781 01c1 31FF     		xorl	%edi, %edi
 1782 01c3 4989C6   		movq	%rax, %r14
 1783 01c6 E8000000 		call	arg_str0
 1783      00
 1784 01cb BF140000 		movl	$20, %edi
 1784      00
 1785 01d0 48890424 		movq	%rax, (%rsp)
 1786 01d4 E8000000 		call	arg_end
 1786      00
 1787 01d9 BA000000 		movl	$.LC67, %edx
 1787      00
 1788 01de BE000000 		movl	$.LC68, %esi
 1788      00
 1789 01e3 BF000000 		movl	$.LC69, %edi
 1789      00
 1790 01e8 4889C5   		movq	%rax, %rbp
 1791 01eb E8000000 		call	arg_lit0
 1791      00
 1792 01f0 488B4C24 		movq	8(%rsp), %rcx
 1792      08
 1793 01f5 488B5424 		movq	16(%rsp), %rdx
 1793      10
 1794 01fa 488DBC24 		leaq	304(%rsp), %rdi
 1794      30010000 
 1795 0202 488B7424 		movq	24(%rsp), %rsi
 1795      18
 1796 0207 48894424 		movq	%rax, 104(%rsp)
 1796      68
 1797 020c 48898424 		movq	%rax, 400(%rsp)
 1797      90010000 
 1798 0214 488B0424 		movq	(%rsp), %rax
 1799 0218 48898C24 		movq	%rcx, 328(%rsp)
 1799      48010000 
 1800 0220 488B4C24 		movq	40(%rsp), %rcx
 1800      28
 1801 0225 48899424 		movq	%rdx, 336(%rsp)
 1801      50010000 
 1802 022d 488B5424 		movq	48(%rsp), %rdx
 1802      30
 1803 0232 4889B424 		movq	%rsi, 352(%rsp)
 1803      60010000 
 1804 023a 488B7424 		movq	72(%rsp), %rsi
 1804      48
 1805 023f 48898C24 		movq	%rcx, 344(%rsp)
 1805      58010000 
 1806 0247 488B4C24 		movq	64(%rsp), %rcx
 1806      40
 1807 024c 48899424 		movq	%rdx, 360(%rsp)
 1807      68010000 
 1808 0254 488B5424 		movq	32(%rsp), %rdx
 1808      20
 1809 0259 4C89BC24 		movq	%r15, 320(%rsp)
 1809      40010000 
 1810 0261 4C89A424 		movq	%r12, 304(%rsp)
 1810      30010000 
 1811 0269 48898C24 		movq	%rcx, 368(%rsp)
 1811      70010000 
 1812 0271 488B4C24 		movq	56(%rsp), %rcx
 1812      38
 1813 0276 4C89AC24 		movq	%r13, 312(%rsp)
 1813      38010000 
 1814 027e 4889B424 		movq	%rsi, 376(%rsp)
 1814      78010000 
 1815 0286 48899424 		movq	%rdx, 384(%rsp)
 1815      80010000 
 1816 028e 48899C24 		movq	%rbx, 408(%rsp)
 1816      98010000 
 1817 0296 48898C24 		movq	%rcx, 392(%rsp)
 1817      88010000 
 1818 029e 4C89B424 		movq	%r14, 416(%rsp)
 1818      A0010000 
 1819 02a6 48898424 		movq	%rax, 424(%rsp)
 1819      A8010000 
 1820 02ae 4889AC24 		movq	%rbp, 432(%rsp)
 1820      B0010000 
 1821 02b6 48C78424 		movq	$0, 144(%rsp)
 1821      90000000 
 1821      00000000 
 1822 02c2 48C78424 		movq	$0, 216(%rsp)
 1822      D8000000 
 1822      00000000 
 1823 02ce E8000000 		call	arg_nullcheck
 1823      00
 1824 02d3 85C0     		testl	%eax, %eax
 1825 02d5 4189C7   		movl	%eax, %r15d
 1826 02d8 0F849C00 		je	.L210
 1826      0000
 1827 02de 488B3D00 		movq	stderr(%rip), %rdi
 1827      000000
 1828 02e5 B9000000 		movl	$.LC70, %ecx
 1828      00
 1829 02ea BA000000 		movl	$.LC71, %edx
 1829      00
 1830 02ef BE010000 		movl	$1, %esi
 1830      00
 1831 02f4 31C0     		xorl	%eax, %eax
 1832 02f6 4531F6   		xorl	%r14d, %r14d
 1833 02f9 41BC0100 		movl	$1, %r12d
 1833      0000
 1834 02ff E8000000 		call	__fprintf_chk
 1834      00
 1835              	.L211:
 1836 0304 4C89F7   		movq	%r14, %rdi
 1837 0307 E8000000 		call	free
 1837      00
 1838 030c 488BBC24 		movq	144(%rsp), %rdi
 1838      90000000 
 1839 0314 E8000000 		call	flClose
 1839      00
 1840 0319 488B8C24 		movq	216(%rsp), %rcx
 1840      D8000000 
 1841 0321 4885C9   		testq	%rcx, %rcx
 1842 0324 7425     		je	.L362
 1843 0326 488B3D00 		movq	stderr(%rip), %rdi
 1843      000000
 1844 032d BA000000 		movl	$.LC134, %edx
 1844      00
 1845 0332 BE010000 		movl	$1, %esi
 1845      00
 1846 0337 31C0     		xorl	%eax, %eax
 1847 0339 E8000000 		call	__fprintf_chk
 1847      00
 1848 033e 488BBC24 		movq	216(%rsp), %rdi
 1848      D8000000 
 1849 0346 E8000000 		call	flFreeError
 1849      00
 1850              	.L362:
 1851 034b 4589E7   		movl	%r12d, %r15d
 1852              	.L276:
 1853 034e 488B9C24 		movq	552(%rsp), %rbx
 1853      28020000 
 1854 0356 6448331C 		xorq	%fs:40, %rbx
 1854      25280000 
 1854      00
 1855 035f 4489F8   		movl	%r15d, %eax
 1856 0362 0F85AF05 		jne	.L451
 1856      0000
 1857 0368 4881C438 		addq	$568, %rsp
 1857      020000
 1858              		.cfi_remember_state
 1859              		.cfi_def_cfa_offset 56
 1860 036f 5B       		popq	%rbx
 1861              		.cfi_def_cfa_offset 48
 1862 0370 5D       		popq	%rbp
 1863              		.cfi_def_cfa_offset 40
 1864 0371 415C     		popq	%r12
 1865              		.cfi_def_cfa_offset 32
 1866 0373 415D     		popq	%r13
 1867              		.cfi_def_cfa_offset 24
 1868 0375 415E     		popq	%r14
 1869              		.cfi_def_cfa_offset 16
 1870 0377 415F     		popq	%r15
 1871              		.cfi_def_cfa_offset 8
 1872 0379 C3       		ret
 1873              	.L210:
 1874              		.cfi_restore_state
 1875 037a 488B7424 		movq	88(%rsp), %rsi
 1875      58
 1876 037f 8B7C2454 		movl	84(%rsp), %edi
 1877 0383 488D9424 		leaq	304(%rsp), %rdx
 1877      30010000 
 1878 038b E8000000 		call	arg_parse
 1878      00
 1879 0390 837B6000 		cmpl	$0, 96(%rbx)
 1880 0394 7E64     		jle	.L212
 1881 0396 BA000000 		movl	$.LC70, %edx
 1881      00
 1882 039b BE000000 		movl	$.LC72, %esi
 1882      00
 1883 03a0 BF010000 		movl	$1, %edi
 1883      00
 1884 03a5 31C0     		xorl	%eax, %eax
 1885 03a7 4531F6   		xorl	%r14d, %r14d
 1886 03aa 4531E4   		xorl	%r12d, %r12d
 1887 03ad E8000000 		call	__printf_chk
 1887      00
 1888 03b2 488B3D00 		movq	stdout(%rip), %rdi
 1888      000000
 1889 03b9 488DB424 		leaq	304(%rsp), %rsi
 1889      30010000 
 1890 03c1 BA000000 		movl	$.LC73, %edx
 1890      00
 1891 03c6 E8000000 		call	arg_print_syntax
 1891      00
 1892 03cb BE000000 		movl	$.LC74, %esi
 1892      00
 1893 03d0 BF010000 		movl	$1, %edi
 1893      00
 1894 03d5 31C0     		xorl	%eax, %eax
 1895 03d7 E8000000 		call	__printf_chk
 1895      00
 1896 03dc 488B3D00 		movq	stdout(%rip), %rdi
 1896      000000
 1897 03e3 488DB424 		leaq	304(%rsp), %rsi
 1897      30010000 
 1898 03eb BA000000 		movl	$.LC75, %edx
 1898      00
 1899 03f0 E8000000 		call	arg_print_glossary
 1899      00
 1900 03f5 E90AFFFF 		jmp	.L211
 1900      FF
 1901              	.L212:
 1902 03fa 85C0     		testl	%eax, %eax
 1903 03fc 7E3F     		jle	.L213
 1904 03fe 488B3D00 		movq	stdout(%rip), %rdi
 1904      000000
 1905 0405 BA000000 		movl	$.LC70, %edx
 1905      00
 1906 040a 4889EE   		movq	%rbp, %rsi
 1907 040d E8000000 		call	arg_print_errors
 1907      00
 1908 0412 B9000000 		movl	$.LC70, %ecx
 1908      00
 1909 0417 BA000000 		movl	$.LC76, %edx
 1909      00
 1910              	.L447:
 1911 041c 488B3D00 		movq	stderr(%rip), %rdi
 1911      000000
 1912 0423 BE010000 		movl	$1, %esi
 1912      00
 1913 0428 31C0     		xorl	%eax, %eax
 1914 042a 4531F6   		xorl	%r14d, %r14d
 1915 042d 41BC0C00 		movl	$12, %r12d
 1915      0000
 1916 0433 E8000000 		call	__fprintf_chk
 1916      00
 1917 0438 E9C7FEFF 		jmp	.L211
 1917      FF
 1918              	.L213:
 1919 043d 488DB424 		leaq	216(%rsp), %rsi
 1919      D8000000 
 1920 0445 31FF     		xorl	%edi, %edi
 1921 0447 E8000000 		call	flInitialise
 1921      00
 1922 044c 85C0     		testl	%eax, %eax
 1923 044e 740E     		je	.L214
 1924              	.L263:
 1925 0450 4531F6   		xorl	%r14d, %r14d
 1926 0453 41BC0100 		movl	$1, %r12d
 1926      0000
 1927 0459 E9A6FEFF 		jmp	.L211
 1927      FF
 1928              	.L214:
 1929 045e 498B4568 		movq	104(%r13), %rax
 1930 0462 BE000000 		movl	$.LC77, %esi
 1930      00
 1931 0467 BF010000 		movl	$1, %edi
 1931      00
 1932 046c 488B28   		movq	(%rax), %rbp
 1933 046f 31C0     		xorl	%eax, %eax
 1934 0471 4889EA   		movq	%rbp, %rdx
 1935 0474 E8000000 		call	__printf_chk
 1935      00
 1936 0479 488DB424 		leaq	144(%rsp), %rsi
 1936      90000000 
 1937 0481 31D2     		xorl	%edx, %edx
 1938 0483 4889EF   		movq	%rbp, %rdi
 1939 0486 E8000000 		call	flOpen
 1939      00
 1940 048b 85C0     		testl	%eax, %eax
 1941 048d 0F841901 		je	.L215
 1941      0000
 1942 0493 41837C24 		cmpl	$0, 96(%r12)
 1942      6000
 1943 0499 0F84CC00 		je	.L216
 1943      0000
 1944 049f 498B4424 		movq	104(%r12), %rax
 1944      68
 1945 04a4 BE000000 		movl	$.LC78, %esi
 1945      00
 1946 04a9 BF010000 		movl	$1, %edi
 1946      00
 1947 04ae 488B18   		movq	(%rax), %rbx
 1948 04b1 31C0     		xorl	%eax, %eax
 1949 04b3 4889DA   		movq	%rbx, %rdx
 1950 04b6 E8000000 		call	__printf_chk
 1950      00
 1951 04bb 488B4424 		movq	96(%rsp), %rax
 1951      60
 1952 04c0 83786000 		cmpl	$0, 96(%rax)
 1953 04c4 0F844903 		je	.L217
 1953      0000
 1954 04ca 488B4068 		movq	104(%rax), %rax
 1955 04ce 488D9424 		leaq	216(%rsp), %rdx
 1955      D8000000 
 1956 04d6 4889DF   		movq	%rbx, %rdi
 1957 04d9 488B30   		movq	(%rax), %rsi
 1958 04dc E8000000 		call	flLoadCustomFirmware
 1958      00
 1959              	.L218:
 1960 04e1 85C0     		testl	%eax, %eax
 1961 04e3 0F8567FF 		jne	.L263
 1961      FFFF
 1962 04e9 BE000000 		movl	$.LC79, %esi
 1962      00
 1963 04ee BF010000 		movl	$1, %edi
 1963      00
 1964 04f3 BB3C0000 		movl	$60, %ebx
 1964      00
 1965 04f8 E8000000 		call	__printf_chk
 1965      00
 1966 04fd BFE80300 		movl	$1000, %edi
 1966      00
 1967 0502 4C8DA424 		leaq	240(%rsp), %r12
 1967      F0000000 
 1968 050a E8000000 		call	flSleep
 1968      00
 1969 050f EB21     		jmp	.L221
 1970              	.L452:
 1971 0511 BFFA0000 		movl	$250, %edi
 1971      00
 1972 0516 E8000000 		call	flSleep
 1972      00
 1973 051b 80BC24F0 		cmpb	$0, 240(%rsp)
 1973      00000000 
 1974 0523 0F858D03 		jne	.L220
 1974      0000
 1975 0529 83EB01   		subl	$1, %ebx
 1976 052c 0F848403 		je	.L220
 1976      0000
 1977              	.L221:
 1978 0532 BE000000 		movl	$.LC80, %esi
 1978      00
 1979 0537 BF010000 		movl	$1, %edi
 1979      00
 1980 053c 31C0     		xorl	%eax, %eax
 1981 053e E8000000 		call	__printf_chk
 1981      00
 1982 0543 488B3D00 		movq	stdout(%rip), %rdi
 1982      000000
 1983 054a E8000000 		call	fflush
 1983      00
 1984 054f 488D9424 		leaq	216(%rsp), %rdx
 1984      D8000000 
 1985 0557 4C89E6   		movq	%r12, %rsi
 1986 055a 4889EF   		movq	%rbp, %rdi
 1987 055d E8000000 		call	flIsDeviceAvailable
 1987      00
 1988 0562 85C0     		testl	%eax, %eax
 1989 0564 74AB     		je	.L452
 1990 0566 E9E5FEFF 		jmp	.L263
 1990      FF
 1991              	.L216:
 1992 056b 4889E9   		movq	%rbp, %rcx
 1993 056e BA000000 		movl	$.LC83, %edx
 1993      00
 1994 0573 E9A4FEFF 		jmp	.L447
 1994      FF
 1995              	.L222:
 1996 0578 4889EA   		movq	%rbp, %rdx
 1997 057b BE000000 		movl	$.LC82, %esi
 1997      00
 1998 0580 BF010000 		movl	$1, %edi
 1998      00
 1999 0585 31C0     		xorl	%eax, %eax
 2000 0587 E8000000 		call	__printf_chk
 2000      00
 2001 058c 488D9424 		leaq	216(%rsp), %rdx
 2001      D8000000 
 2002 0594 488DB424 		leaq	144(%rsp), %rsi
 2002      90000000 
 2003 059c 4889EF   		movq	%rbp, %rdi
 2004 059f E8000000 		call	flOpen
 2004      00
 2005 05a4 85C0     		testl	%eax, %eax
 2006 05a6 0F85A4FE 		jne	.L263
 2006      FFFF
 2007              	.L215:
 2008 05ac 488BBC24 		movq	144(%rsp), %rdi
 2008      90000000 
 2009 05b4 E8000000 		call	flGetFirmwareVersion
 2009      00
 2010 05b9 488BBC24 		movq	144(%rsp), %rdi
 2010      90000000 
 2011 05c1 89C3     		movl	%eax, %ebx
 2012 05c3 E8000000 		call	flGetFirmwareID
 2012      00
 2013 05c8 4189D8   		movl	%ebx, %r8d
 2014 05cb 0FB7C8   		movzwl	%ax, %ecx
 2015 05ce 4889EA   		movq	%rbp, %rdx
 2016 05d1 31C0     		xorl	%eax, %eax
 2017 05d3 BE000000 		movl	$.LC84, %esi
 2017      00
 2018 05d8 BF010000 		movl	$1, %edi
 2018      00
 2019 05dd E8000000 		call	__printf_chk
 2019      00
 2020 05e2 41837E60 		cmpl	$0, 96(%r14)
 2020      00
 2021 05e7 745F     		je	.L230
 2022 05e9 498B4668 		movq	104(%r14), %rax
 2023 05ed 488B10   		movq	(%rax), %rdx
 2024 05f0 803A73   		cmpb	$115, (%rdx)
 2025 05f3 0F853202 		jne	.L227
 2025      0000
 2026 05f9 807A0174 		cmpb	$116, 1(%rdx)
 2027 05fd 0F852802 		jne	.L227
 2027      0000
 2028 0603 807A0264 		cmpb	$100, 2(%rdx)
 2029 0607 0F851E02 		jne	.L227
 2029      0000
 2030 060d 807A0300 		cmpb	$0, 3(%rdx)
 2031 0611 0F851402 		jne	.L227
 2031      0000
 2032 0617 BE000000 		movl	$.LC85, %esi
 2032      00
 2033 061c BF010000 		movl	$1, %edi
 2033      00
 2034 0621 31C0     		xorl	%eax, %eax
 2035 0623 E8000000 		call	__printf_chk
 2035      00
 2036 0628 488BBC24 		movq	144(%rsp), %rdi
 2036      90000000 
 2037 0630 488D9424 		leaq	216(%rsp), %rdx
 2037      D8000000 
 2038 0638 4889EE   		movq	%rbp, %rsi
 2039 063b E8000000 		call	flFlashStandardFirmware
 2039      00
 2040              	.L228:
 2041 0640 85C0     		testl	%eax, %eax
 2042 0642 0F8508FE 		jne	.L263
 2042      FFFF
 2043              	.L230:
 2044 0648 488B0424 		movq	(%rsp), %rax
 2045 064c 83786000 		cmpl	$0, 96(%rax)
 2046 0650 0F850702 		jne	.L453
 2046      0000
 2047              	.L226:
 2048 0656 488B4424 		movq	32(%rsp), %rax
 2048      20
 2049 065b 83786000 		cmpl	$0, 96(%rax)
 2050 065f 0F859002 		jne	.L233
 2050      0000
 2051              	.L236:
 2052 0665 488B4424 		movq	24(%rsp), %rax
 2052      18
 2053 066a BB010000 		movl	$1, %ebx
 2053      00
 2054 066f 83786000 		cmpl	$0, 96(%rax)
 2055 0673 740C     		je	.L235
 2056 0675 488B4424 		movq	24(%rsp), %rax
 2056      18
 2057 067a 488B4068 		movq	104(%rax), %rax
 2058 067e 0FB618   		movzbl	(%rax), %ebx
 2059              	.L235:
 2060 0681 488BBC24 		movq	144(%rsp), %rdi
 2060      90000000 
 2061 0689 E8000000 		call	flIsNeroCapable
 2061      00
 2062 068e 488BBC24 		movq	144(%rsp), %rdi
 2062      90000000 
 2063 0696 84C0     		testb	%al, %al
 2064 0698 0FB6C3   		movzbl	%bl, %eax
 2065 069b 89C6     		movl	%eax, %esi
 2066 069d 410F95C5 		setne	%r13b
 2067 06a1 890424   		movl	%eax, (%rsp)
 2068 06a4 E8000000 		call	flIsCommCapable
 2068      00
 2069 06a9 89C3     		movl	%eax, %ebx
 2070 06ab 488B4424 		movq	8(%rsp), %rax
 2070      08
 2071 06b0 83786000 		cmpl	$0, 96(%rax)
 2072 06b4 0F856B02 		jne	.L454
 2072      0000
 2073              	.L237:
 2074 06ba 488B4424 		movq	16(%rsp), %rax
 2074      10
 2075 06bf 83786000 		cmpl	$0, 96(%rax)
 2076 06c3 0F84B200 		je	.L244
 2076      0000
 2077 06c9 4584ED   		testb	%r13b, %r13b
 2078 06cc 0F84FA03 		je	.L240
 2078      0000
 2079 06d2 488BBC24 		movq	144(%rsp), %rdi
 2079      90000000 
 2080 06da 488D9424 		leaq	216(%rsp), %rdx
 2080      D8000000 
 2081 06e2 31F6     		xorl	%esi, %esi
 2082 06e4 E8000000 		call	flSelectConduit
 2082      00
 2083 06e9 85C0     		testl	%eax, %eax
 2084 06eb 0F855FFD 		jne	.L263
 2084      FFFF
 2085 06f1 488B4424 		movq	16(%rsp), %rax
 2085      10
 2086 06f6 4C8DA424 		leaq	240(%rsp), %r12
 2086      F0000000 
 2087 06fe 488BBC24 		movq	144(%rsp), %rdi
 2087      90000000 
 2088 0706 4C8D8C24 		leaq	216(%rsp), %r9
 2088      D8000000 
 2089 070e 488D9424 		leaq	128(%rsp), %rdx
 2089      80000000 
 2090 0716 41B81000 		movl	$16, %r8d
 2090      0000
 2091 071c 4C89E1   		movq	%r12, %rcx
 2092 071f 488B4068 		movq	104(%rax), %rax
 2093 0723 488B30   		movq	(%rax), %rsi
 2094 0726 E8000000 		call	jtagScanChain
 2094      00
 2095 072b 85C0     		testl	%eax, %eax
 2096 072d 0F851DFD 		jne	.L263
 2096      FFFF
 2097 0733 83BC2480 		cmpl	$0, 128(%rsp)
 2097      00000000 
 2098 073b 4889EA   		movq	%rbp, %rdx
 2099 073e 0F84D607 		je	.L241
 2099      0000
 2100 0744 BE000000 		movl	$.LC95, %esi
 2100      00
 2101 0749 BF010000 		movl	$1, %edi
 2101      00
 2102 074e 4531F6   		xorl	%r14d, %r14d
 2103 0751 E8000000 		call	__printf_chk
 2103      00
 2104 0756 EB19     		jmp	.L242
 2105              	.L243:
 2106 0758 438B14B4 		movl	(%r12,%r14,4), %edx
 2107 075c BE000000 		movl	$.LC96, %esi
 2107      00
 2108 0761 BF010000 		movl	$1, %edi
 2108      00
 2109 0766 31C0     		xorl	%eax, %eax
 2110 0768 4983C601 		addq	$1, %r14
 2111 076c E8000000 		call	__printf_chk
 2111      00
 2112              	.L242:
 2113 0771 4439B424 		cmpl	%r14d, 128(%rsp)
 2113      80000000 
 2114 0779 77DD     		ja	.L243
 2115              	.L244:
 2116 077b 488B4424 		movq	40(%rsp), %rax
 2116      28
 2117 0780 83786000 		cmpl	$0, 96(%rax)
 2118 0784 0F85A003 		jne	.L455
 2118      0000
 2119              	.L245:
 2120 078a 488B4424 		movq	72(%rsp), %rax
 2120      48
 2121 078f 83786000 		cmpl	$0, 96(%rax)
 2122 0793 7407     		je	.L247
 2123 0795 C6050000 		movb	$1, enableBenchmarking(%rip)
 2123      000001
 2124              	.L247:
 2125 079c 488B4424 		movq	48(%rsp), %rax
 2125      30
 2126 07a1 84DB     		testb	%bl, %bl
 2127 07a3 0F95C3   		setne	%bl
 2128 07a6 83786000 		cmpl	$0, 96(%rax)
 2129 07aa 0F853504 		jne	.L456
 2129      0000
 2130              	.L248:
 2131 07b0 488B4424 		movq	56(%rsp), %rax
 2131      38
 2132 07b5 83786000 		cmpl	$0, 96(%rax)
 2133 07b9 0F85EA03 		jne	.L457
 2133      0000
 2134              	.L254:
 2135 07bf 488B4424 		movq	64(%rsp), %rax
 2135      40
 2136 07c4 83786000 		cmpl	$0, 96(%rax)
 2137 07c8 0F85BE04 		jne	.L458
 2137      0000
 2138 07ce 488B4424 		movq	104(%rsp), %rax
 2138      68
 2139 07d3 83786000 		cmpl	$0, 96(%rax)
 2140 07d7 0F8EA404 		jle	.L372
 2140      0000
 2141 07dd 84DB     		testb	%bl, %bl
 2142 07df 0F84AA03 		je	.L249
 2142      0000
 2143 07e5 4531F6   		xorl	%r14d, %r14d
 2144              	.L269:
 2145 07e8 8B3424   		movl	(%rsp), %esi
 2146 07eb 488BBC24 		movq	144(%rsp), %rdi
 2146      90000000 
 2147 07f3 488D9424 		leaq	216(%rsp), %rdx
 2147      D8000000 
 2148 07fb E8000000 		call	flSelectConduit
 2148      00
 2149 0800 85C0     		testl	%eax, %eax
 2150 0802 0F842807 		je	.L271
 2150      0000
 2151              	.L446:
 2152 0808 41BC0100 		movl	$1, %r12d
 2152      0000
 2153 080e E9F1FAFF 		jmp	.L211
 2153      FF
 2154              	.L217:
 2155 0813 488D9424 		leaq	216(%rsp), %rdx
 2155      D8000000 
 2156 081b 4889EE   		movq	%rbp, %rsi
 2157 081e 4889DF   		movq	%rbx, %rdi
 2158 0821 E8000000 		call	flLoadStandardFirmware
 2158      00
 2159 0826 E9B6FCFF 		jmp	.L218
 2159      FF
 2160              	.L227:
 2161 082b BE000000 		movl	$.LC86, %esi
 2161      00
 2162 0830 BF010000 		movl	$1, %edi
 2162      00
 2163 0835 31C0     		xorl	%eax, %eax
 2164 0837 E8000000 		call	__printf_chk
 2164      00
 2165 083c 498B4668 		movq	104(%r14), %rax
 2166 0840 488BBC24 		movq	144(%rsp), %rdi
 2166      90000000 
 2167 0848 488D9424 		leaq	216(%rsp), %rdx
 2167      D8000000 
 2168 0850 488B30   		movq	(%rax), %rsi
 2169 0853 E8000000 		call	flFlashCustomFirmware
 2169      00
 2170 0858 E9E3FDFF 		jmp	.L228
 2170      FF
 2171              	.L453:
 2172 085d 488B0424 		movq	(%rsp), %rax
 2173 0861 488DB424 		leaq	240(%rsp), %rsi
 2173      F0000000 
 2174 0869 31D2     		xorl	%edx, %edx
 2175 086b 488B4068 		movq	104(%rax), %rax
 2176 086f 488B38   		movq	(%rax), %rdi
 2177 0872 E8000000 		call	strtoul
 2177      00
 2178 0877 488B8C24 		movq	240(%rsp), %rcx
 2178      F0000000 
 2179 087f 4889C3   		movq	%rax, %rbx
 2180 0882 80393A   		cmpb	$58, (%rcx)
 2181 0885 0F844E02 		je	.L231
 2181      0000
 2182 088b B9000000 		movl	$.LC70, %ecx
 2182      00
 2183 0890 BA000000 		movl	$.LC87, %edx
 2183      00
 2184              	.L450:
 2185 0895 488B3D00 		movq	stderr(%rip), %rdi
 2185      000000
 2186 089c BE010000 		movl	$1, %esi
 2186      00
 2187 08a1 31C0     		xorl	%eax, %eax
 2188 08a3 41BC0C00 		movl	$12, %r12d
 2188      0000
 2189 08a9 E8000000 		call	__fprintf_chk
 2189      00
 2190              	.L256:
 2191 08ae 4531F6   		xorl	%r14d, %r14d
 2192 08b1 E94EFAFF 		jmp	.L211
 2192      FF
 2193              	.L220:
 2194 08b6 31C0     		xorl	%eax, %eax
 2195 08b8 BE000000 		movl	$.LC73, %esi
 2195      00
 2196 08bd BF010000 		movl	$1, %edi
 2196      00
 2197 08c2 E8000000 		call	__printf_chk
 2197      00
 2198 08c7 80BC24F0 		cmpb	$0, 240(%rsp)
 2198      00000000 
 2199 08cf 0F85A3FC 		jne	.L222
 2199      FFFF
 2200 08d5 488B3D00 		movq	stderr(%rip), %rdi
 2200      000000
 2201 08dc 4889E9   		movq	%rbp, %rcx
 2202 08df BA000000 		movl	$.LC81, %edx
 2202      00
 2203 08e4 BE010000 		movl	$1, %esi
 2203      00
 2204 08e9 31C0     		xorl	%eax, %eax
 2205 08eb E8000000 		call	__fprintf_chk
 2205      00
 2206 08f0 E95BFBFF 		jmp	.L263
 2206      FF
 2207              	.L233:
 2208 08f5 488BBC24 		movq	144(%rsp), %rdi
 2208      90000000 
 2209 08fd 488DB424 		leaq	216(%rsp), %rsi
 2209      D8000000 
 2210 0905 E8000000 		call	flResetToggle
 2210      00
 2211 090a 85C0     		testl	%eax, %eax
 2212 090c 0F853EFB 		jne	.L263
 2212      FFFF
 2213 0912 E94EFDFF 		jmp	.L236
 2213      FF
 2214              	.L451:
 2215 0917 660F1F84 		.p2align 4,,9
 2215      00000000 
 2215      00
 2216 0920 E8000000 		call	__stack_chk_fail
 2216      00
 2217              	.L454:
 2218 0925 BE000000 		movl	$.LC89, %esi
 2218      00
 2219 092a BF010000 		movl	$1, %edi
 2219      00
 2220 092f 31C0     		xorl	%eax, %eax
 2221 0931 E8000000 		call	__printf_chk
 2221      00
 2222 0936 488B4424 		movq	8(%rsp), %rax
 2222      08
 2223 093b 488BBC24 		movq	144(%rsp), %rdi
 2223      90000000 
 2224 0943 488D8C24 		leaq	216(%rsp), %rcx
 2224      D8000000 
 2225 094b 488D9424 		leaq	240(%rsp), %rdx
 2225      F0000000 
 2226 0953 488B4068 		movq	104(%rax), %rax
 2227 0957 488B30   		movq	(%rax), %rsi
 2228 095a E8000000 		call	flMultiBitPortAccess
 2228      00
 2229 095f 85C0     		testl	%eax, %eax
 2230 0961 0F85E9FA 		jne	.L263
 2230      FFFF
 2231 0967 448B8424 		movl	240(%rsp), %r8d
 2231      F0000000 
 2232 096f 488DBC24 		leaq	448(%rsp), %rdi
 2232      C0010000 
 2233 0977 B9000000 		movl	$.LC90, %ecx
 2233      00
 2234 097c BA090000 		movl	$9, %edx
 2234      00
 2235 0981 BE010000 		movl	$1, %esi
 2235      00
 2236 0986 31C0     		xorl	%eax, %eax
 2237 0988 E8000000 		call	__sprintf_chk
 2237      00
 2238 098d 0FB68424 		movzbl	448(%rsp), %eax
 2238      C0010000 
 2239 0995 BE000000 		movl	$.LC91, %esi
 2239      00
 2240 099a BF010000 		movl	$1, %edi
 2240      00
 2241 099f 83E830   		subl	$48, %eax
 2242 09a2 4898     		cltq
 2243 09a4 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2243      00000000 
 2244 09ac 31C0     		xorl	%eax, %eax
 2245 09ae E8000000 		call	__printf_chk
 2245      00
 2246 09b3 0FB68424 		movzbl	449(%rsp), %eax
 2246      C1010000 
 2247 09bb BE000000 		movl	$.LC92, %esi
 2247      00
 2248 09c0 BF010000 		movl	$1, %edi
 2248      00
 2249 09c5 83E830   		subl	$48, %eax
 2250 09c8 4898     		cltq
 2251 09ca 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2251      00000000 
 2252 09d2 31C0     		xorl	%eax, %eax
 2253 09d4 E8000000 		call	__printf_chk
 2253      00
 2254 09d9 0FB68424 		movzbl	450(%rsp), %eax
 2254      C2010000 
 2255 09e1 BE000000 		movl	$.LC92, %esi
 2255      00
 2256 09e6 BF010000 		movl	$1, %edi
 2256      00
 2257 09eb 83E830   		subl	$48, %eax
 2258 09ee 4898     		cltq
 2259 09f0 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2259      00000000 
 2260 09f8 31C0     		xorl	%eax, %eax
 2261 09fa E8000000 		call	__printf_chk
 2261      00
 2262 09ff 0FB68424 		movzbl	451(%rsp), %eax
 2262      C3010000 
 2263 0a07 BE000000 		movl	$.LC92, %esi
 2263      00
 2264 0a0c BF010000 		movl	$1, %edi
 2264      00
 2265 0a11 83E830   		subl	$48, %eax
 2266 0a14 4898     		cltq
 2267 0a16 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2267      00000000 
 2268 0a1e 31C0     		xorl	%eax, %eax
 2269 0a20 E8000000 		call	__printf_chk
 2269      00
 2270 0a25 0FB68424 		movzbl	452(%rsp), %eax
 2270      C4010000 
 2271 0a2d BE000000 		movl	$.LC93, %esi
 2271      00
 2272 0a32 BF010000 		movl	$1, %edi
 2272      00
 2273 0a37 83E830   		subl	$48, %eax
 2274 0a3a 4898     		cltq
 2275 0a3c 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2275      00000000 
 2276 0a44 31C0     		xorl	%eax, %eax
 2277 0a46 E8000000 		call	__printf_chk
 2277      00
 2278 0a4b 0FB68424 		movzbl	453(%rsp), %eax
 2278      C5010000 
 2279 0a53 BE000000 		movl	$.LC92, %esi
 2279      00
 2280 0a58 BF010000 		movl	$1, %edi
 2280      00
 2281 0a5d 83E830   		subl	$48, %eax
 2282 0a60 4898     		cltq
 2283 0a62 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2283      00000000 
 2284 0a6a 31C0     		xorl	%eax, %eax
 2285 0a6c E8000000 		call	__printf_chk
 2285      00
 2286 0a71 0FB68424 		movzbl	454(%rsp), %eax
 2286      C6010000 
 2287 0a79 BE000000 		movl	$.LC92, %esi
 2287      00
 2288 0a7e BF010000 		movl	$1, %edi
 2288      00
 2289 0a83 83E830   		subl	$48, %eax
 2290 0a86 4898     		cltq
 2291 0a88 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2291      00000000 
 2292 0a90 31C0     		xorl	%eax, %eax
 2293 0a92 E8000000 		call	__printf_chk
 2293      00
 2294 0a97 0FB68424 		movzbl	455(%rsp), %eax
 2294      C7010000 
 2295 0a9f BE000000 		movl	$.LC94, %esi
 2295      00
 2296 0aa4 BF010000 		movl	$1, %edi
 2296      00
 2297 0aa9 83E830   		subl	$48, %eax
 2298 0aac 4898     		cltq
 2299 0aae 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2299      00000000 
 2300 0ab6 31C0     		xorl	%eax, %eax
 2301 0ab8 E8000000 		call	__printf_chk
 2301      00
 2302 0abd BF640000 		movl	$100, %edi
 2302      00
 2303 0ac2 E8000000 		call	flSleep
 2303      00
 2304 0ac7 E9EEFBFF 		jmp	.L237
 2304      FF
 2305              	.L240:
 2306 0acc 4889E9   		movq	%rbp, %rcx
 2307 0acf BA000000 		movl	$.LC98, %edx
 2307      00
 2308 0ad4 E943F9FF 		jmp	.L447
 2308      FF
 2309              	.L231:
 2310 0ad9 4883C101 		addq	$1, %rcx
 2311 0add 89C2     		movl	%eax, %edx
 2312 0adf BE000000 		movl	$.LC88, %esi
 2312      00
 2313 0ae4 BF010000 		movl	$1, %edi
 2313      00
 2314 0ae9 31C0     		xorl	%eax, %eax
 2315 0aeb 48898C24 		movq	%rcx, 240(%rsp)
 2315      F0000000 
 2316 0af3 E8000000 		call	__printf_chk
 2316      00
 2317 0af8 488B9424 		movq	240(%rsp), %rdx
 2317      F0000000 
 2318 0b00 488BBC24 		movq	144(%rsp), %rdi
 2318      90000000 
 2319 0b08 488D8C24 		leaq	216(%rsp), %rcx
 2319      D8000000 
 2320 0b10 89DE     		movl	%ebx, %esi
 2321 0b12 E8000000 		call	flSaveFirmware
 2321      00
 2322 0b17 85C0     		testl	%eax, %eax
 2323 0b19 0F8437FB 		je	.L226
 2323      FFFF
 2324              	.L258:
 2325 0b1f 41BC0100 		movl	$1, %r12d
 2325      0000
 2326 0b25 E984FDFF 		jmp	.L256
 2326      FF
 2327              	.L455:
 2328 0b2a 31C0     		xorl	%eax, %eax
 2329 0b2c BE000000 		movl	$.LC99, %esi
 2329      00
 2330 0b31 BF010000 		movl	$1, %edi
 2330      00
 2331 0b36 E8000000 		call	__printf_chk
 2331      00
 2332 0b3b 4584ED   		testb	%r13b, %r13b
 2333 0b3e 745C     		je	.L246
 2334 0b40 488BBC24 		movq	144(%rsp), %rdi
 2334      90000000 
 2335 0b48 488D9424 		leaq	216(%rsp), %rdx
 2335      D8000000 
 2336 0b50 31F6     		xorl	%esi, %esi
 2337 0b52 E8000000 		call	flSelectConduit
 2337      00
 2338 0b57 85C0     		testl	%eax, %eax
 2339 0b59 0F85F1F8 		jne	.L263
 2339      FFFF
 2340 0b5f 488B4424 		movq	40(%rsp), %rax
 2340      28
 2341 0b64 488BBC24 		movq	144(%rsp), %rdi
 2341      90000000 
 2342 0b6c 488D8C24 		leaq	216(%rsp), %rcx
 2342      D8000000 
 2343 0b74 31D2     		xorl	%edx, %edx
 2344 0b76 488B4068 		movq	104(%rax), %rax
 2345 0b7a 488B30   		movq	(%rax), %rsi
 2346 0b7d E8000000 		call	flProgram
 2346      00
 2347 0b82 85C0     		testl	%eax, %eax
 2348 0b84 0F85C6F8 		jne	.L263
 2348      FFFF
 2349 0b8a E9FBFBFF 		jmp	.L245
 2349      FF
 2350              	.L249:
 2351 0b8f 4889E9   		movq	%rbp, %rcx
 2352 0b92 BA000000 		movl	$.LC103, %edx
 2352      00
 2353 0b97 E980F8FF 		jmp	.L447
 2353      FF
 2354              	.L246:
 2355 0b9c 4889E9   		movq	%rbp, %rcx
 2356 0b9f BA000000 		movl	$.LC100, %edx
 2356      00
 2357 0ba4 E973F8FF 		jmp	.L447
 2357      FF
 2358              	.L457:
 2359 0ba9 488B4068 		movq	104(%rax), %rax
 2360 0bad 488DB424 		leaq	208(%rsp), %rsi
 2360      D0000000 
 2361 0bb5 BA0A0000 		movl	$10, %edx
 2361      00
 2362 0bba 488B38   		movq	(%rax), %rdi
 2363 0bbd E8000000 		call	strtoul
 2363      00
 2364 0bc2 488B8C24 		movq	208(%rsp), %rcx
 2364      D0000000 
 2365 0bca 4989C5   		movq	%rax, %r13
 2366 0bcd 80393A   		cmpb	$58, (%rcx)
 2367 0bd0 0F84A301 		je	.L255
 2367      0000
 2368 0bd6 B9000000 		movl	$.LC70, %ecx
 2368      00
 2369 0bdb BA000000 		movl	$.LC104, %edx
 2369      00
 2370 0be0 E9B0FCFF 		jmp	.L450
 2370      FF
 2371              	.L456:
 2372 0be5 31C0     		xorl	%eax, %eax
 2373 0be7 4889EA   		movq	%rbp, %rdx
 2374 0bea BE000000 		movl	$.LC101, %esi
 2374      00
 2375 0bef BF010000 		movl	$1, %edi
 2375      00
 2376 0bf4 E8000000 		call	__printf_chk
 2376      00
 2377 0bf9 84DB     		testb	%bl, %bl
 2378 0bfb 7492     		je	.L249
 2379 0bfd 8B3424   		movl	(%rsp), %esi
 2380 0c00 488BBC24 		movq	144(%rsp), %rdi
 2380      90000000 
 2381 0c08 488D9424 		leaq	216(%rsp), %rdx
 2381      D8000000 
 2382 0c10 E8000000 		call	flSelectConduit
 2382      00
 2383 0c15 85C0     		testl	%eax, %eax
 2384 0c17 0F8502FF 		jne	.L258
 2384      FFFF
 2385 0c1d 488BBC24 		movq	144(%rsp), %rdi
 2385      90000000 
 2386 0c25 488D9424 		leaq	216(%rsp), %rdx
 2386      D8000000 
 2387 0c2d 488DB424 		leaq	224(%rsp), %rsi
 2387      E0000000 
 2388 0c35 E8000000 		call	flIsFPGARunning
 2388      00
 2389 0c3a 85C0     		testl	%eax, %eax
 2390 0c3c 0F85DDFE 		jne	.L258
 2390      FFFF
 2391 0c42 80BC24E0 		cmpb	$0, 224(%rsp)
 2391      00000000 
 2392 0c4a 0F84B202 		je	.L251
 2392      0000
 2393 0c50 488B4424 		movq	48(%rsp), %rax
 2393      30
 2394 0c55 488BBC24 		movq	144(%rsp), %rdi
 2394      90000000 
 2395 0c5d 488D9424 		leaq	216(%rsp), %rdx
 2395      D8000000 
 2396 0c65 488B4068 		movq	104(%rax), %rax
 2397 0c69 488B30   		movq	(%rax), %rsi
 2398 0c6c E8000000 		call	parseLine
 2398      00
 2399 0c71 85C0     		testl	%eax, %eax
 2400 0c73 4189C4   		movl	%eax, %r12d
 2401 0c76 0F8532FC 		jne	.L256
 2401      FFFF
 2402 0c7c E92FFBFF 		jmp	.L248
 2402      FF
 2403              	.L372:
 2404 0c81 4531F6   		xorl	%r14d, %r14d
 2405              	.L449:
 2406 0c84 4531E4   		xorl	%r12d, %r12d
 2407 0c87 E978F6FF 		jmp	.L211
 2407      FF
 2408              	.L458:
 2409 0c8c 31C0     		xorl	%eax, %eax
 2410 0c8e BE000000 		movl	$.LC107, %esi
 2410      00
 2411 0c93 BF010000 		movl	$1, %edi
 2411      00
 2412 0c98 E8000000 		call	__printf_chk
 2412      00
 2413 0c9d 84DB     		testb	%bl, %bl
 2414 0c9f 0F84B200 		je	.L262
 2414      0000
 2415 0ca5 8B3424   		movl	(%rsp), %esi
 2416 0ca8 488BBC24 		movq	144(%rsp), %rdi
 2416      90000000 
 2417 0cb0 488D9424 		leaq	216(%rsp), %rdx
 2417      D8000000 
 2418 0cb8 E8000000 		call	flSelectConduit
 2418      00
 2419 0cbd 85C0     		testl	%eax, %eax
 2420 0cbf 0F858BF7 		jne	.L263
 2420      FFFF
 2421 0cc5 488BBC24 		movq	144(%rsp), %rdi
 2421      90000000 
 2422 0ccd 488D9424 		leaq	216(%rsp), %rdx
 2422      D8000000 
 2423 0cd5 488DB424 		leaq	224(%rsp), %rsi
 2423      E0000000 
 2424 0cdd E8000000 		call	flIsFPGARunning
 2424      00
 2425 0ce2 85C0     		testl	%eax, %eax
 2426 0ce4 0F8566F7 		jne	.L263
 2426      FFFF
 2427 0cea 80BC24E0 		cmpb	$0, 224(%rsp)
 2427      00000000 
 2428 0cf2 7478     		je	.L264
 2429              	.L265:
 2430 0cf4 BF000000 		movl	$.LC108, %edi
 2430      00
 2431 0cf9 E8000000 		call	readline
 2431      00
 2432 0cfe 4885C0   		testq	%rax, %rax
 2433 0d01 4989C6   		movq	%rax, %r14
 2434 0d04 743D     		je	.L266
 2435 0d06 0FB600   		movzbl	(%rax), %eax
 2436 0d09 84C0     		testb	%al, %al
 2437 0d0b 74E7     		je	.L265
 2438 0d0d 3C71     		cmpb	$113, %al
 2439 0d0f 7432     		je	.L266
 2440 0d11 4C89F7   		movq	%r14, %rdi
 2441 0d14 E8000000 		call	add_history
 2441      00
 2442 0d19 488BBC24 		movq	144(%rsp), %rdi
 2442      90000000 
 2443 0d21 488D9424 		leaq	216(%rsp), %rdx
 2443      D8000000 
 2444 0d29 4C89F6   		movq	%r14, %rsi
 2445 0d2c E8000000 		call	parseLine
 2445      00
 2446 0d31 85C0     		testl	%eax, %eax
 2447 0d33 752F     		jne	.L432
 2448 0d35 4C89F7   		movq	%r14, %rdi
 2449 0d38 E8000000 		call	free
 2449      00
 2450 0d3d 41803E71 		cmpb	$113, (%r14)
 2451 0d41 75B1     		jne	.L265
 2452              	.L266:
 2453 0d43 488B4424 		movq	104(%rsp), %rax
 2453      68
 2454 0d48 83786000 		cmpl	$0, 96(%rax)
 2455 0d4c 0F8F96FA 		jg	.L269
 2455      FFFF
 2456 0d52 E92DFFFF 		jmp	.L449
 2456      FF
 2457              	.L262:
 2458 0d57 4889E9   		movq	%rbp, %rcx
 2459 0d5a BA000000 		movl	$.LC110, %edx
 2459      00
 2460 0d5f E9B8F6FF 		jmp	.L447
 2460      FF
 2461              	.L432:
 2462 0d64 4189C4   		movl	%eax, %r12d
 2463 0d67 E998F5FF 		jmp	.L211
 2463      FF
 2464              	.L264:
 2465 0d6c 4889E9   		movq	%rbp, %rcx
 2466 0d6f BA000000 		movl	$.LC109, %edx
 2466      00
 2467 0d74 E9A3F6FF 		jmp	.L447
 2467      FF
 2468              	.L255:
 2469 0d79 4883C101 		addq	$1, %rcx
 2470 0d7d 4889C2   		movq	%rax, %rdx
 2471 0d80 BE000000 		movl	$.LC105, %esi
 2471      00
 2472 0d85 BF010000 		movl	$1, %edi
 2472      00
 2473 0d8a 31C0     		xorl	%eax, %eax
 2474 0d8c 48898C24 		movq	%rcx, 208(%rsp)
 2474      D0000000 
 2475 0d94 E8000000 		call	__printf_chk
 2475      00
 2476 0d99 488BBC24 		movq	208(%rsp), %rdi
 2476      D0000000 
 2477 0da1 BE000000 		movl	$.LC1, %esi
 2477      00
 2478 0da6 E8000000 		call	fopen
 2478      00
 2479 0dab 4885C0   		testq	%rax, %rax
 2480 0dae 4989C4   		movq	%rax, %r12
 2481 0db1 0F845801 		je	.L371
 2481      0000
 2482 0db7 E8000000 		call	sigRegisterHandler
 2482      00
 2483 0dbc 8B3424   		movl	(%rsp), %esi
 2484 0dbf 488BBC24 		movq	144(%rsp), %rdi
 2484      90000000 
 2485 0dc7 488D9424 		leaq	216(%rsp), %rdx
 2485      D8000000 
 2486 0dcf E8000000 		call	flSelectConduit
 2486      00
 2487 0dd4 85C0     		testl	%eax, %eax
 2488 0dd6 0F8543FD 		jne	.L258
 2488      FFFF
 2489 0ddc 488BBC24 		movq	144(%rsp), %rdi
 2489      90000000 
 2490 0de4 450FB6ED 		movzbl	%r13b, %r13d
 2491 0de8 4C8D8424 		leaq	216(%rsp), %r8
 2491      D8000000 
 2492 0df0 31C9     		xorl	%ecx, %ecx
 2493 0df2 BA005800 		movl	$22528, %edx
 2493      00
 2494 0df7 4489EE   		movl	%r13d, %esi
 2495 0dfa E8000000 		call	flReadChannelAsyncSubmit
 2495      00
 2496 0dff 85C0     		testl	%eax, %eax
 2497 0e01 0F8518FD 		jne	.L258
 2497      FFFF
 2498              	.L260:
 2499 0e07 488BBC24 		movq	144(%rsp), %rdi
 2499      90000000 
 2500 0e0f 4C8D8424 		leaq	216(%rsp), %r8
 2500      D8000000 
 2501 0e17 31C9     		xorl	%ecx, %ecx
 2502 0e19 BA005800 		movl	$22528, %edx
 2502      00
 2503 0e1e 4489EE   		movl	%r13d, %esi
 2504 0e21 E8000000 		call	flReadChannelAsyncSubmit
 2504      00
 2505 0e26 85C0     		testl	%eax, %eax
 2506 0e28 0F85F1FC 		jne	.L258
 2506      FFFF
 2507 0e2e 488D8C24 		leaq	192(%rsp), %rcx
 2507      C0000000 
 2508 0e36 488BBC24 		movq	144(%rsp), %rdi
 2508      90000000 
 2509 0e3e 4C8D8424 		leaq	216(%rsp), %r8
 2509      D8000000 
 2510 0e46 488DB424 		leaq	224(%rsp), %rsi
 2510      E0000000 
 2511 0e4e 4889CA   		movq	%rcx, %rdx
 2512 0e51 E8000000 		call	flReadChannelAsyncAwait
 2512      00
 2513 0e56 85C0     		testl	%eax, %eax
 2514 0e58 0F85C1FC 		jne	.L258
 2514      FFFF
 2515 0e5e 8B9424C0 		movl	192(%rsp), %edx
 2515      000000
 2516 0e65 488BBC24 		movq	224(%rsp), %rdi
 2516      E0000000 
 2517 0e6d 4C89E1   		movq	%r12, %rcx
 2518 0e70 BE010000 		movl	$1, %esi
 2518      00
 2519 0e75 E8000000 		call	fwrite
 2519      00
 2520 0e7a BE000000 		movl	$.LC80, %esi
 2520      00
 2521 0e7f BF010000 		movl	$1, %edi
 2521      00
 2522 0e84 31C0     		xorl	%eax, %eax
 2523 0e86 E8000000 		call	__printf_chk
 2523      00
 2524 0e8b E8000000 		call	sigIsRaised
 2524      00
 2525 0e90 84C0     		testb	%al, %al
 2526 0e92 0F846FFF 		je	.L260
 2526      FFFF
 2527 0e98 BE000000 		movl	$.LC106, %esi
 2527      00
 2528 0e9d BF010000 		movl	$1, %edi
 2528      00
 2529 0ea2 31C0     		xorl	%eax, %eax
 2530 0ea4 E8000000 		call	__printf_chk
 2530      00
 2531 0ea9 488D8C24 		leaq	192(%rsp), %rcx
 2531      C0000000 
 2532 0eb1 488BBC24 		movq	144(%rsp), %rdi
 2532      90000000 
 2533 0eb9 4C8D8424 		leaq	216(%rsp), %r8
 2533      D8000000 
 2534 0ec1 488DB424 		leaq	224(%rsp), %rsi
 2534      E0000000 
 2535 0ec9 4889CA   		movq	%rcx, %rdx
 2536 0ecc E8000000 		call	flReadChannelAsyncAwait
 2536      00
 2537 0ed1 85C0     		testl	%eax, %eax
 2538 0ed3 0F8546FC 		jne	.L258
 2538      FFFF
 2539 0ed9 8B9424C0 		movl	192(%rsp), %edx
 2539      000000
 2540 0ee0 488BBC24 		movq	224(%rsp), %rdi
 2540      E0000000 
 2541 0ee8 4C89E1   		movq	%r12, %rcx
 2542 0eeb BE010000 		movl	$1, %esi
 2542      00
 2543 0ef0 E8000000 		call	fwrite
 2543      00
 2544 0ef5 4C89E7   		movq	%r12, %rdi
 2545 0ef8 E8000000 		call	fclose
 2545      00
 2546 0efd E9BDF8FF 		jmp	.L254
 2546      FF
 2547              	.L251:
 2548 0f02 4889E9   		movq	%rbp, %rcx
 2549 0f05 BA000000 		movl	$.LC102, %edx
 2549      00
 2550 0f0a E986F9FF 		jmp	.L450
 2550      FF
 2551              	.L371:
 2552 0f0f 41BC0B00 		movl	$11, %r12d
 2552      0000
 2553 0f15 E994F9FF 		jmp	.L256
 2553      FF
 2554              	.L241:
 2555 0f1a BE000000 		movl	$.LC97, %esi
 2555      00
 2556 0f1f BF010000 		movl	$1, %edi
 2556      00
 2557 0f24 31C0     		xorl	%eax, %eax
 2558 0f26 E8000000 		call	__printf_chk
 2558      00
 2559 0f2b E94BF8FF 		jmp	.L244
 2559      FF
 2560              	.L271:
 2561 0f30 488BBC24 		movq	144(%rsp), %rdi
 2561      90000000 
 2562 0f38 488D9424 		leaq	216(%rsp), %rdx
 2562      D8000000 
 2563 0f40 488D7424 		leaq	112(%rsp), %rsi
 2563      70
 2564 0f45 E8000000 		call	flIsFPGARunning
 2564      00
 2565 0f4a 85C0     		testl	%eax, %eax
 2566 0f4c 0F85B6F8 		jne	.L446
 2566      FFFF
 2567 0f52 807C2470 		cmpb	$0, 112(%rsp)
 2567      00
 2568 0f57 0F840A01 		je	.L274
 2568      0000
 2569 0f5d 488DBC24 		leaq	448(%rsp), %rdi
 2569      C0010000 
 2570 0f65 BE000000 		movl	$.LC111, %esi
 2570      00
 2571 0f6a B9670000 		movl	$103, %ecx
 2571      00
 2572 0f6f F3A4     		rep movsb
 2573 0f71 488DBC24 		leaq	448(%rsp), %rdi
 2573      C0010000 
 2574 0f79 BE000000 		movl	$.LC112, %esi
 2574      00
 2575 0f7e E8000000 		call	fopen
 2575      00
 2576 0f83 4885C0   		testq	%rax, %rax
 2577 0f86 4889C3   		movq	%rax, %rbx
 2578 0f89 0F841001 		je	.L459
 2578      0000
 2579 0f8f BF640000 		movl	$100, %edi
 2579      00
 2580 0f94 48C78424 		movq	$100, 160(%rsp)
 2580      A0000000 
 2580      64000000 
 2581 0fa0 E8000000 		call	malloc
 2581      00
 2582 0fa5 48898424 		movq	%rax, 176(%rsp)
 2582      B0000000 
 2583 0fad EB14     		jmp	.L277
 2584              	.L279:
 2585 0faf 833D0000 		cmpl	$0, numLines(%rip)
 2585      000000
 2586 0fb6 0F85D100 		jne	.L460
 2586      0000
 2587              	.L278:
 2588 0fbc 83050000 		addl	$1, numLines(%rip)
 2588      000001
 2589              	.L277:
 2590 0fc3 488DB424 		leaq	160(%rsp), %rsi
 2590      A0000000 
 2591 0fcb 488DBC24 		leaq	176(%rsp), %rdi
 2591      B0000000 
 2592 0fd3 4889D9   		movq	%rbx, %rcx
 2593 0fd6 BA0A0000 		movl	$10, %edx
 2593      00
 2594 0fdb E8000000 		call	__getdelim
 2594      00
 2595 0fe0 4883C001 		addq	$1, %rax
 2596 0fe4 75C9     		jne	.L279
 2597 0fe6 488BBC24 		movq	176(%rsp), %rdi
 2597      B0000000 
 2598 0fee 832D0000 		subl	$1, numLines(%rip)
 2598      000001
 2599 0ff5 E8000000 		call	free
 2599      00
 2600 0ffa 4889DF   		movq	%rbx, %rdi
 2601 0ffd E8000000 		call	fclose
 2601      00
 2602 1002 4C893424 		movq	%r14, (%rsp)
 2603              	.L361:
 2604 1006 BF010000 		movl	$1, %edi
 2604      00
 2605 100b E8000000 		call	malloc
 2605      00
 2606 1010 488BBC24 		movq	144(%rsp), %rdi
 2606      90000000 
 2607 1018 4C8D8424 		leaq	216(%rsp), %r8
 2607      D8000000 
 2608 1020 31F6     		xorl	%esi, %esi
 2609 1022 4889C1   		movq	%rax, %rcx
 2610 1025 BA010000 		movl	$1, %edx
 2610      00
 2611 102a 4889C5   		movq	%rax, %rbp
 2612 102d E8000000 		call	flReadChannel
 2612      00
 2613 1032 85C0     		testl	%eax, %eax
 2614 1034 0F857401 		jne	.L444
 2614      0000
 2615 103a 0FB65500 		movzbl	0(%rbp), %edx
 2616 103e BE000000 		movl	$.LC114, %esi
 2616      00
 2617 1043 BF010000 		movl	$1, %edi
 2617      00
 2618 1048 E8000000 		call	__printf_chk
 2618      00
 2619 104d 440FB665 		movzbl	0(%rbp), %r12d
 2619      00
 2620 1052 418D4424 		leal	-1(%r12), %eax
 2620      FF
 2621 1057 3C01     		cmpb	$1, %al
 2622 1059 765A     		jbe	.L461
 2623              	.L359:
 2624 105b BFE80300 		movl	$1000, %edi
 2624      00
 2625 1060 E8000000 		call	flSleep
 2625      00
 2626 1065 EB9F     		jmp	.L361
 2627              	.L274:
 2628 1067 488B3D00 		movq	stderr(%rip), %rdi
 2628      000000
 2629 106e 4889E9   		movq	%rbp, %rcx
 2630 1071 BA000000 		movl	$.LC102, %edx
 2630      00
 2631 1076 BE010000 		movl	$1, %esi
 2631      00
 2632 107b 31C0     		xorl	%eax, %eax
 2633 107d 41BC0C00 		movl	$12, %r12d
 2633      0000
 2634 1083 E8000000 		call	__fprintf_chk
 2634      00
 2635 1088 E977F2FF 		jmp	.L211
 2635      FF
 2636              	.L460:
 2637 108d 488BBC24 		movq	176(%rsp), %rdi
 2637      B0000000 
 2638 1095 E8000000 		call	format
 2638      00
 2639 109a E91DFFFF 		jmp	.L278
 2639      FF
 2640              	.L459:
 2641 109f BE000000 		movl	$.LC113, %esi
 2641      00
 2642 10a4 BF010000 		movl	$1, %edi
 2642      00
 2643 10a9 31C0     		xorl	%eax, %eax
 2644 10ab E8000000 		call	__printf_chk
 2644      00
 2645 10b0 E999F2FF 		jmp	.L276
 2645      FF
 2646              	.L461:
 2647 10b5 BB020000 		movl	$2, %ebx
 2647      00
 2648              	.L283:
 2649 10ba BFE80300 		movl	$1000, %edi
 2649      00
 2650 10bf E8000000 		call	flSleep
 2650      00
 2651 10c4 488BBC24 		movq	144(%rsp), %rdi
 2651      90000000 
 2652 10cc 4C8D8424 		leaq	216(%rsp), %r8
 2652      D8000000 
 2653 10d4 31F6     		xorl	%esi, %esi
 2654 10d6 4889E9   		movq	%rbp, %rcx
 2655 10d9 BA010000 		movl	$1, %edx
 2655      00
 2656 10de E8000000 		call	flReadChannel
 2656      00
 2657 10e3 85C0     		testl	%eax, %eax
 2658 10e5 0F85C300 		jne	.L444
 2658      0000
 2659 10eb 0FB65500 		movzbl	0(%rbp), %edx
 2660 10ef BE000000 		movl	$.LC114, %esi
 2660      00
 2661 10f4 BF010000 		movl	$1, %edi
 2661      00
 2662 10f9 E8000000 		call	__printf_chk
 2662      00
 2663 10fe 443A6500 		cmpb	0(%rbp), %r12b
 2664 1102 0F8553FF 		jne	.L359
 2664      FFFF
 2665 1108 80EB01   		subb	$1, %bl
 2666 110b 75AD     		jne	.L283
 2667 110d C78424C0 		movl	$0, 192(%rsp)
 2667      00000000 
 2667      000000
 2668 1118 C78424C4 		movl	$0, 196(%rsp)
 2668      00000000 
 2668      000000
 2669 1123 4531ED   		xorl	%r13d, %r13d
 2670 1126 BB010000 		movl	$1, %ebx
 2670      00
 2671 112b EB18     		jmp	.L363
 2672              	.L463:
 2673 112d 4489E9   		movl	%r13d, %ecx
 2674 1130 D3E0     		sall	%cl, %eax
 2675 1132 018424C0 		addl	%eax, 192(%rsp)
 2675      000000
 2676              	.L286:
 2677 1139 83C301   		addl	$1, %ebx
 2678 113c 4183C508 		addl	$8, %r13d
 2679 1140 83FB09   		cmpl	$9, %ebx
 2680 1143 7472     		je	.L462
 2681              	.L363:
 2682 1145 BF010000 		movl	$1, %edi
 2682      00
 2683 114a E8000000 		call	malloc
 2683      00
 2684 114f BFE80300 		movl	$1000, %edi
 2684      00
 2685 1154 4989C4   		movq	%rax, %r12
 2686 1157 E8000000 		call	flSleep
 2686      00
 2687 115c 488BBC24 		movq	144(%rsp), %rdi
 2687      90000000 
 2688 1164 4C8D8424 		leaq	216(%rsp), %r8
 2688      D8000000 
 2689 116c 4C89E1   		movq	%r12, %rcx
 2690 116f BA010000 		movl	$1, %edx
 2690      00
 2691 1174 89DE     		movl	%ebx, %esi
 2692 1176 E8000000 		call	flReadChannel
 2692      00
 2693 117b 85C0     		testl	%eax, %eax
 2694 117d 752F     		jne	.L444
 2695 117f 410FB60C 		movzbl	(%r12), %ecx
 2695      24
 2696 1184 89DA     		movl	%ebx, %edx
 2697 1186 BE000000 		movl	$.LC115, %esi
 2697      00
 2698 118b BF010000 		movl	$1, %edi
 2698      00
 2699 1190 E8000000 		call	__printf_chk
 2699      00
 2700 1195 83FB04   		cmpl	$4, %ebx
 2701 1198 410FB604 		movzbl	(%r12), %eax
 2701      24
 2702 119d 768E     		jbe	.L463
 2703 119f 418D4DE0 		leal	-32(%r13), %ecx
 2704 11a3 D3E0     		sall	%cl, %eax
 2705 11a5 018424C4 		addl	%eax, 196(%rsp)
 2705      000000
 2706 11ac EB8B     		jmp	.L286
 2707              	.L444:
 2708 11ae 4C8B3424 		movq	(%rsp), %r14
 2709 11b2 E951F6FF 		jmp	.L446
 2709      FF
 2710              	.L462:
 2711 11b7 660F6F05 		movdqa	.LC116(%rip), %xmm0
 2711      00000000 
 2712 11bf 488DB424 		leaq	224(%rsp), %rsi
 2712      E0000000 
 2713 11c7 488DBC24 		leaq	192(%rsp), %rdi
 2713      C0000000 
 2714 11cf 4531F6   		xorl	%r14d, %r14d
 2715 11d2 4531ED   		xorl	%r13d, %r13d
 2716 11d5 660F7F84 		movdqa	%xmm0, 224(%rsp)
 2716      24E00000 
 2716      00
 2717 11de 4531E4   		xorl	%r12d, %r12d
 2718 11e1 31DB     		xorl	%ebx, %ebx
 2719 11e3 E8000000 		call	decrypt
 2719      00
 2720 11e8 31C0     		xorl	%eax, %eax
 2721 11ea BE010000 		movl	$1, %esi
 2721      00
 2722 11ef BA010000 		movl	$1, %edx
 2722      00
 2723 11f4 8BBC24C0 		movl	192(%rsp), %edi
 2723      000000
 2724 11fb EB2B     		jmp	.L293
 2725              	.L288:
 2726 11fd 4080FE10 		cmpb	$16, %sil
 2727 1201 7740     		ja	.L290
 2728 1203 4189D3   		movl	%edx, %r11d
 2729 1206 89C1     		movl	%eax, %ecx
 2730 1208 41D3E3   		sall	%cl, %r11d
 2731 120b 4485DF   		testl	%r11d, %edi
 2732 120e 740C     		je	.L289
 2733 1210 8D48F8   		leal	-8(%rax), %ecx
 2734 1213 4189D2   		movl	%edx, %r10d
 2735 1216 41D3E2   		sall	%cl, %r10d
 2736 1219 4501D4   		addl	%r10d, %r12d
 2737              	.L289:
 2738 121c 83C601   		addl	$1, %esi
 2739 121f 83C001   		addl	$1, %eax
 2740 1222 4080FE21 		cmpb	$33, %sil
 2741 1226 743C     		je	.L464
 2742              	.L293:
 2743 1228 4080FE08 		cmpb	$8, %sil
 2744 122c 77CF     		ja	.L288
 2745 122e 4189D2   		movl	%edx, %r10d
 2746 1231 89C1     		movl	%eax, %ecx
 2747 1233 41D3E2   		sall	%cl, %r10d
 2748 1236 468D0413 		leal	(%rbx,%r10), %r8d
 2749 123a 4185FA   		testl	%edi, %r10d
 2750 123d 410F45D8 		cmovne	%r8d, %ebx
 2751 1241 EBD9     		jmp	.L289
 2752              	.L290:
 2753 1243 4080FE18 		cmpb	$24, %sil
 2754 1247 776F     		ja	.L291
 2755 1249 4189D3   		movl	%edx, %r11d
 2756 124c 89C1     		movl	%eax, %ecx
 2757 124e 41D3E3   		sall	%cl, %r11d
 2758 1251 4485DF   		testl	%r11d, %edi
 2759 1254 74C6     		je	.L289
 2760 1256 8D48F0   		leal	-16(%rax), %ecx
 2761 1259 4189D1   		movl	%edx, %r9d
 2762 125c 41D3E1   		sall	%cl, %r9d
 2763 125f 4501CD   		addl	%r9d, %r13d
 2764 1262 EBB8     		jmp	.L289
 2765              	.L464:
 2766 1264 8BBC24C4 		movl	196(%rsp), %edi
 2766      000000
 2767 126b 31C0     		xorl	%eax, %eax
 2768 126d 31D2     		xorl	%edx, %edx
 2769 126f 4531FF   		xorl	%r15d, %r15d
 2770 1272 BE010000 		movl	$1, %esi
 2770      00
 2771 1277 EB1B     		jmp	.L297
 2772              	.L466:
 2773 1279 4189F1   		movl	%esi, %r9d
 2774 127c 89C1     		movl	%eax, %ecx
 2775 127e 41D3E1   		sall	%cl, %r9d
 2776 1281 468D040A 		leal	(%rdx,%r9), %r8d
 2777 1285 4185F9   		testl	%edi, %r9d
 2778 1288 410F45D0 		cmovne	%r8d, %edx
 2779              	.L295:
 2780 128c 83C001   		addl	$1, %eax
 2781 128f 83F820   		cmpl	$32, %eax
 2782 1292 7446     		je	.L465
 2783              	.L297:
 2784 1294 8D4801   		leal	1(%rax), %ecx
 2785 1297 6683F910 		cmpw	$16, %cx
 2786 129b 76DC     		jbe	.L466
 2787 129d 4189F2   		movl	%esi, %r10d
 2788 12a0 89C1     		movl	%eax, %ecx
 2789 12a2 41D3E2   		sall	%cl, %r10d
 2790 12a5 4485D7   		testl	%r10d, %edi
 2791 12a8 74E2     		je	.L295
 2792 12aa 8D48F0   		leal	-16(%rax), %ecx
 2793 12ad 4189F3   		movl	%esi, %r11d
 2794 12b0 41D3E3   		sall	%cl, %r11d
 2795 12b3 4501DF   		addl	%r11d, %r15d
 2796 12b6 EBD4     		jmp	.L295
 2797              	.L291:
 2798 12b8 4189D2   		movl	%edx, %r10d
 2799 12bb 89C1     		movl	%eax, %ecx
 2800 12bd 41D3E2   		sall	%cl, %r10d
 2801 12c0 4485D7   		testl	%r10d, %edi
 2802 12c3 0F8453FF 		je	.L289
 2802      FFFF
 2803 12c9 8D48E8   		leal	-24(%rax), %ecx
 2804 12cc 4189D3   		movl	%edx, %r11d
 2805 12cf 41D3E3   		sall	%cl, %r11d
 2806 12d2 4501DE   		addl	%r11d, %r14d
 2807 12d5 E942FFFF 		jmp	.L289
 2807      FF
 2808              	.L465:
 2809 12da 440FB7CA 		movzwl	%dx, %r9d
 2810 12de BE000000 		movl	$.LC117, %esi
 2810      00
 2811 12e3 BF010000 		movl	$1, %edi
 2811      00
 2812 12e8 4489CA   		movl	%r9d, %edx
 2813 12eb 31C0     		xorl	%eax, %eax
 2814 12ed 44894C24 		movl	%r9d, 8(%rsp)
 2814      08
 2815 12f2 E8000000 		call	__printf_chk
 2815      00
 2816 12f7 410FB7D7 		movzwl	%r15w, %edx
 2817 12fb BE000000 		movl	$.LC118, %esi
 2817      00
 2818 1300 BF010000 		movl	$1, %edi
 2818      00
 2819 1305 31C0     		xorl	%eax, %eax
 2820 1307 E8000000 		call	__printf_chk
 2820      00
 2821 130c 448B4C24 		movl	8(%rsp), %r9d
 2821      08
 2822 1311 31C0     		xorl	%eax, %eax
 2823 1313 4531C0   		xorl	%r8d, %r8d
 2824 1316 BA010000 		movl	$1, %edx
 2824      00
 2825              	.L299:
 2826 131b 8D480B   		leal	11(%rax), %ecx
 2827 131e 89D6     		movl	%edx, %esi
 2828 1320 4489CF   		movl	%r9d, %edi
 2829 1323 83E10F   		andl	$15, %ecx
 2830 1326 D3E6     		sall	%cl, %esi
 2831 1328 89C1     		movl	%eax, %ecx
 2832 132a D3FF     		sarl	%cl, %edi
 2833 132c 418D3430 		leal	(%r8,%rsi), %esi
 2834 1330 89F9     		movl	%edi, %ecx
 2835 1332 80E101   		andb	$1, %cl
 2836 1335 440F45C6 		cmovne	%esi, %r8d
 2837 1339 4883C001 		addq	$1, %rax
 2838 133d 4883F810 		cmpq	$16, %rax
 2839 1341 75D8     		jne	.L299
 2840 1343 410FB7D0 		movzwl	%r8w, %edx
 2841 1347 BE000000 		movl	$.LC119, %esi
 2841      00
 2842 134c BF010000 		movl	$1, %edi
 2842      00
 2843 1351 31C0     		xorl	%eax, %eax
 2844 1353 450FB6F6 		movzbl	%r14b, %r14d
 2845 1357 44894424 		movl	%r8d, 16(%rsp)
 2845      10
 2846 135c 450FB6ED 		movzbl	%r13b, %r13d
 2847 1360 450FB6E4 		movzbl	%r12b, %r12d
 2848 1364 E8000000 		call	__printf_chk
 2848      00
 2849 1369 4489F2   		movl	%r14d, %edx
 2850 136c BE000000 		movl	$.LC120, %esi
 2850      00
 2851 1371 BF010000 		movl	$1, %edi
 2851      00
 2852 1376 31C0     		xorl	%eax, %eax
 2853 1378 E8000000 		call	__printf_chk
 2853      00
 2854 137d 4489EA   		movl	%r13d, %edx
 2855 1380 BE000000 		movl	$.LC121, %esi
 2855      00
 2856 1385 BF010000 		movl	$1, %edi
 2856      00
 2857 138a 31C0     		xorl	%eax, %eax
 2858 138c E8000000 		call	__printf_chk
 2858      00
 2859 1391 4489E2   		movl	%r12d, %edx
 2860 1394 BE000000 		movl	$.LC122, %esi
 2860      00
 2861 1399 BF010000 		movl	$1, %edi
 2861      00
 2862 139e 31C0     		xorl	%eax, %eax
 2863 13a0 E8000000 		call	__printf_chk
 2863      00
 2864 13a5 0FB6C3   		movzbl	%bl, %eax
 2865 13a8 BE000000 		movl	$.LC123, %esi
 2865      00
 2866 13ad BF010000 		movl	$1, %edi
 2866      00
 2867 13b2 89C2     		movl	%eax, %edx
 2868 13b4 89442408 		movl	%eax, 8(%rsp)
 2869 13b8 31C0     		xorl	%eax, %eax
 2870 13ba E8000000 		call	__printf_chk
 2870      00
 2871 13bf BF010000 		movl	$1, %edi
 2871      00
 2872 13c4 E8000000 		call	malloc
 2872      00
 2873 13c9 8B0D0000 		movl	numLines(%rip), %ecx
 2873      0000
 2874 13cf 4889C3   		movq	%rax, %rbx
 2875 13d2 BA000000 		movl	$dataFromCSV+20, %edx
 2875      00
 2876 13d7 B8010000 		movl	$1, %eax
 2876      00
 2877 13dc 448B4424 		movl	16(%rsp), %r8d
 2877      10
 2878 13e1 EB12     		jmp	.L300
 2879              	.L304:
 2880 13e3 66443B7A 		cmpw	-4(%rdx), %r15w
 2880      FC
 2881 13e8 0F84A300 		je	.L467
 2881      0000
 2882              	.L301:
 2883 13ee 83C001   		addl	$1, %eax
 2884 13f1 4883C210 		addq	$16, %rdx
 2885              	.L300:
 2886 13f5 39C8     		cmpl	%ecx, %eax
 2887 13f7 7EEA     		jle	.L304
 2888 13f9 BE000000 		movl	$.LC135, %esi
 2888      00
 2889 13fe BF010000 		movl	$1, %edi
 2889      00
 2890 1403 31C0     		xorl	%eax, %eax
 2891 1405 E8000000 		call	__printf_chk
 2891      00
 2892 140a BFE80300 		movl	$1000, %edi
 2892      00
 2893 140f C60304   		movb	$4, (%rbx)
 2894 1412 E8000000 		call	flSleep
 2894      00
 2895 1417 488BBC24 		movq	144(%rsp), %rdi
 2895      90000000 
 2896 141f 4C8D8424 		leaq	216(%rsp), %r8
 2896      D8000000 
 2897 1427 4889D9   		movq	%rbx, %rcx
 2898 142a BA010000 		movl	$1, %edx
 2898      00
 2899 142f BE090000 		movl	$9, %esi
 2899      00
 2900 1434 E8000000 		call	flWriteChannel
 2900      00
 2901 1439 85C0     		testl	%eax, %eax
 2902 143b 0F856DFD 		jne	.L444
 2902      FFFF
 2903 1441 BB0A0000 		movl	$10, %ebx
 2903      00
 2904              	.L364:
 2905 1446 BFE80300 		movl	$1000, %edi
 2905      00
 2906 144b C68424E0 		movb	$0, 224(%rsp)
 2906      00000000 
 2907 1453 E8000000 		call	flSleep
 2907      00
 2908 1458 488BBC24 		movq	144(%rsp), %rdi
 2908      90000000 
 2909 1460 4C8D8424 		leaq	216(%rsp), %r8
 2909      D8000000 
 2910 1468 488D8C24 		leaq	224(%rsp), %rcx
 2910      E0000000 
 2911 1470 BA010000 		movl	$1, %edx
 2911      00
 2912 1475 89DE     		movl	%ebx, %esi
 2913 1477 E8000000 		call	flWriteChannel
 2913      00
 2914 147c 85C0     		testl	%eax, %eax
 2915 147e 0F852AFD 		jne	.L444
 2915      FFFF
 2916 1484 83C301   		addl	$1, %ebx
 2917 1487 83FB12   		cmpl	$18, %ebx
 2918 148a 75BA     		jne	.L364
 2919              		.p2align 4,,3
 2920 148c E9CAFBFF 		jmp	.L359
 2920      FF
 2921              	.L467:
 2922 1491 66443B02 		cmpw	(%rdx), %r8w
 2923 1495 0F8553FF 		jne	.L301
 2923      FFFF
 2924 149b 4898     		cltq
 2925 149d BE000000 		movl	$.LC124, %esi
 2925      00
 2926 14a2 BF010000 		movl	$1, %edi
 2926      00
 2927 14a7 48894424 		movq	%rax, 16(%rsp)
 2927      10
 2928 14ac 48C1E004 		salq	$4, %rax
 2929 14b0 8B900000 		movl	dataFromCSV+12(%rax), %edx
 2929      0000
 2930 14b6 448BB800 		movl	dataFromCSV+8(%rax), %r15d
 2930      000000
 2931 14bd 31C0     		xorl	%eax, %eax
 2932 14bf 89542418 		movl	%edx, 24(%rsp)
 2933 14c3 E8000000 		call	__printf_chk
 2933      00
 2934 14c8 4183EF01 		subl	$1, %r15d
 2935 14cc 8B542418 		movl	24(%rsp), %edx
 2936 14d0 0F84EA00 		je	.L468
 2936      0000
 2937 14d6 446B7C24 		imull	$100, 8(%rsp), %r15d
 2937      0864
 2938 14dc 4169C4F4 		imull	$500, %r12d, %eax
 2938      010000
 2939 14e3 4101C7   		addl	%eax, %r15d
 2940 14e6 4169C5E8 		imull	$1000, %r13d, %eax
 2940      030000
 2941 14ed 4101C7   		addl	%eax, %r15d
 2942 14f0 4169C6D0 		imull	$2000, %r14d, %eax
 2942      070000
 2943 14f7 4101C7   		addl	%eax, %r15d
 2944 14fa 4439FA   		cmpl	%r15d, %edx
 2945 14fd 0F8D5101 		jge	.L469
 2945      0000
 2946 1503 BE000000 		movl	$.LC136, %esi
 2946      00
 2947 1508 BF010000 		movl	$1, %edi
 2947      00
 2948 150d 31C0     		xorl	%eax, %eax
 2949 150f E8000000 		call	__printf_chk
 2949      00
 2950 1514 4489FA   		movl	%r15d, %edx
 2951 1517 BE000000 		movl	$.LC137, %esi
 2951      00
 2952 151c BF010000 		movl	$1, %edi
 2952      00
 2953 1521 31C0     		xorl	%eax, %eax
 2954 1523 E8000000 		call	__printf_chk
 2954      00
 2955 1528 BE000000 		movl	$.LC139, %esi
 2955      00
 2956 152d BF010000 		movl	$1, %edi
 2956      00
 2957 1532 31C0     		xorl	%eax, %eax
 2958 1534 E8000000 		call	__printf_chk
 2958      00
 2959 1539 BFE80300 		movl	$1000, %edi
 2959      00
 2960 153e C60302   		movb	$2, (%rbx)
 2961 1541 E8000000 		call	flSleep
 2961      00
 2962 1546 488BBC24 		movq	144(%rsp), %rdi
 2962      90000000 
 2963 154e 4C8D8424 		leaq	216(%rsp), %r8
 2963      D8000000 
 2964 1556 4889D9   		movq	%rbx, %rcx
 2965 1559 BA010000 		movl	$1, %edx
 2965      00
 2966 155e BE090000 		movl	$9, %esi
 2966      00
 2967 1563 E8000000 		call	flWriteChannel
 2967      00
 2968 1568 85C0     		testl	%eax, %eax
 2969 156a 0F853EFC 		jne	.L444
 2969      FFFF
 2970 1570 BB0A0000 		movl	$10, %ebx
 2970      00
 2971              	.L366:
 2972 1575 BFE80300 		movl	$1000, %edi
 2972      00
 2973 157a C68424E0 		movb	$0, 224(%rsp)
 2973      00000000 
 2974 1582 E8000000 		call	flSleep
 2974      00
 2975 1587 488BBC24 		movq	144(%rsp), %rdi
 2975      90000000 
 2976 158f 4C8D8424 		leaq	216(%rsp), %r8
 2976      D8000000 
 2977 1597 488D8C24 		leaq	224(%rsp), %rcx
 2977      E0000000 
 2978 159f BA010000 		movl	$1, %edx
 2978      00
 2979 15a4 89DE     		movl	%ebx, %esi
 2980 15a6 E8000000 		call	flWriteChannel
 2980      00
 2981 15ab 85C0     		testl	%eax, %eax
 2982 15ad 0F85FBFB 		jne	.L444
 2982      FFFF
 2983 15b3 83C301   		addl	$1, %ebx
 2984 15b6 83FB12   		cmpl	$18, %ebx
 2985 15b9 75BA     		jne	.L366
 2986              		.p2align 4,,3
 2987 15bb E99BFAFF 		jmp	.L359
 2987      FF
 2988              	.L468:
 2989 15c0 BE000000 		movl	$.LC133, %esi
 2989      00
 2990 15c5 BF010000 		movl	$1, %edi
 2990      00
 2991 15ca 31C0     		xorl	%eax, %eax
 2992 15cc E8000000 		call	__printf_chk
 2992      00
 2993 15d1 BFE80300 		movl	$1000, %edi
 2993      00
 2994 15d6 C60303   		movb	$3, (%rbx)
 2995 15d9 E8000000 		call	flSleep
 2995      00
 2996 15de 488BBC24 		movq	144(%rsp), %rdi
 2996      90000000 
 2997 15e6 4C8D8424 		leaq	216(%rsp), %r8
 2997      D8000000 
 2998 15ee 4889D9   		movq	%rbx, %rcx
 2999 15f1 BA010000 		movl	$1, %edx
 2999      00
 3000 15f6 BE090000 		movl	$9, %esi
 3000      00
 3001 15fb E8000000 		call	flWriteChannel
 3001      00
 3002 1600 85C0     		testl	%eax, %eax
 3003 1602 0F85A6FB 		jne	.L444
 3003      FFFF
 3004 1608 C78424D4 		movl	$0, 212(%rsp)
 3004      00000000 
 3004      000000
 3005 1613 41C1E408 		sall	$8, %r12d
 3006 1617 41C1E510 		sall	$16, %r13d
 3007 161b BA080000 		movl	$8, %edx
 3007      00
 3008 1620 31C9     		xorl	%ecx, %ecx
 3009              	.L338:
 3010 1622 85C9     		testl	%ecx, %ecx
 3011 1624 0F844B02 		je	.L470
 3011      0000
 3012 162a 83F908   		cmpl	$8, %ecx
 3013 162d 0F843A02 		je	.L471
 3013      0000
 3014 1633 83F910   		cmpl	$16, %ecx
 3015 1636 0F842902 		je	.L472
 3015      0000
 3016 163c 4489F6   		movl	%r14d, %esi
 3017 163f D3E6     		sall	%cl, %esi
 3018 1641 01F0     		addl	%esi, %eax
 3019 1643 83FA20   		cmpl	$32, %edx
 3020 1646 0F84E600 		je	.L473
 3020      0000
 3021              	.L343:
 3022 164c 83C108   		addl	$8, %ecx
 3023 164f 83C208   		addl	$8, %edx
 3024 1652 EBCE     		jmp	.L338
 3025              	.L469:
 3026 1654 BE000000 		movl	$.LC136, %esi
 3026      00
 3027 1659 BF010000 		movl	$1, %edi
 3027      00
 3028 165e 31C0     		xorl	%eax, %eax
 3029 1660 E8000000 		call	__printf_chk
 3029      00
 3030 1665 4489FA   		movl	%r15d, %edx
 3031 1668 BE000000 		movl	$.LC137, %esi
 3031      00
 3032 166d BF010000 		movl	$1, %edi
 3032      00
 3033 1672 31C0     		xorl	%eax, %eax
 3034 1674 E8000000 		call	__printf_chk
 3034      00
 3035 1679 BE000000 		movl	$.LC138, %esi
 3035      00
 3036 167e BF010000 		movl	$1, %edi
 3036      00
 3037 1683 31C0     		xorl	%eax, %eax
 3038 1685 E8000000 		call	__printf_chk
 3038      00
 3039 168a BFE80300 		movl	$1000, %edi
 3039      00
 3040 168f C60301   		movb	$1, (%rbx)
 3041 1692 E8000000 		call	flSleep
 3041      00
 3042 1697 0FB60B   		movzbl	(%rbx), %ecx
 3043 169a BA090000 		movl	$9, %edx
 3043      00
 3044 169f BE000000 		movl	$.LC129, %esi
 3044      00
 3045 16a4 BF010000 		movl	$1, %edi
 3045      00
 3046 16a9 31C0     		xorl	%eax, %eax
 3047 16ab E8000000 		call	__printf_chk
 3047      00
 3048 16b0 488BBC24 		movq	144(%rsp), %rdi
 3048      90000000 
 3049 16b8 4C8D8424 		leaq	216(%rsp), %r8
 3049      D8000000 
 3050 16c0 4889D9   		movq	%rbx, %rcx
 3051 16c3 BA010000 		movl	$1, %edx
 3051      00
 3052 16c8 BE090000 		movl	$9, %esi
 3052      00
 3053 16cd E8000000 		call	flWriteChannel
 3053      00
 3054 16d2 85C0     		testl	%eax, %eax
 3055 16d4 0F85D4FA 		jne	.L444
 3055      FFFF
 3056 16da BFE80300 		movl	$1000, %edi
 3056      00
 3057 16df 41C1E408 		sall	$8, %r12d
 3058 16e3 41C1E510 		sall	$16, %r13d
 3059 16e7 E8000000 		call	flSleep
 3059      00
 3060 16ec C78424D4 		movl	$0, 212(%rsp)
 3060      00000000 
 3060      000000
 3061 16f7 31C0     		xorl	%eax, %eax
 3062 16f9 BA080000 		movl	$8, %edx
 3062      00
 3063 16fe 31C9     		xorl	%ecx, %ecx
 3064              	.L308:
 3065 1700 85C9     		testl	%ecx, %ecx
 3066 1702 0F846404 		je	.L474
 3066      0000
 3067 1708 83F908   		cmpl	$8, %ecx
 3068 170b 0F845304 		je	.L475
 3068      0000
 3069 1711 83F910   		cmpl	$16, %ecx
 3070 1714 0F844204 		je	.L476
 3070      0000
 3071 171a 4489F6   		movl	%r14d, %esi
 3072 171d D3E6     		sall	%cl, %esi
 3073 171f 01F0     		addl	%esi, %eax
 3074 1721 83FA20   		cmpl	$32, %edx
 3075 1724 0F845401 		je	.L477
 3075      0000
 3076              	.L313:
 3077 172a 83C108   		addl	$8, %ecx
 3078 172d 83C208   		addl	$8, %edx
 3079 1730 EBCE     		jmp	.L308
 3080              	.L473:
 3081 1732 660F6F0D 		movdqa	.LC116(%rip), %xmm1
 3081      00000000 
 3082 173a 488DB424 		leaq	224(%rsp), %rsi
 3082      E0000000 
 3083 1742 488DBC24 		leaq	208(%rsp), %rdi
 3083      D0000000 
 3084 174a BB0A0000 		movl	$10, %ebx
 3084      00
 3085 174f BD010000 		movl	$1, %ebp
 3085      00
 3086 1754 898424D0 		movl	%eax, 208(%rsp)
 3086      000000
 3087 175b 660F7F8C 		movdqa	%xmm1, 224(%rsp)
 3087      24E00000 
 3087      00
 3088 1764 E8000000 		call	encrypt
 3088      00
 3089              	.L349:
 3090 1769 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 3090      FFFFFF
 3091 1770 31C0     		xorl	%eax, %eax
 3092 1772 31D2     		xorl	%edx, %edx
 3093 1774 8BB424D0 		movl	208(%rsp), %esi
 3093      000000
 3094              	.L346:
 3095 177b 8D0C07   		leal	(%rdi,%rax), %ecx
 3096 177e 4189EA   		movl	%ebp, %r10d
 3097 1781 41D3E2   		sall	%cl, %r10d
 3098 1784 4185F2   		testl	%esi, %r10d
 3099 1787 740B     		je	.L344
 3100 1789 4189EB   		movl	%ebp, %r11d
 3101 178c 89C1     		movl	%eax, %ecx
 3102 178e 41D3E3   		sall	%cl, %r11d
 3103 1791 4401DA   		addl	%r11d, %edx
 3104              	.L344:
 3105 1794 83C001   		addl	$1, %eax
 3106 1797 83F808   		cmpl	$8, %eax
 3107 179a 75DF     		jne	.L346
 3108 179c BFE80300 		movl	$1000, %edi
 3108      00
 3109 17a1 889424E0 		movb	%dl, 224(%rsp)
 3109      000000
 3110 17a8 E8000000 		call	flSleep
 3110      00
 3111 17ad 488BBC24 		movq	144(%rsp), %rdi
 3111      90000000 
 3112 17b5 4C8D8424 		leaq	216(%rsp), %r8
 3112      D8000000 
 3113 17bd 488D8C24 		leaq	224(%rsp), %rcx
 3113      E0000000 
 3114 17c5 BA010000 		movl	$1, %edx
 3114      00
 3115 17ca 89DE     		movl	%ebx, %esi
 3116 17cc E8000000 		call	flWriteChannel
 3116      00
 3117 17d1 85C0     		testl	%eax, %eax
 3118 17d3 0F85D5F9 		jne	.L444
 3118      FFFF
 3119 17d9 83C301   		addl	$1, %ebx
 3120 17dc 83FB0E   		cmpl	$14, %ebx
 3121 17df 7588     		jne	.L349
 3122 17e1 BD010000 		movl	$1, %ebp
 3122      00
 3123              	.L355:
 3124 17e6 8BB424D4 		movl	212(%rsp), %esi
 3124      000000
 3125 17ed 8D3CDD90 		leal	-112(,%rbx,8), %edi
 3125      FFFFFF
 3126 17f4 31C0     		xorl	%eax, %eax
 3127 17f6 31D2     		xorl	%edx, %edx
 3128              	.L352:
 3129 17f8 8D0C07   		leal	(%rdi,%rax), %ecx
 3130 17fb 4189E9   		movl	%ebp, %r9d
 3131 17fe 41D3E1   		sall	%cl, %r9d
 3132 1801 4185F1   		testl	%esi, %r9d
 3133 1804 740B     		je	.L350
 3134 1806 4189EA   		movl	%ebp, %r10d
 3135 1809 89C1     		movl	%eax, %ecx
 3136 180b 41D3E2   		sall	%cl, %r10d
 3137 180e 4401D2   		addl	%r10d, %edx
 3138              	.L350:
 3139 1811 83C001   		addl	$1, %eax
 3140 1814 83F808   		cmpl	$8, %eax
 3141 1817 75DF     		jne	.L352
 3142 1819 BFE80300 		movl	$1000, %edi
 3142      00
 3143 181e 889424E0 		movb	%dl, 224(%rsp)
 3143      000000
 3144 1825 E8000000 		call	flSleep
 3144      00
 3145 182a 488BBC24 		movq	144(%rsp), %rdi
 3145      90000000 
 3146 1832 4C8D8424 		leaq	216(%rsp), %r8
 3146      D8000000 
 3147 183a 488D8C24 		leaq	224(%rsp), %rcx
 3147      E0000000 
 3148 1842 BA010000 		movl	$1, %edx
 3148      00
 3149 1847 89DE     		movl	%ebx, %esi
 3150 1849 E8000000 		call	flWriteChannel
 3150      00
 3151 184e 85C0     		testl	%eax, %eax
 3152 1850 0F8558F9 		jne	.L444
 3152      FFFF
 3153 1856 83C301   		addl	$1, %ebx
 3154 1859 83FB12   		cmpl	$18, %ebx
 3155 185c 7588     		jne	.L355
 3156 185e 6690     		.p2align 4,,3
 3157 1860 E9F6F7FF 		jmp	.L359
 3157      FF
 3158              	.L472:
 3159 1865 4401E8   		addl	%r13d, %eax
 3160              		.p2align 4,,2
 3161 1868 E9DFFDFF 		jmp	.L343
 3161      FF
 3162              	.L471:
 3163 186d 4401E0   		addl	%r12d, %eax
 3164              		.p2align 4,,5
 3165 1870 E9D7FDFF 		jmp	.L343
 3165      FF
 3166              	.L470:
 3167 1875 03442408 		addl	8(%rsp), %eax
 3168 1879 E9CEFDFF 		jmp	.L343
 3168      FF
 3169              	.L477:
 3170 187e 898424D0 		movl	%eax, 208(%rsp)
 3170      000000
 3171 1885 30D2     		xorb	%dl, %dl
 3172 1887 BE000000 		movl	$.LC125, %esi
 3172      00
 3173 188c BF010000 		movl	$1, %edi
 3173      00
 3174 1891 31C0     		xorl	%eax, %eax
 3175 1893 BB0A0000 		movl	$10, %ebx
 3175      00
 3176 1898 E8000000 		call	__printf_chk
 3176      00
 3177 189d 8B9424D0 		movl	208(%rsp), %edx
 3177      000000
 3178 18a4 BE000000 		movl	$.LC126, %esi
 3178      00
 3179 18a9 BF010000 		movl	$1, %edi
 3179      00
 3180 18ae 31C0     		xorl	%eax, %eax
 3181 18b0 41BC0100 		movl	$1, %r12d
 3181      0000
 3182 18b6 E8000000 		call	__printf_chk
 3182      00
 3183 18bb 488DB424 		leaq	224(%rsp), %rsi
 3183      E0000000 
 3184 18c3 488DBC24 		leaq	208(%rsp), %rdi
 3184      D0000000 
 3185 18cb C78424E0 		movl	$690471308, 224(%rsp)
 3185      0000008C 
 3185      C12729
 3186 18d6 C78424E4 		movl	$1979237519, 228(%rsp)
 3186      0000008F 
 3186      C4F875
 3187 18e1 C78424E8 		movl	$1140693495, 232(%rsp)
 3187      000000F7 
 3187      99FD43
 3188 18ec C78424EC 		movl	$-15764393, 236(%rsp)
 3188      00000057 
 3188      740FFF
 3189 18f7 E8000000 		call	encrypt
 3189      00
 3190 18fc 8B9424D4 		movl	212(%rsp), %edx
 3190      000000
 3191 1903 BE000000 		movl	$.LC127, %esi
 3191      00
 3192 1908 BF010000 		movl	$1, %edi
 3192      00
 3193 190d 31C0     		xorl	%eax, %eax
 3194 190f E8000000 		call	__printf_chk
 3194      00
 3195 1914 8B9424D0 		movl	208(%rsp), %edx
 3195      000000
 3196 191b BE000000 		movl	$.LC128, %esi
 3196      00
 3197 1920 BF010000 		movl	$1, %edi
 3197      00
 3198 1925 31C0     		xorl	%eax, %eax
 3199 1927 E8000000 		call	__printf_chk
 3199      00
 3200              	.L320:
 3201 192c 8BB424D0 		movl	208(%rsp), %esi
 3201      000000
 3202 1933 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 3202      FFFFFF
 3203 193a 31C0     		xorl	%eax, %eax
 3204 193c 31D2     		xorl	%edx, %edx
 3205              	.L316:
 3206 193e 8D0C07   		leal	(%rdi,%rax), %ecx
 3207 1941 4589E1   		movl	%r12d, %r9d
 3208 1944 41D3E1   		sall	%cl, %r9d
 3209 1947 4185F1   		testl	%esi, %r9d
 3210 194a 740B     		je	.L314
 3211 194c 4589E2   		movl	%r12d, %r10d
 3212 194f 89C1     		movl	%eax, %ecx
 3213 1951 41D3E2   		sall	%cl, %r10d
 3214 1954 4401D2   		addl	%r10d, %edx
 3215              	.L314:
 3216 1957 83C001   		addl	$1, %eax
 3217 195a 83F808   		cmpl	$8, %eax
 3218 195d 75DF     		jne	.L316
 3219 195f BFE80300 		movl	$1000, %edi
 3219      00
 3220 1964 889424E0 		movb	%dl, 224(%rsp)
 3220      000000
 3221 196b E8000000 		call	flSleep
 3221      00
 3222 1970 488BBC24 		movq	144(%rsp), %rdi
 3222      90000000 
 3223 1978 4C8D8424 		leaq	216(%rsp), %r8
 3223      D8000000 
 3224 1980 488D8C24 		leaq	224(%rsp), %rcx
 3224      E0000000 
 3225 1988 BA010000 		movl	$1, %edx
 3225      00
 3226 198d 89DE     		movl	%ebx, %esi
 3227 198f E8000000 		call	flWriteChannel
 3227      00
 3228 1994 0FB68C24 		movzbl	224(%rsp), %ecx
 3228      E0000000 
 3229 199c 4189C5   		movl	%eax, %r13d
 3230 199f 89DA     		movl	%ebx, %edx
 3231 19a1 31C0     		xorl	%eax, %eax
 3232 19a3 BE000000 		movl	$.LC129, %esi
 3232      00
 3233 19a8 BF010000 		movl	$1, %edi
 3233      00
 3234 19ad E8000000 		call	__printf_chk
 3234      00
 3235 19b2 4585ED   		testl	%r13d, %r13d
 3236 19b5 0F85F3F7 		jne	.L444
 3236      FFFF
 3237 19bb 83C301   		addl	$1, %ebx
 3238 19be 83FB0E   		cmpl	$14, %ebx
 3239 19c1 0F8565FF 		jne	.L320
 3239      FFFF
 3240 19c7 41BC0100 		movl	$1, %r12d
 3240      0000
 3241              	.L326:
 3242 19cd 8BB424D4 		movl	212(%rsp), %esi
 3242      000000
 3243 19d4 8D3CDD90 		leal	-112(,%rbx,8), %edi
 3243      FFFFFF
 3244 19db 31C0     		xorl	%eax, %eax
 3245 19dd 31D2     		xorl	%edx, %edx
 3246              	.L323:
 3247 19df 8D0C07   		leal	(%rdi,%rax), %ecx
 3248 19e2 4589E3   		movl	%r12d, %r11d
 3249 19e5 41D3E3   		sall	%cl, %r11d
 3250 19e8 4185F3   		testl	%esi, %r11d
 3251 19eb 740B     		je	.L321
 3252 19ed 4589E1   		movl	%r12d, %r9d
 3253 19f0 89C1     		movl	%eax, %ecx
 3254 19f2 41D3E1   		sall	%cl, %r9d
 3255 19f5 4401CA   		addl	%r9d, %edx
 3256              	.L321:
 3257 19f8 83C001   		addl	$1, %eax
 3258 19fb 83F808   		cmpl	$8, %eax
 3259 19fe 75DF     		jne	.L323
 3260 1a00 BFE80300 		movl	$1000, %edi
 3260      00
 3261 1a05 889424E0 		movb	%dl, 224(%rsp)
 3261      000000
 3262 1a0c E8000000 		call	flSleep
 3262      00
 3263 1a11 488BBC24 		movq	144(%rsp), %rdi
 3263      90000000 
 3264 1a19 4C8D8424 		leaq	216(%rsp), %r8
 3264      D8000000 
 3265 1a21 488D8C24 		leaq	224(%rsp), %rcx
 3265      E0000000 
 3266 1a29 BA010000 		movl	$1, %edx
 3266      00
 3267 1a2e 89DE     		movl	%ebx, %esi
 3268 1a30 E8000000 		call	flWriteChannel
 3268      00
 3269 1a35 0FB68C24 		movzbl	224(%rsp), %ecx
 3269      E0000000 
 3270 1a3d 4189C5   		movl	%eax, %r13d
 3271 1a40 89DA     		movl	%ebx, %edx
 3272 1a42 31C0     		xorl	%eax, %eax
 3273 1a44 BE000000 		movl	$.LC129, %esi
 3273      00
 3274 1a49 BF010000 		movl	$1, %edi
 3274      00
 3275 1a4e E8000000 		call	__printf_chk
 3275      00
 3276 1a53 4585ED   		testl	%r13d, %r13d
 3277 1a56 0F8552F7 		jne	.L444
 3277      FFFF
 3278 1a5c 83C301   		addl	$1, %ebx
 3279 1a5f 83FB12   		cmpl	$18, %ebx
 3280 1a62 0F8565FF 		jne	.L326
 3280      FFFF
 3281 1a68 807D0001 		cmpb	$1, 0(%rbp)
 3282 1a6c 0F85E9F5 		jne	.L359
 3282      FFFF
 3283 1a72 488B4424 		movq	16(%rsp), %rax
 3283      10
 3284 1a77 488DBC24 		leaq	448(%rsp), %rdi
 3284      C0010000 
 3285 1a7f BE000000 		movl	$.LC130, %esi
 3285      00
 3286 1a84 41BC1000 		movl	$16, %r12d
 3286      0000
 3287 1a8a BD010000 		movl	$1, %ebp
 3287      00
 3288 1a8f 48C1E004 		salq	$4, %rax
 3289 1a93 4429B800 		subl	%r15d, dataFromCSV+12(%rax)
 3289      000000
 3290 1a9a E8000000 		call	fopen
 3290      00
 3291 1a9f B9000000 		movl	$.LC131, %ecx
 3291      00
 3292 1aa4 4889C7   		movq	%rax, %rdi
 3293 1aa7 4889C3   		movq	%rax, %rbx
 3294 1aaa BA000000 		movl	$.LC132, %edx
 3294      00
 3295 1aaf BE010000 		movl	$1, %esi
 3295      00
 3296 1ab4 31C0     		xorl	%eax, %eax
 3297 1ab6 E8000000 		call	__fprintf_chk
 3297      00
 3298 1abb BA000000 		movl	$.LC73, %edx
 3298      00
 3299 1ac0 BE010000 		movl	$1, %esi
 3299      00
 3300 1ac5 4889DF   		movq	%rbx, %rdi
 3301 1ac8 31C0     		xorl	%eax, %eax
 3302 1aca E8000000 		call	__fprintf_chk
 3302      00
 3303              	.L328:
 3304 1acf 3B2D0000 		cmpl	numLines(%rip), %ebp
 3304      0000
 3305 1ad5 0F8F9A00 		jg	.L478
 3305      0000
 3306 1adb 418B8C24 		movl	dataFromCSV(%r12), %ecx
 3306      00000000 
 3307 1ae3 BA000000 		movl	$.LC12, %edx
 3307      00
 3308 1ae8 BE010000 		movl	$1, %esi
 3308      00
 3309 1aed 4889DF   		movq	%rbx, %rdi
 3310 1af0 31C0     		xorl	%eax, %eax
 3311 1af2 4531ED   		xorl	%r13d, %r13d
 3312 1af5 E8000000 		call	__fprintf_chk
 3312      00
 3313              	.L368:
 3314 1afa BA000000 		movl	$.LC11, %edx
 3314      00
 3315 1aff BE010000 		movl	$1, %esi
 3315      00
 3316 1b04 4889DF   		movq	%rbx, %rdi
 3317 1b07 31C0     		xorl	%eax, %eax
 3318 1b09 E8000000 		call	__fprintf_chk
 3318      00
 3319 1b0e 438B8C2C 		movl	dataFromCSV+4(%r12,%r13), %ecx
 3319      00000000 
 3320 1b16 31C0     		xorl	%eax, %eax
 3321 1b18 BA000000 		movl	$.LC12, %edx
 3321      00
 3322 1b1d BE010000 		movl	$1, %esi
 3322      00
 3323 1b22 4889DF   		movq	%rbx, %rdi
 3324 1b25 4983C504 		addq	$4, %r13
 3325 1b29 E8000000 		call	__fprintf_chk
 3325      00
 3326 1b2e 4983FD0C 		cmpq	$12, %r13
 3327 1b32 75C6     		jne	.L368
 3328 1b34 3B2D0000 		cmpl	numLines(%rip), %ebp
 3328      0000
 3329 1b3a 7414     		je	.L367
 3330 1b3c BA000000 		movl	$.LC73, %edx
 3330      00
 3331 1b41 BE010000 		movl	$1, %esi
 3331      00
 3332 1b46 4889DF   		movq	%rbx, %rdi
 3333 1b49 31C0     		xorl	%eax, %eax
 3334 1b4b E8000000 		call	__fprintf_chk
 3334      00
 3335              	.L367:
 3336 1b50 83C501   		addl	$1, %ebp
 3337 1b53 4983C410 		addq	$16, %r12
 3338 1b57 E973FFFF 		jmp	.L328
 3338      FF
 3339              	.L476:
 3340 1b5c 4401E8   		addl	%r13d, %eax
 3341 1b5f E9C6FBFF 		jmp	.L313
 3341      FF
 3342              	.L475:
 3343 1b64 4401E0   		addl	%r12d, %eax
 3344 1b67 E9BEFBFF 		jmp	.L313
 3344      FF
 3345              	.L474:
 3346 1b6c 03442408 		addl	8(%rsp), %eax
 3347 1b70 E9B5FBFF 		jmp	.L313
 3347      FF
 3348              	.L478:
 3349 1b75 4889DF   		movq	%rbx, %rdi
 3350 1b78 E8000000 		call	fclose
 3350      00
 3351 1b7d E9D9F4FF 		jmp	.L359
 3351      FF
 3352              		.cfi_endproc
 3353              	.LFE90:
 3355              		.section	.rodata.str1.1
 3356              	.LC140:
 3357 03c6 30303030 		.string	"0000"
 3357      00
 3358              	.LC141:
 3359 03cb 30303031 		.string	"0001"
 3359      00
 3360              	.LC142:
 3361 03d0 30303130 		.string	"0010"
 3361      00
 3362              	.LC143:
 3363 03d5 30303131 		.string	"0011"
 3363      00
 3364              	.LC144:
 3365 03da 30313030 		.string	"0100"
 3365      00
 3366              	.LC145:
 3367 03df 30313031 		.string	"0101"
 3367      00
 3368              	.LC146:
 3369 03e4 30313130 		.string	"0110"
 3369      00
 3370              	.LC147:
 3371 03e9 30313131 		.string	"0111"
 3371      00
 3372              	.LC148:
 3373 03ee 31303030 		.string	"1000"
 3373      00
 3374              	.LC149:
 3375 03f3 31303031 		.string	"1001"
 3375      00
 3376              	.LC150:
 3377 03f8 58585858 		.string	"XXXX"
 3377      00
 3378              	.LC151:
 3379 03fd 31303130 		.string	"1010"
 3379      00
 3380              	.LC152:
 3381 0402 31303131 		.string	"1011"
 3381      00
 3382              	.LC153:
 3383 0407 31313030 		.string	"1100"
 3383      00
 3384              	.LC154:
 3385 040c 31313031 		.string	"1101"
 3385      00
 3386              	.LC155:
 3387 0411 31313130 		.string	"1110"
 3387      00
 3388              	.LC156:
 3389 0416 31313131 		.string	"1111"
 3389      00
 3390              		.section	.rodata
 3391              		.align 32
 3394              	nibbles:
 3395 0000 00000000 		.quad	.LC140
 3395      00000000 
 3396 0008 00000000 		.quad	.LC141
 3396      00000000 
 3397 0010 00000000 		.quad	.LC142
 3397      00000000 
 3398 0018 00000000 		.quad	.LC143
 3398      00000000 
 3399 0020 00000000 		.quad	.LC144
 3399      00000000 
 3400 0028 00000000 		.quad	.LC145
 3400      00000000 
 3401 0030 00000000 		.quad	.LC146
 3401      00000000 
 3402 0038 00000000 		.quad	.LC147
 3402      00000000 
 3403 0040 00000000 		.quad	.LC148
 3403      00000000 
 3404 0048 00000000 		.quad	.LC149
 3404      00000000 
 3405 0050 00000000 		.quad	.LC150
 3405      00000000 
 3406 0058 00000000 		.quad	.LC150
 3406      00000000 
 3407 0060 00000000 		.quad	.LC150
 3407      00000000 
 3408 0068 00000000 		.quad	.LC150
 3408      00000000 
 3409 0070 00000000 		.quad	.LC150
 3409      00000000 
 3410 0078 00000000 		.quad	.LC150
 3410      00000000 
 3411 0080 00000000 		.quad	.LC150
 3411      00000000 
 3412 0088 00000000 		.quad	.LC151
 3412      00000000 
 3413 0090 00000000 		.quad	.LC152
 3413      00000000 
 3414 0098 00000000 		.quad	.LC153
 3414      00000000 
 3415 00a0 00000000 		.quad	.LC154
 3415      00000000 
 3416 00a8 00000000 		.quad	.LC155
 3416      00000000 
 3417 00b0 00000000 		.quad	.LC156
 3417      00000000 
 3418              		.section	.rodata.str1.1
 3419              	.LC157:
 3420 041b 556E7061 		.string	"Unparseable hex number"
 3420      72736561 
 3420      626C6520 
 3420      68657820 
 3420      6E756D62 
 3421              	.LC158:
 3422 0432 4368616E 		.string	"Channel out of range"
 3422      6E656C20 
 3422      6F757420 
 3422      6F662072 
 3422      616E6765 
 3423              	.LC159:
 3424 0447 436F6E64 		.string	"Conduit out of range"
 3424      75697420 
 3424      6F757420 
 3424      6F662072 
 3424      616E6765 
 3425              	.LC160:
 3426 045c 496C6C65 		.string	"Illegal character"
 3426      67616C20 
 3426      63686172 
 3426      61637465 
 3426      7200
 3427              	.LC161:
 3428 046e 556E7465 		.string	"Unterminated string"
 3428      726D696E 
 3428      61746564 
 3428      20737472 
 3428      696E6700 
 3429              	.LC162:
 3430 0482 4E6F206D 		.string	"No memory"
 3430      656D6F72 
 3430      7900
 3431              	.LC163:
 3432 048c 456D7074 		.string	"Empty string"
 3432      79207374 
 3432      72696E67 
 3432      00
 3433              	.LC164:
 3434 0499 4F646420 		.string	"Odd number of digits"
 3434      6E756D62 
 3434      6572206F 
 3434      66206469 
 3434      67697473 
 3435              	.LC165:
 3436 04ae 43616E6E 		.string	"Cannot load file"
 3436      6F74206C 
 3436      6F616420 
 3436      66696C65 
 3436      00
 3437              	.LC166:
 3438 04bf 43616E6E 		.string	"Cannot save file"
 3438      6F742073 
 3438      61766520 
 3438      66696C65 
 3438      00
 3439              	.LC167:
 3440 04d0 42616420 		.string	"Bad arguments"
 3440      61726775 
 3440      6D656E74 
 3440      7300
 3441              		.section	.rodata
 3442 00b8 00000000 		.align 32
 3442      00000000 
 3445              	errMessages:
 3446 00c0 00000000 		.quad	0
 3446      00000000 
 3447 00c8 00000000 		.quad	0
 3447      00000000 
 3448 00d0 00000000 		.quad	.LC157
 3448      00000000 
 3449 00d8 00000000 		.quad	.LC158
 3449      00000000 
 3450 00e0 00000000 		.quad	.LC159
 3450      00000000 
 3451 00e8 00000000 		.quad	.LC160
 3451      00000000 
 3452 00f0 00000000 		.quad	.LC161
 3452      00000000 
 3453 00f8 00000000 		.quad	.LC162
 3453      00000000 
 3454 0100 00000000 		.quad	.LC163
 3454      00000000 
 3455 0108 00000000 		.quad	.LC164
 3455      00000000 
 3456 0110 00000000 		.quad	.LC165
 3456      00000000 
 3457 0118 00000000 		.quad	.LC166
 3457      00000000 
 3458 0120 00000000 		.quad	.LC167
 3458      00000000 
 3459              		.local	enableBenchmarking
 3460              		.comm	enableBenchmarking,1,16
 3461              		.local	ptr
 3462              		.comm	ptr,8,16
 3463              		.globl	numLines
 3464              		.bss
 3465              		.align 16
 3468              	numLines:
 3469 0000 00000000 		.zero	4
 3470              		.comm	dataFromCSV,1600080,32
 3471              		.section	.rodata.cst8,"aM",@progbits,8
 3472              		.align 8
 3473              	.LC3:
 3474 0000 00000000 		.long	0
 3475 0004 80842E41 		.long	1093567616
 3476              		.align 8
 3477              	.LC4:
 3478 0008 00000000 		.long	0
 3479 000c 00003041 		.long	1093664768
 3480              		.section	.rodata.cst16,"aM",@progbits,16
 3481              		.align 16
 3482              	.LC116:
 3483 0000 8CC12729 		.long	690471308
 3484 0004 8FC4F875 		.long	1979237519
 3485 0008 F799FD43 		.long	1140693495
 3486 000c 57740FFF 		.long	-15764393
 3487              		.ident	"GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4"
 3488              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccQMSHCj.s:7      .text.unlikely:0000000000000000 doWrite
     /tmp/ccQMSHCj.s:140    .text.unlikely:0000000000000109 parseLine
     /tmp/ccQMSHCj.s:3462   .bss:0000000000000020 ptr
     /tmp/ccQMSHCj.s:3460   .bss:0000000000000010 enableBenchmarking
     /tmp/ccQMSHCj.s:3445   .rodata:00000000000000c0 errMessages
     /tmp/ccQMSHCj.s:968    .text:0000000000000000 decrypt
     /tmp/ccQMSHCj.s:1017   .text:0000000000000070 encrypt
     /tmp/ccQMSHCj.s:1067   .text:00000000000000e0 decrypt64
     /tmp/ccQMSHCj.s:1107   .text:0000000000000150 encrypt64
     /tmp/ccQMSHCj.s:1148   .text:00000000000001c0 myHash
     /tmp/ccQMSHCj.s:1214   .text:0000000000000270 format
     /tmp/ccQMSHCj.s:3468   .bss:0000000000000000 numLines
                            *COM*:0000000000186a50 dataFromCSV
     /tmp/ccQMSHCj.s:1252   .text:00000000000002d0 find
     /tmp/ccQMSHCj.s:1299   .text:0000000000000340 suffBal
     /tmp/ccQMSHCj.s:1670   .text.startup:0000000000000000 main
     /tmp/ccQMSHCj.s:3394   .rodata:0000000000000000 nibbles
     /tmp/ccQMSHCj.s:3473   .rodata.cst8:0000000000000000 .LC3
     /tmp/ccQMSHCj.s:3477   .rodata.cst8:0000000000000008 .LC4
     /tmp/ccQMSHCj.s:3482   .rodata.cst16:0000000000000000 .LC116

UNDEFINED SYMBOLS
fread
flWriteChannelAsync
errPrefix
flAwaitAsyncWrites
__stack_chk_fail
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
flReadChannelAsyncSubmit
flReadChannelAsyncAwait
fwrite
__printf_chk
fclose
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
__fprintf_chk
bufAppendConst
flReadChannel
strtok
sscanf
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
flClose
flFreeError
arg_parse
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flSleep
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
flFlashStandardFirmware
flIsNeroCapable
flIsCommCapable
jtagScanChain
flLoadStandardFirmware
flFlashCustomFirmware
flResetToggle
flMultiBitPortAccess
__sprintf_chk
flSaveFirmware
flProgram
flIsFPGARunning
readline
add_history
sigRegisterHandler
sigIsRaised
__getdelim
