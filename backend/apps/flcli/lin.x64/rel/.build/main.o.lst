   1              		.file	"main.c"
   2              		.text
   3              		.p2align 4,,15
   4              		.globl	decrypt
   6              	decrypt:
   7              	.LFB75:
   8              		.cfi_startproc
   9 0000 53       		pushq	%rbx
  10              		.cfi_def_cfa_offset 16
  11              		.cfi_offset 3, -16
  12 0001 8B0F     		movl	(%rdi), %ecx
  13 0003 8B5704   		movl	4(%rdi), %edx
  14 0006 8B1E     		movl	(%rsi), %ebx
  15 0008 448B5E04 		movl	4(%rsi), %r11d
  16 000c 448B5608 		movl	8(%rsi), %r10d
  17 0010 448B4E0C 		movl	12(%rsi), %r9d
  18 0014 BE2037EF 		movl	$-957401312, %esi
  18      C6
  19 0019 0F1F8000 		.p2align 4,,10
  19      000000
  20              		.p2align 3
  21              	.L3:
  22 0020 89C8     		movl	%ecx, %eax
  23 0022 4189C8   		movl	%ecx, %r8d
  24 0025 C1E004   		sall	$4, %eax
  25 0028 41C1E805 		shrl	$5, %r8d
  26 002c 4501C8   		addl	%r9d, %r8d
  27 002f 4401D0   		addl	%r10d, %eax
  28 0032 4431C0   		xorl	%r8d, %eax
  29 0035 448D040E 		leal	(%rsi,%rcx), %r8d
  30 0039 4431C0   		xorl	%r8d, %eax
  31 003c 29C2     		subl	%eax, %edx
  32 003e 89D0     		movl	%edx, %eax
  33 0040 4189D0   		movl	%edx, %r8d
  34 0043 C1E004   		sall	$4, %eax
  35 0046 41C1E805 		shrl	$5, %r8d
  36 004a 4501D8   		addl	%r11d, %r8d
  37 004d 01D8     		addl	%ebx, %eax
  38 004f 4431C0   		xorl	%r8d, %eax
  39 0052 448D0432 		leal	(%rdx,%rsi), %r8d
  40 0056 4431C0   		xorl	%r8d, %eax
  41 0059 29C1     		subl	%eax, %ecx
  42 005b 81C64786 		addl	$1640531527, %esi
  42      C861
  43 0061 75BD     		jne	.L3
  44 0063 895704   		movl	%edx, 4(%rdi)
  45 0066 890F     		movl	%ecx, (%rdi)
  46 0068 5B       		popq	%rbx
  47              		.cfi_def_cfa_offset 8
  48 0069 C3       		ret
  49              		.cfi_endproc
  50              	.LFE75:
  52 006a 660F1F44 		.p2align 4,,15
  52      0000
  53              		.globl	encrypt
  55              	encrypt:
  56              	.LFB76:
  57              		.cfi_startproc
  58 0070 53       		pushq	%rbx
  59              		.cfi_def_cfa_offset 16
  60              		.cfi_offset 3, -16
  61 0071 8B0F     		movl	(%rdi), %ecx
  62 0073 8B5704   		movl	4(%rdi), %edx
  63 0076 8B1E     		movl	(%rsi), %ebx
  64 0078 448B5E04 		movl	4(%rsi), %r11d
  65 007c 448B5608 		movl	8(%rsi), %r10d
  66 0080 448B4E0C 		movl	12(%rsi), %r9d
  67 0084 31F6     		xorl	%esi, %esi
  68 0086 662E0F1F 		.p2align 4,,10
  68      84000000 
  68      0000
  69              		.p2align 3
  70              	.L8:
  71 0090 89D0     		movl	%edx, %eax
  72 0092 4189D0   		movl	%edx, %r8d
  73 0095 81EE4786 		subl	$1640531527, %esi
  73      C861
  74 009b C1E004   		sall	$4, %eax
  75 009e 41C1E805 		shrl	$5, %r8d
  76 00a2 4501D8   		addl	%r11d, %r8d
  77 00a5 01D8     		addl	%ebx, %eax
  78 00a7 4431C0   		xorl	%r8d, %eax
  79 00aa 448D0432 		leal	(%rdx,%rsi), %r8d
  80 00ae 4431C0   		xorl	%r8d, %eax
  81 00b1 01C1     		addl	%eax, %ecx
  82 00b3 89C8     		movl	%ecx, %eax
  83 00b5 4189C8   		movl	%ecx, %r8d
  84 00b8 C1E004   		sall	$4, %eax
  85 00bb 41C1E805 		shrl	$5, %r8d
  86 00bf 4501C8   		addl	%r9d, %r8d
  87 00c2 4401D0   		addl	%r10d, %eax
  88 00c5 4431C0   		xorl	%r8d, %eax
  89 00c8 448D0431 		leal	(%rcx,%rsi), %r8d
  90 00cc 4431C0   		xorl	%r8d, %eax
  91 00cf 01C2     		addl	%eax, %edx
  92 00d1 81FE2037 		cmpl	$-957401312, %esi
  92      EFC6
  93 00d7 75B7     		jne	.L8
  94 00d9 895704   		movl	%edx, 4(%rdi)
  95 00dc 890F     		movl	%ecx, (%rdi)
  96 00de 5B       		popq	%rbx
  97              		.cfi_def_cfa_offset 8
  98 00df C3       		ret
  99              		.cfi_endproc
 100              	.LFE76:
 102              		.p2align 4,,15
 103              		.globl	decrypt64
 105              	decrypt64:
 106              	.LFB77:
 107              		.cfi_startproc
 108 00e0 8B0F     		movl	(%rdi), %ecx
 109 00e2 8B5704   		movl	4(%rdi), %edx
 110 00e5 BE2037EF 		movl	$-957401312, %esi
 110      C6
 111 00ea 660F1F44 		.p2align 4,,10
 111      0000
 112              		.p2align 3
 113              	.L12:
 114 00f0 89C8     		movl	%ecx, %eax
 115 00f2 4189C8   		movl	%ecx, %r8d
 116 00f5 C1E004   		sall	$4, %eax
 117 00f8 41C1E805 		shrl	$5, %r8d
 118 00fc 4181E8A9 		subl	$15764393, %r8d
 118      8BF000
 119 0103 05F799FD 		addl	$1140693495, %eax
 119      43
 120 0108 4431C0   		xorl	%r8d, %eax
 121 010b 448D040E 		leal	(%rsi,%rcx), %r8d
 122 010f 4431C0   		xorl	%r8d, %eax
 123 0112 29C2     		subl	%eax, %edx
 124 0114 89D0     		movl	%edx, %eax
 125 0116 4189D0   		movl	%edx, %r8d
 126 0119 C1E004   		sall	$4, %eax
 127 011c 41C1E805 		shrl	$5, %r8d
 128 0120 4181C08F 		addl	$1979237519, %r8d
 128      C4F875
 129 0127 058CC127 		addl	$690471308, %eax
 129      29
 130 012c 4431C0   		xorl	%r8d, %eax
 131 012f 448D0432 		leal	(%rdx,%rsi), %r8d
 132 0133 4431C0   		xorl	%r8d, %eax
 133 0136 29C1     		subl	%eax, %ecx
 134 0138 81C64786 		addl	$1640531527, %esi
 134      C861
 135 013e 75B0     		jne	.L12
 136 0140 890F     		movl	%ecx, (%rdi)
 137 0142 895704   		movl	%edx, 4(%rdi)
 138 0145 C3       		ret
 139              		.cfi_endproc
 140              	.LFE77:
 142 0146 662E0F1F 		.p2align 4,,15
 142      84000000 
 142      0000
 143              		.globl	encrypt64
 145              	encrypt64:
 146              	.LFB78:
 147              		.cfi_startproc
 148 0150 8B0F     		movl	(%rdi), %ecx
 149 0152 8B5704   		movl	4(%rdi), %edx
 150 0155 31F6     		xorl	%esi, %esi
 151 0157 660F1F84 		.p2align 4,,10
 151      00000000 
 151      00
 152              		.p2align 3
 153              	.L15:
 154 0160 89D0     		movl	%edx, %eax
 155 0162 4189D0   		movl	%edx, %r8d
 156 0165 81EE4786 		subl	$1640531527, %esi
 156      C861
 157 016b C1E004   		sall	$4, %eax
 158 016e 41C1E805 		shrl	$5, %r8d
 159 0172 4181C08F 		addl	$1979237519, %r8d
 159      C4F875
 160 0179 058CC127 		addl	$690471308, %eax
 160      29
 161 017e 4431C0   		xorl	%r8d, %eax
 162 0181 448D0432 		leal	(%rdx,%rsi), %r8d
 163 0185 4431C0   		xorl	%r8d, %eax
 164 0188 01C1     		addl	%eax, %ecx
 165 018a 89C8     		movl	%ecx, %eax
 166 018c 4189C8   		movl	%ecx, %r8d
 167 018f C1E004   		sall	$4, %eax
 168 0192 41C1E805 		shrl	$5, %r8d
 169 0196 4181E8A9 		subl	$15764393, %r8d
 169      8BF000
 170 019d 05F799FD 		addl	$1140693495, %eax
 170      43
 171 01a2 4431C0   		xorl	%r8d, %eax
 172 01a5 448D0431 		leal	(%rcx,%rsi), %r8d
 173 01a9 4431C0   		xorl	%r8d, %eax
 174 01ac 01C2     		addl	%eax, %edx
 175 01ae 81FE2037 		cmpl	$-957401312, %esi
 175      EFC6
 176 01b4 75AA     		jne	.L15
 177 01b6 890F     		movl	%ecx, (%rdi)
 178 01b8 895704   		movl	%edx, 4(%rdi)
 179 01bb C3       		ret
 180              		.cfi_endproc
 181              	.LFE78:
 183 01bc 0F1F4000 		.p2align 4,,15
 184              		.globl	myHash
 186              	myHash:
 187              	.LFB79:
 188              		.cfi_startproc
 189 01c0 0FB7D7   		movzwl	%di, %edx
 190 01c3 83E701   		andl	$1, %edi
 191 01c6 F7DF     		negl	%edi
 192 01c8 6681E700 		andw	$2048, %di
 192      08
 193 01cd F6C202   		testb	$2, %dl
 194 01d0 8D8F0010 		leal	4096(%rdi), %ecx
 194      0000
 195 01d6 0F44CF   		cmove	%edi, %ecx
 196 01d9 F6C204   		testb	$4, %dl
 197 01dc 8D810020 		leal	8192(%rcx), %eax
 197      0000
 198 01e2 0F44C1   		cmove	%ecx, %eax
 199 01e5 F6C208   		testb	$8, %dl
 200 01e8 8D880040 		leal	16384(%rax), %ecx
 200      0000
 201 01ee 0F44C8   		cmove	%eax, %ecx
 202 01f1 F6C210   		testb	$16, %dl
 203 01f4 8D810080 		leal	-32768(%rcx), %eax
 203      FFFF
 204 01fa 0F44C1   		cmove	%ecx, %eax
 205 01fd F6C220   		testb	$32, %dl
 206 0200 8D4801   		leal	1(%rax), %ecx
 207 0203 0F44C8   		cmove	%eax, %ecx
 208 0206 F6C240   		testb	$64, %dl
 209 0209 8D4102   		leal	2(%rcx), %eax
 210 020c 0F44C1   		cmove	%ecx, %eax
 211 020f F6C280   		testb	$-128, %dl
 212 0212 8D4804   		leal	4(%rax), %ecx
 213 0215 0F44C8   		cmove	%eax, %ecx
 214 0218 F6C601   		testb	$1, %dh
 215 021b 8D4108   		leal	8(%rcx), %eax
 216 021e 0F44C1   		cmove	%ecx, %eax
 217 0221 F6C602   		testb	$2, %dh
 218 0224 8D4810   		leal	16(%rax), %ecx
 219 0227 0F44C8   		cmove	%eax, %ecx
 220 022a F6C604   		testb	$4, %dh
 221 022d 8D4120   		leal	32(%rcx), %eax
 222 0230 0F44C1   		cmove	%ecx, %eax
 223 0233 F6C608   		testb	$8, %dh
 224 0236 8D4840   		leal	64(%rax), %ecx
 225 0239 0F44C8   		cmove	%eax, %ecx
 226 023c F6C610   		testb	$16, %dh
 227 023f 8D818000 		leal	128(%rcx), %eax
 227      0000
 228 0245 0F44C1   		cmove	%ecx, %eax
 229 0248 F6C620   		testb	$32, %dh
 230 024b 8D880001 		leal	256(%rax), %ecx
 230      0000
 231 0251 0F44C8   		cmove	%eax, %ecx
 232 0254 F6C640   		testb	$64, %dh
 233 0257 8D810002 		leal	512(%rcx), %eax
 233      0000
 234 025d 0F44C1   		cmove	%ecx, %eax
 235 0260 C1FA0F   		sarl	$15, %edx
 236 0263 8D880004 		leal	1024(%rax), %ecx
 236      0000
 237 0269 85D2     		testl	%edx, %edx
 238 026b 0F45C1   		cmovne	%ecx, %eax
 239 026e C3       		ret
 240              		.cfi_endproc
 241              	.LFE79:
 243              		.section	.rodata.str1.1,"aMS",@progbits,1
 244              	.LC0:
 245 0000 2C00     		.string	","
 246              	.LC1:
 247 0002 256400   		.string	"%d"
 248              		.text
 249 026f 90       		.p2align 4,,15
 250              		.globl	format
 252              	format:
 253              	.LFB80:
 254              		.cfi_startproc
 255 0270 53       		pushq	%rbx
 256              		.cfi_def_cfa_offset 16
 257              		.cfi_offset 3, -16
 258 0271 BE000000 		movl	$.LC0, %esi
 258      00
 259 0276 31DB     		xorl	%ebx, %ebx
 260 0278 E8000000 		call	strtok
 260      00
 261 027d 4885C0   		testq	%rax, %rax
 262 0280 743F     		je	.L17
 263              		.p2align 4,,10
 264 0282 660F1F44 		.p2align 3
 264      0000
 265              	.L23:
 266 0288 48630D00 		movslq	numLines(%rip), %rcx
 266      000000
 267 028f 4863D3   		movslq	%ebx, %rdx
 268 0292 4889C7   		movq	%rax, %rdi
 269 0295 BE000000 		movl	$.LC1, %esi
 269      00
 270 029a 31C0     		xorl	%eax, %eax
 271 029c 83C301   		addl	$1, %ebx
 272 029f 488D148A 		leaq	(%rdx,%rcx,4), %rdx
 273 02a3 488D1495 		leaq	dataFromCSV(,%rdx,4), %rdx
 273      00000000 
 274 02ab E8000000 		call	sscanf
 274      00
 275 02b0 31FF     		xorl	%edi, %edi
 276 02b2 BE000000 		movl	$.LC0, %esi
 276      00
 277 02b7 E8000000 		call	strtok
 277      00
 278 02bc 4885C0   		testq	%rax, %rax
 279 02bf 75C7     		jne	.L23
 280              	.L17:
 281 02c1 5B       		popq	%rbx
 282              		.cfi_def_cfa_offset 8
 283 02c2 C3       		ret
 284              		.cfi_endproc
 285              	.LFE80:
 287 02c3 66666666 		.p2align 4,,15
 287      2E0F1F84 
 287      00000000 
 287      00
 288              		.globl	find
 290              	find:
 291              	.LFB81:
 292              		.cfi_startproc
 293 02d0 448B1500 		movl	numLines(%rip), %r10d
 293      000000
 294 02d7 4585D2   		testl	%r10d, %r10d
 295 02da 7E54     		jle	.L32
 296 02dc B8000000 		movl	$dataFromCSV+16, %eax
 296      00
 297 02e1 41B90100 		movl	$1, %r9d
 297      0000
 298 02e7 EB14     		jmp	.L30
 299 02e9 0F1F8000 		.p2align 4,,10
 299      000000
 300              		.p2align 3
 301              	.L28:
 302 02f0 4183C101 		addl	$1, %r9d
 303 02f4 4883C010 		addq	$16, %rax
 304 02f8 4539D1   		cmpl	%r10d, %r9d
 305 02fb 7F33     		jg	.L32
 306              	.L30:
 307 02fd 663B38   		cmpw	(%rax), %di
 308 0300 75EE     		jne	.L28
 309 0302 663B7004 		cmpw	4(%rax), %si
 310 0306 75E8     		jne	.L28
 311 0308 4963C1   		movslq	%r9d, %rax
 312 030b 4889C6   		movq	%rax, %rsi
 313 030e 48C1E604 		salq	$4, %rsi
 314 0312 83BE0000 		cmpl	$1, dataFromCSV+8(%rsi)
 314      000001
 315 0319 7418     		je	.L33
 316              	.L29:
 317 031b 48C1E004 		salq	$4, %rax
 318 031f 8B800000 		movl	dataFromCSV+12(%rax), %eax
 318      0000
 319 0325 8901     		movl	%eax, (%rcx)
 320 0327 458908   		movl	%r9d, (%r8)
 321 032a B8010000 		movl	$1, %eax
 321      00
 322 032f C3       		ret
 323              		.p2align 4,,10
 324              		.p2align 3
 325              	.L32:
 326 0330 31C0     		xorl	%eax, %eax
 327 0332 C3       		ret
 328              	.L33:
 329 0333 C60201   		movb	$1, (%rdx)
 330 0336 EBE3     		jmp	.L29
 331              		.cfi_endproc
 332              	.LFE81:
 334 0338 0F1F8400 		.p2align 4,,15
 334      00000000 
 335              		.globl	suffBal
 337              	suffBal:
 338              	.LFB82:
 339              		.cfi_startproc
 340 0340 B8640000 		movl	$100, %eax
 340      00
 341 0345 0FB6D2   		movzbl	%dl, %edx
 342 0348 0FB6C9   		movzbl	%cl, %ecx
 343 034b 0FAFD0   		imull	%eax, %edx
 344 034e 0316     		addl	(%rsi), %edx
 345 0350 450FB6C0 		movzbl	%r8b, %r8d
 346 0354 69C9F401 		imull	$500, %ecx, %ecx
 346      0000
 347 035a 450FB6C9 		movzbl	%r9b, %r9d
 348 035e 4569C0E8 		imull	$1000, %r8d, %r8d
 348      030000
 349 0365 01CA     		addl	%ecx, %edx
 350 0367 4569C9D0 		imull	$2000, %r9d, %r9d
 350      070000
 351 036e 4401C2   		addl	%r8d, %edx
 352 0371 4401CA   		addl	%r9d, %edx
 353 0374 39FA     		cmpl	%edi, %edx
 354 0376 8916     		movl	%edx, (%rsi)
 355 0378 0F9EC0   		setle	%al
 356 037b C3       		ret
 357              		.cfi_endproc
 358              	.LFE82:
 360              		.section	.rodata.str1.8,"aMS",@progbits,1
 361              		.align 8
 362              	.LC2:
 363 0000 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 363      20202020 
 363      20202020 
 363      76656E64 
 363      6F722049 
 364              		.section	.rodata.str1.1
 365              	.LC3:
 366 0005 3C564944 		.string	"<VID:PID>"
 366      3A504944 
 366      3E00
 367              	.LC4:
 368 000f 69767000 		.string	"ivp"
 369              	.LC5:
 370 0013 6900     		.string	"i"
 371              		.section	.rodata.str1.8
 372 0035 000000   		.align 8
 373              	.LC6:
 374 0038 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 374      20202056 
 374      49442C20 
 374      50494420 
 374      616E6420 
 375              		.section	.rodata.str1.1
 376              	.LC7:
 377 0015 3C564944 		.string	"<VID:PID[:DID]>"
 377      3A504944 
 377      5B3A4449 
 377      445D3E00 
 378              	.LC8:
 379 0025 767000   		.string	"vp"
 380              	.LC9:
 381 0028 7600     		.string	"v"
 382              		.section	.rodata.str1.8
 383 006d 000000   		.align 8
 384              	.LC10:
 385 0070 20202020 		.string	"                    communicates with the atm module"
 385      20202020 
 385      20202020 
 385      20202020 
 385      20202020 
 386              		.section	.rodata.str1.1
 387              	.LC11:
 388 002a 61746D00 		.string	"atm"
 389              	.LC12:
 390 002e 7900     		.string	"y"
 391              		.section	.rodata.str1.8
 392 00a5 000000   		.align 8
 393              	.LC13:
 394 00a8 20202020 		.string	"        gives log on more events"
 394      20202020 
 394      67697665 
 394      73206C6F 
 394      67206F6E 
 395              		.section	.rodata.str1.1
 396              	.LC14:
 397 0030 6C6F6700 		.string	"log"
 398              	.LC15:
 399 0034 6C00     		.string	"l"
 400              		.section	.rodata.str1.8
 401 00c9 00000000 		.align 8
 401      000000
 402              	.LC16:
 403 00d0 20202020 		.string	"                     print this help and exit"
 403      20202020 
 403      20202020 
 403      20202020 
 403      20202020 
 404              		.section	.rodata.str1.1
 405              	.LC17:
 406 0036 68656C70 		.string	"help"
 406      00
 407              	.LC18:
 408 003b 6800     		.string	"h"
 409              	.LC19:
 410 003d 666C636C 		.string	"flcli"
 410      6900
 411              	.LC20:
 412 0043 25733A20 		.string	"%s: insufficient memory\n"
 412      696E7375 
 412      66666963 
 412      69656E74 
 412      206D656D 
 413              		.section	.rodata.str1.8
 414 00fe 0000     		.align 8
 415              	.LC21:
 416 0100 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2017 Jarvis \n\n Usage: %s"
 416      4C696E6B 
 416      20436F6D 
 416      6D616E64 
 416      2D4C696E 
 417              		.section	.rodata.str1.1
 418              	.LC22:
 419 005c 0A00     		.string	"\n"
 420              		.section	.rodata.str1.8
 421 0147 00       		.align 8
 422              	.LC23:
 423 0148 0A496E74 		.string	"\nInteract with an FPGALink device.\n\n"
 423      65726163 
 423      74207769 
 423      74682061 
 423      6E204650 
 424              		.section	.rodata.str1.1
 425              	.LC24:
 426 005e 2020252D 		.string	"  %-10s %s\n"
 426      31307320 
 426      25730A00 
 427              		.section	.rodata.str1.8
 428 016d 000000   		.align 8
 429              	.LC25:
 430 0170 54727920 		.string	"Try '%s --help' for more information.\n"
 430      27257320 
 430      2D2D6865 
 430      6C702720 
 430      666F7220 
 431 0197 00       		.align 8
 432              	.LC26:
 433 0198 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 433      6D707469 
 433      6E672074 
 433      6F206F70 
 433      656E2063 
 434              		.section	.rodata.str1.1
 435              	.LC27:
 436 006a 4C6F6164 		.string	"Loading firmware into %s...\n"
 436      696E6720 
 436      6669726D 
 436      77617265 
 436      20696E74 
 437              	.LC28:
 438 0087 41776169 		.string	"Awaiting renumeration"
 438      74696E67 
 438      2072656E 
 438      756D6572 
 438      6174696F 
 439              	.LC29:
 440 009d 2E00     		.string	"."
 441              		.section	.rodata.str1.8
 442              		.align 8
 443              	.LC30:
 444 01d0 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 444      4C696E6B 
 444      20646576 
 444      69636520 
 444      64696420 
 445 0203 00000000 		.align 8
 445      00
 446              	.LC31:
 447 0208 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 447      6D707469 
 447      6E672074 
 447      6F206F70 
 447      656E2063 
 448 0245 000000   		.align 8
 449              	.LC32:
 450 0248 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 450      64206E6F 
 450      74206F70 
 450      656E2046 
 450      5047414C 
 451 0292 00000000 		.align 8
 451      0000
 452              	.LC33:
 453 0298 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 453      65637465 
 453      6420746F 
 453      20465047 
 453      414C696E 
 454              		.section	.rodata.str1.1
 455              	.LC34:
 456 009f 722B00   		.string	"r+"
 457              	.LC35:
 458 00a2 53616D70 		.string	"SampleBackEndDatabase.csv"
 458      6C654261 
 458      636B456E 
 458      64446174 
 458      61626173 
 459              	.LC36:
 460 00bc 43737620 		.string	"Csv doesn't exist \n"
 460      646F6573 
 460      6E277420 
 460      65786973 
 460      74200A00 
 461              	.LC37:
 462 00d0 52656164 		.string	"Read from channel 0 = %u \n"
 462      2066726F 
 462      6D206368 
 462      616E6E65 
 462      6C203020 
 463              	.LC38:
 464 00eb 52656164 		.string	"Read from channel %u = %u \n"
 464      2066726F 
 464      6D206368 
 464      616E6E65 
 464      6C202575 
 465              	.LC40:
 466 0107 56616C69 		.string	"Valid user found \n"
 466      64207573 
 466      65722066 
 466      6F756E64 
 466      200A00
 467              		.section	.rodata.str1.8
 468 02e7 00       		.align 8
 469              	.LC41:
 470 02e8 53756666 		.string	"Sufficient Balance in account\n"
 470      69636965 
 470      6E742042 
 470      616C616E 
 470      63652069 
 471              		.section	.rodata.str1.1
 472              	.LC42:
 473 011a 57726974 		.string	"Write to channel %u = %u \n"
 473      6520746F 
 473      20636861 
 473      6E6E656C 
 473      20257520 
 474              	.LC43:
 475 0135 772B00   		.string	"w+"
 476              		.section	.rodata.str1.8
 477 0307 00       		.align 8
 478              	.LC44:
 479 0308 22557365 		.string	"\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (decimal)\""
 479      72204944 
 479      20286465 
 479      63696D61 
 479      6C29222C 
 480              		.section	.rodata.str1.1
 481              	.LC45:
 482 0138 257300   		.string	"%s"
 483              	.LC46:
 484 013b 496E7375 		.string	"Insufficient Balance \n"
 484      66666963 
 484      69656E74 
 484      2042616C 
 484      616E6365 
 485              	.LC47:
 486 0152 55736572 		.string	"User has admin privileges \n"
 486      20686173 
 486      2061646D 
 486      696E2070 
 486      72697669 
 487              		.section	.rodata.str1.8
 488 034d 000000   		.align 8
 489              	.LC48:
 490 0350 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 490      46504741 
 490      4C696E6B 
 490      20646576 
 490      69636520 
 491 039c 00000000 		.align 8
 492              	.LC49:
 493 03a0 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 493      6F6E2072 
 493      65717565 
 493      73746564 
 493      20627574 
 494              		.section	.rodata.str1.1
 495              	.LC50:
 496 016e 25730A00 		.string	"%s\n"
 497              	.LC51:
 498 0172 496E7661 		.string	"Invalid user \n"
 498      6C696420 
 498      75736572 
 498      200A00
 499              		.section	.text.startup,"ax",@progbits
 500              		.p2align 4,,15
 501              		.globl	main
 503              	main:
 504              	.LFB83:
 505              		.cfi_startproc
 506 0000 4157     		pushq	%r15
 507              		.cfi_def_cfa_offset 16
 508              		.cfi_offset 15, -16
 509 0002 B9000000 		movl	$.LC2, %ecx
 509      00
 510 0007 BA000000 		movl	$.LC3, %edx
 510      00
 511 000c 4156     		pushq	%r14
 512              		.cfi_def_cfa_offset 24
 513              		.cfi_offset 14, -24
 514 000e 4155     		pushq	%r13
 515              		.cfi_def_cfa_offset 32
 516              		.cfi_offset 13, -32
 517 0010 4154     		pushq	%r12
 518              		.cfi_def_cfa_offset 40
 519              		.cfi_offset 12, -40
 520 0012 55       		pushq	%rbp
 521              		.cfi_def_cfa_offset 48
 522              		.cfi_offset 6, -48
 523 0013 53       		pushq	%rbx
 524              		.cfi_def_cfa_offset 56
 525              		.cfi_offset 3, -56
 526 0014 4881ECC8 		subq	$200, %rsp
 526      000000
 527              		.cfi_def_cfa_offset 256
 528 001b 897C240C 		movl	%edi, 12(%rsp)
 529 001f 48897424 		movq	%rsi, 16(%rsp)
 529      10
 530 0024 BF000000 		movl	$.LC5, %edi
 530      00
 531 0029 BE000000 		movl	$.LC4, %esi
 531      00
 532 002e E8000000 		call	arg_str0
 532      00
 533 0033 B9000000 		movl	$.LC6, %ecx
 533      00
 534 0038 BA000000 		movl	$.LC7, %edx
 534      00
 535 003d BE000000 		movl	$.LC8, %esi
 535      00
 536 0042 BF000000 		movl	$.LC9, %edi
 536      00
 537 0047 4989C5   		movq	%rax, %r13
 538 004a E8000000 		call	arg_str1
 538      00
 539 004f BA000000 		movl	$.LC10, %edx
 539      00
 540 0054 BE000000 		movl	$.LC11, %esi
 540      00
 541 0059 BF000000 		movl	$.LC12, %edi
 541      00
 542 005e 4989C6   		movq	%rax, %r14
 543 0061 E8000000 		call	arg_lit0
 543      00
 544 0066 BA000000 		movl	$.LC13, %edx
 544      00
 545 006b BE000000 		movl	$.LC14, %esi
 545      00
 546 0070 BF000000 		movl	$.LC15, %edi
 546      00
 547 0075 4989C7   		movq	%rax, %r15
 548 0078 E8000000 		call	arg_lit0
 548      00
 549 007d BA000000 		movl	$.LC16, %edx
 549      00
 550 0082 BE000000 		movl	$.LC17, %esi
 550      00
 551 0087 BF000000 		movl	$.LC18, %edi
 551      00
 552 008c 4889C5   		movq	%rax, %rbp
 553 008f E8000000 		call	arg_lit0
 553      00
 554 0094 BF140000 		movl	$20, %edi
 554      00
 555 0099 4889C3   		movq	%rax, %rbx
 556 009c E8000000 		call	arg_end
 556      00
 557 00a1 488DBC24 		leaq	144(%rsp), %rdi
 557      90000000 
 558 00a9 4989C4   		movq	%rax, %r12
 559 00ac 4C89AC24 		movq	%r13, 144(%rsp)
 559      90000000 
 560 00b4 4C89B424 		movq	%r14, 152(%rsp)
 560      98000000 
 561 00bc 4C89BC24 		movq	%r15, 160(%rsp)
 561      A0000000 
 562 00c4 4889AC24 		movq	%rbp, 168(%rsp)
 562      A8000000 
 563 00cc 48899C24 		movq	%rbx, 176(%rsp)
 563      B0000000 
 564 00d4 48898424 		movq	%rax, 184(%rsp)
 564      B8000000 
 565 00dc 48C74424 		movq	$0, 48(%rsp)
 565      30000000 
 565      00
 566 00e5 48C74424 		movq	$0, 120(%rsp)
 566      78000000 
 566      00
 567 00ee E8000000 		call	arg_nullcheck
 567      00
 568 00f3 85C0     		testl	%eax, %eax
 569 00f5 7470     		je	.L36
 570 00f7 488B3D00 		movq	stderr(%rip), %rdi
 570      000000
 571 00fe B9000000 		movl	$.LC19, %ecx
 571      00
 572 0103 BA000000 		movl	$.LC20, %edx
 572      00
 573 0108 BE010000 		movl	$1, %esi
 573      00
 574 010d 31C0     		xorl	%eax, %eax
 575 010f BB010000 		movl	$1, %ebx
 575      00
 576 0114 E8000000 		call	__fprintf_chk
 576      00
 577              	.L37:
 578 0119 488B7C24 		movq	48(%rsp), %rdi
 578      30
 579 011e E8000000 		call	flClose
 579      00
 580 0123 488B4C24 		movq	120(%rsp), %rcx
 580      78
 581 0128 4885C9   		testq	%rcx, %rcx
 582 012b 7422     		je	.L154
 583 012d 488B3D00 		movq	stderr(%rip), %rdi
 583      000000
 584 0134 BA000000 		movl	$.LC50, %edx
 584      00
 585 0139 BE010000 		movl	$1, %esi
 585      00
 586 013e 31C0     		xorl	%eax, %eax
 587 0140 E8000000 		call	__fprintf_chk
 587      00
 588 0145 488B7C24 		movq	120(%rsp), %rdi
 588      78
 589 014a E8000000 		call	flFreeError
 589      00
 590              	.L154:
 591 014f 4189D9   		movl	%ebx, %r9d
 592              	.L211:
 593 0152 4881C4C8 		addq	$200, %rsp
 593      000000
 594              		.cfi_remember_state
 595              		.cfi_def_cfa_offset 56
 596 0159 4489C8   		movl	%r9d, %eax
 597 015c 5B       		popq	%rbx
 598              		.cfi_def_cfa_offset 48
 599 015d 5D       		popq	%rbp
 600              		.cfi_def_cfa_offset 40
 601 015e 415C     		popq	%r12
 602              		.cfi_def_cfa_offset 32
 603 0160 415D     		popq	%r13
 604              		.cfi_def_cfa_offset 24
 605 0162 415E     		popq	%r14
 606              		.cfi_def_cfa_offset 16
 607 0164 415F     		popq	%r15
 608              		.cfi_def_cfa_offset 8
 609 0166 C3       		ret
 610              	.L36:
 611              		.cfi_restore_state
 612 0167 488B7424 		movq	16(%rsp), %rsi
 612      10
 613 016c 8B7C240C 		movl	12(%rsp), %edi
 614 0170 488D9424 		leaq	144(%rsp), %rdx
 614      90000000 
 615 0178 89442418 		movl	%eax, 24(%rsp)
 616 017c E8000000 		call	arg_parse
 616      00
 617 0181 837D6000 		cmpl	$0, 96(%rbp)
 618 0185 448B4C24 		movl	24(%rsp), %r9d
 618      18
 619 018a 7E07     		jle	.L38
 620 018c C6050000 		movb	$1, LOG(%rip)
 620      000001
 621              	.L38:
 622 0193 837B6000 		cmpl	$0, 96(%rbx)
 623 0197 7E60     		jle	.L39
 624 0199 BA000000 		movl	$.LC19, %edx
 624      00
 625 019e BE000000 		movl	$.LC21, %esi
 625      00
 626 01a3 BF010000 		movl	$1, %edi
 626      00
 627 01a8 31C0     		xorl	%eax, %eax
 628 01aa 31DB     		xorl	%ebx, %ebx
 629 01ac E8000000 		call	__printf_chk
 629      00
 630 01b1 488B3D00 		movq	stdout(%rip), %rdi
 630      000000
 631 01b8 488DB424 		leaq	144(%rsp), %rsi
 631      90000000 
 632 01c0 BA000000 		movl	$.LC22, %edx
 632      00
 633 01c5 E8000000 		call	arg_print_syntax
 633      00
 634 01ca BE000000 		movl	$.LC23, %esi
 634      00
 635 01cf BF010000 		movl	$1, %edi
 635      00
 636 01d4 31C0     		xorl	%eax, %eax
 637 01d6 E8000000 		call	__printf_chk
 637      00
 638 01db 488B3D00 		movq	stdout(%rip), %rdi
 638      000000
 639 01e2 488DB424 		leaq	144(%rsp), %rsi
 639      90000000 
 640 01ea BA000000 		movl	$.LC24, %edx
 640      00
 641 01ef E8000000 		call	arg_print_glossary
 641      00
 642 01f4 E920FFFF 		jmp	.L37
 642      FF
 643              	.L39:
 644 01f9 85C0     		testl	%eax, %eax
 645 01fb 7E3B     		jle	.L40
 646 01fd 488B3D00 		movq	stdout(%rip), %rdi
 646      000000
 647 0204 BA000000 		movl	$.LC19, %edx
 647      00
 648 0209 4C89E6   		movq	%r12, %rsi
 649 020c E8000000 		call	arg_print_errors
 649      00
 650 0211 B9000000 		movl	$.LC19, %ecx
 650      00
 651 0216 BA000000 		movl	$.LC25, %edx
 651      00
 652              	.L216:
 653 021b 488B3D00 		movq	stderr(%rip), %rdi
 653      000000
 654 0222 BE010000 		movl	$1, %esi
 654      00
 655 0227 31C0     		xorl	%eax, %eax
 656 0229 BB0C0000 		movl	$12, %ebx
 656      00
 657 022e E8000000 		call	__fprintf_chk
 657      00
 658 0233 E9E1FEFF 		jmp	.L37
 658      FF
 659              	.L40:
 660 0238 488D7424 		leaq	120(%rsp), %rsi
 660      78
 661 023d 31FF     		xorl	%edi, %edi
 662 023f 44894C24 		movl	%r9d, 12(%rsp)
 662      0C
 663 0244 BB010000 		movl	$1, %ebx
 663      00
 664 0249 E8000000 		call	flInitialise
 664      00
 665 024e 85C0     		testl	%eax, %eax
 666 0250 0F85C3FE 		jne	.L37
 666      FFFF
 667 0256 498B4668 		movq	104(%r14), %rax
 668 025a BE000000 		movl	$.LC26, %esi
 668      00
 669 025f BF010000 		movl	$1, %edi
 669      00
 670 0264 488B18   		movq	(%rax), %rbx
 671 0267 31C0     		xorl	%eax, %eax
 672 0269 4889DA   		movq	%rbx, %rdx
 673 026c E8000000 		call	__printf_chk
 673      00
 674 0271 488D7424 		leaq	48(%rsp), %rsi
 674      30
 675 0276 31D2     		xorl	%edx, %edx
 676 0278 4889DF   		movq	%rbx, %rdi
 677 027b E8000000 		call	flOpen
 677      00
 678 0280 85C0     		testl	%eax, %eax
 679 0282 448B4C24 		movl	12(%rsp), %r9d
 679      0C
 680 0287 0F848500 		je	.L41
 680      0000
 681 028d 41837D60 		cmpl	$0, 96(%r13)
 681      00
 682 0292 743D     		je	.L42
 683 0294 498B4568 		movq	104(%r13), %rax
 684 0298 BE000000 		movl	$.LC27, %esi
 684      00
 685 029d BF010000 		movl	$1, %edi
 685      00
 686 02a2 488B28   		movq	(%rax), %rbp
 687 02a5 31C0     		xorl	%eax, %eax
 688 02a7 4889EA   		movq	%rbp, %rdx
 689 02aa E8000000 		call	__printf_chk
 689      00
 690 02af 488D5424 		leaq	120(%rsp), %rdx
 690      78
 691 02b4 4889DE   		movq	%rbx, %rsi
 692 02b7 4889EF   		movq	%rbp, %rdi
 693 02ba E8000000 		call	flLoadStandardFirmware
 693      00
 694 02bf 85C0     		testl	%eax, %eax
 695 02c1 0F846E01 		je	.L217
 695      0000
 696              	.L152:
 697 02c7 BB010000 		movl	$1, %ebx
 697      00
 698 02cc E948FEFF 		jmp	.L37
 698      FF
 699              	.L42:
 700 02d1 4889D9   		movq	%rbx, %rcx
 701 02d4 BA000000 		movl	$.LC32, %edx
 701      00
 702 02d9 E93DFFFF 		jmp	.L216
 702      FF
 703              	.L46:
 704 02de 4889DA   		movq	%rbx, %rdx
 705 02e1 BE000000 		movl	$.LC31, %esi
 705      00
 706 02e6 BF010000 		movl	$1, %edi
 706      00
 707 02eb 31C0     		xorl	%eax, %eax
 708 02ed 44894C24 		movl	%r9d, 12(%rsp)
 708      0C
 709 02f2 E8000000 		call	__printf_chk
 709      00
 710 02f7 488D5424 		leaq	120(%rsp), %rdx
 710      78
 711 02fc 488D7424 		leaq	48(%rsp), %rsi
 711      30
 712 0301 4889DF   		movq	%rbx, %rdi
 713 0304 E8000000 		call	flOpen
 713      00
 714 0309 85C0     		testl	%eax, %eax
 715 030b 448B4C24 		movl	12(%rsp), %r9d
 715      0C
 716 0310 75B5     		jne	.L152
 717              	.L41:
 718 0312 488B7C24 		movq	48(%rsp), %rdi
 718      30
 719 0317 44894C24 		movl	%r9d, 12(%rsp)
 719      0C
 720 031c E8000000 		call	flGetFirmwareVersion
 720      00
 721 0321 488B7C24 		movq	48(%rsp), %rdi
 721      30
 722 0326 89C5     		movl	%eax, %ebp
 723 0328 E8000000 		call	flGetFirmwareID
 723      00
 724 032d 4189E8   		movl	%ebp, %r8d
 725 0330 0FB7C8   		movzwl	%ax, %ecx
 726 0333 4889DA   		movq	%rbx, %rdx
 727 0336 BE000000 		movl	$.LC33, %esi
 727      00
 728 033b BF010000 		movl	$1, %edi
 728      00
 729 0340 31C0     		xorl	%eax, %eax
 730 0342 E8000000 		call	__printf_chk
 730      00
 731 0347 488B7C24 		movq	48(%rsp), %rdi
 731      30
 732 034c BE010000 		movl	$1, %esi
 732      00
 733 0351 E8000000 		call	flIsCommCapable
 733      00
 734 0356 41837F60 		cmpl	$0, 96(%r15)
 734      00
 735 035b 0F8E9F01 		jle	.L162
 735      0000
 736 0361 84C0     		testb	%al, %al
 737 0363 0F84BF00 		je	.L48
 737      0000
 738 0369 488B7C24 		movq	48(%rsp), %rdi
 738      30
 739 036e 488D5424 		leaq	120(%rsp), %rdx
 739      78
 740 0373 BE010000 		movl	$1, %esi
 740      00
 741 0378 E8000000 		call	flSelectConduit
 741      00
 742 037d 85C0     		testl	%eax, %eax
 743 037f 448B4C24 		movl	12(%rsp), %r9d
 743      0C
 744 0384 0F853DFF 		jne	.L152
 744      FFFF
 745 038a 488B7C24 		movq	48(%rsp), %rdi
 745      30
 746 038f 488D5424 		leaq	120(%rsp), %rdx
 746      78
 747 0394 488D7424 		leaq	32(%rsp), %rsi
 747      20
 748 0399 44894C24 		movl	%r9d, 12(%rsp)
 748      0C
 749 039e E8000000 		call	flIsFPGARunning
 749      00
 750 03a3 85C0     		testl	%eax, %eax
 751 03a5 0F851CFF 		jne	.L152
 751      FFFF
 752 03ab 807C2420 		cmpb	$0, 32(%rsp)
 752      00
 753 03b0 0F845101 		je	.L52
 753      0000
 754 03b6 BE000000 		movl	$.LC34, %esi
 754      00
 755 03bb BF000000 		movl	$.LC35, %edi
 755      00
 756 03c0 E8000000 		call	fopen
 756      00
 757 03c5 4885C0   		testq	%rax, %rax
 758 03c8 4889C3   		movq	%rax, %rbx
 759 03cb 0F841F07 		je	.L218
 759      0000
 760 03d1 BF640000 		movl	$100, %edi
 760      00
 761 03d6 48C74424 		movq	$100, 64(%rsp)
 761      40640000 
 761      00
 762 03df E8000000 		call	malloc
 762      00
 763 03e4 48894424 		movq	%rax, 80(%rsp)
 763      50
 764 03e9 EB07     		jmp	.L55
 765              	.L56:
 766 03eb 83050000 		addl	$1, numLines(%rip)
 766      000001
 767              	.L55:
 768 03f2 488D7424 		leaq	64(%rsp), %rsi
 768      40
 769 03f7 488D7C24 		leaq	80(%rsp), %rdi
 769      50
 770 03fc 4889D9   		movq	%rbx, %rcx
 771 03ff BA0A0000 		movl	$10, %edx
 771      00
 772 0404 E8000000 		call	__getdelim
 772      00
 773 0409 4883C001 		addq	$1, %rax
 774 040d 0F840101 		je	.L219
 774      0000
 775 0413 833D0000 		cmpl	$0, numLines(%rip)
 775      000000
 776 041a 74CF     		je	.L56
 777 041c 488B7C24 		movq	80(%rsp), %rdi
 777      50
 778 0421 E8000000 		call	format
 778      00
 779 0426 EBC3     		jmp	.L56
 780              	.L48:
 781 0428 4889D9   		movq	%rbx, %rcx
 782 042b BA000000 		movl	$.LC49, %edx
 782      00
 783 0430 E9E6FDFF 		jmp	.L216
 783      FF
 784              	.L217:
 785 0435 BE000000 		movl	$.LC28, %esi
 785      00
 786 043a BF010000 		movl	$1, %edi
 786      00
 787 043f BD3C0000 		movl	$60, %ebp
 787      00
 788 0444 E8000000 		call	__printf_chk
 788      00
 789 0449 BFE80300 		movl	$1000, %edi
 789      00
 790 044e E8000000 		call	flSleep
 790      00
 791 0453 448B4C24 		movl	12(%rsp), %r9d
 791      0C
 792 0458 EB05     		jmp	.L45
 793              	.L220:
 794 045a 83ED01   		subl	$1, %ebp
 795 045d 7458     		je	.L44
 796              	.L45:
 797 045f BE000000 		movl	$.LC29, %esi
 797      00
 798 0464 BF010000 		movl	$1, %edi
 798      00
 799 0469 31C0     		xorl	%eax, %eax
 800 046b 44894C24 		movl	%r9d, 12(%rsp)
 800      0C
 801 0470 E8000000 		call	__printf_chk
 801      00
 802 0475 488B3D00 		movq	stdout(%rip), %rdi
 802      000000
 803 047c E8000000 		call	fflush
 803      00
 804 0481 488D5424 		leaq	120(%rsp), %rdx
 804      78
 805 0486 488DB424 		leaq	128(%rsp), %rsi
 805      80000000 
 806 048e 4889DF   		movq	%rbx, %rdi
 807 0491 E8000000 		call	flIsDeviceAvailable
 807      00
 808 0496 85C0     		testl	%eax, %eax
 809 0498 0F8529FE 		jne	.L152
 809      FFFF
 810 049e BFFA0000 		movl	$250, %edi
 810      00
 811 04a3 E8000000 		call	flSleep
 811      00
 812 04a8 80BC2480 		cmpb	$0, 128(%rsp)
 812      00000000 
 813 04b0 448B4C24 		movl	12(%rsp), %r9d
 813      0C
 814 04b5 74A3     		je	.L220
 815              	.L44:
 816 04b7 31C0     		xorl	%eax, %eax
 817 04b9 BE000000 		movl	$.LC22, %esi
 817      00
 818 04be BF010000 		movl	$1, %edi
 818      00
 819 04c3 44894C24 		movl	%r9d, 12(%rsp)
 819      0C
 820 04c8 E8000000 		call	__printf_chk
 820      00
 821 04cd 80BC2480 		cmpb	$0, 128(%rsp)
 821      00000000 
 822 04d5 448B4C24 		movl	12(%rsp), %r9d
 822      0C
 823 04da 0F85FEFD 		jne	.L46
 823      FFFF
 824 04e0 488B3D00 		movq	stderr(%rip), %rdi
 824      000000
 825 04e7 4889D9   		movq	%rbx, %rcx
 826 04ea BA000000 		movl	$.LC30, %edx
 826      00
 827 04ef BE010000 		movl	$1, %esi
 827      00
 828 04f4 31C0     		xorl	%eax, %eax
 829 04f6 E8000000 		call	__fprintf_chk
 829      00
 830 04fb E9C7FDFF 		jmp	.L152
 830      FF
 831              	.L162:
 832 0500 31DB     		xorl	%ebx, %ebx
 833 0502 E912FCFF 		jmp	.L37
 833      FF
 834              	.L52:
 835 0507 4889D9   		movq	%rbx, %rcx
 836 050a BA000000 		movl	$.LC48, %edx
 836      00
 837 050f E907FDFF 		jmp	.L216
 837      FF
 838              	.L219:
 839 0514 488B7C24 		movq	80(%rsp), %rdi
 839      50
 840 0519 832D0000 		subl	$1, numLines(%rip)
 840      000001
 841 0520 E8000000 		call	free
 841      00
 842 0525 4889DF   		movq	%rbx, %rdi
 843 0528 E8000000 		call	fclose
 843      00
 844 052d EB0A     		jmp	.L153
 845              	.L151:
 846 052f BFE80300 		movl	$1000, %edi
 846      00
 847 0534 E8000000 		call	flSleep
 847      00
 848              	.L153:
 849 0539 BF010000 		movl	$1, %edi
 849      00
 850 053e E8000000 		call	malloc
 850      00
 851 0543 488B7C24 		movq	48(%rsp), %rdi
 851      30
 852 0548 4C8D4424 		leaq	120(%rsp), %r8
 852      78
 853 054d 31F6     		xorl	%esi, %esi
 854 054f 4889C1   		movq	%rax, %rcx
 855 0552 BA010000 		movl	$1, %edx
 855      00
 856 0557 4889C5   		movq	%rax, %rbp
 857 055a E8000000 		call	flReadChannel
 857      00
 858 055f 85C0     		testl	%eax, %eax
 859 0561 0F8560FD 		jne	.L152
 859      FFFF
 860 0567 803D0000 		cmpb	$0, LOG(%rip)
 860      000000
 861 056e 7413     		je	.L59
 862 0570 0FB65500 		movzbl	0(%rbp), %edx
 863 0574 BE000000 		movl	$.LC37, %esi
 863      00
 864 0579 BF010000 		movl	$1, %edi
 864      00
 865 057e E8000000 		call	__printf_chk
 865      00
 866              	.L59:
 867 0583 440FB665 		movzbl	0(%rbp), %r12d
 867      00
 868 0588 418D4424 		leal	-1(%r12), %eax
 868      FF
 869 058d 3C01     		cmpb	$1, %al
 870 058f 779E     		ja	.L151
 871 0591 BB020000 		movl	$2, %ebx
 871      00
 872              	.L63:
 873 0596 BFE80300 		movl	$1000, %edi
 873      00
 874 059b E8000000 		call	flSleep
 874      00
 875 05a0 488B7C24 		movq	48(%rsp), %rdi
 875      30
 876 05a5 4C8D4424 		leaq	120(%rsp), %r8
 876      78
 877 05aa 31F6     		xorl	%esi, %esi
 878 05ac 4889E9   		movq	%rbp, %rcx
 879 05af BA010000 		movl	$1, %edx
 879      00
 880 05b4 E8000000 		call	flReadChannel
 880      00
 881 05b9 85C0     		testl	%eax, %eax
 882 05bb 0F8506FD 		jne	.L152
 882      FFFF
 883 05c1 803D0000 		cmpb	$0, LOG(%rip)
 883      000000
 884 05c8 0F85B100 		jne	.L221
 884      0000
 885              	.L61:
 886 05ce 443A6500 		cmpb	0(%rbp), %r12b
 887 05d2 0F8557FF 		jne	.L151
 887      FFFF
 888 05d8 80EB01   		subb	$1, %bl
 889 05db 75B9     		jne	.L63
 890 05dd C7442460 		movl	$0, 96(%rsp)
 890      00000000 
 891 05e5 C7442464 		movl	$0, 100(%rsp)
 891      00000000 
 892 05ed 4531ED   		xorl	%r13d, %r13d
 893 05f0 BB010000 		movl	$1, %ebx
 893      00
 894 05f5 EB19     		jmp	.L155
 895              	.L224:
 896 05f7 4489E9   		movl	%r13d, %ecx
 897 05fa D3E0     		sall	%cl, %eax
 898 05fc 01442460 		addl	%eax, 96(%rsp)
 899              	.L67:
 900 0600 83C301   		addl	$1, %ebx
 901 0603 4183C508 		addl	$8, %r13d
 902 0607 83FB09   		cmpl	$9, %ebx
 903 060a 0F848700 		je	.L222
 903      0000
 904              	.L155:
 905 0610 BF010000 		movl	$1, %edi
 905      00
 906 0615 E8000000 		call	malloc
 906      00
 907 061a BFE80300 		movl	$1000, %edi
 907      00
 908 061f 4989C4   		movq	%rax, %r12
 909 0622 E8000000 		call	flSleep
 909      00
 910 0627 488B7C24 		movq	48(%rsp), %rdi
 910      30
 911 062c 4C8D4424 		leaq	120(%rsp), %r8
 911      78
 912 0631 4C89E1   		movq	%r12, %rcx
 913 0634 BA010000 		movl	$1, %edx
 913      00
 914 0639 89DE     		movl	%ebx, %esi
 915 063b E8000000 		call	flReadChannel
 915      00
 916 0640 85C0     		testl	%eax, %eax
 917 0642 0F857FFC 		jne	.L152
 917      FFFF
 918 0648 803D0000 		cmpb	$0, LOG(%rip)
 918      000000
 919 064f 7516     		jne	.L223
 920              	.L65:
 921 0651 83FB04   		cmpl	$4, %ebx
 922 0654 410FB604 		movzbl	(%r12), %eax
 922      24
 923 0659 769C     		jbe	.L224
 924 065b 418D4DE0 		leal	-32(%r13), %ecx
 925 065f D3E0     		sall	%cl, %eax
 926 0661 01442464 		addl	%eax, 100(%rsp)
 927 0665 EB99     		jmp	.L67
 928              	.L223:
 929 0667 410FB60C 		movzbl	(%r12), %ecx
 929      24
 930 066c 89DA     		movl	%ebx, %edx
 931 066e BE000000 		movl	$.LC38, %esi
 931      00
 932 0673 BF010000 		movl	$1, %edi
 932      00
 933 0678 E8000000 		call	__printf_chk
 933      00
 934 067d EBD2     		jmp	.L65
 935              	.L221:
 936 067f 0FB65500 		movzbl	0(%rbp), %edx
 937 0683 BE000000 		movl	$.LC37, %esi
 937      00
 938 0688 BF010000 		movl	$1, %edi
 938      00
 939 068d E8000000 		call	__printf_chk
 939      00
 940 0692 E937FFFF 		jmp	.L61
 940      FF
 941              	.L222:
 942 0697 660F6F05 		movdqa	.LC39(%rip), %xmm0
 942      00000000 
 943 069f 488DB424 		leaq	128(%rsp), %rsi
 943      80000000 
 944 06a7 488D7C24 		leaq	96(%rsp), %rdi
 944      60
 945 06ac 4531F6   		xorl	%r14d, %r14d
 946 06af 4531E4   		xorl	%r12d, %r12d
 947 06b2 660F7F84 		movdqa	%xmm0, 128(%rsp)
 947      24800000 
 947      00
 948 06bb 4531FF   		xorl	%r15d, %r15d
 949 06be 4531ED   		xorl	%r13d, %r13d
 950 06c1 E8000000 		call	decrypt
 950      00
 951 06c6 31D2     		xorl	%edx, %edx
 952 06c8 B8010000 		movl	$1, %eax
 952      00
 953 06cd BE010000 		movl	$1, %esi
 953      00
 954 06d2 8B7C2460 		movl	96(%rsp), %edi
 955 06d6 EB18     		jmp	.L74
 956              	.L227:
 957 06d8 85DF     		testl	%ebx, %edi
 958 06da 740A     		je	.L70
 959 06dc 8D4AF8   		leal	-8(%rdx), %ecx
 960 06df 89F3     		movl	%esi, %ebx
 961 06e1 D3E3     		sall	%cl, %ebx
 962 06e3 4101DF   		addl	%ebx, %r15d
 963              	.L70:
 964 06e6 83C001   		addl	$1, %eax
 965 06e9 83C201   		addl	$1, %edx
 966 06ec 3C21     		cmpb	$33, %al
 967 06ee 743F     		je	.L225
 968              	.L74:
 969 06f0 89F3     		movl	%esi, %ebx
 970 06f2 89D1     		movl	%edx, %ecx
 971 06f4 D3E3     		sall	%cl, %ebx
 972 06f6 3C08     		cmpb	$8, %al
 973 06f8 7618     		jbe	.L226
 974 06fa 3C10     		cmpb	$16, %al
 975 06fc 76DA     		jbe	.L227
 976 06fe 3C18     		cmpb	$24, %al
 977 0700 771D     		ja	.L72
 978 0702 85DF     		testl	%ebx, %edi
 979              		.p2align 4,,5
 980 0704 74E0     		je	.L70
 981 0706 8D4AF0   		leal	-16(%rdx), %ecx
 982 0709 89F3     		movl	%esi, %ebx
 983 070b D3E3     		sall	%cl, %ebx
 984 070d 4101DC   		addl	%ebx, %r12d
 985 0710 EBD4     		jmp	.L70
 986              	.L226:
 987 0712 458D441D 		leal	0(%r13,%rbx), %r8d
 987      00
 988 0717 85FB     		testl	%edi, %ebx
 989 0719 450F45E8 		cmovne	%r8d, %r13d
 990 071d EBC7     		jmp	.L70
 991              	.L72:
 992 071f 85DF     		testl	%ebx, %edi
 993 0721 74C3     		je	.L70
 994 0723 8D4AE8   		leal	-24(%rdx), %ecx
 995 0726 89F3     		movl	%esi, %ebx
 996 0728 D3E3     		sall	%cl, %ebx
 997 072a 4101DE   		addl	%ebx, %r14d
 998 072d EBB7     		jmp	.L70
 999              	.L225:
 1000 072f 448B4C24 		movl	100(%rsp), %r9d
 1000      64
 1001 0734 31C0     		xorl	%eax, %eax
 1002 0736 31F6     		xorl	%esi, %esi
 1003 0738 4531C0   		xorl	%r8d, %r8d
 1004 073b BF010000 		movl	$1, %edi
 1004      00
 1005 0740 EB13     		jmp	.L78
 1006              	.L229:
 1007 0742 D3E2     		sall	%cl, %edx
 1008 0744 8D0C16   		leal	(%rsi,%rdx), %ecx
 1009 0747 4485CA   		testl	%r9d, %edx
 1010 074a 0F45F1   		cmovne	%ecx, %esi
 1011              	.L76:
 1012 074d 83C001   		addl	$1, %eax
 1013 0750 83F820   		cmpl	$32, %eax
 1014 0753 7420     		je	.L228
 1015              	.L78:
 1016 0755 8D5001   		leal	1(%rax), %edx
 1017 0758 89C1     		movl	%eax, %ecx
 1018 075a 6683FA10 		cmpw	$16, %dx
 1019 075e 89FA     		movl	%edi, %edx
 1020 0760 76E0     		jbe	.L229
 1021 0762 D3E2     		sall	%cl, %edx
 1022 0764 4185D1   		testl	%edx, %r9d
 1023 0767 74E4     		je	.L76
 1024 0769 8D48F0   		leal	-16(%rax), %ecx
 1025 076c 89FA     		movl	%edi, %edx
 1026 076e D3E2     		sall	%cl, %edx
 1027 0770 4101D0   		addl	%edx, %r8d
 1028 0773 EBD8     		jmp	.L76
 1029              	.L228:
 1030 0775 31C0     		xorl	%eax, %eax
 1031 0777 31D2     		xorl	%edx, %edx
 1032 0779 0FB7F6   		movzwl	%si, %esi
 1033 077c 41B90100 		movl	$1, %r9d
 1033      0000
 1034              	.L80:
 1035 0782 8D480B   		leal	11(%rax), %ecx
 1036 0785 4489CB   		movl	%r9d, %ebx
 1037 0788 83E10F   		andl	$15, %ecx
 1038 078b D3E3     		sall	%cl, %ebx
 1039 078d 89C1     		movl	%eax, %ecx
 1040 078f 8D3C1A   		leal	(%rdx,%rbx), %edi
 1041 0792 89F3     		movl	%esi, %ebx
 1042 0794 D3FB     		sarl	%cl, %ebx
 1043 0796 89D9     		movl	%ebx, %ecx
 1044 0798 80E101   		andb	$1, %cl
 1045 079b 0F45D7   		cmovne	%edi, %edx
 1046 079e 4883C001 		addq	$1, %rax
 1047 07a2 4883F810 		cmpq	$16, %rax
 1048 07a6 75DA     		jne	.L80
 1049 07a8 BF010000 		movl	$1, %edi
 1049      00
 1050 07ad 89542410 		movl	%edx, 16(%rsp)
 1051 07b1 44894424 		movl	%r8d, 12(%rsp)
 1051      0C
 1052 07b6 E8000000 		call	malloc
 1052      00
 1053 07bb 8B350000 		movl	numLines(%rip), %esi
 1053      0000
 1054 07c1 4889C3   		movq	%rax, %rbx
 1055 07c4 B9000000 		movl	$dataFromCSV+20, %ecx
 1055      00
 1056 07c9 B8010000 		movl	$1, %eax
 1056      00
 1057 07ce 448B4424 		movl	12(%rsp), %r8d
 1057      0C
 1058 07d3 8B542410 		movl	16(%rsp), %edx
 1059 07d7 EB07     		jmp	.L81
 1060              	.L82:
 1061 07d9 83C001   		addl	$1, %eax
 1062 07dc 4883C110 		addq	$16, %rcx
 1063              	.L81:
 1064 07e0 39F0     		cmpl	%esi, %eax
 1065 07e2 0F8F2902 		jg	.L230
 1065      0000
 1066 07e8 66443B41 		cmpw	-4(%rcx), %r8w
 1066      FC
 1067 07ed 75EA     		jne	.L82
 1068 07ef 663B11   		cmpw	(%rcx), %dx
 1069 07f2 75E5     		jne	.L82
 1070 07f4 4898     		cltq
 1071 07f6 BE000000 		movl	$.LC40, %esi
 1071      00
 1072 07fb BF010000 		movl	$1, %edi
 1072      00
 1073 0800 48894424 		movq	%rax, 24(%rsp)
 1073      18
 1074 0805 48C1E004 		salq	$4, %rax
 1075 0809 8B880000 		movl	dataFromCSV+8(%rax), %ecx
 1075      0000
 1076 080f 8B800000 		movl	dataFromCSV+12(%rax), %eax
 1076      0000
 1077 0815 89442410 		movl	%eax, 16(%rsp)
 1078 0819 31C0     		xorl	%eax, %eax
 1079 081b 894C240C 		movl	%ecx, 12(%rsp)
 1080 081f E8000000 		call	__printf_chk
 1080      00
 1081 0824 837C240C 		cmpl	$1, 12(%rsp)
 1081      01
 1082 0829 0F84E402 		je	.L231
 1082      0000
 1083 082f 450FB6ED 		movzbl	%r13b, %r13d
 1084 0833 450FB6FF 		movzbl	%r15b, %r15d
 1085 0837 450FB6F6 		movzbl	%r14b, %r14d
 1086 083b 4169C7F4 		imull	$500, %r15d, %eax
 1086      010000
 1087 0842 416BD564 		imull	$100, %r13d, %edx
 1088 0846 01C2     		addl	%eax, %edx
 1089 0848 410FB6C4 		movzbl	%r12b, %eax
 1090 084c 69C0E803 		imull	$1000, %eax, %eax
 1090      0000
 1091 0852 01C2     		addl	%eax, %edx
 1092 0854 4169C6D0 		imull	$2000, %r14d, %eax
 1092      070000
 1093 085b 01D0     		addl	%edx, %eax
 1094 085d 39442410 		cmpl	%eax, 16(%rsp)
 1095 0861 8944240C 		movl	%eax, 12(%rsp)
 1096 0865 0F8DDD00 		jge	.L232
 1096      0000
 1097              	.L87:
 1098 086b 803D0000 		cmpb	$0, LOG(%rip)
 1098      000000
 1099 0872 7411     		je	.L119
 1100 0874 BE000000 		movl	$.LC46, %esi
 1100      00
 1101 0879 BF010000 		movl	$1, %edi
 1101      00
 1102 087e 31C0     		xorl	%eax, %eax
 1103 0880 E8000000 		call	__printf_chk
 1103      00
 1104              	.L119:
 1105 0885 C60302   		movb	$2, (%rbx)
 1106 0888 BFE80300 		movl	$1000, %edi
 1106      00
 1107 088d E8000000 		call	flSleep
 1107      00
 1108 0892 803D0000 		cmpb	$0, LOG(%rip)
 1108      000000
 1109 0899 7419     		je	.L120
 1110 089b 0FB60B   		movzbl	(%rbx), %ecx
 1111 089e BA090000 		movl	$9, %edx
 1111      00
 1112 08a3 BE000000 		movl	$.LC42, %esi
 1112      00
 1113 08a8 BF010000 		movl	$1, %edi
 1113      00
 1114 08ad 31C0     		xorl	%eax, %eax
 1115 08af E8000000 		call	__printf_chk
 1115      00
 1116              	.L120:
 1117 08b4 488B7C24 		movq	48(%rsp), %rdi
 1117      30
 1118 08b9 4C8D4424 		leaq	120(%rsp), %r8
 1118      78
 1119 08be 4889D9   		movq	%rbx, %rcx
 1120 08c1 BA010000 		movl	$1, %edx
 1120      00
 1121 08c6 BE090000 		movl	$9, %esi
 1121      00
 1122 08cb E8000000 		call	flWriteChannel
 1122      00
 1123 08d0 85C0     		testl	%eax, %eax
 1124 08d2 0F85EFF9 		jne	.L152
 1124      FFFF
 1125 08d8 BB0A0000 		movl	$10, %ebx
 1125      00
 1126 08dd EB0C     		jmp	.L124
 1127              	.L233:
 1128 08df 83C301   		addl	$1, %ebx
 1129 08e2 83FB12   		cmpl	$18, %ebx
 1130 08e5 0F8444FC 		je	.L151
 1130      FFFF
 1131              	.L124:
 1132 08eb BFE80300 		movl	$1000, %edi
 1132      00
 1133 08f0 C6842480 		movb	$0, 128(%rsp)
 1133      00000000 
 1134 08f8 E8000000 		call	flSleep
 1134      00
 1135 08fd 803D0000 		cmpb	$0, LOG(%rip)
 1135      000000
 1136 0904 741B     		je	.L121
 1137 0906 0FB68C24 		movzbl	128(%rsp), %ecx
 1137      80000000 
 1138 090e 89DA     		movl	%ebx, %edx
 1139 0910 BE000000 		movl	$.LC42, %esi
 1139      00
 1140 0915 BF010000 		movl	$1, %edi
 1140      00
 1141 091a 31C0     		xorl	%eax, %eax
 1142 091c E8000000 		call	__printf_chk
 1142      00
 1143              	.L121:
 1144 0921 488B7C24 		movq	48(%rsp), %rdi
 1144      30
 1145 0926 4C8D4424 		leaq	120(%rsp), %r8
 1145      78
 1146 092b 488D8C24 		leaq	128(%rsp), %rcx
 1146      80000000 
 1147 0933 BA010000 		movl	$1, %edx
 1147      00
 1148 0938 89DE     		movl	%ebx, %esi
 1149 093a E8000000 		call	flWriteChannel
 1149      00
 1150 093f 85C0     		testl	%eax, %eax
 1151 0941 749C     		je	.L233
 1152 0943 E97FF9FF 		jmp	.L152
 1152      FF
 1153              	.L232:
 1154 0948 4584E4   		testb	%r12b, %r12b
 1155 094b 0F1F4400 		.p2align 4,,6
 1155      00
 1156 0950 0F8515FF 		jne	.L87
 1156      FFFF
 1157 0956 803D0000 		cmpb	$0, LOG(%rip)
 1157      000000
 1158 095d 7411     		je	.L89
 1159 095f BE000000 		movl	$.LC41, %esi
 1159      00
 1160 0964 BF010000 		movl	$1, %edi
 1160      00
 1161 0969 31C0     		xorl	%eax, %eax
 1162 096b E8000000 		call	__printf_chk
 1162      00
 1163              	.L89:
 1164 0970 C60301   		movb	$1, (%rbx)
 1165 0973 BFE80300 		movl	$1000, %edi
 1165      00
 1166 0978 E8000000 		call	flSleep
 1166      00
 1167 097d 803D0000 		cmpb	$0, LOG(%rip)
 1167      000000
 1168 0984 7419     		je	.L90
 1169 0986 0FB60B   		movzbl	(%rbx), %ecx
 1170 0989 BA090000 		movl	$9, %edx
 1170      00
 1171 098e BE000000 		movl	$.LC42, %esi
 1171      00
 1172 0993 BF010000 		movl	$1, %edi
 1172      00
 1173 0998 31C0     		xorl	%eax, %eax
 1174 099a E8000000 		call	__printf_chk
 1174      00
 1175              	.L90:
 1176 099f 488B7C24 		movq	48(%rsp), %rdi
 1176      30
 1177 09a4 4C8D4424 		leaq	120(%rsp), %r8
 1177      78
 1178 09a9 4889D9   		movq	%rbx, %rcx
 1179 09ac BA010000 		movl	$1, %edx
 1179      00
 1180 09b1 BE090000 		movl	$9, %esi
 1180      00
 1181 09b6 E8000000 		call	flWriteChannel
 1181      00
 1182 09bb 85C0     		testl	%eax, %eax
 1183 09bd 0F8504F9 		jne	.L152
 1183      FFFF
 1184 09c3 BFE80300 		movl	$1000, %edi
 1184      00
 1185 09c8 41C1E708 		sall	$8, %r15d
 1186 09cc E8000000 		call	flSleep
 1186      00
 1187 09d1 C7442474 		movl	$0, 116(%rsp)
 1187      00000000 
 1188 09d9 31C0     		xorl	%eax, %eax
 1189 09db BA080000 		movl	$8, %edx
 1189      00
 1190 09e0 31C9     		xorl	%ecx, %ecx
 1191 09e2 EB24     		jmp	.L92
 1192              	.L93:
 1193 09e4 83F908   		cmpl	$8, %ecx
 1194 09e7 0F841E01 		je	.L234
 1194      0000
 1195 09ed 83F910   		cmpl	$16, %ecx
 1196 09f0 7410     		je	.L96
 1197 09f2 4489F6   		movl	%r14d, %esi
 1198 09f5 D3E6     		sall	%cl, %esi
 1199 09f7 01F0     		addl	%esi, %eax
 1200 09f9 83FA20   		cmpl	$32, %edx
 1201 09fc 0F84CF01 		je	.L235
 1201      0000
 1202              	.L96:
 1203 0a02 83C108   		addl	$8, %ecx
 1204 0a05 83C208   		addl	$8, %edx
 1205              	.L92:
 1206 0a08 85C9     		testl	%ecx, %ecx
 1207 0a0a 75D8     		jne	.L93
 1208 0a0c 4401E8   		addl	%r13d, %eax
 1209 0a0f EBF1     		jmp	.L96
 1210              	.L230:
 1211 0a11 BE000000 		movl	$.LC51, %esi
 1211      00
 1212 0a16 BF010000 		movl	$1, %edi
 1212      00
 1213 0a1b 31C0     		xorl	%eax, %eax
 1214 0a1d E8000000 		call	__printf_chk
 1214      00
 1215 0a22 C60304   		movb	$4, (%rbx)
 1216 0a25 BFE80300 		movl	$1000, %edi
 1216      00
 1217 0a2a E8000000 		call	flSleep
 1217      00
 1218 0a2f 803D0000 		cmpb	$0, LOG(%rip)
 1218      000000
 1219 0a36 0F859600 		jne	.L236
 1219      0000
 1220              	.L157:
 1221 0a3c 488B7C24 		movq	48(%rsp), %rdi
 1221      30
 1222 0a41 4C8D4424 		leaq	120(%rsp), %r8
 1222      78
 1223 0a46 4889D9   		movq	%rbx, %rcx
 1224 0a49 BA010000 		movl	$1, %edx
 1224      00
 1225 0a4e BE090000 		movl	$9, %esi
 1225      00
 1226 0a53 E8000000 		call	flWriteChannel
 1226      00
 1227 0a58 85C0     		testl	%eax, %eax
 1228 0a5a 0F8567F8 		jne	.L152
 1228      FFFF
 1229 0a60 BB0A0000 		movl	$10, %ebx
 1229      00
 1230              	.L150:
 1231 0a65 BFE80300 		movl	$1000, %edi
 1231      00
 1232 0a6a C6842480 		movb	$0, 128(%rsp)
 1232      00000000 
 1233 0a72 E8000000 		call	flSleep
 1233      00
 1234 0a77 803D0000 		cmpb	$0, LOG(%rip)
 1234      000000
 1235 0a7e 7535     		jne	.L237
 1236              	.L147:
 1237 0a80 488B7C24 		movq	48(%rsp), %rdi
 1237      30
 1238 0a85 4C8D4424 		leaq	120(%rsp), %r8
 1238      78
 1239 0a8a 488D8C24 		leaq	128(%rsp), %rcx
 1239      80000000 
 1240 0a92 BA010000 		movl	$1, %edx
 1240      00
 1241 0a97 89DE     		movl	%ebx, %esi
 1242 0a99 E8000000 		call	flWriteChannel
 1242      00
 1243 0a9e 85C0     		testl	%eax, %eax
 1244 0aa0 0F8521F8 		jne	.L152
 1244      FFFF
 1245 0aa6 83C301   		addl	$1, %ebx
 1246 0aa9 83FB12   		cmpl	$18, %ebx
 1247 0aac 75B7     		jne	.L150
 1248 0aae 6690     		.p2align 4,,3
 1249 0ab0 E97AFAFF 		jmp	.L151
 1249      FF
 1250              	.L237:
 1251 0ab5 0FB68C24 		movzbl	128(%rsp), %ecx
 1251      80000000 
 1252 0abd 89DA     		movl	%ebx, %edx
 1253 0abf BE000000 		movl	$.LC42, %esi
 1253      00
 1254 0ac4 BF010000 		movl	$1, %edi
 1254      00
 1255 0ac9 31C0     		xorl	%eax, %eax
 1256 0acb E8000000 		call	__printf_chk
 1256      00
 1257 0ad0 EBAE     		jmp	.L147
 1258              	.L236:
 1259 0ad2 0FB60B   		movzbl	(%rbx), %ecx
 1260 0ad5 BA090000 		movl	$9, %edx
 1260      00
 1261 0ada BE000000 		movl	$.LC42, %esi
 1261      00
 1262 0adf BF010000 		movl	$1, %edi
 1262      00
 1263 0ae4 31C0     		xorl	%eax, %eax
 1264 0ae6 E8000000 		call	__printf_chk
 1264      00
 1265 0aeb E94CFFFF 		jmp	.L157
 1265      FF
 1266              	.L218:
 1267 0af0 BE000000 		movl	$.LC36, %esi
 1267      00
 1268 0af5 BF010000 		movl	$1, %edi
 1268      00
 1269 0afa 31C0     		xorl	%eax, %eax
 1270 0afc E8000000 		call	__printf_chk
 1270      00
 1271 0b01 448B4C24 		movl	12(%rsp), %r9d
 1271      0C
 1272 0b06 E947F6FF 		jmp	.L211
 1272      FF
 1273              	.L234:
 1274 0b0b 4401F8   		addl	%r15d, %eax
 1275 0b0e E9EFFEFF 		jmp	.L96
 1275      FF
 1276              	.L231:
 1277 0b13 BE000000 		movl	$.LC47, %esi
 1277      00
 1278 0b18 BF010000 		movl	$1, %edi
 1278      00
 1279 0b1d 31C0     		xorl	%eax, %eax
 1280 0b1f E8000000 		call	__printf_chk
 1280      00
 1281 0b24 C60303   		movb	$3, (%rbx)
 1282 0b27 BFE80300 		movl	$1000, %edi
 1282      00
 1283 0b2c E8000000 		call	flSleep
 1283      00
 1284 0b31 803D0000 		cmpb	$0, LOG(%rip)
 1284      000000
 1285 0b38 7419     		je	.L125
 1286 0b3a 0FB60B   		movzbl	(%rbx), %ecx
 1287 0b3d BA090000 		movl	$9, %edx
 1287      00
 1288 0b42 BE000000 		movl	$.LC42, %esi
 1288      00
 1289 0b47 BF010000 		movl	$1, %edi
 1289      00
 1290 0b4c 31C0     		xorl	%eax, %eax
 1291 0b4e E8000000 		call	__printf_chk
 1291      00
 1292              	.L125:
 1293 0b53 488B7C24 		movq	48(%rsp), %rdi
 1293      30
 1294 0b58 4C8D4424 		leaq	120(%rsp), %r8
 1294      78
 1295 0b5d 4889D9   		movq	%rbx, %rcx
 1296 0b60 BA010000 		movl	$1, %edx
 1296      00
 1297 0b65 BE090000 		movl	$9, %esi
 1297      00
 1298 0b6a E8000000 		call	flWriteChannel
 1298      00
 1299 0b6f 85C0     		testl	%eax, %eax
 1300 0b71 0F8550F7 		jne	.L152
 1300      FFFF
 1301 0b77 450FB6FF 		movzbl	%r15b, %r15d
 1302 0b7b 450FB6E4 		movzbl	%r12b, %r12d
 1303 0b7f C7442474 		movl	$0, 116(%rsp)
 1303      00000000 
 1304 0b87 41C1E708 		sall	$8, %r15d
 1305 0b8b 41C1E410 		sall	$16, %r12d
 1306 0b8f BA080000 		movl	$8, %edx
 1306      00
 1307 0b94 31C9     		xorl	%ecx, %ecx
 1308 0b96 450FB6F6 		movzbl	%r14b, %r14d
 1309 0b9a 450FB6ED 		movzbl	%r13b, %r13d
 1310 0b9e EB28     		jmp	.L127
 1311              	.L128:
 1312 0ba0 83F908   		cmpl	$8, %ecx
 1313 0ba3 0F84F903 		je	.L238
 1313      0000
 1314 0ba9 83F910   		cmpl	$16, %ecx
 1315 0bac 0F84F803 		je	.L239
 1315      0000
 1316 0bb2 4489F6   		movl	%r14d, %esi
 1317 0bb5 D3E6     		sall	%cl, %esi
 1318 0bb7 01F0     		addl	%esi, %eax
 1319 0bb9 83FA20   		cmpl	$32, %edx
 1320 0bbc 0F847102 		je	.L240
 1320      0000
 1321              	.L132:
 1322 0bc2 83C108   		addl	$8, %ecx
 1323 0bc5 83C208   		addl	$8, %edx
 1324              	.L127:
 1325 0bc8 85C9     		testl	%ecx, %ecx
 1326 0bca 75D4     		jne	.L128
 1327 0bcc 4401E8   		addl	%r13d, %eax
 1328 0bcf EBF1     		jmp	.L132
 1329              	.L235:
 1330 0bd1 660F6F0D 		movdqa	.LC39(%rip), %xmm1
 1330      00000000 
 1331 0bd9 488DB424 		leaq	128(%rsp), %rsi
 1331      80000000 
 1332 0be1 488D7C24 		leaq	112(%rsp), %rdi
 1332      70
 1333 0be6 BB0A0000 		movl	$10, %ebx
 1333      00
 1334 0beb 41BC0100 		movl	$1, %r12d
 1334      0000
 1335 0bf1 89442470 		movl	%eax, 112(%rsp)
 1336 0bf5 660F7F8C 		movdqa	%xmm1, 128(%rsp)
 1336      24800000 
 1336      00
 1337 0bfe E8000000 		call	encrypt
 1337      00
 1338              	.L103:
 1339 0c03 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 1339      FFFFFF
 1340 0c0a 31C0     		xorl	%eax, %eax
 1341 0c0c 31D2     		xorl	%edx, %edx
 1342 0c0e 8B742470 		movl	112(%rsp), %esi
 1343              	.L99:
 1344 0c12 8D0C07   		leal	(%rdi,%rax), %ecx
 1345 0c15 4589E2   		movl	%r12d, %r10d
 1346 0c18 41D3E2   		sall	%cl, %r10d
 1347 0c1b 4185F2   		testl	%esi, %r10d
 1348 0c1e 740B     		je	.L97
 1349 0c20 4589E3   		movl	%r12d, %r11d
 1350 0c23 89C1     		movl	%eax, %ecx
 1351 0c25 41D3E3   		sall	%cl, %r11d
 1352 0c28 4401DA   		addl	%r11d, %edx
 1353              	.L97:
 1354 0c2b 83C001   		addl	$1, %eax
 1355 0c2e 83F808   		cmpl	$8, %eax
 1356 0c31 75DF     		jne	.L99
 1357 0c33 BFE80300 		movl	$1000, %edi
 1357      00
 1358 0c38 88942480 		movb	%dl, 128(%rsp)
 1358      000000
 1359 0c3f E8000000 		call	flSleep
 1359      00
 1360 0c44 488B7C24 		movq	48(%rsp), %rdi
 1360      30
 1361 0c49 4C8D4424 		leaq	120(%rsp), %r8
 1361      78
 1362 0c4e 488D8C24 		leaq	128(%rsp), %rcx
 1362      80000000 
 1363 0c56 BA010000 		movl	$1, %edx
 1363      00
 1364 0c5b 89DE     		movl	%ebx, %esi
 1365 0c5d E8000000 		call	flWriteChannel
 1365      00
 1366 0c62 803D0000 		cmpb	$0, LOG(%rip)
 1366      000000
 1367 0c69 4189C5   		movl	%eax, %r13d
 1368 0c6c 741B     		je	.L100
 1369 0c6e 0FB68C24 		movzbl	128(%rsp), %ecx
 1369      80000000 
 1370 0c76 89DA     		movl	%ebx, %edx
 1371 0c78 BE000000 		movl	$.LC42, %esi
 1371      00
 1372 0c7d BF010000 		movl	$1, %edi
 1372      00
 1373 0c82 31C0     		xorl	%eax, %eax
 1374 0c84 E8000000 		call	__printf_chk
 1374      00
 1375              	.L100:
 1376 0c89 4585ED   		testl	%r13d, %r13d
 1377 0c8c 0F8535F6 		jne	.L152
 1377      FFFF
 1378 0c92 83C301   		addl	$1, %ebx
 1379 0c95 83FB0E   		cmpl	$14, %ebx
 1380 0c98 0F8565FF 		jne	.L103
 1380      FFFF
 1381 0c9e 41BC0100 		movl	$1, %r12d
 1381      0000
 1382              	.L110:
 1383 0ca4 8B742474 		movl	116(%rsp), %esi
 1384 0ca8 8D3CDD90 		leal	-112(,%rbx,8), %edi
 1384      FFFFFF
 1385 0caf 31C0     		xorl	%eax, %eax
 1386 0cb1 31D2     		xorl	%edx, %edx
 1387              	.L106:
 1388 0cb3 8D0C07   		leal	(%rdi,%rax), %ecx
 1389 0cb6 4589E2   		movl	%r12d, %r10d
 1390 0cb9 41D3E2   		sall	%cl, %r10d
 1391 0cbc 4185F2   		testl	%esi, %r10d
 1392 0cbf 740B     		je	.L104
 1393 0cc1 4589E3   		movl	%r12d, %r11d
 1394 0cc4 89C1     		movl	%eax, %ecx
 1395 0cc6 41D3E3   		sall	%cl, %r11d
 1396 0cc9 4401DA   		addl	%r11d, %edx
 1397              	.L104:
 1398 0ccc 83C001   		addl	$1, %eax
 1399 0ccf 83F808   		cmpl	$8, %eax
 1400 0cd2 75DF     		jne	.L106
 1401 0cd4 BFE80300 		movl	$1000, %edi
 1401      00
 1402 0cd9 88942480 		movb	%dl, 128(%rsp)
 1402      000000
 1403 0ce0 E8000000 		call	flSleep
 1403      00
 1404 0ce5 488B7C24 		movq	48(%rsp), %rdi
 1404      30
 1405 0cea 4C8D4424 		leaq	120(%rsp), %r8
 1405      78
 1406 0cef 488D8C24 		leaq	128(%rsp), %rcx
 1406      80000000 
 1407 0cf7 BA010000 		movl	$1, %edx
 1407      00
 1408 0cfc 89DE     		movl	%ebx, %esi
 1409 0cfe E8000000 		call	flWriteChannel
 1409      00
 1410 0d03 803D0000 		cmpb	$0, LOG(%rip)
 1410      000000
 1411 0d0a 4189C5   		movl	%eax, %r13d
 1412 0d0d 741B     		je	.L107
 1413 0d0f 0FB68C24 		movzbl	128(%rsp), %ecx
 1413      80000000 
 1414 0d17 89DA     		movl	%ebx, %edx
 1415 0d19 BE000000 		movl	$.LC42, %esi
 1415      00
 1416 0d1e BF010000 		movl	$1, %edi
 1416      00
 1417 0d23 31C0     		xorl	%eax, %eax
 1418 0d25 E8000000 		call	__printf_chk
 1418      00
 1419              	.L107:
 1420 0d2a 4585ED   		testl	%r13d, %r13d
 1421 0d2d 0F8594F5 		jne	.L152
 1421      FFFF
 1422 0d33 83C301   		addl	$1, %ebx
 1423 0d36 83FB12   		cmpl	$18, %ebx
 1424 0d39 0F8565FF 		jne	.L110
 1424      FFFF
 1425 0d3f 807D0001 		cmpb	$1, 0(%rbp)
 1426 0d43 0F85E6F7 		jne	.L151
 1426      FFFF
 1427 0d49 488B4424 		movq	24(%rsp), %rax
 1427      18
 1428 0d4e BE000000 		movl	$.LC43, %esi
 1428      00
 1429 0d53 BF000000 		movl	$.LC35, %edi
 1429      00
 1430 0d58 8B5C240C 		movl	12(%rsp), %ebx
 1431 0d5c 41BC1000 		movl	$16, %r12d
 1431      0000
 1432 0d62 BD010000 		movl	$1, %ebp
 1432      00
 1433 0d67 48C1E004 		salq	$4, %rax
 1434 0d6b 29980000 		subl	%ebx, dataFromCSV+12(%rax)
 1434      0000
 1435 0d71 E8000000 		call	fopen
 1435      00
 1436 0d76 B9000000 		movl	$.LC44, %ecx
 1436      00
 1437 0d7b 4889C7   		movq	%rax, %rdi
 1438 0d7e 4889C3   		movq	%rax, %rbx
 1439 0d81 BA000000 		movl	$.LC45, %edx
 1439      00
 1440 0d86 BE010000 		movl	$1, %esi
 1440      00
 1441 0d8b 31C0     		xorl	%eax, %eax
 1442 0d8d E8000000 		call	__fprintf_chk
 1442      00
 1443 0d92 BA000000 		movl	$.LC22, %edx
 1443      00
 1444 0d97 BE010000 		movl	$1, %esi
 1444      00
 1445 0d9c 4889DF   		movq	%rbx, %rdi
 1446 0d9f 31C0     		xorl	%eax, %eax
 1447 0da1 E8000000 		call	__fprintf_chk
 1447      00
 1448              	.L112:
 1449 0da6 3B2D0000 		cmpl	numLines(%rip), %ebp
 1449      0000
 1450 0dac 0F8F0302 		jg	.L241
 1450      0000
 1451 0db2 418B8C24 		movl	dataFromCSV(%r12), %ecx
 1451      00000000 
 1452 0dba BA000000 		movl	$.LC1, %edx
 1452      00
 1453 0dbf BE010000 		movl	$1, %esi
 1453      00
 1454 0dc4 4889DF   		movq	%rbx, %rdi
 1455 0dc7 31C0     		xorl	%eax, %eax
 1456 0dc9 4531ED   		xorl	%r13d, %r13d
 1457 0dcc E8000000 		call	__fprintf_chk
 1457      00
 1458              	.L160:
 1459 0dd1 BA000000 		movl	$.LC0, %edx
 1459      00
 1460 0dd6 BE010000 		movl	$1, %esi
 1460      00
 1461 0ddb 4889DF   		movq	%rbx, %rdi
 1462 0dde 31C0     		xorl	%eax, %eax
 1463 0de0 E8000000 		call	__fprintf_chk
 1463      00
 1464 0de5 438B8C2C 		movl	dataFromCSV+4(%r12,%r13), %ecx
 1464      00000000 
 1465 0ded 31C0     		xorl	%eax, %eax
 1466 0def BA000000 		movl	$.LC1, %edx
 1466      00
 1467 0df4 BE010000 		movl	$1, %esi
 1467      00
 1468 0df9 4889DF   		movq	%rbx, %rdi
 1469 0dfc 4983C504 		addq	$4, %r13
 1470 0e00 E8000000 		call	__fprintf_chk
 1470      00
 1471 0e05 4983FD0C 		cmpq	$12, %r13
 1472 0e09 75C6     		jne	.L160
 1473 0e0b 3B2D0000 		cmpl	numLines(%rip), %ebp
 1473      0000
 1474 0e11 7414     		je	.L159
 1475 0e13 BA000000 		movl	$.LC22, %edx
 1475      00
 1476 0e18 BE010000 		movl	$1, %esi
 1476      00
 1477 0e1d 4889DF   		movq	%rbx, %rdi
 1478 0e20 31C0     		xorl	%eax, %eax
 1479 0e22 E8000000 		call	__fprintf_chk
 1479      00
 1480              	.L159:
 1481 0e27 83C501   		addl	$1, %ebp
 1482 0e2a 4983C410 		addq	$16, %r12
 1483 0e2e E973FFFF 		jmp	.L112
 1483      FF
 1484              	.L240:
 1485 0e33 660F6F15 		movdqa	.LC39(%rip), %xmm2
 1485      00000000 
 1486 0e3b 488DB424 		leaq	128(%rsp), %rsi
 1486      80000000 
 1487 0e43 488D7C24 		leaq	112(%rsp), %rdi
 1487      70
 1488 0e48 BB0A0000 		movl	$10, %ebx
 1488      00
 1489 0e4d BD010000 		movl	$1, %ebp
 1489      00
 1490 0e52 89442470 		movl	%eax, 112(%rsp)
 1491 0e56 660F7F94 		movdqa	%xmm2, 128(%rsp)
 1491      24800000 
 1491      00
 1492 0e5f E8000000 		call	encrypt
 1492      00
 1493              	.L139:
 1494 0e64 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 1494      FFFFFF
 1495 0e6b 31C0     		xorl	%eax, %eax
 1496 0e6d 31D2     		xorl	%edx, %edx
 1497 0e6f 8B742470 		movl	112(%rsp), %esi
 1498              	.L135:
 1499 0e73 8D0C07   		leal	(%rdi,%rax), %ecx
 1500 0e76 4189EA   		movl	%ebp, %r10d
 1501 0e79 41D3E2   		sall	%cl, %r10d
 1502 0e7c 4185F2   		testl	%esi, %r10d
 1503 0e7f 740B     		je	.L133
 1504 0e81 4189EB   		movl	%ebp, %r11d
 1505 0e84 89C1     		movl	%eax, %ecx
 1506 0e86 41D3E3   		sall	%cl, %r11d
 1507 0e89 4401DA   		addl	%r11d, %edx
 1508              	.L133:
 1509 0e8c 83C001   		addl	$1, %eax
 1510 0e8f 83F808   		cmpl	$8, %eax
 1511 0e92 75DF     		jne	.L135
 1512 0e94 BFE80300 		movl	$1000, %edi
 1512      00
 1513 0e99 88942480 		movb	%dl, 128(%rsp)
 1513      000000
 1514 0ea0 E8000000 		call	flSleep
 1514      00
 1515 0ea5 803D0000 		cmpb	$0, LOG(%rip)
 1515      000000
 1516 0eac 0F85B300 		jne	.L242
 1516      0000
 1517              	.L136:
 1518 0eb2 488B7C24 		movq	48(%rsp), %rdi
 1518      30
 1519 0eb7 4C8D4424 		leaq	120(%rsp), %r8
 1519      78
 1520 0ebc 488D8C24 		leaq	128(%rsp), %rcx
 1520      80000000 
 1521 0ec4 BA010000 		movl	$1, %edx
 1521      00
 1522 0ec9 89DE     		movl	%ebx, %esi
 1523 0ecb E8000000 		call	flWriteChannel
 1523      00
 1524 0ed0 85C0     		testl	%eax, %eax
 1525 0ed2 0F85EFF3 		jne	.L152
 1525      FFFF
 1526 0ed8 83C301   		addl	$1, %ebx
 1527 0edb 83FB0E   		cmpl	$14, %ebx
 1528 0ede 7584     		jne	.L139
 1529 0ee0 BD010000 		movl	$1, %ebp
 1529      00
 1530              	.L146:
 1531 0ee5 8B742474 		movl	116(%rsp), %esi
 1532 0ee9 8D3CDD90 		leal	-112(,%rbx,8), %edi
 1532      FFFFFF
 1533 0ef0 31C0     		xorl	%eax, %eax
 1534 0ef2 31D2     		xorl	%edx, %edx
 1535              	.L142:
 1536 0ef4 8D0C07   		leal	(%rdi,%rax), %ecx
 1537 0ef7 4189EA   		movl	%ebp, %r10d
 1538 0efa 41D3E2   		sall	%cl, %r10d
 1539 0efd 4185F2   		testl	%esi, %r10d
 1540 0f00 740B     		je	.L140
 1541 0f02 4189EB   		movl	%ebp, %r11d
 1542 0f05 89C1     		movl	%eax, %ecx
 1543 0f07 41D3E3   		sall	%cl, %r11d
 1544 0f0a 4401DA   		addl	%r11d, %edx
 1545              	.L140:
 1546 0f0d 83C001   		addl	$1, %eax
 1547 0f10 83F808   		cmpl	$8, %eax
 1548 0f13 75DF     		jne	.L142
 1549 0f15 BFE80300 		movl	$1000, %edi
 1549      00
 1550 0f1a 88942480 		movb	%dl, 128(%rsp)
 1550      000000
 1551 0f21 E8000000 		call	flSleep
 1551      00
 1552 0f26 803D0000 		cmpb	$0, LOG(%rip)
 1552      000000
 1553 0f2d 7556     		jne	.L243
 1554              	.L143:
 1555 0f2f 488B7C24 		movq	48(%rsp), %rdi
 1555      30
 1556 0f34 4C8D4424 		leaq	120(%rsp), %r8
 1556      78
 1557 0f39 488D8C24 		leaq	128(%rsp), %rcx
 1557      80000000 
 1558 0f41 BA010000 		movl	$1, %edx
 1558      00
 1559 0f46 89DE     		movl	%ebx, %esi
 1560 0f48 E8000000 		call	flWriteChannel
 1560      00
 1561 0f4d 85C0     		testl	%eax, %eax
 1562 0f4f 0F8572F3 		jne	.L152
 1562      FFFF
 1563 0f55 83C301   		addl	$1, %ebx
 1564 0f58 83FB12   		cmpl	$18, %ebx
 1565 0f5b 7588     		jne	.L146
 1566 0f5d 0F1F00   		.p2align 4,,3
 1567 0f60 E9CAF5FF 		jmp	.L151
 1567      FF
 1568              	.L242:
 1569 0f65 0FB68C24 		movzbl	128(%rsp), %ecx
 1569      80000000 
 1570 0f6d 89DA     		movl	%ebx, %edx
 1571 0f6f BE000000 		movl	$.LC42, %esi
 1571      00
 1572 0f74 BF010000 		movl	$1, %edi
 1572      00
 1573 0f79 31C0     		xorl	%eax, %eax
 1574 0f7b E8000000 		call	__printf_chk
 1574      00
 1575 0f80 E92DFFFF 		jmp	.L136
 1575      FF
 1576              	.L243:
 1577 0f85 0FB68C24 		movzbl	128(%rsp), %ecx
 1577      80000000 
 1578 0f8d 89DA     		movl	%ebx, %edx
 1579 0f8f BE000000 		movl	$.LC42, %esi
 1579      00
 1580 0f94 BF010000 		movl	$1, %edi
 1580      00
 1581 0f99 31C0     		xorl	%eax, %eax
 1582 0f9b E8000000 		call	__printf_chk
 1582      00
 1583 0fa0 EB8D     		jmp	.L143
 1584              	.L238:
 1585 0fa2 4401F8   		addl	%r15d, %eax
 1586 0fa5 E918FCFF 		jmp	.L132
 1586      FF
 1587              	.L239:
 1588 0faa 4401E0   		addl	%r12d, %eax
 1589 0fad 0F1F00   		.p2align 4,,5
 1590 0fb0 E90DFCFF 		jmp	.L132
 1590      FF
 1591              	.L241:
 1592 0fb5 4889DF   		movq	%rbx, %rdi
 1593 0fb8 E8000000 		call	fclose
 1593      00
 1594              		.p2align 4,,2
 1595 0fbd E96DF5FF 		jmp	.L151
 1595      FF
 1596              		.cfi_endproc
 1597              	.LFE83:
 1599              		.globl	LOG
 1600              		.bss
 1601              		.align 16
 1604              	LOG:
 1605 0000 00       		.zero	1
 1606              		.globl	numLines
 1607 0001 00000000 		.align 16
 1607      00000000 
 1607      00000000 
 1607      000000
 1610              	numLines:
 1611 0010 00000000 		.zero	4
 1612              		.comm	dataFromCSV,1600080,32
 1613              		.section	.rodata.cst16,"aM",@progbits,16
 1614              		.align 16
 1615              	.LC39:
 1616 0000 8CC12729 		.long	690471308
 1617 0004 8FC4F875 		.long	1979237519
 1618 0008 F799FD43 		.long	1140693495
 1619 000c 57740FFF 		.long	-15764393
 1620              		.ident	"GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4"
 1621              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccFMm0hP.s:6      .text:0000000000000000 decrypt
     /tmp/ccFMm0hP.s:55     .text:0000000000000070 encrypt
     /tmp/ccFMm0hP.s:105    .text:00000000000000e0 decrypt64
     /tmp/ccFMm0hP.s:145    .text:0000000000000150 encrypt64
     /tmp/ccFMm0hP.s:186    .text:00000000000001c0 myHash
     /tmp/ccFMm0hP.s:252    .text:0000000000000270 format
     /tmp/ccFMm0hP.s:1610   .bss:0000000000000010 numLines
                            *COM*:0000000000186a50 dataFromCSV
     /tmp/ccFMm0hP.s:290    .text:00000000000002d0 find
     /tmp/ccFMm0hP.s:337    .text:0000000000000340 suffBal
     /tmp/ccFMm0hP.s:503    .text.startup:0000000000000000 main
     /tmp/ccFMm0hP.s:1604   .bss:0000000000000000 LOG
     /tmp/ccFMm0hP.s:1615   .rodata.cst16:0000000000000000 .LC39

UNDEFINED SYMBOLS
strtok
sscanf
arg_str0
arg_str1
arg_lit0
arg_end
arg_nullcheck
stderr
__fprintf_chk
flClose
flFreeError
arg_parse
__printf_chk
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadStandardFirmware
flGetFirmwareVersion
flGetFirmwareID
flIsCommCapable
flSelectConduit
flIsFPGARunning
fopen
malloc
__getdelim
flSleep
fflush
flIsDeviceAvailable
free
fclose
flReadChannel
flWriteChannel
