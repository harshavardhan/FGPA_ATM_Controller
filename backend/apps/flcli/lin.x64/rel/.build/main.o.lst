   1              		.file	"main.c"
   2              		.text
   3              		.p2align 4,,15
   4              		.globl	decrypt
   6              	decrypt:
   7              	.LFB75:
   8              		.cfi_startproc
   9 0000 53       		pushq	%rbx
  10              		.cfi_def_cfa_offset 16
  11              		.cfi_offset 3, -16
  12 0001 8B0F     		movl	(%rdi), %ecx
  13 0003 8B5704   		movl	4(%rdi), %edx
  14 0006 8B1E     		movl	(%rsi), %ebx
  15 0008 448B5E04 		movl	4(%rsi), %r11d
  16 000c 448B5608 		movl	8(%rsi), %r10d
  17 0010 448B4E0C 		movl	12(%rsi), %r9d
  18 0014 BE2037EF 		movl	$-957401312, %esi
  18      C6
  19 0019 0F1F8000 		.p2align 4,,10
  19      000000
  20              		.p2align 3
  21              	.L3:
  22 0020 89C8     		movl	%ecx, %eax
  23 0022 4189C8   		movl	%ecx, %r8d
  24 0025 C1E004   		sall	$4, %eax
  25 0028 41C1E805 		shrl	$5, %r8d
  26 002c 4501C8   		addl	%r9d, %r8d
  27 002f 4401D0   		addl	%r10d, %eax
  28 0032 4431C0   		xorl	%r8d, %eax
  29 0035 448D040E 		leal	(%rsi,%rcx), %r8d
  30 0039 4431C0   		xorl	%r8d, %eax
  31 003c 29C2     		subl	%eax, %edx
  32 003e 89D0     		movl	%edx, %eax
  33 0040 4189D0   		movl	%edx, %r8d
  34 0043 C1E004   		sall	$4, %eax
  35 0046 41C1E805 		shrl	$5, %r8d
  36 004a 4501D8   		addl	%r11d, %r8d
  37 004d 01D8     		addl	%ebx, %eax
  38 004f 4431C0   		xorl	%r8d, %eax
  39 0052 448D0432 		leal	(%rdx,%rsi), %r8d
  40 0056 4431C0   		xorl	%r8d, %eax
  41 0059 29C1     		subl	%eax, %ecx
  42 005b 81C64786 		addl	$1640531527, %esi
  42      C861
  43 0061 75BD     		jne	.L3
  44 0063 895704   		movl	%edx, 4(%rdi)
  45 0066 890F     		movl	%ecx, (%rdi)
  46 0068 5B       		popq	%rbx
  47              		.cfi_def_cfa_offset 8
  48 0069 C3       		ret
  49              		.cfi_endproc
  50              	.LFE75:
  52 006a 660F1F44 		.p2align 4,,15
  52      0000
  53              		.globl	encrypt
  55              	encrypt:
  56              	.LFB76:
  57              		.cfi_startproc
  58 0070 53       		pushq	%rbx
  59              		.cfi_def_cfa_offset 16
  60              		.cfi_offset 3, -16
  61 0071 8B0F     		movl	(%rdi), %ecx
  62 0073 8B5704   		movl	4(%rdi), %edx
  63 0076 8B1E     		movl	(%rsi), %ebx
  64 0078 448B5E04 		movl	4(%rsi), %r11d
  65 007c 448B5608 		movl	8(%rsi), %r10d
  66 0080 448B4E0C 		movl	12(%rsi), %r9d
  67 0084 31F6     		xorl	%esi, %esi
  68 0086 662E0F1F 		.p2align 4,,10
  68      84000000 
  68      0000
  69              		.p2align 3
  70              	.L8:
  71 0090 89D0     		movl	%edx, %eax
  72 0092 4189D0   		movl	%edx, %r8d
  73 0095 81EE4786 		subl	$1640531527, %esi
  73      C861
  74 009b C1E004   		sall	$4, %eax
  75 009e 41C1E805 		shrl	$5, %r8d
  76 00a2 4501D8   		addl	%r11d, %r8d
  77 00a5 01D8     		addl	%ebx, %eax
  78 00a7 4431C0   		xorl	%r8d, %eax
  79 00aa 448D0432 		leal	(%rdx,%rsi), %r8d
  80 00ae 4431C0   		xorl	%r8d, %eax
  81 00b1 01C1     		addl	%eax, %ecx
  82 00b3 89C8     		movl	%ecx, %eax
  83 00b5 4189C8   		movl	%ecx, %r8d
  84 00b8 C1E004   		sall	$4, %eax
  85 00bb 41C1E805 		shrl	$5, %r8d
  86 00bf 4501C8   		addl	%r9d, %r8d
  87 00c2 4401D0   		addl	%r10d, %eax
  88 00c5 4431C0   		xorl	%r8d, %eax
  89 00c8 448D0431 		leal	(%rcx,%rsi), %r8d
  90 00cc 4431C0   		xorl	%r8d, %eax
  91 00cf 01C2     		addl	%eax, %edx
  92 00d1 81FE2037 		cmpl	$-957401312, %esi
  92      EFC6
  93 00d7 75B7     		jne	.L8
  94 00d9 895704   		movl	%edx, 4(%rdi)
  95 00dc 890F     		movl	%ecx, (%rdi)
  96 00de 5B       		popq	%rbx
  97              		.cfi_def_cfa_offset 8
  98 00df C3       		ret
  99              		.cfi_endproc
 100              	.LFE76:
 102              		.p2align 4,,15
 103              		.globl	decrypt64
 105              	decrypt64:
 106              	.LFB77:
 107              		.cfi_startproc
 108 00e0 8B0F     		movl	(%rdi), %ecx
 109 00e2 8B5704   		movl	4(%rdi), %edx
 110 00e5 BE2037EF 		movl	$-957401312, %esi
 110      C6
 111 00ea 660F1F44 		.p2align 4,,10
 111      0000
 112              		.p2align 3
 113              	.L12:
 114 00f0 89C8     		movl	%ecx, %eax
 115 00f2 4189C8   		movl	%ecx, %r8d
 116 00f5 C1E004   		sall	$4, %eax
 117 00f8 41C1E805 		shrl	$5, %r8d
 118 00fc 4181E8A9 		subl	$15764393, %r8d
 118      8BF000
 119 0103 05F799FD 		addl	$1140693495, %eax
 119      43
 120 0108 4431C0   		xorl	%r8d, %eax
 121 010b 448D040E 		leal	(%rsi,%rcx), %r8d
 122 010f 4431C0   		xorl	%r8d, %eax
 123 0112 29C2     		subl	%eax, %edx
 124 0114 89D0     		movl	%edx, %eax
 125 0116 4189D0   		movl	%edx, %r8d
 126 0119 C1E004   		sall	$4, %eax
 127 011c 41C1E805 		shrl	$5, %r8d
 128 0120 4181C08F 		addl	$1979237519, %r8d
 128      C4F875
 129 0127 058CC127 		addl	$690471308, %eax
 129      29
 130 012c 4431C0   		xorl	%r8d, %eax
 131 012f 448D0432 		leal	(%rdx,%rsi), %r8d
 132 0133 4431C0   		xorl	%r8d, %eax
 133 0136 29C1     		subl	%eax, %ecx
 134 0138 81C64786 		addl	$1640531527, %esi
 134      C861
 135 013e 75B0     		jne	.L12
 136 0140 890F     		movl	%ecx, (%rdi)
 137 0142 895704   		movl	%edx, 4(%rdi)
 138 0145 C3       		ret
 139              		.cfi_endproc
 140              	.LFE77:
 142 0146 662E0F1F 		.p2align 4,,15
 142      84000000 
 142      0000
 143              		.globl	encrypt64
 145              	encrypt64:
 146              	.LFB78:
 147              		.cfi_startproc
 148 0150 8B0F     		movl	(%rdi), %ecx
 149 0152 8B5704   		movl	4(%rdi), %edx
 150 0155 31F6     		xorl	%esi, %esi
 151 0157 660F1F84 		.p2align 4,,10
 151      00000000 
 151      00
 152              		.p2align 3
 153              	.L15:
 154 0160 89D0     		movl	%edx, %eax
 155 0162 4189D0   		movl	%edx, %r8d
 156 0165 81EE4786 		subl	$1640531527, %esi
 156      C861
 157 016b C1E004   		sall	$4, %eax
 158 016e 41C1E805 		shrl	$5, %r8d
 159 0172 4181C08F 		addl	$1979237519, %r8d
 159      C4F875
 160 0179 058CC127 		addl	$690471308, %eax
 160      29
 161 017e 4431C0   		xorl	%r8d, %eax
 162 0181 448D0432 		leal	(%rdx,%rsi), %r8d
 163 0185 4431C0   		xorl	%r8d, %eax
 164 0188 01C1     		addl	%eax, %ecx
 165 018a 89C8     		movl	%ecx, %eax
 166 018c 4189C8   		movl	%ecx, %r8d
 167 018f C1E004   		sall	$4, %eax
 168 0192 41C1E805 		shrl	$5, %r8d
 169 0196 4181E8A9 		subl	$15764393, %r8d
 169      8BF000
 170 019d 05F799FD 		addl	$1140693495, %eax
 170      43
 171 01a2 4431C0   		xorl	%r8d, %eax
 172 01a5 448D0431 		leal	(%rcx,%rsi), %r8d
 173 01a9 4431C0   		xorl	%r8d, %eax
 174 01ac 01C2     		addl	%eax, %edx
 175 01ae 81FE2037 		cmpl	$-957401312, %esi
 175      EFC6
 176 01b4 75AA     		jne	.L15
 177 01b6 890F     		movl	%ecx, (%rdi)
 178 01b8 895704   		movl	%edx, 4(%rdi)
 179 01bb C3       		ret
 180              		.cfi_endproc
 181              	.LFE78:
 183 01bc 0F1F4000 		.p2align 4,,15
 184              		.globl	myHash
 186              	myHash:
 187              	.LFB79:
 188              		.cfi_startproc
 189 01c0 0FB73500 		movzwl	bankID(%rip), %esi
 189      000000
 190 01c7 BA010000 		movl	$1, %edx
 190      00
 191 01cc 440FB7C7 		movzwl	%di, %r8d
 192 01d0 89D0     		movl	%edx, %eax
 193 01d2 83E60F   		andl	$15, %esi
 194 01d5 0FB7CE   		movzwl	%si, %ecx
 195 01d8 D3E0     		sall	%cl, %eax
 196 01da 89C1     		movl	%eax, %ecx
 197 01dc 31C0     		xorl	%eax, %eax
 198 01de 83E701   		andl	$1, %edi
 199 01e1 0F45C1   		cmovne	%ecx, %eax
 200 01e4 8D4E01   		leal	1(%rsi), %ecx
 201 01e7 89D7     		movl	%edx, %edi
 202 01e9 83E10F   		andl	$15, %ecx
 203 01ec D3E7     		sall	%cl, %edi
 204 01ee 8D4E02   		leal	2(%rsi), %ecx
 205 01f1 01C7     		addl	%eax, %edi
 206 01f3 41F6C002 		testb	$2, %r8b
 207 01f7 0F44F8   		cmove	%eax, %edi
 208 01fa 83E10F   		andl	$15, %ecx
 209 01fd 89D0     		movl	%edx, %eax
 210 01ff D3E0     		sall	%cl, %eax
 211 0201 8D4E03   		leal	3(%rsi), %ecx
 212 0204 01F8     		addl	%edi, %eax
 213 0206 41F6C004 		testb	$4, %r8b
 214 020a 0F44C7   		cmove	%edi, %eax
 215 020d 83E10F   		andl	$15, %ecx
 216 0210 89D7     		movl	%edx, %edi
 217 0212 D3E7     		sall	%cl, %edi
 218 0214 8D4E04   		leal	4(%rsi), %ecx
 219 0217 01C7     		addl	%eax, %edi
 220 0219 41F6C008 		testb	$8, %r8b
 221 021d 0F44F8   		cmove	%eax, %edi
 222 0220 83E10F   		andl	$15, %ecx
 223 0223 89D0     		movl	%edx, %eax
 224 0225 D3E0     		sall	%cl, %eax
 225 0227 8D4E05   		leal	5(%rsi), %ecx
 226 022a 01F8     		addl	%edi, %eax
 227 022c 41F6C010 		testb	$16, %r8b
 228 0230 0F44C7   		cmove	%edi, %eax
 229 0233 83E10F   		andl	$15, %ecx
 230 0236 89D7     		movl	%edx, %edi
 231 0238 D3E7     		sall	%cl, %edi
 232 023a 8D4E06   		leal	6(%rsi), %ecx
 233 023d 01C7     		addl	%eax, %edi
 234 023f 41F6C020 		testb	$32, %r8b
 235 0243 0F44F8   		cmove	%eax, %edi
 236 0246 83E10F   		andl	$15, %ecx
 237 0249 89D0     		movl	%edx, %eax
 238 024b D3E0     		sall	%cl, %eax
 239 024d 8D4E07   		leal	7(%rsi), %ecx
 240 0250 01F8     		addl	%edi, %eax
 241 0252 41F6C040 		testb	$64, %r8b
 242 0256 0F44C7   		cmove	%edi, %eax
 243 0259 83E10F   		andl	$15, %ecx
 244 025c 89D7     		movl	%edx, %edi
 245 025e D3E7     		sall	%cl, %edi
 246 0260 8D4E08   		leal	8(%rsi), %ecx
 247 0263 01C7     		addl	%eax, %edi
 248 0265 41F6C080 		testb	$-128, %r8b
 249 0269 0F44F8   		cmove	%eax, %edi
 250 026c 83E10F   		andl	$15, %ecx
 251 026f 89D0     		movl	%edx, %eax
 252 0271 D3E0     		sall	%cl, %eax
 253 0273 8D4E09   		leal	9(%rsi), %ecx
 254 0276 01F8     		addl	%edi, %eax
 255 0278 41F7C000 		testl	$256, %r8d
 255      010000
 256 027f 0F44C7   		cmove	%edi, %eax
 257 0282 83E10F   		andl	$15, %ecx
 258 0285 89D7     		movl	%edx, %edi
 259 0287 D3E7     		sall	%cl, %edi
 260 0289 8D4E0A   		leal	10(%rsi), %ecx
 261 028c 01C7     		addl	%eax, %edi
 262 028e 41F7C000 		testl	$512, %r8d
 262      020000
 263 0295 0F44F8   		cmove	%eax, %edi
 264 0298 83E10F   		andl	$15, %ecx
 265 029b 89D0     		movl	%edx, %eax
 266 029d D3E0     		sall	%cl, %eax
 267 029f 8D4E0B   		leal	11(%rsi), %ecx
 268 02a2 01F8     		addl	%edi, %eax
 269 02a4 41F7C000 		testl	$1024, %r8d
 269      040000
 270 02ab 0F44C7   		cmove	%edi, %eax
 271 02ae 83E10F   		andl	$15, %ecx
 272 02b1 89D7     		movl	%edx, %edi
 273 02b3 D3E7     		sall	%cl, %edi
 274 02b5 8D4E0C   		leal	12(%rsi), %ecx
 275 02b8 01C7     		addl	%eax, %edi
 276 02ba 41F7C000 		testl	$2048, %r8d
 276      080000
 277 02c1 0F44F8   		cmove	%eax, %edi
 278 02c4 83E10F   		andl	$15, %ecx
 279 02c7 89D0     		movl	%edx, %eax
 280 02c9 D3E0     		sall	%cl, %eax
 281 02cb 8D4E0D   		leal	13(%rsi), %ecx
 282 02ce 01F8     		addl	%edi, %eax
 283 02d0 41F7C000 		testl	$4096, %r8d
 283      100000
 284 02d7 0F44C7   		cmove	%edi, %eax
 285 02da 83E10F   		andl	$15, %ecx
 286 02dd 89D7     		movl	%edx, %edi
 287 02df D3E7     		sall	%cl, %edi
 288 02e1 8D4E0E   		leal	14(%rsi), %ecx
 289 02e4 01C7     		addl	%eax, %edi
 290 02e6 41F7C000 		testl	$8192, %r8d
 290      200000
 291 02ed 0F44F8   		cmove	%eax, %edi
 292 02f0 83E10F   		andl	$15, %ecx
 293 02f3 89D0     		movl	%edx, %eax
 294 02f5 D3E0     		sall	%cl, %eax
 295 02f7 8D4E0F   		leal	15(%rsi), %ecx
 296 02fa 01F8     		addl	%edi, %eax
 297 02fc 41F7C000 		testl	$16384, %r8d
 297      400000
 298 0303 0F44C7   		cmove	%edi, %eax
 299 0306 83E10F   		andl	$15, %ecx
 300 0309 41C1F80F 		sarl	$15, %r8d
 301 030d D3E2     		sall	%cl, %edx
 302 030f 01C2     		addl	%eax, %edx
 303 0311 4585C0   		testl	%r8d, %r8d
 304 0314 0F45C2   		cmovne	%edx, %eax
 305 0317 C3       		ret
 306              		.cfi_endproc
 307              	.LFE79:
 309              		.section	.rodata.str1.1,"aMS",@progbits,1
 310              	.LC0:
 311 0000 2C00     		.string	","
 312              	.LC1:
 313 0002 256400   		.string	"%d"
 314              		.text
 315 0318 0F1F8400 		.p2align 4,,15
 315      00000000 
 316              		.globl	format
 318              	format:
 319              	.LFB80:
 320              		.cfi_startproc
 321 0320 53       		pushq	%rbx
 322              		.cfi_def_cfa_offset 16
 323              		.cfi_offset 3, -16
 324 0321 BE000000 		movl	$.LC0, %esi
 324      00
 325 0326 31DB     		xorl	%ebx, %ebx
 326 0328 E8000000 		call	strtok
 326      00
 327 032d 4885C0   		testq	%rax, %rax
 328 0330 743F     		je	.L17
 329              		.p2align 4,,10
 330 0332 660F1F44 		.p2align 3
 330      0000
 331              	.L23:
 332 0338 48630D00 		movslq	numLines(%rip), %rcx
 332      000000
 333 033f 4863D3   		movslq	%ebx, %rdx
 334 0342 4889C7   		movq	%rax, %rdi
 335 0345 BE000000 		movl	$.LC1, %esi
 335      00
 336 034a 31C0     		xorl	%eax, %eax
 337 034c 83C301   		addl	$1, %ebx
 338 034f 488D148A 		leaq	(%rdx,%rcx,4), %rdx
 339 0353 488D1495 		leaq	dataFromCSV(,%rdx,4), %rdx
 339      00000000 
 340 035b E8000000 		call	sscanf
 340      00
 341 0360 31FF     		xorl	%edi, %edi
 342 0362 BE000000 		movl	$.LC0, %esi
 342      00
 343 0367 E8000000 		call	strtok
 343      00
 344 036c 4885C0   		testq	%rax, %rax
 345 036f 75C7     		jne	.L23
 346              	.L17:
 347 0371 5B       		popq	%rbx
 348              		.cfi_def_cfa_offset 8
 349 0372 C3       		ret
 350              		.cfi_endproc
 351              	.LFE80:
 353 0373 66666666 		.p2align 4,,15
 353      2E0F1F84 
 353      00000000 
 353      00
 354              		.globl	find
 356              	find:
 357              	.LFB81:
 358              		.cfi_startproc
 359 0380 448B1500 		movl	numLines(%rip), %r10d
 359      000000
 360 0387 4585D2   		testl	%r10d, %r10d
 361 038a 7E54     		jle	.L32
 362 038c B8000000 		movl	$dataFromCSV+16, %eax
 362      00
 363 0391 41B90100 		movl	$1, %r9d
 363      0000
 364 0397 EB14     		jmp	.L30
 365 0399 0F1F8000 		.p2align 4,,10
 365      000000
 366              		.p2align 3
 367              	.L28:
 368 03a0 4183C101 		addl	$1, %r9d
 369 03a4 4883C010 		addq	$16, %rax
 370 03a8 4539D1   		cmpl	%r10d, %r9d
 371 03ab 7F33     		jg	.L32
 372              	.L30:
 373 03ad 663B38   		cmpw	(%rax), %di
 374 03b0 75EE     		jne	.L28
 375 03b2 663B7004 		cmpw	4(%rax), %si
 376 03b6 75E8     		jne	.L28
 377 03b8 4963C1   		movslq	%r9d, %rax
 378 03bb 4889C6   		movq	%rax, %rsi
 379 03be 48C1E604 		salq	$4, %rsi
 380 03c2 83BE0000 		cmpl	$1, dataFromCSV+8(%rsi)
 380      000001
 381 03c9 7418     		je	.L33
 382              	.L29:
 383 03cb 48C1E004 		salq	$4, %rax
 384 03cf 8B800000 		movl	dataFromCSV+12(%rax), %eax
 384      0000
 385 03d5 8901     		movl	%eax, (%rcx)
 386 03d7 458908   		movl	%r9d, (%r8)
 387 03da B8010000 		movl	$1, %eax
 387      00
 388 03df C3       		ret
 389              		.p2align 4,,10
 390              		.p2align 3
 391              	.L32:
 392 03e0 31C0     		xorl	%eax, %eax
 393 03e2 C3       		ret
 394              	.L33:
 395 03e3 C60201   		movb	$1, (%rdx)
 396 03e6 EBE3     		jmp	.L29
 397              		.cfi_endproc
 398              	.LFE81:
 400 03e8 0F1F8400 		.p2align 4,,15
 400      00000000 
 401              		.globl	suffBalUser
 403              	suffBalUser:
 404              	.LFB82:
 405              		.cfi_startproc
 406 03f0 393E     		cmpl	%edi, (%rsi)
 407 03f2 0F9EC0   		setle	%al
 408 03f5 C3       		ret
 409              		.cfi_endproc
 410              	.LFE82:
 412              		.section	.rodata.str1.8,"aMS",@progbits,1
 413              		.align 8
 414              	.LC2:
 415 0000 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 415      20202020 
 415      20202020 
 415      76656E64 
 415      6F722049 
 416              		.section	.rodata.str1.1
 417              	.LC3:
 418 0005 3C564944 		.string	"<VID:PID>"
 418      3A504944 
 418      3E00
 419              	.LC4:
 420 000f 69767000 		.string	"ivp"
 421              	.LC5:
 422 0013 6900     		.string	"i"
 423              		.section	.rodata.str1.8
 424 0035 000000   		.align 8
 425              	.LC6:
 426 0038 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 426      20202056 
 426      49442C20 
 426      50494420 
 426      616E6420 
 427              		.section	.rodata.str1.1
 428              	.LC7:
 429 0015 3C564944 		.string	"<VID:PID[:DID]>"
 429      3A504944 
 429      5B3A4449 
 429      445D3E00 
 430              	.LC8:
 431 0025 767000   		.string	"vp"
 432              	.LC9:
 433 0028 7600     		.string	"v"
 434              		.section	.rodata.str1.8
 435 006d 000000   		.align 8
 436              	.LC10:
 437 0070 20202020 		.string	"                    sets bank id"
 437      20202020 
 437      20202020 
 437      20202020 
 437      20202020 
 438              		.section	.rodata.str1.1
 439              	.LC11:
 440 002a 62616E6B 		.string	"bank id in decimal"
 440      20696420 
 440      696E2064 
 440      6563696D 
 440      616C00
 441              	.LC12:
 442 003d 62696400 		.string	"bid"
 443              	.LC13:
 444 0041 6200     		.string	"b"
 445              		.section	.rodata.str1.8
 446 0091 00000000 		.align 8
 446      000000
 447              	.LC14:
 448 0098 20202020 		.string	"                    starts atm service"
 448      20202020 
 448      20202020 
 448      20202020 
 448      20202020 
 449              		.section	.rodata.str1.1
 450              	.LC15:
 451 0043 61746D00 		.string	"atm"
 452              	.LC16:
 453 0047 7900     		.string	"y"
 454              		.section	.rodata.str1.8
 455 00bf 00       		.align 8
 456              	.LC17:
 457 00c0 20202020 		.string	"        gives log on more events"
 457      20202020 
 457      67697665 
 457      73206C6F 
 457      67206F6E 
 458              		.section	.rodata.str1.1
 459              	.LC18:
 460 0049 6C6F6700 		.string	"log"
 461              	.LC19:
 462 004d 6C00     		.string	"l"
 463              		.section	.rodata.str1.8
 464 00e1 00000000 		.align 8
 464      000000
 465              	.LC20:
 466 00e8 20202020 		.string	"                     print this help and exit"
 466      20202020 
 466      20202020 
 466      20202020 
 466      20202020 
 467              		.section	.rodata.str1.1
 468              	.LC21:
 469 004f 68656C70 		.string	"help"
 469      00
 470              	.LC22:
 471 0054 6800     		.string	"h"
 472              	.LC23:
 473 0056 666C636C 		.string	"flcli"
 473      6900
 474              	.LC24:
 475 005c 25733A20 		.string	"%s: insufficient memory\n"
 475      696E7375 
 475      66666963 
 475      69656E74 
 475      206D656D 
 476              	.LC25:
 477 0075 496E7661 		.string	"Invalid bankID"
 477      6C696420 
 477      62616E6B 
 477      494400
 478              	.LC26:
 479 0084 25730A00 		.string	"%s\n"
 480              		.section	.rodata.str1.8
 481 0116 0000     		.align 8
 482              	.LC27:
 483 0118 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2017 Jarvis \n\n Usage: %s"
 483      4C696E6B 
 483      20436F6D 
 483      6D616E64 
 483      2D4C696E 
 484              		.section	.rodata.str1.1
 485              	.LC28:
 486 0088 0A00     		.string	"\n"
 487              		.section	.rodata.str1.8
 488 015f 00       		.align 8
 489              	.LC29:
 490 0160 0A496E74 		.string	"\nInteract with an FPGALink device.\n\n"
 490      65726163 
 490      74207769 
 490      74682061 
 490      6E204650 
 491              		.section	.rodata.str1.1
 492              	.LC30:
 493 008a 2020252D 		.string	"  %-10s %s\n"
 493      31307320 
 493      25730A00 
 494              		.section	.rodata.str1.8
 495 0185 000000   		.align 8
 496              	.LC31:
 497 0188 54727920 		.string	"Try '%s --help' for more information.\n"
 497      27257320 
 497      2D2D6865 
 497      6C702720 
 497      666F7220 
 498 01af 00       		.align 8
 499              	.LC32:
 500 01b0 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 500      6D707469 
 500      6E672074 
 500      6F206F70 
 500      656E2063 
 501              		.section	.rodata.str1.1
 502              	.LC33:
 503 0096 4C6F6164 		.string	"Loading firmware into %s...\n"
 503      696E6720 
 503      6669726D 
 503      77617265 
 503      20696E74 
 504              	.LC34:
 505 00b3 41776169 		.string	"Awaiting renumeration"
 505      74696E67 
 505      2072656E 
 505      756D6572 
 505      6174696F 
 506              	.LC35:
 507 00c9 2E00     		.string	"."
 508              		.section	.rodata.str1.8
 509              		.align 8
 510              	.LC36:
 511 01e8 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 511      4C696E6B 
 511      20646576 
 511      69636520 
 511      64696420 
 512 021b 00000000 		.align 8
 512      00
 513              	.LC37:
 514 0220 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 514      6D707469 
 514      6E672074 
 514      6F206F70 
 514      656E2063 
 515 025d 000000   		.align 8
 516              	.LC38:
 517 0260 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 517      64206E6F 
 517      74206F70 
 517      656E2046 
 517      5047414C 
 518 02aa 00000000 		.align 8
 518      0000
 519              	.LC39:
 520 02b0 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 520      65637465 
 520      6420746F 
 520      20465047 
 520      414C696E 
 521              		.section	.rodata.str1.1
 522              	.LC40:
 523 00cb 722B00   		.string	"r+"
 524              	.LC41:
 525 00ce 53616D70 		.string	"SampleBackEndDatabase.csv"
 525      6C654261 
 525      636B456E 
 525      64446174 
 525      61626173 
 526              	.LC42:
 527 00e8 43737620 		.string	"Csv doesn't exist \n"
 527      646F6573 
 527      6E277420 
 527      65786973 
 527      74200A00 
 528              	.LC44:
 529 00fc 57726974 		.string	"Write to channel %u = %u \n"
 529      6520746F 
 529      20636861 
 529      6E6E656C 
 529      20257520 
 530              	.LC45:
 531 0117 52656164 		.string	"Read from channel 0 = %u \n"
 531      2066726F 
 531      6D206368 
 531      616E6E65 
 531      6C203020 
 532              	.LC46:
 533 0132 52656164 		.string	"Read from channel %u = %u \n"
 533      2066726F 
 533      6D206368 
 533      616E6E65 
 533      6C202575 
 534              	.LC47:
 535 014e 756E6861 		.string	"unhashedPin %u\n"
 535      73686564 
 535      50696E20 
 535      25750A00 
 536              	.LC48:
 537 015e 75736572 		.string	"userID %u\n"
 537      49442025 
 537      750A00
 538              	.LC49:
 539 0169 68617368 		.string	"hashedPin %u\n"
 539      65645069 
 539      6E202575 
 539      0A00
 540              	.LC50:
 541 0177 56616C69 		.string	"Valid user found \n"
 541      64207573 
 541      65722066 
 541      6F756E64 
 541      200A00
 542              		.section	.rodata.str1.8
 543 02ff 00       		.align 8
 544              	.LC51:
 545 0300 53756666 		.string	"Sufficient Balance in account\n"
 545      69636965 
 545      6E742042 
 545      616C616E 
 545      63652069 
 546              		.section	.rodata.str1.1
 547              	.LC52:
 548 018a 772B00   		.string	"w+"
 549              		.section	.rodata.str1.8
 550 031f 00       		.align 8
 551              	.LC53:
 552 0320 22557365 		.string	"\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (decimal)\""
 552      72204944 
 552      20286465 
 552      63696D61 
 552      6C29222C 
 553              		.section	.rodata.str1.1
 554              	.LC54:
 555 018d 257300   		.string	"%s"
 556              	.LC55:
 557 0190 496E7375 		.string	"Insufficient Balance \n"
 557      66666963 
 557      69656E74 
 557      2042616C 
 557      616E6365 
 558              	.LC56:
 559 01a7 55736572 		.string	"User has admin privileges \n"
 559      20686173 
 559      2061646D 
 559      696E2070 
 559      72697669 
 560              		.section	.rodata.str1.8
 561 0365 000000   		.align 8
 562              	.LC57:
 563 0368 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 563      46504741 
 563      4C696E6B 
 563      20646576 
 563      69636520 
 564 03b4 00000000 		.align 8
 565              	.LC58:
 566 03b8 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 566      6F6E2072 
 566      65717565 
 566      73746564 
 566      20627574 
 567              		.section	.rodata.str1.1
 568              	.LC59:
 569 01c3 496E7661 		.string	"Invalid user \n"
 569      6C696420 
 569      75736572 
 569      200A00
 570              		.section	.text.startup,"ax",@progbits
 571              		.p2align 4,,15
 572              		.globl	main
 574              	main:
 575              	.LFB83:
 576              		.cfi_startproc
 577 0000 4157     		pushq	%r15
 578              		.cfi_def_cfa_offset 16
 579              		.cfi_offset 15, -16
 580 0002 B9000000 		movl	$.LC2, %ecx
 580      00
 581 0007 BA000000 		movl	$.LC3, %edx
 581      00
 582 000c 4156     		pushq	%r14
 583              		.cfi_def_cfa_offset 24
 584              		.cfi_offset 14, -24
 585 000e 4155     		pushq	%r13
 586              		.cfi_def_cfa_offset 32
 587              		.cfi_offset 13, -32
 588 0010 4154     		pushq	%r12
 589              		.cfi_def_cfa_offset 40
 590              		.cfi_offset 12, -40
 591 0012 55       		pushq	%rbp
 592              		.cfi_def_cfa_offset 48
 593              		.cfi_offset 6, -48
 594 0013 53       		pushq	%rbx
 595              		.cfi_def_cfa_offset 56
 596              		.cfi_offset 3, -56
 597 0014 4881ECE8 		subq	$232, %rsp
 597      000000
 598              		.cfi_def_cfa_offset 288
 599 001b 897C2418 		movl	%edi, 24(%rsp)
 600 001f 48897424 		movq	%rsi, 16(%rsp)
 600      10
 601 0024 BF000000 		movl	$.LC5, %edi
 601      00
 602 0029 BE000000 		movl	$.LC4, %esi
 602      00
 603 002e E8000000 		call	arg_str0
 603      00
 604 0033 B9000000 		movl	$.LC6, %ecx
 604      00
 605 0038 BA000000 		movl	$.LC7, %edx
 605      00
 606 003d BE000000 		movl	$.LC8, %esi
 606      00
 607 0042 BF000000 		movl	$.LC9, %edi
 607      00
 608 0047 4989C6   		movq	%rax, %r14
 609 004a E8000000 		call	arg_str1
 609      00
 610 004f B9000000 		movl	$.LC10, %ecx
 610      00
 611 0054 BA000000 		movl	$.LC11, %edx
 611      00
 612 0059 BE000000 		movl	$.LC12, %esi
 612      00
 613 005e BF000000 		movl	$.LC13, %edi
 613      00
 614 0063 4989C7   		movq	%rax, %r15
 615 0066 E8000000 		call	arg_str0
 615      00
 616 006b BA000000 		movl	$.LC14, %edx
 616      00
 617 0070 BE000000 		movl	$.LC15, %esi
 617      00
 618 0075 BF000000 		movl	$.LC16, %edi
 618      00
 619 007a 4889C3   		movq	%rax, %rbx
 620 007d E8000000 		call	arg_lit0
 620      00
 621 0082 BA000000 		movl	$.LC17, %edx
 621      00
 622 0087 BE000000 		movl	$.LC18, %esi
 622      00
 623 008c BF000000 		movl	$.LC19, %edi
 623      00
 624 0091 48894424 		movq	%rax, 8(%rsp)
 624      08
 625 0096 E8000000 		call	arg_lit0
 625      00
 626 009b BA000000 		movl	$.LC20, %edx
 626      00
 627 00a0 BE000000 		movl	$.LC21, %esi
 627      00
 628 00a5 BF000000 		movl	$.LC22, %edi
 628      00
 629 00aa 4889C5   		movq	%rax, %rbp
 630 00ad E8000000 		call	arg_lit0
 630      00
 631 00b2 BF140000 		movl	$20, %edi
 631      00
 632 00b7 4989C4   		movq	%rax, %r12
 633 00ba E8000000 		call	arg_end
 633      00
 634 00bf 4989C5   		movq	%rax, %r13
 635 00c2 488B4424 		movq	8(%rsp), %rax
 635      08
 636 00c7 488DBC24 		leaq	160(%rsp), %rdi
 636      A0000000 
 637 00cf 4C89B424 		movq	%r14, 160(%rsp)
 637      A0000000 
 638 00d7 4C89BC24 		movq	%r15, 168(%rsp)
 638      A8000000 
 639 00df 48899C24 		movq	%rbx, 176(%rsp)
 639      B0000000 
 640 00e7 4889AC24 		movq	%rbp, 192(%rsp)
 640      C0000000 
 641 00ef 48898424 		movq	%rax, 184(%rsp)
 641      B8000000 
 642 00f7 4C89A424 		movq	%r12, 200(%rsp)
 642      C8000000 
 643 00ff 4C89AC24 		movq	%r13, 208(%rsp)
 643      D0000000 
 644 0107 48C74424 		movq	$0, 48(%rsp)
 644      30000000 
 644      00
 645 0110 48C78424 		movq	$0, 136(%rsp)
 645      88000000 
 645      00000000 
 646 011c E8000000 		call	arg_nullcheck
 646      00
 647 0121 85C0     		testl	%eax, %eax
 648 0123 7476     		je	.L36
 649 0125 488B3D00 		movq	stderr(%rip), %rdi
 649      000000
 650 012c B9000000 		movl	$.LC23, %ecx
 650      00
 651 0131 BA000000 		movl	$.LC24, %edx
 651      00
 652 0136 BE010000 		movl	$1, %esi
 652      00
 653 013b 31C0     		xorl	%eax, %eax
 654 013d BB010000 		movl	$1, %ebx
 654      00
 655 0142 E8000000 		call	__fprintf_chk
 655      00
 656              	.L37:
 657 0147 488B7C24 		movq	48(%rsp), %rdi
 657      30
 658 014c E8000000 		call	flClose
 658      00
 659 0151 488B8C24 		movq	136(%rsp), %rcx
 659      88000000 
 660 0159 4885C9   		testq	%rcx, %rcx
 661 015c 7425     		je	.L170
 662 015e 488B3D00 		movq	stderr(%rip), %rdi
 662      000000
 663 0165 BA000000 		movl	$.LC26, %edx
 663      00
 664 016a BE010000 		movl	$1, %esi
 664      00
 665 016f 31C0     		xorl	%eax, %eax
 666 0171 E8000000 		call	__fprintf_chk
 666      00
 667 0176 488BBC24 		movq	136(%rsp), %rdi
 667      88000000 
 668 017e E8000000 		call	flFreeError
 668      00
 669              	.L170:
 670 0183 4189D9   		movl	%ebx, %r9d
 671              	.L233:
 672 0186 4881C4E8 		addq	$232, %rsp
 672      000000
 673              		.cfi_remember_state
 674              		.cfi_def_cfa_offset 56
 675 018d 4489C8   		movl	%r9d, %eax
 676 0190 5B       		popq	%rbx
 677              		.cfi_def_cfa_offset 48
 678 0191 5D       		popq	%rbp
 679              		.cfi_def_cfa_offset 40
 680 0192 415C     		popq	%r12
 681              		.cfi_def_cfa_offset 32
 682 0194 415D     		popq	%r13
 683              		.cfi_def_cfa_offset 24
 684 0196 415E     		popq	%r14
 685              		.cfi_def_cfa_offset 16
 686 0198 415F     		popq	%r15
 687              		.cfi_def_cfa_offset 8
 688 019a C3       		ret
 689              	.L36:
 690              		.cfi_restore_state
 691 019b 488B7424 		movq	16(%rsp), %rsi
 691      10
 692 01a0 8B7C2418 		movl	24(%rsp), %edi
 693 01a4 488D9424 		leaq	160(%rsp), %rdx
 693      A0000000 
 694 01ac 8944241C 		movl	%eax, 28(%rsp)
 695 01b0 E8000000 		call	arg_parse
 695      00
 696 01b5 837D6000 		cmpl	$0, 96(%rbp)
 697 01b9 89C1     		movl	%eax, %ecx
 698 01bb 448B4C24 		movl	28(%rsp), %r9d
 698      1C
 699 01c0 7E07     		jle	.L38
 700 01c2 C6050000 		movb	$1, LOG(%rip)
 700      000001
 701              	.L38:
 702 01c9 837B6000 		cmpl	$0, 96(%rbx)
 703 01cd 7E34     		jle	.L39
 704 01cf 488B4368 		movq	104(%rbx), %rax
 705 01d3 31F6     		xorl	%esi, %esi
 706 01d5 BA0A0000 		movl	$10, %edx
 706      00
 707 01da 894C2410 		movl	%ecx, 16(%rsp)
 708 01de 44894C24 		movl	%r9d, 24(%rsp)
 708      18
 709 01e3 488B38   		movq	(%rax), %rdi
 710 01e6 E8000000 		call	strtol
 710      00
 711 01eb 83F81F   		cmpl	$31, %eax
 712 01ee 89050000 		movl	%eax, bankID(%rip)
 712      0000
 713 01f4 448B4C24 		movl	24(%rsp), %r9d
 713      18
 714 01f9 8B4C2410 		movl	16(%rsp), %ecx
 715 01fd 0F874601 		ja	.L60
 715      0000
 716              	.L39:
 717 0203 41837C24 		cmpl	$0, 96(%r12)
 717      6000
 718 0209 7E60     		jle	.L41
 719 020b BA000000 		movl	$.LC23, %edx
 719      00
 720 0210 BE000000 		movl	$.LC27, %esi
 720      00
 721 0215 BF010000 		movl	$1, %edi
 721      00
 722 021a 31C0     		xorl	%eax, %eax
 723 021c 31DB     		xorl	%ebx, %ebx
 724 021e E8000000 		call	__printf_chk
 724      00
 725 0223 488B3D00 		movq	stdout(%rip), %rdi
 725      000000
 726 022a 488DB424 		leaq	160(%rsp), %rsi
 726      A0000000 
 727 0232 BA000000 		movl	$.LC28, %edx
 727      00
 728 0237 E8000000 		call	arg_print_syntax
 728      00
 729 023c BE000000 		movl	$.LC29, %esi
 729      00
 730 0241 BF010000 		movl	$1, %edi
 730      00
 731 0246 31C0     		xorl	%eax, %eax
 732 0248 E8000000 		call	__printf_chk
 732      00
 733 024d 488B3D00 		movq	stdout(%rip), %rdi
 733      000000
 734 0254 488DB424 		leaq	160(%rsp), %rsi
 734      A0000000 
 735 025c BA000000 		movl	$.LC30, %edx
 735      00
 736 0261 E8000000 		call	arg_print_glossary
 736      00
 737 0266 E9DCFEFF 		jmp	.L37
 737      FF
 738              	.L41:
 739 026b 85C9     		testl	%ecx, %ecx
 740 026d 7E3B     		jle	.L42
 741 026f 488B3D00 		movq	stdout(%rip), %rdi
 741      000000
 742 0276 BA000000 		movl	$.LC23, %edx
 742      00
 743 027b 4C89EE   		movq	%r13, %rsi
 744 027e E8000000 		call	arg_print_errors
 744      00
 745 0283 B9000000 		movl	$.LC23, %ecx
 745      00
 746 0288 BA000000 		movl	$.LC31, %edx
 746      00
 747              	.L238:
 748 028d 488B3D00 		movq	stderr(%rip), %rdi
 748      000000
 749 0294 BE010000 		movl	$1, %esi
 749      00
 750 0299 31C0     		xorl	%eax, %eax
 751 029b BB0C0000 		movl	$12, %ebx
 751      00
 752 02a0 E8000000 		call	__fprintf_chk
 752      00
 753 02a5 E99DFEFF 		jmp	.L37
 753      FF
 754              	.L42:
 755 02aa 488DB424 		leaq	136(%rsp), %rsi
 755      88000000 
 756 02b2 31FF     		xorl	%edi, %edi
 757 02b4 44894C24 		movl	%r9d, 24(%rsp)
 757      18
 758 02b9 BB010000 		movl	$1, %ebx
 758      00
 759 02be E8000000 		call	flInitialise
 759      00
 760 02c3 85C0     		testl	%eax, %eax
 761 02c5 0F857CFE 		jne	.L37
 761      FFFF
 762 02cb 498B4768 		movq	104(%r15), %rax
 763 02cf BE000000 		movl	$.LC32, %esi
 763      00
 764 02d4 BF010000 		movl	$1, %edi
 764      00
 765 02d9 488B18   		movq	(%rax), %rbx
 766 02dc 31C0     		xorl	%eax, %eax
 767 02de 4889DA   		movq	%rbx, %rdx
 768 02e1 E8000000 		call	__printf_chk
 768      00
 769 02e6 488D7424 		leaq	48(%rsp), %rsi
 769      30
 770 02eb 31D2     		xorl	%edx, %edx
 771 02ed 4889DF   		movq	%rbx, %rdi
 772 02f0 E8000000 		call	flOpen
 772      00
 773 02f5 85C0     		testl	%eax, %eax
 774 02f7 448B4C24 		movl	24(%rsp), %r9d
 774      18
 775 02fc 0F84B000 		je	.L43
 775      0000
 776 0302 41837E60 		cmpl	$0, 96(%r14)
 776      00
 777 0307 7465     		je	.L44
 778 0309 498B4668 		movq	104(%r14), %rax
 779 030d BE000000 		movl	$.LC33, %esi
 779      00
 780 0312 BF010000 		movl	$1, %edi
 780      00
 781 0317 488B28   		movq	(%rax), %rbp
 782 031a 31C0     		xorl	%eax, %eax
 783 031c 4889EA   		movq	%rbp, %rdx
 784 031f E8000000 		call	__printf_chk
 784      00
 785 0324 488D9424 		leaq	136(%rsp), %rdx
 785      88000000 
 786 032c 4889DE   		movq	%rbx, %rsi
 787 032f 4889EF   		movq	%rbp, %rdi
 788 0332 E8000000 		call	flLoadStandardFirmware
 788      00
 789 0337 85C0     		testl	%eax, %eax
 790 0339 0F84CD01 		je	.L239
 790      0000
 791              	.L72:
 792 033f BB010000 		movl	$1, %ebx
 792      00
 793 0344 E9FEFDFF 		jmp	.L37
 793      FF
 794              	.L60:
 795 0349 BA000000 		movl	$.LC25, %edx
 795      00
 796 034e BE000000 		movl	$.LC26, %esi
 796      00
 797 0353 BF010000 		movl	$1, %edi
 797      00
 798 0358 31C0     		xorl	%eax, %eax
 799 035a 44894C24 		movl	%r9d, 8(%rsp)
 799      08
 800 035f E8000000 		call	__printf_chk
 800      00
 801 0364 448B4C24 		movl	8(%rsp), %r9d
 801      08
 802 0369 E918FEFF 		jmp	.L233
 802      FF
 803              	.L44:
 804 036e 4889D9   		movq	%rbx, %rcx
 805 0371 BA000000 		movl	$.LC38, %edx
 805      00
 806 0376 E912FFFF 		jmp	.L238
 806      FF
 807              	.L48:
 808 037b 4889DA   		movq	%rbx, %rdx
 809 037e BE000000 		movl	$.LC37, %esi
 809      00
 810 0383 BF010000 		movl	$1, %edi
 810      00
 811 0388 31C0     		xorl	%eax, %eax
 812 038a 44894C24 		movl	%r9d, 24(%rsp)
 812      18
 813 038f E8000000 		call	__printf_chk
 813      00
 814 0394 488D9424 		leaq	136(%rsp), %rdx
 814      88000000 
 815 039c 488D7424 		leaq	48(%rsp), %rsi
 815      30
 816 03a1 4889DF   		movq	%rbx, %rdi
 817 03a4 E8000000 		call	flOpen
 817      00
 818 03a9 85C0     		testl	%eax, %eax
 819 03ab 448B4C24 		movl	24(%rsp), %r9d
 819      18
 820 03b0 758D     		jne	.L72
 821              	.L43:
 822 03b2 488B7C24 		movq	48(%rsp), %rdi
 822      30
 823 03b7 44894C24 		movl	%r9d, 24(%rsp)
 823      18
 824 03bc E8000000 		call	flGetFirmwareVersion
 824      00
 825 03c1 488B7C24 		movq	48(%rsp), %rdi
 825      30
 826 03c6 89C5     		movl	%eax, %ebp
 827 03c8 E8000000 		call	flGetFirmwareID
 827      00
 828 03cd 4189E8   		movl	%ebp, %r8d
 829 03d0 0FB7C8   		movzwl	%ax, %ecx
 830 03d3 4889DA   		movq	%rbx, %rdx
 831 03d6 BE000000 		movl	$.LC39, %esi
 831      00
 832 03db BF010000 		movl	$1, %edi
 832      00
 833 03e0 31C0     		xorl	%eax, %eax
 834 03e2 E8000000 		call	__printf_chk
 834      00
 835 03e7 488B7C24 		movq	48(%rsp), %rdi
 835      30
 836 03ec BE010000 		movl	$1, %esi
 836      00
 837 03f1 E8000000 		call	flIsCommCapable
 837      00
 838 03f6 488B4C24 		movq	8(%rsp), %rcx
 838      08
 839 03fb 83796000 		cmpl	$0, 96(%rcx)
 840 03ff 0F8ED801 		jle	.L181
 840      0000
 841 0405 84C0     		testb	%al, %al
 842 0407 448B4C24 		movl	24(%rsp), %r9d
 842      18
 843 040c 0F84ED00 		je	.L50
 843      0000
 844 0412 488B7C24 		movq	48(%rsp), %rdi
 844      30
 845 0417 488D9424 		leaq	136(%rsp), %rdx
 845      88000000 
 846 041f BE010000 		movl	$1, %esi
 846      00
 847 0424 44894C24 		movl	%r9d, 8(%rsp)
 847      08
 848 0429 E8000000 		call	flSelectConduit
 848      00
 849 042e 85C0     		testl	%eax, %eax
 850 0430 448B4C24 		movl	8(%rsp), %r9d
 850      08
 851 0435 0F8504FF 		jne	.L72
 851      FFFF
 852 043b 488B7C24 		movq	48(%rsp), %rdi
 852      30
 853 0440 488D9424 		leaq	136(%rsp), %rdx
 853      88000000 
 854 0448 488D7424 		leaq	32(%rsp), %rsi
 854      20
 855 044d 44894C24 		movl	%r9d, 8(%rsp)
 855      08
 856 0452 E8000000 		call	flIsFPGARunning
 856      00
 857 0457 85C0     		testl	%eax, %eax
 858 0459 0F85E0FE 		jne	.L72
 858      FFFF
 859 045f 807C2420 		cmpb	$0, 32(%rsp)
 859      00
 860 0464 0F847A01 		je	.L54
 860      0000
 861 046a BE000000 		movl	$.LC40, %esi
 861      00
 862 046f BF000000 		movl	$.LC41, %edi
 862      00
 863 0474 E8000000 		call	fopen
 863      00
 864 0479 4885C0   		testq	%rax, %rax
 865 047c 4889C3   		movq	%rax, %rbx
 866 047f 448B4C24 		movl	8(%rsp), %r9d
 866      08
 867 0484 0F84FB0C 		je	.L240
 867      0000
 868 048a BF640000 		movl	$100, %edi
 868      00
 869 048f 44894C24 		movl	%r9d, 8(%rsp)
 869      08
 870 0494 48C74424 		movq	$100, 64(%rsp)
 870      40640000 
 870      00
 871 049d E8000000 		call	malloc
 871      00
 872 04a2 448B4C24 		movl	8(%rsp), %r9d
 872      08
 873 04a7 48894424 		movq	%rax, 80(%rsp)
 873      50
 874 04ac EB07     		jmp	.L57
 875              	.L58:
 876 04ae 83050000 		addl	$1, numLines(%rip)
 876      000001
 877              	.L57:
 878 04b5 488D7424 		leaq	64(%rsp), %rsi
 878      40
 879 04ba 488D7C24 		leaq	80(%rsp), %rdi
 879      50
 880 04bf 4889D9   		movq	%rbx, %rcx
 881 04c2 BA0A0000 		movl	$10, %edx
 881      00
 882 04c7 44894C24 		movl	%r9d, 8(%rsp)
 882      08
 883 04cc E8000000 		call	__getdelim
 883      00
 884 04d1 4883C001 		addq	$1, %rax
 885 04d5 448B4C24 		movl	8(%rsp), %r9d
 885      08
 886 04da 0F841101 		je	.L241
 886      0000
 887 04e0 833D0000 		cmpl	$0, numLines(%rip)
 887      000000
 888 04e7 74C5     		je	.L58
 889 04e9 488B7C24 		movq	80(%rsp), %rdi
 889      50
 890 04ee 44894C24 		movl	%r9d, 8(%rsp)
 890      08
 891 04f3 E8000000 		call	format
 891      00
 892 04f8 448B4C24 		movl	8(%rsp), %r9d
 892      08
 893 04fd EBAF     		jmp	.L58
 894              	.L50:
 895 04ff 4889D9   		movq	%rbx, %rcx
 896 0502 BA000000 		movl	$.LC58, %edx
 896      00
 897 0507 E981FDFF 		jmp	.L238
 897      FF
 898              	.L239:
 899 050c BE000000 		movl	$.LC34, %esi
 899      00
 900 0511 BF010000 		movl	$1, %edi
 900      00
 901 0516 BD3C0000 		movl	$60, %ebp
 901      00
 902 051b E8000000 		call	__printf_chk
 902      00
 903 0520 BFE80300 		movl	$1000, %edi
 903      00
 904 0525 4C8DA424 		leaq	144(%rsp), %r12
 904      90000000 
 905 052d E8000000 		call	flSleep
 905      00
 906 0532 448B4C24 		movl	24(%rsp), %r9d
 906      18
 907 0537 EB05     		jmp	.L47
 908              	.L242:
 909 0539 83ED01   		subl	$1, %ebp
 910 053c 7456     		je	.L46
 911              	.L47:
 912 053e BE000000 		movl	$.LC35, %esi
 912      00
 913 0543 BF010000 		movl	$1, %edi
 913      00
 914 0548 31C0     		xorl	%eax, %eax
 915 054a 44894C24 		movl	%r9d, 24(%rsp)
 915      18
 916 054f E8000000 		call	__printf_chk
 916      00
 917 0554 488B3D00 		movq	stdout(%rip), %rdi
 917      000000
 918 055b E8000000 		call	fflush
 918      00
 919 0560 488D9424 		leaq	136(%rsp), %rdx
 919      88000000 
 920 0568 4C89E6   		movq	%r12, %rsi
 921 056b 4889DF   		movq	%rbx, %rdi
 922 056e E8000000 		call	flIsDeviceAvailable
 922      00
 923 0573 85C0     		testl	%eax, %eax
 924 0575 0F85C4FD 		jne	.L72
 924      FFFF
 925 057b BFFA0000 		movl	$250, %edi
 925      00
 926 0580 E8000000 		call	flSleep
 926      00
 927 0585 80BC2490 		cmpb	$0, 144(%rsp)
 927      00000000 
 928 058d 448B4C24 		movl	24(%rsp), %r9d
 928      18
 929 0592 74A5     		je	.L242
 930              	.L46:
 931 0594 31C0     		xorl	%eax, %eax
 932 0596 BE000000 		movl	$.LC28, %esi
 932      00
 933 059b BF010000 		movl	$1, %edi
 933      00
 934 05a0 44894C24 		movl	%r9d, 24(%rsp)
 934      18
 935 05a5 E8000000 		call	__printf_chk
 935      00
 936 05aa 80BC2490 		cmpb	$0, 144(%rsp)
 936      00000000 
 937 05b2 448B4C24 		movl	24(%rsp), %r9d
 937      18
 938 05b7 0F85BEFD 		jne	.L48
 938      FFFF
 939 05bd 488B3D00 		movq	stderr(%rip), %rdi
 939      000000
 940 05c4 4889D9   		movq	%rbx, %rcx
 941 05c7 BA000000 		movl	$.LC36, %edx
 941      00
 942 05cc BE010000 		movl	$1, %esi
 942      00
 943 05d1 31C0     		xorl	%eax, %eax
 944 05d3 E8000000 		call	__fprintf_chk
 944      00
 945 05d8 E962FDFF 		jmp	.L72
 945      FF
 946              	.L181:
 947 05dd 31DB     		xorl	%ebx, %ebx
 948 05df E963FBFF 		jmp	.L37
 948      FF
 949              	.L54:
 950 05e4 4889D9   		movq	%rbx, %rcx
 951 05e7 BA000000 		movl	$.LC57, %edx
 951      00
 952 05ec E99CFCFF 		jmp	.L238
 952      FF
 953              	.L241:
 954 05f1 488B7C24 		movq	80(%rsp), %rdi
 954      50
 955 05f6 832D0000 		subl	$1, numLines(%rip)
 955      000001
 956 05fd E8000000 		call	free
 956      00
 957 0602 4889DF   		movq	%rbx, %rdi
 958 0605 E8000000 		call	fclose
 958      00
 959 060a 833D0000 		cmpl	$31, bankID(%rip)
 959      00001F
 960 0611 448B4C24 		movl	8(%rsp), %r9d
 960      08
 961 0616 0F872DFD 		ja	.L60
 961      FFFF
 962 061c 0FB63D00 		movzbl	max500Limit(%rip), %edi
 962      000000
 963 0623 0FB63500 		movzbl	max1000Limit(%rip), %esi
 963      000000
 964 062a BA080000 		movl	$8, %edx
 964      00
 965 062f 8B050000 		movl	maxAmountCanBeDispensed(%rip), %eax
 965      0000
 966 0635 440FB60D 		movzbl	max100Limit(%rip), %r9d
 966      00000000 
 967 063d 31C9     		xorl	%ecx, %ecx
 968 063f 440FB605 		movzbl	max2000Limit(%rip), %r8d
 968      00000000 
 969 0647 89442464 		movl	%eax, 100(%rsp)
 970 064b C1E708   		sall	$8, %edi
 971 064e C1E610   		sall	$16, %esi
 972 0651 31C0     		xorl	%eax, %eax
 973              	.L61:
 974 0653 85C9     		testl	%ecx, %ecx
 975 0655 0F84210B 		je	.L243
 975      0000
 976 065b 83F908   		cmpl	$8, %ecx
 977 065e 0F84110B 		je	.L244
 977      0000
 978 0664 83F910   		cmpl	$16, %ecx
 979 0667 0F84000B 		je	.L245
 979      0000
 980 066d 4589C2   		movl	%r8d, %r10d
 981 0670 41D3E2   		sall	%cl, %r10d
 982 0673 4401D0   		addl	%r10d, %eax
 983 0676 83FA20   		cmpl	$32, %edx
 984 0679 7408     		je	.L246
 985              	.L66:
 986 067b 83C108   		addl	$8, %ecx
 987 067e 83C208   		addl	$8, %edx
 988 0681 EBD0     		jmp	.L61
 989              	.L246:
 990 0683 4C8DA424 		leaq	144(%rsp), %r12
 990      90000000 
 991 068b 660F6F05 		movdqa	.LC43(%rip), %xmm0
 991      00000000 
 992 0693 488D7C24 		leaq	96(%rsp), %rdi
 992      60
 993 0698 BB120000 		movl	$18, %ebx
 993      00
 994 069d BD010000 		movl	$1, %ebp
 994      00
 995 06a2 4C89E6   		movq	%r12, %rsi
 996 06a5 89442460 		movl	%eax, 96(%rsp)
 997 06a9 660F7F84 		movdqa	%xmm0, 144(%rsp)
 997      24900000 
 997      00
 998 06b2 E8000000 		call	encrypt
 998      00
 999              	.L74:
 1000 06b7 8D3CDD70 		leal	112(,%rbx,8), %edi
 1000      000000
 1001 06be 31C0     		xorl	%eax, %eax
 1002 06c0 31D2     		xorl	%edx, %edx
 1003 06c2 8B742460 		movl	96(%rsp), %esi
 1004              	.L69:
 1005 06c6 8D0C07   		leal	(%rdi,%rax), %ecx
 1006 06c9 4189EB   		movl	%ebp, %r11d
 1007 06cc 41D3E3   		sall	%cl, %r11d
 1008 06cf 4185F3   		testl	%esi, %r11d
 1009 06d2 740B     		je	.L67
 1010 06d4 4189EB   		movl	%ebp, %r11d
 1011 06d7 89C1     		movl	%eax, %ecx
 1012 06d9 41D3E3   		sall	%cl, %r11d
 1013 06dc 4401DA   		addl	%r11d, %edx
 1014              	.L67:
 1015 06df 83C001   		addl	$1, %eax
 1016 06e2 83F808   		cmpl	$8, %eax
 1017 06e5 75DF     		jne	.L69
 1018 06e7 BFE80300 		movl	$1000, %edi
 1018      00
 1019 06ec 88942490 		movb	%dl, 144(%rsp)
 1019      000000
 1020 06f3 E8000000 		call	flSleep
 1020      00
 1021 06f8 488B7C24 		movq	48(%rsp), %rdi
 1021      30
 1022 06fd 4C8D8424 		leaq	136(%rsp), %r8
 1022      88000000 
 1023 0705 4C89E1   		movq	%r12, %rcx
 1024 0708 BA010000 		movl	$1, %edx
 1024      00
 1025 070d 89DE     		movl	%ebx, %esi
 1026 070f E8000000 		call	flWriteChannel
 1026      00
 1027 0714 803D0000 		cmpb	$0, LOG(%rip)
 1027      000000
 1028 071b 4189C5   		movl	%eax, %r13d
 1029 071e 741B     		je	.L70
 1030 0720 0FB68C24 		movzbl	144(%rsp), %ecx
 1030      90000000 
 1031 0728 89DA     		movl	%ebx, %edx
 1032 072a BE000000 		movl	$.LC44, %esi
 1032      00
 1033 072f BF010000 		movl	$1, %edi
 1033      00
 1034 0734 31C0     		xorl	%eax, %eax
 1035 0736 E8000000 		call	__printf_chk
 1035      00
 1036              	.L70:
 1037 073b 4585ED   		testl	%r13d, %r13d
 1038 073e 0F85FBFB 		jne	.L72
 1038      FFFF
 1039 0744 83C301   		addl	$1, %ebx
 1040 0747 83FB16   		cmpl	$22, %ebx
 1041 074a 0F8567FF 		jne	.L74
 1041      FFFF
 1042 0750 BD010000 		movl	$1, %ebp
 1042      00
 1043              	.L81:
 1044 0755 8B742464 		movl	100(%rsp), %esi
 1045 0759 8D3CDD50 		leal	80(,%rbx,8), %edi
 1045      000000
 1046 0760 31C0     		xorl	%eax, %eax
 1047 0762 31D2     		xorl	%edx, %edx
 1048              	.L77:
 1049 0764 8D0C07   		leal	(%rdi,%rax), %ecx
 1050 0767 4189EA   		movl	%ebp, %r10d
 1051 076a 41D3E2   		sall	%cl, %r10d
 1052 076d 4185F2   		testl	%esi, %r10d
 1053 0770 740B     		je	.L75
 1054 0772 4189EB   		movl	%ebp, %r11d
 1055 0775 89C1     		movl	%eax, %ecx
 1056 0777 41D3E3   		sall	%cl, %r11d
 1057 077a 4401DA   		addl	%r11d, %edx
 1058              	.L75:
 1059 077d 83C001   		addl	$1, %eax
 1060 0780 83F808   		cmpl	$8, %eax
 1061 0783 75DF     		jne	.L77
 1062 0785 BFE80300 		movl	$1000, %edi
 1062      00
 1063 078a 88942490 		movb	%dl, 144(%rsp)
 1063      000000
 1064 0791 E8000000 		call	flSleep
 1064      00
 1065 0796 488B7C24 		movq	48(%rsp), %rdi
 1065      30
 1066 079b 4C8D8424 		leaq	136(%rsp), %r8
 1066      88000000 
 1067 07a3 4C89E1   		movq	%r12, %rcx
 1068 07a6 BA010000 		movl	$1, %edx
 1068      00
 1069 07ab 89DE     		movl	%ebx, %esi
 1070 07ad E8000000 		call	flWriteChannel
 1070      00
 1071 07b2 803D0000 		cmpb	$0, LOG(%rip)
 1071      000000
 1072 07b9 4189C5   		movl	%eax, %r13d
 1073 07bc 741B     		je	.L78
 1074 07be 0FB68C24 		movzbl	144(%rsp), %ecx
 1074      90000000 
 1075 07c6 89DA     		movl	%ebx, %edx
 1076 07c8 BE000000 		movl	$.LC44, %esi
 1076      00
 1077 07cd BF010000 		movl	$1, %edi
 1077      00
 1078 07d2 31C0     		xorl	%eax, %eax
 1079 07d4 E8000000 		call	__printf_chk
 1079      00
 1080              	.L78:
 1081 07d9 4585ED   		testl	%r13d, %r13d
 1082 07dc 0F855DFB 		jne	.L72
 1082      FFFF
 1083 07e2 83C301   		addl	$1, %ebx
 1084 07e5 83FB1A   		cmpl	$26, %ebx
 1085 07e8 0F8567FF 		jne	.L81
 1085      FFFF
 1086              	.L169:
 1087 07ee BF010000 		movl	$1, %edi
 1087      00
 1088 07f3 E8000000 		call	malloc
 1088      00
 1089 07f8 488B7C24 		movq	48(%rsp), %rdi
 1089      30
 1090 07fd 4C8D8424 		leaq	136(%rsp), %r8
 1090      88000000 
 1091 0805 31F6     		xorl	%esi, %esi
 1092 0807 4889C1   		movq	%rax, %rcx
 1093 080a BA010000 		movl	$1, %edx
 1093      00
 1094 080f 4889C5   		movq	%rax, %rbp
 1095 0812 E8000000 		call	flReadChannel
 1095      00
 1096 0817 85C0     		testl	%eax, %eax
 1097 0819 0F8520FB 		jne	.L72
 1097      FFFF
 1098 081f 803D0000 		cmpb	$0, LOG(%rip)
 1098      000000
 1099 0826 0F855503 		jne	.L247
 1099      0000
 1100              	.L83:
 1101 082c 440FB66D 		movzbl	0(%rbp), %r13d
 1101      00
 1102 0831 418D45FF 		leal	-1(%r13), %eax
 1103 0835 3C01     		cmpb	$1, %al
 1104 0837 760C     		jbe	.L248
 1105              	.L168:
 1106 0839 BFE80300 		movl	$1000, %edi
 1106      00
 1107 083e E8000000 		call	flSleep
 1107      00
 1108 0843 EBA9     		jmp	.L169
 1109              	.L248:
 1110 0845 BB020000 		movl	$2, %ebx
 1110      00
 1111              	.L87:
 1112 084a BFE80300 		movl	$1000, %edi
 1112      00
 1113 084f E8000000 		call	flSleep
 1113      00
 1114 0854 488B7C24 		movq	48(%rsp), %rdi
 1114      30
 1115 0859 4C8D8424 		leaq	136(%rsp), %r8
 1115      88000000 
 1116 0861 31F6     		xorl	%esi, %esi
 1117 0863 4889E9   		movq	%rbp, %rcx
 1118 0866 BA010000 		movl	$1, %edx
 1118      00
 1119 086b E8000000 		call	flReadChannel
 1119      00
 1120 0870 85C0     		testl	%eax, %eax
 1121 0872 0F85C7FA 		jne	.L72
 1121      FFFF
 1122 0878 803D0000 		cmpb	$0, LOG(%rip)
 1122      000000
 1123 087f 7413     		je	.L85
 1124 0881 0FB65500 		movzbl	0(%rbp), %edx
 1125 0885 BE000000 		movl	$.LC45, %esi
 1125      00
 1126 088a BF010000 		movl	$1, %edi
 1126      00
 1127 088f E8000000 		call	__printf_chk
 1127      00
 1128              	.L85:
 1129 0894 443A6D00 		cmpb	0(%rbp), %r13b
 1130 0898 759F     		jne	.L168
 1131 089a 80EB01   		subb	$1, %bl
 1132 089d 75AB     		jne	.L87
 1133 089f C7442470 		movl	$0, 112(%rsp)
 1133      00000000 
 1134 08a7 C7442474 		movl	$0, 116(%rsp)
 1134      00000000 
 1135 08af 4531F6   		xorl	%r14d, %r14d
 1136 08b2 BB010000 		movl	$1, %ebx
 1136      00
 1137              	.L171:
 1138 08b7 BF010000 		movl	$1, %edi
 1138      00
 1139 08bc E8000000 		call	malloc
 1139      00
 1140 08c1 BFE80300 		movl	$1000, %edi
 1140      00
 1141 08c6 4989C5   		movq	%rax, %r13
 1142 08c9 E8000000 		call	flSleep
 1142      00
 1143 08ce 488B7C24 		movq	48(%rsp), %rdi
 1143      30
 1144 08d3 4C8D8424 		leaq	136(%rsp), %r8
 1144      88000000 
 1145 08db 4C89E9   		movq	%r13, %rcx
 1146 08de BA010000 		movl	$1, %edx
 1146      00
 1147 08e3 89DE     		movl	%ebx, %esi
 1148 08e5 E8000000 		call	flReadChannel
 1148      00
 1149 08ea 85C0     		testl	%eax, %eax
 1150 08ec 0F854DFA 		jne	.L72
 1150      FFFF
 1151 08f2 803D0000 		cmpb	$0, LOG(%rip)
 1151      000000
 1152 08f9 0F856702 		jne	.L249
 1152      0000
 1153              	.L89:
 1154 08ff 83FB04   		cmpl	$4, %ebx
 1155 0902 410FB645 		movzbl	0(%r13), %eax
 1155      00
 1156 0907 7778     		ja	.L90
 1157 0909 4489F1   		movl	%r14d, %ecx
 1158 090c D3E0     		sall	%cl, %eax
 1159 090e 01442470 		addl	%eax, 112(%rsp)
 1160              	.L91:
 1161 0912 83C301   		addl	$1, %ebx
 1162 0915 4183C608 		addl	$8, %r14d
 1163 0919 83FB09   		cmpl	$9, %ebx
 1164 091c 7599     		jne	.L171
 1165 091e 488D7C24 		leaq	112(%rsp), %rdi
 1165      70
 1166 0923 4C89E6   		movq	%r12, %rsi
 1167 0926 4531FF   		xorl	%r15d, %r15d
 1168 0929 660F6F0D 		movdqa	.LC43(%rip), %xmm1
 1168      00000000 
 1169 0931 660F7F8C 		movdqa	%xmm1, 144(%rsp)
 1169      24900000 
 1169      00
 1170 093a E8000000 		call	decrypt
 1170      00
 1171 093f 31D2     		xorl	%edx, %edx
 1172 0941 31C0     		xorl	%eax, %eax
 1173 0943 BE010000 		movl	$1, %esi
 1173      00
 1174 0948 8B7C2474 		movl	116(%rsp), %edi
 1175 094c EB14     		jmp	.L96
 1176              	.L251:
 1177 094e D3E3     		sall	%cl, %ebx
 1178 0950 448D0418 		leal	(%rax,%rbx), %r8d
 1179 0954 85FB     		testl	%edi, %ebx
 1180 0956 410F45C0 		cmovne	%r8d, %eax
 1181              	.L94:
 1182 095a 83C201   		addl	$1, %edx
 1183 095d 83FA20   		cmpl	$32, %edx
 1184 0960 742B     		je	.L250
 1185              	.L96:
 1186 0962 8D4A01   		leal	1(%rdx), %ecx
 1187 0965 89F3     		movl	%esi, %ebx
 1188 0967 6683F910 		cmpw	$16, %cx
 1189 096b 89D1     		movl	%edx, %ecx
 1190 096d 76DF     		jbe	.L251
 1191 096f D3E3     		sall	%cl, %ebx
 1192 0971 85DF     		testl	%ebx, %edi
 1193 0973 74E5     		je	.L94
 1194 0975 8D4AF0   		leal	-16(%rdx), %ecx
 1195 0978 89F3     		movl	%esi, %ebx
 1196 097a D3E3     		sall	%cl, %ebx
 1197 097c 4101DF   		addl	%ebx, %r15d
 1198 097f EBD9     		jmp	.L94
 1199              	.L90:
 1200 0981 418D4EE0 		leal	-32(%r14), %ecx
 1201 0985 D3E0     		sall	%cl, %eax
 1202 0987 01442474 		addl	%eax, 116(%rsp)
 1203 098b EB85     		jmp	.L91
 1204              	.L250:
 1205 098d 0FB7D8   		movzwl	%ax, %ebx
 1206 0990 BE000000 		movl	$.LC47, %esi
 1206      00
 1207 0995 BF010000 		movl	$1, %edi
 1207      00
 1208 099a 89DA     		movl	%ebx, %edx
 1209 099c 31C0     		xorl	%eax, %eax
 1210 099e 4531ED   		xorl	%r13d, %r13d
 1211 09a1 E8000000 		call	__printf_chk
 1211      00
 1212 09a6 410FB7D7 		movzwl	%r15w, %edx
 1213 09aa BE000000 		movl	$.LC48, %esi
 1213      00
 1214 09af BF010000 		movl	$1, %edi
 1214      00
 1215 09b4 31C0     		xorl	%eax, %eax
 1216 09b6 E8000000 		call	__printf_chk
 1216      00
 1217 09bb 0FB73500 		movzwl	bankID(%rip), %esi
 1217      000000
 1218 09c2 31C0     		xorl	%eax, %eax
 1219 09c4 BA010000 		movl	$1, %edx
 1219      00
 1220 09c9 83E60F   		andl	$15, %esi
 1221              	.L98:
 1222 09cc 8D0C06   		leal	(%rsi,%rax), %ecx
 1223 09cf 89D7     		movl	%edx, %edi
 1224 09d1 4189DA   		movl	%ebx, %r10d
 1225 09d4 83E10F   		andl	$15, %ecx
 1226 09d7 D3E7     		sall	%cl, %edi
 1227 09d9 89C1     		movl	%eax, %ecx
 1228 09db 41D3FA   		sarl	%cl, %r10d
 1229 09de 4401EF   		addl	%r13d, %edi
 1230 09e1 4489D1   		movl	%r10d, %ecx
 1231 09e4 80E101   		andb	$1, %cl
 1232 09e7 440F45EF 		cmovne	%edi, %r13d
 1233 09eb 83C001   		addl	$1, %eax
 1234 09ee 83F810   		cmpl	$16, %eax
 1235 09f1 75D9     		jne	.L98
 1236 09f3 410FB7D5 		movzwl	%r13w, %edx
 1237 09f7 BE000000 		movl	$.LC49, %esi
 1237      00
 1238 09fc BF010000 		movl	$1, %edi
 1238      00
 1239 0a01 31C0     		xorl	%eax, %eax
 1240 0a03 41BE0100 		movl	$1, %r14d
 1240      0000
 1241 0a09 E8000000 		call	__printf_chk
 1241      00
 1242 0a0e BF010000 		movl	$1, %edi
 1242      00
 1243 0a13 E8000000 		call	malloc
 1243      00
 1244 0a18 8B150000 		movl	numLines(%rip), %edx
 1244      0000
 1245 0a1e 4889C3   		movq	%rax, %rbx
 1246 0a21 B8000000 		movl	$dataFromCSV+20, %eax
 1246      00
 1247 0a26 EB08     		jmp	.L99
 1248              	.L100:
 1249 0a28 4183C601 		addl	$1, %r14d
 1250 0a2c 4883C010 		addq	$16, %rax
 1251              	.L99:
 1252 0a30 4139D6   		cmpl	%edx, %r14d
 1253 0a33 0F8F6707 		jg	.L252
 1253      0000
 1254 0a39 66443B78 		cmpw	-4(%rax), %r15w
 1254      FC
 1255 0a3e 75E8     		jne	.L100
 1256 0a40 66443B28 		cmpw	(%rax), %r13w
 1257 0a44 75E2     		jne	.L100
 1258 0a46 4D63F6   		movslq	%r14d, %r14
 1259 0a49 BE000000 		movl	$.LC50, %esi
 1259      00
 1260 0a4e BF010000 		movl	$1, %edi
 1260      00
 1261 0a53 4C89F0   		movq	%r14, %rax
 1262 0a56 48C1E004 		salq	$4, %rax
 1263 0a5a 448BA800 		movl	dataFromCSV+8(%rax), %r13d
 1263      000000
 1264 0a61 448BB800 		movl	dataFromCSV+12(%rax), %r15d
 1264      000000
 1265 0a68 31C0     		xorl	%eax, %eax
 1266 0a6a E8000000 		call	__printf_chk
 1266      00
 1267 0a6f 4183ED01 		subl	$1, %r13d
 1268 0a73 0F842F04 		je	.L253
 1268      0000
 1269 0a79 448B6C24 		movl	112(%rsp), %r13d
 1269      70
 1270 0a7e 4539FD   		cmpl	%r15d, %r13d
 1271 0a81 0F8E1201 		jle	.L254
 1271      0000
 1272 0a87 803D0000 		cmpb	$0, LOG(%rip)
 1272      000000
 1273 0a8e 7411     		je	.L175
 1274 0a90 BE000000 		movl	$.LC55, %esi
 1274      00
 1275 0a95 BF010000 		movl	$1, %edi
 1275      00
 1276 0a9a 31C0     		xorl	%eax, %eax
 1277 0a9c E8000000 		call	__printf_chk
 1277      00
 1278              	.L175:
 1279 0aa1 C60302   		movb	$2, (%rbx)
 1280 0aa4 BFE80300 		movl	$1000, %edi
 1280      00
 1281 0aa9 E8000000 		call	flSleep
 1281      00
 1282 0aae 803D0000 		cmpb	$0, LOG(%rip)
 1282      000000
 1283 0ab5 7419     		je	.L131
 1284 0ab7 0FB60B   		movzbl	(%rbx), %ecx
 1285 0aba BA090000 		movl	$9, %edx
 1285      00
 1286 0abf BE000000 		movl	$.LC44, %esi
 1286      00
 1287 0ac4 BF010000 		movl	$1, %edi
 1287      00
 1288 0ac9 31C0     		xorl	%eax, %eax
 1289 0acb E8000000 		call	__printf_chk
 1289      00
 1290              	.L131:
 1291 0ad0 488B7C24 		movq	48(%rsp), %rdi
 1291      30
 1292 0ad5 4C8D8424 		leaq	136(%rsp), %r8
 1292      88000000 
 1293 0add 4889D9   		movq	%rbx, %rcx
 1294 0ae0 BA010000 		movl	$1, %edx
 1294      00
 1295 0ae5 BE090000 		movl	$9, %esi
 1295      00
 1296 0aea E8000000 		call	flWriteChannel
 1296      00
 1297 0aef 85C0     		testl	%eax, %eax
 1298 0af1 0F8548F8 		jne	.L72
 1298      FFFF
 1299 0af7 BB0A0000 		movl	$10, %ebx
 1299      00
 1300 0afc EB30     		jmp	.L135
 1301              	.L132:
 1302 0afe 488B7C24 		movq	48(%rsp), %rdi
 1302      30
 1303 0b03 4C8D8424 		leaq	136(%rsp), %r8
 1303      88000000 
 1304 0b0b 4C89E1   		movq	%r12, %rcx
 1305 0b0e BA010000 		movl	$1, %edx
 1305      00
 1306 0b13 89DE     		movl	%ebx, %esi
 1307 0b15 E8000000 		call	flWriteChannel
 1307      00
 1308 0b1a 85C0     		testl	%eax, %eax
 1309 0b1c 0F851DF8 		jne	.L72
 1309      FFFF
 1310 0b22 83C301   		addl	$1, %ebx
 1311 0b25 83FB12   		cmpl	$18, %ebx
 1312 0b28 0F840BFD 		je	.L168
 1312      FFFF
 1313              	.L135:
 1314 0b2e BFE80300 		movl	$1000, %edi
 1314      00
 1315 0b33 C6842490 		movb	$0, 144(%rsp)
 1315      00000000 
 1316 0b3b E8000000 		call	flSleep
 1316      00
 1317 0b40 803D0000 		cmpb	$0, LOG(%rip)
 1317      000000
 1318 0b47 74B5     		je	.L132
 1319 0b49 0FB68C24 		movzbl	144(%rsp), %ecx
 1319      90000000 
 1320 0b51 89DA     		movl	%ebx, %edx
 1321 0b53 BE000000 		movl	$.LC44, %esi
 1321      00
 1322 0b58 BF010000 		movl	$1, %edi
 1322      00
 1323 0b5d 31C0     		xorl	%eax, %eax
 1324 0b5f E8000000 		call	__printf_chk
 1324      00
 1325 0b64 EB98     		jmp	.L132
 1326              	.L249:
 1327 0b66 410FB64D 		movzbl	0(%r13), %ecx
 1327      00
 1328 0b6b 89DA     		movl	%ebx, %edx
 1329 0b6d BE000000 		movl	$.LC46, %esi
 1329      00
 1330 0b72 BF010000 		movl	$1, %edi
 1330      00
 1331 0b77 E8000000 		call	__printf_chk
 1331      00
 1332 0b7c E97EFDFF 		jmp	.L89
 1332      FF
 1333              	.L247:
 1334 0b81 0FB65500 		movzbl	0(%rbp), %edx
 1335 0b85 BE000000 		movl	$.LC45, %esi
 1335      00
 1336 0b8a BF010000 		movl	$1, %edi
 1336      00
 1337 0b8f E8000000 		call	__printf_chk
 1337      00
 1338 0b94 E993FCFF 		jmp	.L83
 1338      FF
 1339              	.L254:
 1340 0b99 803D0000 		cmpb	$0, LOG(%rip)
 1340      000000
 1341 0ba0 7411     		je	.L177
 1342 0ba2 BE000000 		movl	$.LC51, %esi
 1342      00
 1343 0ba7 BF010000 		movl	$1, %edi
 1343      00
 1344 0bac 31C0     		xorl	%eax, %eax
 1345 0bae E8000000 		call	__printf_chk
 1345      00
 1346              	.L177:
 1347 0bb3 C60301   		movb	$1, (%rbx)
 1348 0bb6 BFE80300 		movl	$1000, %edi
 1348      00
 1349 0bbb E8000000 		call	flSleep
 1349      00
 1350 0bc0 803D0000 		cmpb	$0, LOG(%rip)
 1350      000000
 1351 0bc7 7419     		je	.L107
 1352 0bc9 0FB60B   		movzbl	(%rbx), %ecx
 1353 0bcc BA090000 		movl	$9, %edx
 1353      00
 1354 0bd1 BE000000 		movl	$.LC44, %esi
 1354      00
 1355 0bd6 BF010000 		movl	$1, %edi
 1355      00
 1356 0bdb 31C0     		xorl	%eax, %eax
 1357 0bdd E8000000 		call	__printf_chk
 1357      00
 1358              	.L107:
 1359 0be2 488B7C24 		movq	48(%rsp), %rdi
 1359      30
 1360 0be7 4C8D8424 		leaq	136(%rsp), %r8
 1360      88000000 
 1361 0bef 4889D9   		movq	%rbx, %rcx
 1362 0bf2 BA010000 		movl	$1, %edx
 1362      00
 1363 0bf7 BE090000 		movl	$9, %esi
 1363      00
 1364 0bfc E8000000 		call	flWriteChannel
 1364      00
 1365 0c01 85C0     		testl	%eax, %eax
 1366 0c03 0F8536F7 		jne	.L72
 1366      FFFF
 1367 0c09 BFE80300 		movl	$1000, %edi
 1367      00
 1368 0c0e BB0A0000 		movl	$10, %ebx
 1368      00
 1369 0c13 41BF0100 		movl	$1, %r15d
 1369      0000
 1370 0c19 E8000000 		call	flSleep
 1370      00
 1371 0c1e 488DBC24 		leaq	128(%rsp), %rdi
 1371      80000000 
 1372 0c26 4C89E6   		movq	%r12, %rsi
 1373 0c29 C7842484 		movl	$0, 132(%rsp)
 1373      00000000 
 1373      000000
 1374 0c34 4489AC24 		movl	%r13d, 128(%rsp)
 1374      80000000 
 1375 0c3c C7842490 		movl	$690471308, 144(%rsp)
 1375      0000008C 
 1375      C12729
 1376 0c47 C7842494 		movl	$1979237519, 148(%rsp)
 1376      0000008F 
 1376      C4F875
 1377 0c52 C7842498 		movl	$1140693495, 152(%rsp)
 1377      000000F7 
 1377      99FD43
 1378 0c5d C784249C 		movl	$-15764393, 156(%rsp)
 1378      00000057 
 1378      740FFF
 1379 0c68 E8000000 		call	encrypt
 1379      00
 1380              	.L115:
 1381 0c6d 8BB42480 		movl	128(%rsp), %esi
 1381      000000
 1382 0c74 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 1382      FFFFFF
 1383 0c7b 31C0     		xorl	%eax, %eax
 1384 0c7d 31D2     		xorl	%edx, %edx
 1385              	.L111:
 1386 0c7f 8D0C07   		leal	(%rdi,%rax), %ecx
 1387 0c82 4589FB   		movl	%r15d, %r11d
 1388 0c85 41D3E3   		sall	%cl, %r11d
 1389 0c88 4185F3   		testl	%esi, %r11d
 1390 0c8b 740B     		je	.L109
 1391 0c8d 4589FA   		movl	%r15d, %r10d
 1392 0c90 89C1     		movl	%eax, %ecx
 1393 0c92 41D3E2   		sall	%cl, %r10d
 1394 0c95 4401D2   		addl	%r10d, %edx
 1395              	.L109:
 1396 0c98 83C001   		addl	$1, %eax
 1397 0c9b 83F808   		cmpl	$8, %eax
 1398 0c9e 75DF     		jne	.L111
 1399 0ca0 BFE80300 		movl	$1000, %edi
 1399      00
 1400 0ca5 88942490 		movb	%dl, 144(%rsp)
 1400      000000
 1401 0cac E8000000 		call	flSleep
 1401      00
 1402 0cb1 488B7C24 		movq	48(%rsp), %rdi
 1402      30
 1403 0cb6 4C8D8424 		leaq	136(%rsp), %r8
 1403      88000000 
 1404 0cbe 4C89E1   		movq	%r12, %rcx
 1405 0cc1 BA010000 		movl	$1, %edx
 1405      00
 1406 0cc6 89DE     		movl	%ebx, %esi
 1407 0cc8 E8000000 		call	flWriteChannel
 1407      00
 1408 0ccd 803D0000 		cmpb	$0, LOG(%rip)
 1408      000000
 1409 0cd4 4189C0   		movl	%eax, %r8d
 1410 0cd7 7424     		je	.L112
 1411 0cd9 0FB68C24 		movzbl	144(%rsp), %ecx
 1411      90000000 
 1412 0ce1 89442408 		movl	%eax, 8(%rsp)
 1413 0ce5 89DA     		movl	%ebx, %edx
 1414 0ce7 BE000000 		movl	$.LC44, %esi
 1414      00
 1415 0cec BF010000 		movl	$1, %edi
 1415      00
 1416 0cf1 31C0     		xorl	%eax, %eax
 1417 0cf3 E8000000 		call	__printf_chk
 1417      00
 1418 0cf8 448B4424 		movl	8(%rsp), %r8d
 1418      08
 1419              	.L112:
 1420 0cfd 4585C0   		testl	%r8d, %r8d
 1421 0d00 0F8539F6 		jne	.L72
 1421      FFFF
 1422 0d06 83C301   		addl	$1, %ebx
 1423 0d09 83FB0E   		cmpl	$14, %ebx
 1424 0d0c 0F855BFF 		jne	.L115
 1424      FFFF
 1425 0d12 41BF0100 		movl	$1, %r15d
 1425      0000
 1426              	.L122:
 1427 0d18 8BB42484 		movl	132(%rsp), %esi
 1427      000000
 1428 0d1f 8D3CDD90 		leal	-112(,%rbx,8), %edi
 1428      FFFFFF
 1429 0d26 31C0     		xorl	%eax, %eax
 1430 0d28 31D2     		xorl	%edx, %edx
 1431              	.L118:
 1432 0d2a 8D0C07   		leal	(%rdi,%rax), %ecx
 1433 0d2d 4589FB   		movl	%r15d, %r11d
 1434 0d30 41D3E3   		sall	%cl, %r11d
 1435 0d33 4185F3   		testl	%esi, %r11d
 1436 0d36 740B     		je	.L116
 1437 0d38 4589FA   		movl	%r15d, %r10d
 1438 0d3b 89C1     		movl	%eax, %ecx
 1439 0d3d 41D3E2   		sall	%cl, %r10d
 1440 0d40 4401D2   		addl	%r10d, %edx
 1441              	.L116:
 1442 0d43 83C001   		addl	$1, %eax
 1443 0d46 83F808   		cmpl	$8, %eax
 1444 0d49 75DF     		jne	.L118
 1445 0d4b BFE80300 		movl	$1000, %edi
 1445      00
 1446 0d50 88942490 		movb	%dl, 144(%rsp)
 1446      000000
 1447 0d57 E8000000 		call	flSleep
 1447      00
 1448 0d5c 488B7C24 		movq	48(%rsp), %rdi
 1448      30
 1449 0d61 4C8D8424 		leaq	136(%rsp), %r8
 1449      88000000 
 1450 0d69 4C89E1   		movq	%r12, %rcx
 1451 0d6c BA010000 		movl	$1, %edx
 1451      00
 1452 0d71 89DE     		movl	%ebx, %esi
 1453 0d73 E8000000 		call	flWriteChannel
 1453      00
 1454 0d78 803D0000 		cmpb	$0, LOG(%rip)
 1454      000000
 1455 0d7f 4189C0   		movl	%eax, %r8d
 1456 0d82 7424     		je	.L119
 1457 0d84 0FB68C24 		movzbl	144(%rsp), %ecx
 1457      90000000 
 1458 0d8c 89442408 		movl	%eax, 8(%rsp)
 1459 0d90 89DA     		movl	%ebx, %edx
 1460 0d92 BE000000 		movl	$.LC44, %esi
 1460      00
 1461 0d97 BF010000 		movl	$1, %edi
 1461      00
 1462 0d9c 31C0     		xorl	%eax, %eax
 1463 0d9e E8000000 		call	__printf_chk
 1463      00
 1464 0da3 448B4424 		movl	8(%rsp), %r8d
 1464      08
 1465              	.L119:
 1466 0da8 4585C0   		testl	%r8d, %r8d
 1467 0dab 0F858EF5 		jne	.L72
 1467      FFFF
 1468 0db1 83C301   		addl	$1, %ebx
 1469 0db4 83FB12   		cmpl	$18, %ebx
 1470 0db7 0F855BFF 		jne	.L122
 1470      FFFF
 1471 0dbd 807D0001 		cmpb	$1, 0(%rbp)
 1472 0dc1 0F8572FA 		jne	.L168
 1472      FFFF
 1473 0dc7 BE000000 		movl	$.LC52, %esi
 1473      00
 1474 0dcc BF000000 		movl	$.LC41, %edi
 1474      00
 1475 0dd1 49C1E604 		salq	$4, %r14
 1476 0dd5 4529AE00 		subl	%r13d, dataFromCSV+12(%r14)
 1476      000000
 1477 0ddc BD010000 		movl	$1, %ebp
 1477      00
 1478 0de1 41BD1000 		movl	$16, %r13d
 1478      0000
 1479 0de7 E8000000 		call	fopen
 1479      00
 1480 0dec B9000000 		movl	$.LC53, %ecx
 1480      00
 1481 0df1 4889C7   		movq	%rax, %rdi
 1482 0df4 4889C3   		movq	%rax, %rbx
 1483 0df7 BA000000 		movl	$.LC54, %edx
 1483      00
 1484 0dfc BE010000 		movl	$1, %esi
 1484      00
 1485 0e01 31C0     		xorl	%eax, %eax
 1486 0e03 E8000000 		call	__fprintf_chk
 1486      00
 1487 0e08 BA000000 		movl	$.LC28, %edx
 1487      00
 1488 0e0d BE010000 		movl	$1, %esi
 1488      00
 1489 0e12 4889DF   		movq	%rbx, %rdi
 1490 0e15 31C0     		xorl	%eax, %eax
 1491 0e17 E8000000 		call	__fprintf_chk
 1491      00
 1492              	.L124:
 1493 0e1c 3B2D0000 		cmpl	numLines(%rip), %ebp
 1493      0000
 1494 0e22 0F8F5404 		jg	.L255
 1494      0000
 1495 0e28 418B8D00 		movl	dataFromCSV(%r13), %ecx
 1495      000000
 1496 0e2f BA000000 		movl	$.LC1, %edx
 1496      00
 1497 0e34 BE010000 		movl	$1, %esi
 1497      00
 1498 0e39 4889DF   		movq	%rbx, %rdi
 1499 0e3c 31C0     		xorl	%eax, %eax
 1500 0e3e 4531F6   		xorl	%r14d, %r14d
 1501 0e41 E8000000 		call	__fprintf_chk
 1501      00
 1502              	.L179:
 1503 0e46 BA000000 		movl	$.LC0, %edx
 1503      00
 1504 0e4b BE010000 		movl	$1, %esi
 1504      00
 1505 0e50 4889DF   		movq	%rbx, %rdi
 1506 0e53 31C0     		xorl	%eax, %eax
 1507 0e55 E8000000 		call	__fprintf_chk
 1507      00
 1508 0e5a 438B8C35 		movl	dataFromCSV+4(%r13,%r14), %ecx
 1508      00000000 
 1509 0e62 31C0     		xorl	%eax, %eax
 1510 0e64 BA000000 		movl	$.LC1, %edx
 1510      00
 1511 0e69 BE010000 		movl	$1, %esi
 1511      00
 1512 0e6e 4889DF   		movq	%rbx, %rdi
 1513 0e71 4983C604 		addq	$4, %r14
 1514 0e75 E8000000 		call	__fprintf_chk
 1514      00
 1515 0e7a 4983FE0C 		cmpq	$12, %r14
 1516 0e7e 75C6     		jne	.L179
 1517 0e80 3B2D0000 		cmpl	numLines(%rip), %ebp
 1517      0000
 1518 0e86 7414     		je	.L178
 1519 0e88 BA000000 		movl	$.LC28, %edx
 1519      00
 1520 0e8d BE010000 		movl	$1, %esi
 1520      00
 1521 0e92 4889DF   		movq	%rbx, %rdi
 1522 0e95 31C0     		xorl	%eax, %eax
 1523 0e97 E8000000 		call	__fprintf_chk
 1523      00
 1524              	.L178:
 1525 0e9c 83C501   		addl	$1, %ebp
 1526 0e9f 4983C510 		addq	$16, %r13
 1527 0ea3 E974FFFF 		jmp	.L124
 1527      FF
 1528              	.L253:
 1529 0ea8 BE000000 		movl	$.LC56, %esi
 1529      00
 1530 0ead BF010000 		movl	$1, %edi
 1530      00
 1531 0eb2 31C0     		xorl	%eax, %eax
 1532 0eb4 E8000000 		call	__printf_chk
 1532      00
 1533 0eb9 C60303   		movb	$3, (%rbx)
 1534 0ebc BFE80300 		movl	$1000, %edi
 1534      00
 1535 0ec1 E8000000 		call	flSleep
 1535      00
 1536 0ec6 803D0000 		cmpb	$0, LOG(%rip)
 1536      000000
 1537 0ecd 7419     		je	.L136
 1538 0ecf 0FB60B   		movzbl	(%rbx), %ecx
 1539 0ed2 BA090000 		movl	$9, %edx
 1539      00
 1540 0ed7 BE000000 		movl	$.LC44, %esi
 1540      00
 1541 0edc BF010000 		movl	$1, %edi
 1541      00
 1542 0ee1 31C0     		xorl	%eax, %eax
 1543 0ee3 E8000000 		call	__printf_chk
 1543      00
 1544              	.L136:
 1545 0ee8 488B7C24 		movq	48(%rsp), %rdi
 1545      30
 1546 0eed 4C8D8424 		leaq	136(%rsp), %r8
 1546      88000000 
 1547 0ef5 4889D9   		movq	%rbx, %rcx
 1548 0ef8 BA010000 		movl	$1, %edx
 1548      00
 1549 0efd BE090000 		movl	$9, %esi
 1549      00
 1550 0f02 E8000000 		call	flWriteChannel
 1550      00
 1551 0f07 85C0     		testl	%eax, %eax
 1552 0f09 0F8530F4 		jne	.L72
 1552      FFFF
 1553 0f0f 448B4424 		movl	112(%rsp), %r8d
 1553      70
 1554 0f14 BE010000 		movl	$1, %esi
 1554      00
 1555 0f19 4531C9   		xorl	%r9d, %r9d
 1556 0f1c 4531D2   		xorl	%r10d, %r10d
 1557 0f1f 4531DB   		xorl	%r11d, %r11d
 1558 0f22 31FF     		xorl	%edi, %edi
 1559 0f24 BA010000 		movl	$1, %edx
 1559      00
 1560 0f29 EB21     		jmp	.L143
 1561              	.L138:
 1562 0f2b 4080FE10 		cmpb	$16, %sil
 1563 0f2f 7734     		ja	.L140
 1564 0f31 4185D8   		testl	%ebx, %r8d
 1565 0f34 740A     		je	.L139
 1566 0f36 8D48F8   		leal	-8(%rax), %ecx
 1567 0f39 89D3     		movl	%edx, %ebx
 1568 0f3b D3E3     		sall	%cl, %ebx
 1569 0f3d 4101DB   		addl	%ebx, %r11d
 1570              	.L139:
 1571 0f40 83C601   		addl	$1, %esi
 1572 0f43 83C001   		addl	$1, %eax
 1573 0f46 4080FE21 		cmpb	$33, %sil
 1574 0f4a 7430     		je	.L256
 1575              	.L143:
 1576 0f4c 89C1     		movl	%eax, %ecx
 1577 0f4e 89D3     		movl	%edx, %ebx
 1578 0f50 D3E3     		sall	%cl, %ebx
 1579 0f52 4080FE08 		cmpb	$8, %sil
 1580 0f56 89D9     		movl	%ebx, %ecx
 1581 0f58 77D1     		ja	.L138
 1582 0f5a 8D1C1F   		leal	(%rdi,%rbx), %ebx
 1583 0f5d 4485C1   		testl	%r8d, %ecx
 1584 0f60 0F45FB   		cmovne	%ebx, %edi
 1585 0f63 EBDB     		jmp	.L139
 1586              	.L140:
 1587 0f65 4080FE18 		cmpb	$24, %sil
 1588 0f69 776C     		ja	.L141
 1589 0f6b 4185D8   		testl	%ebx, %r8d
 1590 0f6e 74D0     		je	.L139
 1591 0f70 8D48F0   		leal	-16(%rax), %ecx
 1592 0f73 89D3     		movl	%edx, %ebx
 1593 0f75 D3E3     		sall	%cl, %ebx
 1594 0f77 4101DA   		addl	%ebx, %r10d
 1595 0f7a EBC4     		jmp	.L139
 1596              	.L256:
 1597 0f7c 450FB6C3 		movzbl	%r11b, %r8d
 1598 0f80 410FB6F2 		movzbl	%r10b, %esi
 1599 0f84 C7842484 		movl	$0, 132(%rsp)
 1599      00000000 
 1599      000000
 1600 0f8f 41C1E008 		sall	$8, %r8d
 1601 0f93 C1E610   		sall	$16, %esi
 1602 0f96 31C0     		xorl	%eax, %eax
 1603 0f98 BA080000 		movl	$8, %edx
 1603      00
 1604 0f9d 31C9     		xorl	%ecx, %ecx
 1605 0f9f 450FB6C9 		movzbl	%r9b, %r9d
 1606 0fa3 400FB6FF 		movzbl	%dil, %edi
 1607              	.L144:
 1608 0fa7 85C9     		testl	%ecx, %ecx
 1609 0fa9 0F84C602 		je	.L257
 1609      0000
 1610 0faf 83F908   		cmpl	$8, %ecx
 1611 0fb2 0F84AD01 		je	.L258
 1611      0000
 1612 0fb8 83F910   		cmpl	$16, %ecx
 1613 0fbb 0F849A01 		je	.L259
 1613      0000
 1614 0fc1 4589CA   		movl	%r9d, %r10d
 1615 0fc4 41D3E2   		sall	%cl, %r10d
 1616 0fc7 4401D0   		addl	%r10d, %eax
 1617 0fca 83FA20   		cmpl	$32, %edx
 1618 0fcd 7420     		je	.L260
 1619              	.L149:
 1620 0fcf 83C108   		addl	$8, %ecx
 1621 0fd2 83C208   		addl	$8, %edx
 1622 0fd5 EBD0     		jmp	.L144
 1623              	.L141:
 1624 0fd7 4185D8   		testl	%ebx, %r8d
 1625 0fda 0F8460FF 		je	.L139
 1625      FFFF
 1626 0fe0 8D48E8   		leal	-24(%rax), %ecx
 1627 0fe3 89D3     		movl	%edx, %ebx
 1628 0fe5 D3E3     		sall	%cl, %ebx
 1629 0fe7 4101D9   		addl	%ebx, %r9d
 1630 0fea E951FFFF 		jmp	.L139
 1630      FF
 1631              	.L260:
 1632 0fef 660F6F15 		movdqa	.LC43(%rip), %xmm2
 1632      00000000 
 1633 0ff7 488DBC24 		leaq	128(%rsp), %rdi
 1633      80000000 
 1634 0fff 4C89E6   		movq	%r12, %rsi
 1635 1002 BB0A0000 		movl	$10, %ebx
 1635      00
 1636 1007 BD010000 		movl	$1, %ebp
 1636      00
 1637 100c 89842480 		movl	%eax, 128(%rsp)
 1637      000000
 1638 1013 660F7F94 		movdqa	%xmm2, 144(%rsp)
 1638      24900000 
 1638      00
 1639 101c E8000000 		call	encrypt
 1639      00
 1640              	.L156:
 1641 1021 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 1641      FFFFFF
 1642 1028 31C0     		xorl	%eax, %eax
 1643 102a 31D2     		xorl	%edx, %edx
 1644 102c 8BB42480 		movl	128(%rsp), %esi
 1644      000000
 1645              	.L152:
 1646 1033 8D0C07   		leal	(%rdi,%rax), %ecx
 1647 1036 4189EB   		movl	%ebp, %r11d
 1648 1039 41D3E3   		sall	%cl, %r11d
 1649 103c 4185F3   		testl	%esi, %r11d
 1650 103f 740B     		je	.L150
 1651 1041 4189EB   		movl	%ebp, %r11d
 1652 1044 89C1     		movl	%eax, %ecx
 1653 1046 41D3E3   		sall	%cl, %r11d
 1654 1049 4401DA   		addl	%r11d, %edx
 1655              	.L150:
 1656 104c 83C001   		addl	$1, %eax
 1657 104f 83F808   		cmpl	$8, %eax
 1658 1052 75DF     		jne	.L152
 1659 1054 BFE80300 		movl	$1000, %edi
 1659      00
 1660 1059 88942490 		movb	%dl, 144(%rsp)
 1660      000000
 1661 1060 E8000000 		call	flSleep
 1661      00
 1662 1065 803D0000 		cmpb	$0, LOG(%rip)
 1662      000000
 1663 106c 741B     		je	.L153
 1664 106e 0FB68C24 		movzbl	144(%rsp), %ecx
 1664      90000000 
 1665 1076 89DA     		movl	%ebx, %edx
 1666 1078 BE000000 		movl	$.LC44, %esi
 1666      00
 1667 107d BF010000 		movl	$1, %edi
 1667      00
 1668 1082 31C0     		xorl	%eax, %eax
 1669 1084 E8000000 		call	__printf_chk
 1669      00
 1670              	.L153:
 1671 1089 488B7C24 		movq	48(%rsp), %rdi
 1671      30
 1672 108e 4C8D8424 		leaq	136(%rsp), %r8
 1672      88000000 
 1673 1096 4C89E1   		movq	%r12, %rcx
 1674 1099 BA010000 		movl	$1, %edx
 1674      00
 1675 109e 89DE     		movl	%ebx, %esi
 1676 10a0 E8000000 		call	flWriteChannel
 1676      00
 1677 10a5 85C0     		testl	%eax, %eax
 1678 10a7 0F8592F2 		jne	.L72
 1678      FFFF
 1679 10ad 83C301   		addl	$1, %ebx
 1680 10b0 83FB0E   		cmpl	$14, %ebx
 1681 10b3 0F8568FF 		jne	.L156
 1681      FFFF
 1682 10b9 BD010000 		movl	$1, %ebp
 1682      00
 1683              	.L163:
 1684 10be 8BB42484 		movl	132(%rsp), %esi
 1684      000000
 1685 10c5 8D3CDD90 		leal	-112(,%rbx,8), %edi
 1685      FFFFFF
 1686 10cc 31C0     		xorl	%eax, %eax
 1687 10ce 31D2     		xorl	%edx, %edx
 1688              	.L159:
 1689 10d0 8D0C07   		leal	(%rdi,%rax), %ecx
 1690 10d3 4189EA   		movl	%ebp, %r10d
 1691 10d6 41D3E2   		sall	%cl, %r10d
 1692 10d9 4185F2   		testl	%esi, %r10d
 1693 10dc 740B     		je	.L157
 1694 10de 4189EB   		movl	%ebp, %r11d
 1695 10e1 89C1     		movl	%eax, %ecx
 1696 10e3 41D3E3   		sall	%cl, %r11d
 1697 10e6 4401DA   		addl	%r11d, %edx
 1698              	.L157:
 1699 10e9 83C001   		addl	$1, %eax
 1700 10ec 83F808   		cmpl	$8, %eax
 1701 10ef 75DF     		jne	.L159
 1702 10f1 BFE80300 		movl	$1000, %edi
 1702      00
 1703 10f6 88942490 		movb	%dl, 144(%rsp)
 1703      000000
 1704 10fd E8000000 		call	flSleep
 1704      00
 1705 1102 803D0000 		cmpb	$0, LOG(%rip)
 1705      000000
 1706 1109 741B     		je	.L160
 1707 110b 0FB68C24 		movzbl	144(%rsp), %ecx
 1707      90000000 
 1708 1113 89DA     		movl	%ebx, %edx
 1709 1115 BE000000 		movl	$.LC44, %esi
 1709      00
 1710 111a BF010000 		movl	$1, %edi
 1710      00
 1711 111f 31C0     		xorl	%eax, %eax
 1712 1121 E8000000 		call	__printf_chk
 1712      00
 1713              	.L160:
 1714 1126 488B7C24 		movq	48(%rsp), %rdi
 1714      30
 1715 112b 4C8D8424 		leaq	136(%rsp), %r8
 1715      88000000 
 1716 1133 4C89E1   		movq	%r12, %rcx
 1717 1136 BA010000 		movl	$1, %edx
 1717      00
 1718 113b 89DE     		movl	%ebx, %esi
 1719 113d E8000000 		call	flWriteChannel
 1719      00
 1720 1142 85C0     		testl	%eax, %eax
 1721 1144 0F85F5F1 		jne	.L72
 1721      FFFF
 1722 114a 83C301   		addl	$1, %ebx
 1723 114d 83FB12   		cmpl	$18, %ebx
 1724 1150 0F8568FF 		jne	.L163
 1724      FFFF
 1725              		.p2align 4,,3
 1726 1156 E9DEF6FF 		jmp	.L168
 1726      FF
 1727              	.L259:
 1728 115b 01F0     		addl	%esi, %eax
 1729 115d 0F1F00   		.p2align 4,,3
 1730 1160 E96AFEFF 		jmp	.L149
 1730      FF
 1731              	.L258:
 1732 1165 4401C0   		addl	%r8d, %eax
 1733              		.p2align 4,,6
 1734 1168 E962FEFF 		jmp	.L149
 1734      FF
 1735              	.L245:
 1736 116d 01F0     		addl	%esi, %eax
 1737 116f 90       		.p2align 4,,4
 1738 1170 E906F5FF 		jmp	.L66
 1738      FF
 1739              	.L244:
 1740 1175 01F8     		addl	%edi, %eax
 1741              		.p2align 4,,4
 1742 1177 E9FFF4FF 		jmp	.L66
 1742      FF
 1743              	.L243:
 1744 117c 4401C8   		addl	%r9d, %eax
 1745 117f 90       		.p2align 4,,4
 1746 1180 E9F6F4FF 		jmp	.L66
 1746      FF
 1747              	.L240:
 1748 1185 BE000000 		movl	$.LC42, %esi
 1748      00
 1749 118a BF010000 		movl	$1, %edi
 1749      00
 1750 118f 31C0     		xorl	%eax, %eax
 1751 1191 E8000000 		call	__printf_chk
 1751      00
 1752 1196 448B4C24 		movl	8(%rsp), %r9d
 1752      08
 1753 119b E9E6EFFF 		jmp	.L233
 1753      FF
 1754              	.L252:
 1755 11a0 BE000000 		movl	$.LC59, %esi
 1755      00
 1756 11a5 BF010000 		movl	$1, %edi
 1756      00
 1757 11aa 31C0     		xorl	%eax, %eax
 1758 11ac E8000000 		call	__printf_chk
 1758      00
 1759 11b1 C60304   		movb	$4, (%rbx)
 1760 11b4 BFE80300 		movl	$1000, %edi
 1760      00
 1761 11b9 E8000000 		call	flSleep
 1761      00
 1762 11be 803D0000 		cmpb	$0, LOG(%rip)
 1762      000000
 1763 11c5 7419     		je	.L173
 1764 11c7 0FB60B   		movzbl	(%rbx), %ecx
 1765 11ca BA090000 		movl	$9, %edx
 1765      00
 1766 11cf BE000000 		movl	$.LC44, %esi
 1766      00
 1767 11d4 BF010000 		movl	$1, %edi
 1767      00
 1768 11d9 31C0     		xorl	%eax, %eax
 1769 11db E8000000 		call	__printf_chk
 1769      00
 1770              	.L173:
 1771 11e0 488B7C24 		movq	48(%rsp), %rdi
 1771      30
 1772 11e5 4C8D8424 		leaq	136(%rsp), %r8
 1772      88000000 
 1773 11ed 4889D9   		movq	%rbx, %rcx
 1774 11f0 BA010000 		movl	$1, %edx
 1774      00
 1775 11f5 BE090000 		movl	$9, %esi
 1775      00
 1776 11fa E8000000 		call	flWriteChannel
 1776      00
 1777 11ff 85C0     		testl	%eax, %eax
 1778 1201 0F8538F1 		jne	.L72
 1778      FFFF
 1779 1207 BB0A0000 		movl	$10, %ebx
 1779      00
 1780 120c EB0C     		jmp	.L167
 1781              	.L261:
 1782 120e 83C301   		addl	$1, %ebx
 1783 1211 83FB12   		cmpl	$18, %ebx
 1784 1214 0F841FF6 		je	.L168
 1784      FFFF
 1785              	.L167:
 1786 121a BFE80300 		movl	$1000, %edi
 1786      00
 1787 121f C6842490 		movb	$0, 144(%rsp)
 1787      00000000 
 1788 1227 E8000000 		call	flSleep
 1788      00
 1789 122c 803D0000 		cmpb	$0, LOG(%rip)
 1789      000000
 1790 1233 741B     		je	.L164
 1791 1235 0FB68C24 		movzbl	144(%rsp), %ecx
 1791      90000000 
 1792 123d 89DA     		movl	%ebx, %edx
 1793 123f BE000000 		movl	$.LC44, %esi
 1793      00
 1794 1244 BF010000 		movl	$1, %edi
 1794      00
 1795 1249 31C0     		xorl	%eax, %eax
 1796 124b E8000000 		call	__printf_chk
 1796      00
 1797              	.L164:
 1798 1250 488B7C24 		movq	48(%rsp), %rdi
 1798      30
 1799 1255 4C8D8424 		leaq	136(%rsp), %r8
 1799      88000000 
 1800 125d 4C89E1   		movq	%r12, %rcx
 1801 1260 BA010000 		movl	$1, %edx
 1801      00
 1802 1265 89DE     		movl	%ebx, %esi
 1803 1267 E8000000 		call	flWriteChannel
 1803      00
 1804 126c 85C0     		testl	%eax, %eax
 1805 126e 749E     		je	.L261
 1806 1270 E9CAF0FF 		jmp	.L72
 1806      FF
 1807              	.L257:
 1808 1275 01F8     		addl	%edi, %eax
 1809              		.p2align 4,,7
 1810 1277 E953FDFF 		jmp	.L149
 1810      FF
 1811              	.L255:
 1812 127c 4889DF   		movq	%rbx, %rdi
 1813 127f 90       		.p2align 4,,6
 1814 1280 E8000000 		call	fclose
 1814      00
 1815              		.p2align 4,,3
 1816 1285 E9AFF5FF 		jmp	.L168
 1816      FF
 1817              		.cfi_endproc
 1818              	.LFE83:
 1820              		.globl	max100Limit
 1821              		.data
 1824              	max100Limit:
 1825 0000 FF       		.byte	-1
 1826              		.globl	max500Limit
 1829              	max500Limit:
 1830 0001 FF       		.byte	-1
 1831              		.globl	max1000Limit
 1834              	max1000Limit:
 1835 0002 01       		.byte	1
 1836              		.globl	max2000Limit
 1839              	max2000Limit:
 1840 0003 01       		.byte	1
 1841              		.globl	maxAmountCanBeDispensed
 1842              		.align 4
 1845              	maxAmountCanBeDispensed:
 1846 0004 FFFFFFFF 		.long	-1
 1847              		.globl	bankID
 1848 0008 00000000 		.align 16
 1848      00000000 
 1851              	bankID:
 1852 0010 FFFFFFFF 		.long	-1
 1853              		.globl	LOG
 1854              		.bss
 1855              		.align 16
 1858              	LOG:
 1859 0000 00       		.zero	1
 1860              		.globl	numLines
 1861 0001 00000000 		.align 16
 1861      00000000 
 1861      00000000 
 1861      000000
 1864              	numLines:
 1865 0010 00000000 		.zero	4
 1866              		.comm	dataFromCSV,1600080,32
 1867              		.section	.rodata.cst16,"aM",@progbits,16
 1868              		.align 16
 1869              	.LC43:
 1870 0000 8CC12729 		.long	690471308
 1871 0004 8FC4F875 		.long	1979237519
 1872 0008 F799FD43 		.long	1140693495
 1873 000c 57740FFF 		.long	-15764393
 1874              		.ident	"GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4"
 1875              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccCiZV98.s:6      .text:0000000000000000 decrypt
     /tmp/ccCiZV98.s:55     .text:0000000000000070 encrypt
     /tmp/ccCiZV98.s:105    .text:00000000000000e0 decrypt64
     /tmp/ccCiZV98.s:145    .text:0000000000000150 encrypt64
     /tmp/ccCiZV98.s:186    .text:00000000000001c0 myHash
     /tmp/ccCiZV98.s:1851   .data:0000000000000010 bankID
     /tmp/ccCiZV98.s:318    .text:0000000000000320 format
     /tmp/ccCiZV98.s:1864   .bss:0000000000000010 numLines
                            *COM*:0000000000186a50 dataFromCSV
     /tmp/ccCiZV98.s:356    .text:0000000000000380 find
     /tmp/ccCiZV98.s:403    .text:00000000000003f0 suffBalUser
     /tmp/ccCiZV98.s:574    .text.startup:0000000000000000 main
     /tmp/ccCiZV98.s:1858   .bss:0000000000000000 LOG
     /tmp/ccCiZV98.s:1829   .data:0000000000000001 max500Limit
     /tmp/ccCiZV98.s:1834   .data:0000000000000002 max1000Limit
     /tmp/ccCiZV98.s:1845   .data:0000000000000004 maxAmountCanBeDispensed
     /tmp/ccCiZV98.s:1824   .data:0000000000000000 max100Limit
     /tmp/ccCiZV98.s:1839   .data:0000000000000003 max2000Limit
     /tmp/ccCiZV98.s:1869   .rodata.cst16:0000000000000000 .LC43

UNDEFINED SYMBOLS
strtok
sscanf
arg_str0
arg_str1
arg_lit0
arg_end
arg_nullcheck
stderr
__fprintf_chk
flClose
flFreeError
arg_parse
strtol
__printf_chk
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadStandardFirmware
flGetFirmwareVersion
flGetFirmwareID
flIsCommCapable
flSelectConduit
flIsFPGARunning
fopen
malloc
__getdelim
flSleep
fflush
flIsDeviceAvailable
free
fclose
flWriteChannel
flReadChannel
