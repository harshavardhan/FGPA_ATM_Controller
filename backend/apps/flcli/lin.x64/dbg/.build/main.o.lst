   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.comm	dataFromCSV,1600080,32
   5              		.globl	numLines
   6              		.bss
   7              		.align 4
  10              	numLines:
  11 0000 00000000 		.zero	4
  12              		.local	ptr
  13              		.comm	ptr,8,8
  14              		.local	enableBenchmarking
  15              		.comm	enableBenchmarking,1,1
  16              		.text
  17              		.globl	decrypt
  19              	decrypt:
  20              	.LFB6:
  21              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****    Original 64 bit -> | User 16-bit | Password 16-bit | 2k 8-bit | 1k 8-bit | 500 8-bit | 100 8-bit
   3:main.c        ****    (in VHDL before encryption)  8 7 6 5 4 3 2 1	
   4:main.c        **** */
   5:main.c        **** #define _GNU_SOURCE
   6:main.c        **** #include <stdint.h>
   7:main.c        **** #include <stdbool.h>
   8:main.c        **** #include <stdio.h>
   9:main.c        **** #include <stdlib.h>
  10:main.c        **** #include <string.h>
  11:main.c        **** #include <errno.h>
  12:main.c        **** #include <makestuff.h>
  13:main.c        **** #include <libfpgalink.h>
  14:main.c        **** #include <libbuffer.h>
  15:main.c        **** #include <liberror.h>
  16:main.c        **** #include <libdump.h>
  17:main.c        **** #include <argtable2.h>
  18:main.c        **** #include <readline/readline.h>
  19:main.c        **** #include <readline/history.h>
  20:main.c        **** #ifdef WIN32
  21:main.c        **** #include <Windows.h>
  22:main.c        **** #else
  23:main.c        **** #include <sys/time.h>
  24:main.c        **** #endif
  25:main.c        **** #define N 100005
  26:main.c        **** 
  27:main.c        **** int dataFromCSV[N][4];
  28:main.c        **** int numLines = 0;
  29:main.c        **** bool sigIsRaised(void);
  30:main.c        **** void sigRegisterHandler(void);
  31:main.c        **** 
  32:main.c        **** static const char *ptr;
  33:main.c        **** static bool enableBenchmarking = false;
  34:main.c        **** 
  35:main.c        **** /* Adapted from tiny encryption algorithm wikipedia */
  36:main.c        **** void decrypt(uint32_t * v,uint32_t * k) {
  22              		.loc 1 36 0
  23              		.cfi_startproc
  24 0000 55       		pushq	%rbp
  25              		.cfi_def_cfa_offset 16
  26              		.cfi_offset 6, -16
  27 0001 4889E5   		movq	%rsp, %rbp
  28              		.cfi_def_cfa_register 6
  29 0004 48897DC8 		movq	%rdi, -56(%rbp)
  30 0008 488975C0 		movq	%rsi, -64(%rbp)
  37:main.c        ****     uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */
  31              		.loc 1 37 0
  32 000c 488B45C8 		movq	-56(%rbp), %rax
  33 0010 8B00     		movl	(%rax), %eax
  34 0012 8945DC   		movl	%eax, -36(%rbp)
  35 0015 488B45C8 		movq	-56(%rbp), %rax
  36 0019 8B4004   		movl	4(%rax), %eax
  37 001c 8945E0   		movl	%eax, -32(%rbp)
  38 001f C745E420 		movl	$-957401312, -28(%rbp)
  38      37EFC6
  38:main.c        ****     uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
  39              		.loc 1 38 0
  40 0026 C745ECB9 		movl	$-1640531527, -20(%rbp)
  40      79379E
  39:main.c        ****     uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
  41              		.loc 1 39 0
  42 002d 488B45C0 		movq	-64(%rbp), %rax
  43 0031 8B00     		movl	(%rax), %eax
  44 0033 8945F0   		movl	%eax, -16(%rbp)
  45 0036 488B45C0 		movq	-64(%rbp), %rax
  46 003a 8B4004   		movl	4(%rax), %eax
  47 003d 8945F4   		movl	%eax, -12(%rbp)
  48 0040 488B45C0 		movq	-64(%rbp), %rax
  49 0044 8B4008   		movl	8(%rax), %eax
  50 0047 8945F8   		movl	%eax, -8(%rbp)
  51 004a 488B45C0 		movq	-64(%rbp), %rax
  52 004e 8B400C   		movl	12(%rax), %eax
  53 0051 8945FC   		movl	%eax, -4(%rbp)
  40:main.c        ****     /* basic cycle start */
  41:main.c        ****     for (i=0; i<32; i++) {                         
  54              		.loc 1 41 0
  55 0054 C745E800 		movl	$0, -24(%rbp)
  55      000000
  56 005b EB62     		jmp	.L2
  57              	.L3:
  42:main.c        ****         v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
  58              		.loc 1 42 0 discriminator 2
  59 005d 8B45DC   		movl	-36(%rbp), %eax
  60 0060 C1E004   		sall	$4, %eax
  61 0063 89C2     		movl	%eax, %edx
  62 0065 8B45F8   		movl	-8(%rbp), %eax
  63 0068 8D0C02   		leal	(%rdx,%rax), %ecx
  64 006b 8B45E4   		movl	-28(%rbp), %eax
  65 006e 8B55DC   		movl	-36(%rbp), %edx
  66 0071 01D0     		addl	%edx, %eax
  67 0073 31C1     		xorl	%eax, %ecx
  68 0075 89CA     		movl	%ecx, %edx
  69 0077 8B45DC   		movl	-36(%rbp), %eax
  70 007a C1E805   		shrl	$5, %eax
  71 007d 89C1     		movl	%eax, %ecx
  72 007f 8B45FC   		movl	-4(%rbp), %eax
  73 0082 01C8     		addl	%ecx, %eax
  74 0084 31D0     		xorl	%edx, %eax
  75 0086 2945E0   		subl	%eax, -32(%rbp)
  43:main.c        ****         v0 -= ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
  76              		.loc 1 43 0 discriminator 2
  77 0089 8B45E0   		movl	-32(%rbp), %eax
  78 008c C1E004   		sall	$4, %eax
  79 008f 89C2     		movl	%eax, %edx
  80 0091 8B45F0   		movl	-16(%rbp), %eax
  81 0094 8D0C02   		leal	(%rdx,%rax), %ecx
  82 0097 8B45E4   		movl	-28(%rbp), %eax
  83 009a 8B55E0   		movl	-32(%rbp), %edx
  84 009d 01D0     		addl	%edx, %eax
  85 009f 31C1     		xorl	%eax, %ecx
  86 00a1 89CA     		movl	%ecx, %edx
  87 00a3 8B45E0   		movl	-32(%rbp), %eax
  88 00a6 C1E805   		shrl	$5, %eax
  89 00a9 89C1     		movl	%eax, %ecx
  90 00ab 8B45F4   		movl	-12(%rbp), %eax
  91 00ae 01C8     		addl	%ecx, %eax
  92 00b0 31D0     		xorl	%edx, %eax
  93 00b2 2945DC   		subl	%eax, -36(%rbp)
  44:main.c        ****         sum -= delta;
  94              		.loc 1 44 0 discriminator 2
  95 00b5 8B45EC   		movl	-20(%rbp), %eax
  96 00b8 2945E4   		subl	%eax, -28(%rbp)
  41:main.c        ****         v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
  97              		.loc 1 41 0 discriminator 2
  98 00bb 8345E801 		addl	$1, -24(%rbp)
  99              	.L2:
  41:main.c        ****         v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
 100              		.loc 1 41 0 is_stmt 0 discriminator 1
 101 00bf 837DE81F 		cmpl	$31, -24(%rbp)
 102 00c3 7698     		jbe	.L3
  45:main.c        ****     }
  46:main.c        ****     /* end cycle */
  47:main.c        ****     v[0]=v0; v[1]=v1;
 103              		.loc 1 47 0 is_stmt 1
 104 00c5 488B45C8 		movq	-56(%rbp), %rax
 105 00c9 8B55DC   		movl	-36(%rbp), %edx
 106 00cc 8910     		movl	%edx, (%rax)
 107 00ce 488B45C8 		movq	-56(%rbp), %rax
 108 00d2 488D5004 		leaq	4(%rax), %rdx
 109 00d6 8B45E0   		movl	-32(%rbp), %eax
 110 00d9 8902     		movl	%eax, (%rdx)
  48:main.c        **** }
 111              		.loc 1 48 0
 112 00db 5D       		popq	%rbp
 113              		.cfi_def_cfa 7, 8
 114 00dc C3       		ret
 115              		.cfi_endproc
 116              	.LFE6:
 118              		.globl	encrypt
 120              	encrypt:
 121              	.LFB7:
  49:main.c        **** 
  50:main.c        **** /* Adapted from tiny encryption algorithm wikipedia */
  51:main.c        **** void encrypt (uint32_t* v, uint32_t* k) {
 122              		.loc 1 51 0
 123              		.cfi_startproc
 124 00dd 55       		pushq	%rbp
 125              		.cfi_def_cfa_offset 16
 126              		.cfi_offset 6, -16
 127 00de 4889E5   		movq	%rsp, %rbp
 128              		.cfi_def_cfa_register 6
 129 00e1 48897DC8 		movq	%rdi, -56(%rbp)
 130 00e5 488975C0 		movq	%rsi, -64(%rbp)
  52:main.c        ****     uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */
 131              		.loc 1 52 0
 132 00e9 488B45C8 		movq	-56(%rbp), %rax
 133 00ed 8B00     		movl	(%rax), %eax
 134 00ef 8945DC   		movl	%eax, -36(%rbp)
 135 00f2 488B45C8 		movq	-56(%rbp), %rax
 136 00f6 8B4004   		movl	4(%rax), %eax
 137 00f9 8945E0   		movl	%eax, -32(%rbp)
 138 00fc C745E400 		movl	$0, -28(%rbp)
 138      000000
  53:main.c        ****     uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
 139              		.loc 1 53 0
 140 0103 C745ECB9 		movl	$-1640531527, -20(%rbp)
 140      79379E
  54:main.c        ****     uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
 141              		.loc 1 54 0
 142 010a 488B45C0 		movq	-64(%rbp), %rax
 143 010e 8B00     		movl	(%rax), %eax
 144 0110 8945F0   		movl	%eax, -16(%rbp)
 145 0113 488B45C0 		movq	-64(%rbp), %rax
 146 0117 8B4004   		movl	4(%rax), %eax
 147 011a 8945F4   		movl	%eax, -12(%rbp)
 148 011d 488B45C0 		movq	-64(%rbp), %rax
 149 0121 8B4008   		movl	8(%rax), %eax
 150 0124 8945F8   		movl	%eax, -8(%rbp)
 151 0127 488B45C0 		movq	-64(%rbp), %rax
 152 012b 8B400C   		movl	12(%rax), %eax
 153 012e 8945FC   		movl	%eax, -4(%rbp)
  55:main.c        **** 	/* basic cycle start */
  56:main.c        ****     for (i=0; i < 32; i++) {
 154              		.loc 1 56 0
 155 0131 C745E800 		movl	$0, -24(%rbp)
 155      000000
 156 0138 EB62     		jmp	.L5
 157              	.L6:
  57:main.c        ****         sum += delta;
 158              		.loc 1 57 0 discriminator 2
 159 013a 8B45EC   		movl	-20(%rbp), %eax
 160 013d 0145E4   		addl	%eax, -28(%rbp)
  58:main.c        ****         v0 += ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
 161              		.loc 1 58 0 discriminator 2
 162 0140 8B45E0   		movl	-32(%rbp), %eax
 163 0143 C1E004   		sall	$4, %eax
 164 0146 89C2     		movl	%eax, %edx
 165 0148 8B45F0   		movl	-16(%rbp), %eax
 166 014b 8D0C02   		leal	(%rdx,%rax), %ecx
 167 014e 8B45E4   		movl	-28(%rbp), %eax
 168 0151 8B55E0   		movl	-32(%rbp), %edx
 169 0154 01D0     		addl	%edx, %eax
 170 0156 31C1     		xorl	%eax, %ecx
 171 0158 89CA     		movl	%ecx, %edx
 172 015a 8B45E0   		movl	-32(%rbp), %eax
 173 015d C1E805   		shrl	$5, %eax
 174 0160 89C1     		movl	%eax, %ecx
 175 0162 8B45F4   		movl	-12(%rbp), %eax
 176 0165 01C8     		addl	%ecx, %eax
 177 0167 31D0     		xorl	%edx, %eax
 178 0169 0145DC   		addl	%eax, -36(%rbp)
  59:main.c        ****         v1 += ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
 179              		.loc 1 59 0 discriminator 2
 180 016c 8B45DC   		movl	-36(%rbp), %eax
 181 016f C1E004   		sall	$4, %eax
 182 0172 89C2     		movl	%eax, %edx
 183 0174 8B45F8   		movl	-8(%rbp), %eax
 184 0177 8D0C02   		leal	(%rdx,%rax), %ecx
 185 017a 8B45E4   		movl	-28(%rbp), %eax
 186 017d 8B55DC   		movl	-36(%rbp), %edx
 187 0180 01D0     		addl	%edx, %eax
 188 0182 31C1     		xorl	%eax, %ecx
 189 0184 89CA     		movl	%ecx, %edx
 190 0186 8B45DC   		movl	-36(%rbp), %eax
 191 0189 C1E805   		shrl	$5, %eax
 192 018c 89C1     		movl	%eax, %ecx
 193 018e 8B45FC   		movl	-4(%rbp), %eax
 194 0191 01C8     		addl	%ecx, %eax
 195 0193 31D0     		xorl	%edx, %eax
 196 0195 0145E0   		addl	%eax, -32(%rbp)
  56:main.c        ****         sum += delta;
 197              		.loc 1 56 0 discriminator 2
 198 0198 8345E801 		addl	$1, -24(%rbp)
 199              	.L5:
  56:main.c        ****         sum += delta;
 200              		.loc 1 56 0 is_stmt 0 discriminator 1
 201 019c 837DE81F 		cmpl	$31, -24(%rbp)
 202 01a0 7698     		jbe	.L6
  60:main.c        ****     }
  61:main.c        ****     /* end cycle */
  62:main.c        ****     v[0]=v0; v[1]=v1;
 203              		.loc 1 62 0 is_stmt 1
 204 01a2 488B45C8 		movq	-56(%rbp), %rax
 205 01a6 8B55DC   		movl	-36(%rbp), %edx
 206 01a9 8910     		movl	%edx, (%rax)
 207 01ab 488B45C8 		movq	-56(%rbp), %rax
 208 01af 488D5004 		leaq	4(%rax), %rdx
 209 01b3 8B45E0   		movl	-32(%rbp), %eax
 210 01b6 8902     		movl	%eax, (%rdx)
  63:main.c        **** }
 211              		.loc 1 63 0
 212 01b8 5D       		popq	%rbp
 213              		.cfi_def_cfa 7, 8
 214 01b9 C3       		ret
 215              		.cfi_endproc
 216              	.LFE7:
 218              		.globl	decrypt64
 220              	decrypt64:
 221              	.LFB8:
  64:main.c        **** 
  65:main.c        **** void decrypt64(uint32_t * inpData) {
 222              		.loc 1 65 0
 223              		.cfi_startproc
 224 01ba 55       		pushq	%rbp
 225              		.cfi_def_cfa_offset 16
 226              		.cfi_offset 6, -16
 227 01bb 4889E5   		movq	%rsp, %rbp
 228              		.cfi_def_cfa_register 6
 229 01be 4883EC18 		subq	$24, %rsp
 230 01c2 48897DE8 		movq	%rdi, -24(%rbp)
  66:main.c        **** 	uint32_t key[4];
  67:main.c        **** 	key[0] = 0x2927c18c; key[1] = 0x75f8c48f; key[2] = 0x43fd99f7; key[3] = 0xff0f7457;
 231              		.loc 1 67 0
 232 01c6 C745F08C 		movl	$690471308, -16(%rbp)
 232      C12729
 233 01cd C745F48F 		movl	$1979237519, -12(%rbp)
 233      C4F875
 234 01d4 C745F8F7 		movl	$1140693495, -8(%rbp)
 234      99FD43
 235 01db C745FC57 		movl	$-15764393, -4(%rbp)
 235      740FFF
  68:main.c        **** 	decrypt(inpData,key);
 236              		.loc 1 68 0
 237 01e2 488D55F0 		leaq	-16(%rbp), %rdx
 238 01e6 488B45E8 		movq	-24(%rbp), %rax
 239 01ea 4889D6   		movq	%rdx, %rsi
 240 01ed 4889C7   		movq	%rax, %rdi
 241 01f0 E8000000 		call	decrypt
 241      00
  69:main.c        **** }
 242              		.loc 1 69 0
 243 01f5 C9       		leave
 244              		.cfi_def_cfa 7, 8
 245 01f6 C3       		ret
 246              		.cfi_endproc
 247              	.LFE8:
 249              		.globl	encrypt64
 251              	encrypt64:
 252              	.LFB9:
  70:main.c        **** 
  71:main.c        **** void encrypt64(uint32_t * inpData) {
 253              		.loc 1 71 0
 254              		.cfi_startproc
 255 01f7 55       		pushq	%rbp
 256              		.cfi_def_cfa_offset 16
 257              		.cfi_offset 6, -16
 258 01f8 4889E5   		movq	%rsp, %rbp
 259              		.cfi_def_cfa_register 6
 260 01fb 4883EC18 		subq	$24, %rsp
 261 01ff 48897DE8 		movq	%rdi, -24(%rbp)
  72:main.c        **** 	uint32_t key[4];
  73:main.c        **** 	key[0] = 0x2927c18c; key[1] = 0x75f8c48f; key[2] = 0x43fd99f7; key[3] = 0xff0f7457;
 262              		.loc 1 73 0
 263 0203 C745F08C 		movl	$690471308, -16(%rbp)
 263      C12729
 264 020a C745F48F 		movl	$1979237519, -12(%rbp)
 264      C4F875
 265 0211 C745F8F7 		movl	$1140693495, -8(%rbp)
 265      99FD43
 266 0218 C745FC57 		movl	$-15764393, -4(%rbp)
 266      740FFF
  74:main.c        **** 	encrypt(inpData,key);
 267              		.loc 1 74 0
 268 021f 488D55F0 		leaq	-16(%rbp), %rdx
 269 0223 488B45E8 		movq	-24(%rbp), %rax
 270 0227 4889D6   		movq	%rdx, %rsi
 271 022a 4889C7   		movq	%rax, %rdi
 272 022d E8000000 		call	encrypt
 272      00
  75:main.c        **** }
 273              		.loc 1 75 0
 274 0232 C9       		leave
 275              		.cfi_def_cfa 7, 8
 276 0233 C3       		ret
 277              		.cfi_endproc
 278              	.LFE9:
 280              		.globl	myHash
 282              	myHash:
 283              	.LFB10:
  76:main.c        **** 
  77:main.c        **** uint16_t myHash(uint16_t befHash) {
 284              		.loc 1 77 0
 285              		.cfi_startproc
 286 0234 55       		pushq	%rbp
 287              		.cfi_def_cfa_offset 16
 288              		.cfi_offset 6, -16
 289 0235 4889E5   		movq	%rsp, %rbp
 290              		.cfi_def_cfa_register 6
 291 0238 89F8     		movl	%edi, %eax
 292 023a 668945EC 		movw	%ax, -20(%rbp)
  78:main.c        **** 	uint16_t ret = 0;
 293              		.loc 1 78 0
 294 023e 66C745FA 		movw	$0, -6(%rbp)
 294      0000
 295              	.LBB2:
  79:main.c        **** 	for(uint16_t i=0;i<=15;i++) {
 296              		.loc 1 79 0
 297 0244 66C745FC 		movw	$0, -4(%rbp)
 297      0000
 298 024a EB4F     		jmp	.L10
 299              	.L12:
  80:main.c        **** 		if((befHash & (1 << i)) != 0) {
 300              		.loc 1 80 0
 301 024c 0FB755EC 		movzwl	-20(%rbp), %edx
 302 0250 0FB745FC 		movzwl	-4(%rbp), %eax
 303 0254 89C1     		movl	%eax, %ecx
 304 0256 D3FA     		sarl	%cl, %edx
 305 0258 89D0     		movl	%edx, %eax
 306 025a 83E001   		andl	$1, %eax
 307 025d 85C0     		testl	%eax, %eax
 308 025f 742F     		je	.L11
 309              	.LBB3:
  81:main.c        **** 			uint16_t j = ((i+11)%16);
 310              		.loc 1 81 0
 311 0261 0FB745FC 		movzwl	-4(%rbp), %eax
 312 0265 8D500B   		leal	11(%rax), %edx
 313 0268 89D0     		movl	%edx, %eax
 314 026a C1F81F   		sarl	$31, %eax
 315 026d C1E81C   		shrl	$28, %eax
 316 0270 01C2     		addl	%eax, %edx
 317 0272 83E20F   		andl	$15, %edx
 318 0275 29C2     		subl	%eax, %edx
 319 0277 89D0     		movl	%edx, %eax
 320 0279 668945FE 		movw	%ax, -2(%rbp)
  82:main.c        **** 			ret += (1 << j);
 321              		.loc 1 82 0
 322 027d 0FB745FE 		movzwl	-2(%rbp), %eax
 323 0281 BA010000 		movl	$1, %edx
 323      00
 324 0286 89C1     		movl	%eax, %ecx
 325 0288 D3E2     		sall	%cl, %edx
 326 028a 89D0     		movl	%edx, %eax
 327 028c 660145FA 		addw	%ax, -6(%rbp)
 328              	.L11:
 329              	.LBE3:
  79:main.c        **** 		if((befHash & (1 << i)) != 0) {
 330              		.loc 1 79 0
 331 0290 0FB745FC 		movzwl	-4(%rbp), %eax
 332 0294 83C001   		addl	$1, %eax
 333 0297 668945FC 		movw	%ax, -4(%rbp)
 334              	.L10:
  79:main.c        **** 		if((befHash & (1 << i)) != 0) {
 335              		.loc 1 79 0 is_stmt 0 discriminator 1
 336 029b 66837DFC 		cmpw	$15, -4(%rbp)
 336      0F
 337 02a0 76AA     		jbe	.L12
 338              	.LBE2:
  83:main.c        **** 		}
  84:main.c        **** 	}
  85:main.c        **** 	return ret;
 339              		.loc 1 85 0 is_stmt 1
 340 02a2 0FB745FA 		movzwl	-6(%rbp), %eax
  86:main.c        **** }
 341              		.loc 1 86 0
 342 02a6 5D       		popq	%rbp
 343              		.cfi_def_cfa 7, 8
 344 02a7 C3       		ret
 345              		.cfi_endproc
 346              	.LFE10:
 348              		.section	.rodata
 349              	.LC0:
 350 0000 2C00     		.string	","
 351              	.LC1:
 352 0002 256400   		.string	"%d"
 353              		.text
 354              		.globl	format
 356              	format:
 357              	.LFB11:
  87:main.c        **** 
  88:main.c        **** void format(char * line) {
 358              		.loc 1 88 0
 359              		.cfi_startproc
 360 02a8 55       		pushq	%rbp
 361              		.cfi_def_cfa_offset 16
 362              		.cfi_offset 6, -16
 363 02a9 4889E5   		movq	%rsp, %rbp
 364              		.cfi_def_cfa_register 6
 365 02ac 4883EC20 		subq	$32, %rsp
 366 02b0 48897DE8 		movq	%rdi, -24(%rbp)
  89:main.c        ****     char * wordPtr;   
  90:main.c        ****     wordPtr = strtok(line,",");
 367              		.loc 1 90 0
 368 02b4 488B45E8 		movq	-24(%rbp), %rax
 369 02b8 BE000000 		movl	$.LC0, %esi
 369      00
 370 02bd 4889C7   		movq	%rax, %rdi
 371 02c0 E8000000 		call	strtok
 371      00
 372 02c5 488945F8 		movq	%rax, -8(%rbp)
  91:main.c        ****     int cnt = 0;
 373              		.loc 1 91 0
 374 02c9 C745F400 		movl	$0, -12(%rbp)
 374      000000
  92:main.c        ****     while( wordPtr != NULL ) {
 375              		.loc 1 92 0
 376 02d0 EB4D     		jmp	.L15
 377              	.L16:
  93:main.c        ****         sscanf(wordPtr, "%d",&dataFromCSV[numLines][cnt]);
 378              		.loc 1 93 0
 379 02d2 8B150000 		movl	numLines(%rip), %edx
 379      0000
 380 02d8 8B45F4   		movl	-12(%rbp), %eax
 381 02db 4898     		cltq
 382 02dd 4863D2   		movslq	%edx, %rdx
 383 02e0 48C1E202 		salq	$2, %rdx
 384 02e4 4801D0   		addq	%rdx, %rax
 385 02e7 48C1E002 		salq	$2, %rax
 386 02eb 488D9000 		leaq	dataFromCSV(%rax), %rdx
 386      000000
 387 02f2 488B45F8 		movq	-8(%rbp), %rax
 388 02f6 BE000000 		movl	$.LC1, %esi
 388      00
 389 02fb 4889C7   		movq	%rax, %rdi
 390 02fe B8000000 		movl	$0, %eax
 390      00
 391 0303 E8000000 		call	sscanf
 391      00
  94:main.c        ****         // printf("%d\n",dataFromCSV[numLines][cnt]);
  95:main.c        ****         wordPtr = strtok(NULL,",");
 392              		.loc 1 95 0
 393 0308 BE000000 		movl	$.LC0, %esi
 393      00
 394 030d BF000000 		movl	$0, %edi
 394      00
 395 0312 E8000000 		call	strtok
 395      00
 396 0317 488945F8 		movq	%rax, -8(%rbp)
  96:main.c        ****         cnt++;
 397              		.loc 1 96 0
 398 031b 8345F401 		addl	$1, -12(%rbp)
 399              	.L15:
  92:main.c        ****         sscanf(wordPtr, "%d",&dataFromCSV[numLines][cnt]);
 400              		.loc 1 92 0 discriminator 1
 401 031f 48837DF8 		cmpq	$0, -8(%rbp)
 401      00
 402 0324 75AC     		jne	.L16
  97:main.c        ****     }
  98:main.c        **** }
 403              		.loc 1 98 0
 404 0326 C9       		leave
 405              		.cfi_def_cfa 7, 8
 406 0327 C3       		ret
 407              		.cfi_endproc
 408              	.LFE11:
 410              		.globl	find
 412              	find:
 413              	.LFB12:
  99:main.c        **** 
 100:main.c        **** bool find(uint16_t userID,uint16_t hashedPin,bool * isAdmin,int * bal,int * inLineNum) {
 414              		.loc 1 100 0
 415              		.cfi_startproc
 416 0328 55       		pushq	%rbp
 417              		.cfi_def_cfa_offset 16
 418              		.cfi_offset 6, -16
 419 0329 4889E5   		movq	%rsp, %rbp
 420              		.cfi_def_cfa_register 6
 421 032c 89F0     		movl	%esi, %eax
 422 032e 488955E0 		movq	%rdx, -32(%rbp)
 423 0332 48894DD8 		movq	%rcx, -40(%rbp)
 424 0336 4C8945D0 		movq	%r8, -48(%rbp)
 425 033a 66897DEC 		movw	%di, -20(%rbp)
 426 033e 668945E8 		movw	%ax, -24(%rbp)
 101:main.c        **** 	bool pos = false;
 427              		.loc 1 101 0
 428 0342 C645FB00 		movb	$0, -5(%rbp)
 429              	.LBB4:
 102:main.c        **** 	for(int i=1;i <= numLines;i++) {
 430              		.loc 1 102 0
 431 0346 C745FC01 		movl	$1, -4(%rbp)
 431      000000
 432 034d EB75     		jmp	.L18
 433              	.L22:
 103:main.c        **** 		if(userID == (uint16_t)dataFromCSV[i][0] && hashedPin == (uint16_t)dataFromCSV[i][1]) {
 434              		.loc 1 103 0
 435 034f 8B45FC   		movl	-4(%rbp), %eax
 436 0352 4898     		cltq
 437 0354 48C1E004 		salq	$4, %rax
 438 0358 48050000 		addq	$dataFromCSV, %rax
 438      0000
 439 035e 8B00     		movl	(%rax), %eax
 440 0360 663B45EC 		cmpw	-20(%rbp), %ax
 441 0364 755A     		jne	.L19
 442              		.loc 1 103 0 is_stmt 0 discriminator 1
 443 0366 8B45FC   		movl	-4(%rbp), %eax
 444 0369 4898     		cltq
 445 036b 48C1E004 		salq	$4, %rax
 446 036f 48050000 		addq	$dataFromCSV+4, %rax
 446      0000
 447 0375 8B00     		movl	(%rax), %eax
 448 0377 663B45E8 		cmpw	-24(%rbp), %ax
 449 037b 7543     		jne	.L19
 104:main.c        **** 			pos = true;
 450              		.loc 1 104 0 is_stmt 1
 451 037d C645FB01 		movb	$1, -5(%rbp)
 105:main.c        **** 			if(dataFromCSV[i][2] == 1) *isAdmin = true;
 452              		.loc 1 105 0
 453 0381 8B45FC   		movl	-4(%rbp), %eax
 454 0384 4898     		cltq
 455 0386 48C1E004 		salq	$4, %rax
 456 038a 48050000 		addq	$dataFromCSV+8, %rax
 456      0000
 457 0390 8B00     		movl	(%rax), %eax
 458 0392 83F801   		cmpl	$1, %eax
 459 0395 7507     		jne	.L20
 460              		.loc 1 105 0 is_stmt 0 discriminator 1
 461 0397 488B45E0 		movq	-32(%rbp), %rax
 462 039b C60001   		movb	$1, (%rax)
 463              	.L20:
 106:main.c        **** 			*bal = dataFromCSV[i][3]; *inLineNum = i;
 464              		.loc 1 106 0 is_stmt 1
 465 039e 8B45FC   		movl	-4(%rbp), %eax
 466 03a1 4898     		cltq
 467 03a3 48C1E004 		salq	$4, %rax
 468 03a7 48050000 		addq	$dataFromCSV+12, %rax
 468      0000
 469 03ad 8B10     		movl	(%rax), %edx
 470 03af 488B45D8 		movq	-40(%rbp), %rax
 471 03b3 8910     		movl	%edx, (%rax)
 472 03b5 488B45D0 		movq	-48(%rbp), %rax
 473 03b9 8B55FC   		movl	-4(%rbp), %edx
 474 03bc 8910     		movl	%edx, (%rax)
 107:main.c        **** 			break;
 475              		.loc 1 107 0
 476 03be EB0F     		jmp	.L21
 477              	.L19:
 102:main.c        **** 		if(userID == (uint16_t)dataFromCSV[i][0] && hashedPin == (uint16_t)dataFromCSV[i][1]) {
 478              		.loc 1 102 0
 479 03c0 8345FC01 		addl	$1, -4(%rbp)
 480              	.L18:
 102:main.c        **** 		if(userID == (uint16_t)dataFromCSV[i][0] && hashedPin == (uint16_t)dataFromCSV[i][1]) {
 481              		.loc 1 102 0 is_stmt 0 discriminator 1
 482 03c4 8B050000 		movl	numLines(%rip), %eax
 482      0000
 483 03ca 3945FC   		cmpl	%eax, -4(%rbp)
 484 03cd 7E80     		jle	.L22
 485              	.L21:
 486              	.LBE4:
 108:main.c        **** 		}
 109:main.c        **** 	}
 110:main.c        ****     return pos; 
 487              		.loc 1 110 0 is_stmt 1
 488 03cf 0FB645FB 		movzbl	-5(%rbp), %eax
 111:main.c        **** }
 489              		.loc 1 111 0
 490 03d3 5D       		popq	%rbp
 491              		.cfi_def_cfa 7, 8
 492 03d4 C3       		ret
 493              		.cfi_endproc
 494              	.LFE12:
 496              		.globl	suffBal
 498              	suffBal:
 499              	.LFB13:
 112:main.c        **** 
 113:main.c        **** bool suffBal(int bal,int * reqAmo,uint8_t num_100,uint8_t num_500,uint8_t num_1000,uint8_t num_2000
 500              		.loc 1 113 0
 501              		.cfi_startproc
 502 03d5 55       		pushq	%rbp
 503              		.cfi_def_cfa_offset 16
 504              		.cfi_offset 6, -16
 505 03d6 4889E5   		movq	%rsp, %rbp
 506              		.cfi_def_cfa_register 6
 507 03d9 897DEC   		movl	%edi, -20(%rbp)
 508 03dc 488975E0 		movq	%rsi, -32(%rbp)
 509 03e0 89C8     		movl	%ecx, %eax
 510 03e2 4489C6   		movl	%r8d, %esi
 511 03e5 4489C9   		movl	%r9d, %ecx
 512 03e8 8855E8   		movb	%dl, -24(%rbp)
 513 03eb 8845DC   		movb	%al, -36(%rbp)
 514 03ee 408875D8 		movb	%sil, -40(%rbp)
 515 03f2 884DD4   		movb	%cl, -44(%rbp)
 114:main.c        **** 	bool hasSuffBal = true;
 516              		.loc 1 114 0
 517 03f5 C645FF01 		movb	$1, -1(%rbp)
 115:main.c        **** 	*reqAmo += 100*((int)num_100);
 518              		.loc 1 115 0
 519 03f9 488B45E0 		movq	-32(%rbp), %rax
 520 03fd 8B10     		movl	(%rax), %edx
 521 03ff 0FB645E8 		movzbl	-24(%rbp), %eax
 522 0403 6BC064   		imull	$100, %eax, %eax
 523 0406 01C2     		addl	%eax, %edx
 524 0408 488B45E0 		movq	-32(%rbp), %rax
 525 040c 8910     		movl	%edx, (%rax)
 116:main.c        **** 	*reqAmo += 500*((int)num_500);
 526              		.loc 1 116 0
 527 040e 488B45E0 		movq	-32(%rbp), %rax
 528 0412 8B10     		movl	(%rax), %edx
 529 0414 0FB645DC 		movzbl	-36(%rbp), %eax
 530 0418 69C0F401 		imull	$500, %eax, %eax
 530      0000
 531 041e 01C2     		addl	%eax, %edx
 532 0420 488B45E0 		movq	-32(%rbp), %rax
 533 0424 8910     		movl	%edx, (%rax)
 117:main.c        **** 	*reqAmo += 1000*((int)num_1000);
 534              		.loc 1 117 0
 535 0426 488B45E0 		movq	-32(%rbp), %rax
 536 042a 8B10     		movl	(%rax), %edx
 537 042c 0FB645D8 		movzbl	-40(%rbp), %eax
 538 0430 69C0E803 		imull	$1000, %eax, %eax
 538      0000
 539 0436 01C2     		addl	%eax, %edx
 540 0438 488B45E0 		movq	-32(%rbp), %rax
 541 043c 8910     		movl	%edx, (%rax)
 118:main.c        **** 	*reqAmo += 2000*((int)num_2000);
 542              		.loc 1 118 0
 543 043e 488B45E0 		movq	-32(%rbp), %rax
 544 0442 8B10     		movl	(%rax), %edx
 545 0444 0FB645D4 		movzbl	-44(%rbp), %eax
 546 0448 69C0D007 		imull	$2000, %eax, %eax
 546      0000
 547 044e 01C2     		addl	%eax, %edx
 548 0450 488B45E0 		movq	-32(%rbp), %rax
 549 0454 8910     		movl	%edx, (%rax)
 119:main.c        **** 	if(*reqAmo > bal) hasSuffBal = false;
 550              		.loc 1 119 0
 551 0456 488B45E0 		movq	-32(%rbp), %rax
 552 045a 8B00     		movl	(%rax), %eax
 553 045c 3B45EC   		cmpl	-20(%rbp), %eax
 554 045f 7E04     		jle	.L25
 555              		.loc 1 119 0 is_stmt 0 discriminator 1
 556 0461 C645FF00 		movb	$0, -1(%rbp)
 557              	.L25:
 120:main.c        **** 	return hasSuffBal;
 558              		.loc 1 120 0 is_stmt 1
 559 0465 0FB645FF 		movzbl	-1(%rbp), %eax
 121:main.c        **** }
 560              		.loc 1 121 0
 561 0469 5D       		popq	%rbp
 562              		.cfi_def_cfa 7, 8
 563 046a C3       		ret
 564              		.cfi_endproc
 565              	.LFE13:
 568              	isHexDigit:
 569              	.LFB14:
 122:main.c        **** 
 123:main.c        **** static bool isHexDigit(char ch) {
 570              		.loc 1 123 0
 571              		.cfi_startproc
 572 046b 55       		pushq	%rbp
 573              		.cfi_def_cfa_offset 16
 574              		.cfi_offset 6, -16
 575 046c 4889E5   		movq	%rsp, %rbp
 576              		.cfi_def_cfa_register 6
 577 046f 89F8     		movl	%edi, %eax
 578 0471 8845FC   		movb	%al, -4(%rbp)
 124:main.c        **** 	return
 125:main.c        **** 		(ch >= '0' && ch <= '9') ||
 126:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 579              		.loc 1 126 0
 580 0474 807DFC2F 		cmpb	$47, -4(%rbp)
 581 0478 7E06     		jle	.L28
 125:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 582              		.loc 1 125 0
 583 047a 807DFC39 		cmpb	$57, -4(%rbp)
 584 047e 7E18     		jle	.L29
 585              	.L28:
 125:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 586              		.loc 1 125 0 is_stmt 0 discriminator 1
 587 0480 807DFC60 		cmpb	$96, -4(%rbp)
 588 0484 7E06     		jle	.L30
 589              		.loc 1 126 0 is_stmt 1
 590 0486 807DFC66 		cmpb	$102, -4(%rbp)
 591 048a 7E0C     		jle	.L29
 592              	.L30:
 593              		.loc 1 126 0 is_stmt 0 discriminator 2
 594 048c 807DFC40 		cmpb	$64, -4(%rbp)
 595 0490 7E0D     		jle	.L31
 127:main.c        **** 		(ch >= 'A' && ch <= 'F');
 596              		.loc 1 127 0 is_stmt 1
 597 0492 807DFC46 		cmpb	$70, -4(%rbp)
 598 0496 7F07     		jg	.L31
 599              	.L29:
 126:main.c        **** 		(ch >= 'A' && ch <= 'F');
 600              		.loc 1 126 0 discriminator 1
 601 0498 B8010000 		movl	$1, %eax
 601      00
 602 049d EB05     		jmp	.L32
 603              	.L31:
 604 049f B8000000 		movl	$0, %eax
 604      00
 605              	.L32:
 124:main.c        **** 		(ch >= '0' && ch <= '9') ||
 606              		.loc 1 124 0
 607 04a4 83E001   		andl	$1, %eax
 128:main.c        **** }
 608              		.loc 1 128 0
 609 04a7 5D       		popq	%rbp
 610              		.cfi_def_cfa 7, 8
 611 04a8 C3       		ret
 612              		.cfi_endproc
 613              	.LFE14:
 616              	calcChecksum:
 617              	.LFB15:
 129:main.c        **** 
 130:main.c        **** static uint16 calcChecksum(const uint8 *data, size_t length) {
 618              		.loc 1 130 0
 619              		.cfi_startproc
 620 04a9 55       		pushq	%rbp
 621              		.cfi_def_cfa_offset 16
 622              		.cfi_offset 6, -16
 623 04aa 4889E5   		movq	%rsp, %rbp
 624              		.cfi_def_cfa_register 6
 625 04ad 48897DE8 		movq	%rdi, -24(%rbp)
 626 04b1 488975E0 		movq	%rsi, -32(%rbp)
 131:main.c        **** 	uint16 cksum = 0x0000;
 627              		.loc 1 131 0
 628 04b5 66C745FE 		movw	$0, -2(%rbp)
 628      0000
 132:main.c        **** 	while ( length-- ) {
 629              		.loc 1 132 0
 630 04bb EB16     		jmp	.L35
 631              	.L36:
 133:main.c        **** 		cksum = (uint16)(cksum + *data++);
 632              		.loc 1 133 0
 633 04bd 488B45E8 		movq	-24(%rbp), %rax
 634 04c1 488D5001 		leaq	1(%rax), %rdx
 635 04c5 488955E8 		movq	%rdx, -24(%rbp)
 636 04c9 0FB600   		movzbl	(%rax), %eax
 637 04cc 0FB6C0   		movzbl	%al, %eax
 638 04cf 660145FE 		addw	%ax, -2(%rbp)
 639              	.L35:
 132:main.c        **** 	while ( length-- ) {
 640              		.loc 1 132 0 discriminator 1
 641 04d3 488B45E0 		movq	-32(%rbp), %rax
 642 04d7 488D50FF 		leaq	-1(%rax), %rdx
 643 04db 488955E0 		movq	%rdx, -32(%rbp)
 644 04df 4885C0   		testq	%rax, %rax
 645 04e2 75D9     		jne	.L36
 134:main.c        **** 	}
 135:main.c        **** 	return cksum;
 646              		.loc 1 135 0
 647 04e4 0FB745FE 		movzwl	-2(%rbp), %eax
 136:main.c        **** }
 648              		.loc 1 136 0
 649 04e8 5D       		popq	%rbp
 650              		.cfi_def_cfa 7, 8
 651 04e9 C3       		ret
 652              		.cfi_endproc
 653              	.LFE15:
 656              	getHexNibble:
 657              	.LFB16:
 137:main.c        **** 
 138:main.c        **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 658              		.loc 1 138 0
 659              		.cfi_startproc
 660 04ea 55       		pushq	%rbp
 661              		.cfi_def_cfa_offset 16
 662              		.cfi_offset 6, -16
 663 04eb 4889E5   		movq	%rsp, %rbp
 664              		.cfi_def_cfa_register 6
 665 04ee 89F8     		movl	%edi, %eax
 666 04f0 488975F0 		movq	%rsi, -16(%rbp)
 667 04f4 8845FC   		movb	%al, -4(%rbp)
 139:main.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 668              		.loc 1 139 0
 669 04f7 807DFC2F 		cmpb	$47, -4(%rbp)
 670 04fb 7E1A     		jle	.L39
 671              		.loc 1 139 0 is_stmt 0 discriminator 1
 672 04fd 807DFC39 		cmpb	$57, -4(%rbp)
 673 0501 7F14     		jg	.L39
 140:main.c        **** 		*nibble = (uint8)(hexDigit - '0');
 674              		.loc 1 140 0 is_stmt 1
 675 0503 0FB645FC 		movzbl	-4(%rbp), %eax
 676 0507 8D50D0   		leal	-48(%rax), %edx
 677 050a 488B45F0 		movq	-16(%rbp), %rax
 678 050e 8810     		movb	%dl, (%rax)
 141:main.c        **** 		return false;
 679              		.loc 1 141 0
 680 0510 B8000000 		movl	$0, %eax
 680      00
 681 0515 EB45     		jmp	.L40
 682              	.L39:
 142:main.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 683              		.loc 1 142 0
 684 0517 807DFC60 		cmpb	$96, -4(%rbp)
 685 051b 7E1A     		jle	.L41
 686              		.loc 1 142 0 is_stmt 0 discriminator 1
 687 051d 807DFC66 		cmpb	$102, -4(%rbp)
 688 0521 7F14     		jg	.L41
 143:main.c        **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 689              		.loc 1 143 0 is_stmt 1
 690 0523 0FB645FC 		movzbl	-4(%rbp), %eax
 691 0527 8D50A9   		leal	-87(%rax), %edx
 692 052a 488B45F0 		movq	-16(%rbp), %rax
 693 052e 8810     		movb	%dl, (%rax)
 144:main.c        **** 		return false;
 694              		.loc 1 144 0
 695 0530 B8000000 		movl	$0, %eax
 695      00
 696 0535 EB25     		jmp	.L40
 697              	.L41:
 145:main.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 698              		.loc 1 145 0
 699 0537 807DFC40 		cmpb	$64, -4(%rbp)
 700 053b 7E1A     		jle	.L42
 701              		.loc 1 145 0 is_stmt 0 discriminator 1
 702 053d 807DFC46 		cmpb	$70, -4(%rbp)
 703 0541 7F14     		jg	.L42
 146:main.c        **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 704              		.loc 1 146 0 is_stmt 1
 705 0543 0FB645FC 		movzbl	-4(%rbp), %eax
 706 0547 8D50C9   		leal	-55(%rax), %edx
 707 054a 488B45F0 		movq	-16(%rbp), %rax
 708 054e 8810     		movb	%dl, (%rax)
 147:main.c        **** 		return false;
 709              		.loc 1 147 0
 710 0550 B8000000 		movl	$0, %eax
 710      00
 711 0555 EB05     		jmp	.L40
 712              	.L42:
 148:main.c        **** 	} else {
 149:main.c        **** 		return true;
 713              		.loc 1 149 0
 714 0557 B8010000 		movl	$1, %eax
 714      00
 715              	.L40:
 150:main.c        **** 	}
 151:main.c        **** }
 716              		.loc 1 151 0
 717 055c 5D       		popq	%rbp
 718              		.cfi_def_cfa 7, 8
 719 055d C3       		ret
 720              		.cfi_endproc
 721              	.LFE16:
 724              	getHexByte:
 725              	.LFB17:
 152:main.c        **** 
 153:main.c        **** static int getHexByte(uint8 *byte) {
 726              		.loc 1 153 0
 727              		.cfi_startproc
 728 055e 55       		pushq	%rbp
 729              		.cfi_def_cfa_offset 16
 730              		.cfi_offset 6, -16
 731 055f 4889E5   		movq	%rsp, %rbp
 732              		.cfi_def_cfa_register 6
 733 0562 4883EC18 		subq	$24, %rsp
 734 0566 48897DE8 		movq	%rdi, -24(%rbp)
 154:main.c        **** 	uint8 upperNibble;
 155:main.c        **** 	uint8 lowerNibble;
 156:main.c        **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 735              		.loc 1 156 0
 736 056a 488B0500 		movq	ptr(%rip), %rax
 736      000000
 737 0571 0FB600   		movzbl	(%rax), %eax
 738 0574 0FBEC0   		movsbl	%al, %eax
 739 0577 488D55FE 		leaq	-2(%rbp), %rdx
 740 057b 4889D6   		movq	%rdx, %rsi
 741 057e 89C7     		movl	%eax, %edi
 742 0580 E865FFFF 		call	getHexNibble
 742      FF
 743 0585 83F001   		xorl	$1, %eax
 744 0588 84C0     		testb	%al, %al
 745 058a 744C     		je	.L44
 746              		.loc 1 156 0 is_stmt 0 discriminator 1
 747 058c 488B0500 		movq	ptr(%rip), %rax
 747      000000
 748 0593 4883C001 		addq	$1, %rax
 749 0597 0FB600   		movzbl	(%rax), %eax
 750 059a 0FBEC0   		movsbl	%al, %eax
 751 059d 488D55FF 		leaq	-1(%rbp), %rdx
 752 05a1 4889D6   		movq	%rdx, %rsi
 753 05a4 89C7     		movl	%eax, %edi
 754 05a6 E83FFFFF 		call	getHexNibble
 754      FF
 755 05ab 83F001   		xorl	$1, %eax
 756 05ae 84C0     		testb	%al, %al
 757 05b0 7426     		je	.L44
 157:main.c        **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 758              		.loc 1 157 0 is_stmt 1
 759 05b2 0FB645FE 		movzbl	-2(%rbp), %eax
 760 05b6 0FB6C0   		movzbl	%al, %eax
 761 05b9 C1E004   		sall	$4, %eax
 762 05bc 89C2     		movl	%eax, %edx
 763 05be 0FB645FF 		movzbl	-1(%rbp), %eax
 764 05c2 09D0     		orl	%edx, %eax
 765 05c4 89C2     		movl	%eax, %edx
 766 05c6 488B45E8 		movq	-24(%rbp), %rax
 767 05ca 8810     		movb	%dl, (%rax)
 158:main.c        **** 		byte += 2;
 768              		.loc 1 158 0
 769 05cc 488345E8 		addq	$2, -24(%rbp)
 769      02
 159:main.c        **** 		return 0;
 770              		.loc 1 159 0
 771 05d1 B8000000 		movl	$0, %eax
 771      00
 772 05d6 EB05     		jmp	.L46
 773              	.L44:
 160:main.c        **** 	} else {
 161:main.c        **** 		return 1;
 774              		.loc 1 161 0
 775 05d8 B8010000 		movl	$1, %eax
 775      00
 776              	.L46:
 162:main.c        **** 	}
 163:main.c        **** }
 777              		.loc 1 163 0
 778 05dd C9       		leave
 779              		.cfi_def_cfa 7, 8
 780 05de C3       		ret
 781              		.cfi_endproc
 782              	.LFE17:
 784              		.section	.rodata
 785              	.LC2:
 786 0005 556E7061 		.string	"Unparseable hex number"
 786      72736561 
 786      626C6520 
 786      68657820 
 786      6E756D62 
 787              	.LC3:
 788 001c 4368616E 		.string	"Channel out of range"
 788      6E656C20 
 788      6F757420 
 788      6F662072 
 788      616E6765 
 789              	.LC4:
 790 0031 436F6E64 		.string	"Conduit out of range"
 790      75697420 
 790      6F757420 
 790      6F662072 
 790      616E6765 
 791              	.LC5:
 792 0046 496C6C65 		.string	"Illegal character"
 792      67616C20 
 792      63686172 
 792      61637465 
 792      7200
 793              	.LC6:
 794 0058 556E7465 		.string	"Unterminated string"
 794      726D696E 
 794      61746564 
 794      20737472 
 794      696E6700 
 795              	.LC7:
 796 006c 4E6F206D 		.string	"No memory"
 796      656D6F72 
 796      7900
 797              	.LC8:
 798 0076 456D7074 		.string	"Empty string"
 798      79207374 
 798      72696E67 
 798      00
 799              	.LC9:
 800 0083 4F646420 		.string	"Odd number of digits"
 800      6E756D62 
 800      6572206F 
 800      66206469 
 800      67697473 
 801              	.LC10:
 802 0098 43616E6E 		.string	"Cannot load file"
 802      6F74206C 
 802      6F616420 
 802      66696C65 
 802      00
 803              	.LC11:
 804 00a9 43616E6E 		.string	"Cannot save file"
 804      6F742073 
 804      61766520 
 804      66696C65 
 804      00
 805              	.LC12:
 806 00ba 42616420 		.string	"Bad arguments"
 806      61726775 
 806      6D656E74 
 806      7300
 807 00c8 00000000 		.align 32
 807      00000000 
 807      00000000 
 807      00000000 
 807      00000000 
 810              	errMessages:
 811 00e0 00000000 		.quad	0
 811      00000000 
 812 00e8 00000000 		.quad	0
 812      00000000 
 813 00f0 00000000 		.quad	.LC2
 813      00000000 
 814 00f8 00000000 		.quad	.LC3
 814      00000000 
 815 0100 00000000 		.quad	.LC4
 815      00000000 
 816 0108 00000000 		.quad	.LC5
 816      00000000 
 817 0110 00000000 		.quad	.LC6
 817      00000000 
 818 0118 00000000 		.quad	.LC7
 818      00000000 
 819 0120 00000000 		.quad	.LC8
 819      00000000 
 820 0128 00000000 		.quad	.LC9
 820      00000000 
 821 0130 00000000 		.quad	.LC10
 821      00000000 
 822 0138 00000000 		.quad	.LC11
 822      00000000 
 823 0140 00000000 		.quad	.LC12
 823      00000000 
 824              	.LC13:
 825 0148 646F5265 		.string	"doRead()"
 825      61642829 
 825      00
 826              		.text
 828              	doRead:
 829              	.LFB18:
 164:main.c        **** 
 165:main.c        **** static const char *const errMessages[] = {
 166:main.c        **** 	NULL,
 167:main.c        **** 	NULL,
 168:main.c        **** 	"Unparseable hex number",
 169:main.c        **** 	"Channel out of range",
 170:main.c        **** 	"Conduit out of range",
 171:main.c        **** 	"Illegal character",
 172:main.c        **** 	"Unterminated string",
 173:main.c        **** 	"No memory",
 174:main.c        **** 	"Empty string",
 175:main.c        **** 	"Odd number of digits",
 176:main.c        **** 	"Cannot load file",
 177:main.c        **** 	"Cannot save file",
 178:main.c        **** 	"Bad arguments"
 179:main.c        **** };
 180:main.c        **** 
 181:main.c        **** typedef enum {
 182:main.c        **** 	FLP_SUCCESS,
 183:main.c        **** 	FLP_LIBERR,
 184:main.c        **** 	FLP_BAD_HEX,
 185:main.c        **** 	FLP_CHAN_RANGE,
 186:main.c        **** 	FLP_CONDUIT_RANGE,
 187:main.c        **** 	FLP_ILL_CHAR,
 188:main.c        **** 	FLP_UNTERM_STRING,
 189:main.c        **** 	FLP_NO_MEMORY,
 190:main.c        **** 	FLP_EMPTY_STRING,
 191:main.c        **** 	FLP_ODD_DIGITS,
 192:main.c        **** 	FLP_CANNOT_LOAD,
 193:main.c        **** 	FLP_CANNOT_SAVE,
 194:main.c        **** 	FLP_ARGS
 195:main.c        **** } ReturnCode;
 196:main.c        **** 
 197:main.c        **** static ReturnCode doRead(
 198:main.c        **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 199:main.c        **** 	const char **error)
 200:main.c        **** {
 830              		.loc 1 200 0
 831              		.cfi_startproc
 832 05df 55       		pushq	%rbp
 833              		.cfi_def_cfa_offset 16
 834              		.cfi_offset 6, -16
 835 05e0 4889E5   		movq	%rsp, %rbp
 836              		.cfi_def_cfa_register 6
 837 05e3 4883EC60 		subq	$96, %rsp
 838 05e7 48897DC8 		movq	%rdi, -56(%rbp)
 839 05eb 89F0     		movl	%esi, %eax
 840 05ed 8955C0   		movl	%edx, -64(%rbp)
 841 05f0 48894DB8 		movq	%rcx, -72(%rbp)
 842 05f4 4C8945B0 		movq	%r8, -80(%rbp)
 843 05f8 4C894DA8 		movq	%r9, -88(%rbp)
 844 05fc 8845C4   		movb	%al, -60(%rbp)
 201:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 845              		.loc 1 201 0
 846 05ff C745E000 		movl	$0, -32(%rbp)
 846      000000
 202:main.c        **** 	uint32 bytesWritten;
 203:main.c        **** 	FLStatus fStatus;
 204:main.c        **** 	uint32 chunkSize;
 205:main.c        **** 	const uint8 *recvData;
 206:main.c        **** 	uint32 actualLength;
 207:main.c        **** 	const uint8 *ptr;
 208:main.c        **** 	uint16 csVal = 0x0000;
 847              		.loc 1 208 0
 848 0606 66C745DA 		movw	$0, -38(%rbp)
 848      0000
 209:main.c        **** 	#define READ_MAX 65536
 210:main.c        **** 
 211:main.c        **** 	// Read first chunk
 212:main.c        **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 849              		.loc 1 212 0
 850 060c B8000001 		movl	$65536, %eax
 850      00
 851 0611 817DC000 		cmpl	$65536, -64(%rbp)
 851      000100
 852 0618 0F4645C0 		cmovbe	-64(%rbp), %eax
 853 061c 8945E4   		movl	%eax, -28(%rbp)
 213:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 854              		.loc 1 213 0
 855 061f 0FB675C4 		movzbl	-60(%rbp), %esi
 856 0623 488B4DA8 		movq	-88(%rbp), %rcx
 857 0627 8B55E4   		movl	-28(%rbp), %edx
 858 062a 488B45C8 		movq	-56(%rbp), %rax
 859 062e 4989C8   		movq	%rcx, %r8
 860 0631 B9000000 		movl	$0, %ecx
 860      00
 861 0636 4889C7   		movq	%rax, %rdi
 862 0639 E8000000 		call	flReadChannelAsyncSubmit
 862      00
 863 063e 8945E8   		movl	%eax, -24(%rbp)
 214:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 864              		.loc 1 214 0
 865 0641 837DE800 		cmpl	$0, -24(%rbp)
 866 0645 741D     		je	.L48
 867              		.loc 1 214 0 is_stmt 0 discriminator 1
 868 0647 488B45A8 		movq	-88(%rbp), %rax
 869 064b BE000000 		movl	$.LC13, %esi
 869      00
 870 0650 4889C7   		movq	%rax, %rdi
 871 0653 E8000000 		call	errPrefix
 871      00
 872 0658 C745E001 		movl	$1, -32(%rbp)
 872      000000
 873 065f E9EC0100 		jmp	.L49
 873      00
 874              	.L48:
 215:main.c        **** 	length = length - chunkSize;
 875              		.loc 1 215 0 is_stmt 1
 876 0664 8B45E4   		movl	-28(%rbp), %eax
 877 0667 2945C0   		subl	%eax, -64(%rbp)
 216:main.c        **** 
 217:main.c        **** 	while ( length ) {
 878              		.loc 1 217 0
 879 066a E9180100 		jmp	.L50
 879      00
 880              	.L56:
 218:main.c        **** 		// Read chunk N
 219:main.c        **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 881              		.loc 1 219 0
 882 066f B8000001 		movl	$65536, %eax
 882      00
 883 0674 817DC000 		cmpl	$65536, -64(%rbp)
 883      000100
 884 067b 0F4645C0 		cmovbe	-64(%rbp), %eax
 885 067f 8945E4   		movl	%eax, -28(%rbp)
 220:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 886              		.loc 1 220 0
 887 0682 0FB675C4 		movzbl	-60(%rbp), %esi
 888 0686 488B4DA8 		movq	-88(%rbp), %rcx
 889 068a 8B55E4   		movl	-28(%rbp), %edx
 890 068d 488B45C8 		movq	-56(%rbp), %rax
 891 0691 4989C8   		movq	%rcx, %r8
 892 0694 B9000000 		movl	$0, %ecx
 892      00
 893 0699 4889C7   		movq	%rax, %rdi
 894 069c E8000000 		call	flReadChannelAsyncSubmit
 894      00
 895 06a1 8945E8   		movl	%eax, -24(%rbp)
 221:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 896              		.loc 1 221 0
 897 06a4 837DE800 		cmpl	$0, -24(%rbp)
 898 06a8 741D     		je	.L51
 899              		.loc 1 221 0 is_stmt 0 discriminator 1
 900 06aa 488B45A8 		movq	-88(%rbp), %rax
 901 06ae BE000000 		movl	$.LC13, %esi
 901      00
 902 06b3 4889C7   		movq	%rax, %rdi
 903 06b6 E8000000 		call	errPrefix
 903      00
 904 06bb C745E001 		movl	$1, -32(%rbp)
 904      000000
 905 06c2 E9890100 		jmp	.L49
 905      00
 906              	.L51:
 222:main.c        **** 		length = length - chunkSize;
 907              		.loc 1 222 0 is_stmt 1
 908 06c7 8B45E4   		movl	-28(%rbp), %eax
 909 06ca 2945C0   		subl	%eax, -64(%rbp)
 223:main.c        **** 		
 224:main.c        **** 		// Await chunk N-1
 225:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 910              		.loc 1 225 0
 911 06cd 488B7DA8 		movq	-88(%rbp), %rdi
 912 06d1 488D4DDC 		leaq	-36(%rbp), %rcx
 913 06d5 488D55DC 		leaq	-36(%rbp), %rdx
 914 06d9 488D75F0 		leaq	-16(%rbp), %rsi
 915 06dd 488B45C8 		movq	-56(%rbp), %rax
 916 06e1 4989F8   		movq	%rdi, %r8
 917 06e4 4889C7   		movq	%rax, %rdi
 918 06e7 E8000000 		call	flReadChannelAsyncAwait
 918      00
 919 06ec 8945E8   		movl	%eax, -24(%rbp)
 226:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 920              		.loc 1 226 0
 921 06ef 837DE800 		cmpl	$0, -24(%rbp)
 922 06f3 741D     		je	.L52
 923              		.loc 1 226 0 is_stmt 0 discriminator 1
 924 06f5 488B45A8 		movq	-88(%rbp), %rax
 925 06f9 BE000000 		movl	$.LC13, %esi
 925      00
 926 06fe 4889C7   		movq	%rax, %rdi
 927 0701 E8000000 		call	errPrefix
 927      00
 928 0706 C745E001 		movl	$1, -32(%rbp)
 928      000000
 929 070d E93E0100 		jmp	.L49
 929      00
 930              	.L52:
 227:main.c        **** 
 228:main.c        **** 		// Write chunk N-1 to file
 229:main.c        **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 931              		.loc 1 229 0 is_stmt 1
 932 0712 8B45DC   		movl	-36(%rbp), %eax
 933 0715 89C2     		movl	%eax, %edx
 934 0717 488B45F0 		movq	-16(%rbp), %rax
 935 071b 488B4DB8 		movq	-72(%rbp), %rcx
 936 071f BE010000 		movl	$1, %esi
 936      00
 937 0724 4889C7   		movq	%rax, %rdi
 938 0727 E8000000 		call	fwrite
 938      00
 939 072c 8945EC   		movl	%eax, -20(%rbp)
 230:main.c        **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 940              		.loc 1 230 0
 941 072f 8B45DC   		movl	-36(%rbp), %eax
 942 0732 3945EC   		cmpl	%eax, -20(%rbp)
 943 0735 741D     		je	.L53
 944              		.loc 1 230 0 is_stmt 0 discriminator 1
 945 0737 488B45A8 		movq	-88(%rbp), %rax
 946 073b BE000000 		movl	$.LC13, %esi
 946      00
 947 0740 4889C7   		movq	%rax, %rdi
 948 0743 E8000000 		call	errPrefix
 948      00
 949 0748 C745E00B 		movl	$11, -32(%rbp)
 949      000000
 950 074f E9FC0000 		jmp	.L49
 950      00
 951              	.L53:
 231:main.c        **** 
 232:main.c        **** 		// Checksum chunk N-1
 233:main.c        **** 		chunkSize = actualLength;
 952              		.loc 1 233 0 is_stmt 1
 953 0754 8B45DC   		movl	-36(%rbp), %eax
 954 0757 8945E4   		movl	%eax, -28(%rbp)
 234:main.c        **** 		ptr = recvData;
 955              		.loc 1 234 0
 956 075a 488B45F0 		movq	-16(%rbp), %rax
 957 075e 488945F8 		movq	%rax, -8(%rbp)
 235:main.c        **** 		while ( chunkSize-- ) {
 958              		.loc 1 235 0
 959 0762 EB16     		jmp	.L54
 960              	.L55:
 236:main.c        **** 			csVal = (uint16)(csVal + *ptr++);
 961              		.loc 1 236 0
 962 0764 488B45F8 		movq	-8(%rbp), %rax
 963 0768 488D5001 		leaq	1(%rax), %rdx
 964 076c 488955F8 		movq	%rdx, -8(%rbp)
 965 0770 0FB600   		movzbl	(%rax), %eax
 966 0773 0FB6C0   		movzbl	%al, %eax
 967 0776 660145DA 		addw	%ax, -38(%rbp)
 968              	.L54:
 235:main.c        **** 		while ( chunkSize-- ) {
 969              		.loc 1 235 0 discriminator 1
 970 077a 8B45E4   		movl	-28(%rbp), %eax
 971 077d 8D50FF   		leal	-1(%rax), %edx
 972 0780 8955E4   		movl	%edx, -28(%rbp)
 973 0783 85C0     		testl	%eax, %eax
 974 0785 75DD     		jne	.L55
 975              	.L50:
 217:main.c        **** 		// Read chunk N
 976              		.loc 1 217 0 discriminator 1
 977 0787 837DC000 		cmpl	$0, -64(%rbp)
 978 078b 0F85DEFE 		jne	.L56
 978      FFFF
 237:main.c        **** 		}
 238:main.c        **** 	}
 239:main.c        **** 
 240:main.c        **** 	// Await last chunk
 241:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 979              		.loc 1 241 0
 980 0791 488B7DA8 		movq	-88(%rbp), %rdi
 981 0795 488D4DDC 		leaq	-36(%rbp), %rcx
 982 0799 488D55DC 		leaq	-36(%rbp), %rdx
 983 079d 488D75F0 		leaq	-16(%rbp), %rsi
 984 07a1 488B45C8 		movq	-56(%rbp), %rax
 985 07a5 4989F8   		movq	%rdi, %r8
 986 07a8 4889C7   		movq	%rax, %rdi
 987 07ab E8000000 		call	flReadChannelAsyncAwait
 987      00
 988 07b0 8945E8   		movl	%eax, -24(%rbp)
 242:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 989              		.loc 1 242 0
 990 07b3 837DE800 		cmpl	$0, -24(%rbp)
 991 07b7 741A     		je	.L57
 992              		.loc 1 242 0 is_stmt 0 discriminator 1
 993 07b9 488B45A8 		movq	-88(%rbp), %rax
 994 07bd BE000000 		movl	$.LC13, %esi
 994      00
 995 07c2 4889C7   		movq	%rax, %rdi
 996 07c5 E8000000 		call	errPrefix
 996      00
 997 07ca C745E001 		movl	$1, -32(%rbp)
 997      000000
 998 07d1 EB7D     		jmp	.L49
 999              	.L57:
 243:main.c        **** 	
 244:main.c        **** 	// Write last chunk to file
 245:main.c        **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 1000              		.loc 1 245 0 is_stmt 1
 1001 07d3 8B45DC   		movl	-36(%rbp), %eax
 1002 07d6 89C2     		movl	%eax, %edx
 1003 07d8 488B45F0 		movq	-16(%rbp), %rax
 1004 07dc 488B4DB8 		movq	-72(%rbp), %rcx
 1005 07e0 BE010000 		movl	$1, %esi
 1005      00
 1006 07e5 4889C7   		movq	%rax, %rdi
 1007 07e8 E8000000 		call	fwrite
 1007      00
 1008 07ed 8945EC   		movl	%eax, -20(%rbp)
 246:main.c        **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 1009              		.loc 1 246 0
 1010 07f0 8B45DC   		movl	-36(%rbp), %eax
 1011 07f3 3945EC   		cmpl	%eax, -20(%rbp)
 1012 07f6 741A     		je	.L58
 1013              		.loc 1 246 0 is_stmt 0 discriminator 1
 1014 07f8 488B45A8 		movq	-88(%rbp), %rax
 1015 07fc BE000000 		movl	$.LC13, %esi
 1015      00
 1016 0801 4889C7   		movq	%rax, %rdi
 1017 0804 E8000000 		call	errPrefix
 1017      00
 1018 0809 C745E00B 		movl	$11, -32(%rbp)
 1018      000000
 1019 0810 EB3E     		jmp	.L49
 1020              	.L58:
 247:main.c        **** 
 248:main.c        **** 	// Checksum last chunk
 249:main.c        **** 	chunkSize = actualLength;
 1021              		.loc 1 249 0 is_stmt 1
 1022 0812 8B45DC   		movl	-36(%rbp), %eax
 1023 0815 8945E4   		movl	%eax, -28(%rbp)
 250:main.c        **** 	ptr = recvData;
 1024              		.loc 1 250 0
 1025 0818 488B45F0 		movq	-16(%rbp), %rax
 1026 081c 488945F8 		movq	%rax, -8(%rbp)
 251:main.c        **** 	while ( chunkSize-- ) {
 1027              		.loc 1 251 0
 1028 0820 EB16     		jmp	.L59
 1029              	.L60:
 252:main.c        **** 		csVal = (uint16)(csVal + *ptr++);
 1030              		.loc 1 252 0
 1031 0822 488B45F8 		movq	-8(%rbp), %rax
 1032 0826 488D5001 		leaq	1(%rax), %rdx
 1033 082a 488955F8 		movq	%rdx, -8(%rbp)
 1034 082e 0FB600   		movzbl	(%rax), %eax
 1035 0831 0FB6C0   		movzbl	%al, %eax
 1036 0834 660145DA 		addw	%ax, -38(%rbp)
 1037              	.L59:
 251:main.c        **** 	while ( chunkSize-- ) {
 1038              		.loc 1 251 0 discriminator 1
 1039 0838 8B45E4   		movl	-28(%rbp), %eax
 1040 083b 8D50FF   		leal	-1(%rax), %edx
 1041 083e 8955E4   		movl	%edx, -28(%rbp)
 1042 0841 85C0     		testl	%eax, %eax
 1043 0843 75DD     		jne	.L60
 253:main.c        **** 	}
 254:main.c        **** 	
 255:main.c        **** 	// Return checksum to caller
 256:main.c        **** 	*checksum = csVal;
 1044              		.loc 1 256 0
 1045 0845 488B45B0 		movq	-80(%rbp), %rax
 1046 0849 0FB755DA 		movzwl	-38(%rbp), %edx
 1047 084d 668910   		movw	%dx, (%rax)
 1048              	.L49:
 257:main.c        **** cleanup:
 258:main.c        **** 	return retVal;
 1049              		.loc 1 258 0
 1050 0850 8B45E0   		movl	-32(%rbp), %eax
 259:main.c        **** }
 1051              		.loc 1 259 0
 1052 0853 C9       		leave
 1053              		.cfi_def_cfa 7, 8
 1054 0854 C3       		ret
 1055              		.cfi_endproc
 1056              	.LFE18:
 1058              		.section	.rodata
 1059              	.LC14:
 1060 0151 646F5772 		.string	"doWrite()"
 1060      69746528 
 1060      2900
 1061              		.text
 1063              	doWrite:
 1064              	.LFB19:
 260:main.c        **** 
 261:main.c        **** static ReturnCode doWrite(
 262:main.c        **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 263:main.c        **** 	const char **error)
 264:main.c        **** {
 1065              		.loc 1 264 0
 1066              		.cfi_startproc
 1067 0855 55       		pushq	%rbp
 1068              		.cfi_def_cfa_offset 16
 1069              		.cfi_offset 6, -16
 1070 0856 4889E5   		movq	%rsp, %rbp
 1071              		.cfi_def_cfa_register 6
 1072 0859 53       		pushq	%rbx
 1073 085a 4881EC78 		subq	$65656, %rsp
 1073      000100
 1074              		.cfi_offset 3, -24
 1075 0861 4889BDA8 		movq	%rdi, -65624(%rbp)
 1075      FFFEFF
 1076 0868 89F0     		movl	%esi, %eax
 1077 086a 48899598 		movq	%rdx, -65640(%rbp)
 1077      FFFEFF
 1078 0871 48898D90 		movq	%rcx, -65648(%rbp)
 1078      FFFEFF
 1079 0878 4C898588 		movq	%r8, -65656(%rbp)
 1079      FFFEFF
 1080 087f 4C898D80 		movq	%r9, -65664(%rbp)
 1080      FFFEFF
 1081 0886 8885A4FF 		movb	%al, -65628(%rbp)
 1081      FEFF
 1082              		.loc 1 264 0
 1083 088c 64488B04 		movq	%fs:40, %rax
 1083      25280000 
 1083      00
 1084 0895 488945E8 		movq	%rax, -24(%rbp)
 1085 0899 31C0     		xorl	%eax, %eax
 265:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 1086              		.loc 1 265 0
 1087 089b C785B8FF 		movl	$0, -65608(%rbp)
 1087      FEFF0000 
 1087      0000
 266:main.c        **** 	size_t bytesRead, i;
 267:main.c        **** 	FLStatus fStatus;
 268:main.c        **** 	const uint8 *ptr;
 269:main.c        **** 	uint16 csVal = 0x0000;
 1088              		.loc 1 269 0
 1089 08a5 66C785B6 		movw	$0, -65610(%rbp)
 1089      FFFEFF00 
 1089      00
 270:main.c        **** 	size_t lenVal = 0;
 1090              		.loc 1 270 0
 1091 08ae 48C785D0 		movq	$0, -65584(%rbp)
 1091      FFFEFF00 
 1091      000000
 1092              	.L68:
 271:main.c        **** 	#define WRITE_MAX (65536 - 5)
 272:main.c        **** 	uint8 buffer[WRITE_MAX];
 273:main.c        **** 
 274:main.c        **** 	do {
 275:main.c        **** 		// Read Nth chunk
 276:main.c        **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 1093              		.loc 1 276 0
 1094 08b9 488B9598 		movq	-65640(%rbp), %rdx
 1094      FFFEFF
 1095 08c0 488D85E0 		leaq	-65568(%rbp), %rax
 1095      FFFEFF
 1096 08c7 4889D1   		movq	%rdx, %rcx
 1097 08ca BAFBFF00 		movl	$65531, %edx
 1097      00
 1098 08cf BE010000 		movl	$1, %esi
 1098      00
 1099 08d4 4889C7   		movq	%rax, %rdi
 1100 08d7 E8000000 		call	fread
 1100      00
 1101 08dc 488985D8 		movq	%rax, -65576(%rbp)
 1101      FFFEFF
 277:main.c        **** 		if ( bytesRead ) {
 1102              		.loc 1 277 0
 1103 08e3 4883BDD8 		cmpq	$0, -65576(%rbp)
 1103      FFFEFF00 
 1104 08eb 0F84C200 		je	.L63
 1104      0000
 278:main.c        **** 			// Update running total
 279:main.c        **** 			lenVal = lenVal + bytesRead;
 1105              		.loc 1 279 0
 1106 08f1 488B85D8 		movq	-65576(%rbp), %rax
 1106      FFFEFF
 1107 08f8 480185D0 		addq	%rax, -65584(%rbp)
 1107      FFFEFF
 280:main.c        **** 
 281:main.c        **** 			// Submit Nth chunk
 282:main.c        **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 1108              		.loc 1 282 0
 1109 08ff 0FB6B5A4 		movzbl	-65628(%rbp), %esi
 1109      FFFEFF
 1110 0906 488BBD80 		movq	-65664(%rbp), %rdi
 1110      FFFEFF
 1111 090d 488D8DE0 		leaq	-65568(%rbp), %rcx
 1111      FFFEFF
 1112 0914 488B95D8 		movq	-65576(%rbp), %rdx
 1112      FFFEFF
 1113 091b 488B85A8 		movq	-65624(%rbp), %rax
 1113      FFFEFF
 1114 0922 4989F8   		movq	%rdi, %r8
 1115 0925 4889C7   		movq	%rax, %rdi
 1116 0928 E8000000 		call	flWriteChannelAsync
 1116      00
 1117 092d 8985BCFF 		movl	%eax, -65604(%rbp)
 1117      FEFF
 283:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1118              		.loc 1 283 0
 1119 0933 83BDBCFF 		cmpl	$0, -65604(%rbp)
 1119      FEFF00
 1120 093a 7423     		je	.L64
 1121              		.loc 1 283 0 is_stmt 0 discriminator 1
 1122 093c 488B8580 		movq	-65664(%rbp), %rax
 1122      FFFEFF
 1123 0943 BE000000 		movl	$.LC14, %esi
 1123      00
 1124 0948 4889C7   		movq	%rax, %rdi
 1125 094b E8000000 		call	errPrefix
 1125      00
 1126 0950 C785B8FF 		movl	$1, -65608(%rbp)
 1126      FEFF0100 
 1126      0000
 1127 095a E9CF0000 		jmp	.L65
 1127      00
 1128              	.L64:
 284:main.c        **** 
 285:main.c        **** 			// Checksum Nth chunk
 286:main.c        **** 			i = bytesRead;
 1129              		.loc 1 286 0 is_stmt 1
 1130 095f 488B85D8 		movq	-65576(%rbp), %rax
 1130      FFFEFF
 1131 0966 488985C0 		movq	%rax, -65600(%rbp)
 1131      FFFEFF
 287:main.c        **** 			ptr = buffer;
 1132              		.loc 1 287 0
 1133 096d 488D85E0 		leaq	-65568(%rbp), %rax
 1133      FFFEFF
 1134 0974 488985C8 		movq	%rax, -65592(%rbp)
 1134      FFFEFF
 288:main.c        **** 			while ( i-- ) {
 1135              		.loc 1 288 0
 1136 097b EB1F     		jmp	.L66
 1137              	.L67:
 289:main.c        **** 				csVal = (uint16)(csVal + *ptr++);
 1138              		.loc 1 289 0
 1139 097d 488B85C8 		movq	-65592(%rbp), %rax
 1139      FFFEFF
 1140 0984 488D5001 		leaq	1(%rax), %rdx
 1141 0988 488995C8 		movq	%rdx, -65592(%rbp)
 1141      FFFEFF
 1142 098f 0FB600   		movzbl	(%rax), %eax
 1143 0992 0FB6C0   		movzbl	%al, %eax
 1144 0995 660185B6 		addw	%ax, -65610(%rbp)
 1144      FFFEFF
 1145              	.L66:
 288:main.c        **** 			while ( i-- ) {
 1146              		.loc 1 288 0 discriminator 1
 1147 099c 488B85C0 		movq	-65600(%rbp), %rax
 1147      FFFEFF
 1148 09a3 488D50FF 		leaq	-1(%rax), %rdx
 1149 09a7 488995C0 		movq	%rdx, -65600(%rbp)
 1149      FFFEFF
 1150 09ae 4885C0   		testq	%rax, %rax
 1151 09b1 75CA     		jne	.L67
 1152              	.L63:
 290:main.c        **** 			}
 291:main.c        **** 		}
 292:main.c        **** 	} while ( bytesRead == WRITE_MAX );
 1153              		.loc 1 292 0
 1154 09b3 4881BDD8 		cmpq	$65531, -65576(%rbp)
 1154      FFFEFFFB 
 1154      FF0000
 1155 09be 0F84F5FE 		je	.L68
 1155      FFFF
 293:main.c        **** 
 294:main.c        **** 	// Wait for writes to be received. This is optional, but it's only fair if we're benchmarking to
 295:main.c        **** 	// actually wait for the work to be completed.
 296:main.c        **** 	fStatus = flAwaitAsyncWrites(handle, error);
 1156              		.loc 1 296 0
 1157 09c4 488B9580 		movq	-65664(%rbp), %rdx
 1157      FFFEFF
 1158 09cb 488B85A8 		movq	-65624(%rbp), %rax
 1158      FFFEFF
 1159 09d2 4889D6   		movq	%rdx, %rsi
 1160 09d5 4889C7   		movq	%rax, %rdi
 1161 09d8 E8000000 		call	flAwaitAsyncWrites
 1161      00
 1162 09dd 8985BCFF 		movl	%eax, -65604(%rbp)
 1162      FEFF
 297:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1163              		.loc 1 297 0
 1164 09e3 83BDBCFF 		cmpl	$0, -65604(%rbp)
 1164      FEFF00
 1165 09ea 7420     		je	.L69
 1166              		.loc 1 297 0 is_stmt 0 discriminator 1
 1167 09ec 488B8580 		movq	-65664(%rbp), %rax
 1167      FFFEFF
 1168 09f3 BE000000 		movl	$.LC14, %esi
 1168      00
 1169 09f8 4889C7   		movq	%rax, %rdi
 1170 09fb E8000000 		call	errPrefix
 1170      00
 1171 0a00 C785B8FF 		movl	$1, -65608(%rbp)
 1171      FEFF0100 
 1171      0000
 1172 0a0a EB22     		jmp	.L65
 1173              	.L69:
 298:main.c        **** 
 299:main.c        **** 	// Return checksum & length to caller
 300:main.c        **** 	*checksum = csVal;
 1174              		.loc 1 300 0 is_stmt 1
 1175 0a0c 488B8588 		movq	-65656(%rbp), %rax
 1175      FFFEFF
 1176 0a13 0FB795B6 		movzwl	-65610(%rbp), %edx
 1176      FFFEFF
 1177 0a1a 668910   		movw	%dx, (%rax)
 301:main.c        **** 	*length = lenVal;
 1178              		.loc 1 301 0
 1179 0a1d 488B8590 		movq	-65648(%rbp), %rax
 1179      FFFEFF
 1180 0a24 488B95D0 		movq	-65584(%rbp), %rdx
 1180      FFFEFF
 1181 0a2b 488910   		movq	%rdx, (%rax)
 1182              	.L65:
 302:main.c        **** cleanup:
 303:main.c        **** 	return retVal;
 1183              		.loc 1 303 0
 1184 0a2e 8B85B8FF 		movl	-65608(%rbp), %eax
 1184      FEFF
 304:main.c        **** }
 1185              		.loc 1 304 0
 1186 0a34 488B5DE8 		movq	-24(%rbp), %rbx
 1187 0a38 6448331C 		xorq	%fs:40, %rbx
 1187      25280000 
 1187      00
 1188 0a41 7405     		je	.L71
 1189 0a43 E8000000 		call	__stack_chk_fail
 1189      00
 1190              	.L71:
 1191 0a48 4881C478 		addq	$65656, %rsp
 1191      000100
 1192 0a4f 5B       		popq	%rbx
 1193 0a50 5D       		popq	%rbp
 1194              		.cfi_def_cfa 7, 8
 1195 0a51 C3       		ret
 1196              		.cfi_endproc
 1197              	.LFE19:
 1199              		.section	.rodata
 1200              	.LC15:
 1201 015b 776200   		.string	"wb"
 1202 015e 0000     		.align 8
 1203              	.LC18:
 1204 0160 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 1204      20256420 
 1204      62797465 
 1204      73202863 
 1204      6865636B 
 1205              	.LC19:
 1206 019d 726200   		.string	"rb"
 1207              		.align 8
 1208              	.LC20:
 1209 01a0 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 1209      6520257A 
 1209      75206279 
 1209      74657320 
 1209      28636865 
 1210              	.LC21:
 1211 01de 25732061 		.string	"%s at column %d\n  %s\n  "
 1211      7420636F 
 1211      6C756D6E 
 1211      2025640A 
 1211      20202573 
 1212              	.LC22:
 1213 01f6 5E0A00   		.string	"^\n"
 1214              		.text
 1216              	parseLine:
 1217              	.LFB20:
 305:main.c        **** 
 306:main.c        **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 1218              		.loc 1 306 0
 1219              		.cfi_startproc
 1220 0a52 55       		pushq	%rbp
 1221              		.cfi_def_cfa_offset 16
 1222              		.cfi_offset 6, -16
 1223 0a53 4889E5   		movq	%rsp, %rbp
 1224              		.cfi_def_cfa_register 6
 1225 0a56 4881EC00 		subq	$256, %rsp
 1225      010000
 1226 0a5d 4889BD18 		movq	%rdi, -232(%rbp)
 1226      FFFFFF
 1227 0a64 4889B510 		movq	%rsi, -240(%rbp)
 1227      FFFFFF
 1228 0a6b 48899508 		movq	%rdx, -248(%rbp)
 1228      FFFFFF
 307:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, status;
 1229              		.loc 1 307 0
 1230 0a72 C78524FF 		movl	$0, -220(%rbp)
 1230      FFFF0000 
 1230      0000
 308:main.c        **** 	FLStatus fStatus;
 309:main.c        **** 	struct Buffer dataFromFPGA = {0,};
 1231              		.loc 1 309 0
 1232 0a7c 48C745E0 		movq	$0, -32(%rbp)
 1232      00000000 
 1233 0a84 48C745E8 		movq	$0, -24(%rbp)
 1233      00000000 
 1234 0a8c 48C745F0 		movq	$0, -16(%rbp)
 1234      00000000 
 1235 0a94 48C745F8 		movq	$0, -8(%rbp)
 1235      00000000 
 310:main.c        **** 	BufferStatus bStatus;
 311:main.c        **** 	uint8 *data = NULL;
 1236              		.loc 1 311 0
 1237 0a9c 48C78558 		movq	$0, -168(%rbp)
 1237      FFFFFF00 
 1237      000000
 312:main.c        **** 	char *fileName = NULL;
 1238              		.loc 1 312 0
 1239 0aa7 48C78560 		movq	$0, -160(%rbp)
 1239      FFFFFF00 
 1239      000000
 313:main.c        **** 	FILE *file = NULL;
 1240              		.loc 1 313 0
 1241 0ab2 48C78568 		movq	$0, -152(%rbp)
 1241      FFFFFF00 
 1241      000000
 314:main.c        **** 	double totalTime, speed;
 315:main.c        **** 	#ifdef WIN32
 316:main.c        **** 		LARGE_INTEGER tvStart, tvEnd, freq;
 317:main.c        **** 		DWORD_PTR mask = 1;
 318:main.c        **** 		SetThreadAffinityMask(GetCurrentThread(), mask);
 319:main.c        **** 		QueryPerformanceFrequency(&freq);
 320:main.c        **** 	#else
 321:main.c        **** 		struct timeval tvStart, tvEnd;
 322:main.c        **** 		long long startTime, endTime;
 323:main.c        **** 	#endif
 324:main.c        **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 1242              		.loc 1 324 0
 1243 0abd 488B9508 		movq	-248(%rbp), %rdx
 1243      FFFFFF
 1244 0ac4 488D45E0 		leaq	-32(%rbp), %rax
 1245 0ac8 4889D1   		movq	%rdx, %rcx
 1246 0acb BA000000 		movl	$0, %edx
 1246      00
 1247 0ad0 BE000400 		movl	$1024, %esi
 1247      00
 1248 0ad5 4889C7   		movq	%rax, %rdi
 1249 0ad8 E8000000 		call	bufInitialise
 1249      00
 1250 0add 898530FF 		movl	%eax, -208(%rbp)
 1250      FFFF
 325:main.c        **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1251              		.loc 1 325 0
 1252 0ae3 83BD30FF 		cmpl	$0, -208(%rbp)
 1252      FFFF00
 1253 0aea 740F     		je	.L73
 1254              		.loc 1 325 0 is_stmt 0 discriminator 1
 1255 0aec C78524FF 		movl	$1, -220(%rbp)
 1255      FFFF0100 
 1255      0000
 1256 0af6 E9A10E00 		jmp	.L74
 1256      00
 1257              	.L73:
 326:main.c        **** 	ptr = line;
 1258              		.loc 1 326 0 is_stmt 1
 1259 0afb 488B8510 		movq	-240(%rbp), %rax
 1259      FFFFFF
 1260 0b02 48890500 		movq	%rax, ptr(%rip)
 1260      000000
 327:main.c        **** 	do {
 328:main.c        **** 		while ( *ptr == ';' ) {
 1261              		.loc 1 328 0
 1262 0b09 EB14     		jmp	.L75
 1263              	.L142:
 1264 0b0b EB12     		jmp	.L75
 1265              	.L76:
 329:main.c        **** 			ptr++;
 1266              		.loc 1 329 0
 1267 0b0d 488B0500 		movq	ptr(%rip), %rax
 1267      000000
 1268 0b14 4883C001 		addq	$1, %rax
 1269 0b18 48890500 		movq	%rax, ptr(%rip)
 1269      000000
 1270              	.L75:
 328:main.c        **** 			ptr++;
 1271              		.loc 1 328 0 discriminator 1
 1272 0b1f 488B0500 		movq	ptr(%rip), %rax
 1272      000000
 1273 0b26 0FB600   		movzbl	(%rax), %eax
 1274 0b29 3C3B     		cmpb	$59, %al
 1275 0b2b 74E0     		je	.L76
 330:main.c        **** 		}
 331:main.c        **** 		switch ( *ptr ) {
 1276              		.loc 1 331 0
 1277 0b2d 488B0500 		movq	ptr(%rip), %rax
 1277      000000
 1278 0b34 0FB600   		movzbl	(%rax), %eax
 1279 0b37 0FBEC0   		movsbl	%al, %eax
 1280 0b3a 83F872   		cmpl	$114, %eax
 1281 0b3d 7417     		je	.L78
 1282 0b3f 83F877   		cmpl	$119, %eax
 1283 0b42 0F84BC06 		je	.L79
 1283      0000
 1284 0b48 83F82B   		cmpl	$43, %eax
 1285 0b4b 0F84120D 		je	.L80
 1285      0000
 1286 0b51 E9F90D00 		jmp	.L149
 1286      00
 1287              	.L78:
 1288              	.LBB5:
 332:main.c        **** 		case 'r':{
 333:main.c        **** 			uint32 chan;
 334:main.c        **** 			uint32 length = 1;
 1289              		.loc 1 334 0
 1290 0b56 C78528FF 		movl	$1, -216(%rbp)
 1290      FFFF0100 
 1290      0000
 335:main.c        **** 			char *end;
 336:main.c        **** 			ptr++;
 1291              		.loc 1 336 0
 1292 0b60 488B0500 		movq	ptr(%rip), %rax
 1292      000000
 1293 0b67 4883C001 		addq	$1, %rax
 1294 0b6b 48890500 		movq	%rax, ptr(%rip)
 1294      000000
 337:main.c        **** 			
 338:main.c        **** 			// Get the channel to be read:
 339:main.c        **** 			errno = 0;
 1295              		.loc 1 339 0
 1296 0b72 E8000000 		call	__errno_location
 1296      00
 1297 0b77 C7000000 		movl	$0, (%rax)
 1297      0000
 340:main.c        **** 			chan = (uint32)strtoul(ptr, &end, 16);
 1298              		.loc 1 340 0
 1299 0b7d 488B0500 		movq	ptr(%rip), %rax
 1299      000000
 1300 0b84 488D8D50 		leaq	-176(%rbp), %rcx
 1300      FFFFFF
 1301 0b8b BA100000 		movl	$16, %edx
 1301      00
 1302 0b90 4889CE   		movq	%rcx, %rsi
 1303 0b93 4889C7   		movq	%rax, %rdi
 1304 0b96 E8000000 		call	strtoul
 1304      00
 1305 0b9b 898534FF 		movl	%eax, -204(%rbp)
 1305      FFFF
 341:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1306              		.loc 1 341 0
 1307 0ba1 E8000000 		call	__errno_location
 1307      00
 1308 0ba6 8B00     		movl	(%rax), %eax
 1309 0ba8 85C0     		testl	%eax, %eax
 1310 0baa 740F     		je	.L81
 1311              		.loc 1 341 0 is_stmt 0 discriminator 1
 1312 0bac C78524FF 		movl	$2, -220(%rbp)
 1312      FFFF0200 
 1312      0000
 1313 0bb6 E9E10D00 		jmp	.L74
 1313      00
 1314              	.L81:
 342:main.c        **** 
 343:main.c        **** 			// Ensure that it's 0-127
 344:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1315              		.loc 1 344 0 is_stmt 1
 1316 0bbb 83BD34FF 		cmpl	$127, -204(%rbp)
 1316      FFFF7F
 1317 0bc2 760F     		jbe	.L83
 1318              		.loc 1 344 0 is_stmt 0 discriminator 1
 1319 0bc4 C78524FF 		movl	$3, -220(%rbp)
 1319      FFFF0300 
 1319      0000
 1320 0bce E9C90D00 		jmp	.L74
 1320      00
 1321              	.L83:
 345:main.c        **** 			ptr = end;
 1322              		.loc 1 345 0 is_stmt 1
 1323 0bd3 488B8550 		movq	-176(%rbp), %rax
 1323      FFFFFF
 1324 0bda 48890500 		movq	%rax, ptr(%rip)
 1324      000000
 346:main.c        **** 
 347:main.c        **** 			// Only three valid chars at this point:
 348:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 1325              		.loc 1 348 0
 1326 0be1 488B0500 		movq	ptr(%rip), %rax
 1326      000000
 1327 0be8 0FB600   		movzbl	(%rax), %eax
 1328 0beb 84C0     		testb	%al, %al
 1329 0bed 742B     		je	.L84
 1330              		.loc 1 348 0 is_stmt 0 discriminator 1
 1331 0bef 488B0500 		movq	ptr(%rip), %rax
 1331      000000
 1332 0bf6 0FB600   		movzbl	(%rax), %eax
 1333 0bf9 3C3B     		cmpb	$59, %al
 1334 0bfb 741D     		je	.L84
 1335 0bfd 488B0500 		movq	ptr(%rip), %rax
 1335      000000
 1336 0c04 0FB600   		movzbl	(%rax), %eax
 1337 0c07 3C20     		cmpb	$32, %al
 1338 0c09 740F     		je	.L84
 1339 0c0b C78524FF 		movl	$5, -220(%rbp)
 1339      FFFF0500 
 1339      0000
 1340 0c15 E9820D00 		jmp	.L74
 1340      00
 1341              	.L84:
 349:main.c        **** 
 350:main.c        **** 			if ( *ptr == ' ' ) {
 1342              		.loc 1 350 0 is_stmt 1
 1343 0c1a 488B0500 		movq	ptr(%rip), %rax
 1343      000000
 1344 0c21 0FB600   		movzbl	(%rax), %eax
 1345 0c24 3C20     		cmpb	$32, %al
 1346 0c26 0F852602 		jne	.L85
 1346      0000
 351:main.c        **** 				ptr++;
 1347              		.loc 1 351 0
 1348 0c2c 488B0500 		movq	ptr(%rip), %rax
 1348      000000
 1349 0c33 4883C001 		addq	$1, %rax
 1350 0c37 48890500 		movq	%rax, ptr(%rip)
 1350      000000
 352:main.c        **** 
 353:main.c        **** 				// Get the read count:
 354:main.c        **** 				errno = 0;
 1351              		.loc 1 354 0
 1352 0c3e E8000000 		call	__errno_location
 1352      00
 1353 0c43 C7000000 		movl	$0, (%rax)
 1353      0000
 355:main.c        **** 				length = (uint32)strtoul(ptr, &end, 16);
 1354              		.loc 1 355 0
 1355 0c49 488B0500 		movq	ptr(%rip), %rax
 1355      000000
 1356 0c50 488D8D50 		leaq	-176(%rbp), %rcx
 1356      FFFFFF
 1357 0c57 BA100000 		movl	$16, %edx
 1357      00
 1358 0c5c 4889CE   		movq	%rcx, %rsi
 1359 0c5f 4889C7   		movq	%rax, %rdi
 1360 0c62 E8000000 		call	strtoul
 1360      00
 1361 0c67 898528FF 		movl	%eax, -216(%rbp)
 1361      FFFF
 356:main.c        **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1362              		.loc 1 356 0
 1363 0c6d E8000000 		call	__errno_location
 1363      00
 1364 0c72 8B00     		movl	(%rax), %eax
 1365 0c74 85C0     		testl	%eax, %eax
 1366 0c76 740F     		je	.L86
 1367              		.loc 1 356 0 is_stmt 0 discriminator 1
 1368 0c78 C78524FF 		movl	$2, -220(%rbp)
 1368      FFFF0200 
 1368      0000
 1369 0c82 E9150D00 		jmp	.L74
 1369      00
 1370              	.L86:
 357:main.c        **** 				ptr = end;
 1371              		.loc 1 357 0 is_stmt 1
 1372 0c87 488B8550 		movq	-176(%rbp), %rax
 1372      FFFFFF
 1373 0c8e 48890500 		movq	%rax, ptr(%rip)
 1373      000000
 358:main.c        **** 				
 359:main.c        **** 				// Only three valid chars at this point:
 360:main.c        **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 1374              		.loc 1 360 0
 1375 0c95 488B0500 		movq	ptr(%rip), %rax
 1375      000000
 1376 0c9c 0FB600   		movzbl	(%rax), %eax
 1377 0c9f 84C0     		testb	%al, %al
 1378 0ca1 742B     		je	.L87
 1379              		.loc 1 360 0 is_stmt 0 discriminator 1
 1380 0ca3 488B0500 		movq	ptr(%rip), %rax
 1380      000000
 1381 0caa 0FB600   		movzbl	(%rax), %eax
 1382 0cad 3C3B     		cmpb	$59, %al
 1383 0caf 741D     		je	.L87
 1384 0cb1 488B0500 		movq	ptr(%rip), %rax
 1384      000000
 1385 0cb8 0FB600   		movzbl	(%rax), %eax
 1386 0cbb 3C20     		cmpb	$32, %al
 1387 0cbd 740F     		je	.L87
 1388 0cbf C78524FF 		movl	$5, -220(%rbp)
 1388      FFFF0500 
 1388      0000
 1389 0cc9 E9CE0C00 		jmp	.L74
 1389      00
 1390              	.L87:
 361:main.c        **** 				if ( *ptr == ' ' ) {
 1391              		.loc 1 361 0 is_stmt 1
 1392 0cce 488B0500 		movq	ptr(%rip), %rax
 1392      000000
 1393 0cd5 0FB600   		movzbl	(%rax), %eax
 1394 0cd8 3C20     		cmpb	$32, %al
 1395 0cda 0F857201 		jne	.L85
 1395      0000
 1396              	.LBB6:
 362:main.c        **** 					const char *p;
 363:main.c        **** 					const char quoteChar = *++ptr;
 1397              		.loc 1 363 0
 1398 0ce0 488B0500 		movq	ptr(%rip), %rax
 1398      000000
 1399 0ce7 4883C001 		addq	$1, %rax
 1400 0ceb 48890500 		movq	%rax, ptr(%rip)
 1400      000000
 1401 0cf2 488B0500 		movq	ptr(%rip), %rax
 1401      000000
 1402 0cf9 0FB600   		movzbl	(%rax), %eax
 1403 0cfc 888520FF 		movb	%al, -224(%rbp)
 1403      FFFF
 364:main.c        **** 					CHECK_STATUS(
 1404              		.loc 1 364 0
 1405 0d02 80BD20FF 		cmpb	$34, -224(%rbp)
 1405      FFFF22
 1406 0d09 7418     		je	.L88
 1407              		.loc 1 364 0 is_stmt 0 discriminator 1
 1408 0d0b 80BD20FF 		cmpb	$39, -224(%rbp)
 1408      FFFF27
 1409 0d12 740F     		je	.L88
 1410 0d14 C78524FF 		movl	$5, -220(%rbp)
 1410      FFFF0500 
 1410      0000
 1411 0d1e E9790C00 		jmp	.L74
 1411      00
 1412              	.L88:
 365:main.c        **** 						(quoteChar != '"' && quoteChar != '\''),
 366:main.c        **** 						FLP_ILL_CHAR, cleanup);
 367:main.c        **** 					
 368:main.c        **** 					// Get the file to write bytes to:
 369:main.c        **** 					ptr++;
 1413              		.loc 1 369 0 is_stmt 1
 1414 0d23 488B0500 		movq	ptr(%rip), %rax
 1414      000000
 1415 0d2a 4883C001 		addq	$1, %rax
 1416 0d2e 48890500 		movq	%rax, ptr(%rip)
 1416      000000
 370:main.c        **** 					p = ptr;
 1417              		.loc 1 370 0
 1418 0d35 488B0500 		movq	ptr(%rip), %rax
 1418      000000
 1419 0d3c 48898570 		movq	%rax, -144(%rbp)
 1419      FFFFFF
 371:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1420              		.loc 1 371 0
 1421 0d43 EB08     		jmp	.L89
 1422              	.L91:
 372:main.c        **** 						p++;
 1423              		.loc 1 372 0
 1424 0d45 48838570 		addq	$1, -144(%rbp)
 1424      FFFFFF01 
 1425              	.L89:
 371:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1426              		.loc 1 371 0 discriminator 1
 1427 0d4d 488B8570 		movq	-144(%rbp), %rax
 1427      FFFFFF
 1428 0d54 0FB600   		movzbl	(%rax), %eax
 1429 0d57 3A8520FF 		cmpb	-224(%rbp), %al
 1429      FFFF
 1430 0d5d 740E     		je	.L90
 371:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1431              		.loc 1 371 0 is_stmt 0 discriminator 2
 1432 0d5f 488B8570 		movq	-144(%rbp), %rax
 1432      FFFFFF
 1433 0d66 0FB600   		movzbl	(%rax), %eax
 1434 0d69 84C0     		testb	%al, %al
 1435 0d6b 75D8     		jne	.L91
 1436              	.L90:
 373:main.c        **** 					}
 374:main.c        **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1437              		.loc 1 374 0 is_stmt 1
 1438 0d6d 488B8570 		movq	-144(%rbp), %rax
 1438      FFFFFF
 1439 0d74 0FB600   		movzbl	(%rax), %eax
 1440 0d77 84C0     		testb	%al, %al
 1441 0d79 750F     		jne	.L92
 1442              		.loc 1 374 0 is_stmt 0 discriminator 1
 1443 0d7b C78524FF 		movl	$6, -220(%rbp)
 1443      FFFF0600 
 1443      0000
 1444 0d85 E9120C00 		jmp	.L74
 1444      00
 1445              	.L92:
 375:main.c        **** 					fileName = malloc((size_t)(p - ptr + 1));
 1446              		.loc 1 375 0 is_stmt 1
 1447 0d8a 488B9570 		movq	-144(%rbp), %rdx
 1447      FFFFFF
 1448 0d91 488B0500 		movq	ptr(%rip), %rax
 1448      000000
 1449 0d98 4829C2   		subq	%rax, %rdx
 1450 0d9b 4889D0   		movq	%rdx, %rax
 1451 0d9e 4883C001 		addq	$1, %rax
 1452 0da2 4889C7   		movq	%rax, %rdi
 1453 0da5 E8000000 		call	malloc
 1453      00
 1454 0daa 48898560 		movq	%rax, -160(%rbp)
 1454      FFFFFF
 376:main.c        **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1455              		.loc 1 376 0
 1456 0db1 4883BD60 		cmpq	$0, -160(%rbp)
 1456      FFFFFF00 
 1457 0db9 750F     		jne	.L93
 1458              		.loc 1 376 0 is_stmt 0 discriminator 1
 1459 0dbb C78524FF 		movl	$7, -220(%rbp)
 1459      FFFF0700 
 1459      0000
 1460 0dc5 E9D20B00 		jmp	.L74
 1460      00
 1461              	.L93:
 377:main.c        **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1462              		.loc 1 377 0 is_stmt 1
 1463 0dca 488B9570 		movq	-144(%rbp), %rdx
 1463      FFFFFF
 1464 0dd1 488B0500 		movq	ptr(%rip), %rax
 1464      000000
 1465 0dd8 4839C2   		cmpq	%rax, %rdx
 1466 0ddb 750F     		jne	.L94
 1467              		.loc 1 377 0 is_stmt 0 discriminator 1
 1468 0ddd C78524FF 		movl	$8, -220(%rbp)
 1468      FFFF0800 
 1468      0000
 1469 0de7 E9B00B00 		jmp	.L74
 1469      00
 1470              	.L94:
 378:main.c        **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 1471              		.loc 1 378 0 is_stmt 1
 1472 0dec 488B9570 		movq	-144(%rbp), %rdx
 1472      FFFFFF
 1473 0df3 488B0500 		movq	ptr(%rip), %rax
 1473      000000
 1474 0dfa 4829C2   		subq	%rax, %rdx
 1475 0dfd 4889D0   		movq	%rdx, %rax
 1476 0e00 4889C2   		movq	%rax, %rdx
 1477 0e03 488B0D00 		movq	ptr(%rip), %rcx
 1477      000000
 1478 0e0a 488B8560 		movq	-160(%rbp), %rax
 1478      FFFFFF
 1479 0e11 4889CE   		movq	%rcx, %rsi
 1480 0e14 4889C7   		movq	%rax, %rdi
 1481 0e17 E8000000 		call	strncpy
 1481      00
 379:main.c        **** 					fileName[p - ptr] = '\0';
 1482              		.loc 1 379 0
 1483 0e1c 488B9570 		movq	-144(%rbp), %rdx
 1483      FFFFFF
 1484 0e23 488B0500 		movq	ptr(%rip), %rax
 1484      000000
 1485 0e2a 4829C2   		subq	%rax, %rdx
 1486 0e2d 4889D0   		movq	%rdx, %rax
 1487 0e30 4889C2   		movq	%rax, %rdx
 1488 0e33 488B8560 		movq	-160(%rbp), %rax
 1488      FFFFFF
 1489 0e3a 4801D0   		addq	%rdx, %rax
 1490 0e3d C60000   		movb	$0, (%rax)
 380:main.c        **** 					ptr = p + 1;
 1491              		.loc 1 380 0
 1492 0e40 488B8570 		movq	-144(%rbp), %rax
 1492      FFFFFF
 1493 0e47 4883C001 		addq	$1, %rax
 1494 0e4b 48890500 		movq	%rax, ptr(%rip)
 1494      000000
 1495              	.L85:
 1496              	.LBE6:
 381:main.c        **** 				}
 382:main.c        **** 			}
 383:main.c        **** 			if ( fileName ) {
 1497              		.loc 1 383 0
 1498 0e52 4883BD60 		cmpq	$0, -160(%rbp)
 1498      FFFFFF00 
 1499 0e5a 0F84E201 		je	.L95
 1499      0000
 1500              	.LBB7:
 384:main.c        **** 				uint16 checksum = 0x0000;
 1501              		.loc 1 384 0
 1502 0e60 66C78548 		movw	$0, -184(%rbp)
 1502      FFFFFF00 
 1502      00
 385:main.c        **** 
 386:main.c        **** 				// Open file for writing
 387:main.c        **** 				file = fopen(fileName, "wb");
 1503              		.loc 1 387 0
 1504 0e69 488B8560 		movq	-160(%rbp), %rax
 1504      FFFFFF
 1505 0e70 BE000000 		movl	$.LC15, %esi
 1505      00
 1506 0e75 4889C7   		movq	%rax, %rdi
 1507 0e78 E8000000 		call	fopen
 1507      00
 1508 0e7d 48898568 		movq	%rax, -152(%rbp)
 1508      FFFFFF
 388:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 1509              		.loc 1 388 0
 1510 0e84 4883BD68 		cmpq	$0, -152(%rbp)
 1510      FFFFFF00 
 1511 0e8c 750F     		jne	.L96
 1512              		.loc 1 388 0 is_stmt 0 discriminator 1
 1513 0e8e C78524FF 		movl	$11, -220(%rbp)
 1513      FFFF0B00 
 1513      0000
 1514 0e98 E9FF0A00 		jmp	.L74
 1514      00
 1515              	.L96:
 389:main.c        **** 				free(fileName);
 1516              		.loc 1 389 0 is_stmt 1
 1517 0e9d 488B8560 		movq	-160(%rbp), %rax
 1517      FFFFFF
 1518 0ea4 4889C7   		movq	%rax, %rdi
 1519 0ea7 E8000000 		call	free
 1519      00
 390:main.c        **** 				fileName = NULL;
 1520              		.loc 1 390 0
 1521 0eac 48C78560 		movq	$0, -160(%rbp)
 1521      FFFFFF00 
 1521      000000
 391:main.c        **** 
 392:main.c        **** 				#ifdef WIN32
 393:main.c        **** 					QueryPerformanceCounter(&tvStart);
 394:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 395:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 396:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 397:main.c        **** 					totalTime /= freq.QuadPart;
 398:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 399:main.c        **** 				#else
 400:main.c        **** 					gettimeofday(&tvStart, NULL);
 1522              		.loc 1 400 0
 1523 0eb7 488D45C0 		leaq	-64(%rbp), %rax
 1524 0ebb BE000000 		movl	$0, %esi
 1524      00
 1525 0ec0 4889C7   		movq	%rax, %rdi
 1526 0ec3 E8000000 		call	gettimeofday
 1526      00
 401:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 1527              		.loc 1 401 0
 1528 0ec8 8B8534FF 		movl	-204(%rbp), %eax
 1528      FFFF
 1529 0ece 0FB6F0   		movzbl	%al, %esi
 1530 0ed1 4C8B8508 		movq	-248(%rbp), %r8
 1530      FFFFFF
 1531 0ed8 488DBD48 		leaq	-184(%rbp), %rdi
 1531      FFFFFF
 1532 0edf 488B8D68 		movq	-152(%rbp), %rcx
 1532      FFFFFF
 1533 0ee6 8B9528FF 		movl	-216(%rbp), %edx
 1533      FFFF
 1534 0eec 488B8518 		movq	-232(%rbp), %rax
 1534      FFFFFF
 1535 0ef3 4D89C1   		movq	%r8, %r9
 1536 0ef6 4989F8   		movq	%rdi, %r8
 1537 0ef9 4889C7   		movq	%rax, %rdi
 1538 0efc E8DEF6FF 		call	doRead
 1538      FF
 1539 0f01 898538FF 		movl	%eax, -200(%rbp)
 1539      FFFF
 402:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1540              		.loc 1 402 0
 1541 0f07 488D45D0 		leaq	-48(%rbp), %rax
 1542 0f0b BE000000 		movl	$0, %esi
 1542      00
 1543 0f10 4889C7   		movq	%rax, %rdi
 1544 0f13 E8000000 		call	gettimeofday
 1544      00
 403:main.c        **** 					startTime = tvStart.tv_sec;
 1545              		.loc 1 403 0
 1546 0f18 488B45C0 		movq	-64(%rbp), %rax
 1547 0f1c 48894590 		movq	%rax, -112(%rbp)
 404:main.c        **** 					startTime *= 1000000;
 1548              		.loc 1 404 0
 1549 0f20 488B4590 		movq	-112(%rbp), %rax
 1550 0f24 4869C040 		imulq	$1000000, %rax, %rax
 1550      420F00
 1551 0f2b 48894590 		movq	%rax, -112(%rbp)
 405:main.c        **** 					startTime += tvStart.tv_usec;
 1552              		.loc 1 405 0
 1553 0f2f 488B45C8 		movq	-56(%rbp), %rax
 1554 0f33 48014590 		addq	%rax, -112(%rbp)
 406:main.c        **** 					endTime = tvEnd.tv_sec;
 1555              		.loc 1 406 0
 1556 0f37 488B45D0 		movq	-48(%rbp), %rax
 1557 0f3b 48894598 		movq	%rax, -104(%rbp)
 407:main.c        **** 					endTime *= 1000000;
 1558              		.loc 1 407 0
 1559 0f3f 488B4598 		movq	-104(%rbp), %rax
 1560 0f43 4869C040 		imulq	$1000000, %rax, %rax
 1560      420F00
 1561 0f4a 48894598 		movq	%rax, -104(%rbp)
 408:main.c        **** 					endTime += tvEnd.tv_usec;
 1562              		.loc 1 408 0
 1563 0f4e 488B45D8 		movq	-40(%rbp), %rax
 1564 0f52 48014598 		addq	%rax, -104(%rbp)
 409:main.c        **** 					totalTime = (double)(endTime - startTime);
 1565              		.loc 1 409 0
 1566 0f56 488B4590 		movq	-112(%rbp), %rax
 1567 0f5a 488B5598 		movq	-104(%rbp), %rdx
 1568 0f5e 4829C2   		subq	%rax, %rdx
 1569 0f61 4889D0   		movq	%rdx, %rax
 1570 0f64 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1570      C0
 1571 0f69 F20F1145 		movsd	%xmm0, -96(%rbp)
 1571      A0
 410:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1572              		.loc 1 410 0
 1573 0f6e F20F1045 		movsd	-96(%rbp), %xmm0
 1573      A0
 1574 0f73 F20F100D 		movsd	.LC16(%rip), %xmm1
 1574      00000000 
 1575 0f7b F20F5EC1 		divsd	%xmm1, %xmm0
 1576 0f7f F20F1145 		movsd	%xmm0, -96(%rbp)
 1576      A0
 411:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1577              		.loc 1 411 0
 1578 0f84 8B8528FF 		movl	-216(%rbp), %eax
 1578      FFFF
 1579 0f8a 4885C0   		testq	%rax, %rax
 1580 0f8d 7807     		js	.L98
 1581 0f8f F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1581      C0
 1582 0f94 EB15     		jmp	.L99
 1583              	.L98:
 1584 0f96 4889C2   		movq	%rax, %rdx
 1585 0f99 48D1EA   		shrq	%rdx
 1586 0f9c 83E001   		andl	$1, %eax
 1587 0f9f 4809C2   		orq	%rax, %rdx
 1588 0fa2 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1588      C2
 1589 0fa7 F20F58C0 		addsd	%xmm0, %xmm0
 1590              	.L99:
 1591 0fab F20F1055 		movsd	-96(%rbp), %xmm2
 1591      A0
 1592 0fb0 F20F100D 		movsd	.LC17(%rip), %xmm1
 1592      00000000 
 1593 0fb8 F20F59CA 		mulsd	%xmm2, %xmm1
 1594 0fbc F20F5EC1 		divsd	%xmm1, %xmm0
 1595 0fc0 F20F1145 		movsd	%xmm0, -88(%rbp)
 1595      A8
 412:main.c        **** 				#endif
 413:main.c        **** 				if ( enableBenchmarking ) {
 1596              		.loc 1 413 0
 1597 0fc5 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1597      000000
 1598 0fcc 84C0     		testb	%al, %al
 1599 0fce 7438     		je	.L100
 414:main.c        **** 					printf(
 1600              		.loc 1 414 0
 1601 0fd0 0FB78548 		movzwl	-184(%rbp), %eax
 1601      FFFFFF
 1602 0fd7 0FB7D0   		movzwl	%ax, %edx
 1603 0fda 488B45A8 		movq	-88(%rbp), %rax
 1604 0fde 8B8D34FF 		movl	-204(%rbp), %ecx
 1604      FFFF
 1605 0fe4 8BB528FF 		movl	-216(%rbp), %esi
 1605      FFFF
 1606 0fea 48898500 		movq	%rax, -256(%rbp)
 1606      FFFFFF
 1607 0ff1 F20F1085 		movsd	-256(%rbp), %xmm0
 1607      00FFFFFF 
 1608 0ff9 BF000000 		movl	$.LC18, %edi
 1608      00
 1609 0ffe B8010000 		movl	$1, %eax
 1609      00
 1610 1003 E8000000 		call	printf
 1610      00
 1611              	.L100:
 415:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 416:main.c        **** 						length, checksum, chan, speed);
 417:main.c        **** 				}
 418:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1612              		.loc 1 418 0
 1613 1008 83BD38FF 		cmpl	$0, -200(%rbp)
 1613      FFFF00
 1614 100f 7412     		je	.L101
 1615              		.loc 1 418 0 is_stmt 0 discriminator 1
 1616 1011 8B8538FF 		movl	-200(%rbp), %eax
 1616      FFFF
 1617 1017 898524FF 		movl	%eax, -220(%rbp)
 1617      FFFF
 1618 101d 90       		nop
 1619              	.LBE7:
 341:main.c        **** 
 1620              		.loc 1 341 0 is_stmt 1 discriminator 1
 1621 101e E9790900 		jmp	.L74
 1621      00
 1622              	.L101:
 1623              	.LBB8:
 419:main.c        **** 
 420:main.c        **** 				// Close the file
 421:main.c        **** 				fclose(file);
 1624              		.loc 1 421 0
 1625 1023 488B8568 		movq	-152(%rbp), %rax
 1625      FFFFFF
 1626 102a 4889C7   		movq	%rax, %rdi
 1627 102d E8000000 		call	fclose
 1627      00
 422:main.c        **** 				file = NULL;
 1628              		.loc 1 422 0
 1629 1032 48C78568 		movq	$0, -152(%rbp)
 1629      FFFFFF00 
 1629      000000
 1630              	.LBE8:
 1631 103d E9190900 		jmp	.L107
 1631      00
 1632              	.L95:
 1633              	.LBB9:
 423:main.c        **** 			} else {
 424:main.c        **** 				size_t oldLength = dataFromFPGA.length;
 1634              		.loc 1 424 0
 1635 1042 488B45E8 		movq	-24(%rbp), %rax
 1636 1046 488945B0 		movq	%rax, -80(%rbp)
 425:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 1637              		.loc 1 425 0
 1638 104a 8B9528FF 		movl	-216(%rbp), %edx
 1638      FFFF
 1639 1050 488B8D08 		movq	-248(%rbp), %rcx
 1639      FFFFFF
 1640 1057 488D45E0 		leaq	-32(%rbp), %rax
 1641 105b BE000000 		movl	$0, %esi
 1641      00
 1642 1060 4889C7   		movq	%rax, %rdi
 1643 1063 E8000000 		call	bufAppendConst
 1643      00
 1644 1068 898530FF 		movl	%eax, -208(%rbp)
 1644      FFFF
 426:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1645              		.loc 1 426 0
 1646 106e 83BD30FF 		cmpl	$0, -208(%rbp)
 1646      FFFF00
 1647 1075 740F     		je	.L103
 1648              		.loc 1 426 0 is_stmt 0 discriminator 1
 1649 1077 C78524FF 		movl	$1, -220(%rbp)
 1649      FFFF0100 
 1649      0000
 1650 1081 E9160900 		jmp	.L74
 1650      00
 1651              	.L103:
 427:main.c        **** 				#ifdef WIN32
 428:main.c        **** 					QueryPerformanceCounter(&tvStart);
 429:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 430:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 431:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 432:main.c        **** 					totalTime /= freq.QuadPart;
 433:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 434:main.c        **** 				#else
 435:main.c        **** 					gettimeofday(&tvStart, NULL);
 1652              		.loc 1 435 0 is_stmt 1
 1653 1086 488D45C0 		leaq	-64(%rbp), %rax
 1654 108a BE000000 		movl	$0, %esi
 1654      00
 1655 108f 4889C7   		movq	%rax, %rdi
 1656 1092 E8000000 		call	gettimeofday
 1656      00
 436:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 1657              		.loc 1 436 0
 1658 1097 488B55E0 		movq	-32(%rbp), %rdx
 1659 109b 488B45B0 		movq	-80(%rbp), %rax
 1660 109f 488D0C02 		leaq	(%rdx,%rax), %rcx
 1661 10a3 8B9528FF 		movl	-216(%rbp), %edx
 1661      FFFF
 1662 10a9 8B8534FF 		movl	-204(%rbp), %eax
 1662      FFFF
 1663 10af 0FB6F0   		movzbl	%al, %esi
 1664 10b2 488BBD08 		movq	-248(%rbp), %rdi
 1664      FFFFFF
 1665 10b9 488B8518 		movq	-232(%rbp), %rax
 1665      FFFFFF
 1666 10c0 4989F8   		movq	%rdi, %r8
 1667 10c3 4889C7   		movq	%rax, %rdi
 1668 10c6 E8000000 		call	flReadChannel
 1668      00
 1669 10cb 89853CFF 		movl	%eax, -196(%rbp)
 1669      FFFF
 437:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1670              		.loc 1 437 0
 1671 10d1 488D45D0 		leaq	-48(%rbp), %rax
 1672 10d5 BE000000 		movl	$0, %esi
 1672      00
 1673 10da 4889C7   		movq	%rax, %rdi
 1674 10dd E8000000 		call	gettimeofday
 1674      00
 438:main.c        **** 					startTime = tvStart.tv_sec;
 1675              		.loc 1 438 0
 1676 10e2 488B45C0 		movq	-64(%rbp), %rax
 1677 10e6 48894590 		movq	%rax, -112(%rbp)
 439:main.c        **** 					startTime *= 1000000;
 1678              		.loc 1 439 0
 1679 10ea 488B4590 		movq	-112(%rbp), %rax
 1680 10ee 4869C040 		imulq	$1000000, %rax, %rax
 1680      420F00
 1681 10f5 48894590 		movq	%rax, -112(%rbp)
 440:main.c        **** 					startTime += tvStart.tv_usec;
 1682              		.loc 1 440 0
 1683 10f9 488B45C8 		movq	-56(%rbp), %rax
 1684 10fd 48014590 		addq	%rax, -112(%rbp)
 441:main.c        **** 					endTime = tvEnd.tv_sec;
 1685              		.loc 1 441 0
 1686 1101 488B45D0 		movq	-48(%rbp), %rax
 1687 1105 48894598 		movq	%rax, -104(%rbp)
 442:main.c        **** 					endTime *= 1000000;
 1688              		.loc 1 442 0
 1689 1109 488B4598 		movq	-104(%rbp), %rax
 1690 110d 4869C040 		imulq	$1000000, %rax, %rax
 1690      420F00
 1691 1114 48894598 		movq	%rax, -104(%rbp)
 443:main.c        **** 					endTime += tvEnd.tv_usec;
 1692              		.loc 1 443 0
 1693 1118 488B45D8 		movq	-40(%rbp), %rax
 1694 111c 48014598 		addq	%rax, -104(%rbp)
 444:main.c        **** 					totalTime = (double)(endTime - startTime);
 1695              		.loc 1 444 0
 1696 1120 488B4590 		movq	-112(%rbp), %rax
 1697 1124 488B5598 		movq	-104(%rbp), %rdx
 1698 1128 4829C2   		subq	%rax, %rdx
 1699 112b 4889D0   		movq	%rdx, %rax
 1700 112e F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1700      C0
 1701 1133 F20F1145 		movsd	%xmm0, -96(%rbp)
 1701      A0
 445:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1702              		.loc 1 445 0
 1703 1138 F20F1045 		movsd	-96(%rbp), %xmm0
 1703      A0
 1704 113d F20F100D 		movsd	.LC16(%rip), %xmm1
 1704      00000000 
 1705 1145 F20F5EC1 		divsd	%xmm1, %xmm0
 1706 1149 F20F1145 		movsd	%xmm0, -96(%rbp)
 1706      A0
 446:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1707              		.loc 1 446 0
 1708 114e 8B8528FF 		movl	-216(%rbp), %eax
 1708      FFFF
 1709 1154 4885C0   		testq	%rax, %rax
 1710 1157 7807     		js	.L104
 1711 1159 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1711      C0
 1712 115e EB15     		jmp	.L105
 1713              	.L104:
 1714 1160 4889C2   		movq	%rax, %rdx
 1715 1163 48D1EA   		shrq	%rdx
 1716 1166 83E001   		andl	$1, %eax
 1717 1169 4809C2   		orq	%rax, %rdx
 1718 116c F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1718      C2
 1719 1171 F20F58C0 		addsd	%xmm0, %xmm0
 1720              	.L105:
 1721 1175 F20F1055 		movsd	-96(%rbp), %xmm2
 1721      A0
 1722 117a F20F100D 		movsd	.LC17(%rip), %xmm1
 1722      00000000 
 1723 1182 F20F59CA 		mulsd	%xmm2, %xmm1
 1724 1186 F20F5EC1 		divsd	%xmm1, %xmm0
 1725 118a F20F1145 		movsd	%xmm0, -88(%rbp)
 1725      A8
 447:main.c        **** 				#endif
 448:main.c        **** 				if ( enableBenchmarking ) {
 1726              		.loc 1 448 0
 1727 118f 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1727      000000
 1728 1196 84C0     		testb	%al, %al
 1729 1198 744D     		je	.L106
 449:main.c        **** 					printf(
 450:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 451:main.c        **** 						length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 1730              		.loc 1 451 0
 1731 119a 8B8528FF 		movl	-216(%rbp), %eax
 1731      FFFF
 1732 11a0 488B4DE0 		movq	-32(%rbp), %rcx
 1733 11a4 488B55B0 		movq	-80(%rbp), %rdx
 1734 11a8 4801CA   		addq	%rcx, %rdx
 1735 11ab 4889C6   		movq	%rax, %rsi
 1736 11ae 4889D7   		movq	%rdx, %rdi
 1737 11b1 E8F3F2FF 		call	calcChecksum
 1737      FF
 449:main.c        **** 					printf(
 1738              		.loc 1 449 0
 1739 11b6 0FB7D0   		movzwl	%ax, %edx
 1740 11b9 488B45A8 		movq	-88(%rbp), %rax
 1741 11bd 8B8D34FF 		movl	-204(%rbp), %ecx
 1741      FFFF
 1742 11c3 8BB528FF 		movl	-216(%rbp), %esi
 1742      FFFF
 1743 11c9 48898500 		movq	%rax, -256(%rbp)
 1743      FFFFFF
 1744 11d0 F20F1085 		movsd	-256(%rbp), %xmm0
 1744      00FFFFFF 
 1745 11d8 BF000000 		movl	$.LC18, %edi
 1745      00
 1746 11dd B8010000 		movl	$1, %eax
 1746      00
 1747 11e2 E8000000 		call	printf
 1747      00
 1748              	.L106:
 452:main.c        **** 				}
 453:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1749              		.loc 1 453 0
 1750 11e7 83BD3CFF 		cmpl	$0, -196(%rbp)
 1750      FFFF00
 1751 11ee 0F846707 		je	.L107
 1751      0000
 1752              		.loc 1 453 0 is_stmt 0 discriminator 1
 1753 11f4 C78524FF 		movl	$1, -220(%rbp)
 1753      FFFF0100 
 1753      0000
 1754 11fe 90       		nop
 1755 11ff E9980700 		jmp	.L74
 1755      00
 1756              	.L79:
 1757              	.LBE9:
 1758              	.LBE5:
 1759              	.LBB10:
 454:main.c        **** 			}
 455:main.c        **** 			break;
 456:main.c        **** 		}
 457:main.c        **** 		case 'w':{
 458:main.c        **** 			unsigned long int chan;
 459:main.c        **** 			size_t length = 1, i;
 1760              		.loc 1 459 0 is_stmt 1
 1761 1204 48C78548 		movq	$1, -184(%rbp)
 1761      FFFFFF01 
 1761      000000
 460:main.c        **** 			char *end, ch;
 461:main.c        **** 			const char *p;
 462:main.c        **** 			ptr++;
 1762              		.loc 1 462 0
 1763 120f 488B0500 		movq	ptr(%rip), %rax
 1763      000000
 1764 1216 4883C001 		addq	$1, %rax
 1765 121a 48890500 		movq	%rax, ptr(%rip)
 1765      000000
 463:main.c        **** 			
 464:main.c        **** 			// Get the channel to be written:
 465:main.c        **** 			errno = 0;
 1766              		.loc 1 465 0
 1767 1221 E8000000 		call	__errno_location
 1767      00
 1768 1226 C7000000 		movl	$0, (%rax)
 1768      0000
 466:main.c        **** 			chan = strtoul(ptr, &end, 16);
 1769              		.loc 1 466 0
 1770 122c 488B0500 		movq	ptr(%rip), %rax
 1770      000000
 1771 1233 488D8D50 		leaq	-176(%rbp), %rcx
 1771      FFFFFF
 1772 123a BA100000 		movl	$16, %edx
 1772      00
 1773 123f 4889CE   		movq	%rcx, %rsi
 1774 1242 4889C7   		movq	%rax, %rdi
 1775 1245 E8000000 		call	strtoul
 1775      00
 1776 124a 488945B8 		movq	%rax, -72(%rbp)
 467:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1777              		.loc 1 467 0
 1778 124e E8000000 		call	__errno_location
 1778      00
 1779 1253 8B00     		movl	(%rax), %eax
 1780 1255 85C0     		testl	%eax, %eax
 1781 1257 740F     		je	.L108
 1782              		.loc 1 467 0 is_stmt 0 discriminator 1
 1783 1259 C78524FF 		movl	$2, -220(%rbp)
 1783      FFFF0200 
 1783      0000
 1784 1263 E9340700 		jmp	.L74
 1784      00
 1785              	.L108:
 468:main.c        **** 
 469:main.c        **** 			// Ensure that it's 0-127
 470:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1786              		.loc 1 470 0 is_stmt 1
 1787 1268 48837DB8 		cmpq	$127, -72(%rbp)
 1787      7F
 1788 126d 760F     		jbe	.L110
 1789              		.loc 1 470 0 is_stmt 0 discriminator 1
 1790 126f C78524FF 		movl	$3, -220(%rbp)
 1790      FFFF0300 
 1790      0000
 1791 1279 E91E0700 		jmp	.L74
 1791      00
 1792              	.L110:
 471:main.c        **** 			ptr = end;
 1793              		.loc 1 471 0 is_stmt 1
 1794 127e 488B8550 		movq	-176(%rbp), %rax
 1794      FFFFFF
 1795 1285 48890500 		movq	%rax, ptr(%rip)
 1795      000000
 472:main.c        **** 
 473:main.c        **** 			// There must be a space now:
 474:main.c        **** 			CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 1796              		.loc 1 474 0
 1797 128c 488B0500 		movq	ptr(%rip), %rax
 1797      000000
 1798 1293 0FB600   		movzbl	(%rax), %eax
 1799 1296 3C20     		cmpb	$32, %al
 1800 1298 740F     		je	.L111
 1801              		.loc 1 474 0 is_stmt 0 discriminator 1
 1802 129a C78524FF 		movl	$5, -220(%rbp)
 1802      FFFF0500 
 1802      0000
 1803 12a4 E9F30600 		jmp	.L74
 1803      00
 1804              	.L111:
 475:main.c        **** 
 476:main.c        **** 			// Now either a quote or a hex digit
 477:main.c        **** 		   ch = *++ptr;
 1805              		.loc 1 477 0 is_stmt 1
 1806 12a9 488B0500 		movq	ptr(%rip), %rax
 1806      000000
 1807 12b0 4883C001 		addq	$1, %rax
 1808 12b4 48890500 		movq	%rax, ptr(%rip)
 1808      000000
 1809 12bb 488B0500 		movq	ptr(%rip), %rax
 1809      000000
 1810 12c2 0FB600   		movzbl	(%rax), %eax
 1811 12c5 888521FF 		movb	%al, -223(%rbp)
 1811      FFFF
 478:main.c        **** 			if ( ch == '"' || ch == '\'' ) {
 1812              		.loc 1 478 0
 1813 12cb 80BD21FF 		cmpb	$34, -223(%rbp)
 1813      FFFF22
 1814 12d2 740D     		je	.L112
 1815              		.loc 1 478 0 is_stmt 0 discriminator 1
 1816 12d4 80BD21FF 		cmpb	$39, -223(%rbp)
 1816      FFFF27
 1817 12db 0F85F302 		jne	.L113
 1817      0000
 1818              	.L112:
 1819              	.LBB11:
 479:main.c        **** 				uint16 checksum = 0x0000;
 1820              		.loc 1 479 0 is_stmt 1
 1821 12e1 66C78522 		movw	$0, -222(%rbp)
 1821      FFFFFF00 
 1821      00
 480:main.c        **** 
 481:main.c        **** 				// Get the file to read bytes from:
 482:main.c        **** 				ptr++;
 1822              		.loc 1 482 0
 1823 12ea 488B0500 		movq	ptr(%rip), %rax
 1823      000000
 1824 12f1 4883C001 		addq	$1, %rax
 1825 12f5 48890500 		movq	%rax, ptr(%rip)
 1825      000000
 483:main.c        **** 				p = ptr;
 1826              		.loc 1 483 0
 1827 12fc 488B0500 		movq	ptr(%rip), %rax
 1827      000000
 1828 1303 48894580 		movq	%rax, -128(%rbp)
 484:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1829              		.loc 1 484 0
 1830 1307 EB05     		jmp	.L114
 1831              	.L116:
 485:main.c        **** 					p++;
 1832              		.loc 1 485 0
 1833 1309 48834580 		addq	$1, -128(%rbp)
 1833      01
 1834              	.L114:
 484:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1835              		.loc 1 484 0 discriminator 1
 1836 130e 488B4580 		movq	-128(%rbp), %rax
 1837 1312 0FB600   		movzbl	(%rax), %eax
 1838 1315 3A8521FF 		cmpb	-223(%rbp), %al
 1838      FFFF
 1839 131b 740B     		je	.L115
 484:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1840              		.loc 1 484 0 is_stmt 0 discriminator 2
 1841 131d 488B4580 		movq	-128(%rbp), %rax
 1842 1321 0FB600   		movzbl	(%rax), %eax
 1843 1324 84C0     		testb	%al, %al
 1844 1326 75E1     		jne	.L116
 1845              	.L115:
 486:main.c        **** 				}
 487:main.c        **** 				CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1846              		.loc 1 487 0 is_stmt 1
 1847 1328 488B4580 		movq	-128(%rbp), %rax
 1848 132c 0FB600   		movzbl	(%rax), %eax
 1849 132f 84C0     		testb	%al, %al
 1850 1331 750F     		jne	.L117
 1851              		.loc 1 487 0 is_stmt 0 discriminator 1
 1852 1333 C78524FF 		movl	$6, -220(%rbp)
 1852      FFFF0600 
 1852      0000
 1853 133d E95A0600 		jmp	.L74
 1853      00
 1854              	.L117:
 488:main.c        **** 				fileName = malloc((size_t)(p - ptr + 1));
 1855              		.loc 1 488 0 is_stmt 1
 1856 1342 488B5580 		movq	-128(%rbp), %rdx
 1857 1346 488B0500 		movq	ptr(%rip), %rax
 1857      000000
 1858 134d 4829C2   		subq	%rax, %rdx
 1859 1350 4889D0   		movq	%rdx, %rax
 1860 1353 4883C001 		addq	$1, %rax
 1861 1357 4889C7   		movq	%rax, %rdi
 1862 135a E8000000 		call	malloc
 1862      00
 1863 135f 48898560 		movq	%rax, -160(%rbp)
 1863      FFFFFF
 489:main.c        **** 				CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1864              		.loc 1 489 0
 1865 1366 4883BD60 		cmpq	$0, -160(%rbp)
 1865      FFFFFF00 
 1866 136e 750F     		jne	.L119
 1867              		.loc 1 489 0 is_stmt 0 discriminator 1
 1868 1370 C78524FF 		movl	$7, -220(%rbp)
 1868      FFFF0700 
 1868      0000
 1869 137a E9500200 		jmp	.L118
 1869      00
 1870              	.L119:
 490:main.c        **** 				CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1871              		.loc 1 490 0 is_stmt 1
 1872 137f 488B5580 		movq	-128(%rbp), %rdx
 1873 1383 488B0500 		movq	ptr(%rip), %rax
 1873      000000
 1874 138a 4839C2   		cmpq	%rax, %rdx
 1875 138d 750F     		jne	.L120
 1876              		.loc 1 490 0 is_stmt 0 discriminator 1
 1877 138f C78524FF 		movl	$8, -220(%rbp)
 1877      FFFF0800 
 1877      0000
 1878 1399 E9310200 		jmp	.L118
 1878      00
 1879              	.L120:
 491:main.c        **** 				strncpy(fileName, ptr, (size_t)(p - ptr));
 1880              		.loc 1 491 0 is_stmt 1
 1881 139e 488B5580 		movq	-128(%rbp), %rdx
 1882 13a2 488B0500 		movq	ptr(%rip), %rax
 1882      000000
 1883 13a9 4829C2   		subq	%rax, %rdx
 1884 13ac 4889D0   		movq	%rdx, %rax
 1885 13af 4889C2   		movq	%rax, %rdx
 1886 13b2 488B0D00 		movq	ptr(%rip), %rcx
 1886      000000
 1887 13b9 488B8560 		movq	-160(%rbp), %rax
 1887      FFFFFF
 1888 13c0 4889CE   		movq	%rcx, %rsi
 1889 13c3 4889C7   		movq	%rax, %rdi
 1890 13c6 E8000000 		call	strncpy
 1890      00
 492:main.c        **** 				fileName[p - ptr] = '\0';
 1891              		.loc 1 492 0
 1892 13cb 488B5580 		movq	-128(%rbp), %rdx
 1893 13cf 488B0500 		movq	ptr(%rip), %rax
 1893      000000
 1894 13d6 4829C2   		subq	%rax, %rdx
 1895 13d9 4889D0   		movq	%rdx, %rax
 1896 13dc 4889C2   		movq	%rax, %rdx
 1897 13df 488B8560 		movq	-160(%rbp), %rax
 1897      FFFFFF
 1898 13e6 4801D0   		addq	%rdx, %rax
 1899 13e9 C60000   		movb	$0, (%rax)
 493:main.c        **** 				ptr = p + 1;  // skip over closing quote
 1900              		.loc 1 493 0
 1901 13ec 488B4580 		movq	-128(%rbp), %rax
 1902 13f0 4883C001 		addq	$1, %rax
 1903 13f4 48890500 		movq	%rax, ptr(%rip)
 1903      000000
 494:main.c        **** 
 495:main.c        **** 				// Open file for reading
 496:main.c        **** 				file = fopen(fileName, "rb");
 1904              		.loc 1 496 0
 1905 13fb 488B8560 		movq	-160(%rbp), %rax
 1905      FFFFFF
 1906 1402 BE000000 		movl	$.LC19, %esi
 1906      00
 1907 1407 4889C7   		movq	%rax, %rdi
 1908 140a E8000000 		call	fopen
 1908      00
 1909 140f 48898568 		movq	%rax, -152(%rbp)
 1909      FFFFFF
 497:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 1910              		.loc 1 497 0
 1911 1416 4883BD68 		cmpq	$0, -152(%rbp)
 1911      FFFFFF00 
 1912 141e 750F     		jne	.L121
 1913              		.loc 1 497 0 is_stmt 0 discriminator 1
 1914 1420 C78524FF 		movl	$10, -220(%rbp)
 1914      FFFF0A00 
 1914      0000
 1915 142a E9A00100 		jmp	.L118
 1915      00
 1916              	.L121:
 498:main.c        **** 				free(fileName);
 1917              		.loc 1 498 0 is_stmt 1
 1918 142f 488B8560 		movq	-160(%rbp), %rax
 1918      FFFFFF
 1919 1436 4889C7   		movq	%rax, %rdi
 1920 1439 E8000000 		call	free
 1920      00
 499:main.c        **** 				fileName = NULL;
 1921              		.loc 1 499 0
 1922 143e 48C78560 		movq	$0, -160(%rbp)
 1922      FFFFFF00 
 1922      000000
 500:main.c        **** 				
 501:main.c        **** 				#ifdef WIN32
 502:main.c        **** 					QueryPerformanceCounter(&tvStart);
 503:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 504:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 505:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 506:main.c        **** 					totalTime /= freq.QuadPart;
 507:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 508:main.c        **** 				#else
 509:main.c        **** 					gettimeofday(&tvStart, NULL);
 1923              		.loc 1 509 0
 1924 1449 488D45C0 		leaq	-64(%rbp), %rax
 1925 144d BE000000 		movl	$0, %esi
 1925      00
 1926 1452 4889C7   		movq	%rax, %rdi
 1927 1455 E8000000 		call	gettimeofday
 1927      00
 510:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 1928              		.loc 1 510 0
 1929 145a 488B45B8 		movq	-72(%rbp), %rax
 1930 145e 0FB6F0   		movzbl	%al, %esi
 1931 1461 4C8B8508 		movq	-248(%rbp), %r8
 1931      FFFFFF
 1932 1468 488DBD22 		leaq	-222(%rbp), %rdi
 1932      FFFFFF
 1933 146f 488D8D48 		leaq	-184(%rbp), %rcx
 1933      FFFFFF
 1934 1476 488B9568 		movq	-152(%rbp), %rdx
 1934      FFFFFF
 1935 147d 488B8518 		movq	-232(%rbp), %rax
 1935      FFFFFF
 1936 1484 4D89C1   		movq	%r8, %r9
 1937 1487 4989F8   		movq	%rdi, %r8
 1938 148a 4889C7   		movq	%rax, %rdi
 1939 148d E8C3F3FF 		call	doWrite
 1939      FF
 1940 1492 898538FF 		movl	%eax, -200(%rbp)
 1940      FFFF
 511:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1941              		.loc 1 511 0
 1942 1498 488D45D0 		leaq	-48(%rbp), %rax
 1943 149c BE000000 		movl	$0, %esi
 1943      00
 1944 14a1 4889C7   		movq	%rax, %rdi
 1945 14a4 E8000000 		call	gettimeofday
 1945      00
 512:main.c        **** 					startTime = tvStart.tv_sec;
 1946              		.loc 1 512 0
 1947 14a9 488B45C0 		movq	-64(%rbp), %rax
 1948 14ad 48894590 		movq	%rax, -112(%rbp)
 513:main.c        **** 					startTime *= 1000000;
 1949              		.loc 1 513 0
 1950 14b1 488B4590 		movq	-112(%rbp), %rax
 1951 14b5 4869C040 		imulq	$1000000, %rax, %rax
 1951      420F00
 1952 14bc 48894590 		movq	%rax, -112(%rbp)
 514:main.c        **** 					startTime += tvStart.tv_usec;
 1953              		.loc 1 514 0
 1954 14c0 488B45C8 		movq	-56(%rbp), %rax
 1955 14c4 48014590 		addq	%rax, -112(%rbp)
 515:main.c        **** 					endTime = tvEnd.tv_sec;
 1956              		.loc 1 515 0
 1957 14c8 488B45D0 		movq	-48(%rbp), %rax
 1958 14cc 48894598 		movq	%rax, -104(%rbp)
 516:main.c        **** 					endTime *= 1000000;
 1959              		.loc 1 516 0
 1960 14d0 488B4598 		movq	-104(%rbp), %rax
 1961 14d4 4869C040 		imulq	$1000000, %rax, %rax
 1961      420F00
 1962 14db 48894598 		movq	%rax, -104(%rbp)
 517:main.c        **** 					endTime += tvEnd.tv_usec;
 1963              		.loc 1 517 0
 1964 14df 488B45D8 		movq	-40(%rbp), %rax
 1965 14e3 48014598 		addq	%rax, -104(%rbp)
 518:main.c        **** 					totalTime = (double)(endTime - startTime);
 1966              		.loc 1 518 0
 1967 14e7 488B4590 		movq	-112(%rbp), %rax
 1968 14eb 488B5598 		movq	-104(%rbp), %rdx
 1969 14ef 4829C2   		subq	%rax, %rdx
 1970 14f2 4889D0   		movq	%rdx, %rax
 1971 14f5 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1971      C0
 1972 14fa F20F1145 		movsd	%xmm0, -96(%rbp)
 1972      A0
 519:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1973              		.loc 1 519 0
 1974 14ff F20F1045 		movsd	-96(%rbp), %xmm0
 1974      A0
 1975 1504 F20F100D 		movsd	.LC16(%rip), %xmm1
 1975      00000000 
 1976 150c F20F5EC1 		divsd	%xmm1, %xmm0
 1977 1510 F20F1145 		movsd	%xmm0, -96(%rbp)
 1977      A0
 520:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1978              		.loc 1 520 0
 1979 1515 488B8548 		movq	-184(%rbp), %rax
 1979      FFFFFF
 1980 151c 4885C0   		testq	%rax, %rax
 1981 151f 7807     		js	.L122
 1982 1521 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1982      C0
 1983 1526 EB15     		jmp	.L123
 1984              	.L122:
 1985 1528 4889C2   		movq	%rax, %rdx
 1986 152b 48D1EA   		shrq	%rdx
 1987 152e 83E001   		andl	$1, %eax
 1988 1531 4809C2   		orq	%rax, %rdx
 1989 1534 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1989      C2
 1990 1539 F20F58C0 		addsd	%xmm0, %xmm0
 1991              	.L123:
 1992 153d F20F1055 		movsd	-96(%rbp), %xmm2
 1992      A0
 1993 1542 F20F100D 		movsd	.LC17(%rip), %xmm1
 1993      00000000 
 1994 154a F20F59CA 		mulsd	%xmm2, %xmm1
 1995 154e F20F5EC1 		divsd	%xmm1, %xmm0
 1996 1552 F20F1145 		movsd	%xmm0, -88(%rbp)
 1996      A8
 521:main.c        **** 				#endif
 522:main.c        **** 				if ( enableBenchmarking ) {
 1997              		.loc 1 522 0
 1998 1557 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1998      000000
 1999 155e 84C0     		testb	%al, %al
 2000 1560 7437     		je	.L124
 523:main.c        **** 					printf(
 2001              		.loc 1 523 0
 2002 1562 0FB78522 		movzwl	-222(%rbp), %eax
 2002      FFFFFF
 2003 1569 0FB7D0   		movzwl	%ax, %edx
 2004 156c 488BB548 		movq	-184(%rbp), %rsi
 2004      FFFFFF
 2005 1573 488B45A8 		movq	-88(%rbp), %rax
 2006 1577 488B4DB8 		movq	-72(%rbp), %rcx
 2007 157b 48898500 		movq	%rax, -256(%rbp)
 2007      FFFFFF
 2008 1582 F20F1085 		movsd	-256(%rbp), %xmm0
 2008      00FFFFFF 
 2009 158a BF000000 		movl	$.LC20, %edi
 2009      00
 2010 158f B8010000 		movl	$1, %eax
 2010      00
 2011 1594 E8000000 		call	printf
 2011      00
 2012              	.L124:
 524:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 525:main.c        **** 						length, checksum, chan, speed);
 526:main.c        **** 				}
 527:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 2013              		.loc 1 527 0
 2014 1599 83BD38FF 		cmpl	$0, -200(%rbp)
 2014      FFFF00
 2015 15a0 740E     		je	.L125
 2016              		.loc 1 527 0 is_stmt 0 discriminator 1
 2017 15a2 8B8538FF 		movl	-200(%rbp), %eax
 2017      FFFF
 2018 15a8 898524FF 		movl	%eax, -220(%rbp)
 2018      FFFF
 2019 15ae EB1F     		jmp	.L118
 2020              	.L125:
 528:main.c        **** 
 529:main.c        **** 				// Close the file
 530:main.c        **** 				fclose(file);
 2021              		.loc 1 530 0 is_stmt 1
 2022 15b0 488B8568 		movq	-152(%rbp), %rax
 2022      FFFFFF
 2023 15b7 4889C7   		movq	%rax, %rdi
 2024 15ba E8000000 		call	fclose
 2024      00
 531:main.c        **** 				file = NULL;
 2025              		.loc 1 531 0
 2026 15bf 48C78568 		movq	$0, -152(%rbp)
 2026      FFFFFF00 
 2026      000000
 2027              	.LBE11:
 478:main.c        **** 				uint16 checksum = 0x0000;
 2028              		.loc 1 478 0
 2029 15ca E98C0300 		jmp	.L107
 2029      00
 2030              	.L118:
 467:main.c        **** 
 2031              		.loc 1 467 0 discriminator 1
 2032 15cf E9C80300 		jmp	.L74
 2032      00
 2033              	.L113:
 532:main.c        **** 			} else if ( isHexDigit(ch) ) {
 2034              		.loc 1 532 0
 2035 15d4 0FBE8521 		movsbl	-223(%rbp), %eax
 2035      FFFFFF
 2036 15db 89C7     		movl	%eax, %edi
 2037 15dd E889EEFF 		call	isHexDigit
 2037      FF
 2038 15e2 84C0     		testb	%al, %al
 2039 15e4 0F846902 		je	.L127
 2039      0000
 2040              	.LBB12:
 533:main.c        **** 				// Read a sequence of hex bytes to write
 534:main.c        **** 				uint8 *dataPtr;
 535:main.c        **** 				p = ptr + 1;
 2041              		.loc 1 535 0
 2042 15ea 488B0500 		movq	ptr(%rip), %rax
 2042      000000
 2043 15f1 4883C001 		addq	$1, %rax
 2044 15f5 48894580 		movq	%rax, -128(%rbp)
 536:main.c        **** 				while ( isHexDigit(*p) ) {
 2045              		.loc 1 536 0
 2046 15f9 EB05     		jmp	.L128
 2047              	.L129:
 537:main.c        **** 					p++;
 2048              		.loc 1 537 0
 2049 15fb 48834580 		addq	$1, -128(%rbp)
 2049      01
 2050              	.L128:
 536:main.c        **** 				while ( isHexDigit(*p) ) {
 2051              		.loc 1 536 0 discriminator 1
 2052 1600 488B4580 		movq	-128(%rbp), %rax
 2053 1604 0FB600   		movzbl	(%rax), %eax
 2054 1607 0FBEC0   		movsbl	%al, %eax
 2055 160a 89C7     		movl	%eax, %edi
 2056 160c E85AEEFF 		call	isHexDigit
 2056      FF
 2057 1611 84C0     		testb	%al, %al
 2058 1613 75E6     		jne	.L129
 538:main.c        **** 				}
 539:main.c        **** 				CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 2059              		.loc 1 539 0
 2060 1615 488B5580 		movq	-128(%rbp), %rdx
 2061 1619 488B0500 		movq	ptr(%rip), %rax
 2061      000000
 2062 1620 4829C2   		subq	%rax, %rdx
 2063 1623 4889D0   		movq	%rdx, %rax
 2064 1626 83E001   		andl	$1, %eax
 2065 1629 4885C0   		testq	%rax, %rax
 2066 162c 740F     		je	.L130
 2067              		.loc 1 539 0 is_stmt 0 discriminator 1
 2068 162e C78524FF 		movl	$9, -220(%rbp)
 2068      FFFF0900 
 2068      0000
 2069 1638 E95F0300 		jmp	.L74
 2069      00
 2070              	.L130:
 540:main.c        **** 				length = (size_t)(p - ptr) / 2;
 2071              		.loc 1 540 0 is_stmt 1
 2072 163d 488B5580 		movq	-128(%rbp), %rdx
 2073 1641 488B0500 		movq	ptr(%rip), %rax
 2073      000000
 2074 1648 4829C2   		subq	%rax, %rdx
 2075 164b 4889D0   		movq	%rdx, %rax
 2076 164e 48D1E8   		shrq	%rax
 2077 1651 48898548 		movq	%rax, -184(%rbp)
 2077      FFFFFF
 541:main.c        **** 				data = malloc(length);
 2078              		.loc 1 541 0
 2079 1658 488B8548 		movq	-184(%rbp), %rax
 2079      FFFFFF
 2080 165f 4889C7   		movq	%rax, %rdi
 2081 1662 E8000000 		call	malloc
 2081      00
 2082 1667 48898558 		movq	%rax, -168(%rbp)
 2082      FFFFFF
 542:main.c        **** 				dataPtr = data;
 2083              		.loc 1 542 0
 2084 166e 488B8558 		movq	-168(%rbp), %rax
 2084      FFFFFF
 2085 1675 48894588 		movq	%rax, -120(%rbp)
 543:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2086              		.loc 1 543 0
 2087 1679 48C78578 		movq	$0, -136(%rbp)
 2087      FFFFFF00 
 2087      000000
 2088 1684 EB2E     		jmp	.L131
 2089              	.L132:
 544:main.c        **** 					getHexByte(dataPtr++);
 2090              		.loc 1 544 0 discriminator 2
 2091 1686 488B4588 		movq	-120(%rbp), %rax
 2092 168a 488D5001 		leaq	1(%rax), %rdx
 2093 168e 48895588 		movq	%rdx, -120(%rbp)
 2094 1692 4889C7   		movq	%rax, %rdi
 2095 1695 E8C4EEFF 		call	getHexByte
 2095      FF
 545:main.c        **** 					ptr += 2;
 2096              		.loc 1 545 0 discriminator 2
 2097 169a 488B0500 		movq	ptr(%rip), %rax
 2097      000000
 2098 16a1 4883C002 		addq	$2, %rax
 2099 16a5 48890500 		movq	%rax, ptr(%rip)
 2099      000000
 543:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2100              		.loc 1 543 0 discriminator 2
 2101 16ac 48838578 		addq	$1, -136(%rbp)
 2101      FFFFFF01 
 2102              	.L131:
 543:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2103              		.loc 1 543 0 is_stmt 0 discriminator 1
 2104 16b4 488B8548 		movq	-184(%rbp), %rax
 2104      FFFFFF
 2105 16bb 48398578 		cmpq	%rax, -136(%rbp)
 2105      FFFFFF
 2106 16c2 72C2     		jb	.L132
 546:main.c        **** 				}
 547:main.c        **** 				#ifdef WIN32
 548:main.c        **** 					QueryPerformanceCounter(&tvStart);
 549:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 550:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 551:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 552:main.c        **** 					totalTime /= freq.QuadPart;
 553:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 554:main.c        **** 				#else
 555:main.c        **** 					gettimeofday(&tvStart, NULL);
 2107              		.loc 1 555 0 is_stmt 1
 2108 16c4 488D45C0 		leaq	-64(%rbp), %rax
 2109 16c8 BE000000 		movl	$0, %esi
 2109      00
 2110 16cd 4889C7   		movq	%rax, %rdi
 2111 16d0 E8000000 		call	gettimeofday
 2111      00
 556:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 2112              		.loc 1 556 0
 2113 16d5 488B9548 		movq	-184(%rbp), %rdx
 2113      FFFFFF
 2114 16dc 488B45B8 		movq	-72(%rbp), %rax
 2115 16e0 0FB6F0   		movzbl	%al, %esi
 2116 16e3 488BBD08 		movq	-248(%rbp), %rdi
 2116      FFFFFF
 2117 16ea 488B8D58 		movq	-168(%rbp), %rcx
 2117      FFFFFF
 2118 16f1 488B8518 		movq	-232(%rbp), %rax
 2118      FFFFFF
 2119 16f8 4989F8   		movq	%rdi, %r8
 2120 16fb 4889C7   		movq	%rax, %rdi
 2121 16fe E8000000 		call	flWriteChannel
 2121      00
 2122 1703 89853CFF 		movl	%eax, -196(%rbp)
 2122      FFFF
 557:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2123              		.loc 1 557 0
 2124 1709 488D45D0 		leaq	-48(%rbp), %rax
 2125 170d BE000000 		movl	$0, %esi
 2125      00
 2126 1712 4889C7   		movq	%rax, %rdi
 2127 1715 E8000000 		call	gettimeofday
 2127      00
 558:main.c        **** 					startTime = tvStart.tv_sec;
 2128              		.loc 1 558 0
 2129 171a 488B45C0 		movq	-64(%rbp), %rax
 2130 171e 48894590 		movq	%rax, -112(%rbp)
 559:main.c        **** 					startTime *= 1000000;
 2131              		.loc 1 559 0
 2132 1722 488B4590 		movq	-112(%rbp), %rax
 2133 1726 4869C040 		imulq	$1000000, %rax, %rax
 2133      420F00
 2134 172d 48894590 		movq	%rax, -112(%rbp)
 560:main.c        **** 					startTime += tvStart.tv_usec;
 2135              		.loc 1 560 0
 2136 1731 488B45C8 		movq	-56(%rbp), %rax
 2137 1735 48014590 		addq	%rax, -112(%rbp)
 561:main.c        **** 					endTime = tvEnd.tv_sec;
 2138              		.loc 1 561 0
 2139 1739 488B45D0 		movq	-48(%rbp), %rax
 2140 173d 48894598 		movq	%rax, -104(%rbp)
 562:main.c        **** 					endTime *= 1000000;
 2141              		.loc 1 562 0
 2142 1741 488B4598 		movq	-104(%rbp), %rax
 2143 1745 4869C040 		imulq	$1000000, %rax, %rax
 2143      420F00
 2144 174c 48894598 		movq	%rax, -104(%rbp)
 563:main.c        **** 					endTime += tvEnd.tv_usec;
 2145              		.loc 1 563 0
 2146 1750 488B45D8 		movq	-40(%rbp), %rax
 2147 1754 48014598 		addq	%rax, -104(%rbp)
 564:main.c        **** 					totalTime = (double)(endTime - startTime);
 2148              		.loc 1 564 0
 2149 1758 488B4590 		movq	-112(%rbp), %rax
 2150 175c 488B5598 		movq	-104(%rbp), %rdx
 2151 1760 4829C2   		subq	%rax, %rdx
 2152 1763 4889D0   		movq	%rdx, %rax
 2153 1766 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2153      C0
 2154 176b F20F1145 		movsd	%xmm0, -96(%rbp)
 2154      A0
 565:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2155              		.loc 1 565 0
 2156 1770 F20F1045 		movsd	-96(%rbp), %xmm0
 2156      A0
 2157 1775 F20F100D 		movsd	.LC16(%rip), %xmm1
 2157      00000000 
 2158 177d F20F5EC1 		divsd	%xmm1, %xmm0
 2159 1781 F20F1145 		movsd	%xmm0, -96(%rbp)
 2159      A0
 566:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2160              		.loc 1 566 0
 2161 1786 488B8548 		movq	-184(%rbp), %rax
 2161      FFFFFF
 2162 178d 4885C0   		testq	%rax, %rax
 2163 1790 7807     		js	.L133
 2164 1792 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2164      C0
 2165 1797 EB15     		jmp	.L134
 2166              	.L133:
 2167 1799 4889C2   		movq	%rax, %rdx
 2168 179c 48D1EA   		shrq	%rdx
 2169 179f 83E001   		andl	$1, %eax
 2170 17a2 4809C2   		orq	%rax, %rdx
 2171 17a5 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 2171      C2
 2172 17aa F20F58C0 		addsd	%xmm0, %xmm0
 2173              	.L134:
 2174 17ae F20F1055 		movsd	-96(%rbp), %xmm2
 2174      A0
 2175 17b3 F20F100D 		movsd	.LC17(%rip), %xmm1
 2175      00000000 
 2176 17bb F20F59CA 		mulsd	%xmm2, %xmm1
 2177 17bf F20F5EC1 		divsd	%xmm1, %xmm0
 2178 17c3 F20F1145 		movsd	%xmm0, -88(%rbp)
 2178      A8
 567:main.c        **** 				#endif
 568:main.c        **** 				if ( enableBenchmarking ) {
 2179              		.loc 1 568 0
 2180 17c8 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 2180      000000
 2181 17cf 84C0     		testb	%al, %al
 2182 17d1 7449     		je	.L135
 569:main.c        **** 					printf(
 570:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 571:main.c        **** 						length, calcChecksum(data, length), chan, speed);
 2183              		.loc 1 571 0
 2184 17d3 488B9548 		movq	-184(%rbp), %rdx
 2184      FFFFFF
 2185 17da 488B8558 		movq	-168(%rbp), %rax
 2185      FFFFFF
 2186 17e1 4889D6   		movq	%rdx, %rsi
 2187 17e4 4889C7   		movq	%rax, %rdi
 2188 17e7 E8BDECFF 		call	calcChecksum
 2188      FF
 569:main.c        **** 					printf(
 2189              		.loc 1 569 0
 2190 17ec 0FB7D0   		movzwl	%ax, %edx
 2191 17ef 488BB548 		movq	-184(%rbp), %rsi
 2191      FFFFFF
 2192 17f6 488B45A8 		movq	-88(%rbp), %rax
 2193 17fa 488B4DB8 		movq	-72(%rbp), %rcx
 2194 17fe 48898500 		movq	%rax, -256(%rbp)
 2194      FFFFFF
 2195 1805 F20F1085 		movsd	-256(%rbp), %xmm0
 2195      00FFFFFF 
 2196 180d BF000000 		movl	$.LC20, %edi
 2196      00
 2197 1812 B8010000 		movl	$1, %eax
 2197      00
 2198 1817 E8000000 		call	printf
 2198      00
 2199              	.L135:
 572:main.c        **** 				}
 573:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2200              		.loc 1 573 0
 2201 181c 83BD3CFF 		cmpl	$0, -196(%rbp)
 2201      FFFF00
 2202 1823 740F     		je	.L136
 2203              		.loc 1 573 0 is_stmt 0 discriminator 1
 2204 1825 C78524FF 		movl	$1, -220(%rbp)
 2204      FFFF0100 
 2204      0000
 2205 182f E9680100 		jmp	.L74
 2205      00
 2206              	.L136:
 574:main.c        **** 				free(data);
 2207              		.loc 1 574 0 is_stmt 1
 2208 1834 488B8558 		movq	-168(%rbp), %rax
 2208      FFFFFF
 2209 183b 4889C7   		movq	%rax, %rdi
 2210 183e E8000000 		call	free
 2210      00
 575:main.c        **** 				data = NULL;
 2211              		.loc 1 575 0
 2212 1843 48C78558 		movq	$0, -168(%rbp)
 2212      FFFFFF00 
 2212      000000
 2213              	.LBE12:
 2214 184e E9080100 		jmp	.L107
 2214      00
 2215              	.L127:
 576:main.c        **** 			} else {
 577:main.c        **** 				FAIL(FLP_ILL_CHAR, cleanup);
 2216              		.loc 1 577 0
 2217 1853 C78524FF 		movl	$5, -220(%rbp)
 2217      FFFF0500 
 2217      0000
 2218 185d 90       		nop
 2219 185e E9390100 		jmp	.L74
 2219      00
 2220              	.L80:
 2221              	.LBE10:
 2222              	.LBB13:
 578:main.c        **** 			}
 579:main.c        **** 			break;
 580:main.c        **** 		}
 581:main.c        **** 		case '+':{
 582:main.c        **** 			uint32 conduit;
 583:main.c        **** 			char *end;
 584:main.c        **** 			ptr++;
 2223              		.loc 1 584 0
 2224 1863 488B0500 		movq	ptr(%rip), %rax
 2224      000000
 2225 186a 4883C001 		addq	$1, %rax
 2226 186e 48890500 		movq	%rax, ptr(%rip)
 2226      000000
 585:main.c        **** 
 586:main.c        **** 			// Get the conduit
 587:main.c        **** 			errno = 0;
 2227              		.loc 1 587 0
 2228 1875 E8000000 		call	__errno_location
 2228      00
 2229 187a C7000000 		movl	$0, (%rax)
 2229      0000
 588:main.c        **** 			conduit = (uint32)strtoul(ptr, &end, 16);
 2230              		.loc 1 588 0
 2231 1880 488B0500 		movq	ptr(%rip), %rax
 2231      000000
 2232 1887 488D8D50 		leaq	-176(%rbp), %rcx
 2232      FFFFFF
 2233 188e BA100000 		movl	$16, %edx
 2233      00
 2234 1893 4889CE   		movq	%rcx, %rsi
 2235 1896 4889C7   		movq	%rax, %rdi
 2236 1899 E8000000 		call	strtoul
 2236      00
 2237 189e 898540FF 		movl	%eax, -192(%rbp)
 2237      FFFF
 589:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2238              		.loc 1 589 0
 2239 18a4 E8000000 		call	__errno_location
 2239      00
 2240 18a9 8B00     		movl	(%rax), %eax
 2241 18ab 85C0     		testl	%eax, %eax
 2242 18ad 740F     		je	.L137
 2243              		.loc 1 589 0 is_stmt 0 discriminator 1
 2244 18af C78524FF 		movl	$2, -220(%rbp)
 2244      FFFF0200 
 2244      0000
 2245 18b9 E9DE0000 		jmp	.L74
 2245      00
 2246              	.L137:
 590:main.c        **** 
 591:main.c        **** 			// Ensure that it's 0-127
 592:main.c        **** 			CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 2247              		.loc 1 592 0 is_stmt 1
 2248 18be 81BD40FF 		cmpl	$255, -192(%rbp)
 2248      FFFFFF00 
 2248      0000
 2249 18c8 760F     		jbe	.L139
 2250              		.loc 1 592 0 is_stmt 0 discriminator 1
 2251 18ca C78524FF 		movl	$4, -220(%rbp)
 2251      FFFF0400 
 2251      0000
 2252 18d4 E9C30000 		jmp	.L74
 2252      00
 2253              	.L139:
 593:main.c        **** 			ptr = end;
 2254              		.loc 1 593 0 is_stmt 1
 2255 18d9 488B8550 		movq	-176(%rbp), %rax
 2255      FFFFFF
 2256 18e0 48890500 		movq	%rax, ptr(%rip)
 2256      000000
 594:main.c        **** 
 595:main.c        **** 			// Only two valid chars at this point:
 596:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 2257              		.loc 1 596 0
 2258 18e7 488B0500 		movq	ptr(%rip), %rax
 2258      000000
 2259 18ee 0FB600   		movzbl	(%rax), %eax
 2260 18f1 84C0     		testb	%al, %al
 2261 18f3 741D     		je	.L140
 2262              		.loc 1 596 0 is_stmt 0 discriminator 1
 2263 18f5 488B0500 		movq	ptr(%rip), %rax
 2263      000000
 2264 18fc 0FB600   		movzbl	(%rax), %eax
 2265 18ff 3C3B     		cmpb	$59, %al
 2266 1901 740F     		je	.L140
 2267 1903 C78524FF 		movl	$5, -220(%rbp)
 2267      FFFF0500 
 2267      0000
 2268 190d E98A0000 		jmp	.L74
 2268      00
 2269              	.L140:
 597:main.c        **** 
 598:main.c        **** 			fStatus = flSelectConduit(handle, (uint8)conduit, error);
 2270              		.loc 1 598 0 is_stmt 1
 2271 1912 8B8540FF 		movl	-192(%rbp), %eax
 2271      FFFF
 2272 1918 0FB6C8   		movzbl	%al, %ecx
 2273 191b 488B9508 		movq	-248(%rbp), %rdx
 2273      FFFFFF
 2274 1922 488B8518 		movq	-232(%rbp), %rax
 2274      FFFFFF
 2275 1929 89CE     		movl	%ecx, %esi
 2276 192b 4889C7   		movq	%rax, %rdi
 2277 192e E8000000 		call	flSelectConduit
 2277      00
 2278 1933 89853CFF 		movl	%eax, -196(%rbp)
 2278      FFFF
 599:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2279              		.loc 1 599 0
 2280 1939 83BD3CFF 		cmpl	$0, -196(%rbp)
 2280      FFFF00
 2281 1940 7419     		je	.L107
 2282              		.loc 1 599 0 is_stmt 0 discriminator 1
 2283 1942 C78524FF 		movl	$1, -220(%rbp)
 2283      FFFF0100 
 2283      0000
 2284 194c 90       		nop
 2285 194d EB4D     		jmp	.L74
 2286              	.L149:
 2287              	.LBE13:
 600:main.c        **** 			break;
 601:main.c        **** 		}
 602:main.c        **** 		default:
 603:main.c        **** 			FAIL(FLP_ILL_CHAR, cleanup);
 2288              		.loc 1 603 0 is_stmt 1
 2289 194f C78524FF 		movl	$5, -220(%rbp)
 2289      FFFF0500 
 2289      0000
 2290 1959 EB41     		jmp	.L74
 2291              	.L107:
 604:main.c        **** 		}
 605:main.c        **** 	} while ( *ptr == ';' );
 2292              		.loc 1 605 0
 2293 195b 488B0500 		movq	ptr(%rip), %rax
 2293      000000
 2294 1962 0FB600   		movzbl	(%rax), %eax
 2295 1965 3C3B     		cmpb	$59, %al
 2296 1967 0F849EF1 		je	.L142
 2296      FFFF
 606:main.c        **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 2297              		.loc 1 606 0
 2298 196d 488B0500 		movq	ptr(%rip), %rax
 2298      000000
 2299 1974 0FB600   		movzbl	(%rax), %eax
 2300 1977 84C0     		testb	%al, %al
 2301 1979 740C     		je	.L143
 2302              		.loc 1 606 0 is_stmt 0 discriminator 1
 2303 197b C78524FF 		movl	$5, -220(%rbp)
 2303      FFFF0500 
 2303      0000
 2304 1985 EB15     		jmp	.L74
 2305              	.L143:
 607:main.c        **** 
 608:main.c        **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 2306              		.loc 1 608 0 is_stmt 1
 2307 1987 488B55E8 		movq	-24(%rbp), %rdx
 2308 198b 488B45E0 		movq	-32(%rbp), %rax
 2309 198f 4889C6   		movq	%rax, %rsi
 2310 1992 BF000000 		movl	$0, %edi
 2310      00
 2311 1997 E8000000 		call	dump
 2311      00
 2312              	.L74:
 609:main.c        **** 
 610:main.c        **** cleanup:
 611:main.c        **** 	bufDestroy(&dataFromFPGA);
 2313              		.loc 1 611 0
 2314 199c 488D45E0 		leaq	-32(%rbp), %rax
 2315 19a0 4889C7   		movq	%rax, %rdi
 2316 19a3 E8000000 		call	bufDestroy
 2316      00
 612:main.c        **** 	if ( file ) {
 2317              		.loc 1 612 0
 2318 19a8 4883BD68 		cmpq	$0, -152(%rbp)
 2318      FFFFFF00 
 2319 19b0 740F     		je	.L144
 613:main.c        **** 		fclose(file);
 2320              		.loc 1 613 0
 2321 19b2 488B8568 		movq	-152(%rbp), %rax
 2321      FFFFFF
 2322 19b9 4889C7   		movq	%rax, %rdi
 2323 19bc E8000000 		call	fclose
 2323      00
 2324              	.L144:
 614:main.c        **** 	}
 615:main.c        **** 	free(fileName);
 2325              		.loc 1 615 0
 2326 19c1 488B8560 		movq	-160(%rbp), %rax
 2326      FFFFFF
 2327 19c8 4889C7   		movq	%rax, %rdi
 2328 19cb E8000000 		call	free
 2328      00
 616:main.c        **** 	free(data);
 2329              		.loc 1 616 0
 2330 19d0 488B8558 		movq	-168(%rbp), %rax
 2330      FFFFFF
 2331 19d7 4889C7   		movq	%rax, %rdi
 2332 19da E8000000 		call	free
 2332      00
 617:main.c        **** 	if ( retVal > FLP_LIBERR ) {
 2333              		.loc 1 617 0
 2334 19df 83BD24FF 		cmpl	$1, -220(%rbp)
 2334      FFFF01
 2335 19e6 0F86A700 		jbe	.L145
 2335      0000
 2336              	.LBB14:
 618:main.c        **** 		const int column = (int)(ptr - line);
 2337              		.loc 1 618 0
 2338 19ec 488B0500 		movq	ptr(%rip), %rax
 2338      000000
 2339 19f3 4889C2   		movq	%rax, %rdx
 2340 19f6 488B8510 		movq	-240(%rbp), %rax
 2340      FFFFFF
 2341 19fd 4829C2   		subq	%rax, %rdx
 2342 1a00 4889D0   		movq	%rdx, %rax
 2343 1a03 898544FF 		movl	%eax, -188(%rbp)
 2343      FFFF
 619:main.c        **** 		int i;
 620:main.c        **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 2344              		.loc 1 620 0
 2345 1a09 8B8524FF 		movl	-220(%rbp), %eax
 2345      FFFF
 2346 1a0f 488B14C5 		movq	errMessages(,%rax,8), %rdx
 2346      00000000 
 2347 1a17 488B0500 		movq	stderr(%rip), %rax
 2347      000000
 2348 1a1e 488BB510 		movq	-240(%rbp), %rsi
 2348      FFFFFF
 2349 1a25 8B8D44FF 		movl	-188(%rbp), %ecx
 2349      FFFF
 2350 1a2b 4989F0   		movq	%rsi, %r8
 2351 1a2e BE000000 		movl	$.LC21, %esi
 2351      00
 2352 1a33 4889C7   		movq	%rax, %rdi
 2353 1a36 B8000000 		movl	$0, %eax
 2353      00
 2354 1a3b E8000000 		call	fprintf
 2354      00
 621:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2355              		.loc 1 621 0
 2356 1a40 C7852CFF 		movl	$0, -212(%rbp)
 2356      FFFF0000 
 2356      0000
 2357 1a4a EB1B     		jmp	.L146
 2358              	.L147:
 622:main.c        **** 			fprintf(stderr, " ");
 2359              		.loc 1 622 0 discriminator 2
 2360 1a4c 488B0500 		movq	stderr(%rip), %rax
 2360      000000
 2361 1a53 4889C6   		movq	%rax, %rsi
 2362 1a56 BF200000 		movl	$32, %edi
 2362      00
 2363 1a5b E8000000 		call	fputc
 2363      00
 621:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2364              		.loc 1 621 0 discriminator 2
 2365 1a60 83852CFF 		addl	$1, -212(%rbp)
 2365      FFFF01
 2366              	.L146:
 621:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2367              		.loc 1 621 0 is_stmt 0 discriminator 1
 2368 1a67 8B852CFF 		movl	-212(%rbp), %eax
 2368      FFFF
 2369 1a6d 3B8544FF 		cmpl	-188(%rbp), %eax
 2369      FFFF
 2370 1a73 7CD7     		jl	.L147
 623:main.c        **** 		}
 624:main.c        **** 		fprintf(stderr, "^\n");
 2371              		.loc 1 624 0 is_stmt 1
 2372 1a75 488B0500 		movq	stderr(%rip), %rax
 2372      000000
 2373 1a7c 4889C1   		movq	%rax, %rcx
 2374 1a7f BA020000 		movl	$2, %edx
 2374      00
 2375 1a84 BE010000 		movl	$1, %esi
 2375      00
 2376 1a89 BF000000 		movl	$.LC22, %edi
 2376      00
 2377 1a8e E8000000 		call	fwrite
 2377      00
 2378              	.L145:
 2379              	.LBE14:
 625:main.c        **** 	}
 626:main.c        **** 	return retVal;
 2380              		.loc 1 626 0
 2381 1a93 8B8524FF 		movl	-220(%rbp), %eax
 2381      FFFF
 627:main.c        **** }
 2382              		.loc 1 627 0
 2383 1a99 C9       		leave
 2384              		.cfi_def_cfa 7, 8
 2385 1a9a C3       		ret
 2386              		.cfi_endproc
 2387              	.LFE20:
 2389              		.section	.rodata
 2390              	.LC23:
 2391 01f9 30303030 		.string	"0000"
 2391      00
 2392              	.LC24:
 2393 01fe 30303031 		.string	"0001"
 2393      00
 2394              	.LC25:
 2395 0203 30303130 		.string	"0010"
 2395      00
 2396              	.LC26:
 2397 0208 30303131 		.string	"0011"
 2397      00
 2398              	.LC27:
 2399 020d 30313030 		.string	"0100"
 2399      00
 2400              	.LC28:
 2401 0212 30313031 		.string	"0101"
 2401      00
 2402              	.LC29:
 2403 0217 30313130 		.string	"0110"
 2403      00
 2404              	.LC30:
 2405 021c 30313131 		.string	"0111"
 2405      00
 2406              	.LC31:
 2407 0221 31303030 		.string	"1000"
 2407      00
 2408              	.LC32:
 2409 0226 31303031 		.string	"1001"
 2409      00
 2410              	.LC33:
 2411 022b 58585858 		.string	"XXXX"
 2411      00
 2412              	.LC34:
 2413 0230 31303130 		.string	"1010"
 2413      00
 2414              	.LC35:
 2415 0235 31303131 		.string	"1011"
 2415      00
 2416              	.LC36:
 2417 023a 31313030 		.string	"1100"
 2417      00
 2418              	.LC37:
 2419 023f 31313031 		.string	"1101"
 2419      00
 2420              	.LC38:
 2421 0244 31313130 		.string	"1110"
 2421      00
 2422              	.LC39:
 2423 0249 31313131 		.string	"1111"
 2423      00
 2424              		.data
 2425              		.align 32
 2428              	nibbles:
 2429 0000 00000000 		.quad	.LC23
 2429      00000000 
 2430 0008 00000000 		.quad	.LC24
 2430      00000000 
 2431 0010 00000000 		.quad	.LC25
 2431      00000000 
 2432 0018 00000000 		.quad	.LC26
 2432      00000000 
 2433 0020 00000000 		.quad	.LC27
 2433      00000000 
 2434 0028 00000000 		.quad	.LC28
 2434      00000000 
 2435 0030 00000000 		.quad	.LC29
 2435      00000000 
 2436 0038 00000000 		.quad	.LC30
 2436      00000000 
 2437 0040 00000000 		.quad	.LC31
 2437      00000000 
 2438 0048 00000000 		.quad	.LC32
 2438      00000000 
 2439 0050 00000000 		.quad	.LC33
 2439      00000000 
 2440 0058 00000000 		.quad	.LC33
 2440      00000000 
 2441 0060 00000000 		.quad	.LC33
 2441      00000000 
 2442 0068 00000000 		.quad	.LC33
 2442      00000000 
 2443 0070 00000000 		.quad	.LC33
 2443      00000000 
 2444 0078 00000000 		.quad	.LC33
 2444      00000000 
 2445 0080 00000000 		.quad	.LC33
 2445      00000000 
 2446 0088 00000000 		.quad	.LC34
 2446      00000000 
 2447 0090 00000000 		.quad	.LC35
 2447      00000000 
 2448 0098 00000000 		.quad	.LC36
 2448      00000000 
 2449 00a0 00000000 		.quad	.LC37
 2449      00000000 
 2450 00a8 00000000 		.quad	.LC38
 2450      00000000 
 2451 00b0 00000000 		.quad	.LC39
 2451      00000000 
 2452              		.section	.rodata
 2453 024e 0000     		.align 8
 2454              	.LC40:
 2455 0250 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 2455      20202020 
 2455      20202020 
 2455      76656E64 
 2455      6F722049 
 2456              	.LC41:
 2457 0285 3C564944 		.string	"<VID:PID>"
 2457      3A504944 
 2457      3E00
 2458              	.LC42:
 2459 028f 69767000 		.string	"ivp"
 2460              	.LC43:
 2461 0293 6900     		.string	"i"
 2462 0295 000000   		.align 8
 2463              	.LC44:
 2464 0298 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 2464      20202056 
 2464      49442C20 
 2464      50494420 
 2464      616E6420 
 2465              	.LC45:
 2466 02cd 3C564944 		.string	"<VID:PID[:DID]>"
 2466      3A504944 
 2466      5B3A4449 
 2466      445D3E00 
 2467              	.LC46:
 2468 02dd 767000   		.string	"vp"
 2469              	.LC47:
 2470 02e0 7600     		.string	"v"
 2471 02e2 00000000 		.align 8
 2471      0000
 2472              	.LC48:
 2473 02e8 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 2473      20202020 
 2473      6669726D 
 2473      77617265 
 2473      20746F20 
 2474              	.LC49:
 2475 0315 3C666972 		.string	"<firmware.hex>"
 2475      6D776172 
 2475      652E6865 
 2475      783E00
 2476              	.LC50:
 2477 0324 667700   		.string	"fw"
 2478              	.LC51:
 2479 0327 6600     		.string	"f"
 2480 0329 00000000 		.align 8
 2480      000000
 2481              	.LC52:
 2482 0330 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 2482      642F7772 
 2482      69746520 
 2482      64696769 
 2482      74616C20 
 2483              	.LC53:
 2484 035d 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 2484      4366675B 
 2484      2C626974 
 2484      4366675D 
 2484      2A3E00
 2485              	.LC54:
 2486 0370 706F7274 		.string	"ports"
 2486      7300
 2487              	.LC55:
 2488 0376 6400     		.string	"d"
 2489              	.LC56:
 2490 0378 20202020 		.string	"         query the JTAG chain"
 2490      20202020 
 2490      20717565 
 2490      72792074 
 2490      6865204A 
 2491              	.LC57:
 2492 0396 3C6A7461 		.string	"<jtagBits>"
 2492      67426974 
 2492      733E00
 2493              	.LC58:
 2494 03a1 71756572 		.string	"query"
 2494      7900
 2495              	.LC59:
 2496 03a7 7100     		.string	"q"
 2497              	.LC60:
 2498 03a9 20202020 		.string	"         program a device"
 2498      20202020 
 2498      2070726F 
 2498      6772616D 
 2498      20612064 
 2499              	.LC61:
 2500 03c3 3C636F6E 		.string	"<config>"
 2500      6669673E 
 2500      00
 2501              	.LC62:
 2502 03cc 70726F67 		.string	"program"
 2502      72616D00 
 2503              	.LC63:
 2504 03d4 7000     		.string	"p"
 2505 03d6 0000     		.align 8
 2506              	.LC64:
 2507 03d8 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 2507      20202020 
 2507      77686963 
 2507      6820636F 
 2507      6D6D2063 
 2508              	.LC65:
 2509 040c 3C636F6E 		.string	"<conduit>"
 2509      64756974 
 2509      3E00
 2510              	.LC66:
 2511 0416 636F6E64 		.string	"conduit"
 2511      75697400 
 2512              	.LC67:
 2513 041e 6300     		.string	"c"
 2514              		.align 8
 2515              	.LC68:
 2516 0420 20202020 		.string	"    a series of CommFPGA actions"
 2516      61207365 
 2516      72696573 
 2516      206F6620 
 2516      436F6D6D 
 2517              	.LC69:
 2518 0441 3C616374 		.string	"<actionString>"
 2518      696F6E53 
 2518      7472696E 
 2518      673E00
 2519              	.LC70:
 2520 0450 61637469 		.string	"action"
 2520      6F6E00
 2521              	.LC71:
 2522 0457 6100     		.string	"a"
 2523 0459 00000000 		.align 8
 2523      000000
 2524              	.LC72:
 2525 0460 20202020 		.string	"                    start up an interactive CommFPGA session"
 2525      20202020 
 2525      20202020 
 2525      20202020 
 2525      20202020 
 2526              	.LC73:
 2527 049d 7368656C 		.string	"shell"
 2527      6C00
 2528              	.LC74:
 2529 04a3 7300     		.string	"s"
 2530 04a5 000000   		.align 8
 2531              	.LC75:
 2532 04a8 20202020 		.string	"                enable benchmarking & checksumming"
 2532      20202020 
 2532      20202020 
 2532      20202020 
 2532      656E6162 
 2533              	.LC76:
 2534 04db 62656E63 		.string	"benchmark"
 2534      686D6172 
 2534      6B00
 2535              	.LC77:
 2536 04e5 6200     		.string	"b"
 2537 04e7 00       		.align 8
 2538              	.LC78:
 2539 04e8 20202020 		.string	"                    reset the bulk endpoints"
 2539      20202020 
 2539      20202020 
 2539      20202020 
 2539      20202020 
 2540              	.LC79:
 2541 0515 72657365 		.string	"reset"
 2541      7400
 2542              	.LC80:
 2543 051b 7200     		.string	"r"
 2544 051d 000000   		.align 8
 2545              	.LC81:
 2546 0520 20202077 		.string	"   write data from channel ch to file"
 2546      72697465 
 2546      20646174 
 2546      61206672 
 2546      6F6D2063 
 2547              	.LC82:
 2548 0546 3C63683A 		.string	"<ch:file.bin>"
 2548      66696C65 
 2548      2E62696E 
 2548      3E00
 2549              	.LC83:
 2550 0554 64756D70 		.string	"dumploop"
 2550      6C6F6F70 
 2550      00
 2551              	.LC84:
 2552 055d 6C00     		.string	"l"
 2553 055f 00       		.align 8
 2554              	.LC85:
 2555 0560 20202020 		.string	"                     print this help and exit"
 2555      20202020 
 2555      20202020 
 2555      20202020 
 2555      20202020 
 2556              	.LC86:
 2557 058e 68656C70 		.string	"help"
 2557      00
 2558              	.LC87:
 2559 0593 6800     		.string	"h"
 2560 0595 000000   		.align 8
 2561              	.LC88:
 2562 0598 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 2562      72697465 
 2562      20666972 
 2562      6D776172 
 2562      6520746F 
 2563              	.LC89:
 2564 05bf 3C737464 		.string	"<std|fw.hex|fw.iic>"
 2564      7C66772E 
 2564      6865787C 
 2564      66772E69 
 2564      69633E00 
 2565              	.LC90:
 2566 05d3 65657072 		.string	"eeprom"
 2566      6F6D00
 2567 05da 00000000 		.align 8
 2567      0000
 2568              	.LC91:
 2569 05e0 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 2569      20626163 
 2569      6B757020 
 2569      46583227 
 2569      73204545 
 2570              	.LC92:
 2571 060b 3C6B6269 		.string	"<kbitSize:fw.iic>"
 2571      7453697A 
 2571      653A6677 
 2571      2E696963 
 2571      3E00
 2572              	.LC93:
 2573 061d 6261636B 		.string	"backup"
 2573      757000
 2574 0624 00000000 		.align 8
 2575              	.LC94:
 2576 0628 20202020 		.string	"                    communicates with the atm module"
 2576      20202020 
 2576      20202020 
 2576      20202020 
 2576      20202020 
 2577              	.LC95:
 2578 065d 6C6F6F70 		.string	"loopy"
 2578      7900
 2579              	.LC96:
 2580 0663 7900     		.string	"y"
 2581              	.LC97:
 2582 0665 666C636C 		.string	"flcli"
 2582      6900
 2583              	.LC98:
 2584 066b 25733A20 		.string	"%s: insufficient memory\n"
 2584      696E7375 
 2584      66666963 
 2584      69656E74 
 2584      206D656D 
 2585 0684 00000000 		.align 8
 2586              	.LC99:
 2587 0688 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 2587      4C696E6B 
 2587      20436F6D 
 2587      6D616E64 
 2587      2D4C696E 
 2588              	.LC100:
 2589 06dc 0A00     		.string	"\n"
 2590 06de 0000     		.align 8
 2591              	.LC101:
 2592 06e0 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 2592      65726163 
 2592      74207769 
 2592      74682061 
 2592      6E204650 
 2593              	.LC102:
 2594 0704 2020252D 		.string	"  %-10s %s\n"
 2594      31307320 
 2594      25730A00 
 2595              		.align 8
 2596              	.LC103:
 2597 0710 54727920 		.string	"Try '%s --help' for more information.\n"
 2597      27257320 
 2597      2D2D6865 
 2597      6C702720 
 2597      666F7220 
 2598 0737 00       		.align 8
 2599              	.LC104:
 2600 0738 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 2600      6D707469 
 2600      6E672074 
 2600      6F206F70 
 2600      656E2063 
 2601              	.LC105:
 2602 0770 4C6F6164 		.string	"Loading firmware into %s...\n"
 2602      696E6720 
 2602      6669726D 
 2602      77617265 
 2602      20696E74 
 2603              	.LC106:
 2604 078d 41776169 		.string	"Awaiting renumeration"
 2604      74696E67 
 2604      2072656E 
 2604      756D6572 
 2604      6174696F 
 2605 07a3 00000000 		.align 8
 2605      00
 2606              	.LC107:
 2607 07a8 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 2607      4C696E6B 
 2607      20646576 
 2607      69636520 
 2607      64696420 
 2608 07db 00000000 		.align 8
 2608      00
 2609              	.LC108:
 2610 07e0 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 2610      6D707469 
 2610      6E672074 
 2610      6F206F70 
 2610      656E2063 
 2611 081d 000000   		.align 8
 2612              	.LC109:
 2613 0820 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 2613      64206E6F 
 2613      74206F70 
 2613      656E2046 
 2613      5047414C 
 2614 086a 00000000 		.align 8
 2614      0000
 2615              	.LC110:
 2616 0870 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 2616      65637465 
 2616      6420746F 
 2616      20465047 
 2616      414C696E 
 2617              	.LC111:
 2618 08bf 73746400 		.string	"std"
 2619 08c3 00000000 		.align 8
 2619      00
 2620              	.LC112:
 2621 08c8 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 2621      696E6720 
 2621      74686520 
 2621      7374616E 
 2621      64617264 
 2622 0906 0000     		.align 8
 2623              	.LC113:
 2624 0908 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 2624      696E6720 
 2624      63757374 
 2624      6F6D2046 
 2624      5047414C 
 2625 0949 00000000 		.align 8
 2625      000000
 2626              	.LC114:
 2627 0950 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 2627      696E7661 
 2627      6C696420 
 2627      61726775 
 2627      6D656E74 
 2628 098b 00000000 		.align 8
 2628      00
 2629              	.LC115:
 2630 0990 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 2630      6E672061 
 2630      20626163 
 2630      6B757020 
 2630      6F662025 
 2631              	.LC116:
 2632 09cb 436F6E66 		.string	"Configuring ports..."
 2632      69677572 
 2632      696E6720 
 2632      706F7274 
 2632      732E2E2E 
 2633              	.LC117:
 2634 09e0 25303858 		.string	"%08X"
 2634      00
 2635 09e5 000000   		.align 8
 2636              	.LC118:
 2637 09e8 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 2637      6261636B 
 2637      3A202020 
 2637      32382020 
 2637      20323420 
 2638              	.LC119:
 2639 0a28 20257300 		.string	" %s"
 2640              	.LC120:
 2641 0a2c 20202573 		.string	"  %s"
 2641      00
 2642              	.LC121:
 2643 0a31 2025730A 		.string	" %s\n"
 2643      00
 2644 0a36 0000     		.align 8
 2645              	.LC122:
 2646 0a38 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 2646      46504741 
 2646      4C696E6B 
 2646      20646576 
 2646      69636520 
 2647              	.LC123:
 2648 0a75 20203078 		.string	"  0x%08X\n"
 2648      25303858 
 2648      0A00
 2649 0a7f 00       		.align 8
 2650              	.LC124:
 2651 0a80 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 2651      46504741 
 2651      4C696E6B 
 2651      20646576 
 2651      69636520 
 2652              		.align 8
 2653              	.LC125:
 2654 0ad8 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 2654      20636861 
 2654      696E2073 
 2654      63616E20 
 2654      72657175 
 2655              	.LC126:
 2656 0b27 50726F67 		.string	"Programming device..."
 2656      72616D6D 
 2656      696E6720 
 2656      64657669 
 2656      63652E2E 
 2657 0b3d 000000   		.align 8
 2658              	.LC127:
 2659 0b40 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 2659      72616D20 
 2659      6F706572 
 2659      6174696F 
 2659      6E207265 
 2660              		.align 8
 2661              	.LC128:
 2662 0b88 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 2662      7574696E 
 2662      6720436F 
 2662      6D6D4650 
 2662      47412061 
 2663 0bbd 000000   		.align 8
 2664              	.LC129:
 2665 0bc0 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 2665      46504741 
 2665      4C696E6B 
 2665      20646576 
 2665      69636520 
 2666 0c0c 00000000 		.align 8
 2667              	.LC130:
 2668 0c10 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 2668      6F6E2072 
 2668      65717565 
 2668      73746564 
 2668      20627574 
 2669 0c4d 000000   		.align 8
 2670              	.LC131:
 2671 0c50 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 2671      696E7661 
 2671      6C696420 
 2671      61726775 
 2671      6D656E74 
 2672 0c8c 00000000 		.align 8
 2673              	.LC132:
 2674 0c90 436F7079 		.string	"Copying from channel %lu to %s"
 2674      696E6720 
 2674      66726F6D 
 2674      20636861 
 2674      6E6E656C 
 2675              	.LC133:
 2676 0caf 0A436175 		.string	"\nCaught SIGINT, quitting..."
 2676      67687420 
 2676      53494749 
 2676      4E542C20 
 2676      71756974 
 2677 0ccb 00000000 		.align 8
 2677      00
 2678              	.LC134:
 2679 0cd0 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 2679      6572696E 
 2679      6720436F 
 2679      6D6D4650 
 2679      47412063 
 2680              	.LC135:
 2681 0cf6 3E2000   		.string	"> "
 2682 0cf9 00000000 		.align 8
 2682      000000
 2683              	.LC136:
 2684 0d00 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 2684      46504741 
 2684      4C696E6B 
 2684      20646576 
 2684      69636520 
 2685 0d49 00000000 		.align 8
 2685      000000
 2686              	.LC137:
 2687 0d50 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 2687      6C207265 
 2687      71756573 
 2687      74656420 
 2687      62757420 
 2688              	.LC138:
 2689 0d8c 722B00   		.string	"r+"
 2690              	.LC139:
 2691 0d8f 43737620 		.string	"Csv doesn't exist "
 2691      646F6573 
 2691      6E277420 
 2691      65786973 
 2691      742000
 2692              	.LC140:
 2693 0da2 64617461 		.string	"data in channel 0 = %u \n"
 2693      20696E20 
 2693      6368616E 
 2693      6E656C20 
 2693      30203D20 
 2694              	.LC141:
 2695 0dbb 64617461 		.string	"data in channel %u = %u \n"
 2695      20696E20 
 2695      6368616E 
 2695      6E656C20 
 2695      2575203D 
 2696              	.LC142:
 2697 0dd5 756E6861 		.string	"unhashedPin %u\n"
 2697      73686564 
 2697      50696E20 
 2697      25750A00 
 2698              	.LC143:
 2699 0de5 75736572 		.string	"userID %u\n"
 2699      49442025 
 2699      750A00
 2700              	.LC144:
 2701 0df0 68617368 		.string	"hashedPin %u\n"
 2701      65645069 
 2701      6E202575 
 2701      0A00
 2702              	.LC145:
 2703 0dfe 6E756D5F 		.string	"num_2000 %u\n"
 2703      32303030 
 2703      2025750A 
 2703      00
 2704              	.LC146:
 2705 0e0b 6E756D5F 		.string	"num_1000 %u\n"
 2705      31303030 
 2705      2025750A 
 2705      00
 2706              	.LC147:
 2707 0e18 6E756D5F 		.string	"num_500 %u\n"
 2707      35303020 
 2707      25750A00 
 2708              	.LC148:
 2709 0e24 6E756D5F 		.string	"num_100 %u\n"
 2709      31303020 
 2709      25750A00 
 2710              	.LC149:
 2711 0e30 56616C69 		.string	"Valid user found "
 2711      64207573 
 2711      65722066 
 2711      6F756E64 
 2711      2000
 2712              	.LC150:
 2713 0e42 62616C20 		.string	"bal %u\n"
 2713      25750A00 
 2714              	.LC151:
 2715 0e4a 72657120 		.string	"req %u\n"
 2715      25750A00 
 2716              	.LC152:
 2717 0e52 53756666 		.string	"Suff Balance "
 2717      2042616C 
 2717      616E6365 
 2717      2000
 2718              	.LC153:
 2719 0e60 64617461 		.string	"data to channel %u = %u \n"
 2719      20746F20 
 2719      6368616E 
 2719      6E656C20 
 2719      2575203D 
 2720              	.LC154:
 2721 0e7a 62656620 		.string	"bef Enc1 %u\n"
 2721      456E6331 
 2721      2025750A 
 2721      00
 2722              	.LC155:
 2723 0e87 62656620 		.string	"bef Enc0 %u\n"
 2723      456E6330 
 2723      2025750A 
 2723      00
 2724              	.LC156:
 2725 0e94 61662045 		.string	"af Enc1 %u\n"
 2725      6E633120 
 2725      25750A00 
 2726              	.LC157:
 2727 0ea0 61662045 		.string	"af Enc0 %u\n"
 2727      6E633020 
 2727      25750A00 
 2728              	.LC158:
 2729 0eac 772B00   		.string	"w+"
 2730 0eaf 00       		.align 8
 2731              	.LC159:
 2732 0eb0 22557365 		.string	"\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (decimal)\""
 2732      72204944 
 2732      20286465 
 2732      63696D61 
 2732      6C29222C 
 2733              	.LC160:
 2734 0ef5 496E7375 		.string	"Insuff Balance "
 2734      66662042 
 2734      616C616E 
 2734      63652000 
 2735              	.LC161:
 2736 0f05 55736572 		.string	"User has admin privileges "
 2736      20686173 
 2736      2061646D 
 2736      696E2070 
 2736      72697669 
 2737              	.LC162:
 2738 0f20 496E7661 		.string	"Invalid user "
 2738      6C696420 
 2738      75736572 
 2738      2000
 2739              	.LC163:
 2740 0f2e 25730A00 		.string	"%s\n"
 2741              		.text
 2742              		.globl	main
 2744              	main:
 2745              	.LFB21:
 628:main.c        **** 
 629:main.c        **** static const char *nibbles[] = {
 630:main.c        **** 	"0000",  // '0'
 631:main.c        **** 	"0001",  // '1'
 632:main.c        **** 	"0010",  // '2'
 633:main.c        **** 	"0011",  // '3'
 634:main.c        **** 	"0100",  // '4'
 635:main.c        **** 	"0101",  // '5'
 636:main.c        **** 	"0110",  // '6'
 637:main.c        **** 	"0111",  // '7'
 638:main.c        **** 	"1000",  // '8'
 639:main.c        **** 	"1001",  // '9'
 640:main.c        **** 
 641:main.c        **** 	"XXXX",  // ':'
 642:main.c        **** 	"XXXX",  // ';'
 643:main.c        **** 	"XXXX",  // '<'
 644:main.c        **** 	"XXXX",  // '='
 645:main.c        **** 	"XXXX",  // '>'
 646:main.c        **** 	"XXXX",  // '?'
 647:main.c        **** 	"XXXX",  // '@'
 648:main.c        **** 
 649:main.c        **** 	"1010",  // 'A'
 650:main.c        **** 	"1011",  // 'B'
 651:main.c        **** 	"1100",  // 'C'
 652:main.c        **** 	"1101",  // 'D'
 653:main.c        **** 	"1110",  // 'E'
 654:main.c        **** 	"1111"   // 'F'
 655:main.c        **** };
 656:main.c        **** 
 657:main.c        **** int main(int argc, char *argv[]) {
 2746              		.loc 1 657 0
 2747              		.cfi_startproc
 2748 1a9b 55       		pushq	%rbp
 2749              		.cfi_def_cfa_offset 16
 2750              		.cfi_offset 6, -16
 2751 1a9c 4889E5   		movq	%rsp, %rbp
 2752              		.cfi_def_cfa_register 6
 2753 1a9f 53       		pushq	%rbx
 2754 1aa0 4881EC08 		subq	$776, %rsp
 2754      030000
 2755              		.cfi_offset 3, -24
 2756 1aa7 89BDFCFC 		movl	%edi, -772(%rbp)
 2756      FFFF
 2757 1aad 4889B5F0 		movq	%rsi, -784(%rbp)
 2757      FCFFFF
 2758              		.loc 1 657 0
 2759 1ab4 64488B04 		movq	%fs:40, %rax
 2759      25280000 
 2759      00
 2760 1abd 488945E8 		movq	%rax, -24(%rbp)
 2761 1ac1 31C0     		xorl	%eax, %eax
 658:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 2762              		.loc 1 658 0
 2763 1ac3 C78540FD 		movl	$0, -704(%rbp)
 2763      FFFF0000 
 2763      0000
 659:main.c        **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 2764              		.loc 1 659 0
 2765 1acd B9000000 		movl	$.LC40, %ecx
 2765      00
 2766 1ad2 BA000000 		movl	$.LC41, %edx
 2766      00
 2767 1ad7 BE000000 		movl	$.LC42, %esi
 2767      00
 2768 1adc BF000000 		movl	$.LC43, %edi
 2768      00
 2769 1ae1 E8000000 		call	arg_str0
 2769      00
 2770 1ae6 488985D8 		movq	%rax, -552(%rbp)
 2770      FDFFFF
 660:main.c        **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 2771              		.loc 1 660 0
 2772 1aed B9000000 		movl	$.LC44, %ecx
 2772      00
 2773 1af2 BA000000 		movl	$.LC45, %edx
 2773      00
 2774 1af7 BE000000 		movl	$.LC46, %esi
 2774      00
 2775 1afc BF000000 		movl	$.LC47, %edi
 2775      00
 2776 1b01 E8000000 		call	arg_str1
 2776      00
 2777 1b06 488985E0 		movq	%rax, -544(%rbp)
 2777      FDFFFF
 661:main.c        **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 2778              		.loc 1 661 0
 2779 1b0d B9000000 		movl	$.LC48, %ecx
 2779      00
 2780 1b12 BA000000 		movl	$.LC49, %edx
 2780      00
 2781 1b17 BE000000 		movl	$.LC50, %esi
 2781      00
 2782 1b1c BF000000 		movl	$.LC51, %edi
 2782      00
 2783 1b21 E8000000 		call	arg_str0
 2783      00
 2784 1b26 488985E8 		movq	%rax, -536(%rbp)
 2784      FDFFFF
 662:main.c        **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 2785              		.loc 1 662 0
 2786 1b2d B9000000 		movl	$.LC52, %ecx
 2786      00
 2787 1b32 BA000000 		movl	$.LC53, %edx
 2787      00
 2788 1b37 BE000000 		movl	$.LC54, %esi
 2788      00
 2789 1b3c BF000000 		movl	$.LC55, %edi
 2789      00
 2790 1b41 E8000000 		call	arg_str0
 2790      00
 2791 1b46 488985F0 		movq	%rax, -528(%rbp)
 2791      FDFFFF
 663:main.c        **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 2792              		.loc 1 663 0
 2793 1b4d B9000000 		movl	$.LC56, %ecx
 2793      00
 2794 1b52 BA000000 		movl	$.LC57, %edx
 2794      00
 2795 1b57 BE000000 		movl	$.LC58, %esi
 2795      00
 2796 1b5c BF000000 		movl	$.LC59, %edi
 2796      00
 2797 1b61 E8000000 		call	arg_str0
 2797      00
 2798 1b66 488985F8 		movq	%rax, -520(%rbp)
 2798      FDFFFF
 664:main.c        **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 2799              		.loc 1 664 0
 2800 1b6d B9000000 		movl	$.LC60, %ecx
 2800      00
 2801 1b72 BA000000 		movl	$.LC61, %edx
 2801      00
 2802 1b77 BE000000 		movl	$.LC62, %esi
 2802      00
 2803 1b7c BF000000 		movl	$.LC63, %edi
 2803      00
 2804 1b81 E8000000 		call	arg_str0
 2804      00
 2805 1b86 48898500 		movq	%rax, -512(%rbp)
 2805      FEFFFF
 665:main.c        **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 2806              		.loc 1 665 0
 2807 1b8d B9000000 		movl	$.LC64, %ecx
 2807      00
 2808 1b92 BA000000 		movl	$.LC65, %edx
 2808      00
 2809 1b97 BE000000 		movl	$.LC66, %esi
 2809      00
 2810 1b9c BF000000 		movl	$.LC67, %edi
 2810      00
 2811 1ba1 E8000000 		call	arg_uint0
 2811      00
 2812 1ba6 48898508 		movq	%rax, -504(%rbp)
 2812      FEFFFF
 666:main.c        **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 2813              		.loc 1 666 0
 2814 1bad B9000000 		movl	$.LC68, %ecx
 2814      00
 2815 1bb2 BA000000 		movl	$.LC69, %edx
 2815      00
 2816 1bb7 BE000000 		movl	$.LC70, %esi
 2816      00
 2817 1bbc BF000000 		movl	$.LC71, %edi
 2817      00
 2818 1bc1 E8000000 		call	arg_str0
 2818      00
 2819 1bc6 48898510 		movq	%rax, -496(%rbp)
 2819      FEFFFF
 667:main.c        **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 2820              		.loc 1 667 0
 2821 1bcd BA000000 		movl	$.LC72, %edx
 2821      00
 2822 1bd2 BE000000 		movl	$.LC73, %esi
 2822      00
 2823 1bd7 BF000000 		movl	$.LC74, %edi
 2823      00
 2824 1bdc E8000000 		call	arg_lit0
 2824      00
 2825 1be1 48898518 		movq	%rax, -488(%rbp)
 2825      FEFFFF
 668:main.c        **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & checks
 2826              		.loc 1 668 0
 2827 1be8 BA000000 		movl	$.LC75, %edx
 2827      00
 2828 1bed BE000000 		movl	$.LC76, %esi
 2828      00
 2829 1bf2 BF000000 		movl	$.LC77, %edi
 2829      00
 2830 1bf7 E8000000 		call	arg_lit0
 2830      00
 2831 1bfc 48898520 		movq	%rax, -480(%rbp)
 2831      FEFFFF
 669:main.c        **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 2832              		.loc 1 669 0
 2833 1c03 BA000000 		movl	$.LC78, %edx
 2833      00
 2834 1c08 BE000000 		movl	$.LC79, %esi
 2834      00
 2835 1c0d BF000000 		movl	$.LC80, %edi
 2835      00
 2836 1c12 E8000000 		call	arg_lit0
 2836      00
 2837 1c17 48898528 		movq	%rax, -472(%rbp)
 2837      FEFFFF
 670:main.c        **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 2838              		.loc 1 670 0
 2839 1c1e B9000000 		movl	$.LC81, %ecx
 2839      00
 2840 1c23 BA000000 		movl	$.LC82, %edx
 2840      00
 2841 1c28 BE000000 		movl	$.LC83, %esi
 2841      00
 2842 1c2d BF000000 		movl	$.LC84, %edi
 2842      00
 2843 1c32 E8000000 		call	arg_str0
 2843      00
 2844 1c37 48898530 		movq	%rax, -464(%rbp)
 2844      FEFFFF
 671:main.c        **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 2845              		.loc 1 671 0
 2846 1c3e BA000000 		movl	$.LC85, %edx
 2846      00
 2847 1c43 BE000000 		movl	$.LC86, %esi
 2847      00
 2848 1c48 BF000000 		movl	$.LC87, %edi
 2848      00
 2849 1c4d E8000000 		call	arg_lit0
 2849      00
 2850 1c52 48898538 		movq	%rax, -456(%rbp)
 2850      FEFFFF
 672:main.c        **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 2851              		.loc 1 672 0
 2852 1c59 B9000000 		movl	$.LC88, %ecx
 2852      00
 2853 1c5e BA000000 		movl	$.LC89, %edx
 2853      00
 2854 1c63 BE000000 		movl	$.LC90, %esi
 2854      00
 2855 1c68 BF000000 		movl	$0, %edi
 2855      00
 2856 1c6d E8000000 		call	arg_str0
 2856      00
 2857 1c72 48898540 		movq	%rax, -448(%rbp)
 2857      FEFFFF
 673:main.c        **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 2858              		.loc 1 673 0
 2859 1c79 B9000000 		movl	$.LC91, %ecx
 2859      00
 2860 1c7e BA000000 		movl	$.LC92, %edx
 2860      00
 2861 1c83 BE000000 		movl	$.LC93, %esi
 2861      00
 2862 1c88 BF000000 		movl	$0, %edi
 2862      00
 2863 1c8d E8000000 		call	arg_str0
 2863      00
 2864 1c92 48898548 		movq	%rax, -440(%rbp)
 2864      FEFFFF
 674:main.c        **** 	struct arg_end *endOpt   = arg_end(20);
 2865              		.loc 1 674 0
 2866 1c99 BF140000 		movl	$20, %edi
 2866      00
 2867 1c9e E8000000 		call	arg_end
 2867      00
 2868 1ca3 48898550 		movq	%rax, -432(%rbp)
 2868      FEFFFF
 675:main.c        **** 	struct arg_lit *loopOpt  = arg_lit0("y","loopy", "                    communicates with the atm mo
 2869              		.loc 1 675 0
 2870 1caa BA000000 		movl	$.LC94, %edx
 2870      00
 2871 1caf BE000000 		movl	$.LC95, %esi
 2871      00
 2872 1cb4 BF000000 		movl	$.LC96, %edi
 2872      00
 2873 1cb9 E8000000 		call	arg_lit0
 2873      00
 2874 1cbe 48898558 		movq	%rax, -424(%rbp)
 2874      FEFFFF
 676:main.c        **** 
 677:main.c        **** 	void *argTable[] = {
 2875              		.loc 1 677 0
 2876 1cc5 488B85D8 		movq	-552(%rbp), %rax
 2876      FDFFFF
 2877 1ccc 488985F0 		movq	%rax, -272(%rbp)
 2877      FEFFFF
 2878 1cd3 488B85E0 		movq	-544(%rbp), %rax
 2878      FDFFFF
 2879 1cda 488985F8 		movq	%rax, -264(%rbp)
 2879      FEFFFF
 2880 1ce1 488B85E8 		movq	-536(%rbp), %rax
 2880      FDFFFF
 2881 1ce8 48898500 		movq	%rax, -256(%rbp)
 2881      FFFFFF
 2882 1cef 488B85F0 		movq	-528(%rbp), %rax
 2882      FDFFFF
 2883 1cf6 48898508 		movq	%rax, -248(%rbp)
 2883      FFFFFF
 2884 1cfd 488B85F8 		movq	-520(%rbp), %rax
 2884      FDFFFF
 2885 1d04 48898510 		movq	%rax, -240(%rbp)
 2885      FFFFFF
 2886 1d0b 488B8500 		movq	-512(%rbp), %rax
 2886      FEFFFF
 2887 1d12 48898518 		movq	%rax, -232(%rbp)
 2887      FFFFFF
 2888 1d19 488B8508 		movq	-504(%rbp), %rax
 2888      FEFFFF
 2889 1d20 48898520 		movq	%rax, -224(%rbp)
 2889      FFFFFF
 2890 1d27 488B8510 		movq	-496(%rbp), %rax
 2890      FEFFFF
 2891 1d2e 48898528 		movq	%rax, -216(%rbp)
 2891      FFFFFF
 2892 1d35 488B8518 		movq	-488(%rbp), %rax
 2892      FEFFFF
 2893 1d3c 48898530 		movq	%rax, -208(%rbp)
 2893      FFFFFF
 2894 1d43 488B8520 		movq	-480(%rbp), %rax
 2894      FEFFFF
 2895 1d4a 48898538 		movq	%rax, -200(%rbp)
 2895      FFFFFF
 2896 1d51 488B8528 		movq	-472(%rbp), %rax
 2896      FEFFFF
 2897 1d58 48898540 		movq	%rax, -192(%rbp)
 2897      FFFFFF
 2898 1d5f 488B8530 		movq	-464(%rbp), %rax
 2898      FEFFFF
 2899 1d66 48898548 		movq	%rax, -184(%rbp)
 2899      FFFFFF
 2900 1d6d 488B8558 		movq	-424(%rbp), %rax
 2900      FEFFFF
 2901 1d74 48898550 		movq	%rax, -176(%rbp)
 2901      FFFFFF
 2902 1d7b 488B8538 		movq	-456(%rbp), %rax
 2902      FEFFFF
 2903 1d82 48898558 		movq	%rax, -168(%rbp)
 2903      FFFFFF
 2904 1d89 488B8540 		movq	-448(%rbp), %rax
 2904      FEFFFF
 2905 1d90 48898560 		movq	%rax, -160(%rbp)
 2905      FFFFFF
 2906 1d97 488B8548 		movq	-440(%rbp), %rax
 2906      FEFFFF
 2907 1d9e 48898568 		movq	%rax, -152(%rbp)
 2907      FFFFFF
 2908 1da5 488B8550 		movq	-432(%rbp), %rax
 2908      FEFFFF
 2909 1dac 48898570 		movq	%rax, -144(%rbp)
 2909      FFFFFF
 678:main.c        **** 		ivpOpt, vpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
 679:main.c        **** 		shellOpt, benOpt, rstOpt, dumpOpt, loopOpt, helpOpt, eepromOpt, backupOpt, endOpt
 680:main.c        **** 	};
 681:main.c        **** 	const char *progName = "flcli";
 2910              		.loc 1 681 0
 2911 1db3 48C78560 		movq	$.LC97, -416(%rbp)
 2911      FEFFFF00 
 2911      000000
 682:main.c        **** 	int numErrors;
 683:main.c        **** 	struct FLContext *handle = NULL;
 2912              		.loc 1 683 0
 2913 1dbe 48C785B0 		movq	$0, -592(%rbp)
 2913      FDFFFF00 
 2913      000000
 684:main.c        **** 	FLStatus fStatus;
 685:main.c        **** 	const char *error = NULL;
 2914              		.loc 1 685 0
 2915 1dc9 48C785B8 		movq	$0, -584(%rbp)
 2915      FDFFFF00 
 2915      000000
 686:main.c        **** 	const char *ivp = NULL;
 2916              		.loc 1 686 0
 2917 1dd4 48C78568 		movq	$0, -408(%rbp)
 2917      FEFFFF00 
 2917      000000
 687:main.c        **** 	const char *vp = NULL;
 2918              		.loc 1 687 0
 2919 1ddf 48C78570 		movq	$0, -400(%rbp)
 2919      FEFFFF00 
 2919      000000
 688:main.c        **** 	bool isNeroCapable, isCommCapable;
 689:main.c        **** 	uint32 numDevices, scanChain[16], i;
 690:main.c        **** 	const char *line = NULL;
 2920              		.loc 1 690 0
 2921 1dea 48C785D0 		movq	$0, -560(%rbp)
 2921      FDFFFF00 
 2921      000000
 691:main.c        **** 	uint8 conduit = 0x01;
 2922              		.loc 1 691 0
 2923 1df5 C68511FD 		movb	$1, -751(%rbp)
 2923      FFFF01
 692:main.c        **** 
 693:main.c        **** 	if ( arg_nullcheck(argTable) != 0 ) {
 2924              		.loc 1 693 0
 2925 1dfc 488D85F0 		leaq	-272(%rbp), %rax
 2925      FEFFFF
 2926 1e03 4889C7   		movq	%rax, %rdi
 2927 1e06 E8000000 		call	arg_nullcheck
 2927      00
 2928 1e0b 85C0     		testl	%eax, %eax
 2929 1e0d 742F     		je	.L151
 694:main.c        **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 2930              		.loc 1 694 0
 2931 1e0f 488B0500 		movq	stderr(%rip), %rax
 2931      000000
 2932 1e16 488B9560 		movq	-416(%rbp), %rdx
 2932      FEFFFF
 2933 1e1d BE000000 		movl	$.LC98, %esi
 2933      00
 2934 1e22 4889C7   		movq	%rax, %rdi
 2935 1e25 B8000000 		movl	$0, %eax
 2935      00
 2936 1e2a E8000000 		call	fprintf
 2936      00
 695:main.c        **** 		FAIL(1, cleanup);
 2937              		.loc 1 695 0
 2938 1e2f C78540FD 		movl	$1, -704(%rbp)
 2938      FFFF0100 
 2938      0000
 2939 1e39 E98F2500 		jmp	.L152
 2939      00
 2940              	.L151:
 696:main.c        **** 	}
 697:main.c        **** 
 698:main.c        **** 	numErrors = arg_parse(argc, argv, argTable);
 2941              		.loc 1 698 0
 2942 1e3e 488D95F0 		leaq	-272(%rbp), %rdx
 2942      FEFFFF
 2943 1e45 488B8DF0 		movq	-784(%rbp), %rcx
 2943      FCFFFF
 2944 1e4c 8B85FCFC 		movl	-772(%rbp), %eax
 2944      FFFF
 2945 1e52 4889CE   		movq	%rcx, %rsi
 2946 1e55 89C7     		movl	%eax, %edi
 2947 1e57 E8000000 		call	arg_parse
 2947      00
 2948 1e5c 898578FD 		movl	%eax, -648(%rbp)
 2948      FFFF
 699:main.c        **** 
 700:main.c        **** 	if ( helpOpt->count > 0 ) {
 2949              		.loc 1 700 0
 2950 1e62 488B8538 		movq	-456(%rbp), %rax
 2950      FEFFFF
 2951 1e69 8B4060   		movl	96(%rax), %eax
 2952 1e6c 85C0     		testl	%eax, %eax
 2953 1e6e 7E6E     		jle	.L153
 701:main.c        **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 2954              		.loc 1 701 0
 2955 1e70 488B8560 		movq	-416(%rbp), %rax
 2955      FEFFFF
 2956 1e77 4889C6   		movq	%rax, %rsi
 2957 1e7a BF000000 		movl	$.LC99, %edi
 2957      00
 2958 1e7f B8000000 		movl	$0, %eax
 2958      00
 2959 1e84 E8000000 		call	printf
 2959      00
 702:main.c        **** 		arg_print_syntax(stdout, argTable, "\n");
 2960              		.loc 1 702 0
 2961 1e89 488B0500 		movq	stdout(%rip), %rax
 2961      000000
 2962 1e90 488D8DF0 		leaq	-272(%rbp), %rcx
 2962      FEFFFF
 2963 1e97 BA000000 		movl	$.LC100, %edx
 2963      00
 2964 1e9c 4889CE   		movq	%rcx, %rsi
 2965 1e9f 4889C7   		movq	%rax, %rdi
 2966 1ea2 E8000000 		call	arg_print_syntax
 2966      00
 703:main.c        **** 		printf("\nInteract with an FPGALink device.\n\n");
 2967              		.loc 1 703 0
 2968 1ea7 BF000000 		movl	$.LC101, %edi
 2968      00
 2969 1eac E8000000 		call	puts
 2969      00
 704:main.c        **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 2970              		.loc 1 704 0
 2971 1eb1 488B0500 		movq	stdout(%rip), %rax
 2971      000000
 2972 1eb8 488D8DF0 		leaq	-272(%rbp), %rcx
 2972      FEFFFF
 2973 1ebf BA000000 		movl	$.LC102, %edx
 2973      00
 2974 1ec4 4889CE   		movq	%rcx, %rsi
 2975 1ec7 4889C7   		movq	%rax, %rdi
 2976 1eca E8000000 		call	arg_print_glossary
 2976      00
 705:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 2977              		.loc 1 705 0
 2978 1ecf C78540FD 		movl	$0, -704(%rbp)
 2978      FFFF0000 
 2978      0000
 2979 1ed9 E9EF2400 		jmp	.L152
 2979      00
 2980              	.L153:
 706:main.c        **** 	}
 707:main.c        **** 
 708:main.c        **** 	if ( numErrors > 0 ) {
 2981              		.loc 1 708 0
 2982 1ede 83BD78FD 		cmpl	$0, -648(%rbp)
 2982      FFFF00
 2983 1ee5 7E4F     		jle	.L154
 709:main.c        **** 		arg_print_errors(stdout, endOpt, progName);
 2984              		.loc 1 709 0
 2985 1ee7 488B0500 		movq	stdout(%rip), %rax
 2985      000000
 2986 1eee 488B9560 		movq	-416(%rbp), %rdx
 2986      FEFFFF
 2987 1ef5 488B8D50 		movq	-432(%rbp), %rcx
 2987      FEFFFF
 2988 1efc 4889CE   		movq	%rcx, %rsi
 2989 1eff 4889C7   		movq	%rax, %rdi
 2990 1f02 E8000000 		call	arg_print_errors
 2990      00
 710:main.c        **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 2991              		.loc 1 710 0
 2992 1f07 488B0500 		movq	stderr(%rip), %rax
 2992      000000
 2993 1f0e 488B9560 		movq	-416(%rbp), %rdx
 2993      FEFFFF
 2994 1f15 BE000000 		movl	$.LC103, %esi
 2994      00
 2995 1f1a 4889C7   		movq	%rax, %rdi
 2996 1f1d B8000000 		movl	$0, %eax
 2996      00
 2997 1f22 E8000000 		call	fprintf
 2997      00
 711:main.c        **** 		FAIL(FLP_ARGS, cleanup);
 2998              		.loc 1 711 0
 2999 1f27 C78540FD 		movl	$12, -704(%rbp)
 2999      FFFF0C00 
 2999      0000
 3000 1f31 E9972400 		jmp	.L152
 3000      00
 3001              	.L154:
 712:main.c        **** 	}
 713:main.c        **** 
 714:main.c        **** 	fStatus = flInitialise(0, &error);
 3002              		.loc 1 714 0
 3003 1f36 488D85B8 		leaq	-584(%rbp), %rax
 3003      FDFFFF
 3004 1f3d 4889C6   		movq	%rax, %rsi
 3005 1f40 BF000000 		movl	$0, %edi
 3005      00
 3006 1f45 E8000000 		call	flInitialise
 3006      00
 3007 1f4a 898544FD 		movl	%eax, -700(%rbp)
 3007      FFFF
 715:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3008              		.loc 1 715 0
 3009 1f50 83BD44FD 		cmpl	$0, -700(%rbp)
 3009      FFFF00
 3010 1f57 740F     		je	.L155
 3011              		.loc 1 715 0 is_stmt 0 discriminator 1
 3012 1f59 C78540FD 		movl	$1, -704(%rbp)
 3012      FFFF0100 
 3012      0000
 3013 1f63 E9652400 		jmp	.L152
 3013      00
 3014              	.L155:
 716:main.c        **** 
 717:main.c        **** 	vp = vpOpt->sval[0];
 3015              		.loc 1 717 0 is_stmt 1
 3016 1f68 488B85E0 		movq	-544(%rbp), %rax
 3016      FDFFFF
 3017 1f6f 488B4068 		movq	104(%rax), %rax
 3018 1f73 488B00   		movq	(%rax), %rax
 3019 1f76 48898570 		movq	%rax, -400(%rbp)
 3019      FEFFFF
 718:main.c        **** 
 719:main.c        **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 3020              		.loc 1 719 0
 3021 1f7d 488B8570 		movq	-400(%rbp), %rax
 3021      FEFFFF
 3022 1f84 4889C6   		movq	%rax, %rsi
 3023 1f87 BF000000 		movl	$.LC104, %edi
 3023      00
 3024 1f8c B8000000 		movl	$0, %eax
 3024      00
 3025 1f91 E8000000 		call	printf
 3025      00
 720:main.c        **** 	fStatus = flOpen(vp, &handle, NULL);
 3026              		.loc 1 720 0
 3027 1f96 488D8DB0 		leaq	-592(%rbp), %rcx
 3027      FDFFFF
 3028 1f9d 488B8570 		movq	-400(%rbp), %rax
 3028      FEFFFF
 3029 1fa4 BA000000 		movl	$0, %edx
 3029      00
 3030 1fa9 4889CE   		movq	%rcx, %rsi
 3031 1fac 4889C7   		movq	%rax, %rdi
 3032 1faf E8000000 		call	flOpen
 3032      00
 3033 1fb4 898544FD 		movl	%eax, -700(%rbp)
 3033      FFFF
 721:main.c        **** 	if ( fStatus ) {
 3034              		.loc 1 721 0
 3035 1fba 83BD44FD 		cmpl	$0, -700(%rbp)
 3035      FFFF00
 3036 1fc1 0F842702 		je	.L156
 3036      0000
 722:main.c        **** 		if ( ivpOpt->count ) {
 3037              		.loc 1 722 0
 3038 1fc7 488B85D8 		movq	-552(%rbp), %rax
 3038      FDFFFF
 3039 1fce 8B4060   		movl	96(%rax), %eax
 3040 1fd1 85C0     		testl	%eax, %eax
 3041 1fd3 0F84E601 		je	.L157
 3041      0000
 3042              	.LBB15:
 723:main.c        **** 			int count = 60;
 3043              		.loc 1 723 0
 3044 1fd9 C7854CFD 		movl	$60, -692(%rbp)
 3044      FFFF3C00 
 3044      0000
 724:main.c        **** 			uint8 flag;
 725:main.c        **** 			ivp = ivpOpt->sval[0];
 3045              		.loc 1 725 0
 3046 1fe3 488B85D8 		movq	-552(%rbp), %rax
 3046      FDFFFF
 3047 1fea 488B4068 		movq	104(%rax), %rax
 3048 1fee 488B00   		movq	(%rax), %rax
 3049 1ff1 48898568 		movq	%rax, -408(%rbp)
 3049      FEFFFF
 726:main.c        **** 			printf("Loading firmware into %s...\n", ivp);
 3050              		.loc 1 726 0
 3051 1ff8 488B8568 		movq	-408(%rbp), %rax
 3051      FEFFFF
 3052 1fff 4889C6   		movq	%rax, %rsi
 3053 2002 BF000000 		movl	$.LC105, %edi
 3053      00
 3054 2007 B8000000 		movl	$0, %eax
 3054      00
 3055 200c E8000000 		call	printf
 3055      00
 727:main.c        **** 			if ( fwOpt->count ) {
 3056              		.loc 1 727 0
 3057 2011 488B85E8 		movq	-536(%rbp), %rax
 3057      FDFFFF
 3058 2018 8B4060   		movl	96(%rax), %eax
 3059 201b 85C0     		testl	%eax, %eax
 3060 201d 742F     		je	.L158
 728:main.c        **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 3061              		.loc 1 728 0
 3062 201f 488B85E8 		movq	-536(%rbp), %rax
 3062      FDFFFF
 3063 2026 488B4068 		movq	104(%rax), %rax
 3064 202a 488B08   		movq	(%rax), %rcx
 3065 202d 488D95B8 		leaq	-584(%rbp), %rdx
 3065      FDFFFF
 3066 2034 488B8568 		movq	-408(%rbp), %rax
 3066      FEFFFF
 3067 203b 4889CE   		movq	%rcx, %rsi
 3068 203e 4889C7   		movq	%rax, %rdi
 3069 2041 E8000000 		call	flLoadCustomFirmware
 3069      00
 3070 2046 898544FD 		movl	%eax, -700(%rbp)
 3070      FFFF
 3071 204c EB26     		jmp	.L159
 3072              	.L158:
 729:main.c        **** 			} else {
 730:main.c        **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 3073              		.loc 1 730 0
 3074 204e 488D95B8 		leaq	-584(%rbp), %rdx
 3074      FDFFFF
 3075 2055 488B8D70 		movq	-400(%rbp), %rcx
 3075      FEFFFF
 3076 205c 488B8568 		movq	-408(%rbp), %rax
 3076      FEFFFF
 3077 2063 4889CE   		movq	%rcx, %rsi
 3078 2066 4889C7   		movq	%rax, %rdi
 3079 2069 E8000000 		call	flLoadStandardFirmware
 3079      00
 3080 206e 898544FD 		movl	%eax, -700(%rbp)
 3080      FFFF
 3081              	.L159:
 731:main.c        **** 			}
 732:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3082              		.loc 1 732 0
 3083 2074 83BD44FD 		cmpl	$0, -700(%rbp)
 3083      FFFF00
 3084 207b 740F     		je	.L160
 3085              		.loc 1 732 0 is_stmt 0 discriminator 1
 3086 207d C78540FD 		movl	$1, -704(%rbp)
 3086      FFFF0100 
 3086      0000
 3087 2087 E9412300 		jmp	.L152
 3087      00
 3088              	.L160:
 733:main.c        **** 			
 734:main.c        **** 			printf("Awaiting renumeration");
 3089              		.loc 1 734 0 is_stmt 1
 3090 208c BF000000 		movl	$.LC106, %edi
 3090      00
 3091 2091 B8000000 		movl	$0, %eax
 3091      00
 3092 2096 E8000000 		call	printf
 3092      00
 735:main.c        **** 			flSleep(1000);
 3093              		.loc 1 735 0
 3094 209b BFE80300 		movl	$1000, %edi
 3094      00
 3095 20a0 E8000000 		call	flSleep
 3095      00
 3096              	.L164:
 736:main.c        **** 			do {
 737:main.c        **** 				printf(".");
 3097              		.loc 1 737 0
 3098 20a5 BF2E0000 		movl	$46, %edi
 3098      00
 3099 20aa E8000000 		call	putchar
 3099      00
 738:main.c        **** 				fflush(stdout);
 3100              		.loc 1 738 0
 3101 20af 488B0500 		movq	stdout(%rip), %rax
 3101      000000
 3102 20b6 4889C7   		movq	%rax, %rdi
 3103 20b9 E8000000 		call	fflush
 3103      00
 739:main.c        **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 3104              		.loc 1 739 0
 3105 20be 488D95B8 		leaq	-584(%rbp), %rdx
 3105      FDFFFF
 3106 20c5 488D8DB0 		leaq	-336(%rbp), %rcx
 3106      FEFFFF
 3107 20cc 488B8570 		movq	-400(%rbp), %rax
 3107      FEFFFF
 3108 20d3 4889CE   		movq	%rcx, %rsi
 3109 20d6 4889C7   		movq	%rax, %rdi
 3110 20d9 E8000000 		call	flIsDeviceAvailable
 3110      00
 3111 20de 898544FD 		movl	%eax, -700(%rbp)
 3111      FFFF
 740:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3112              		.loc 1 740 0
 3113 20e4 83BD44FD 		cmpl	$0, -700(%rbp)
 3113      FFFF00
 3114 20eb 740F     		je	.L162
 3115              		.loc 1 740 0 is_stmt 0 discriminator 1
 3116 20ed C78540FD 		movl	$1, -704(%rbp)
 3116      FFFF0100 
 3116      0000
 3117 20f7 E9D12200 		jmp	.L152
 3117      00
 3118              	.L162:
 741:main.c        **** 				flSleep(250);
 3119              		.loc 1 741 0 is_stmt 1
 3120 20fc BFFA0000 		movl	$250, %edi
 3120      00
 3121 2101 E8000000 		call	flSleep
 3121      00
 742:main.c        **** 				count--;
 3122              		.loc 1 742 0
 3123 2106 83AD4CFD 		subl	$1, -692(%rbp)
 3123      FFFF01
 743:main.c        **** 			} while ( !flag && count );
 3124              		.loc 1 743 0
 3125 210d 0FB685B0 		movzbl	-336(%rbp), %eax
 3125      FEFFFF
 3126 2114 84C0     		testb	%al, %al
 3127 2116 7509     		jne	.L163
 3128              		.loc 1 743 0 is_stmt 0 discriminator 1
 3129 2118 83BD4CFD 		cmpl	$0, -692(%rbp)
 3129      FFFF00
 3130 211f 7584     		jne	.L164
 3131              	.L163:
 744:main.c        **** 			printf("\n");
 3132              		.loc 1 744 0 is_stmt 1
 3133 2121 BF0A0000 		movl	$10, %edi
 3133      00
 3134 2126 E8000000 		call	putchar
 3134      00
 745:main.c        **** 			if ( !flag ) {
 3135              		.loc 1 745 0
 3136 212b 0FB685B0 		movzbl	-336(%rbp), %eax
 3136      FEFFFF
 3137 2132 84C0     		testb	%al, %al
 3138 2134 752F     		jne	.L165
 746:main.c        **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 3139              		.loc 1 746 0
 3140 2136 488B0500 		movq	stderr(%rip), %rax
 3140      000000
 3141 213d 488B9570 		movq	-400(%rbp), %rdx
 3141      FEFFFF
 3142 2144 BE000000 		movl	$.LC107, %esi
 3142      00
 3143 2149 4889C7   		movq	%rax, %rdi
 3144 214c B8000000 		movl	$0, %eax
 3144      00
 3145 2151 E8000000 		call	fprintf
 3145      00
 747:main.c        **** 				FAIL(FLP_LIBERR, cleanup);
 3146              		.loc 1 747 0
 3147 2156 C78540FD 		movl	$1, -704(%rbp)
 3147      FFFF0100 
 3147      0000
 3148 2160 E9682200 		jmp	.L152
 3148      00
 3149              	.L165:
 748:main.c        **** 			}
 749:main.c        **** 
 750:main.c        **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 3150              		.loc 1 750 0
 3151 2165 488B8570 		movq	-400(%rbp), %rax
 3151      FEFFFF
 3152 216c 4889C6   		movq	%rax, %rsi
 3153 216f BF000000 		movl	$.LC108, %edi
 3153      00
 3154 2174 B8000000 		movl	$0, %eax
 3154      00
 3155 2179 E8000000 		call	printf
 3155      00
 751:main.c        **** 			fStatus = flOpen(vp, &handle, &error);
 3156              		.loc 1 751 0
 3157 217e 488D95B8 		leaq	-584(%rbp), %rdx
 3157      FDFFFF
 3158 2185 488D8DB0 		leaq	-592(%rbp), %rcx
 3158      FDFFFF
 3159 218c 488B8570 		movq	-400(%rbp), %rax
 3159      FEFFFF
 3160 2193 4889CE   		movq	%rcx, %rsi
 3161 2196 4889C7   		movq	%rax, %rdi
 3162 2199 E8000000 		call	flOpen
 3162      00
 3163 219e 898544FD 		movl	%eax, -700(%rbp)
 3163      FFFF
 752:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3164              		.loc 1 752 0
 3165 21a4 83BD44FD 		cmpl	$0, -700(%rbp)
 3165      FFFF00
 3166 21ab 7410     		je	.L166
 3167              		.loc 1 752 0 is_stmt 0 discriminator 1
 3168 21ad C78540FD 		movl	$1, -704(%rbp)
 3168      FFFF0100 
 3168      0000
 3169 21b7 90       		nop
 3170 21b8 E9102200 		jmp	.L152
 3170      00
 3171              	.L166:
 3172              	.LBE15:
 3173 21bd EB2F     		jmp	.L156
 3174              	.L157:
 753:main.c        **** 		} else {
 754:main.c        **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 3175              		.loc 1 754 0 is_stmt 1
 3176 21bf 488B0500 		movq	stderr(%rip), %rax
 3176      000000
 3177 21c6 488B9570 		movq	-400(%rbp), %rdx
 3177      FEFFFF
 3178 21cd BE000000 		movl	$.LC109, %esi
 3178      00
 3179 21d2 4889C7   		movq	%rax, %rdi
 3180 21d5 B8000000 		movl	$0, %eax
 3180      00
 3181 21da E8000000 		call	fprintf
 3181      00
 755:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3182              		.loc 1 755 0
 3183 21df C78540FD 		movl	$12, -704(%rbp)
 3183      FFFF0C00 
 3183      0000
 3184 21e9 E9DF2100 		jmp	.L152
 3184      00
 3185              	.L156:
 756:main.c        **** 		}
 757:main.c        **** 	}
 758:main.c        **** 
 759:main.c        **** 	printf(
 3186              		.loc 1 759 0
 3187 21ee 488B85B0 		movq	-592(%rbp), %rax
 3187      FDFFFF
 3188 21f5 4889C7   		movq	%rax, %rdi
 3189 21f8 E8000000 		call	flGetFirmwareVersion
 3189      00
 3190 21fd 89C3     		movl	%eax, %ebx
 760:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 761:main.c        **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 3191              		.loc 1 761 0
 3192 21ff 488B85B0 		movq	-592(%rbp), %rax
 3192      FDFFFF
 3193 2206 4889C7   		movq	%rax, %rdi
 3194 2209 E8000000 		call	flGetFirmwareID
 3194      00
 759:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 3195              		.loc 1 759 0
 3196 220e 0FB7D0   		movzwl	%ax, %edx
 3197 2211 488B8570 		movq	-400(%rbp), %rax
 3197      FEFFFF
 3198 2218 89D9     		movl	%ebx, %ecx
 3199 221a 4889C6   		movq	%rax, %rsi
 3200 221d BF000000 		movl	$.LC110, %edi
 3200      00
 3201 2222 B8000000 		movl	$0, %eax
 3201      00
 3202 2227 E8000000 		call	printf
 3202      00
 762:main.c        **** 	);
 763:main.c        **** 
 764:main.c        **** 	if ( eepromOpt->count ) {
 3203              		.loc 1 764 0
 3204 222c 488B8540 		movq	-448(%rbp), %rax
 3204      FEFFFF
 3205 2233 8B4060   		movl	96(%rax), %eax
 3206 2236 85C0     		testl	%eax, %eax
 3207 2238 0F84B600 		je	.L167
 3207      0000
 765:main.c        **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 3208              		.loc 1 765 0
 3209 223e 488B8540 		movq	-448(%rbp), %rax
 3209      FEFFFF
 3210 2245 488B4068 		movq	104(%rax), %rax
 3211 2249 488B00   		movq	(%rax), %rax
 3212 224c 4889C6   		movq	%rax, %rsi
 3213 224f BF000000 		movl	$.LC111, %edi
 3213      00
 3214 2254 E8000000 		call	strcmp
 3214      00
 3215 2259 85C0     		testl	%eax, %eax
 3216 225b 7532     		jne	.L168
 766:main.c        **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 3217              		.loc 1 766 0
 3218 225d BF000000 		movl	$.LC112, %edi
 3218      00
 3219 2262 E8000000 		call	puts
 3219      00
 767:main.c        **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 3220              		.loc 1 767 0
 3221 2267 488B85B0 		movq	-592(%rbp), %rax
 3221      FDFFFF
 3222 226e 488D95B8 		leaq	-584(%rbp), %rdx
 3222      FDFFFF
 3223 2275 488B8D70 		movq	-400(%rbp), %rcx
 3223      FEFFFF
 3224 227c 4889CE   		movq	%rcx, %rsi
 3225 227f 4889C7   		movq	%rax, %rdi
 3226 2282 E8000000 		call	flFlashStandardFirmware
 3226      00
 3227 2287 898544FD 		movl	%eax, -700(%rbp)
 3227      FFFF
 3228 228d EB4D     		jmp	.L169
 3229              	.L168:
 768:main.c        **** 		} else {
 769:main.c        **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 3230              		.loc 1 769 0
 3231 228f 488B8540 		movq	-448(%rbp), %rax
 3231      FEFFFF
 3232 2296 488B4068 		movq	104(%rax), %rax
 3233 229a 488B00   		movq	(%rax), %rax
 3234 229d 4889C6   		movq	%rax, %rsi
 3235 22a0 BF000000 		movl	$.LC113, %edi
 3235      00
 3236 22a5 B8000000 		movl	$0, %eax
 3236      00
 3237 22aa E8000000 		call	printf
 3237      00
 770:main.c        **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 3238              		.loc 1 770 0
 3239 22af 488B8540 		movq	-448(%rbp), %rax
 3239      FEFFFF
 3240 22b6 488B4068 		movq	104(%rax), %rax
 3241 22ba 488B08   		movq	(%rax), %rcx
 3242 22bd 488B85B0 		movq	-592(%rbp), %rax
 3242      FDFFFF
 3243 22c4 488D95B8 		leaq	-584(%rbp), %rdx
 3243      FDFFFF
 3244 22cb 4889CE   		movq	%rcx, %rsi
 3245 22ce 4889C7   		movq	%rax, %rdi
 3246 22d1 E8000000 		call	flFlashCustomFirmware
 3246      00
 3247 22d6 898544FD 		movl	%eax, -700(%rbp)
 3247      FFFF
 3248              	.L169:
 771:main.c        **** 		}
 772:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3249              		.loc 1 772 0
 3250 22dc 83BD44FD 		cmpl	$0, -700(%rbp)
 3250      FFFF00
 3251 22e3 740F     		je	.L167
 3252              		.loc 1 772 0 is_stmt 0 discriminator 1
 3253 22e5 C78540FD 		movl	$1, -704(%rbp)
 3253      FFFF0100 
 3253      0000
 3254 22ef E9D92000 		jmp	.L152
 3254      00
 3255              	.L167:
 773:main.c        **** 	}
 774:main.c        **** 
 775:main.c        **** 	if ( backupOpt->count ) {
 3256              		.loc 1 775 0 is_stmt 1
 3257 22f4 488B8548 		movq	-440(%rbp), %rax
 3257      FEFFFF
 3258 22fb 8B4060   		movl	96(%rax), %eax
 3259 22fe 85C0     		testl	%eax, %eax
 3260 2300 0F84DA00 		je	.L170
 3260      0000
 3261              	.LBB16:
 776:main.c        **** 		const char *fileName;
 777:main.c        **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 3262              		.loc 1 777 0
 3263 2306 488B8548 		movq	-440(%rbp), %rax
 3263      FEFFFF
 3264 230d 488B4068 		movq	104(%rax), %rax
 3265 2311 488B00   		movq	(%rax), %rax
 3266 2314 488D8DB0 		leaq	-336(%rbp), %rcx
 3266      FEFFFF
 3267 231b BA000000 		movl	$0, %edx
 3267      00
 3268 2320 4889CE   		movq	%rcx, %rsi
 3269 2323 4889C7   		movq	%rax, %rdi
 3270 2326 E8000000 		call	strtoul
 3270      00
 3271 232b 89857CFD 		movl	%eax, -644(%rbp)
 3271      FFFF
 778:main.c        **** 		if ( *fileName != ':' ) {
 3272              		.loc 1 778 0
 3273 2331 488B85B0 		movq	-336(%rbp), %rax
 3273      FEFFFF
 3274 2338 0FB600   		movzbl	(%rax), %eax
 3275 233b 3C3A     		cmpb	$58, %al
 3276 233d 742F     		je	.L171
 779:main.c        **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 3277              		.loc 1 779 0
 3278 233f 488B0500 		movq	stderr(%rip), %rax
 3278      000000
 3279 2346 488B9560 		movq	-416(%rbp), %rdx
 3279      FEFFFF
 3280 234d BE000000 		movl	$.LC114, %esi
 3280      00
 3281 2352 4889C7   		movq	%rax, %rdi
 3282 2355 B8000000 		movl	$0, %eax
 3282      00
 3283 235a E8000000 		call	fprintf
 3283      00
 780:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3284              		.loc 1 780 0
 3285 235f C78540FD 		movl	$12, -704(%rbp)
 3285      FFFF0C00 
 3285      0000
 3286 2369 E95F2000 		jmp	.L152
 3286      00
 3287              	.L171:
 781:main.c        **** 		}
 782:main.c        **** 		fileName++;
 3288              		.loc 1 782 0
 3289 236e 488B85B0 		movq	-336(%rbp), %rax
 3289      FEFFFF
 3290 2375 4883C001 		addq	$1, %rax
 3291 2379 488985B0 		movq	%rax, -336(%rbp)
 3291      FEFFFF
 783:main.c        **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 3292              		.loc 1 783 0
 3293 2380 488B95B0 		movq	-336(%rbp), %rdx
 3293      FEFFFF
 3294 2387 8B857CFD 		movl	-644(%rbp), %eax
 3294      FFFF
 3295 238d 89C6     		movl	%eax, %esi
 3296 238f BF000000 		movl	$.LC115, %edi
 3296      00
 3297 2394 B8000000 		movl	$0, %eax
 3297      00
 3298 2399 E8000000 		call	printf
 3298      00
 784:main.c        **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 3299              		.loc 1 784 0
 3300 239e 488B95B0 		movq	-336(%rbp), %rdx
 3300      FEFFFF
 3301 23a5 488B85B0 		movq	-592(%rbp), %rax
 3301      FDFFFF
 3302 23ac 488D8DB8 		leaq	-584(%rbp), %rcx
 3302      FDFFFF
 3303 23b3 8BB57CFD 		movl	-644(%rbp), %esi
 3303      FFFF
 3304 23b9 4889C7   		movq	%rax, %rdi
 3305 23bc E8000000 		call	flSaveFirmware
 3305      00
 3306 23c1 898544FD 		movl	%eax, -700(%rbp)
 3306      FFFF
 785:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3307              		.loc 1 785 0
 3308 23c7 83BD44FD 		cmpl	$0, -700(%rbp)
 3308      FFFF00
 3309 23ce 7410     		je	.L170
 3310              		.loc 1 785 0 is_stmt 0 discriminator 1
 3311 23d0 C78540FD 		movl	$1, -704(%rbp)
 3311      FFFF0100 
 3311      0000
 3312 23da 90       		nop
 3313 23db E9ED1F00 		jmp	.L152
 3313      00
 3314              	.L170:
 3315              	.LBE16:
 786:main.c        **** 	}
 787:main.c        **** 
 788:main.c        **** 	if ( rstOpt->count ) {
 3316              		.loc 1 788 0 is_stmt 1
 3317 23e0 488B8528 		movq	-472(%rbp), %rax
 3317      FEFFFF
 3318 23e7 8B4060   		movl	96(%rax), %eax
 3319 23ea 85C0     		testl	%eax, %eax
 3320 23ec 7437     		je	.L174
 789:main.c        **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
 790:main.c        **** 		fStatus = flResetToggle(handle, &error);
 3321              		.loc 1 790 0
 3322 23ee 488B85B0 		movq	-592(%rbp), %rax
 3322      FDFFFF
 3323 23f5 488D95B8 		leaq	-584(%rbp), %rdx
 3323      FDFFFF
 3324 23fc 4889D6   		movq	%rdx, %rsi
 3325 23ff 4889C7   		movq	%rax, %rdi
 3326 2402 E8000000 		call	flResetToggle
 3326      00
 3327 2407 898544FD 		movl	%eax, -700(%rbp)
 3327      FFFF
 791:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3328              		.loc 1 791 0
 3329 240d 83BD44FD 		cmpl	$0, -700(%rbp)
 3329      FFFF00
 3330 2414 740F     		je	.L174
 3331              		.loc 1 791 0 is_stmt 0 discriminator 1
 3332 2416 C78540FD 		movl	$1, -704(%rbp)
 3332      FFFF0100 
 3332      0000
 3333 2420 E9A81F00 		jmp	.L152
 3333      00
 3334              	.L174:
 792:main.c        **** 	}
 793:main.c        **** 
 794:main.c        **** 	if ( conOpt->count ) {
 3335              		.loc 1 794 0 is_stmt 1
 3336 2425 488B8508 		movq	-504(%rbp), %rax
 3336      FEFFFF
 3337 242c 8B4060   		movl	96(%rax), %eax
 3338 242f 85C0     		testl	%eax, %eax
 3339 2431 7413     		je	.L175
 795:main.c        **** 		conduit = (uint8)conOpt->ival[0];
 3340              		.loc 1 795 0
 3341 2433 488B8508 		movq	-504(%rbp), %rax
 3341      FEFFFF
 3342 243a 488B4068 		movq	104(%rax), %rax
 3343 243e 8B00     		movl	(%rax), %eax
 3344 2440 888511FD 		movb	%al, -751(%rbp)
 3344      FFFF
 3345              	.L175:
 796:main.c        **** 	}
 797:main.c        **** 
 798:main.c        **** 	isNeroCapable = flIsNeroCapable(handle);
 3346              		.loc 1 798 0
 3347 2446 488B85B0 		movq	-592(%rbp), %rax
 3347      FDFFFF
 3348 244d 4889C7   		movq	%rax, %rdi
 3349 2450 E8000000 		call	flIsNeroCapable
 3349      00
 3350 2455 84C0     		testb	%al, %al
 3351 2457 0F95C0   		setne	%al
 3352 245a 888521FD 		movb	%al, -735(%rbp)
 3352      FFFF
 799:main.c        **** 	isCommCapable = flIsCommCapable(handle, conduit);
 3353              		.loc 1 799 0
 3354 2460 0FB69511 		movzbl	-751(%rbp), %edx
 3354      FDFFFF
 3355 2467 488B85B0 		movq	-592(%rbp), %rax
 3355      FDFFFF
 3356 246e 89D6     		movl	%edx, %esi
 3357 2470 4889C7   		movq	%rax, %rdi
 3358 2473 E8000000 		call	flIsCommCapable
 3358      00
 3359 2478 84C0     		testb	%al, %al
 3360 247a 0F95C0   		setne	%al
 3361 247d 888522FD 		movb	%al, -734(%rbp)
 3361      FFFF
 800:main.c        **** 
 801:main.c        **** 	if ( portOpt->count ) {
 3362              		.loc 1 801 0
 3363 2483 488B85F0 		movq	-528(%rbp), %rax
 3363      FDFFFF
 3364 248a 8B4060   		movl	96(%rax), %eax
 3365 248d 85C0     		testl	%eax, %eax
 3366 248f 0F843C02 		je	.L176
 3366      0000
 3367              	.LBB17:
 802:main.c        **** 		uint32 readState;
 803:main.c        **** 		char hex[9];
 804:main.c        **** 		const uint8 *p = (const uint8 *)hex;
 3368              		.loc 1 804 0
 3369 2495 488D4580 		leaq	-128(%rbp), %rax
 3370 2499 48898578 		movq	%rax, -392(%rbp)
 3370      FEFFFF
 805:main.c        **** 		printf("Configuring ports...\n");
 3371              		.loc 1 805 0
 3372 24a0 BF000000 		movl	$.LC116, %edi
 3372      00
 3373 24a5 E8000000 		call	puts
 3373      00
 806:main.c        **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 3374              		.loc 1 806 0
 3375 24aa 488B85F0 		movq	-528(%rbp), %rax
 3375      FDFFFF
 3376 24b1 488B4068 		movq	104(%rax), %rax
 3377 24b5 488B30   		movq	(%rax), %rsi
 3378 24b8 488B85B0 		movq	-592(%rbp), %rax
 3378      FDFFFF
 3379 24bf 488D8DB8 		leaq	-584(%rbp), %rcx
 3379      FDFFFF
 3380 24c6 488D95B0 		leaq	-336(%rbp), %rdx
 3380      FEFFFF
 3381 24cd 4889C7   		movq	%rax, %rdi
 3382 24d0 E8000000 		call	flMultiBitPortAccess
 3382      00
 3383 24d5 898544FD 		movl	%eax, -700(%rbp)
 3383      FFFF
 807:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3384              		.loc 1 807 0
 3385 24db 83BD44FD 		cmpl	$0, -700(%rbp)
 3385      FFFF00
 3386 24e2 740F     		je	.L177
 3387              		.loc 1 807 0 is_stmt 0 discriminator 1
 3388 24e4 C78540FD 		movl	$1, -704(%rbp)
 3388      FFFF0100 
 3388      0000
 3389 24ee E9DA1E00 		jmp	.L152
 3389      00
 3390              	.L177:
 808:main.c        **** 		sprintf(hex, "%08X", readState);
 3391              		.loc 1 808 0 is_stmt 1
 3392 24f3 8B95B0FE 		movl	-336(%rbp), %edx
 3392      FFFF
 3393 24f9 488D4580 		leaq	-128(%rbp), %rax
 3394 24fd BE000000 		movl	$.LC117, %esi
 3394      00
 3395 2502 4889C7   		movq	%rax, %rdi
 3396 2505 B8000000 		movl	$0, %eax
 3396      00
 3397 250a E8000000 		call	sprintf
 3397      00
 809:main.c        **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 3398              		.loc 1 809 0
 3399 250f 488B8578 		movq	-392(%rbp), %rax
 3399      FEFFFF
 3400 2516 488D5001 		leaq	1(%rax), %rdx
 3401 251a 48899578 		movq	%rdx, -392(%rbp)
 3401      FEFFFF
 3402 2521 0FB600   		movzbl	(%rax), %eax
 3403 2524 0FB6C0   		movzbl	%al, %eax
 3404 2527 83E830   		subl	$48, %eax
 3405 252a 4898     		cltq
 3406 252c 488B04C5 		movq	nibbles(,%rax,8), %rax
 3406      00000000 
 3407 2534 4889C6   		movq	%rax, %rsi
 3408 2537 BF000000 		movl	$.LC118, %edi
 3408      00
 3409 253c B8000000 		movl	$0, %eax
 3409      00
 3410 2541 E8000000 		call	printf
 3410      00
 810:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3411              		.loc 1 810 0
 3412 2546 488B8578 		movq	-392(%rbp), %rax
 3412      FEFFFF
 3413 254d 488D5001 		leaq	1(%rax), %rdx
 3414 2551 48899578 		movq	%rdx, -392(%rbp)
 3414      FEFFFF
 3415 2558 0FB600   		movzbl	(%rax), %eax
 3416 255b 0FB6C0   		movzbl	%al, %eax
 3417 255e 83E830   		subl	$48, %eax
 3418 2561 4898     		cltq
 3419 2563 488B04C5 		movq	nibbles(,%rax,8), %rax
 3419      00000000 
 3420 256b 4889C6   		movq	%rax, %rsi
 3421 256e BF000000 		movl	$.LC119, %edi
 3421      00
 3422 2573 B8000000 		movl	$0, %eax
 3422      00
 3423 2578 E8000000 		call	printf
 3423      00
 811:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3424              		.loc 1 811 0
 3425 257d 488B8578 		movq	-392(%rbp), %rax
 3425      FEFFFF
 3426 2584 488D5001 		leaq	1(%rax), %rdx
 3427 2588 48899578 		movq	%rdx, -392(%rbp)
 3427      FEFFFF
 3428 258f 0FB600   		movzbl	(%rax), %eax
 3429 2592 0FB6C0   		movzbl	%al, %eax
 3430 2595 83E830   		subl	$48, %eax
 3431 2598 4898     		cltq
 3432 259a 488B04C5 		movq	nibbles(,%rax,8), %rax
 3432      00000000 
 3433 25a2 4889C6   		movq	%rax, %rsi
 3434 25a5 BF000000 		movl	$.LC119, %edi
 3434      00
 3435 25aa B8000000 		movl	$0, %eax
 3435      00
 3436 25af E8000000 		call	printf
 3436      00
 812:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3437              		.loc 1 812 0
 3438 25b4 488B8578 		movq	-392(%rbp), %rax
 3438      FEFFFF
 3439 25bb 488D5001 		leaq	1(%rax), %rdx
 3440 25bf 48899578 		movq	%rdx, -392(%rbp)
 3440      FEFFFF
 3441 25c6 0FB600   		movzbl	(%rax), %eax
 3442 25c9 0FB6C0   		movzbl	%al, %eax
 3443 25cc 83E830   		subl	$48, %eax
 3444 25cf 4898     		cltq
 3445 25d1 488B04C5 		movq	nibbles(,%rax,8), %rax
 3445      00000000 
 3446 25d9 4889C6   		movq	%rax, %rsi
 3447 25dc BF000000 		movl	$.LC119, %edi
 3447      00
 3448 25e1 B8000000 		movl	$0, %eax
 3448      00
 3449 25e6 E8000000 		call	printf
 3449      00
 813:main.c        **** 		printf("  %s", nibbles[*p++ - '0']);
 3450              		.loc 1 813 0
 3451 25eb 488B8578 		movq	-392(%rbp), %rax
 3451      FEFFFF
 3452 25f2 488D5001 		leaq	1(%rax), %rdx
 3453 25f6 48899578 		movq	%rdx, -392(%rbp)
 3453      FEFFFF
 3454 25fd 0FB600   		movzbl	(%rax), %eax
 3455 2600 0FB6C0   		movzbl	%al, %eax
 3456 2603 83E830   		subl	$48, %eax
 3457 2606 4898     		cltq
 3458 2608 488B04C5 		movq	nibbles(,%rax,8), %rax
 3458      00000000 
 3459 2610 4889C6   		movq	%rax, %rsi
 3460 2613 BF000000 		movl	$.LC120, %edi
 3460      00
 3461 2618 B8000000 		movl	$0, %eax
 3461      00
 3462 261d E8000000 		call	printf
 3462      00
 814:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3463              		.loc 1 814 0
 3464 2622 488B8578 		movq	-392(%rbp), %rax
 3464      FEFFFF
 3465 2629 488D5001 		leaq	1(%rax), %rdx
 3466 262d 48899578 		movq	%rdx, -392(%rbp)
 3466      FEFFFF
 3467 2634 0FB600   		movzbl	(%rax), %eax
 3468 2637 0FB6C0   		movzbl	%al, %eax
 3469 263a 83E830   		subl	$48, %eax
 3470 263d 4898     		cltq
 3471 263f 488B04C5 		movq	nibbles(,%rax,8), %rax
 3471      00000000 
 3472 2647 4889C6   		movq	%rax, %rsi
 3473 264a BF000000 		movl	$.LC119, %edi
 3473      00
 3474 264f B8000000 		movl	$0, %eax
 3474      00
 3475 2654 E8000000 		call	printf
 3475      00
 815:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3476              		.loc 1 815 0
 3477 2659 488B8578 		movq	-392(%rbp), %rax
 3477      FEFFFF
 3478 2660 488D5001 		leaq	1(%rax), %rdx
 3479 2664 48899578 		movq	%rdx, -392(%rbp)
 3479      FEFFFF
 3480 266b 0FB600   		movzbl	(%rax), %eax
 3481 266e 0FB6C0   		movzbl	%al, %eax
 3482 2671 83E830   		subl	$48, %eax
 3483 2674 4898     		cltq
 3484 2676 488B04C5 		movq	nibbles(,%rax,8), %rax
 3484      00000000 
 3485 267e 4889C6   		movq	%rax, %rsi
 3486 2681 BF000000 		movl	$.LC119, %edi
 3486      00
 3487 2686 B8000000 		movl	$0, %eax
 3487      00
 3488 268b E8000000 		call	printf
 3488      00
 816:main.c        **** 		printf(" %s\n", nibbles[*p++ - '0']);
 3489              		.loc 1 816 0
 3490 2690 488B8578 		movq	-392(%rbp), %rax
 3490      FEFFFF
 3491 2697 488D5001 		leaq	1(%rax), %rdx
 3492 269b 48899578 		movq	%rdx, -392(%rbp)
 3492      FEFFFF
 3493 26a2 0FB600   		movzbl	(%rax), %eax
 3494 26a5 0FB6C0   		movzbl	%al, %eax
 3495 26a8 83E830   		subl	$48, %eax
 3496 26ab 4898     		cltq
 3497 26ad 488B04C5 		movq	nibbles(,%rax,8), %rax
 3497      00000000 
 3498 26b5 4889C6   		movq	%rax, %rsi
 3499 26b8 BF000000 		movl	$.LC121, %edi
 3499      00
 3500 26bd B8000000 		movl	$0, %eax
 3500      00
 3501 26c2 E8000000 		call	printf
 3501      00
 817:main.c        **** 		flSleep(100);
 3502              		.loc 1 817 0
 3503 26c7 BF640000 		movl	$100, %edi
 3503      00
 3504 26cc E8000000 		call	flSleep
 3504      00
 3505              	.L176:
 3506              	.LBE17:
 818:main.c        **** 	}
 819:main.c        **** 
 820:main.c        **** 	if ( queryOpt->count ) {
 3507              		.loc 1 820 0
 3508 26d1 488B85F8 		movq	-520(%rbp), %rax
 3508      FDFFFF
 3509 26d8 8B4060   		movl	96(%rax), %eax
 3510 26db 85C0     		testl	%eax, %eax
 3511 26dd 0F844D01 		je	.L178
 3511      0000
 821:main.c        **** 		if ( isNeroCapable ) {
 3512              		.loc 1 821 0
 3513 26e3 80BD21FD 		cmpb	$0, -735(%rbp)
 3513      FFFF00
 3514 26ea 0F841101 		je	.L179
 3514      0000
 822:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 3515              		.loc 1 822 0
 3516 26f0 488B85B0 		movq	-592(%rbp), %rax
 3516      FDFFFF
 3517 26f7 488D95B8 		leaq	-584(%rbp), %rdx
 3517      FDFFFF
 3518 26fe BE000000 		movl	$0, %esi
 3518      00
 3519 2703 4889C7   		movq	%rax, %rdi
 3520 2706 E8000000 		call	flSelectConduit
 3520      00
 3521 270b 898544FD 		movl	%eax, -700(%rbp)
 3521      FFFF
 823:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3522              		.loc 1 823 0
 3523 2711 83BD44FD 		cmpl	$0, -700(%rbp)
 3523      FFFF00
 3524 2718 740F     		je	.L180
 3525              		.loc 1 823 0 is_stmt 0 discriminator 1
 3526 271a C78540FD 		movl	$1, -704(%rbp)
 3526      FFFF0100 
 3526      0000
 3527 2724 E9A41C00 		jmp	.L152
 3527      00
 3528              	.L180:
 824:main.c        **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 3529              		.loc 1 824 0 is_stmt 1
 3530 2729 488B85F8 		movq	-520(%rbp), %rax
 3530      FDFFFF
 3531 2730 488B4068 		movq	104(%rax), %rax
 3532 2734 488B30   		movq	(%rax), %rsi
 3533 2737 488B85B0 		movq	-592(%rbp), %rax
 3533      FDFFFF
 3534 273e 488DBDB8 		leaq	-584(%rbp), %rdi
 3534      FDFFFF
 3535 2745 488D8DB0 		leaq	-336(%rbp), %rcx
 3535      FEFFFF
 3536 274c 488D9530 		leaq	-720(%rbp), %rdx
 3536      FDFFFF
 3537 2753 4989F9   		movq	%rdi, %r9
 3538 2756 41B81000 		movl	$16, %r8d
 3538      0000
 3539 275c 4889C7   		movq	%rax, %rdi
 3540 275f E8000000 		call	jtagScanChain
 3540      00
 3541 2764 898544FD 		movl	%eax, -700(%rbp)
 3541      FFFF
 825:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3542              		.loc 1 825 0
 3543 276a 83BD44FD 		cmpl	$0, -700(%rbp)
 3543      FFFF00
 3544 2771 740F     		je	.L181
 3545              		.loc 1 825 0 is_stmt 0 discriminator 1
 3546 2773 C78540FD 		movl	$1, -704(%rbp)
 3546      FFFF0100 
 3546      0000
 3547 277d E94B1C00 		jmp	.L152
 3547      00
 3548              	.L181:
 826:main.c        **** 			if ( numDevices ) {
 3549              		.loc 1 826 0 is_stmt 1
 3550 2782 8B8530FD 		movl	-720(%rbp), %eax
 3550      FFFF
 3551 2788 85C0     		testl	%eax, %eax
 3552 278a 745A     		je	.L182
 827:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 3553              		.loc 1 827 0
 3554 278c 488B8570 		movq	-400(%rbp), %rax
 3554      FEFFFF
 3555 2793 4889C6   		movq	%rax, %rsi
 3556 2796 BF000000 		movl	$.LC122, %edi
 3556      00
 3557 279b B8000000 		movl	$0, %eax
 3557      00
 3558 27a0 E8000000 		call	printf
 3558      00
 828:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3559              		.loc 1 828 0
 3560 27a5 C78548FD 		movl	$0, -696(%rbp)
 3560      FFFF0000 
 3560      0000
 3561 27af EB25     		jmp	.L183
 3562              	.L184:
 829:main.c        **** 					printf("  0x%08X\n", scanChain[i]);
 3563              		.loc 1 829 0 discriminator 2
 3564 27b1 8B8548FD 		movl	-696(%rbp), %eax
 3564      FFFF
 3565 27b7 8B8485B0 		movl	-336(%rbp,%rax,4), %eax
 3565      FEFFFF
 3566 27be 89C6     		movl	%eax, %esi
 3567 27c0 BF000000 		movl	$.LC123, %edi
 3567      00
 3568 27c5 B8000000 		movl	$0, %eax
 3568      00
 3569 27ca E8000000 		call	printf
 3569      00
 828:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3570              		.loc 1 828 0 discriminator 2
 3571 27cf 838548FD 		addl	$1, -696(%rbp)
 3571      FFFF01
 3572              	.L183:
 828:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3573              		.loc 1 828 0 is_stmt 0 discriminator 1
 3574 27d6 8B8530FD 		movl	-720(%rbp), %eax
 3574      FFFF
 3575 27dc 398548FD 		cmpl	%eax, -696(%rbp)
 3575      FFFF
 3576 27e2 72CD     		jb	.L184
 3577 27e4 EB4A     		jmp	.L178
 3578              	.L182:
 830:main.c        **** 				}
 831:main.c        **** 			} else {
 832:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 3579              		.loc 1 832 0 is_stmt 1
 3580 27e6 488B8570 		movq	-400(%rbp), %rax
 3580      FEFFFF
 3581 27ed 4889C6   		movq	%rax, %rsi
 3582 27f0 BF000000 		movl	$.LC124, %edi
 3582      00
 3583 27f5 B8000000 		movl	$0, %eax
 3583      00
 3584 27fa E8000000 		call	printf
 3584      00
 3585 27ff EB2F     		jmp	.L178
 3586              	.L179:
 833:main.c        **** 			}
 834:main.c        **** 		} else {
 835:main.c        **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 3587              		.loc 1 835 0
 3588 2801 488B0500 		movq	stderr(%rip), %rax
 3588      000000
 3589 2808 488B9570 		movq	-400(%rbp), %rdx
 3589      FEFFFF
 3590 280f BE000000 		movl	$.LC125, %esi
 3590      00
 3591 2814 4889C7   		movq	%rax, %rdi
 3592 2817 B8000000 		movl	$0, %eax
 3592      00
 3593 281c E8000000 		call	fprintf
 3593      00
 836:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3594              		.loc 1 836 0
 3595 2821 C78540FD 		movl	$12, -704(%rbp)
 3595      FFFF0C00 
 3595      0000
 3596 282b E99D1B00 		jmp	.L152
 3596      00
 3597              	.L178:
 837:main.c        **** 		}
 838:main.c        **** 	}
 839:main.c        **** 
 840:main.c        **** 	if ( progOpt->count ) {
 3598              		.loc 1 840 0
 3599 2830 488B8500 		movq	-512(%rbp), %rax
 3599      FEFFFF
 3600 2837 8B4060   		movl	96(%rax), %eax
 3601 283a 85C0     		testl	%eax, %eax
 3602 283c 0F84C900 		je	.L186
 3602      0000
 841:main.c        **** 		printf("Programming device...\n");
 3603              		.loc 1 841 0
 3604 2842 BF000000 		movl	$.LC126, %edi
 3604      00
 3605 2847 E8000000 		call	puts
 3605      00
 842:main.c        **** 		if ( isNeroCapable ) {
 3606              		.loc 1 842 0
 3607 284c 80BD21FD 		cmpb	$0, -735(%rbp)
 3607      FFFF00
 3608 2853 0F848300 		je	.L187
 3608      0000
 843:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 3609              		.loc 1 843 0
 3610 2859 488B85B0 		movq	-592(%rbp), %rax
 3610      FDFFFF
 3611 2860 488D95B8 		leaq	-584(%rbp), %rdx
 3611      FDFFFF
 3612 2867 BE000000 		movl	$0, %esi
 3612      00
 3613 286c 4889C7   		movq	%rax, %rdi
 3614 286f E8000000 		call	flSelectConduit
 3614      00
 3615 2874 898544FD 		movl	%eax, -700(%rbp)
 3615      FFFF
 844:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3616              		.loc 1 844 0
 3617 287a 83BD44FD 		cmpl	$0, -700(%rbp)
 3617      FFFF00
 3618 2881 740F     		je	.L188
 3619              		.loc 1 844 0 is_stmt 0 discriminator 1
 3620 2883 C78540FD 		movl	$1, -704(%rbp)
 3620      FFFF0100 
 3620      0000
 3621 288d E93B1B00 		jmp	.L152
 3621      00
 3622              	.L188:
 845:main.c        **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 3623              		.loc 1 845 0 is_stmt 1
 3624 2892 488B8500 		movq	-512(%rbp), %rax
 3624      FEFFFF
 3625 2899 488B4068 		movq	104(%rax), %rax
 3626 289d 488B30   		movq	(%rax), %rsi
 3627 28a0 488B85B0 		movq	-592(%rbp), %rax
 3627      FDFFFF
 3628 28a7 488D95B8 		leaq	-584(%rbp), %rdx
 3628      FDFFFF
 3629 28ae 4889D1   		movq	%rdx, %rcx
 3630 28b1 BA000000 		movl	$0, %edx
 3630      00
 3631 28b6 4889C7   		movq	%rax, %rdi
 3632 28b9 E8000000 		call	flProgram
 3632      00
 3633 28be 898544FD 		movl	%eax, -700(%rbp)
 3633      FFFF
 846:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3634              		.loc 1 846 0
 3635 28c4 83BD44FD 		cmpl	$0, -700(%rbp)
 3635      FFFF00
 3636 28cb 743E     		je	.L186
 3637              		.loc 1 846 0 is_stmt 0 discriminator 1
 3638 28cd C78540FD 		movl	$1, -704(%rbp)
 3638      FFFF0100 
 3638      0000
 3639 28d7 E9F11A00 		jmp	.L152
 3639      00
 3640              	.L187:
 847:main.c        **** 		} else {
 848:main.c        **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 3641              		.loc 1 848 0 is_stmt 1
 3642 28dc 488B0500 		movq	stderr(%rip), %rax
 3642      000000
 3643 28e3 488B9570 		movq	-400(%rbp), %rdx
 3643      FEFFFF
 3644 28ea BE000000 		movl	$.LC127, %esi
 3644      00
 3645 28ef 4889C7   		movq	%rax, %rdi
 3646 28f2 B8000000 		movl	$0, %eax
 3646      00
 3647 28f7 E8000000 		call	fprintf
 3647      00
 849:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3648              		.loc 1 849 0
 3649 28fc C78540FD 		movl	$12, -704(%rbp)
 3649      FFFF0C00 
 3649      0000
 3650 2906 E9C21A00 		jmp	.L152
 3650      00
 3651              	.L186:
 850:main.c        **** 		}
 851:main.c        **** 	}
 852:main.c        **** 
 853:main.c        **** 	if ( benOpt->count ) {
 3652              		.loc 1 853 0
 3653 290b 488B8520 		movq	-480(%rbp), %rax
 3653      FEFFFF
 3654 2912 8B4060   		movl	96(%rax), %eax
 3655 2915 85C0     		testl	%eax, %eax
 3656 2917 7407     		je	.L189
 854:main.c        **** 		enableBenchmarking = true;
 3657              		.loc 1 854 0
 3658 2919 C6050000 		movb	$1, enableBenchmarking(%rip)
 3658      000001
 3659              	.L189:
 855:main.c        **** 	}
 856:main.c        **** 	
 857:main.c        **** 	if ( actOpt->count ) {
 3660              		.loc 1 857 0
 3661 2920 488B8510 		movq	-496(%rbp), %rax
 3661      FEFFFF
 3662 2927 8B4060   		movl	96(%rax), %eax
 3663 292a 85C0     		testl	%eax, %eax
 3664 292c 0F845401 		je	.L190
 3664      0000
 858:main.c        **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 3665              		.loc 1 858 0
 3666 2932 488B8570 		movq	-400(%rbp), %rax
 3666      FEFFFF
 3667 2939 4889C6   		movq	%rax, %rsi
 3668 293c BF000000 		movl	$.LC128, %edi
 3668      00
 3669 2941 B8000000 		movl	$0, %eax
 3669      00
 3670 2946 E8000000 		call	printf
 3670      00
 859:main.c        **** 		if ( isCommCapable ) {
 3671              		.loc 1 859 0
 3672 294b 80BD22FD 		cmpb	$0, -734(%rbp)
 3672      FFFF00
 3673 2952 0F84FF00 		je	.L191
 3673      0000
 3674              	.LBB18:
 860:main.c        **** 			uint8 isRunning;
 861:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 3675              		.loc 1 861 0
 3676 2958 0FB68D11 		movzbl	-751(%rbp), %ecx
 3676      FDFFFF
 3677 295f 488B85B0 		movq	-592(%rbp), %rax
 3677      FDFFFF
 3678 2966 488D95B8 		leaq	-584(%rbp), %rdx
 3678      FDFFFF
 3679 296d 89CE     		movl	%ecx, %esi
 3680 296f 4889C7   		movq	%rax, %rdi
 3681 2972 E8000000 		call	flSelectConduit
 3681      00
 3682 2977 898544FD 		movl	%eax, -700(%rbp)
 3682      FFFF
 862:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3683              		.loc 1 862 0
 3684 297d 83BD44FD 		cmpl	$0, -700(%rbp)
 3684      FFFF00
 3685 2984 740F     		je	.L192
 3686              		.loc 1 862 0 is_stmt 0 discriminator 1
 3687 2986 C78540FD 		movl	$1, -704(%rbp)
 3687      FFFF0100 
 3687      0000
 3688 2990 E9381A00 		jmp	.L152
 3688      00
 3689              	.L192:
 863:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3690              		.loc 1 863 0 is_stmt 1
 3691 2995 488B85B0 		movq	-592(%rbp), %rax
 3691      FDFFFF
 3692 299c 488D95B8 		leaq	-584(%rbp), %rdx
 3692      FDFFFF
 3693 29a3 488D8DC8 		leaq	-568(%rbp), %rcx
 3693      FDFFFF
 3694 29aa 4889CE   		movq	%rcx, %rsi
 3695 29ad 4889C7   		movq	%rax, %rdi
 3696 29b0 E8000000 		call	flIsFPGARunning
 3696      00
 3697 29b5 898544FD 		movl	%eax, -700(%rbp)
 3697      FFFF
 864:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3698              		.loc 1 864 0
 3699 29bb 83BD44FD 		cmpl	$0, -700(%rbp)
 3699      FFFF00
 3700 29c2 740F     		je	.L194
 3701              		.loc 1 864 0 is_stmt 0 discriminator 1
 3702 29c4 C78540FD 		movl	$1, -704(%rbp)
 3702      FFFF0100 
 3702      0000
 3703 29ce E9FA1900 		jmp	.L152
 3703      00
 3704              	.L194:
 865:main.c        **** 			if ( isRunning ) {
 3705              		.loc 1 865 0 is_stmt 1
 3706 29d3 0FB685C8 		movzbl	-568(%rbp), %eax
 3706      FDFFFF
 3707 29da 84C0     		testb	%al, %al
 3708 29dc 7447     		je	.L195
 866:main.c        **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 3709              		.loc 1 866 0
 3710 29de 488B8510 		movq	-496(%rbp), %rax
 3710      FEFFFF
 3711 29e5 488B4068 		movq	104(%rax), %rax
 3712 29e9 488B08   		movq	(%rax), %rcx
 3713 29ec 488B85B0 		movq	-592(%rbp), %rax
 3713      FDFFFF
 3714 29f3 488D95B8 		leaq	-584(%rbp), %rdx
 3714      FDFFFF
 3715 29fa 4889CE   		movq	%rcx, %rsi
 3716 29fd 4889C7   		movq	%rax, %rdi
 3717 2a00 E84DE0FF 		call	parseLine
 3717      FF
 3718 2a05 898580FD 		movl	%eax, -640(%rbp)
 3718      FFFF
 867:main.c        **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 3719              		.loc 1 867 0
 3720 2a0b 83BD80FD 		cmpl	$0, -640(%rbp)
 3720      FFFF00
 3721 2a12 7441     		je	.L196
 3722              		.loc 1 867 0 is_stmt 0 discriminator 1
 3723 2a14 8B8580FD 		movl	-640(%rbp), %eax
 3723      FFFF
 3724 2a1a 898540FD 		movl	%eax, -704(%rbp)
 3724      FFFF
 3725 2a20 E9A81900 		jmp	.L152
 3725      00
 3726              	.L195:
 868:main.c        **** 			} else {
 869:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 3727              		.loc 1 869 0 is_stmt 1
 3728 2a25 488B0500 		movq	stderr(%rip), %rax
 3728      000000
 3729 2a2c 488B9570 		movq	-400(%rbp), %rdx
 3729      FEFFFF
 3730 2a33 BE000000 		movl	$.LC129, %esi
 3730      00
 3731 2a38 4889C7   		movq	%rax, %rdi
 3732 2a3b B8000000 		movl	$0, %eax
 3732      00
 3733 2a40 E8000000 		call	fprintf
 3733      00
 870:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 3734              		.loc 1 870 0
 3735 2a45 C78540FD 		movl	$12, -704(%rbp)
 3735      FFFF0C00 
 3735      0000
 3736 2a4f 90       		nop
 3737 2a50 E9781900 		jmp	.L152
 3737      00
 3738              	.L196:
 3739              	.LBE18:
 3740 2a55 EB2F     		jmp	.L190
 3741              	.L191:
 871:main.c        **** 			}
 872:main.c        **** 		} else {
 873:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 3742              		.loc 1 873 0
 3743 2a57 488B0500 		movq	stderr(%rip), %rax
 3743      000000
 3744 2a5e 488B9570 		movq	-400(%rbp), %rdx
 3744      FEFFFF
 3745 2a65 BE000000 		movl	$.LC130, %esi
 3745      00
 3746 2a6a 4889C7   		movq	%rax, %rdi
 3747 2a6d B8000000 		movl	$0, %eax
 3747      00
 3748 2a72 E8000000 		call	fprintf
 3748      00
 874:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3749              		.loc 1 874 0
 3750 2a77 C78540FD 		movl	$12, -704(%rbp)
 3750      FFFF0C00 
 3750      0000
 3751 2a81 E9471900 		jmp	.L152
 3751      00
 3752              	.L190:
 875:main.c        **** 		}
 876:main.c        **** 	}
 877:main.c        **** 
 878:main.c        **** 	if ( dumpOpt->count ) {
 3753              		.loc 1 878 0
 3754 2a86 488B8530 		movq	-464(%rbp), %rax
 3754      FEFFFF
 3755 2a8d 8B4060   		movl	96(%rax), %eax
 3756 2a90 85C0     		testl	%eax, %eax
 3757 2a92 0F84C402 		je	.L197
 3757      0000
 3758              	.LBB19:
 879:main.c        **** 		const char *fileName;
 880:main.c        **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 3759              		.loc 1 880 0
 3760 2a98 488B8530 		movq	-464(%rbp), %rax
 3760      FEFFFF
 3761 2a9f 488B4068 		movq	104(%rax), %rax
 3762 2aa3 488B00   		movq	(%rax), %rax
 3763 2aa6 488D8DC0 		leaq	-576(%rbp), %rcx
 3763      FDFFFF
 3764 2aad BA0A0000 		movl	$10, %edx
 3764      00
 3765 2ab2 4889CE   		movq	%rcx, %rsi
 3766 2ab5 4889C7   		movq	%rax, %rdi
 3767 2ab8 E8000000 		call	strtoul
 3767      00
 3768 2abd 48898580 		movq	%rax, -384(%rbp)
 3768      FEFFFF
 881:main.c        **** 		FILE *file = NULL;
 3769              		.loc 1 881 0
 3770 2ac4 48C78588 		movq	$0, -376(%rbp)
 3770      FEFFFF00 
 3770      000000
 882:main.c        **** 		const uint8 *recvData;
 883:main.c        **** 		uint32 actualLength;
 884:main.c        **** 		if ( *fileName != ':' ) {
 3771              		.loc 1 884 0
 3772 2acf 488B85C0 		movq	-576(%rbp), %rax
 3772      FDFFFF
 3773 2ad6 0FB600   		movzbl	(%rax), %eax
 3774 2ad9 3C3A     		cmpb	$58, %al
 3775 2adb 742F     		je	.L198
 885:main.c        **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 3776              		.loc 1 885 0
 3777 2add 488B0500 		movq	stderr(%rip), %rax
 3777      000000
 3778 2ae4 488B9560 		movq	-416(%rbp), %rdx
 3778      FEFFFF
 3779 2aeb BE000000 		movl	$.LC131, %esi
 3779      00
 3780 2af0 4889C7   		movq	%rax, %rdi
 3781 2af3 B8000000 		movl	$0, %eax
 3781      00
 3782 2af8 E8000000 		call	fprintf
 3782      00
 886:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3783              		.loc 1 886 0
 3784 2afd C78540FD 		movl	$12, -704(%rbp)
 3784      FFFF0C00 
 3784      0000
 3785 2b07 E9C11800 		jmp	.L152
 3785      00
 3786              	.L198:
 887:main.c        **** 		}
 888:main.c        **** 		fileName++;
 3787              		.loc 1 888 0
 3788 2b0c 488B85C0 		movq	-576(%rbp), %rax
 3788      FDFFFF
 3789 2b13 4883C001 		addq	$1, %rax
 3790 2b17 488985C0 		movq	%rax, -576(%rbp)
 3790      FDFFFF
 889:main.c        **** 		printf("Copying from channel %lu to %s", chan, fileName);
 3791              		.loc 1 889 0
 3792 2b1e 488B95C0 		movq	-576(%rbp), %rdx
 3792      FDFFFF
 3793 2b25 488B8580 		movq	-384(%rbp), %rax
 3793      FEFFFF
 3794 2b2c 4889C6   		movq	%rax, %rsi
 3795 2b2f BF000000 		movl	$.LC132, %edi
 3795      00
 3796 2b34 B8000000 		movl	$0, %eax
 3796      00
 3797 2b39 E8000000 		call	printf
 3797      00
 890:main.c        **** 		file = fopen(fileName, "wb");
 3798              		.loc 1 890 0
 3799 2b3e 488B85C0 		movq	-576(%rbp), %rax
 3799      FDFFFF
 3800 2b45 BE000000 		movl	$.LC15, %esi
 3800      00
 3801 2b4a 4889C7   		movq	%rax, %rdi
 3802 2b4d E8000000 		call	fopen
 3802      00
 3803 2b52 48898588 		movq	%rax, -376(%rbp)
 3803      FEFFFF
 891:main.c        **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 3804              		.loc 1 891 0
 3805 2b59 4883BD88 		cmpq	$0, -376(%rbp)
 3805      FEFFFF00 
 3806 2b61 750F     		jne	.L200
 3807              		.loc 1 891 0 is_stmt 0 discriminator 1
 3808 2b63 C78540FD 		movl	$11, -704(%rbp)
 3808      FFFF0B00 
 3808      0000
 3809 2b6d E95B1800 		jmp	.L152
 3809      00
 3810              	.L200:
 892:main.c        **** 		sigRegisterHandler();
 3811              		.loc 1 892 0 is_stmt 1
 3812 2b72 E8000000 		call	sigRegisterHandler
 3812      00
 893:main.c        **** 		fStatus = flSelectConduit(handle, conduit, &error);
 3813              		.loc 1 893 0
 3814 2b77 0FB68D11 		movzbl	-751(%rbp), %ecx
 3814      FDFFFF
 3815 2b7e 488B85B0 		movq	-592(%rbp), %rax
 3815      FDFFFF
 3816 2b85 488D95B8 		leaq	-584(%rbp), %rdx
 3816      FDFFFF
 3817 2b8c 89CE     		movl	%ecx, %esi
 3818 2b8e 4889C7   		movq	%rax, %rdi
 3819 2b91 E8000000 		call	flSelectConduit
 3819      00
 3820 2b96 898544FD 		movl	%eax, -700(%rbp)
 3820      FFFF
 894:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3821              		.loc 1 894 0
 3822 2b9c 83BD44FD 		cmpl	$0, -700(%rbp)
 3822      FFFF00
 3823 2ba3 740F     		je	.L201
 3824              		.loc 1 894 0 is_stmt 0 discriminator 1
 3825 2ba5 C78540FD 		movl	$1, -704(%rbp)
 3825      FFFF0100 
 3825      0000
 3826 2baf E9191800 		jmp	.L152
 3826      00
 3827              	.L201:
 895:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 3828              		.loc 1 895 0 is_stmt 1
 3829 2bb4 488B8580 		movq	-384(%rbp), %rax
 3829      FEFFFF
 3830 2bbb 0FB6F0   		movzbl	%al, %esi
 3831 2bbe 488B85B0 		movq	-592(%rbp), %rax
 3831      FDFFFF
 3832 2bc5 488D95B8 		leaq	-584(%rbp), %rdx
 3832      FDFFFF
 3833 2bcc 4989D0   		movq	%rdx, %r8
 3834 2bcf B9000000 		movl	$0, %ecx
 3834      00
 3835 2bd4 BA005800 		movl	$22528, %edx
 3835      00
 3836 2bd9 4889C7   		movq	%rax, %rdi
 3837 2bdc E8000000 		call	flReadChannelAsyncSubmit
 3837      00
 3838 2be1 898544FD 		movl	%eax, -700(%rbp)
 3838      FFFF
 896:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3839              		.loc 1 896 0
 3840 2be7 83BD44FD 		cmpl	$0, -700(%rbp)
 3840      FFFF00
 3841 2bee 740F     		je	.L202
 3842              		.loc 1 896 0 is_stmt 0 discriminator 1
 3843 2bf0 C78540FD 		movl	$1, -704(%rbp)
 3843      FFFF0100 
 3843      0000
 3844 2bfa E9CE1700 		jmp	.L152
 3844      00
 3845              	.L202:
 897:main.c        **** 		do {
 898:main.c        **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 3846              		.loc 1 898 0 is_stmt 1
 3847 2bff 488B8580 		movq	-384(%rbp), %rax
 3847      FEFFFF
 3848 2c06 0FB6F0   		movzbl	%al, %esi
 3849 2c09 488B85B0 		movq	-592(%rbp), %rax
 3849      FDFFFF
 3850 2c10 488D95B8 		leaq	-584(%rbp), %rdx
 3850      FDFFFF
 3851 2c17 4989D0   		movq	%rdx, %r8
 3852 2c1a B9000000 		movl	$0, %ecx
 3852      00
 3853 2c1f BA005800 		movl	$22528, %edx
 3853      00
 3854 2c24 4889C7   		movq	%rax, %rdi
 3855 2c27 E8000000 		call	flReadChannelAsyncSubmit
 3855      00
 3856 2c2c 898544FD 		movl	%eax, -700(%rbp)
 3856      FFFF
 899:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3857              		.loc 1 899 0
 3858 2c32 83BD44FD 		cmpl	$0, -700(%rbp)
 3858      FFFF00
 3859 2c39 740F     		je	.L203
 3860              		.loc 1 899 0 is_stmt 0 discriminator 1
 3861 2c3b C78540FD 		movl	$1, -704(%rbp)
 3861      FFFF0100 
 3861      0000
 3862 2c45 E9831700 		jmp	.L152
 3862      00
 3863              	.L203:
 900:main.c        **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 3864              		.loc 1 900 0 is_stmt 1
 3865 2c4a 488B85B0 		movq	-592(%rbp), %rax
 3865      FDFFFF
 3866 2c51 488DBDB8 		leaq	-584(%rbp), %rdi
 3866      FDFFFF
 3867 2c58 488D8DA0 		leaq	-608(%rbp), %rcx
 3867      FDFFFF
 3868 2c5f 488D95A0 		leaq	-608(%rbp), %rdx
 3868      FDFFFF
 3869 2c66 488DB5C8 		leaq	-568(%rbp), %rsi
 3869      FDFFFF
 3870 2c6d 4989F8   		movq	%rdi, %r8
 3871 2c70 4889C7   		movq	%rax, %rdi
 3872 2c73 E8000000 		call	flReadChannelAsyncAwait
 3872      00
 3873 2c78 898544FD 		movl	%eax, -700(%rbp)
 3873      FFFF
 901:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3874              		.loc 1 901 0
 3875 2c7e 83BD44FD 		cmpl	$0, -700(%rbp)
 3875      FFFF00
 3876 2c85 740F     		je	.L204
 3877              		.loc 1 901 0 is_stmt 0 discriminator 1
 3878 2c87 C78540FD 		movl	$1, -704(%rbp)
 3878      FFFF0100 
 3878      0000
 3879 2c91 E9371700 		jmp	.L152
 3879      00
 3880              	.L204:
 902:main.c        **** 			fwrite(recvData, 1, actualLength, file);
 3881              		.loc 1 902 0 is_stmt 1
 3882 2c96 8B85A0FD 		movl	-608(%rbp), %eax
 3882      FFFF
 3883 2c9c 89C2     		movl	%eax, %edx
 3884 2c9e 488B85C8 		movq	-568(%rbp), %rax
 3884      FDFFFF
 3885 2ca5 488B8D88 		movq	-376(%rbp), %rcx
 3885      FEFFFF
 3886 2cac BE010000 		movl	$1, %esi
 3886      00
 3887 2cb1 4889C7   		movq	%rax, %rdi
 3888 2cb4 E8000000 		call	fwrite
 3888      00
 903:main.c        **** 			printf(".");
 3889              		.loc 1 903 0
 3890 2cb9 BF2E0000 		movl	$46, %edi
 3890      00
 3891 2cbe E8000000 		call	putchar
 3891      00
 904:main.c        **** 		} while ( !sigIsRaised() );
 3892              		.loc 1 904 0
 3893 2cc3 E8000000 		call	sigIsRaised
 3893      00
 3894 2cc8 83F001   		xorl	$1, %eax
 3895 2ccb 84C0     		testb	%al, %al
 3896 2ccd 0F852CFF 		jne	.L202
 3896      FFFF
 905:main.c        **** 		printf("\nCaught SIGINT, quitting...\n");
 3897              		.loc 1 905 0
 3898 2cd3 BF000000 		movl	$.LC133, %edi
 3898      00
 3899 2cd8 E8000000 		call	puts
 3899      00
 906:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 3900              		.loc 1 906 0
 3901 2cdd 488B85B0 		movq	-592(%rbp), %rax
 3901      FDFFFF
 3902 2ce4 488DBDB8 		leaq	-584(%rbp), %rdi
 3902      FDFFFF
 3903 2ceb 488D8DA0 		leaq	-608(%rbp), %rcx
 3903      FDFFFF
 3904 2cf2 488D95A0 		leaq	-608(%rbp), %rdx
 3904      FDFFFF
 3905 2cf9 488DB5C8 		leaq	-568(%rbp), %rsi
 3905      FDFFFF
 3906 2d00 4989F8   		movq	%rdi, %r8
 3907 2d03 4889C7   		movq	%rax, %rdi
 3908 2d06 E8000000 		call	flReadChannelAsyncAwait
 3908      00
 3909 2d0b 898544FD 		movl	%eax, -700(%rbp)
 3909      FFFF
 907:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3910              		.loc 1 907 0
 3911 2d11 83BD44FD 		cmpl	$0, -700(%rbp)
 3911      FFFF00
 3912 2d18 7410     		je	.L205
 3913              		.loc 1 907 0 is_stmt 0 discriminator 1
 3914 2d1a C78540FD 		movl	$1, -704(%rbp)
 3914      FFFF0100 
 3914      0000
 3915 2d24 90       		nop
 3916 2d25 E9A31600 		jmp	.L152
 3916      00
 3917              	.L205:
 908:main.c        **** 		fwrite(recvData, 1, actualLength, file);
 3918              		.loc 1 908 0 is_stmt 1
 3919 2d2a 8B85A0FD 		movl	-608(%rbp), %eax
 3919      FFFF
 3920 2d30 89C2     		movl	%eax, %edx
 3921 2d32 488B85C8 		movq	-568(%rbp), %rax
 3921      FDFFFF
 3922 2d39 488B8D88 		movq	-376(%rbp), %rcx
 3922      FEFFFF
 3923 2d40 BE010000 		movl	$1, %esi
 3923      00
 3924 2d45 4889C7   		movq	%rax, %rdi
 3925 2d48 E8000000 		call	fwrite
 3925      00
 909:main.c        **** 		fclose(file);
 3926              		.loc 1 909 0
 3927 2d4d 488B8588 		movq	-376(%rbp), %rax
 3927      FEFFFF
 3928 2d54 4889C7   		movq	%rax, %rdi
 3929 2d57 E8000000 		call	fclose
 3929      00
 3930              	.L197:
 3931              	.LBE19:
 910:main.c        **** 	}
 911:main.c        **** 
 912:main.c        **** 	if ( shellOpt->count ) {
 3932              		.loc 1 912 0
 3933 2d5c 488B8518 		movq	-488(%rbp), %rax
 3933      FEFFFF
 3934 2d63 8B4060   		movl	96(%rax), %eax
 3935 2d66 85C0     		testl	%eax, %eax
 3936 2d68 0F84CD01 		je	.L206
 3936      0000
 913:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 3937              		.loc 1 913 0
 3938 2d6e BF000000 		movl	$.LC134, %edi
 3938      00
 3939 2d73 E8000000 		call	puts
 3939      00
 914:main.c        **** 		if ( isCommCapable ) {
 3940              		.loc 1 914 0
 3941 2d78 80BD22FD 		cmpb	$0, -734(%rbp)
 3941      FFFF00
 3942 2d7f 0F848701 		je	.L207
 3942      0000
 3943              	.LBB20:
 915:main.c        **** 		   uint8 isRunning;
 916:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 3944              		.loc 1 916 0
 3945 2d85 0FB68D11 		movzbl	-751(%rbp), %ecx
 3945      FDFFFF
 3946 2d8c 488B85B0 		movq	-592(%rbp), %rax
 3946      FDFFFF
 3947 2d93 488D95B8 		leaq	-584(%rbp), %rdx
 3947      FDFFFF
 3948 2d9a 89CE     		movl	%ecx, %esi
 3949 2d9c 4889C7   		movq	%rax, %rdi
 3950 2d9f E8000000 		call	flSelectConduit
 3950      00
 3951 2da4 898544FD 		movl	%eax, -700(%rbp)
 3951      FFFF
 917:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3952              		.loc 1 917 0
 3953 2daa 83BD44FD 		cmpl	$0, -700(%rbp)
 3953      FFFF00
 3954 2db1 740F     		je	.L208
 3955              		.loc 1 917 0 is_stmt 0 discriminator 1
 3956 2db3 C78540FD 		movl	$1, -704(%rbp)
 3956      FFFF0100 
 3956      0000
 3957 2dbd E90B1600 		jmp	.L152
 3957      00
 3958              	.L208:
 918:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3959              		.loc 1 918 0 is_stmt 1
 3960 2dc2 488B85B0 		movq	-592(%rbp), %rax
 3960      FDFFFF
 3961 2dc9 488D95B8 		leaq	-584(%rbp), %rdx
 3961      FDFFFF
 3962 2dd0 488D8DC8 		leaq	-568(%rbp), %rcx
 3962      FDFFFF
 3963 2dd7 4889CE   		movq	%rcx, %rsi
 3964 2dda 4889C7   		movq	%rax, %rdi
 3965 2ddd E8000000 		call	flIsFPGARunning
 3965      00
 3966 2de2 898544FD 		movl	%eax, -700(%rbp)
 3966      FFFF
 919:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3967              		.loc 1 919 0
 3968 2de8 83BD44FD 		cmpl	$0, -700(%rbp)
 3968      FFFF00
 3969 2def 740F     		je	.L210
 3970              		.loc 1 919 0 is_stmt 0 discriminator 1
 3971 2df1 C78540FD 		movl	$1, -704(%rbp)
 3971      FFFF0100 
 3971      0000
 3972 2dfb E9CD1500 		jmp	.L152
 3972      00
 3973              	.L210:
 920:main.c        **** 			if ( isRunning ) {
 3974              		.loc 1 920 0 is_stmt 1
 3975 2e00 0FB685C8 		movzbl	-568(%rbp), %eax
 3975      FDFFFF
 3976 2e07 84C0     		testb	%al, %al
 3977 2e09 0F84CB00 		je	.L211
 3977      0000
 3978              	.L213:
 921:main.c        **** 				do {
 922:main.c        **** 					do {
 923:main.c        **** 						line = readline("> ");
 3979              		.loc 1 923 0 discriminator 1
 3980 2e0f BF000000 		movl	$.LC135, %edi
 3980      00
 3981 2e14 E8000000 		call	readline
 3981      00
 3982 2e19 488985D0 		movq	%rax, -560(%rbp)
 3982      FDFFFF
 924:main.c        **** 					} while ( line && !line[0] );
 3983              		.loc 1 924 0 discriminator 1
 3984 2e20 4883BDD0 		cmpq	$0, -560(%rbp)
 3984      FDFFFF00 
 3985 2e28 740E     		je	.L212
 3986 2e2a 488B85D0 		movq	-560(%rbp), %rax
 3986      FDFFFF
 3987 2e31 0FB600   		movzbl	(%rax), %eax
 3988 2e34 84C0     		testb	%al, %al
 3989 2e36 74D7     		je	.L213
 3990              	.L212:
 925:main.c        **** 					if ( line && line[0] && line[0] != 'q' ) {
 3991              		.loc 1 925 0
 3992 2e38 4883BDD0 		cmpq	$0, -560(%rbp)
 3992      FDFFFF00 
 3993 2e40 747A     		je	.L214
 3994              		.loc 1 925 0 is_stmt 0 discriminator 1
 3995 2e42 488B85D0 		movq	-560(%rbp), %rax
 3995      FDFFFF
 3996 2e49 0FB600   		movzbl	(%rax), %eax
 3997 2e4c 84C0     		testb	%al, %al
 3998 2e4e 746C     		je	.L214
 3999 2e50 488B85D0 		movq	-560(%rbp), %rax
 3999      FDFFFF
 4000 2e57 0FB600   		movzbl	(%rax), %eax
 4001 2e5a 3C71     		cmpb	$113, %al
 4002 2e5c 745E     		je	.L214
 926:main.c        **** 						add_history(line);
 4003              		.loc 1 926 0 is_stmt 1
 4004 2e5e 488B85D0 		movq	-560(%rbp), %rax
 4004      FDFFFF
 4005 2e65 4889C7   		movq	%rax, %rdi
 4006 2e68 E8000000 		call	add_history
 4006      00
 927:main.c        **** 						pStatus = parseLine(handle, line, &error);
 4007              		.loc 1 927 0
 4008 2e6d 488B85B0 		movq	-592(%rbp), %rax
 4008      FDFFFF
 4009 2e74 488D95B8 		leaq	-584(%rbp), %rdx
 4009      FDFFFF
 4010 2e7b 488B8DD0 		movq	-560(%rbp), %rcx
 4010      FDFFFF
 4011 2e82 4889CE   		movq	%rcx, %rsi
 4012 2e85 4889C7   		movq	%rax, %rdi
 4013 2e88 E8C5DBFF 		call	parseLine
 4013      FF
 4014 2e8d 898580FD 		movl	%eax, -640(%rbp)
 4014      FFFF
 928:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 4015              		.loc 1 928 0
 4016 2e93 83BD80FD 		cmpl	$0, -640(%rbp)
 4016      FFFF00
 4017 2e9a 7411     		je	.L215
 4018              		.loc 1 928 0 is_stmt 0 discriminator 1
 4019 2e9c 8B8580FD 		movl	-640(%rbp), %eax
 4019      FFFF
 4020 2ea2 898540FD 		movl	%eax, -704(%rbp)
 4020      FFFF
 4021 2ea8 E9201500 		jmp	.L152
 4021      00
 4022              	.L215:
 929:main.c        **** 						free((void*)line);
 4023              		.loc 1 929 0 is_stmt 1
 4024 2ead 488B85D0 		movq	-560(%rbp), %rax
 4024      FDFFFF
 4025 2eb4 4889C7   		movq	%rax, %rdi
 4026 2eb7 E8000000 		call	free
 4026      00
 4027              	.L214:
 930:main.c        **** 					}
 931:main.c        **** 				} while ( line && line[0] != 'q' );
 4028              		.loc 1 931 0
 4029 2ebc 4883BDD0 		cmpq	$0, -560(%rbp)
 4029      FDFFFF00 
 4030 2ec4 7444     		je	.L216
 4031              		.loc 1 931 0 is_stmt 0 discriminator 1
 4032 2ec6 488B85D0 		movq	-560(%rbp), %rax
 4032      FDFFFF
 4033 2ecd 0FB600   		movzbl	(%rax), %eax
 4034 2ed0 3C71     		cmpb	$113, %al
 4035 2ed2 0F8537FF 		jne	.L213
 4035      FFFF
 4036              	.LBE20:
 4037 2ed8 EB61     		jmp	.L206
 4038              	.L211:
 4039              	.LBB21:
 932:main.c        **** 			} else {
 933:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 4040              		.loc 1 933 0 is_stmt 1
 4041 2eda 488B0500 		movq	stderr(%rip), %rax
 4041      000000
 4042 2ee1 488B9570 		movq	-400(%rbp), %rdx
 4042      FEFFFF
 4043 2ee8 BE000000 		movl	$.LC136, %esi
 4043      00
 4044 2eed 4889C7   		movq	%rax, %rdi
 4045 2ef0 B8000000 		movl	$0, %eax
 4045      00
 4046 2ef5 E8000000 		call	fprintf
 4046      00
 934:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 4047              		.loc 1 934 0
 4048 2efa C78540FD 		movl	$12, -704(%rbp)
 4048      FFFF0C00 
 4048      0000
 4049 2f04 90       		nop
 4050 2f05 E9C31400 		jmp	.L152
 4050      00
 4051              	.L216:
 4052              	.LBE21:
 4053 2f0a EB2F     		jmp	.L206
 4054              	.L207:
 935:main.c        **** 			}
 936:main.c        **** 		} else {
 937:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 4055              		.loc 1 937 0
 4056 2f0c 488B0500 		movq	stderr(%rip), %rax
 4056      000000
 4057 2f13 488B9570 		movq	-400(%rbp), %rdx
 4057      FEFFFF
 4058 2f1a BE000000 		movl	$.LC137, %esi
 4058      00
 4059 2f1f 4889C7   		movq	%rax, %rdi
 4060 2f22 B8000000 		movl	$0, %eax
 4060      00
 4061 2f27 E8000000 		call	fprintf
 4061      00
 938:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4062              		.loc 1 938 0
 4063 2f2c C78540FD 		movl	$12, -704(%rbp)
 4063      FFFF0C00 
 4063      0000
 4064 2f36 E9921400 		jmp	.L152
 4064      00
 4065              	.L206:
 939:main.c        **** 		}
 940:main.c        **** 	}
 941:main.c        **** 
 942:main.c        **** 	// -y reads in from csv and initiates the while loop 
 943:main.c        **** 	if ( loopOpt->count > 0 ) {
 4066              		.loc 1 943 0
 4067 2f3b 488B8558 		movq	-424(%rbp), %rax
 4067      FEFFFF
 4068 2f42 8B4060   		movl	96(%rax), %eax
 4069 2f45 85C0     		testl	%eax, %eax
 4070 2f47 0F8E8014 		jle	.L152
 4070      0000
 944:main.c        **** 		if ( isCommCapable ) {
 4071              		.loc 1 944 0
 4072 2f4d 80BD22FD 		cmpb	$0, -734(%rbp)
 4072      FFFF00
 4073 2f54 0F844814 		je	.L217
 4073      0000
 4074              	.LBB22:
 945:main.c        **** 			uint8 isRunning;
 946:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 4075              		.loc 1 946 0
 4076 2f5a 0FB68D11 		movzbl	-751(%rbp), %ecx
 4076      FDFFFF
 4077 2f61 488B85B0 		movq	-592(%rbp), %rax
 4077      FDFFFF
 4078 2f68 488D95B8 		leaq	-584(%rbp), %rdx
 4078      FDFFFF
 4079 2f6f 89CE     		movl	%ecx, %esi
 4080 2f71 4889C7   		movq	%rax, %rdi
 4081 2f74 E8000000 		call	flSelectConduit
 4081      00
 4082 2f79 898544FD 		movl	%eax, -700(%rbp)
 4082      FFFF
 947:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4083              		.loc 1 947 0
 4084 2f7f 83BD44FD 		cmpl	$0, -700(%rbp)
 4084      FFFF00
 4085 2f86 740F     		je	.L218
 4086              		.loc 1 947 0 is_stmt 0 discriminator 1
 4087 2f88 C78540FD 		movl	$1, -704(%rbp)
 4087      FFFF0100 
 4087      0000
 4088 2f92 E9361400 		jmp	.L152
 4088      00
 4089              	.L218:
 948:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4090              		.loc 1 948 0 is_stmt 1
 4091 2f97 488B85B0 		movq	-592(%rbp), %rax
 4091      FDFFFF
 4092 2f9e 488D95B8 		leaq	-584(%rbp), %rdx
 4092      FDFFFF
 4093 2fa5 488D8D0E 		leaq	-754(%rbp), %rcx
 4093      FDFFFF
 4094 2fac 4889CE   		movq	%rcx, %rsi
 4095 2faf 4889C7   		movq	%rax, %rdi
 4096 2fb2 E8000000 		call	flIsFPGARunning
 4096      00
 4097 2fb7 898544FD 		movl	%eax, -700(%rbp)
 4097      FFFF
 949:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4098              		.loc 1 949 0
 4099 2fbd 83BD44FD 		cmpl	$0, -700(%rbp)
 4099      FFFF00
 4100 2fc4 740F     		je	.L220
 4101              		.loc 1 949 0 is_stmt 0 discriminator 1
 4102 2fc6 C78540FD 		movl	$1, -704(%rbp)
 4102      FFFF0100 
 4102      0000
 4103 2fd0 E9F81300 		jmp	.L152
 4103      00
 4104              	.L220:
 950:main.c        **** 			if ( isRunning ) {
 4105              		.loc 1 950 0 is_stmt 1
 4106 2fd5 0FB6850E 		movzbl	-754(%rbp), %eax
 4106      FDFFFF
 4107 2fdc 84C0     		testb	%al, %al
 4108 2fde 0F849113 		je	.L221
 4108      0000
 4109              	.LBB23:
 951:main.c        **** 
 952:main.c        **** 				FILE * fPtr;
 953:main.c        **** 				char filename[] = "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/backend/apps/flcli
 4110              		.loc 1 953 0
 4111 2fe4 48B82F68 		movabsq	$7021163931744823343, %rax
 4111      6F6D652F 
 4111      7061
 4112 2fee 48894580 		movq	%rax, -128(%rbp)
 4113 2ff2 48B86E64 		movabsq	$7742643527908418670, %rax
 4113      752F4465 
 4113      736B
 4114 2ffc 48894588 		movq	%rax, -120(%rbp)
 4115 3000 48B8746F 		movabsq	$7595155038158221172, %rax
 4115      702F4469 
 4115      6769
 4116 300a 48894590 		movq	%rax, -112(%rbp)
 4117 300e 48B87461 		movabsq	$7163370410030686580, %rax
 4117      6C4C6F67 
 4117      6963
 4118 3018 48894598 		movq	%rax, -104(%rbp)
 4119 301c 48B84465 		movabsq	$5489727861217781060, %rax
 4119      7369676E 
 4119      2F4C
 4120 3026 488945A0 		movq	%rax, -96(%rbp)
 4121 302a 48B86162 		movabsq	$7594807519481913953, %rax
 4121      2F30332D 
 4121      6669
 4122 3034 488945A8 		movq	%rax, -88(%rbp)
 4123 3038 48B86E69 		movabsq	$8459851824041781614, %rax
 4123      7368696E 
 4123      6775
 4124 3042 488945B0 		movq	%rax, -80(%rbp)
 4125 3046 48B8702F 		movabsq	$7954882391399608176, %rax
 4125      6261636B 
 4125      656E
 4126 3050 488945B8 		movq	%rax, -72(%rbp)
 4127 3054 48B8642F 		movabsq	$7363230842532999012, %rax
 4127      61707073 
 4127      2F66
 4128 305e 488945C0 		movq	%rax, -64(%rbp)
 4129 3062 48B86C63 		movabsq	$7881672285972357996, %rax
 4129      6C692F53 
 4129      616D
 4130 306c 488945C8 		movq	%rax, -56(%rbp)
 4131 3070 48B8706C 		movabsq	$5002201080501988464, %rax
 4131      65426163 
 4131      6B45
 4132 307a 488945D0 		movq	%rax, -48(%rbp)
 4133 307e 48B86E64 		movabsq	$7017278321872626798, %rax
 4133      44617461 
 4133      6261
 4134 3088 488945D8 		movq	%rax, -40(%rbp)
 4135 308c C745E073 		movl	$1663985011, -32(%rbp)
 4135      652E63
 4136 3093 66C745E4 		movw	$30323, -28(%rbp)
 4136      7376
 4137 3099 C645E600 		movb	$0, -26(%rbp)
 954:main.c        **** 				fPtr = fopen(filename,"r+"); // change flag according to need
 4138              		.loc 1 954 0
 4139 309d 488D4580 		leaq	-128(%rbp), %rax
 4140 30a1 BE000000 		movl	$.LC138, %esi
 4140      00
 4141 30a6 4889C7   		movq	%rax, %rdi
 4142 30a9 E8000000 		call	fopen
 4142      00
 4143 30ae 48898590 		movq	%rax, -368(%rbp)
 4143      FEFFFF
 955:main.c        **** 				if(fPtr == NULL) {
 4144              		.loc 1 955 0
 4145 30b5 4883BD90 		cmpq	$0, -368(%rbp)
 4145      FEFFFF00 
 4146 30bd 7514     		jne	.L222
 956:main.c        **** 				   printf("Csv doesn't exist \n");
 4147              		.loc 1 956 0
 4148 30bf BF000000 		movl	$.LC139, %edi
 4148      00
 4149 30c4 E8000000 		call	puts
 4149      00
 957:main.c        **** 				   return 0;    
 4150              		.loc 1 957 0
 4151 30c9 B8000000 		movl	$0, %eax
 4151      00
 4152 30ce E9591300 		jmp	.L327
 4152      00
 4153              	.L222:
 958:main.c        **** 				}
 959:main.c        **** 			    size_t lineSize = 100;
 4154              		.loc 1 959 0
 4155 30d3 48C785C0 		movq	$100, -576(%rbp)
 4155      FDFFFF64 
 4155      000000
 960:main.c        **** 			    char * lineFromFile = malloc(lineSize * sizeof(char));
 4156              		.loc 1 960 0
 4157 30de 488B85C0 		movq	-576(%rbp), %rax
 4157      FDFFFF
 4158 30e5 4889C7   		movq	%rax, %rdi
 4159 30e8 E8000000 		call	malloc
 4159      00
 4160 30ed 488985C8 		movq	%rax, -568(%rbp)
 4160      FDFFFF
 961:main.c        **** 			   	
 962:main.c        **** 			    while ((getline(&lineFromFile, &lineSize, fPtr)) != -1) {
 4161              		.loc 1 962 0
 4162 30f4 EB28     		jmp	.L224
 4163              	.L226:
 963:main.c        **** 			        if(numLines != 0) format(lineFromFile);
 4164              		.loc 1 963 0
 4165 30f6 8B050000 		movl	numLines(%rip), %eax
 4165      0000
 4166 30fc 85C0     		testl	%eax, %eax
 4167 30fe 740F     		je	.L225
 4168              		.loc 1 963 0 is_stmt 0 discriminator 1
 4169 3100 488B85C8 		movq	-568(%rbp), %rax
 4169      FDFFFF
 4170 3107 4889C7   		movq	%rax, %rdi
 4171 310a E8000000 		call	format
 4171      00
 4172              	.L225:
 964:main.c        **** 			        numLines++;
 4173              		.loc 1 964 0 is_stmt 1
 4174 310f 8B050000 		movl	numLines(%rip), %eax
 4174      0000
 4175 3115 83C001   		addl	$1, %eax
 4176 3118 89050000 		movl	%eax, numLines(%rip)
 4176      0000
 4177              	.L224:
 962:main.c        **** 			        if(numLines != 0) format(lineFromFile);
 4178              		.loc 1 962 0 discriminator 1
 4179 311e 488B9590 		movq	-368(%rbp), %rdx
 4179      FEFFFF
 4180 3125 488D8DC0 		leaq	-576(%rbp), %rcx
 4180      FDFFFF
 4181 312c 488D85C8 		leaq	-568(%rbp), %rax
 4181      FDFFFF
 4182 3133 4889CE   		movq	%rcx, %rsi
 4183 3136 4889C7   		movq	%rax, %rdi
 4184 3139 E8000000 		call	getline
 4184      00
 4185 313e 4883F8FF 		cmpq	$-1, %rax
 4186 3142 75B2     		jne	.L226
 965:main.c        **** 			    }
 966:main.c        **** 			    numLines--;
 4187              		.loc 1 966 0
 4188 3144 8B050000 		movl	numLines(%rip), %eax
 4188      0000
 4189 314a 83E801   		subl	$1, %eax
 4190 314d 89050000 		movl	%eax, numLines(%rip)
 4190      0000
 967:main.c        **** 			    free(lineFromFile);
 4191              		.loc 1 967 0
 4192 3153 488B85C8 		movq	-568(%rbp), %rax
 4192      FDFFFF
 4193 315a 4889C7   		movq	%rax, %rdi
 4194 315d E8000000 		call	free
 4194      00
 968:main.c        **** 			    fclose(fPtr);
 4195              		.loc 1 968 0
 4196 3162 488B8590 		movq	-368(%rbp), %rax
 4196      FEFFFF
 4197 3169 4889C7   		movq	%rax, %rdi
 4198 316c E8000000 		call	fclose
 4198      00
 4199              	.L325:
 4200              	.LBB24:
 969:main.c        **** 				
 970:main.c        **** 				while(true) {
 971:main.c        **** 					uint32_t length = 1;
 4201              		.loc 1 971 0
 4202 3171 C78584FD 		movl	$1, -636(%rbp)
 4202      FFFF0100 
 4202      0000
 972:main.c        **** 					uint8_t *readFromChannelZero = malloc(sizeof(uint8_t));
 4203              		.loc 1 972 0
 4204 317b BF010000 		movl	$1, %edi
 4204      00
 4205 3180 E8000000 		call	malloc
 4205      00
 4206 3185 48898598 		movq	%rax, -360(%rbp)
 4206      FEFFFF
 973:main.c        **** 					
 974:main.c        **** 					fStatus = flReadChannel(handle,(uint8_t)0,length,readFromChannelZero,&error);
 4207              		.loc 1 974 0
 4208 318c 8B9584FD 		movl	-636(%rbp), %edx
 4208      FFFF
 4209 3192 488B85B0 		movq	-592(%rbp), %rax
 4209      FDFFFF
 4210 3199 488DB5B8 		leaq	-584(%rbp), %rsi
 4210      FDFFFF
 4211 31a0 488B8D98 		movq	-360(%rbp), %rcx
 4211      FEFFFF
 4212 31a7 4989F0   		movq	%rsi, %r8
 4213 31aa BE000000 		movl	$0, %esi
 4213      00
 4214 31af 4889C7   		movq	%rax, %rdi
 4215 31b2 E8000000 		call	flReadChannel
 4215      00
 4216 31b7 898544FD 		movl	%eax, -700(%rbp)
 4216      FFFF
 975:main.c        **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4217              		.loc 1 975 0
 4218 31bd 83BD44FD 		cmpl	$0, -700(%rbp)
 4218      FFFF00
 4219 31c4 740F     		je	.L227
 4220              		.loc 1 975 0 is_stmt 0 discriminator 1
 4221 31c6 C78540FD 		movl	$1, -704(%rbp)
 4221      FFFF0100 
 4221      0000
 4222 31d0 E99E1100 		jmp	.L228
 4222      00
 4223              	.L227:
 976:main.c        **** 					printf("data in channel 0 = %u \n", *readFromChannelZero);
 4224              		.loc 1 976 0 is_stmt 1
 4225 31d5 488B8598 		movq	-360(%rbp), %rax
 4225      FEFFFF
 4226 31dc 0FB600   		movzbl	(%rax), %eax
 4227 31df 0FB6C0   		movzbl	%al, %eax
 4228 31e2 89C6     		movl	%eax, %esi
 4229 31e4 BF000000 		movl	$.LC140, %edi
 4229      00
 4230 31e9 B8000000 		movl	$0, %eax
 4230      00
 4231 31ee E8000000 		call	printf
 4231      00
 977:main.c        **** 
 978:main.c        **** 					if( ((*readFromChannelZero) == 1) || ((*readFromChannelZero) == 2)) {
 4232              		.loc 1 978 0
 4233 31f3 488B8598 		movq	-360(%rbp), %rax
 4233      FEFFFF
 4234 31fa 0FB600   		movzbl	(%rax), %eax
 4235 31fd 3C01     		cmpb	$1, %al
 4236 31ff 7412     		je	.L229
 4237              		.loc 1 978 0 is_stmt 0 discriminator 1
 4238 3201 488B8598 		movq	-360(%rbp), %rax
 4238      FEFFFF
 4239 3208 0FB600   		movzbl	(%rax), %eax
 4240 320b 3C02     		cmpb	$2, %al
 4241 320d 0F855111 		jne	.L230
 4241      0000
 4242              	.L229:
 4243              	.LBB25:
 979:main.c        **** 						uint8_t cnt = 1,valRead = *readFromChannelZero;
 4244              		.loc 1 979 0 is_stmt 1
 4245 3213 C68512FD 		movb	$1, -750(%rbp)
 4245      FFFF01
 4246 321a 488B8598 		movq	-360(%rbp), %rax
 4246      FEFFFF
 4247 3221 0FB600   		movzbl	(%rax), %eax
 4248 3224 888523FD 		movb	%al, -733(%rbp)
 4248      FFFF
 980:main.c        **** 						bool cont = true;
 4249              		.loc 1 980 0
 4250 322a C68513FD 		movb	$1, -749(%rbp)
 4250      FFFF01
 981:main.c        **** 						while(cnt < 3) {
 4251              		.loc 1 981 0
 4252 3231 E99E0000 		jmp	.L231
 4252      00
 4253              	.L235:
 982:main.c        **** 
 983:main.c        **** 							flSleep(1000);
 4254              		.loc 1 983 0
 4255 3236 BFE80300 		movl	$1000, %edi
 4255      00
 4256 323b E8000000 		call	flSleep
 4256      00
 984:main.c        **** 							fStatus = flReadChannel(handle,0,length,readFromChannelZero,&error);
 4257              		.loc 1 984 0
 4258 3240 8B9584FD 		movl	-636(%rbp), %edx
 4258      FFFF
 4259 3246 488B85B0 		movq	-592(%rbp), %rax
 4259      FDFFFF
 4260 324d 488DB5B8 		leaq	-584(%rbp), %rsi
 4260      FDFFFF
 4261 3254 488B8D98 		movq	-360(%rbp), %rcx
 4261      FEFFFF
 4262 325b 4989F0   		movq	%rsi, %r8
 4263 325e BE000000 		movl	$0, %esi
 4263      00
 4264 3263 4889C7   		movq	%rax, %rdi
 4265 3266 E8000000 		call	flReadChannel
 4265      00
 4266 326b 898544FD 		movl	%eax, -700(%rbp)
 4266      FFFF
 985:main.c        **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4267              		.loc 1 985 0
 4268 3271 83BD44FD 		cmpl	$0, -700(%rbp)
 4268      FFFF00
 4269 3278 740F     		je	.L232
 4270              		.loc 1 985 0 is_stmt 0 discriminator 1
 4271 327a C78540FD 		movl	$1, -704(%rbp)
 4271      FFFF0100 
 4271      0000
 4272 3284 E9EA1000 		jmp	.L228
 4272      00
 4273              	.L232:
 986:main.c        **** 							printf("data in channel 0 = %u \n", *readFromChannelZero);
 4274              		.loc 1 986 0 is_stmt 1
 4275 3289 488B8598 		movq	-360(%rbp), %rax
 4275      FEFFFF
 4276 3290 0FB600   		movzbl	(%rax), %eax
 4277 3293 0FB6C0   		movzbl	%al, %eax
 4278 3296 89C6     		movl	%eax, %esi
 4279 3298 BF000000 		movl	$.LC140, %edi
 4279      00
 4280 329d B8000000 		movl	$0, %eax
 4280      00
 4281 32a2 E8000000 		call	printf
 4281      00
 987:main.c        **** 							
 988:main.c        **** 							if(*readFromChannelZero == valRead) cnt++;
 4282              		.loc 1 988 0
 4283 32a7 488B8598 		movq	-360(%rbp), %rax
 4283      FEFFFF
 4284 32ae 0FB600   		movzbl	(%rax), %eax
 4285 32b1 3A8523FD 		cmpb	-733(%rbp), %al
 4285      FFFF
 4286 32b7 7512     		jne	.L233
 4287              		.loc 1 988 0 is_stmt 0 discriminator 1
 4288 32b9 0FB68512 		movzbl	-750(%rbp), %eax
 4288      FDFFFF
 4289 32c0 83C001   		addl	$1, %eax
 4290 32c3 888512FD 		movb	%al, -750(%rbp)
 4290      FFFF
 4291 32c9 EB09     		jmp	.L231
 4292              	.L233:
 989:main.c        **** 							else {
 990:main.c        **** 								cont = false; break;
 4293              		.loc 1 990 0 is_stmt 1
 4294 32cb C68513FD 		movb	$0, -749(%rbp)
 4294      FFFF00
 4295 32d2 EB0D     		jmp	.L234
 4296              	.L231:
 981:main.c        **** 
 4297              		.loc 1 981 0 discriminator 1
 4298 32d4 80BD12FD 		cmpb	$2, -750(%rbp)
 4298      FFFF02
 4299 32db 0F8655FF 		jbe	.L235
 4299      FFFF
 4300              	.L234:
 991:main.c        **** 							}
 992:main.c        **** 						}
 993:main.c        **** 						if(cont) {
 4301              		.loc 1 993 0
 4302 32e1 80BD13FD 		cmpb	$0, -749(%rbp)
 4302      FFFF00
 4303 32e8 0F847610 		je	.L230
 4303      0000
 4304              	.LBB26:
 4305              	.LBB27:
 994:main.c        **** 							uint32_t inpFromFrontEnd[2];
 995:main.c        **** 							for(int i=0;i<2;i++) inpFromFrontEnd[i] = 0;
 4306              		.loc 1 995 0
 4307 32ee C78550FD 		movl	$0, -688(%rbp)
 4307      FFFF0000 
 4307      0000
 4308 32f8 EB1A     		jmp	.L236
 4309              	.L237:
 4310              		.loc 1 995 0 is_stmt 0 discriminator 2
 4311 32fa 8B8550FD 		movl	-688(%rbp), %eax
 4311      FFFF
 4312 3300 4898     		cltq
 4313 3302 C7848590 		movl	$0, -624(%rbp,%rax,4)
 4313      FDFFFF00 
 4313      000000
 4314 330d 838550FD 		addl	$1, -688(%rbp)
 4314      FFFF01
 4315              	.L236:
 4316              		.loc 1 995 0 discriminator 1
 4317 3314 83BD50FD 		cmpl	$1, -688(%rbp)
 4317      FFFF01
 4318 331b 7EDD     		jle	.L237
 4319              	.LBE27:
 4320              	.LBB28:
 996:main.c        **** 							for(uint32_t i=1;i <= 8;i++) {
 4321              		.loc 1 996 0 is_stmt 1
 4322 331d C78554FD 		movl	$1, -684(%rbp)
 4322      FFFF0100 
 4322      0000
 4323 3327 E9140100 		jmp	.L238
 4323      00
 4324              	.L243:
 4325              	.LBB29:
 997:main.c        **** 								uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 4326              		.loc 1 997 0
 4327 332c BF010000 		movl	$1, %edi
 4327      00
 4328 3331 E8000000 		call	malloc
 4328      00
 4329 3336 488985A0 		movq	%rax, -352(%rbp)
 4329      FEFFFF
 998:main.c        **** 
 999:main.c        **** 								flSleep(1000);
 4330              		.loc 1 999 0
 4331 333d BFE80300 		movl	$1000, %edi
 4331      00
 4332 3342 E8000000 		call	flSleep
 4332      00
1000:main.c        **** 								fStatus = flReadChannel(handle,(uint8_t)i,length,readFromChannel_i,&error);
 4333              		.loc 1 1000 0
 4334 3347 8B9584FD 		movl	-636(%rbp), %edx
 4334      FFFF
 4335 334d 8B8554FD 		movl	-684(%rbp), %eax
 4335      FFFF
 4336 3353 0FB6F0   		movzbl	%al, %esi
 4337 3356 488B85B0 		movq	-592(%rbp), %rax
 4337      FDFFFF
 4338 335d 488DBDB8 		leaq	-584(%rbp), %rdi
 4338      FDFFFF
 4339 3364 488B8DA0 		movq	-352(%rbp), %rcx
 4339      FEFFFF
 4340 336b 4989F8   		movq	%rdi, %r8
 4341 336e 4889C7   		movq	%rax, %rdi
 4342 3371 E8000000 		call	flReadChannel
 4342      00
 4343 3376 898544FD 		movl	%eax, -700(%rbp)
 4343      FFFF
1001:main.c        **** 								CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4344              		.loc 1 1001 0
 4345 337c 83BD44FD 		cmpl	$0, -700(%rbp)
 4345      FFFF00
 4346 3383 740F     		je	.L239
 4347              		.loc 1 1001 0 is_stmt 0 discriminator 1
 4348 3385 C78540FD 		movl	$1, -704(%rbp)
 4348      FFFF0100 
 4348      0000
 4349 338f E9CE0F00 		jmp	.L240
 4349      00
 4350              	.L239:
1002:main.c        **** 								printf("data in channel %u = %u \n", i ,*readFromChannel_i);
 4351              		.loc 1 1002 0 is_stmt 1
 4352 3394 488B85A0 		movq	-352(%rbp), %rax
 4352      FEFFFF
 4353 339b 0FB600   		movzbl	(%rax), %eax
 4354 339e 0FB6D0   		movzbl	%al, %edx
 4355 33a1 8B8554FD 		movl	-684(%rbp), %eax
 4355      FFFF
 4356 33a7 89C6     		movl	%eax, %esi
 4357 33a9 BF000000 		movl	$.LC141, %edi
 4357      00
 4358 33ae B8000000 		movl	$0, %eax
 4358      00
 4359 33b3 E8000000 		call	printf
 4359      00
1003:main.c        **** 								uint32_t temp1 = 8*(i-1),temp2 = 8*(i-5);
 4360              		.loc 1 1003 0
 4361 33b8 8B8554FD 		movl	-684(%rbp), %eax
 4361      FFFF
 4362 33be 05FFFFFF 		addl	$536870911, %eax
 4362      1F
 4363 33c3 C1E003   		sall	$3, %eax
 4364 33c6 898588FD 		movl	%eax, -632(%rbp)
 4364      FFFF
 4365 33cc 8B8554FD 		movl	-684(%rbp), %eax
 4365      FFFF
 4366 33d2 05FBFFFF 		addl	$536870907, %eax
 4366      1F
 4367 33d7 C1E003   		sall	$3, %eax
 4368 33da 89858CFD 		movl	%eax, -628(%rbp)
 4368      FFFF
1004:main.c        **** 								if(i <= 4) inpFromFrontEnd[0] += (*readFromChannel_i)*(1 << temp1);
 4369              		.loc 1 1004 0
 4370 33e0 83BD54FD 		cmpl	$4, -684(%rbp)
 4370      FFFF04
 4371 33e7 7729     		ja	.L241
 4372              		.loc 1 1004 0 is_stmt 0 discriminator 1
 4373 33e9 8B9590FD 		movl	-624(%rbp), %edx
 4373      FFFF
 4374 33ef 488B85A0 		movq	-352(%rbp), %rax
 4374      FEFFFF
 4375 33f6 0FB600   		movzbl	(%rax), %eax
 4376 33f9 0FB6F0   		movzbl	%al, %esi
 4377 33fc 8B8588FD 		movl	-632(%rbp), %eax
 4377      FFFF
 4378 3402 89C1     		movl	%eax, %ecx
 4379 3404 D3E6     		sall	%cl, %esi
 4380 3406 89F0     		movl	%esi, %eax
 4381 3408 01D0     		addl	%edx, %eax
 4382 340a 898590FD 		movl	%eax, -624(%rbp)
 4382      FFFF
 4383 3410 EB27     		jmp	.L242
 4384              	.L241:
1005:main.c        **** 								else inpFromFrontEnd[1] += (*readFromChannel_i)*(1 << temp2);
 4385              		.loc 1 1005 0 is_stmt 1
 4386 3412 8B9594FD 		movl	-620(%rbp), %edx
 4386      FFFF
 4387 3418 488B85A0 		movq	-352(%rbp), %rax
 4387      FEFFFF
 4388 341f 0FB600   		movzbl	(%rax), %eax
 4389 3422 0FB6F0   		movzbl	%al, %esi
 4390 3425 8B858CFD 		movl	-628(%rbp), %eax
 4390      FFFF
 4391 342b 89C1     		movl	%eax, %ecx
 4392 342d D3E6     		sall	%cl, %esi
 4393 342f 89F0     		movl	%esi, %eax
 4394 3431 01D0     		addl	%edx, %eax
 4395 3433 898594FD 		movl	%eax, -620(%rbp)
 4395      FFFF
 4396              	.L242:
 4397              	.LBE29:
 996:main.c        **** 								uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 4398              		.loc 1 996 0
 4399 3439 838554FD 		addl	$1, -684(%rbp)
 4399      FFFF01
 4400              	.L238:
 996:main.c        **** 								uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 4401              		.loc 1 996 0 is_stmt 0 discriminator 1
 4402 3440 83BD54FD 		cmpl	$8, -684(%rbp)
 4402      FFFF08
 4403 3447 0F86DFFE 		jbe	.L243
 4403      FFFF
 4404              	.LBE28:
1006:main.c        **** 							}
1007:main.c        **** 							decrypt64(inpFromFrontEnd);
 4405              		.loc 1 1007 0 is_stmt 1
 4406 344d 488D8590 		leaq	-624(%rbp), %rax
 4406      FDFFFF
 4407 3454 4889C7   		movq	%rax, %rdi
 4408 3457 E8000000 		call	decrypt64
 4408      00
1008:main.c        **** 							uint8_t num_100 = 0, num_500 = 0, num_1000 = 0,num_2000 = 0; 
 4409              		.loc 1 1008 0
 4410 345c C68514FD 		movb	$0, -748(%rbp)
 4410      FFFF00
 4411 3463 C68515FD 		movb	$0, -747(%rbp)
 4411      FFFF00
 4412 346a C68516FD 		movb	$0, -746(%rbp)
 4412      FFFF00
 4413 3471 C68517FD 		movb	$0, -745(%rbp)
 4413      FFFF00
1009:main.c        **** 							uint16_t userID = 0, unhashedPin = 0;
 4414              		.loc 1 1009 0
 4415 3478 66C78528 		movw	$0, -728(%rbp)
 4415      FDFFFF00 
 4415      00
 4416 3481 66C7852A 		movw	$0, -726(%rbp)
 4416      FDFFFF00 
 4416      00
 4417              	.LBB30:
1010:main.c        **** 							for(uint8_t i=1;i <= 32;i++) {
 4418              		.loc 1 1010 0
 4419 348a C68518FD 		movb	$1, -744(%rbp)
 4419      FFFF01
 4420 3491 E92F0100 		jmp	.L244
 4420      00
 4421              	.L252:
1011:main.c        **** 								if(i <= 8) {
 4422              		.loc 1 1011 0
 4423 3496 80BD18FD 		cmpb	$8, -744(%rbp)
 4423      FFFF08
 4424 349d 7745     		ja	.L245
1012:main.c        **** 									if((inpFromFrontEnd[0] & (1 << (i-1))) != 0)  num_100 += ((1 << (i-1)));
 4425              		.loc 1 1012 0
 4426 349f 8B9590FD 		movl	-624(%rbp), %edx
 4426      FFFF
 4427 34a5 0FB68518 		movzbl	-744(%rbp), %eax
 4427      FDFFFF
 4428 34ac 83E801   		subl	$1, %eax
 4429 34af BE010000 		movl	$1, %esi
 4429      00
 4430 34b4 89C1     		movl	%eax, %ecx
 4431 34b6 D3E6     		sall	%cl, %esi
 4432 34b8 89F0     		movl	%esi, %eax
 4433 34ba 21D0     		andl	%edx, %eax
 4434 34bc 85C0     		testl	%eax, %eax
 4435 34be 0F84F100 		je	.L247
 4435      0000
 4436              		.loc 1 1012 0 is_stmt 0 discriminator 1
 4437 34c4 0FB68518 		movzbl	-744(%rbp), %eax
 4437      FDFFFF
 4438 34cb 83E801   		subl	$1, %eax
 4439 34ce BA010000 		movl	$1, %edx
 4439      00
 4440 34d3 89C1     		movl	%eax, %ecx
 4441 34d5 D3E2     		sall	%cl, %edx
 4442 34d7 89D0     		movl	%edx, %eax
 4443 34d9 008514FD 		addb	%al, -748(%rbp)
 4443      FFFF
 4444 34df E9D10000 		jmp	.L247
 4444      00
 4445              	.L245:
1013:main.c        **** 								}	
1014:main.c        **** 								else if(i <= 16) {
 4446              		.loc 1 1014 0 is_stmt 1
 4447 34e4 80BD18FD 		cmpb	$16, -744(%rbp)
 4447      FFFF10
 4448 34eb 7745     		ja	.L248
1015:main.c        **** 									if((inpFromFrontEnd[0] & (1 << (i-1))) != 0)  num_500 += ((1 << (i-9)));
 4449              		.loc 1 1015 0
 4450 34ed 8B9590FD 		movl	-624(%rbp), %edx
 4450      FFFF
 4451 34f3 0FB68518 		movzbl	-744(%rbp), %eax
 4451      FDFFFF
 4452 34fa 83E801   		subl	$1, %eax
 4453 34fd BE010000 		movl	$1, %esi
 4453      00
 4454 3502 89C1     		movl	%eax, %ecx
 4455 3504 D3E6     		sall	%cl, %esi
 4456 3506 89F0     		movl	%esi, %eax
 4457 3508 21D0     		andl	%edx, %eax
 4458 350a 85C0     		testl	%eax, %eax
 4459 350c 0F84A300 		je	.L247
 4459      0000
 4460              		.loc 1 1015 0 is_stmt 0 discriminator 1
 4461 3512 0FB68518 		movzbl	-744(%rbp), %eax
 4461      FDFFFF
 4462 3519 83E809   		subl	$9, %eax
 4463 351c BA010000 		movl	$1, %edx
 4463      00
 4464 3521 89C1     		movl	%eax, %ecx
 4465 3523 D3E2     		sall	%cl, %edx
 4466 3525 89D0     		movl	%edx, %eax
 4467 3527 008515FD 		addb	%al, -747(%rbp)
 4467      FFFF
 4468 352d E9830000 		jmp	.L247
 4468      00
 4469              	.L248:
1016:main.c        **** 								}
1017:main.c        **** 								else if(i <= 24) {
 4470              		.loc 1 1017 0 is_stmt 1
 4471 3532 80BD18FD 		cmpb	$24, -744(%rbp)
 4471      FFFF18
 4472 3539 773E     		ja	.L250
1018:main.c        **** 									if((inpFromFrontEnd[0] & (1 << (i-1))) != 0)  num_1000 += ((1 << (i-17)));
 4473              		.loc 1 1018 0
 4474 353b 8B9590FD 		movl	-624(%rbp), %edx
 4474      FFFF
 4475 3541 0FB68518 		movzbl	-744(%rbp), %eax
 4475      FDFFFF
 4476 3548 83E801   		subl	$1, %eax
 4477 354b BE010000 		movl	$1, %esi
 4477      00
 4478 3550 89C1     		movl	%eax, %ecx
 4479 3552 D3E6     		sall	%cl, %esi
 4480 3554 89F0     		movl	%esi, %eax
 4481 3556 21D0     		andl	%edx, %eax
 4482 3558 85C0     		testl	%eax, %eax
 4483 355a 7459     		je	.L247
 4484              		.loc 1 1018 0 is_stmt 0 discriminator 1
 4485 355c 0FB68518 		movzbl	-744(%rbp), %eax
 4485      FDFFFF
 4486 3563 83E811   		subl	$17, %eax
 4487 3566 BA010000 		movl	$1, %edx
 4487      00
 4488 356b 89C1     		movl	%eax, %ecx
 4489 356d D3E2     		sall	%cl, %edx
 4490 356f 89D0     		movl	%edx, %eax
 4491 3571 008516FD 		addb	%al, -746(%rbp)
 4491      FFFF
 4492 3577 EB3C     		jmp	.L247
 4493              	.L250:
1019:main.c        **** 								}
1020:main.c        **** 								else {
1021:main.c        **** 									if((inpFromFrontEnd[0] & (1 << (i-1))) != 0)  num_2000 += ((1 << (i-25)));
 4494              		.loc 1 1021 0 is_stmt 1
 4495 3579 8B9590FD 		movl	-624(%rbp), %edx
 4495      FFFF
 4496 357f 0FB68518 		movzbl	-744(%rbp), %eax
 4496      FDFFFF
 4497 3586 83E801   		subl	$1, %eax
 4498 3589 BE010000 		movl	$1, %esi
 4498      00
 4499 358e 89C1     		movl	%eax, %ecx
 4500 3590 D3E6     		sall	%cl, %esi
 4501 3592 89F0     		movl	%esi, %eax
 4502 3594 21D0     		andl	%edx, %eax
 4503 3596 85C0     		testl	%eax, %eax
 4504 3598 741B     		je	.L247
 4505              		.loc 1 1021 0 is_stmt 0 discriminator 1
 4506 359a 0FB68518 		movzbl	-744(%rbp), %eax
 4506      FDFFFF
 4507 35a1 83E819   		subl	$25, %eax
 4508 35a4 BA010000 		movl	$1, %edx
 4508      00
 4509 35a9 89C1     		movl	%eax, %ecx
 4510 35ab D3E2     		sall	%cl, %edx
 4511 35ad 89D0     		movl	%edx, %eax
 4512 35af 008517FD 		addb	%al, -745(%rbp)
 4512      FFFF
 4513              	.L247:
1010:main.c        **** 								if(i <= 8) {
 4514              		.loc 1 1010 0 is_stmt 1
 4515 35b5 0FB68518 		movzbl	-744(%rbp), %eax
 4515      FDFFFF
 4516 35bc 83C001   		addl	$1, %eax
 4517 35bf 888518FD 		movb	%al, -744(%rbp)
 4517      FFFF
 4518              	.L244:
1010:main.c        **** 								if(i <= 8) {
 4519              		.loc 1 1010 0 is_stmt 0 discriminator 1
 4520 35c5 80BD18FD 		cmpb	$32, -744(%rbp)
 4520      FFFF20
 4521 35cc 0F86C4FE 		jbe	.L252
 4521      FFFF
 4522              	.LBE30:
 4523              	.LBB31:
1022:main.c        **** 								}
1023:main.c        **** 							}
1024:main.c        **** 							for(uint16_t i=1;i <= 32;i++) {
 4524              		.loc 1 1024 0 is_stmt 1
 4525 35d2 66C7852C 		movw	$1, -724(%rbp)
 4525      FDFFFF01 
 4525      00
 4526 35db E9970000 		jmp	.L253
 4526      00
 4527              	.L257:
1025:main.c        **** 								if(i <= 16) {
 4528              		.loc 1 1025 0
 4529 35e0 6683BD2C 		cmpw	$16, -724(%rbp)
 4529      FDFFFF10 
 4530 35e8 773F     		ja	.L254
1026:main.c        **** 									if((inpFromFrontEnd[1] & (1 << (i-1))) != 0) unhashedPin += ((1 << (i-1)));
 4531              		.loc 1 1026 0
 4532 35ea 8B9594FD 		movl	-620(%rbp), %edx
 4532      FFFF
 4533 35f0 0FB7852C 		movzwl	-724(%rbp), %eax
 4533      FDFFFF
 4534 35f7 83E801   		subl	$1, %eax
 4535 35fa BE010000 		movl	$1, %esi
 4535      00
 4536 35ff 89C1     		movl	%eax, %ecx
 4537 3601 D3E6     		sall	%cl, %esi
 4538 3603 89F0     		movl	%esi, %eax
 4539 3605 21D0     		andl	%edx, %eax
 4540 3607 85C0     		testl	%eax, %eax
 4541 3609 745B     		je	.L256
 4542              		.loc 1 1026 0 is_stmt 0 discriminator 1
 4543 360b 0FB7852C 		movzwl	-724(%rbp), %eax
 4543      FDFFFF
 4544 3612 83E801   		subl	$1, %eax
 4545 3615 BA010000 		movl	$1, %edx
 4545      00
 4546 361a 89C1     		movl	%eax, %ecx
 4547 361c D3E2     		sall	%cl, %edx
 4548 361e 89D0     		movl	%edx, %eax
 4549 3620 6601852A 		addw	%ax, -726(%rbp)
 4549      FDFFFF
 4550 3627 EB3D     		jmp	.L256
 4551              	.L254:
1027:main.c        **** 								}	
1028:main.c        **** 								else {
1029:main.c        **** 									if((inpFromFrontEnd[1] & (1 << (i-1))) != 0) userID += ((1 << (i-17)));
 4552              		.loc 1 1029 0 is_stmt 1
 4553 3629 8B9594FD 		movl	-620(%rbp), %edx
 4553      FFFF
 4554 362f 0FB7852C 		movzwl	-724(%rbp), %eax
 4554      FDFFFF
 4555 3636 83E801   		subl	$1, %eax
 4556 3639 BE010000 		movl	$1, %esi
 4556      00
 4557 363e 89C1     		movl	%eax, %ecx
 4558 3640 D3E6     		sall	%cl, %esi
 4559 3642 89F0     		movl	%esi, %eax
 4560 3644 21D0     		andl	%edx, %eax
 4561 3646 85C0     		testl	%eax, %eax
 4562 3648 741C     		je	.L256
 4563              		.loc 1 1029 0 is_stmt 0 discriminator 1
 4564 364a 0FB7852C 		movzwl	-724(%rbp), %eax
 4564      FDFFFF
 4565 3651 83E811   		subl	$17, %eax
 4566 3654 BA010000 		movl	$1, %edx
 4566      00
 4567 3659 89C1     		movl	%eax, %ecx
 4568 365b D3E2     		sall	%cl, %edx
 4569 365d 89D0     		movl	%edx, %eax
 4570 365f 66018528 		addw	%ax, -728(%rbp)
 4570      FDFFFF
 4571              	.L256:
1024:main.c        **** 								if(i <= 16) {
 4572              		.loc 1 1024 0 is_stmt 1
 4573 3666 0FB7852C 		movzwl	-724(%rbp), %eax
 4573      FDFFFF
 4574 366d 83C001   		addl	$1, %eax
 4575 3670 6689852C 		movw	%ax, -724(%rbp)
 4575      FDFFFF
 4576              	.L253:
1024:main.c        **** 								if(i <= 16) {
 4577              		.loc 1 1024 0 is_stmt 0 discriminator 1
 4578 3677 6683BD2C 		cmpw	$32, -724(%rbp)
 4578      FDFFFF20 
 4579 367f 0F865BFF 		jbe	.L257
 4579      FFFF
 4580              	.LBE31:
1030:main.c        **** 								}
1031:main.c        **** 							}
1032:main.c        **** 							printf("unhashedPin %u\n",unhashedPin);
 4581              		.loc 1 1032 0 is_stmt 1
 4582 3685 0FB7852A 		movzwl	-726(%rbp), %eax
 4582      FDFFFF
 4583 368c 89C6     		movl	%eax, %esi
 4584 368e BF000000 		movl	$.LC142, %edi
 4584      00
 4585 3693 B8000000 		movl	$0, %eax
 4585      00
 4586 3698 E8000000 		call	printf
 4586      00
1033:main.c        **** 							printf("userID %u\n",userID);
 4587              		.loc 1 1033 0
 4588 369d 0FB78528 		movzwl	-728(%rbp), %eax
 4588      FDFFFF
 4589 36a4 89C6     		movl	%eax, %esi
 4590 36a6 BF000000 		movl	$.LC143, %edi
 4590      00
 4591 36ab B8000000 		movl	$0, %eax
 4591      00
 4592 36b0 E8000000 		call	printf
 4592      00
1034:main.c        **** 							// unhashedPin = 51173; userID = 29;
1035:main.c        **** 							uint16_t hashedPin = myHash(unhashedPin);
 4593              		.loc 1 1035 0
 4594 36b5 0FB7852A 		movzwl	-726(%rbp), %eax
 4594      FDFFFF
 4595 36bc 89C7     		movl	%eax, %edi
 4596 36be E8000000 		call	myHash
 4596      00
 4597 36c3 6689852E 		movw	%ax, -722(%rbp)
 4597      FDFFFF
1036:main.c        **** 							// hashedPin = 8828; userID = 12838;
1037:main.c        **** 							printf("hashedPin %u\n",hashedPin);
 4598              		.loc 1 1037 0
 4599 36ca 0FB7852E 		movzwl	-722(%rbp), %eax
 4599      FDFFFF
 4600 36d1 89C6     		movl	%eax, %esi
 4601 36d3 BF000000 		movl	$.LC144, %edi
 4601      00
 4602 36d8 B8000000 		movl	$0, %eax
 4602      00
 4603 36dd E8000000 		call	printf
 4603      00
1038:main.c        **** 							printf("num_2000 %u\n",num_2000);
 4604              		.loc 1 1038 0
 4605 36e2 0FB68517 		movzbl	-745(%rbp), %eax
 4605      FDFFFF
 4606 36e9 89C6     		movl	%eax, %esi
 4607 36eb BF000000 		movl	$.LC145, %edi
 4607      00
 4608 36f0 B8000000 		movl	$0, %eax
 4608      00
 4609 36f5 E8000000 		call	printf
 4609      00
1039:main.c        **** 							printf("num_1000 %u\n",num_1000);
 4610              		.loc 1 1039 0
 4611 36fa 0FB68516 		movzbl	-746(%rbp), %eax
 4611      FDFFFF
 4612 3701 89C6     		movl	%eax, %esi
 4613 3703 BF000000 		movl	$.LC146, %edi
 4613      00
 4614 3708 B8000000 		movl	$0, %eax
 4614      00
 4615 370d E8000000 		call	printf
 4615      00
1040:main.c        **** 							printf("num_500 %u\n",num_500);
 4616              		.loc 1 1040 0
 4617 3712 0FB68515 		movzbl	-747(%rbp), %eax
 4617      FDFFFF
 4618 3719 89C6     		movl	%eax, %esi
 4619 371b BF000000 		movl	$.LC147, %edi
 4619      00
 4620 3720 B8000000 		movl	$0, %eax
 4620      00
 4621 3725 E8000000 		call	printf
 4621      00
1041:main.c        **** 							printf("num_100 %u\n",num_100);
 4622              		.loc 1 1041 0
 4623 372a 0FB68514 		movzbl	-748(%rbp), %eax
 4623      FDFFFF
 4624 3731 89C6     		movl	%eax, %esi
 4625 3733 BF000000 		movl	$.LC148, %edi
 4625      00
 4626 3738 B8000000 		movl	$0, %eax
 4626      00
 4627 373d E8000000 		call	printf
 4627      00
1042:main.c        **** 
1043:main.c        **** 							int bal = -1; bool isAdmin = false; int inLineNum = -1;
 4628              		.loc 1 1043 0
 4629 3742 C78534FD 		movl	$-1, -716(%rbp)
 4629      FFFFFFFF 
 4629      FFFF
 4630 374c C6850FFD 		movb	$0, -753(%rbp)
 4630      FFFF00
 4631 3753 C78538FD 		movl	$-1, -712(%rbp)
 4631      FFFFFFFF 
 4631      FFFF
1044:main.c        **** 							uint8_t * statusOnChan9 = malloc(sizeof(uint8_t));
 4632              		.loc 1 1044 0
 4633 375d BF010000 		movl	$1, %edi
 4633      00
 4634 3762 E8000000 		call	malloc
 4634      00
 4635 3767 488985A8 		movq	%rax, -344(%rbp)
 4635      FEFFFF
1045:main.c        **** 							if(find(userID,hashedPin,&isAdmin,&bal,&inLineNum)) {
 4636              		.loc 1 1045 0
 4637 376e 0FB7B52E 		movzwl	-722(%rbp), %esi
 4637      FDFFFF
 4638 3775 0FB78528 		movzwl	-728(%rbp), %eax
 4638      FDFFFF
 4639 377c 488DBD38 		leaq	-712(%rbp), %rdi
 4639      FDFFFF
 4640 3783 488D8D34 		leaq	-716(%rbp), %rcx
 4640      FDFFFF
 4641 378a 488D950F 		leaq	-753(%rbp), %rdx
 4641      FDFFFF
 4642 3791 4989F8   		movq	%rdi, %r8
 4643 3794 89C7     		movl	%eax, %edi
 4644 3796 E8000000 		call	find
 4644      00
 4645 379b 84C0     		testb	%al, %al
 4646 379d 0F84E20A 		je	.L258
 4646      0000
1046:main.c        **** 								printf("Valid user found \n");
 4647              		.loc 1 1046 0
 4648 37a3 BF000000 		movl	$.LC149, %edi
 4648      00
 4649 37a8 E8000000 		call	puts
 4649      00
1047:main.c        **** 								if(!isAdmin) {
 4650              		.loc 1 1047 0
 4651 37ad 0FB6850F 		movzbl	-753(%rbp), %eax
 4651      FDFFFF
 4652 37b4 83F001   		xorl	$1, %eax
 4653 37b7 84C0     		testb	%al, %al
 4654 37b9 0F844407 		je	.L259
 4654      0000
 4655              	.LBB32:
1048:main.c        **** 									int reqAmo = 0;
 4656              		.loc 1 1048 0
 4657 37bf C7853CFD 		movl	$0, -708(%rbp)
 4657      FFFF0000 
 4657      0000
1049:main.c        **** 									if(suffBal(bal,&reqAmo,num_100,num_500,num_1000,num_2000)) {
 4658              		.loc 1 1049 0
 4659 37c9 440FB685 		movzbl	-745(%rbp), %r8d
 4659      17FDFFFF 
 4660 37d1 0FB6BD16 		movzbl	-746(%rbp), %edi
 4660      FDFFFF
 4661 37d8 0FB68D15 		movzbl	-747(%rbp), %ecx
 4661      FDFFFF
 4662 37df 0FB69514 		movzbl	-748(%rbp), %edx
 4662      FDFFFF
 4663 37e6 8B8534FD 		movl	-716(%rbp), %eax
 4663      FFFF
 4664 37ec 488DB53C 		leaq	-708(%rbp), %rsi
 4664      FDFFFF
 4665 37f3 4589C1   		movl	%r8d, %r9d
 4666 37f6 4189F8   		movl	%edi, %r8d
 4667 37f9 89C7     		movl	%eax, %edi
 4668 37fb E8000000 		call	suffBal
 4668      00
 4669 3800 84C0     		testb	%al, %al
 4670 3802 0F84E505 		je	.L260
 4670      0000
 4671              	.LBB33:
1050:main.c        **** 										printf("bal %u\n",bal);
 4672              		.loc 1 1050 0
 4673 3808 8B8534FD 		movl	-716(%rbp), %eax
 4673      FFFF
 4674 380e 89C6     		movl	%eax, %esi
 4675 3810 BF000000 		movl	$.LC150, %edi
 4675      00
 4676 3815 B8000000 		movl	$0, %eax
 4676      00
 4677 381a E8000000 		call	printf
 4677      00
1051:main.c        **** 										printf("req %u\n",reqAmo);
 4678              		.loc 1 1051 0
 4679 381f 8B853CFD 		movl	-708(%rbp), %eax
 4679      FFFF
 4680 3825 89C6     		movl	%eax, %esi
 4681 3827 BF000000 		movl	$.LC151, %edi
 4681      00
 4682 382c B8000000 		movl	$0, %eax
 4682      00
 4683 3831 E8000000 		call	printf
 4683      00
1052:main.c        **** 										printf("Suff Balance \n");
 4684              		.loc 1 1052 0
 4685 3836 BF000000 		movl	$.LC152, %edi
 4685      00
 4686 383b E8000000 		call	puts
 4686      00
1053:main.c        **** 										* statusOnChan9 = 1;
 4687              		.loc 1 1053 0
 4688 3840 488B85A8 		movq	-344(%rbp), %rax
 4688      FEFFFF
 4689 3847 C60001   		movb	$1, (%rax)
1054:main.c        **** 										flSleep(1000);
 4690              		.loc 1 1054 0
 4691 384a BFE80300 		movl	$1000, %edi
 4691      00
 4692 384f E8000000 		call	flSleep
 4692      00
1055:main.c        **** 										printf("data to channel %u = %u \n", 9 ,*statusOnChan9);
 4693              		.loc 1 1055 0
 4694 3854 488B85A8 		movq	-344(%rbp), %rax
 4694      FEFFFF
 4695 385b 0FB600   		movzbl	(%rax), %eax
 4696 385e 0FB6C0   		movzbl	%al, %eax
 4697 3861 89C2     		movl	%eax, %edx
 4698 3863 BE090000 		movl	$9, %esi
 4698      00
 4699 3868 BF000000 		movl	$.LC153, %edi
 4699      00
 4700 386d B8000000 		movl	$0, %eax
 4700      00
 4701 3872 E8000000 		call	printf
 4701      00
1056:main.c        **** 										fStatus = flWriteChannel(handle,(uint8_t)9,length,statusOnChan9,&error);
 4702              		.loc 1 1056 0
 4703 3877 8B9584FD 		movl	-636(%rbp), %edx
 4703      FFFF
 4704 387d 488B85B0 		movq	-592(%rbp), %rax
 4704      FDFFFF
 4705 3884 488DB5B8 		leaq	-584(%rbp), %rsi
 4705      FDFFFF
 4706 388b 488B8DA8 		movq	-344(%rbp), %rcx
 4706      FEFFFF
 4707 3892 4989F0   		movq	%rsi, %r8
 4708 3895 BE090000 		movl	$9, %esi
 4708      00
 4709 389a 4889C7   		movq	%rax, %rdi
 4710 389d E8000000 		call	flWriteChannel
 4710      00
 4711 38a2 898544FD 		movl	%eax, -700(%rbp)
 4711      FFFF
1057:main.c        **** 										CHECK_STATUS(fStatus, FLP_LIBERR,cleanup);
 4712              		.loc 1 1057 0
 4713 38a8 83BD44FD 		cmpl	$0, -700(%rbp)
 4713      FFFF00
 4714 38af 740F     		je	.L261
 4715              		.loc 1 1057 0 is_stmt 0 discriminator 1
 4716 38b1 C78540FD 		movl	$1, -704(%rbp)
 4716      FFFF0100 
 4716      0000
 4717 38bb E93E0600 		jmp	.L292
 4717      00
 4718              	.L261:
1058:main.c        **** 										flSleep(1000);
 4719              		.loc 1 1058 0 is_stmt 1
 4720 38c0 BFE80300 		movl	$1000, %edi
 4720      00
 4721 38c5 E8000000 		call	flSleep
 4721      00
 4722              	.LBB34:
1059:main.c        **** 										uint32_t befEncSen[2];
1060:main.c        **** 										for(int i=0;i<2;i++) befEncSen[i] = 0;
 4723              		.loc 1 1060 0
 4724 38ca C78558FD 		movl	$0, -680(%rbp)
 4724      FFFF0000 
 4724      0000
 4725 38d4 EB1A     		jmp	.L263
 4726              	.L264:
 4727              		.loc 1 1060 0 is_stmt 0 discriminator 2
 4728 38d6 8B8558FD 		movl	-680(%rbp), %eax
 4728      FFFF
 4729 38dc 4898     		cltq
 4730 38de C78485A0 		movl	$0, -608(%rbp,%rax,4)
 4730      FDFFFF00 
 4730      000000
 4731 38e9 838558FD 		addl	$1, -680(%rbp)
 4731      FFFF01
 4732              	.L263:
 4733              		.loc 1 1060 0 discriminator 1
 4734 38f0 83BD58FD 		cmpl	$1, -680(%rbp)
 4734      FFFF01
 4735 38f7 7EDD     		jle	.L264
 4736              	.LBE34:
 4737              	.LBB35:
1061:main.c        **** 										for(uint32_t i=0;i <= 31;i += 8) {
 4738              		.loc 1 1061 0 is_stmt 1
 4739 38f9 C7855CFD 		movl	$0, -676(%rbp)
 4739      FFFF0000 
 4739      0000
 4740 3903 E9AC0000 		jmp	.L265
 4740      00
 4741              	.L270:
1062:main.c        **** 											if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 4742              		.loc 1 1062 0
 4743 3908 83BD5CFD 		cmpl	$0, -676(%rbp)
 4743      FFFF00
 4744 390f 7523     		jne	.L266
 4745              		.loc 1 1062 0 is_stmt 0 discriminator 1
 4746 3911 8B95A0FD 		movl	-608(%rbp), %edx
 4746      FFFF
 4747 3917 0FB6B514 		movzbl	-748(%rbp), %esi
 4747      FDFFFF
 4748 391e 8B855CFD 		movl	-676(%rbp), %eax
 4748      FFFF
 4749 3924 89C1     		movl	%eax, %ecx
 4750 3926 D3E6     		sall	%cl, %esi
 4751 3928 89F0     		movl	%esi, %eax
 4752 392a 01D0     		addl	%edx, %eax
 4753 392c 8985A0FD 		movl	%eax, -608(%rbp)
 4753      FFFF
 4754 3932 EB79     		jmp	.L267
 4755              	.L266:
1063:main.c        **** 											else if(i == 8) befEncSen[0] += ((1 << i)*((uint32_t)num_500));
 4756              		.loc 1 1063 0 is_stmt 1
 4757 3934 83BD5CFD 		cmpl	$8, -676(%rbp)
 4757      FFFF08
 4758 393b 7523     		jne	.L268
 4759              		.loc 1 1063 0 is_stmt 0 discriminator 1
 4760 393d 8B95A0FD 		movl	-608(%rbp), %edx
 4760      FFFF
 4761 3943 0FB6B515 		movzbl	-747(%rbp), %esi
 4761      FDFFFF
 4762 394a 8B855CFD 		movl	-676(%rbp), %eax
 4762      FFFF
 4763 3950 89C1     		movl	%eax, %ecx
 4764 3952 D3E6     		sall	%cl, %esi
 4765 3954 89F0     		movl	%esi, %eax
 4766 3956 01D0     		addl	%edx, %eax
 4767 3958 8985A0FD 		movl	%eax, -608(%rbp)
 4767      FFFF
 4768 395e EB4D     		jmp	.L267
 4769              	.L268:
1064:main.c        **** 											else if(i == 16) befEncSen[0] += ((1 << i)*((uint32_t)num_1000));
 4770              		.loc 1 1064 0 is_stmt 1
 4771 3960 83BD5CFD 		cmpl	$16, -676(%rbp)
 4771      FFFF10
 4772 3967 7523     		jne	.L269
 4773              		.loc 1 1064 0 is_stmt 0 discriminator 1
 4774 3969 8B95A0FD 		movl	-608(%rbp), %edx
 4774      FFFF
 4775 396f 0FB6B516 		movzbl	-746(%rbp), %esi
 4775      FDFFFF
 4776 3976 8B855CFD 		movl	-676(%rbp), %eax
 4776      FFFF
 4777 397c 89C1     		movl	%eax, %ecx
 4778 397e D3E6     		sall	%cl, %esi
 4779 3980 89F0     		movl	%esi, %eax
 4780 3982 01D0     		addl	%edx, %eax
 4781 3984 8985A0FD 		movl	%eax, -608(%rbp)
 4781      FFFF
 4782 398a EB21     		jmp	.L267
 4783              	.L269:
1065:main.c        **** 											else befEncSen[0] += ((1 << i)*((uint32_t)num_2000));
 4784              		.loc 1 1065 0 is_stmt 1
 4785 398c 8B95A0FD 		movl	-608(%rbp), %edx
 4785      FFFF
 4786 3992 0FB6B517 		movzbl	-745(%rbp), %esi
 4786      FDFFFF
 4787 3999 8B855CFD 		movl	-676(%rbp), %eax
 4787      FFFF
 4788 399f 89C1     		movl	%eax, %ecx
 4789 39a1 D3E6     		sall	%cl, %esi
 4790 39a3 89F0     		movl	%esi, %eax
 4791 39a5 01D0     		addl	%edx, %eax
 4792 39a7 8985A0FD 		movl	%eax, -608(%rbp)
 4792      FFFF
 4793              	.L267:
1061:main.c        **** 											if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 4794              		.loc 1 1061 0
 4795 39ad 83855CFD 		addl	$8, -676(%rbp)
 4795      FFFF08
 4796              	.L265:
1061:main.c        **** 											if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 4797              		.loc 1 1061 0 is_stmt 0 discriminator 1
 4798 39b4 83BD5CFD 		cmpl	$31, -676(%rbp)
 4798      FFFF1F
 4799 39bb 0F8647FF 		jbe	.L270
 4799      FFFF
 4800              	.LBE35:
1066:main.c        **** 										}
1067:main.c        **** 										printf("bef Enc1 %u\n",befEncSen[1]);
 4801              		.loc 1 1067 0 is_stmt 1
 4802 39c1 8B85A4FD 		movl	-604(%rbp), %eax
 4802      FFFF
 4803 39c7 89C6     		movl	%eax, %esi
 4804 39c9 BF000000 		movl	$.LC154, %edi
 4804      00
 4805 39ce B8000000 		movl	$0, %eax
 4805      00
 4806 39d3 E8000000 		call	printf
 4806      00
1068:main.c        **** 										printf("bef Enc0 %u\n",befEncSen[0]);
 4807              		.loc 1 1068 0
 4808 39d8 8B85A0FD 		movl	-608(%rbp), %eax
 4808      FFFF
 4809 39de 89C6     		movl	%eax, %esi
 4810 39e0 BF000000 		movl	$.LC155, %edi
 4810      00
 4811 39e5 B8000000 		movl	$0, %eax
 4811      00
 4812 39ea E8000000 		call	printf
 4812      00
1069:main.c        **** 										encrypt64(befEncSen);
 4813              		.loc 1 1069 0
 4814 39ef 488D85A0 		leaq	-608(%rbp), %rax
 4814      FDFFFF
 4815 39f6 4889C7   		movq	%rax, %rdi
 4816 39f9 E8000000 		call	encrypt64
 4816      00
1070:main.c        **** 										printf("af Enc1 %u\n",befEncSen[1]);
 4817              		.loc 1 1070 0
 4818 39fe 8B85A4FD 		movl	-604(%rbp), %eax
 4818      FFFF
 4819 3a04 89C6     		movl	%eax, %esi
 4820 3a06 BF000000 		movl	$.LC156, %edi
 4820      00
 4821 3a0b B8000000 		movl	$0, %eax
 4821      00
 4822 3a10 E8000000 		call	printf
 4822      00
1071:main.c        **** 										printf("af Enc0 %u\n",befEncSen[0]);
 4823              		.loc 1 1071 0
 4824 3a15 8B85A0FD 		movl	-608(%rbp), %eax
 4824      FFFF
 4825 3a1b 89C6     		movl	%eax, %esi
 4826 3a1d BF000000 		movl	$.LC157, %edi
 4826      00
 4827 3a22 B8000000 		movl	$0, %eax
 4827      00
 4828 3a27 E8000000 		call	printf
 4828      00
 4829              	.LBB36:
1072:main.c        **** 										for(uint8_t i=10;i <= 13;i++) {
 4830              		.loc 1 1072 0
 4831 3a2c C68519FD 		movb	$10, -743(%rbp)
 4831      FFFF0A
 4832 3a33 E9110100 		jmp	.L271
 4832      00
 4833              	.L276:
 4834              	.LBB37:
1073:main.c        **** 											uint8_t tempSto = 0;
 4835              		.loc 1 1073 0
 4836 3a38 C68510FD 		movb	$0, -752(%rbp)
 4836      FFFF00
 4837              	.LBB38:
1074:main.c        **** 											for(uint8_t j=0;j <= 7;j++) {
 4838              		.loc 1 1074 0
 4839 3a3f C6851AFD 		movb	$0, -742(%rbp)
 4839      FFFF00
 4840 3a46 EB71     		jmp	.L272
 4841              	.L274:
 4842              	.LBB39:
1075:main.c        **** 												uint8_t temp = j + (i-10)*8;
 4843              		.loc 1 1075 0
 4844 3a48 0FB68519 		movzbl	-743(%rbp), %eax
 4844      FDFFFF
 4845 3a4f 83E80A   		subl	$10, %eax
 4846 3a52 8D14C500 		leal	0(,%rax,8), %edx
 4846      000000
 4847 3a59 0FB6851A 		movzbl	-742(%rbp), %eax
 4847      FDFFFF
 4848 3a60 01D0     		addl	%edx, %eax
 4849 3a62 888524FD 		movb	%al, -732(%rbp)
 4849      FFFF
1076:main.c        **** 												if( (befEncSen[0] & (1 << temp)) != 0) {
 4850              		.loc 1 1076 0
 4851 3a68 8B95A0FD 		movl	-608(%rbp), %edx
 4851      FFFF
 4852 3a6e 0FB68524 		movzbl	-732(%rbp), %eax
 4852      FDFFFF
 4853 3a75 BE010000 		movl	$1, %esi
 4853      00
 4854 3a7a 89C1     		movl	%eax, %ecx
 4855 3a7c D3E6     		sall	%cl, %esi
 4856 3a7e 89F0     		movl	%esi, %eax
 4857 3a80 21D0     		andl	%edx, %eax
 4858 3a82 85C0     		testl	%eax, %eax
 4859 3a84 7423     		je	.L273
1077:main.c        **** 													tempSto += (1 << j);
 4860              		.loc 1 1077 0
 4861 3a86 0FB6851A 		movzbl	-742(%rbp), %eax
 4861      FDFFFF
 4862 3a8d BA010000 		movl	$1, %edx
 4862      00
 4863 3a92 89C1     		movl	%eax, %ecx
 4864 3a94 D3E2     		sall	%cl, %edx
 4865 3a96 89D0     		movl	%edx, %eax
 4866 3a98 89C2     		movl	%eax, %edx
 4867 3a9a 0FB68510 		movzbl	-752(%rbp), %eax
 4867      FDFFFF
 4868 3aa1 01D0     		addl	%edx, %eax
 4869 3aa3 888510FD 		movb	%al, -752(%rbp)
 4869      FFFF
 4870              	.L273:
 4871              	.LBE39:
1074:main.c        **** 												uint8_t temp = j + (i-10)*8;
 4872              		.loc 1 1074 0
 4873 3aa9 0FB6851A 		movzbl	-742(%rbp), %eax
 4873      FDFFFF
 4874 3ab0 83C001   		addl	$1, %eax
 4875 3ab3 88851AFD 		movb	%al, -742(%rbp)
 4875      FFFF
 4876              	.L272:
1074:main.c        **** 												uint8_t temp = j + (i-10)*8;
 4877              		.loc 1 1074 0 is_stmt 0 discriminator 1
 4878 3ab9 80BD1AFD 		cmpb	$7, -742(%rbp)
 4878      FFFF07
 4879 3ac0 7686     		jbe	.L274
 4880              	.LBE38:
1078:main.c        **** 												}
1079:main.c        **** 											}
1080:main.c        **** 											flSleep(1000);
 4881              		.loc 1 1080 0 is_stmt 1
 4882 3ac2 BFE80300 		movl	$1000, %edi
 4882      00
 4883 3ac7 E8000000 		call	flSleep
 4883      00
1081:main.c        **** 											fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 4884              		.loc 1 1081 0
 4885 3acc 8B9584FD 		movl	-636(%rbp), %edx
 4885      FFFF
 4886 3ad2 0FB6B519 		movzbl	-743(%rbp), %esi
 4886      FDFFFF
 4887 3ad9 488B85B0 		movq	-592(%rbp), %rax
 4887      FDFFFF
 4888 3ae0 488DBDB8 		leaq	-584(%rbp), %rdi
 4888      FDFFFF
 4889 3ae7 488D8D10 		leaq	-752(%rbp), %rcx
 4889      FDFFFF
 4890 3aee 4989F8   		movq	%rdi, %r8
 4891 3af1 4889C7   		movq	%rax, %rdi
 4892 3af4 E8000000 		call	flWriteChannel
 4892      00
 4893 3af9 898544FD 		movl	%eax, -700(%rbp)
 4893      FFFF
1082:main.c        **** 											printf("data to channel %u = %u \n", i ,tempSto);
 4894              		.loc 1 1082 0
 4895 3aff 0FB68510 		movzbl	-752(%rbp), %eax
 4895      FDFFFF
 4896 3b06 0FB6D0   		movzbl	%al, %edx
 4897 3b09 0FB68519 		movzbl	-743(%rbp), %eax
 4897      FDFFFF
 4898 3b10 89C6     		movl	%eax, %esi
 4899 3b12 BF000000 		movl	$.LC153, %edi
 4899      00
 4900 3b17 B8000000 		movl	$0, %eax
 4900      00
 4901 3b1c E8000000 		call	printf
 4901      00
1083:main.c        **** 											CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4902              		.loc 1 1083 0
 4903 3b21 83BD44FD 		cmpl	$0, -700(%rbp)
 4903      FFFF00
 4904 3b28 740F     		je	.L275
 4905              		.loc 1 1083 0 is_stmt 0 discriminator 1
 4906 3b2a C78540FD 		movl	$1, -704(%rbp)
 4906      FFFF0100 
 4906      0000
 4907              	.LBE37:
 4908              	.LBE36:
1057:main.c        **** 										flSleep(1000);
 4909              		.loc 1 1057 0 is_stmt 1 discriminator 1
 4910 3b34 E9C50300 		jmp	.L292
 4910      00
 4911              	.L275:
 4912              	.LBB40:
1072:main.c        **** 											uint8_t tempSto = 0;
 4913              		.loc 1 1072 0
 4914 3b39 0FB68519 		movzbl	-743(%rbp), %eax
 4914      FDFFFF
 4915 3b40 83C001   		addl	$1, %eax
 4916 3b43 888519FD 		movb	%al, -743(%rbp)
 4916      FFFF
 4917              	.L271:
1072:main.c        **** 											uint8_t tempSto = 0;
 4918              		.loc 1 1072 0 is_stmt 0 discriminator 1
 4919 3b49 80BD19FD 		cmpb	$13, -743(%rbp)
 4919      FFFF0D
 4920 3b50 0F86E2FE 		jbe	.L276
 4920      FFFF
 4921              	.LBE40:
 4922              	.LBB41:
1084:main.c        **** 										}
1085:main.c        **** 										
1086:main.c        **** 										for(uint8_t i=14;i <= 17;i++) {
 4923              		.loc 1 1086 0 is_stmt 1
 4924 3b56 C6851BFD 		movb	$14, -741(%rbp)
 4924      FFFF0E
 4925 3b5d E9110100 		jmp	.L277
 4925      00
 4926              	.L282:
 4927              	.LBB42:
1087:main.c        **** 											uint8_t tempSto = 0;
 4928              		.loc 1 1087 0
 4929 3b62 C68510FD 		movb	$0, -752(%rbp)
 4929      FFFF00
 4930              	.LBB43:
1088:main.c        **** 											for(uint8_t j=0;j <= 7;j++) {
 4931              		.loc 1 1088 0
 4932 3b69 C6851CFD 		movb	$0, -740(%rbp)
 4932      FFFF00
 4933 3b70 EB71     		jmp	.L278
 4934              	.L280:
 4935              	.LBB44:
1089:main.c        **** 												uint8_t temp = j + (i-14)*8;
 4936              		.loc 1 1089 0
 4937 3b72 0FB6851B 		movzbl	-741(%rbp), %eax
 4937      FDFFFF
 4938 3b79 83E80E   		subl	$14, %eax
 4939 3b7c 8D14C500 		leal	0(,%rax,8), %edx
 4939      000000
 4940 3b83 0FB6851C 		movzbl	-740(%rbp), %eax
 4940      FDFFFF
 4941 3b8a 01D0     		addl	%edx, %eax
 4942 3b8c 888525FD 		movb	%al, -731(%rbp)
 4942      FFFF
1090:main.c        **** 												if( (befEncSen[1] & (1 << temp)) != 0) {
 4943              		.loc 1 1090 0
 4944 3b92 8B95A4FD 		movl	-604(%rbp), %edx
 4944      FFFF
 4945 3b98 0FB68525 		movzbl	-731(%rbp), %eax
 4945      FDFFFF
 4946 3b9f BE010000 		movl	$1, %esi
 4946      00
 4947 3ba4 89C1     		movl	%eax, %ecx
 4948 3ba6 D3E6     		sall	%cl, %esi
 4949 3ba8 89F0     		movl	%esi, %eax
 4950 3baa 21D0     		andl	%edx, %eax
 4951 3bac 85C0     		testl	%eax, %eax
 4952 3bae 7423     		je	.L279
1091:main.c        **** 													tempSto += (1 << j);
 4953              		.loc 1 1091 0
 4954 3bb0 0FB6851C 		movzbl	-740(%rbp), %eax
 4954      FDFFFF
 4955 3bb7 BA010000 		movl	$1, %edx
 4955      00
 4956 3bbc 89C1     		movl	%eax, %ecx
 4957 3bbe D3E2     		sall	%cl, %edx
 4958 3bc0 89D0     		movl	%edx, %eax
 4959 3bc2 89C2     		movl	%eax, %edx
 4960 3bc4 0FB68510 		movzbl	-752(%rbp), %eax
 4960      FDFFFF
 4961 3bcb 01D0     		addl	%edx, %eax
 4962 3bcd 888510FD 		movb	%al, -752(%rbp)
 4962      FFFF
 4963              	.L279:
 4964              	.LBE44:
1088:main.c        **** 												uint8_t temp = j + (i-14)*8;
 4965              		.loc 1 1088 0
 4966 3bd3 0FB6851C 		movzbl	-740(%rbp), %eax
 4966      FDFFFF
 4967 3bda 83C001   		addl	$1, %eax
 4968 3bdd 88851CFD 		movb	%al, -740(%rbp)
 4968      FFFF
 4969              	.L278:
1088:main.c        **** 												uint8_t temp = j + (i-14)*8;
 4970              		.loc 1 1088 0 is_stmt 0 discriminator 1
 4971 3be3 80BD1CFD 		cmpb	$7, -740(%rbp)
 4971      FFFF07
 4972 3bea 7686     		jbe	.L280
 4973              	.LBE43:
1092:main.c        **** 												}
1093:main.c        **** 											}
1094:main.c        **** 											flSleep(1000);
 4974              		.loc 1 1094 0 is_stmt 1
 4975 3bec BFE80300 		movl	$1000, %edi
 4975      00
 4976 3bf1 E8000000 		call	flSleep
 4976      00
1095:main.c        **** 											fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 4977              		.loc 1 1095 0
 4978 3bf6 8B9584FD 		movl	-636(%rbp), %edx
 4978      FFFF
 4979 3bfc 0FB6B51B 		movzbl	-741(%rbp), %esi
 4979      FDFFFF
 4980 3c03 488B85B0 		movq	-592(%rbp), %rax
 4980      FDFFFF
 4981 3c0a 488DBDB8 		leaq	-584(%rbp), %rdi
 4981      FDFFFF
 4982 3c11 488D8D10 		leaq	-752(%rbp), %rcx
 4982      FDFFFF
 4983 3c18 4989F8   		movq	%rdi, %r8
 4984 3c1b 4889C7   		movq	%rax, %rdi
 4985 3c1e E8000000 		call	flWriteChannel
 4985      00
 4986 3c23 898544FD 		movl	%eax, -700(%rbp)
 4986      FFFF
1096:main.c        **** 											printf("data to channel %u = %u \n", i ,tempSto);
 4987              		.loc 1 1096 0
 4988 3c29 0FB68510 		movzbl	-752(%rbp), %eax
 4988      FDFFFF
 4989 3c30 0FB6D0   		movzbl	%al, %edx
 4990 3c33 0FB6851B 		movzbl	-741(%rbp), %eax
 4990      FDFFFF
 4991 3c3a 89C6     		movl	%eax, %esi
 4992 3c3c BF000000 		movl	$.LC153, %edi
 4992      00
 4993 3c41 B8000000 		movl	$0, %eax
 4993      00
 4994 3c46 E8000000 		call	printf
 4994      00
1097:main.c        **** 											CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4995              		.loc 1 1097 0
 4996 3c4b 83BD44FD 		cmpl	$0, -700(%rbp)
 4996      FFFF00
 4997 3c52 740F     		je	.L281
 4998              		.loc 1 1097 0 is_stmt 0 discriminator 1
 4999 3c54 C78540FD 		movl	$1, -704(%rbp)
 4999      FFFF0100 
 4999      0000
 5000              	.LBE42:
 5001              	.LBE41:
1057:main.c        **** 										flSleep(1000);
 5002              		.loc 1 1057 0 is_stmt 1 discriminator 1
 5003 3c5e E99B0200 		jmp	.L292
 5003      00
 5004              	.L281:
 5005              	.LBB45:
1086:main.c        **** 											uint8_t tempSto = 0;
 5006              		.loc 1 1086 0
 5007 3c63 0FB6851B 		movzbl	-741(%rbp), %eax
 5007      FDFFFF
 5008 3c6a 83C001   		addl	$1, %eax
 5009 3c6d 88851BFD 		movb	%al, -741(%rbp)
 5009      FFFF
 5010              	.L277:
1086:main.c        **** 											uint8_t tempSto = 0;
 5011              		.loc 1 1086 0 is_stmt 0 discriminator 1
 5012 3c73 80BD1BFD 		cmpb	$17, -741(%rbp)
 5012      FFFF11
 5013 3c7a 0F86E2FE 		jbe	.L282
 5013      FFFF
 5014              	.LBE45:
1098:main.c        **** 										}
1099:main.c        **** 										/* update the balance in the global variable now and update the csv here itself */
1100:main.c        **** 										if((*readFromChannelZero) == 1) {
 5015              		.loc 1 1100 0 is_stmt 1
 5016 3c80 488B8598 		movq	-360(%rbp), %rax
 5016      FEFFFF
 5017 3c87 0FB600   		movzbl	(%rax), %eax
 5018 3c8a 3C01     		cmpb	$1, %al
 5019 3c8c 0F855601 		jne	.L283
 5019      0000
1101:main.c        **** 											dataFromCSV[inLineNum][3] -= reqAmo;
 5020              		.loc 1 1101 0
 5021 3c92 8B8538FD 		movl	-712(%rbp), %eax
 5021      FFFF
 5022 3c98 8B9538FD 		movl	-712(%rbp), %edx
 5022      FFFF
 5023 3c9e 4863D2   		movslq	%edx, %rdx
 5024 3ca1 48C1E204 		salq	$4, %rdx
 5025 3ca5 4881C200 		addq	$dataFromCSV+12, %rdx
 5025      000000
 5026 3cac 8B0A     		movl	(%rdx), %ecx
 5027 3cae 8B953CFD 		movl	-708(%rbp), %edx
 5027      FFFF
 5028 3cb4 29D1     		subl	%edx, %ecx
 5029 3cb6 89CA     		movl	%ecx, %edx
 5030 3cb8 4898     		cltq
 5031 3cba 48C1E004 		salq	$4, %rax
 5032 3cbe 48050000 		addq	$dataFromCSV+12, %rax
 5032      0000
 5033 3cc4 8910     		movl	%edx, (%rax)
1102:main.c        **** 
1103:main.c        **** 											/* Updating csv file in place */
1104:main.c        **** 											fPtr = fopen(filename,"w+"); // change flag according to need
 5034              		.loc 1 1104 0
 5035 3cc6 488D4580 		leaq	-128(%rbp), %rax
 5036 3cca BE000000 		movl	$.LC158, %esi
 5036      00
 5037 3ccf 4889C7   		movq	%rax, %rdi
 5038 3cd2 E8000000 		call	fopen
 5038      00
 5039 3cd7 48898590 		movq	%rax, -368(%rbp)
 5039      FEFFFF
1105:main.c        **** 										    fprintf(fPtr,"%s","\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (
 5040              		.loc 1 1105 0
 5041 3cde 488B8590 		movq	-368(%rbp), %rax
 5041      FEFFFF
 5042 3ce5 4889C1   		movq	%rax, %rcx
 5043 3ce8 BA440000 		movl	$68, %edx
 5043      00
 5044 3ced BE010000 		movl	$1, %esi
 5044      00
 5045 3cf2 BF000000 		movl	$.LC159, %edi
 5045      00
 5046 3cf7 E8000000 		call	fwrite
 5046      00
1106:main.c        **** 										    fprintf(fPtr,"\n");
 5047              		.loc 1 1106 0
 5048 3cfc 488B8590 		movq	-368(%rbp), %rax
 5048      FEFFFF
 5049 3d03 4889C6   		movq	%rax, %rsi
 5050 3d06 BF0A0000 		movl	$10, %edi
 5050      00
 5051 3d0b E8000000 		call	fputc
 5051      00
 5052              	.LBB46:
1107:main.c        **** 										    for(int i=1;i <= numLines;i++) {
 5053              		.loc 1 1107 0
 5054 3d10 C78560FD 		movl	$1, -672(%rbp)
 5054      FFFF0100 
 5054      0000
 5055 3d1a E9A30000 		jmp	.L284
 5055      00
 5056              	.L290:
 5057              	.LBB47:
1108:main.c        **** 										        for(int k=0;k < 4;k++) {
 5058              		.loc 1 1108 0
 5059 3d1f C78564FD 		movl	$0, -668(%rbp)
 5059      FFFF0000 
 5059      0000
 5060 3d29 E9800000 		jmp	.L285
 5060      00
 5061              	.L289:
1109:main.c        **** 										            fprintf(fPtr,"%d",dataFromCSV[i][k]);
 5062              		.loc 1 1109 0
 5063 3d2e 8B8564FD 		movl	-668(%rbp), %eax
 5063      FFFF
 5064 3d34 4898     		cltq
 5065 3d36 8B9560FD 		movl	-672(%rbp), %edx
 5065      FFFF
 5066 3d3c 4863D2   		movslq	%edx, %rdx
 5067 3d3f 48C1E202 		salq	$2, %rdx
 5068 3d43 4801D0   		addq	%rdx, %rax
 5069 3d46 8B148500 		movl	dataFromCSV(,%rax,4), %edx
 5069      000000
 5070 3d4d 488B8590 		movq	-368(%rbp), %rax
 5070      FEFFFF
 5071 3d54 BE000000 		movl	$.LC1, %esi
 5071      00
 5072 3d59 4889C7   		movq	%rax, %rdi
 5073 3d5c B8000000 		movl	$0, %eax
 5073      00
 5074 3d61 E8000000 		call	fprintf
 5074      00
1110:main.c        **** 										            if(k == 3) {
 5075              		.loc 1 1110 0
 5076 3d66 83BD64FD 		cmpl	$3, -668(%rbp)
 5076      FFFF03
 5077 3d6d 7524     		jne	.L286
1111:main.c        **** 										                if(i != numLines) fprintf(fPtr,"\n");
 5078              		.loc 1 1111 0
 5079 3d6f 8B050000 		movl	numLines(%rip), %eax
 5079      0000
 5080 3d75 398560FD 		cmpl	%eax, -672(%rbp)
 5080      FFFF
 5081 3d7b 742A     		je	.L288
 5082              		.loc 1 1111 0 is_stmt 0 discriminator 1
 5083 3d7d 488B8590 		movq	-368(%rbp), %rax
 5083      FEFFFF
 5084 3d84 4889C6   		movq	%rax, %rsi
 5085 3d87 BF0A0000 		movl	$10, %edi
 5085      00
 5086 3d8c E8000000 		call	fputc
 5086      00
 5087 3d91 EB14     		jmp	.L288
 5088              	.L286:
1112:main.c        **** 										            } 
1113:main.c        **** 										            else fprintf(fPtr,",");
 5089              		.loc 1 1113 0 is_stmt 1
 5090 3d93 488B8590 		movq	-368(%rbp), %rax
 5090      FEFFFF
 5091 3d9a 4889C6   		movq	%rax, %rsi
 5092 3d9d BF2C0000 		movl	$44, %edi
 5092      00
 5093 3da2 E8000000 		call	fputc
 5093      00
 5094              	.L288:
1108:main.c        **** 										            fprintf(fPtr,"%d",dataFromCSV[i][k]);
 5095              		.loc 1 1108 0
 5096 3da7 838564FD 		addl	$1, -668(%rbp)
 5096      FFFF01
 5097              	.L285:
1108:main.c        **** 										            fprintf(fPtr,"%d",dataFromCSV[i][k]);
 5098              		.loc 1 1108 0 is_stmt 0 discriminator 1
 5099 3dae 83BD64FD 		cmpl	$3, -668(%rbp)
 5099      FFFF03
 5100 3db5 0F8E73FF 		jle	.L289
 5100      FFFF
 5101              	.LBE47:
1107:main.c        **** 										        for(int k=0;k < 4;k++) {
 5102              		.loc 1 1107 0 is_stmt 1
 5103 3dbb 838560FD 		addl	$1, -672(%rbp)
 5103      FFFF01
 5104              	.L284:
1107:main.c        **** 										        for(int k=0;k < 4;k++) {
 5105              		.loc 1 1107 0 is_stmt 0 discriminator 1
 5106 3dc2 8B050000 		movl	numLines(%rip), %eax
 5106      0000
 5107 3dc8 398560FD 		cmpl	%eax, -672(%rbp)
 5107      FFFF
 5108 3dce 0F8E4BFF 		jle	.L290
 5108      FFFF
 5109              	.LBE46:
1114:main.c        **** 										        }    
1115:main.c        **** 										    }
1116:main.c        **** 										    fclose(fPtr);
 5110              		.loc 1 1116 0 is_stmt 1
 5111 3dd4 488B8590 		movq	-368(%rbp), %rax
 5111      FEFFFF
 5112 3ddb 4889C7   		movq	%rax, %rdi
 5113 3dde E8000000 		call	fclose
 5113      00
 5114              	.LBE33:
 5115 3de3 E9110100 		jmp	.L291
 5115      00
 5116              	.L283:
 5117 3de8 E90C0100 		jmp	.L291
 5117      00
 5118              	.L260:
1117:main.c        **** 										}
1118:main.c        **** 									}
1119:main.c        **** 									else {
1120:main.c        **** 										printf("bal %u\n",bal);
 5119              		.loc 1 1120 0
 5120 3ded 8B8534FD 		movl	-716(%rbp), %eax
 5120      FFFF
 5121 3df3 89C6     		movl	%eax, %esi
 5122 3df5 BF000000 		movl	$.LC150, %edi
 5122      00
 5123 3dfa B8000000 		movl	$0, %eax
 5123      00
 5124 3dff E8000000 		call	printf
 5124      00
1121:main.c        **** 										printf("req %u\n",reqAmo);
 5125              		.loc 1 1121 0
 5126 3e04 8B853CFD 		movl	-708(%rbp), %eax
 5126      FFFF
 5127 3e0a 89C6     		movl	%eax, %esi
 5128 3e0c BF000000 		movl	$.LC151, %edi
 5128      00
 5129 3e11 B8000000 		movl	$0, %eax
 5129      00
 5130 3e16 E8000000 		call	printf
 5130      00
1122:main.c        **** 										printf("Insuff Balance \n");
 5131              		.loc 1 1122 0
 5132 3e1b BF000000 		movl	$.LC160, %edi
 5132      00
 5133 3e20 E8000000 		call	puts
 5133      00
1123:main.c        **** 										*statusOnChan9 = 2;
 5134              		.loc 1 1123 0
 5135 3e25 488B85A8 		movq	-344(%rbp), %rax
 5135      FEFFFF
 5136 3e2c C60002   		movb	$2, (%rax)
1124:main.c        **** 										flSleep(1000);
 5137              		.loc 1 1124 0
 5138 3e2f BFE80300 		movl	$1000, %edi
 5138      00
 5139 3e34 E8000000 		call	flSleep
 5139      00
1125:main.c        **** 										fStatus = flWriteChannel(handle,(uint8_t)9,length,statusOnChan9,&error);
 5140              		.loc 1 1125 0
 5141 3e39 8B9584FD 		movl	-636(%rbp), %edx
 5141      FFFF
 5142 3e3f 488B85B0 		movq	-592(%rbp), %rax
 5142      FDFFFF
 5143 3e46 488DB5B8 		leaq	-584(%rbp), %rsi
 5143      FDFFFF
 5144 3e4d 488B8DA8 		movq	-344(%rbp), %rcx
 5144      FEFFFF
 5145 3e54 4989F0   		movq	%rsi, %r8
 5146 3e57 BE090000 		movl	$9, %esi
 5146      00
 5147 3e5c 4889C7   		movq	%rax, %rdi
 5148 3e5f E8000000 		call	flWriteChannel
 5148      00
 5149 3e64 898544FD 		movl	%eax, -700(%rbp)
 5149      FFFF
1126:main.c        **** 										CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5150              		.loc 1 1126 0
 5151 3e6a 83BD44FD 		cmpl	$0, -700(%rbp)
 5151      FFFF00
 5152 3e71 740C     		je	.L293
 5153              		.loc 1 1126 0 is_stmt 0 discriminator 1
 5154 3e73 C78540FD 		movl	$1, -704(%rbp)
 5154      FFFF0100 
 5154      0000
 5155 3e7d EB7F     		jmp	.L292
 5156              	.L293:
 5157              	.LBB48:
1127:main.c        **** 										for(int i=10;i <= 17;i++) {
 5158              		.loc 1 1127 0 is_stmt 1
 5159 3e7f C78568FD 		movl	$10, -664(%rbp)
 5159      FFFF0A00 
 5159      0000
 5160 3e89 EB65     		jmp	.L294
 5161              	.L296:
 5162              	.LBB49:
1128:main.c        **** 											uint8_t tempSto = 0;
 5163              		.loc 1 1128 0
 5164 3e8b C685A0FD 		movb	$0, -608(%rbp)
 5164      FFFF00
1129:main.c        **** 											flSleep(1000);
 5165              		.loc 1 1129 0
 5166 3e92 BFE80300 		movl	$1000, %edi
 5166      00
 5167 3e97 E8000000 		call	flSleep
 5167      00
1130:main.c        **** 											fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 5168              		.loc 1 1130 0
 5169 3e9c 8B9584FD 		movl	-636(%rbp), %edx
 5169      FFFF
 5170 3ea2 8B8568FD 		movl	-664(%rbp), %eax
 5170      FFFF
 5171 3ea8 0FB6F0   		movzbl	%al, %esi
 5172 3eab 488B85B0 		movq	-592(%rbp), %rax
 5172      FDFFFF
 5173 3eb2 488DBDB8 		leaq	-584(%rbp), %rdi
 5173      FDFFFF
 5174 3eb9 488D8DA0 		leaq	-608(%rbp), %rcx
 5174      FDFFFF
 5175 3ec0 4989F8   		movq	%rdi, %r8
 5176 3ec3 4889C7   		movq	%rax, %rdi
 5177 3ec6 E8000000 		call	flWriteChannel
 5177      00
 5178 3ecb 898544FD 		movl	%eax, -700(%rbp)
 5178      FFFF
1131:main.c        **** 											CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5179              		.loc 1 1131 0
 5180 3ed1 83BD44FD 		cmpl	$0, -700(%rbp)
 5180      FFFF00
 5181 3ed8 740F     		je	.L295
 5182              		.loc 1 1131 0 is_stmt 0 discriminator 1
 5183 3eda C78540FD 		movl	$1, -704(%rbp)
 5183      FFFF0100 
 5183      0000
 5184              	.LBE49:
 5185              	.LBE48:
 5186 3ee4 E9790400 		jmp	.L240
 5186      00
 5187              	.L295:
 5188              	.LBB50:
1127:main.c        **** 											uint8_t tempSto = 0;
 5189              		.loc 1 1127 0 is_stmt 1
 5190 3ee9 838568FD 		addl	$1, -664(%rbp)
 5190      FFFF01
 5191              	.L294:
1127:main.c        **** 											uint8_t tempSto = 0;
 5192              		.loc 1 1127 0 is_stmt 0 discriminator 1
 5193 3ef0 83BD68FD 		cmpl	$17, -664(%rbp)
 5193      FFFF11
 5194 3ef7 7E92     		jle	.L296
 5195              	.L291:
 5196              	.LBE50:
 5197              	.LBE32:
 5198 3ef9 E9660400 		jmp	.L230
 5198      00
 5199              	.L292:
1001:main.c        **** 								printf("data in channel %u = %u \n", i ,*readFromChannel_i);
 5200              		.loc 1 1001 0 is_stmt 1
 5201 3efe E9700400 		jmp	.L228
 5201      00
 5202              	.L259:
 5203              	.LBB51:
1132:main.c        **** 										}
1133:main.c        **** 									}
1134:main.c        **** 								}
1135:main.c        **** 								else {
1136:main.c        **** 									printf("User has admin privileges \n");
 5204              		.loc 1 1136 0
 5205 3f03 BF000000 		movl	$.LC161, %edi
 5205      00
 5206 3f08 E8000000 		call	puts
 5206      00
1137:main.c        **** 									*statusOnChan9 = 3;
 5207              		.loc 1 1137 0
 5208 3f0d 488B85A8 		movq	-344(%rbp), %rax
 5208      FEFFFF
 5209 3f14 C60003   		movb	$3, (%rax)
1138:main.c        **** 									flSleep(1000);
 5210              		.loc 1 1138 0
 5211 3f17 BFE80300 		movl	$1000, %edi
 5211      00
 5212 3f1c E8000000 		call	flSleep
 5212      00
1139:main.c        **** 									fStatus = flWriteChannel(handle,(uint8_t)9,length,statusOnChan9,&error);
 5213              		.loc 1 1139 0
 5214 3f21 8B9584FD 		movl	-636(%rbp), %edx
 5214      FFFF
 5215 3f27 488B85B0 		movq	-592(%rbp), %rax
 5215      FDFFFF
 5216 3f2e 488DB5B8 		leaq	-584(%rbp), %rsi
 5216      FDFFFF
 5217 3f35 488B8DA8 		movq	-344(%rbp), %rcx
 5217      FEFFFF
 5218 3f3c 4989F0   		movq	%rsi, %r8
 5219 3f3f BE090000 		movl	$9, %esi
 5219      00
 5220 3f44 4889C7   		movq	%rax, %rdi
 5221 3f47 E8000000 		call	flWriteChannel
 5221      00
 5222 3f4c 898544FD 		movl	%eax, -700(%rbp)
 5222      FFFF
1140:main.c        **** 									CHECK_STATUS(fStatus, FLP_LIBERR,cleanup);
 5223              		.loc 1 1140 0
 5224 3f52 83BD44FD 		cmpl	$0, -700(%rbp)
 5224      FFFF00
 5225 3f59 740F     		je	.L298
 5226              		.loc 1 1140 0 is_stmt 0 discriminator 1
 5227 3f5b C78540FD 		movl	$1, -704(%rbp)
 5227      FFFF0100 
 5227      0000
 5228 3f65 E9F80300 		jmp	.L240
 5228      00
 5229              	.L298:
 5230              	.LBB52:
1141:main.c        **** 									uint32_t befEncSen[2];
1142:main.c        **** 									for(int i=0;i<2;i++) befEncSen[i] = 0;
 5231              		.loc 1 1142 0 is_stmt 1
 5232 3f6a C7856CFD 		movl	$0, -660(%rbp)
 5232      FFFF0000 
 5232      0000
 5233 3f74 EB1A     		jmp	.L300
 5234              	.L301:
 5235              		.loc 1 1142 0 is_stmt 0 discriminator 2
 5236 3f76 8B856CFD 		movl	-660(%rbp), %eax
 5236      FFFF
 5237 3f7c 4898     		cltq
 5238 3f7e C78485A0 		movl	$0, -608(%rbp,%rax,4)
 5238      FDFFFF00 
 5238      000000
 5239 3f89 83856CFD 		addl	$1, -660(%rbp)
 5239      FFFF01
 5240              	.L300:
 5241              		.loc 1 1142 0 discriminator 1
 5242 3f90 83BD6CFD 		cmpl	$1, -660(%rbp)
 5242      FFFF01
 5243 3f97 7EDD     		jle	.L301
 5244              	.LBE52:
 5245              	.LBB53:
1143:main.c        **** 									for(uint32_t i=0;i <= 31;i += 8) {
 5246              		.loc 1 1143 0 is_stmt 1
 5247 3f99 C78570FD 		movl	$0, -656(%rbp)
 5247      FFFF0000 
 5247      0000
 5248 3fa3 E9AC0000 		jmp	.L302
 5248      00
 5249              	.L307:
1144:main.c        **** 										if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 5250              		.loc 1 1144 0
 5251 3fa8 83BD70FD 		cmpl	$0, -656(%rbp)
 5251      FFFF00
 5252 3faf 7523     		jne	.L303
 5253              		.loc 1 1144 0 is_stmt 0 discriminator 1
 5254 3fb1 8B95A0FD 		movl	-608(%rbp), %edx
 5254      FFFF
 5255 3fb7 0FB6B514 		movzbl	-748(%rbp), %esi
 5255      FDFFFF
 5256 3fbe 8B8570FD 		movl	-656(%rbp), %eax
 5256      FFFF
 5257 3fc4 89C1     		movl	%eax, %ecx
 5258 3fc6 D3E6     		sall	%cl, %esi
 5259 3fc8 89F0     		movl	%esi, %eax
 5260 3fca 01D0     		addl	%edx, %eax
 5261 3fcc 8985A0FD 		movl	%eax, -608(%rbp)
 5261      FFFF
 5262 3fd2 EB79     		jmp	.L304
 5263              	.L303:
1145:main.c        **** 										else if(i == 8) befEncSen[0] += ((1 << i)*((uint32_t)num_500));
 5264              		.loc 1 1145 0 is_stmt 1
 5265 3fd4 83BD70FD 		cmpl	$8, -656(%rbp)
 5265      FFFF08
 5266 3fdb 7523     		jne	.L305
 5267              		.loc 1 1145 0 is_stmt 0 discriminator 1
 5268 3fdd 8B95A0FD 		movl	-608(%rbp), %edx
 5268      FFFF
 5269 3fe3 0FB6B515 		movzbl	-747(%rbp), %esi
 5269      FDFFFF
 5270 3fea 8B8570FD 		movl	-656(%rbp), %eax
 5270      FFFF
 5271 3ff0 89C1     		movl	%eax, %ecx
 5272 3ff2 D3E6     		sall	%cl, %esi
 5273 3ff4 89F0     		movl	%esi, %eax
 5274 3ff6 01D0     		addl	%edx, %eax
 5275 3ff8 8985A0FD 		movl	%eax, -608(%rbp)
 5275      FFFF
 5276 3ffe EB4D     		jmp	.L304
 5277              	.L305:
1146:main.c        **** 										else if(i == 16) befEncSen[0] += ((1 << i)*((uint32_t)num_1000));
 5278              		.loc 1 1146 0 is_stmt 1
 5279 4000 83BD70FD 		cmpl	$16, -656(%rbp)
 5279      FFFF10
 5280 4007 7523     		jne	.L306
 5281              		.loc 1 1146 0 is_stmt 0 discriminator 1
 5282 4009 8B95A0FD 		movl	-608(%rbp), %edx
 5282      FFFF
 5283 400f 0FB6B516 		movzbl	-746(%rbp), %esi
 5283      FDFFFF
 5284 4016 8B8570FD 		movl	-656(%rbp), %eax
 5284      FFFF
 5285 401c 89C1     		movl	%eax, %ecx
 5286 401e D3E6     		sall	%cl, %esi
 5287 4020 89F0     		movl	%esi, %eax
 5288 4022 01D0     		addl	%edx, %eax
 5289 4024 8985A0FD 		movl	%eax, -608(%rbp)
 5289      FFFF
 5290 402a EB21     		jmp	.L304
 5291              	.L306:
1147:main.c        **** 										else befEncSen[0] += ((1 << i)*((uint32_t)num_2000));
 5292              		.loc 1 1147 0 is_stmt 1
 5293 402c 8B95A0FD 		movl	-608(%rbp), %edx
 5293      FFFF
 5294 4032 0FB6B517 		movzbl	-745(%rbp), %esi
 5294      FDFFFF
 5295 4039 8B8570FD 		movl	-656(%rbp), %eax
 5295      FFFF
 5296 403f 89C1     		movl	%eax, %ecx
 5297 4041 D3E6     		sall	%cl, %esi
 5298 4043 89F0     		movl	%esi, %eax
 5299 4045 01D0     		addl	%edx, %eax
 5300 4047 8985A0FD 		movl	%eax, -608(%rbp)
 5300      FFFF
 5301              	.L304:
1143:main.c        **** 										if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 5302              		.loc 1 1143 0
 5303 404d 838570FD 		addl	$8, -656(%rbp)
 5303      FFFF08
 5304              	.L302:
1143:main.c        **** 										if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 5305              		.loc 1 1143 0 is_stmt 0 discriminator 1
 5306 4054 83BD70FD 		cmpl	$31, -656(%rbp)
 5306      FFFF1F
 5307 405b 0F8647FF 		jbe	.L307
 5307      FFFF
 5308              	.LBE53:
1148:main.c        **** 									}	
1149:main.c        **** 									encrypt64(befEncSen);
 5309              		.loc 1 1149 0 is_stmt 1
 5310 4061 488D85A0 		leaq	-608(%rbp), %rax
 5310      FDFFFF
 5311 4068 4889C7   		movq	%rax, %rdi
 5312 406b E8000000 		call	encrypt64
 5312      00
 5313              	.LBB54:
1150:main.c        **** 									for(uint8_t i=10;i <= 13;i++) {
 5314              		.loc 1 1150 0
 5315 4070 C6851DFD 		movb	$10, -739(%rbp)
 5315      FFFF0A
 5316 4077 E9EF0000 		jmp	.L308
 5316      00
 5317              	.L313:
 5318              	.LBB55:
1151:main.c        **** 										uint8_t tempSto = 0;
 5319              		.loc 1 1151 0
 5320 407c C6853CFD 		movb	$0, -708(%rbp)
 5320      FFFF00
 5321              	.LBB56:
1152:main.c        **** 										for(uint8_t j=0;j <= 7;j++) {
 5322              		.loc 1 1152 0
 5323 4083 C6851EFD 		movb	$0, -738(%rbp)
 5323      FFFF00
 5324 408a EB71     		jmp	.L309
 5325              	.L311:
 5326              	.LBB57:
1153:main.c        **** 											uint8_t temp = j + (i-10)*8;
 5327              		.loc 1 1153 0
 5328 408c 0FB6851D 		movzbl	-739(%rbp), %eax
 5328      FDFFFF
 5329 4093 83E80A   		subl	$10, %eax
 5330 4096 8D14C500 		leal	0(,%rax,8), %edx
 5330      000000
 5331 409d 0FB6851E 		movzbl	-738(%rbp), %eax
 5331      FDFFFF
 5332 40a4 01D0     		addl	%edx, %eax
 5333 40a6 888526FD 		movb	%al, -730(%rbp)
 5333      FFFF
1154:main.c        **** 											if( (befEncSen[0] & (1 << temp)) != 0) {
 5334              		.loc 1 1154 0
 5335 40ac 8B95A0FD 		movl	-608(%rbp), %edx
 5335      FFFF
 5336 40b2 0FB68526 		movzbl	-730(%rbp), %eax
 5336      FDFFFF
 5337 40b9 BE010000 		movl	$1, %esi
 5337      00
 5338 40be 89C1     		movl	%eax, %ecx
 5339 40c0 D3E6     		sall	%cl, %esi
 5340 40c2 89F0     		movl	%esi, %eax
 5341 40c4 21D0     		andl	%edx, %eax
 5342 40c6 85C0     		testl	%eax, %eax
 5343 40c8 7423     		je	.L310
1155:main.c        **** 												tempSto += (1 << j);
 5344              		.loc 1 1155 0
 5345 40ca 0FB6851E 		movzbl	-738(%rbp), %eax
 5345      FDFFFF
 5346 40d1 BA010000 		movl	$1, %edx
 5346      00
 5347 40d6 89C1     		movl	%eax, %ecx
 5348 40d8 D3E2     		sall	%cl, %edx
 5349 40da 89D0     		movl	%edx, %eax
 5350 40dc 89C2     		movl	%eax, %edx
 5351 40de 0FB6853C 		movzbl	-708(%rbp), %eax
 5351      FDFFFF
 5352 40e5 01D0     		addl	%edx, %eax
 5353 40e7 88853CFD 		movb	%al, -708(%rbp)
 5353      FFFF
 5354              	.L310:
 5355              	.LBE57:
1152:main.c        **** 											uint8_t temp = j + (i-10)*8;
 5356              		.loc 1 1152 0
 5357 40ed 0FB6851E 		movzbl	-738(%rbp), %eax
 5357      FDFFFF
 5358 40f4 83C001   		addl	$1, %eax
 5359 40f7 88851EFD 		movb	%al, -738(%rbp)
 5359      FFFF
 5360              	.L309:
1152:main.c        **** 											uint8_t temp = j + (i-10)*8;
 5361              		.loc 1 1152 0 is_stmt 0 discriminator 1
 5362 40fd 80BD1EFD 		cmpb	$7, -738(%rbp)
 5362      FFFF07
 5363 4104 7686     		jbe	.L311
 5364              	.LBE56:
1156:main.c        **** 											}
1157:main.c        **** 										}
1158:main.c        **** 										flSleep(1000);
 5365              		.loc 1 1158 0 is_stmt 1
 5366 4106 BFE80300 		movl	$1000, %edi
 5366      00
 5367 410b E8000000 		call	flSleep
 5367      00
1159:main.c        **** 										fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 5368              		.loc 1 1159 0
 5369 4110 8B9584FD 		movl	-636(%rbp), %edx
 5369      FFFF
 5370 4116 0FB6B51D 		movzbl	-739(%rbp), %esi
 5370      FDFFFF
 5371 411d 488B85B0 		movq	-592(%rbp), %rax
 5371      FDFFFF
 5372 4124 488DBDB8 		leaq	-584(%rbp), %rdi
 5372      FDFFFF
 5373 412b 488D8D3C 		leaq	-708(%rbp), %rcx
 5373      FDFFFF
 5374 4132 4989F8   		movq	%rdi, %r8
 5375 4135 4889C7   		movq	%rax, %rdi
 5376 4138 E8000000 		call	flWriteChannel
 5376      00
 5377 413d 898544FD 		movl	%eax, -700(%rbp)
 5377      FFFF
1160:main.c        **** 										CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5378              		.loc 1 1160 0
 5379 4143 83BD44FD 		cmpl	$0, -700(%rbp)
 5379      FFFF00
 5380 414a 740F     		je	.L312
 5381              		.loc 1 1160 0 is_stmt 0 discriminator 1
 5382 414c C78540FD 		movl	$1, -704(%rbp)
 5382      FFFF0100 
 5382      0000
 5383              	.LBE55:
 5384              	.LBE54:
1140:main.c        **** 									uint32_t befEncSen[2];
 5385              		.loc 1 1140 0 is_stmt 1 discriminator 1
 5386 4156 E9070200 		jmp	.L240
 5386      00
 5387              	.L312:
 5388              	.LBB58:
1150:main.c        **** 										uint8_t tempSto = 0;
 5389              		.loc 1 1150 0
 5390 415b 0FB6851D 		movzbl	-739(%rbp), %eax
 5390      FDFFFF
 5391 4162 83C001   		addl	$1, %eax
 5392 4165 88851DFD 		movb	%al, -739(%rbp)
 5392      FFFF
 5393              	.L308:
1150:main.c        **** 										uint8_t tempSto = 0;
 5394              		.loc 1 1150 0 is_stmt 0 discriminator 1
 5395 416b 80BD1DFD 		cmpb	$13, -739(%rbp)
 5395      FFFF0D
 5396 4172 0F8604FF 		jbe	.L313
 5396      FFFF
 5397              	.LBE58:
 5398              	.LBB59:
1161:main.c        **** 									}
1162:main.c        **** 
1163:main.c        **** 									for(uint8_t i=14;i <= 17;i++) {
 5399              		.loc 1 1163 0 is_stmt 1
 5400 4178 C6851FFD 		movb	$14, -737(%rbp)
 5400      FFFF0E
 5401 417f E9EF0000 		jmp	.L314
 5401      00
 5402              	.L319:
 5403              	.LBB60:
1164:main.c        **** 										uint8_t tempSto = 0;
 5404              		.loc 1 1164 0
 5405 4184 C6853CFD 		movb	$0, -708(%rbp)
 5405      FFFF00
 5406              	.LBB61:
1165:main.c        **** 										for(uint8_t j=0;j <= 7;j++) {
 5407              		.loc 1 1165 0
 5408 418b C68520FD 		movb	$0, -736(%rbp)
 5408      FFFF00
 5409 4192 EB71     		jmp	.L315
 5410              	.L317:
 5411              	.LBB62:
1166:main.c        **** 											uint8_t temp = j + (i-14)*8;
 5412              		.loc 1 1166 0
 5413 4194 0FB6851F 		movzbl	-737(%rbp), %eax
 5413      FDFFFF
 5414 419b 83E80E   		subl	$14, %eax
 5415 419e 8D14C500 		leal	0(,%rax,8), %edx
 5415      000000
 5416 41a5 0FB68520 		movzbl	-736(%rbp), %eax
 5416      FDFFFF
 5417 41ac 01D0     		addl	%edx, %eax
 5418 41ae 888527FD 		movb	%al, -729(%rbp)
 5418      FFFF
1167:main.c        **** 											if( (befEncSen[1] & (1 << temp)) != 0) {
 5419              		.loc 1 1167 0
 5420 41b4 8B95A4FD 		movl	-604(%rbp), %edx
 5420      FFFF
 5421 41ba 0FB68527 		movzbl	-729(%rbp), %eax
 5421      FDFFFF
 5422 41c1 BE010000 		movl	$1, %esi
 5422      00
 5423 41c6 89C1     		movl	%eax, %ecx
 5424 41c8 D3E6     		sall	%cl, %esi
 5425 41ca 89F0     		movl	%esi, %eax
 5426 41cc 21D0     		andl	%edx, %eax
 5427 41ce 85C0     		testl	%eax, %eax
 5428 41d0 7423     		je	.L316
1168:main.c        **** 												tempSto += (1 << j);
 5429              		.loc 1 1168 0
 5430 41d2 0FB68520 		movzbl	-736(%rbp), %eax
 5430      FDFFFF
 5431 41d9 BA010000 		movl	$1, %edx
 5431      00
 5432 41de 89C1     		movl	%eax, %ecx
 5433 41e0 D3E2     		sall	%cl, %edx
 5434 41e2 89D0     		movl	%edx, %eax
 5435 41e4 89C2     		movl	%eax, %edx
 5436 41e6 0FB6853C 		movzbl	-708(%rbp), %eax
 5436      FDFFFF
 5437 41ed 01D0     		addl	%edx, %eax
 5438 41ef 88853CFD 		movb	%al, -708(%rbp)
 5438      FFFF
 5439              	.L316:
 5440              	.LBE62:
1165:main.c        **** 											uint8_t temp = j + (i-14)*8;
 5441              		.loc 1 1165 0
 5442 41f5 0FB68520 		movzbl	-736(%rbp), %eax
 5442      FDFFFF
 5443 41fc 83C001   		addl	$1, %eax
 5444 41ff 888520FD 		movb	%al, -736(%rbp)
 5444      FFFF
 5445              	.L315:
1165:main.c        **** 											uint8_t temp = j + (i-14)*8;
 5446              		.loc 1 1165 0 is_stmt 0 discriminator 1
 5447 4205 80BD20FD 		cmpb	$7, -736(%rbp)
 5447      FFFF07
 5448 420c 7686     		jbe	.L317
 5449              	.LBE61:
1169:main.c        **** 											}
1170:main.c        **** 										}
1171:main.c        **** 										flSleep(1000);
 5450              		.loc 1 1171 0 is_stmt 1
 5451 420e BFE80300 		movl	$1000, %edi
 5451      00
 5452 4213 E8000000 		call	flSleep
 5452      00
1172:main.c        **** 										fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 5453              		.loc 1 1172 0
 5454 4218 8B9584FD 		movl	-636(%rbp), %edx
 5454      FFFF
 5455 421e 0FB6B51F 		movzbl	-737(%rbp), %esi
 5455      FDFFFF
 5456 4225 488B85B0 		movq	-592(%rbp), %rax
 5456      FDFFFF
 5457 422c 488DBDB8 		leaq	-584(%rbp), %rdi
 5457      FDFFFF
 5458 4233 488D8D3C 		leaq	-708(%rbp), %rcx
 5458      FDFFFF
 5459 423a 4989F8   		movq	%rdi, %r8
 5460 423d 4889C7   		movq	%rax, %rdi
 5461 4240 E8000000 		call	flWriteChannel
 5461      00
 5462 4245 898544FD 		movl	%eax, -700(%rbp)
 5462      FFFF
1173:main.c        **** 										CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5463              		.loc 1 1173 0
 5464 424b 83BD44FD 		cmpl	$0, -700(%rbp)
 5464      FFFF00
 5465 4252 740F     		je	.L318
 5466              		.loc 1 1173 0 is_stmt 0 discriminator 1
 5467 4254 C78540FD 		movl	$1, -704(%rbp)
 5467      FFFF0100 
 5467      0000
 5468              	.LBE60:
 5469              	.LBE59:
1140:main.c        **** 									uint32_t befEncSen[2];
 5470              		.loc 1 1140 0 is_stmt 1 discriminator 1
 5471 425e E9FF0000 		jmp	.L240
 5471      00
 5472              	.L318:
 5473              	.LBB63:
1163:main.c        **** 										uint8_t tempSto = 0;
 5474              		.loc 1 1163 0
 5475 4263 0FB6851F 		movzbl	-737(%rbp), %eax
 5475      FDFFFF
 5476 426a 83C001   		addl	$1, %eax
 5477 426d 88851FFD 		movb	%al, -737(%rbp)
 5477      FFFF
 5478              	.L314:
1163:main.c        **** 										uint8_t tempSto = 0;
 5479              		.loc 1 1163 0 is_stmt 0 discriminator 1
 5480 4273 80BD1FFD 		cmpb	$17, -737(%rbp)
 5480      FFFF11
 5481 427a 0F8604FF 		jbe	.L319
 5481      FFFF
 5482              	.LBE63:
 5483 4280 E9DB0000 		jmp	.L320
 5483      00
 5484              	.L258:
 5485              	.LBE51:
1174:main.c        **** 									}
1175:main.c        **** 								}
1176:main.c        **** 							}
1177:main.c        **** 							else {
1178:main.c        **** 								printf("Invalid user \n");
 5486              		.loc 1 1178 0 is_stmt 1
 5487 4285 BF000000 		movl	$.LC162, %edi
 5487      00
 5488 428a E8000000 		call	puts
 5488      00
1179:main.c        **** 								*statusOnChan9 = 4;
 5489              		.loc 1 1179 0
 5490 428f 488B85A8 		movq	-344(%rbp), %rax
 5490      FEFFFF
 5491 4296 C60004   		movb	$4, (%rax)
1180:main.c        **** 								flSleep(1000);
 5492              		.loc 1 1180 0
 5493 4299 BFE80300 		movl	$1000, %edi
 5493      00
 5494 429e E8000000 		call	flSleep
 5494      00
1181:main.c        **** 								fStatus = flWriteChannel(handle,(uint8_t)9,length,statusOnChan9,&error);
 5495              		.loc 1 1181 0
 5496 42a3 8B9584FD 		movl	-636(%rbp), %edx
 5496      FFFF
 5497 42a9 488B85B0 		movq	-592(%rbp), %rax
 5497      FDFFFF
 5498 42b0 488DB5B8 		leaq	-584(%rbp), %rsi
 5498      FDFFFF
 5499 42b7 488B8DA8 		movq	-344(%rbp), %rcx
 5499      FEFFFF
 5500 42be 4989F0   		movq	%rsi, %r8
 5501 42c1 BE090000 		movl	$9, %esi
 5501      00
 5502 42c6 4889C7   		movq	%rax, %rdi
 5503 42c9 E8000000 		call	flWriteChannel
 5503      00
 5504 42ce 898544FD 		movl	%eax, -700(%rbp)
 5504      FFFF
1182:main.c        **** 								CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5505              		.loc 1 1182 0
 5506 42d4 83BD44FD 		cmpl	$0, -700(%rbp)
 5506      FFFF00
 5507 42db 740C     		je	.L321
 5508              		.loc 1 1182 0 is_stmt 0 discriminator 1
 5509 42dd C78540FD 		movl	$1, -704(%rbp)
 5509      FFFF0100 
 5509      0000
 5510 42e7 EB79     		jmp	.L240
 5511              	.L321:
 5512              	.LBB64:
1183:main.c        **** 								for(int i=10;i <= 17;i++) {
 5513              		.loc 1 1183 0 is_stmt 1
 5514 42e9 C78574FD 		movl	$10, -652(%rbp)
 5514      FFFF0A00 
 5514      0000
 5515 42f3 EB62     		jmp	.L322
 5516              	.L324:
 5517              	.LBB65:
1184:main.c        **** 									uint8_t tempSto = 0;
 5518              		.loc 1 1184 0
 5519 42f5 C685A0FD 		movb	$0, -608(%rbp)
 5519      FFFF00
1185:main.c        **** 									flSleep(1000);
 5520              		.loc 1 1185 0
 5521 42fc BFE80300 		movl	$1000, %edi
 5521      00
 5522 4301 E8000000 		call	flSleep
 5522      00
1186:main.c        **** 									fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 5523              		.loc 1 1186 0
 5524 4306 8B9584FD 		movl	-636(%rbp), %edx
 5524      FFFF
 5525 430c 8B8574FD 		movl	-652(%rbp), %eax
 5525      FFFF
 5526 4312 0FB6F0   		movzbl	%al, %esi
 5527 4315 488B85B0 		movq	-592(%rbp), %rax
 5527      FDFFFF
 5528 431c 488DBDB8 		leaq	-584(%rbp), %rdi
 5528      FDFFFF
 5529 4323 488D8DA0 		leaq	-608(%rbp), %rcx
 5529      FDFFFF
 5530 432a 4989F8   		movq	%rdi, %r8
 5531 432d 4889C7   		movq	%rax, %rdi
 5532 4330 E8000000 		call	flWriteChannel
 5532      00
 5533 4335 898544FD 		movl	%eax, -700(%rbp)
 5533      FFFF
1187:main.c        **** 									CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5534              		.loc 1 1187 0
 5535 433b 83BD44FD 		cmpl	$0, -700(%rbp)
 5535      FFFF00
 5536 4342 740C     		je	.L323
 5537              		.loc 1 1187 0 is_stmt 0 discriminator 1
 5538 4344 C78540FD 		movl	$1, -704(%rbp)
 5538      FFFF0100 
 5538      0000
 5539              	.LBE65:
 5540              	.LBE64:
1001:main.c        **** 								printf("data in channel %u = %u \n", i ,*readFromChannel_i);
 5541              		.loc 1 1001 0 is_stmt 1 discriminator 1
 5542 434e EB23     		jmp	.L228
 5543              	.L323:
 5544              	.LBB66:
1183:main.c        **** 									uint8_t tempSto = 0;
 5545              		.loc 1 1183 0
 5546 4350 838574FD 		addl	$1, -652(%rbp)
 5546      FFFF01
 5547              	.L322:
1183:main.c        **** 									uint8_t tempSto = 0;
 5548              		.loc 1 1183 0 is_stmt 0 discriminator 1
 5549 4357 83BD74FD 		cmpl	$17, -652(%rbp)
 5549      FFFF11
 5550 435e 7E95     		jle	.L324
 5551              	.L320:
 5552              	.LBE66:
 5553 4360 EB02     		jmp	.L230
 5554              	.L240:
 5555              	.LBE26:
 5556              	.LBE25:
 5557              	.LBE24:
 975:main.c        **** 					printf("data in channel 0 = %u \n", *readFromChannelZero);
 5558              		.loc 1 975 0 is_stmt 1 discriminator 1
 5559 4362 EB69     		jmp	.L152
 5560              	.L230:
 5561              	.LBB67:
1188:main.c        **** 								}
1189:main.c        **** 							}
1190:main.c        **** 						}
1191:main.c        **** 					}
1192:main.c        **** 					flSleep(1000);
 5562              		.loc 1 1192 0
 5563 4364 BFE80300 		movl	$1000, %edi
 5563      00
 5564 4369 E8000000 		call	flSleep
 5564      00
 5565              	.LBE67:
1193:main.c        **** 				}			
 5566              		.loc 1 1193 0
 5567 436e E9FEEDFF 		jmp	.L325
 5567      FF
 5568              	.L228:
 5569              	.LBE23:
 947:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 5570              		.loc 1 947 0 discriminator 1
 5571 4373 EB58     		jmp	.L152
 5572              	.L221:
1194:main.c        **** 
1195:main.c        **** 			} else {
1196:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 5573              		.loc 1 1196 0
 5574 4375 488B0500 		movq	stderr(%rip), %rax
 5574      000000
 5575 437c 488B9570 		movq	-400(%rbp), %rdx
 5575      FEFFFF
 5576 4383 BE000000 		movl	$.LC129, %esi
 5576      00
 5577 4388 4889C7   		movq	%rax, %rdi
 5578 438b B8000000 		movl	$0, %eax
 5578      00
 5579 4390 E8000000 		call	fprintf
 5579      00
1197:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 5580              		.loc 1 1197 0
 5581 4395 C78540FD 		movl	$12, -704(%rbp)
 5581      FFFF0C00 
 5581      0000
 5582 439f 90       		nop
 5583 43a0 EB2B     		jmp	.L152
 5584              	.L217:
 5585              	.LBE22:
1198:main.c        **** 			}
1199:main.c        **** 		} else {
1200:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 5586              		.loc 1 1200 0
 5587 43a2 488B0500 		movq	stderr(%rip), %rax
 5587      000000
 5588 43a9 488B9570 		movq	-400(%rbp), %rdx
 5588      FEFFFF
 5589 43b0 BE000000 		movl	$.LC130, %esi
 5589      00
 5590 43b5 4889C7   		movq	%rax, %rdi
 5591 43b8 B8000000 		movl	$0, %eax
 5591      00
 5592 43bd E8000000 		call	fprintf
 5592      00
1201:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5593              		.loc 1 1201 0
 5594 43c2 C78540FD 		movl	$12, -704(%rbp)
 5594      FFFF0C00 
 5594      0000
 5595 43cc 90       		nop
 5596              	.L152:
1202:main.c        **** 		}
1203:main.c        **** 	}
1204:main.c        **** 	
1205:main.c        **** 	cleanup:
1206:main.c        **** 	free((void*)line);
 5597              		.loc 1 1206 0
 5598 43cd 488B85D0 		movq	-560(%rbp), %rax
 5598      FDFFFF
 5599 43d4 4889C7   		movq	%rax, %rdi
 5600 43d7 E8000000 		call	free
 5600      00
1207:main.c        **** 	flClose(handle);
 5601              		.loc 1 1207 0
 5602 43dc 488B85B0 		movq	-592(%rbp), %rax
 5602      FDFFFF
 5603 43e3 4889C7   		movq	%rax, %rdi
 5604 43e6 E8000000 		call	flClose
 5604      00
1208:main.c        **** 	if ( error ) {
 5605              		.loc 1 1208 0
 5606 43eb 488B85B8 		movq	-584(%rbp), %rax
 5606      FDFFFF
 5607 43f2 4885C0   		testq	%rax, %rax
 5608 43f5 742F     		je	.L326
1209:main.c        **** 		fprintf(stderr, "%s\n", error);
 5609              		.loc 1 1209 0
 5610 43f7 488B95B8 		movq	-584(%rbp), %rdx
 5610      FDFFFF
 5611 43fe 488B0500 		movq	stderr(%rip), %rax
 5611      000000
 5612 4405 BE000000 		movl	$.LC163, %esi
 5612      00
 5613 440a 4889C7   		movq	%rax, %rdi
 5614 440d B8000000 		movl	$0, %eax
 5614      00
 5615 4412 E8000000 		call	fprintf
 5615      00
1210:main.c        **** 		flFreeError(error);
 5616              		.loc 1 1210 0
 5617 4417 488B85B8 		movq	-584(%rbp), %rax
 5617      FDFFFF
 5618 441e 4889C7   		movq	%rax, %rdi
 5619 4421 E8000000 		call	flFreeError
 5619      00
 5620              	.L326:
1211:main.c        **** 	}
1212:main.c        **** 	return retVal;
 5621              		.loc 1 1212 0
 5622 4426 8B8540FD 		movl	-704(%rbp), %eax
 5622      FFFF
 5623              	.L327:
1213:main.c        **** }...
 5624              		.loc 1 1213 0
 5625 442c 488B5DE8 		movq	-24(%rbp), %rbx
 5626 4430 6448331C 		xorq	%fs:40, %rbx
 5626      25280000 
 5626      00
 5627 4439 7405     		je	.L328
 5628 443b E8000000 		call	__stack_chk_fail
 5628      00
 5629              	.L328:
 5630 4440 4881C408 		addq	$776, %rsp
 5630      030000
 5631 4447 5B       		popq	%rbx
 5632 4448 5D       		popq	%rbp
 5633              		.cfi_def_cfa 7, 8
 5634 4449 C3       		ret
 5635              		.cfi_endproc
 5636              	.LFE21:
 5638              		.section	.rodata
 5639 0f32 00000000 		.align 8
 5639      0000
 5640              	.LC16:
 5641 0f38 00000000 		.long	0
 5642 0f3c 80842E41 		.long	1093567616
 5643              		.align 8
 5644              	.LC17:
 5645 0f40 00000000 		.long	0
 5646 0f44 00003041 		.long	1093664768
 5647              		.text
 5648              	.Letext0:
 5649              		.file 2 "/usr/include/stdint.h"
 5650              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 5651              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 5652              		.file 5 "/usr/include/stdio.h"
 5653              		.file 6 "/usr/include/libio.h"
 5654              		.file 7 "/usr/include/x86_64-linux-gnu/bits/time.h"
 5655              		.file 8 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/backend/common/makestuff.h"
 5656              		.file 9 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/backend/libs/libfpgalink/libfpg
 5657              		.file 10 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/backend/libs/libbuffer/libbuff
 5658              		.file 11 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/backend/libs/libargtable2/argt
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000186a50 dataFromCSV
     /tmp/cckQ27s7.s:10     .bss:0000000000000000 numLines
     /tmp/cckQ27s7.s:13     .bss:0000000000000008 ptr
     /tmp/cckQ27s7.s:13     .bss:0000000000000010 enableBenchmarking
     /tmp/cckQ27s7.s:19     .text:0000000000000000 decrypt
     /tmp/cckQ27s7.s:120    .text:00000000000000dd encrypt
     /tmp/cckQ27s7.s:220    .text:00000000000001ba decrypt64
     /tmp/cckQ27s7.s:251    .text:00000000000001f7 encrypt64
     /tmp/cckQ27s7.s:282    .text:0000000000000234 myHash
     /tmp/cckQ27s7.s:356    .text:00000000000002a8 format
     /tmp/cckQ27s7.s:412    .text:0000000000000328 find
     /tmp/cckQ27s7.s:498    .text:00000000000003d5 suffBal
     /tmp/cckQ27s7.s:568    .text:000000000000046b isHexDigit
     /tmp/cckQ27s7.s:616    .text:00000000000004a9 calcChecksum
     /tmp/cckQ27s7.s:656    .text:00000000000004ea getHexNibble
     /tmp/cckQ27s7.s:724    .text:000000000000055e getHexByte
     /tmp/cckQ27s7.s:810    .rodata:00000000000000e0 errMessages
     /tmp/cckQ27s7.s:828    .text:00000000000005df doRead
     /tmp/cckQ27s7.s:1063   .text:0000000000000855 doWrite
     /tmp/cckQ27s7.s:1216   .text:0000000000000a52 parseLine
     /tmp/cckQ27s7.s:2428   .data:0000000000000000 nibbles
     /tmp/cckQ27s7.s:2744   .text:0000000000001a9b main

UNDEFINED SYMBOLS
strtok
sscanf
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fwrite
fread
flWriteChannelAsync
flAwaitAsyncWrites
__stack_chk_fail
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
printf
fclose
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
fprintf
fputc
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
puts
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
strcmp
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
readline
add_history
getline
flClose
flFreeError
