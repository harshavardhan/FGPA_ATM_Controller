   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.comm	dataFromCSV,1600080,32
   5              		.globl	numLines
   6              		.bss
   7              		.align 4
  10              	numLines:
  11 0000 00000000 		.zero	4
  12              		.globl	LOG
  15              	LOG:
  16 0004 00       		.zero	1
  17              		.globl	bankID
  18              		.data
  19              		.align 4
  22              	bankID:
  23 0000 FFFFFFFF 		.long	-1
  24              		.globl	maxAmountCanBeDispensed
  25              		.align 4
  28              	maxAmountCanBeDispensed:
  29 0004 FFFFFFFF 		.long	-1
  30              		.globl	max2000Limit
  33              	max2000Limit:
  34 0008 FF       		.byte	-1
  35              		.globl	max1000Limit
  38              	max1000Limit:
  39 0009 FF       		.byte	-1
  40              		.globl	max500Limit
  43              	max500Limit:
  44 000a FF       		.byte	-1
  45              		.globl	max100Limit
  48              	max100Limit:
  49 000b FF       		.byte	-1
  50              		.globl	maxPercent
  51 000c 00000000 		.align 8
  54              	maxPercent:
  55 0010 9A999999 		.long	2576980378
  56 0014 9999E93F 		.long	1072273817
  57              		.text
  58              		.globl	decrypt
  60              	decrypt:
  61              	.LFB6:
  62              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****    If the user is an admin : 
   3:main.c        ****    Original 64 bit -> | User ID 16-bit | Password 16-bit | 2k 8-bit | 1k 8-bit | 500 8-bit | 100 8-
   4:main.c        ****    (in VHDL before encryption)  8 7 6 5 4 3 2 1
   5:main.c        **** 
   6:main.c        ****    If the user is an accountee : 
   7:main.c        ****    Original 64 bit -> | User ID 16-bit | Password 16-bit | Amount in 32 bit |
   8:main.c        ****    (in VHDL before encryption)  8 7 6 5 4 3 2 1
   9:main.c        **** 
  10:main.c        ****    User ID 16-bit -> Least 5 significant bits indicate bankID
  11:main.c        **** */
  12:main.c        **** 
  13:main.c        **** #define _GNU_SOURCE
  14:main.c        **** 
  15:main.c        **** #include <stdint.h>
  16:main.c        **** #include <stdbool.h>
  17:main.c        **** #include <stdio.h>
  18:main.c        **** #include <stdlib.h>
  19:main.c        **** #include <argtable2.h>
  20:main.c        **** #include <string.h>
  21:main.c        **** #include <libfpgalink.h>
  22:main.c        **** #include <errno.h>
  23:main.c        **** #include <makestuff.h>
  24:main.c        **** #include <libbuffer.h>
  25:main.c        **** #include <liberror.h>
  26:main.c        **** #include <libdump.h>
  27:main.c        **** #include <readline/readline.h>
  28:main.c        **** #include <readline/history.h>
  29:main.c        **** 
  30:main.c        **** #ifdef WIN32
  31:main.c        **** #include <Windows.h>
  32:main.c        **** #else
  33:main.c        **** #include <sys/time.h>
  34:main.c        **** #endif
  35:main.c        **** 
  36:main.c        **** #define N 100005
  37:main.c        **** #define M (((ll)1 << 32)-1)
  38:main.c        **** #define maxNotes 255
  39:main.c        **** #define ll long long
  40:main.c        **** 
  41:main.c        **** int dataFromCSV[N][4];
  42:main.c        **** int numLines = 0;
  43:main.c        **** bool LOG = false;
  44:main.c        **** int bankID = -1;
  45:main.c        **** uint32_t maxAmountCanBeDispensed = M;
  46:main.c        **** uint8_t max2000Limit = maxNotes, max1000Limit = maxNotes, max500Limit = maxNotes, max100Limit = max
  47:main.c        **** double maxPercent = 0.8;
  48:main.c        **** 
  49:main.c        **** /* Adapted from tiny encryption algorithm wikipedia */
  50:main.c        **** void decrypt(uint32_t *v, uint32_t *k) {
  63              		.loc 1 50 0
  64              		.cfi_startproc
  65 0000 55       		pushq	%rbp
  66              		.cfi_def_cfa_offset 16
  67              		.cfi_offset 6, -16
  68 0001 4889E5   		movq	%rsp, %rbp
  69              		.cfi_def_cfa_register 6
  70 0004 48897DC8 		movq	%rdi, -56(%rbp)
  71 0008 488975C0 		movq	%rsi, -64(%rbp)
  51:main.c        ****     uint32_t v0 = v[0], v1 = v[1], sum = 0xC6EF3720, i;  /* set up */
  72              		.loc 1 51 0
  73 000c 488B45C8 		movq	-56(%rbp), %rax
  74 0010 8B00     		movl	(%rax), %eax
  75 0012 8945DC   		movl	%eax, -36(%rbp)
  76 0015 488B45C8 		movq	-56(%rbp), %rax
  77 0019 8B4004   		movl	4(%rax), %eax
  78 001c 8945E0   		movl	%eax, -32(%rbp)
  79 001f C745E420 		movl	$-957401312, -28(%rbp)
  79      37EFC6
  52:main.c        ****     uint32_t delta = 0x9e3779b9;                     /* a key schedule constant */
  80              		.loc 1 52 0
  81 0026 C745ECB9 		movl	$-1640531527, -20(%rbp)
  81      79379E
  53:main.c        ****     uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];   /* cache key */
  82              		.loc 1 53 0
  83 002d 488B45C0 		movq	-64(%rbp), %rax
  84 0031 8B00     		movl	(%rax), %eax
  85 0033 8945F0   		movl	%eax, -16(%rbp)
  86 0036 488B45C0 		movq	-64(%rbp), %rax
  87 003a 8B4004   		movl	4(%rax), %eax
  88 003d 8945F4   		movl	%eax, -12(%rbp)
  89 0040 488B45C0 		movq	-64(%rbp), %rax
  90 0044 8B4008   		movl	8(%rax), %eax
  91 0047 8945F8   		movl	%eax, -8(%rbp)
  92 004a 488B45C0 		movq	-64(%rbp), %rax
  93 004e 8B400C   		movl	12(%rax), %eax
  94 0051 8945FC   		movl	%eax, -4(%rbp)
  54:main.c        ****     /* basic cycle start */
  55:main.c        ****     for (i = 0; i < 32; i++) {
  95              		.loc 1 55 0
  96 0054 C745E800 		movl	$0, -24(%rbp)
  96      000000
  97 005b EB62     		jmp	.L2
  98              	.L3:
  56:main.c        ****         v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
  99              		.loc 1 56 0 discriminator 2
 100 005d 8B45DC   		movl	-36(%rbp), %eax
 101 0060 C1E004   		sall	$4, %eax
 102 0063 89C2     		movl	%eax, %edx
 103 0065 8B45F8   		movl	-8(%rbp), %eax
 104 0068 8D0C02   		leal	(%rdx,%rax), %ecx
 105 006b 8B45E4   		movl	-28(%rbp), %eax
 106 006e 8B55DC   		movl	-36(%rbp), %edx
 107 0071 01D0     		addl	%edx, %eax
 108 0073 31C1     		xorl	%eax, %ecx
 109 0075 89CA     		movl	%ecx, %edx
 110 0077 8B45DC   		movl	-36(%rbp), %eax
 111 007a C1E805   		shrl	$5, %eax
 112 007d 89C1     		movl	%eax, %ecx
 113 007f 8B45FC   		movl	-4(%rbp), %eax
 114 0082 01C8     		addl	%ecx, %eax
 115 0084 31D0     		xorl	%edx, %eax
 116 0086 2945E0   		subl	%eax, -32(%rbp)
  57:main.c        ****         v0 -= ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1);
 117              		.loc 1 57 0 discriminator 2
 118 0089 8B45E0   		movl	-32(%rbp), %eax
 119 008c C1E004   		sall	$4, %eax
 120 008f 89C2     		movl	%eax, %edx
 121 0091 8B45F0   		movl	-16(%rbp), %eax
 122 0094 8D0C02   		leal	(%rdx,%rax), %ecx
 123 0097 8B45E4   		movl	-28(%rbp), %eax
 124 009a 8B55E0   		movl	-32(%rbp), %edx
 125 009d 01D0     		addl	%edx, %eax
 126 009f 31C1     		xorl	%eax, %ecx
 127 00a1 89CA     		movl	%ecx, %edx
 128 00a3 8B45E0   		movl	-32(%rbp), %eax
 129 00a6 C1E805   		shrl	$5, %eax
 130 00a9 89C1     		movl	%eax, %ecx
 131 00ab 8B45F4   		movl	-12(%rbp), %eax
 132 00ae 01C8     		addl	%ecx, %eax
 133 00b0 31D0     		xorl	%edx, %eax
 134 00b2 2945DC   		subl	%eax, -36(%rbp)
  58:main.c        ****         sum -= delta;
 135              		.loc 1 58 0 discriminator 2
 136 00b5 8B45EC   		movl	-20(%rbp), %eax
 137 00b8 2945E4   		subl	%eax, -28(%rbp)
  55:main.c        ****         v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
 138              		.loc 1 55 0 discriminator 2
 139 00bb 8345E801 		addl	$1, -24(%rbp)
 140              	.L2:
  55:main.c        ****         v1 -= ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
 141              		.loc 1 55 0 is_stmt 0 discriminator 1
 142 00bf 837DE81F 		cmpl	$31, -24(%rbp)
 143 00c3 7698     		jbe	.L3
  59:main.c        ****     }
  60:main.c        ****     /* end cycle */
  61:main.c        ****     v[0] = v0;
 144              		.loc 1 61 0 is_stmt 1
 145 00c5 488B45C8 		movq	-56(%rbp), %rax
 146 00c9 8B55DC   		movl	-36(%rbp), %edx
 147 00cc 8910     		movl	%edx, (%rax)
  62:main.c        ****     v[1] = v1;
 148              		.loc 1 62 0
 149 00ce 488B45C8 		movq	-56(%rbp), %rax
 150 00d2 488D5004 		leaq	4(%rax), %rdx
 151 00d6 8B45E0   		movl	-32(%rbp), %eax
 152 00d9 8902     		movl	%eax, (%rdx)
  63:main.c        **** }
 153              		.loc 1 63 0
 154 00db 5D       		popq	%rbp
 155              		.cfi_def_cfa 7, 8
 156 00dc C3       		ret
 157              		.cfi_endproc
 158              	.LFE6:
 160              		.globl	encrypt
 162              	encrypt:
 163              	.LFB7:
  64:main.c        **** 
  65:main.c        **** /* Adapted from tiny encryption algorithm wikipedia */
  66:main.c        **** void encrypt(uint32_t *v, uint32_t *k) {
 164              		.loc 1 66 0
 165              		.cfi_startproc
 166 00dd 55       		pushq	%rbp
 167              		.cfi_def_cfa_offset 16
 168              		.cfi_offset 6, -16
 169 00de 4889E5   		movq	%rsp, %rbp
 170              		.cfi_def_cfa_register 6
 171 00e1 48897DC8 		movq	%rdi, -56(%rbp)
 172 00e5 488975C0 		movq	%rsi, -64(%rbp)
  67:main.c        ****     uint32_t v0 = v[0], v1 = v[1], sum = 0, i;           /* set up */
 173              		.loc 1 67 0
 174 00e9 488B45C8 		movq	-56(%rbp), %rax
 175 00ed 8B00     		movl	(%rax), %eax
 176 00ef 8945DC   		movl	%eax, -36(%rbp)
 177 00f2 488B45C8 		movq	-56(%rbp), %rax
 178 00f6 8B4004   		movl	4(%rax), %eax
 179 00f9 8945E0   		movl	%eax, -32(%rbp)
 180 00fc C745E400 		movl	$0, -28(%rbp)
 180      000000
  68:main.c        ****     uint32_t delta = 0x9e3779b9;                     /* a key schedule constant */
 181              		.loc 1 68 0
 182 0103 C745ECB9 		movl	$-1640531527, -20(%rbp)
 182      79379E
  69:main.c        ****     uint32_t k0 = k[0], k1 = k[1], k2 = k[2], k3 = k[3];   /* cache key */
 183              		.loc 1 69 0
 184 010a 488B45C0 		movq	-64(%rbp), %rax
 185 010e 8B00     		movl	(%rax), %eax
 186 0110 8945F0   		movl	%eax, -16(%rbp)
 187 0113 488B45C0 		movq	-64(%rbp), %rax
 188 0117 8B4004   		movl	4(%rax), %eax
 189 011a 8945F4   		movl	%eax, -12(%rbp)
 190 011d 488B45C0 		movq	-64(%rbp), %rax
 191 0121 8B4008   		movl	8(%rax), %eax
 192 0124 8945F8   		movl	%eax, -8(%rbp)
 193 0127 488B45C0 		movq	-64(%rbp), %rax
 194 012b 8B400C   		movl	12(%rax), %eax
 195 012e 8945FC   		movl	%eax, -4(%rbp)
  70:main.c        ****     /* basic cycle start */
  71:main.c        ****     for (i = 0; i < 32; i++) {
 196              		.loc 1 71 0
 197 0131 C745E800 		movl	$0, -24(%rbp)
 197      000000
 198 0138 EB62     		jmp	.L5
 199              	.L6:
  72:main.c        ****         sum += delta;
 200              		.loc 1 72 0 discriminator 2
 201 013a 8B45EC   		movl	-20(%rbp), %eax
 202 013d 0145E4   		addl	%eax, -28(%rbp)
  73:main.c        ****         v0 += ((v1 << 4) + k0) ^ (v1 + sum) ^ ((v1 >> 5) + k1);
 203              		.loc 1 73 0 discriminator 2
 204 0140 8B45E0   		movl	-32(%rbp), %eax
 205 0143 C1E004   		sall	$4, %eax
 206 0146 89C2     		movl	%eax, %edx
 207 0148 8B45F0   		movl	-16(%rbp), %eax
 208 014b 8D0C02   		leal	(%rdx,%rax), %ecx
 209 014e 8B45E4   		movl	-28(%rbp), %eax
 210 0151 8B55E0   		movl	-32(%rbp), %edx
 211 0154 01D0     		addl	%edx, %eax
 212 0156 31C1     		xorl	%eax, %ecx
 213 0158 89CA     		movl	%ecx, %edx
 214 015a 8B45E0   		movl	-32(%rbp), %eax
 215 015d C1E805   		shrl	$5, %eax
 216 0160 89C1     		movl	%eax, %ecx
 217 0162 8B45F4   		movl	-12(%rbp), %eax
 218 0165 01C8     		addl	%ecx, %eax
 219 0167 31D0     		xorl	%edx, %eax
 220 0169 0145DC   		addl	%eax, -36(%rbp)
  74:main.c        ****         v1 += ((v0 << 4) + k2) ^ (v0 + sum) ^ ((v0 >> 5) + k3);
 221              		.loc 1 74 0 discriminator 2
 222 016c 8B45DC   		movl	-36(%rbp), %eax
 223 016f C1E004   		sall	$4, %eax
 224 0172 89C2     		movl	%eax, %edx
 225 0174 8B45F8   		movl	-8(%rbp), %eax
 226 0177 8D0C02   		leal	(%rdx,%rax), %ecx
 227 017a 8B45E4   		movl	-28(%rbp), %eax
 228 017d 8B55DC   		movl	-36(%rbp), %edx
 229 0180 01D0     		addl	%edx, %eax
 230 0182 31C1     		xorl	%eax, %ecx
 231 0184 89CA     		movl	%ecx, %edx
 232 0186 8B45DC   		movl	-36(%rbp), %eax
 233 0189 C1E805   		shrl	$5, %eax
 234 018c 89C1     		movl	%eax, %ecx
 235 018e 8B45FC   		movl	-4(%rbp), %eax
 236 0191 01C8     		addl	%ecx, %eax
 237 0193 31D0     		xorl	%edx, %eax
 238 0195 0145E0   		addl	%eax, -32(%rbp)
  71:main.c        ****         sum += delta;
 239              		.loc 1 71 0 discriminator 2
 240 0198 8345E801 		addl	$1, -24(%rbp)
 241              	.L5:
  71:main.c        ****         sum += delta;
 242              		.loc 1 71 0 is_stmt 0 discriminator 1
 243 019c 837DE81F 		cmpl	$31, -24(%rbp)
 244 01a0 7698     		jbe	.L6
  75:main.c        ****     }
  76:main.c        ****     /* end cycle */
  77:main.c        ****     v[0] = v0;
 245              		.loc 1 77 0 is_stmt 1
 246 01a2 488B45C8 		movq	-56(%rbp), %rax
 247 01a6 8B55DC   		movl	-36(%rbp), %edx
 248 01a9 8910     		movl	%edx, (%rax)
  78:main.c        ****     v[1] = v1;
 249              		.loc 1 78 0
 250 01ab 488B45C8 		movq	-56(%rbp), %rax
 251 01af 488D5004 		leaq	4(%rax), %rdx
 252 01b3 8B45E0   		movl	-32(%rbp), %eax
 253 01b6 8902     		movl	%eax, (%rdx)
  79:main.c        **** }
 254              		.loc 1 79 0
 255 01b8 5D       		popq	%rbp
 256              		.cfi_def_cfa 7, 8
 257 01b9 C3       		ret
 258              		.cfi_endproc
 259              	.LFE7:
 261              		.globl	decrypt64
 263              	decrypt64:
 264              	.LFB8:
  80:main.c        **** 
  81:main.c        **** void decrypt64(uint32_t *inpData) {
 265              		.loc 1 81 0
 266              		.cfi_startproc
 267 01ba 55       		pushq	%rbp
 268              		.cfi_def_cfa_offset 16
 269              		.cfi_offset 6, -16
 270 01bb 4889E5   		movq	%rsp, %rbp
 271              		.cfi_def_cfa_register 6
 272 01be 4883EC18 		subq	$24, %rsp
 273 01c2 48897DE8 		movq	%rdi, -24(%rbp)
  82:main.c        ****     uint32_t key[4];
  83:main.c        ****     key[0] = 0x2927c18c;
 274              		.loc 1 83 0
 275 01c6 C745F08C 		movl	$690471308, -16(%rbp)
 275      C12729
  84:main.c        ****     key[1] = 0x75f8c48f;
 276              		.loc 1 84 0
 277 01cd C745F48F 		movl	$1979237519, -12(%rbp)
 277      C4F875
  85:main.c        ****     key[2] = 0x43fd99f7;
 278              		.loc 1 85 0
 279 01d4 C745F8F7 		movl	$1140693495, -8(%rbp)
 279      99FD43
  86:main.c        ****     key[3] = 0xff0f7457;
 280              		.loc 1 86 0
 281 01db C745FC57 		movl	$-15764393, -4(%rbp)
 281      740FFF
  87:main.c        ****     decrypt(inpData, key);
 282              		.loc 1 87 0
 283 01e2 488D55F0 		leaq	-16(%rbp), %rdx
 284 01e6 488B45E8 		movq	-24(%rbp), %rax
 285 01ea 4889D6   		movq	%rdx, %rsi
 286 01ed 4889C7   		movq	%rax, %rdi
 287 01f0 E8000000 		call	decrypt
 287      00
  88:main.c        **** }
 288              		.loc 1 88 0
 289 01f5 C9       		leave
 290              		.cfi_def_cfa 7, 8
 291 01f6 C3       		ret
 292              		.cfi_endproc
 293              	.LFE8:
 295              		.globl	encrypt64
 297              	encrypt64:
 298              	.LFB9:
  89:main.c        **** 
  90:main.c        **** void encrypt64(uint32_t *inpData) {
 299              		.loc 1 90 0
 300              		.cfi_startproc
 301 01f7 55       		pushq	%rbp
 302              		.cfi_def_cfa_offset 16
 303              		.cfi_offset 6, -16
 304 01f8 4889E5   		movq	%rsp, %rbp
 305              		.cfi_def_cfa_register 6
 306 01fb 4883EC18 		subq	$24, %rsp
 307 01ff 48897DE8 		movq	%rdi, -24(%rbp)
  91:main.c        ****     uint32_t key[4];
  92:main.c        ****     key[0] = 0x2927c18c;
 308              		.loc 1 92 0
 309 0203 C745F08C 		movl	$690471308, -16(%rbp)
 309      C12729
  93:main.c        ****     key[1] = 0x75f8c48f;
 310              		.loc 1 93 0
 311 020a C745F48F 		movl	$1979237519, -12(%rbp)
 311      C4F875
  94:main.c        ****     key[2] = 0x43fd99f7;
 312              		.loc 1 94 0
 313 0211 C745F8F7 		movl	$1140693495, -8(%rbp)
 313      99FD43
  95:main.c        ****     key[3] = 0xff0f7457;
 314              		.loc 1 95 0
 315 0218 C745FC57 		movl	$-15764393, -4(%rbp)
 315      740FFF
  96:main.c        ****     encrypt(inpData, key);
 316              		.loc 1 96 0
 317 021f 488D55F0 		leaq	-16(%rbp), %rdx
 318 0223 488B45E8 		movq	-24(%rbp), %rax
 319 0227 4889D6   		movq	%rdx, %rsi
 320 022a 4889C7   		movq	%rax, %rdi
 321 022d E8000000 		call	encrypt
 321      00
  97:main.c        **** }
 322              		.loc 1 97 0
 323 0232 C9       		leave
 324              		.cfi_def_cfa 7, 8
 325 0233 C3       		ret
 326              		.cfi_endproc
 327              	.LFE9:
 329              		.globl	myHash
 331              	myHash:
 332              	.LFB10:
  98:main.c        **** 
  99:main.c        **** uint16_t myHash(uint16_t befHash) {
 333              		.loc 1 99 0
 334              		.cfi_startproc
 335 0234 55       		pushq	%rbp
 336              		.cfi_def_cfa_offset 16
 337              		.cfi_offset 6, -16
 338 0235 4889E5   		movq	%rsp, %rbp
 339              		.cfi_def_cfa_register 6
 340 0238 89F8     		movl	%edi, %eax
 341 023a 668945EC 		movw	%ax, -20(%rbp)
 100:main.c        ****     uint16_t ret = 0;
 342              		.loc 1 100 0
 343 023e 66C745F8 		movw	$0, -8(%rbp)
 343      0000
 344              	.LBB2:
 101:main.c        ****     for (uint16_t i = 0; i <= 15; i++) {
 345              		.loc 1 101 0
 346 0244 66C745FA 		movw	$0, -6(%rbp)
 346      0000
 347 024a EB51     		jmp	.L10
 348              	.L12:
 102:main.c        ****         if ((befHash & (1 << i)) != 0) {
 349              		.loc 1 102 0
 350 024c 0FB755EC 		movzwl	-20(%rbp), %edx
 351 0250 0FB745FA 		movzwl	-6(%rbp), %eax
 352 0254 89C1     		movl	%eax, %ecx
 353 0256 D3FA     		sarl	%cl, %edx
 354 0258 89D0     		movl	%edx, %eax
 355 025a 83E001   		andl	$1, %eax
 356 025d 85C0     		testl	%eax, %eax
 357 025f 7431     		je	.L11
 358              	.LBB3:
 103:main.c        ****             uint16_t leftShift = (uint16_t)bankID % 16;
 359              		.loc 1 103 0
 360 0261 8B050000 		movl	bankID(%rip), %eax
 360      0000
 361 0267 83E00F   		andl	$15, %eax
 362 026a 668945FC 		movw	%ax, -4(%rbp)
 104:main.c        ****             uint16_t j = ((i + leftShift) % 16);
 363              		.loc 1 104 0
 364 026e 0FB745FC 		movzwl	-4(%rbp), %eax
 365 0272 0FB755FA 		movzwl	-6(%rbp), %edx
 366 0276 01D0     		addl	%edx, %eax
 367 0278 83E00F   		andl	$15, %eax
 368 027b 668945FE 		movw	%ax, -2(%rbp)
 105:main.c        ****             ret += (1 << j);
 369              		.loc 1 105 0
 370 027f 0FB745FE 		movzwl	-2(%rbp), %eax
 371 0283 BA010000 		movl	$1, %edx
 371      00
 372 0288 89C1     		movl	%eax, %ecx
 373 028a D3E2     		sall	%cl, %edx
 374 028c 89D0     		movl	%edx, %eax
 375 028e 660145F8 		addw	%ax, -8(%rbp)
 376              	.L11:
 377              	.LBE3:
 101:main.c        ****         if ((befHash & (1 << i)) != 0) {
 378              		.loc 1 101 0
 379 0292 0FB745FA 		movzwl	-6(%rbp), %eax
 380 0296 83C001   		addl	$1, %eax
 381 0299 668945FA 		movw	%ax, -6(%rbp)
 382              	.L10:
 101:main.c        ****         if ((befHash & (1 << i)) != 0) {
 383              		.loc 1 101 0 is_stmt 0 discriminator 1
 384 029d 66837DFA 		cmpw	$15, -6(%rbp)
 384      0F
 385 02a2 76A8     		jbe	.L12
 386              	.LBE2:
 106:main.c        ****         }
 107:main.c        ****     }
 108:main.c        ****     return ret;
 387              		.loc 1 108 0 is_stmt 1
 388 02a4 0FB745F8 		movzwl	-8(%rbp), %eax
 109:main.c        **** }
 389              		.loc 1 109 0
 390 02a8 5D       		popq	%rbp
 391              		.cfi_def_cfa 7, 8
 392 02a9 C3       		ret
 393              		.cfi_endproc
 394              	.LFE10:
 396              		.section	.rodata
 397              	.LC0:
 398 0000 2C00     		.string	","
 399              	.LC1:
 400 0002 256400   		.string	"%d"
 401              		.text
 402              		.globl	format
 404              	format:
 405              	.LFB11:
 110:main.c        **** 
 111:main.c        **** void format(char *line) {
 406              		.loc 1 111 0
 407              		.cfi_startproc
 408 02aa 55       		pushq	%rbp
 409              		.cfi_def_cfa_offset 16
 410              		.cfi_offset 6, -16
 411 02ab 4889E5   		movq	%rsp, %rbp
 412              		.cfi_def_cfa_register 6
 413 02ae 4883EC20 		subq	$32, %rsp
 414 02b2 48897DE8 		movq	%rdi, -24(%rbp)
 112:main.c        ****     char *wordPtr;
 113:main.c        ****     wordPtr = strtok(line, ",");
 415              		.loc 1 113 0
 416 02b6 488B45E8 		movq	-24(%rbp), %rax
 417 02ba BE000000 		movl	$.LC0, %esi
 417      00
 418 02bf 4889C7   		movq	%rax, %rdi
 419 02c2 E8000000 		call	strtok
 419      00
 420 02c7 488945F8 		movq	%rax, -8(%rbp)
 114:main.c        ****     int cnt = 0;
 421              		.loc 1 114 0
 422 02cb C745F400 		movl	$0, -12(%rbp)
 422      000000
 115:main.c        ****     while (wordPtr != NULL) {
 423              		.loc 1 115 0
 424 02d2 EB4D     		jmp	.L15
 425              	.L16:
 116:main.c        ****         sscanf(wordPtr, "%d", &dataFromCSV[numLines][cnt]);
 426              		.loc 1 116 0
 427 02d4 8B150000 		movl	numLines(%rip), %edx
 427      0000
 428 02da 8B45F4   		movl	-12(%rbp), %eax
 429 02dd 4898     		cltq
 430 02df 4863D2   		movslq	%edx, %rdx
 431 02e2 48C1E202 		salq	$2, %rdx
 432 02e6 4801D0   		addq	%rdx, %rax
 433 02e9 48C1E002 		salq	$2, %rax
 434 02ed 488D9000 		leaq	dataFromCSV(%rax), %rdx
 434      000000
 435 02f4 488B45F8 		movq	-8(%rbp), %rax
 436 02f8 BE000000 		movl	$.LC1, %esi
 436      00
 437 02fd 4889C7   		movq	%rax, %rdi
 438 0300 B8000000 		movl	$0, %eax
 438      00
 439 0305 E8000000 		call	sscanf
 439      00
 117:main.c        ****         wordPtr = strtok(NULL, ",");
 440              		.loc 1 117 0
 441 030a BE000000 		movl	$.LC0, %esi
 441      00
 442 030f BF000000 		movl	$0, %edi
 442      00
 443 0314 E8000000 		call	strtok
 443      00
 444 0319 488945F8 		movq	%rax, -8(%rbp)
 118:main.c        ****         cnt++;
 445              		.loc 1 118 0
 446 031d 8345F401 		addl	$1, -12(%rbp)
 447              	.L15:
 115:main.c        ****         sscanf(wordPtr, "%d", &dataFromCSV[numLines][cnt]);
 448              		.loc 1 115 0 discriminator 1
 449 0321 48837DF8 		cmpq	$0, -8(%rbp)
 449      00
 450 0326 75AC     		jne	.L16
 119:main.c        ****     }
 120:main.c        **** }
 451              		.loc 1 120 0
 452 0328 C9       		leave
 453              		.cfi_def_cfa 7, 8
 454 0329 C3       		ret
 455              		.cfi_endproc
 456              	.LFE11:
 458              		.globl	find
 460              	find:
 461              	.LFB12:
 121:main.c        **** 
 122:main.c        **** bool find(uint16_t userID, uint16_t hashedPin, bool *isAdmin, int *bal, int *inLineNum) {
 462              		.loc 1 122 0
 463              		.cfi_startproc
 464 032a 55       		pushq	%rbp
 465              		.cfi_def_cfa_offset 16
 466              		.cfi_offset 6, -16
 467 032b 4889E5   		movq	%rsp, %rbp
 468              		.cfi_def_cfa_register 6
 469 032e 89F0     		movl	%esi, %eax
 470 0330 488955E0 		movq	%rdx, -32(%rbp)
 471 0334 48894DD8 		movq	%rcx, -40(%rbp)
 472 0338 4C8945D0 		movq	%r8, -48(%rbp)
 473 033c 66897DEC 		movw	%di, -20(%rbp)
 474 0340 668945E8 		movw	%ax, -24(%rbp)
 123:main.c        ****     bool pos = false;
 475              		.loc 1 123 0
 476 0344 C645FB00 		movb	$0, -5(%rbp)
 477              	.LBB4:
 124:main.c        ****     for (int i = 1; i <= numLines; i++) {
 478              		.loc 1 124 0
 479 0348 C745FC01 		movl	$1, -4(%rbp)
 479      000000
 480 034f EB75     		jmp	.L18
 481              	.L22:
 125:main.c        ****         if (userID == (uint16_t) dataFromCSV[i][0] && hashedPin == (uint16_t) dataFromCSV[i][1]) {
 482              		.loc 1 125 0
 483 0351 8B45FC   		movl	-4(%rbp), %eax
 484 0354 4898     		cltq
 485 0356 48C1E004 		salq	$4, %rax
 486 035a 48050000 		addq	$dataFromCSV, %rax
 486      0000
 487 0360 8B00     		movl	(%rax), %eax
 488 0362 663B45EC 		cmpw	-20(%rbp), %ax
 489 0366 755A     		jne	.L19
 490              		.loc 1 125 0 is_stmt 0 discriminator 1
 491 0368 8B45FC   		movl	-4(%rbp), %eax
 492 036b 4898     		cltq
 493 036d 48C1E004 		salq	$4, %rax
 494 0371 48050000 		addq	$dataFromCSV+4, %rax
 494      0000
 495 0377 8B00     		movl	(%rax), %eax
 496 0379 663B45E8 		cmpw	-24(%rbp), %ax
 497 037d 7543     		jne	.L19
 126:main.c        ****             pos = true;
 498              		.loc 1 126 0 is_stmt 1
 499 037f C645FB01 		movb	$1, -5(%rbp)
 127:main.c        ****             if (dataFromCSV[i][2] == 1) *isAdmin = true;
 500              		.loc 1 127 0
 501 0383 8B45FC   		movl	-4(%rbp), %eax
 502 0386 4898     		cltq
 503 0388 48C1E004 		salq	$4, %rax
 504 038c 48050000 		addq	$dataFromCSV+8, %rax
 504      0000
 505 0392 8B00     		movl	(%rax), %eax
 506 0394 83F801   		cmpl	$1, %eax
 507 0397 7507     		jne	.L20
 508              		.loc 1 127 0 is_stmt 0 discriminator 1
 509 0399 488B45E0 		movq	-32(%rbp), %rax
 510 039d C60001   		movb	$1, (%rax)
 511              	.L20:
 128:main.c        ****             *bal = dataFromCSV[i][3];
 512              		.loc 1 128 0 is_stmt 1
 513 03a0 8B45FC   		movl	-4(%rbp), %eax
 514 03a3 4898     		cltq
 515 03a5 48C1E004 		salq	$4, %rax
 516 03a9 48050000 		addq	$dataFromCSV+12, %rax
 516      0000
 517 03af 8B10     		movl	(%rax), %edx
 518 03b1 488B45D8 		movq	-40(%rbp), %rax
 519 03b5 8910     		movl	%edx, (%rax)
 129:main.c        ****             *inLineNum = i;
 520              		.loc 1 129 0
 521 03b7 488B45D0 		movq	-48(%rbp), %rax
 522 03bb 8B55FC   		movl	-4(%rbp), %edx
 523 03be 8910     		movl	%edx, (%rax)
 130:main.c        ****             break;
 524              		.loc 1 130 0
 525 03c0 EB0F     		jmp	.L21
 526              	.L19:
 124:main.c        ****         if (userID == (uint16_t) dataFromCSV[i][0] && hashedPin == (uint16_t) dataFromCSV[i][1]) {
 527              		.loc 1 124 0
 528 03c2 8345FC01 		addl	$1, -4(%rbp)
 529              	.L18:
 124:main.c        ****         if (userID == (uint16_t) dataFromCSV[i][0] && hashedPin == (uint16_t) dataFromCSV[i][1]) {
 530              		.loc 1 124 0 is_stmt 0 discriminator 1
 531 03c6 8B050000 		movl	numLines(%rip), %eax
 531      0000
 532 03cc 3945FC   		cmpl	%eax, -4(%rbp)
 533 03cf 7E80     		jle	.L22
 534              	.L21:
 535              	.LBE4:
 131:main.c        ****         }
 132:main.c        ****     }
 133:main.c        ****     return pos;
 536              		.loc 1 133 0 is_stmt 1
 537 03d1 0FB645FB 		movzbl	-5(%rbp), %eax
 134:main.c        **** }
 538              		.loc 1 134 0
 539 03d5 5D       		popq	%rbp
 540              		.cfi_def_cfa 7, 8
 541 03d6 C3       		ret
 542              		.cfi_endproc
 543              	.LFE12:
 545              		.globl	suffBalUser
 547              	suffBalUser:
 548              	.LFB13:
 135:main.c        **** 
 136:main.c        **** bool suffBalUser(int bal, int *reqAmo) {
 549              		.loc 1 136 0
 550              		.cfi_startproc
 551 03d7 55       		pushq	%rbp
 552              		.cfi_def_cfa_offset 16
 553              		.cfi_offset 6, -16
 554 03d8 4889E5   		movq	%rsp, %rbp
 555              		.cfi_def_cfa_register 6
 556 03db 897DEC   		movl	%edi, -20(%rbp)
 557 03de 488975E0 		movq	%rsi, -32(%rbp)
 137:main.c        ****     bool hasSuffBal = true; 
 558              		.loc 1 137 0
 559 03e2 C645FF01 		movb	$1, -1(%rbp)
 138:main.c        ****     if (*reqAmo > maxPercent * bal) hasSuffBal = false;
 560              		.loc 1 138 0
 561 03e6 488B45E0 		movq	-32(%rbp), %rax
 562 03ea 8B00     		movl	(%rax), %eax
 563 03ec F20F2AC0 		cvtsi2sd	%eax, %xmm0
 564 03f0 F20F2A4D 		cvtsi2sd	-20(%rbp), %xmm1
 564      EC
 565 03f5 F20F1015 		movsd	maxPercent(%rip), %xmm2
 565      00000000 
 566 03fd F20F59CA 		mulsd	%xmm2, %xmm1
 567 0401 660F2EC1 		ucomisd	%xmm1, %xmm0
 568 0405 7604     		jbe	.L25
 569              		.loc 1 138 0 is_stmt 0 discriminator 1
 570 0407 C645FF00 		movb	$0, -1(%rbp)
 571              	.L25:
 139:main.c        ****     return hasSuffBal;
 572              		.loc 1 139 0 is_stmt 1
 573 040b 0FB645FF 		movzbl	-1(%rbp), %eax
 140:main.c        **** }
 574              		.loc 1 140 0
 575 040f 5D       		popq	%rbp
 576              		.cfi_def_cfa 7, 8
 577 0410 C3       		ret
 578              		.cfi_endproc
 579              	.LFE13:
 581              		.section	.rodata
 582              	.LC2:
 583 0005 556E7061 		.string	"Unparseable hex number"
 583      72736561 
 583      626C6520 
 583      68657820 
 583      6E756D62 
 584              	.LC3:
 585 001c 4368616E 		.string	"Channel out of range"
 585      6E656C20 
 585      6F757420 
 585      6F662072 
 585      616E6765 
 586              	.LC4:
 587 0031 436F6E64 		.string	"Conduit out of range"
 587      75697420 
 587      6F757420 
 587      6F662072 
 587      616E6765 
 588              	.LC5:
 589 0046 496C6C65 		.string	"Illegal character"
 589      67616C20 
 589      63686172 
 589      61637465 
 589      7200
 590              	.LC6:
 591 0058 556E7465 		.string	"Unterminated string"
 591      726D696E 
 591      61746564 
 591      20737472 
 591      696E6700 
 592              	.LC7:
 593 006c 4E6F206D 		.string	"No memory"
 593      656D6F72 
 593      7900
 594              	.LC8:
 595 0076 456D7074 		.string	"Empty string"
 595      79207374 
 595      72696E67 
 595      00
 596              	.LC9:
 597 0083 4F646420 		.string	"Odd number of digits"
 597      6E756D62 
 597      6572206F 
 597      66206469 
 597      67697473 
 598              	.LC10:
 599 0098 43616E6E 		.string	"Cannot load file"
 599      6F74206C 
 599      6F616420 
 599      66696C65 
 599      00
 600              	.LC11:
 601 00a9 43616E6E 		.string	"Cannot save file"
 601      6F742073 
 601      61766520 
 601      66696C65 
 601      00
 602              	.LC12:
 603 00ba 42616420 		.string	"Bad arguments"
 603      61726775 
 603      6D656E74 
 603      7300
 604 00c8 00000000 		.align 32
 604      00000000 
 604      00000000 
 604      00000000 
 604      00000000 
 607              	errMessages:
 608 00e0 00000000 		.quad	0
 608      00000000 
 609 00e8 00000000 		.quad	0
 609      00000000 
 610 00f0 00000000 		.quad	.LC2
 610      00000000 
 611 00f8 00000000 		.quad	.LC3
 611      00000000 
 612 0100 00000000 		.quad	.LC4
 612      00000000 
 613 0108 00000000 		.quad	.LC5
 613      00000000 
 614 0110 00000000 		.quad	.LC6
 614      00000000 
 615 0118 00000000 		.quad	.LC7
 615      00000000 
 616 0120 00000000 		.quad	.LC8
 616      00000000 
 617 0128 00000000 		.quad	.LC9
 617      00000000 
 618 0130 00000000 		.quad	.LC10
 618      00000000 
 619 0138 00000000 		.quad	.LC11
 619      00000000 
 620 0140 00000000 		.quad	.LC12
 620      00000000 
 621              		.align 8
 622              	.LC13:
 623 0148 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 623      20202020 
 623      20202020 
 623      76656E64 
 623      6F722049 
 624              	.LC14:
 625 017d 3C564944 		.string	"<VID:PID>"
 625      3A504944 
 625      3E00
 626              	.LC15:
 627 0187 69767000 		.string	"ivp"
 628              	.LC16:
 629 018b 6900     		.string	"i"
 630 018d 000000   		.align 8
 631              	.LC17:
 632 0190 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 632      20202056 
 632      49442C20 
 632      50494420 
 632      616E6420 
 633              	.LC18:
 634 01c5 3C564944 		.string	"<VID:PID[:DID]>"
 634      3A504944 
 634      5B3A4449 
 634      445D3E00 
 635              	.LC19:
 636 01d5 767000   		.string	"vp"
 637              	.LC20:
 638 01d8 7600     		.string	"v"
 639 01da 00000000 		.align 8
 639      0000
 640              	.LC21:
 641 01e0 20202020 		.string	"                    sets bank id"
 641      20202020 
 641      20202020 
 641      20202020 
 641      20202020 
 642              	.LC22:
 643 0201 62616E6B 		.string	"bank id in decimal"
 643      20696420 
 643      696E2064 
 643      6563696D 
 643      616C00
 644              	.LC23:
 645 0214 62696400 		.string	"bid"
 646              	.LC24:
 647 0218 6200     		.string	"b"
 648 021a 00000000 		.align 8
 648      0000
 649              	.LC25:
 650 0220 20202020 		.string	"                    starts atm service"
 650      20202020 
 650      20202020 
 650      20202020 
 650      20202020 
 651              	.LC26:
 652 0247 61746D00 		.string	"atm"
 653              	.LC27:
 654 024b 7900     		.string	"y"
 655 024d 000000   		.align 8
 656              	.LC28:
 657 0250 20202020 		.string	"        gives log on more events"
 657      20202020 
 657      67697665 
 657      73206C6F 
 657      67206F6E 
 658              	.LC29:
 659 0271 6C6F6700 		.string	"log"
 660              	.LC30:
 661 0275 6C00     		.string	"l"
 662 0277 00       		.align 8
 663              	.LC31:
 664 0278 20202020 		.string	"                     print this help and exit"
 664      20202020 
 664      20202020 
 664      20202020 
 664      20202020 
 665              	.LC32:
 666 02a6 68656C70 		.string	"help"
 666      00
 667              	.LC33:
 668 02ab 6800     		.string	"h"
 669              	.LC34:
 670 02ad 666C636C 		.string	"flcli"
 670      6900
 671              	.LC35:
 672 02b3 25733A20 		.string	"%s: insufficient memory\n"
 672      696E7375 
 672      66666963 
 672      69656E74 
 672      206D656D 
 673              	.LC36:
 674 02cc 496E7661 		.string	"Invalid bankID"
 674      6C696420 
 674      62616E6B 
 674      494400
 675 02db 00000000 		.align 8
 675      00
 676              	.LC37:
 677 02e0 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2017 Jarvis \n\n Usage: %s"
 677      4C696E6B 
 677      20436F6D 
 677      6D616E64 
 677      2D4C696E 
 678              	.LC38:
 679 0327 0A00     		.string	"\n"
 680 0329 00000000 		.align 8
 680      000000
 681              	.LC39:
 682 0330 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 682      65726163 
 682      74207769 
 682      74682061 
 682      6E204650 
 683              	.LC40:
 684 0354 2020252D 		.string	"  %-10s %s\n"
 684      31307320 
 684      25730A00 
 685              		.align 8
 686              	.LC41:
 687 0360 54727920 		.string	"Try '%s --help' for more information.\n"
 687      27257320 
 687      2D2D6865 
 687      6C702720 
 687      666F7220 
 688 0387 00       		.align 8
 689              	.LC42:
 690 0388 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 690      6D707469 
 690      6E672074 
 690      6F206F70 
 690      656E2063 
 691              	.LC43:
 692 03c0 4C6F6164 		.string	"Loading firmware into %s...\n"
 692      696E6720 
 692      6669726D 
 692      77617265 
 692      20696E74 
 693              	.LC44:
 694 03dd 41776169 		.string	"Awaiting renumeration"
 694      74696E67 
 694      2072656E 
 694      756D6572 
 694      6174696F 
 695 03f3 00000000 		.align 8
 695      00
 696              	.LC45:
 697 03f8 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 697      4C696E6B 
 697      20646576 
 697      69636520 
 697      64696420 
 698 042b 00000000 		.align 8
 698      00
 699              	.LC46:
 700 0430 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 700      6D707469 
 700      6E672074 
 700      6F206F70 
 700      656E2063 
 701 046d 000000   		.align 8
 702              	.LC47:
 703 0470 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 703      64206E6F 
 703      74206F70 
 703      656E2046 
 703      5047414C 
 704 04ba 00000000 		.align 8
 704      0000
 705              	.LC48:
 706 04c0 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 706      65637465 
 706      6420746F 
 706      20465047 
 706      414C696E 
 707              	.LC49:
 708 050f 722B00   		.string	"r+"
 709              	.LC50:
 710 0512 53616D70 		.string	"SampleBackEndDatabase.csv"
 710      6C654261 
 710      636B456E 
 710      64446174 
 710      61626173 
 711              	.LC51:
 712 052c 43737620 		.string	"Csv doesn't exist "
 712      646F6573 
 712      6E277420 
 712      65786973 
 712      742000
 713              	.LC52:
 714 053f 57726974 		.string	"Write to channel %u = %u \n"
 714      6520746F 
 714      20636861 
 714      6E6E656C 
 714      20257520 
 715              	.LC53:
 716 055a 52656164 		.string	"Read from channel 0 = %u \n"
 716      2066726F 
 716      6D206368 
 716      616E6E65 
 716      6C203020 
 717              	.LC54:
 718 0575 52656164 		.string	"Read from channel %u = %u \n"
 718      2066726F 
 718      6D206368 
 718      616E6E65 
 718      6C202575 
 719              	.LC55:
 720 0591 756E6861 		.string	"unhashedPin %u\n"
 720      73686564 
 720      50696E20 
 720      25750A00 
 721              	.LC56:
 722 05a1 75736572 		.string	"userID %u\n"
 722      49442025 
 722      750A00
 723              	.LC57:
 724 05ac 68617368 		.string	"hashedPin %u\n"
 724      65645069 
 724      6E202575 
 724      0A00
 725              	.LC58:
 726 05ba 56616C69 		.string	"Valid user found "
 726      64207573 
 726      65722066 
 726      6F756E64 
 726      2000
 727              	.LC59:
 728 05cc 53756666 		.string	"Sufficient Balance in account"
 728      69636965 
 728      6E742042 
 728      616C616E 
 728      63652069 
 729              	.LC60:
 730 05ea 772B00   		.string	"w+"
 731 05ed 000000   		.align 8
 732              	.LC61:
 733 05f0 22557365 		.string	"\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (decimal)\""
 733      72204944 
 733      20286465 
 733      63696D61 
 733      6C29222C 
 734              	.LC62:
 735 0635 496E7375 		.string	"Insufficient Balance "
 735      66666963 
 735      69656E74 
 735      2042616C 
 735      616E6365 
 736              	.LC63:
 737 064b 55736572 		.string	"User has admin privileges "
 737      20686173 
 737      2061646D 
 737      696E2070 
 737      72697669 
 738              	.LC64:
 739 0666 496E7661 		.string	"Invalid user "
 739      6C696420 
 739      75736572 
 739      2000
 740              	.LC65:
 741 0674 56616C69 		.string	"Valid user found from cache "
 741      64207573 
 741      65722066 
 741      6F756E64 
 741      2066726F 
 742              	.LC66:
 743 0691 42656620 		.string	"Bef Balance %d\n"
 743      42616C61 
 743      6E636520 
 743      25640A00 
 744              	.LC67:
 745 06a1 46696E61 		.string	"Final Balance %d\n"
 745      6C204261 
 745      6C616E63 
 745      65202564 
 745      0A00
 746              	.LC68:
 747 06b3 41646D69 		.string	"Admin found from cache"
 747      6E20666F 
 747      756E6420 
 747      66726F6D 
 747      20636163 
 748              	.LC69:
 749 06ca 456D7074 		.string	"Empty cache"
 749      79206361 
 749      63686500 
 750 06d6 0000     		.align 8
 751              	.LC70:
 752 06d8 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 752      46504741 
 752      4C696E6B 
 752      20646576 
 752      69636520 
 753 0724 00000000 		.align 8
 754              	.LC71:
 755 0728 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 755      6F6E2072 
 755      65717565 
 755      73746564 
 755      20627574 
 756              	.LC72:
 757 0765 25730A00 		.string	"%s\n"
 758              		.text
 759              		.globl	main
 761              	main:
 762              	.LFB14:
 141:main.c        **** 
 142:main.c        **** static const char *const errMessages[] = {
 143:main.c        ****         NULL,
 144:main.c        ****         NULL,
 145:main.c        ****         "Unparseable hex number",
 146:main.c        ****         "Channel out of range",
 147:main.c        ****         "Conduit out of range",
 148:main.c        ****         "Illegal character",
 149:main.c        ****         "Unterminated string",
 150:main.c        ****         "No memory",
 151:main.c        ****         "Empty string",
 152:main.c        ****         "Odd number of digits",
 153:main.c        ****         "Cannot load file",
 154:main.c        ****         "Cannot save file",
 155:main.c        ****         "Bad arguments"
 156:main.c        **** };
 157:main.c        **** 
 158:main.c        **** typedef enum {
 159:main.c        ****     FLP_SUCCESS,
 160:main.c        ****     FLP_LIBERR,
 161:main.c        ****     FLP_BAD_HEX,
 162:main.c        ****     FLP_CHAN_RANGE,
 163:main.c        ****     FLP_CONDUIT_RANGE,
 164:main.c        ****     FLP_ILL_CHAR,
 165:main.c        ****     FLP_UNTERM_STRING,
 166:main.c        ****     FLP_NO_MEMORY,
 167:main.c        ****     FLP_EMPTY_STRING,
 168:main.c        ****     FLP_ODD_DIGITS,
 169:main.c        ****     FLP_CANNOT_LOAD,
 170:main.c        ****     FLP_CANNOT_SAVE,
 171:main.c        ****     FLP_ARGS
 172:main.c        **** } ReturnCode;
 173:main.c        **** 
 174:main.c        **** int main(int argc, char *argv[]) {
 763              		.loc 1 174 0
 764              		.cfi_startproc
 765 0411 55       		pushq	%rbp
 766              		.cfi_def_cfa_offset 16
 767              		.cfi_offset 6, -16
 768 0412 4889E5   		movq	%rsp, %rbp
 769              		.cfi_def_cfa_register 6
 770 0415 53       		pushq	%rbx
 771 0416 4881ECE8 		subq	$488, %rsp
 771      010000
 772              		.cfi_offset 3, -24
 773 041d 89BD1CFE 		movl	%edi, -484(%rbp)
 773      FFFF
 774 0423 4889B510 		movq	%rsi, -496(%rbp)
 774      FEFFFF
 175:main.c        ****     ReturnCode retVal = FLP_SUCCESS;
 775              		.loc 1 175 0
 776 042a C7856CFE 		movl	$0, -404(%rbp)
 776      FFFF0000 
 776      0000
 176:main.c        **** 
 177:main.c        ****     struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product I
 777              		.loc 1 177 0
 778 0434 B9000000 		movl	$.LC13, %ecx
 778      00
 779 0439 BA000000 		movl	$.LC14, %edx
 779      00
 780 043e BE000000 		movl	$.LC15, %esi
 780      00
 781 0443 BF000000 		movl	$.LC16, %edi
 781      00
 782 0448 E8000000 		call	arg_str0
 782      00
 783 044d 48898530 		movq	%rax, -208(%rbp)
 783      FFFFFF
 178:main.c        ****     struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID
 784              		.loc 1 178 0
 785 0454 B9000000 		movl	$.LC17, %ecx
 785      00
 786 0459 BA000000 		movl	$.LC18, %edx
 786      00
 787 045e BE000000 		movl	$.LC19, %esi
 787      00
 788 0463 BF000000 		movl	$.LC20, %edi
 788      00
 789 0468 E8000000 		call	arg_str1
 789      00
 790 046d 48898538 		movq	%rax, -200(%rbp)
 790      FFFFFF
 179:main.c        ****     struct arg_str *bankIdOpt = arg_str0("b", "bid", "bank id in decimal", "                    set
 791              		.loc 1 179 0
 792 0474 B9000000 		movl	$.LC21, %ecx
 792      00
 793 0479 BA000000 		movl	$.LC22, %edx
 793      00
 794 047e BE000000 		movl	$.LC23, %esi
 794      00
 795 0483 BF000000 		movl	$.LC24, %edi
 795      00
 796 0488 E8000000 		call	arg_str0
 796      00
 797 048d 48898540 		movq	%rax, -192(%rbp)
 797      FFFFFF
 180:main.c        ****     struct arg_lit *loopOpt = arg_lit0("y", "atm", "                    starts atm service");
 798              		.loc 1 180 0
 799 0494 BA000000 		movl	$.LC25, %edx
 799      00
 800 0499 BE000000 		movl	$.LC26, %esi
 800      00
 801 049e BF000000 		movl	$.LC27, %edi
 801      00
 802 04a3 E8000000 		call	arg_lit0
 802      00
 803 04a8 48898548 		movq	%rax, -184(%rbp)
 803      FFFFFF
 181:main.c        ****     struct arg_lit *verboseOpt = arg_lit0("l", "log", "        gives log on more events");
 804              		.loc 1 181 0
 805 04af BA000000 		movl	$.LC28, %edx
 805      00
 806 04b4 BE000000 		movl	$.LC29, %esi
 806      00
 807 04b9 BF000000 		movl	$.LC30, %edi
 807      00
 808 04be E8000000 		call	arg_lit0
 808      00
 809 04c3 48898550 		movq	%rax, -176(%rbp)
 809      FFFFFF
 182:main.c        ****     struct arg_lit *helpOpt = arg_lit0("h", "help", "                     print this help and exit"
 810              		.loc 1 182 0
 811 04ca BA000000 		movl	$.LC31, %edx
 811      00
 812 04cf BE000000 		movl	$.LC32, %esi
 812      00
 813 04d4 BF000000 		movl	$.LC33, %edi
 813      00
 814 04d9 E8000000 		call	arg_lit0
 814      00
 815 04de 48898558 		movq	%rax, -168(%rbp)
 815      FFFFFF
 183:main.c        ****     struct arg_end *endOpt = arg_end(20);
 816              		.loc 1 183 0
 817 04e5 BF140000 		movl	$20, %edi
 817      00
 818 04ea E8000000 		call	arg_end
 818      00
 819 04ef 48898560 		movq	%rax, -160(%rbp)
 819      FFFFFF
 184:main.c        **** 
 185:main.c        ****     void *argTable[] = {
 820              		.loc 1 185 0
 821 04f6 488B8530 		movq	-208(%rbp), %rax
 821      FFFFFF
 822 04fd 488945B0 		movq	%rax, -80(%rbp)
 823 0501 488B8538 		movq	-200(%rbp), %rax
 823      FFFFFF
 824 0508 488945B8 		movq	%rax, -72(%rbp)
 825 050c 488B8540 		movq	-192(%rbp), %rax
 825      FFFFFF
 826 0513 488945C0 		movq	%rax, -64(%rbp)
 827 0517 488B8548 		movq	-184(%rbp), %rax
 827      FFFFFF
 828 051e 488945C8 		movq	%rax, -56(%rbp)
 829 0522 488B8550 		movq	-176(%rbp), %rax
 829      FFFFFF
 830 0529 488945D0 		movq	%rax, -48(%rbp)
 831 052d 488B8558 		movq	-168(%rbp), %rax
 831      FFFFFF
 832 0534 488945D8 		movq	%rax, -40(%rbp)
 833 0538 488B8560 		movq	-160(%rbp), %rax
 833      FFFFFF
 834 053f 488945E0 		movq	%rax, -32(%rbp)
 186:main.c        ****             ivpOpt,
 187:main.c        ****             vpOpt,
 188:main.c        ****             bankIdOpt,
 189:main.c        ****             loopOpt,
 190:main.c        ****             verboseOpt,
 191:main.c        ****             helpOpt,
 192:main.c        ****             endOpt
 193:main.c        ****     };
 194:main.c        **** 
 195:main.c        ****     const char *progName = "flcli";
 835              		.loc 1 195 0
 836 0543 48C78568 		movq	$.LC34, -152(%rbp)
 836      FFFFFF00 
 836      000000
 196:main.c        ****     int numErrors;
 197:main.c        ****     struct FLContext *handle = NULL;
 837              		.loc 1 197 0
 838 054e 48C78510 		movq	$0, -240(%rbp)
 838      FFFFFF00 
 838      000000
 198:main.c        ****     FLStatus fStatus;
 199:main.c        ****     const char *error = NULL;
 839              		.loc 1 199 0
 840 0559 48C78518 		movq	$0, -232(%rbp)
 840      FFFFFF00 
 840      000000
 200:main.c        ****     const char *ivp = NULL;
 841              		.loc 1 200 0
 842 0564 48C78570 		movq	$0, -144(%rbp)
 842      FFFFFF00 
 842      000000
 201:main.c        ****     const char *vp = NULL;
 843              		.loc 1 201 0
 844 056f 48C78578 		movq	$0, -136(%rbp)
 844      FFFFFF00 
 844      000000
 202:main.c        ****     bool isCommCapable;
 203:main.c        ****     const char *line = NULL;
 845              		.loc 1 203 0
 846 057a 48C74580 		movq	$0, -128(%rbp)
 846      00000000 
 204:main.c        ****     uint8 conduit = 0x01;
 847              		.loc 1 204 0
 848 0582 C68542FE 		movb	$1, -446(%rbp)
 848      FFFF01
 205:main.c        **** 
 206:main.c        ****     if (arg_nullcheck(argTable) != 0) {
 849              		.loc 1 206 0
 850 0589 488D45B0 		leaq	-80(%rbp), %rax
 851 058d 4889C7   		movq	%rax, %rdi
 852 0590 E8000000 		call	arg_nullcheck
 852      00
 853 0595 85C0     		testl	%eax, %eax
 854 0597 742F     		je	.L30
 207:main.c        ****         fprintf(stderr, "%s: insufficient memory\n", progName);
 855              		.loc 1 207 0
 856 0599 488B0500 		movq	stderr(%rip), %rax
 856      000000
 857 05a0 488B9568 		movq	-152(%rbp), %rdx
 857      FFFFFF
 858 05a7 BE000000 		movl	$.LC35, %esi
 858      00
 859 05ac 4889C7   		movq	%rax, %rdi
 860 05af B8000000 		movl	$0, %eax
 860      00
 861 05b4 E8000000 		call	fprintf
 861      00
 208:main.c        ****         FAIL(1, cleanup);
 862              		.loc 1 208 0
 863 05b9 C7856CFE 		movl	$1, -404(%rbp)
 863      FFFF0100 
 863      0000
 864 05c3 E9F52700 		jmp	.L31
 864      00
 865              	.L30:
 209:main.c        ****     }
 210:main.c        **** 
 211:main.c        ****     numErrors = arg_parse(argc, argv, argTable);
 866              		.loc 1 211 0
 867 05c8 488D55B0 		leaq	-80(%rbp), %rdx
 868 05cc 488B8D10 		movq	-496(%rbp), %rcx
 868      FEFFFF
 869 05d3 8B851CFE 		movl	-484(%rbp), %eax
 869      FFFF
 870 05d9 4889CE   		movq	%rcx, %rsi
 871 05dc 89C7     		movl	%eax, %edi
 872 05de E8000000 		call	arg_parse
 872      00
 873 05e3 8985B8FE 		movl	%eax, -328(%rbp)
 873      FFFF
 212:main.c        **** 
 213:main.c        ****     if (verboseOpt->count > 0) {
 874              		.loc 1 213 0
 875 05e9 488B8550 		movq	-176(%rbp), %rax
 875      FFFFFF
 876 05f0 8B4060   		movl	96(%rax), %eax
 877 05f3 85C0     		testl	%eax, %eax
 878 05f5 7E07     		jle	.L32
 214:main.c        ****         LOG = true;
 879              		.loc 1 214 0
 880 05f7 C6050000 		movb	$1, LOG(%rip)
 880      000001
 881              	.L32:
 215:main.c        ****     }
 216:main.c        **** 
 217:main.c        ****     if (bankIdOpt->count > 0) {
 882              		.loc 1 217 0
 883 05fe 488B8540 		movq	-192(%rbp), %rax
 883      FFFFFF
 884 0605 8B4060   		movl	96(%rax), %eax
 885 0608 85C0     		testl	%eax, %eax
 886 060a 7E45     		jle	.L33
 218:main.c        ****         bankID = atoi(bankIdOpt->sval[0]);
 887              		.loc 1 218 0
 888 060c 488B8540 		movq	-192(%rbp), %rax
 888      FFFFFF
 889 0613 488B4068 		movq	104(%rax), %rax
 890 0617 488B00   		movq	(%rax), %rax
 891 061a 4889C7   		movq	%rax, %rdi
 892 061d E8000000 		call	atoi
 892      00
 893 0622 89050000 		movl	%eax, bankID(%rip)
 893      0000
 219:main.c        ****         if(bankID < 0 || bankID > 31) {
 894              		.loc 1 219 0
 895 0628 8B050000 		movl	bankID(%rip), %eax
 895      0000
 896 062e 85C0     		testl	%eax, %eax
 897 0630 780B     		js	.L34
 898              		.loc 1 219 0 is_stmt 0 discriminator 1
 899 0632 8B050000 		movl	bankID(%rip), %eax
 899      0000
 900 0638 83F81F   		cmpl	$31, %eax
 901 063b 7E14     		jle	.L33
 902              	.L34:
 220:main.c        ****             printf("%s\n", "Invalid bankID");
 903              		.loc 1 220 0 is_stmt 1
 904 063d BF000000 		movl	$.LC36, %edi
 904      00
 905 0642 E8000000 		call	puts
 905      00
 221:main.c        ****             return 0;
 906              		.loc 1 221 0
 907 0647 B8000000 		movl	$0, %eax
 907      00
 908 064c E9C82700 		jmp	.L266
 908      00
 909              	.L33:
 222:main.c        ****         }
 223:main.c        ****     }
 224:main.c        **** 
 225:main.c        ****     if (helpOpt->count > 0) {
 910              		.loc 1 225 0
 911 0651 488B8558 		movq	-168(%rbp), %rax
 911      FFFFFF
 912 0658 8B4060   		movl	96(%rax), %eax
 913 065b 85C0     		testl	%eax, %eax
 914 065d 7E68     		jle	.L36
 226:main.c        ****         printf("FPGALink Command-Line Interface Copyright (C) 2017 Jarvis \n\n Usage: %s", progName
 915              		.loc 1 226 0
 916 065f 488B8568 		movq	-152(%rbp), %rax
 916      FFFFFF
 917 0666 4889C6   		movq	%rax, %rsi
 918 0669 BF000000 		movl	$.LC37, %edi
 918      00
 919 066e B8000000 		movl	$0, %eax
 919      00
 920 0673 E8000000 		call	printf
 920      00
 227:main.c        ****         arg_print_syntax(stdout, argTable, "\n");
 921              		.loc 1 227 0
 922 0678 488B0500 		movq	stdout(%rip), %rax
 922      000000
 923 067f 488D4DB0 		leaq	-80(%rbp), %rcx
 924 0683 BA000000 		movl	$.LC38, %edx
 924      00
 925 0688 4889CE   		movq	%rcx, %rsi
 926 068b 4889C7   		movq	%rax, %rdi
 927 068e E8000000 		call	arg_print_syntax
 927      00
 228:main.c        ****         printf("\nInteract with an FPGALink device.\n\n");
 928              		.loc 1 228 0
 929 0693 BF000000 		movl	$.LC39, %edi
 929      00
 930 0698 E8000000 		call	puts
 930      00
 229:main.c        ****         arg_print_glossary(stdout, argTable, "  %-10s %s\n");
 931              		.loc 1 229 0
 932 069d 488B0500 		movq	stdout(%rip), %rax
 932      000000
 933 06a4 488D4DB0 		leaq	-80(%rbp), %rcx
 934 06a8 BA000000 		movl	$.LC40, %edx
 934      00
 935 06ad 4889CE   		movq	%rcx, %rsi
 936 06b0 4889C7   		movq	%rax, %rdi
 937 06b3 E8000000 		call	arg_print_glossary
 937      00
 230:main.c        ****         FAIL(FLP_SUCCESS, cleanup);
 938              		.loc 1 230 0
 939 06b8 C7856CFE 		movl	$0, -404(%rbp)
 939      FFFF0000 
 939      0000
 940 06c2 E9F62600 		jmp	.L31
 940      00
 941              	.L36:
 231:main.c        ****     }
 232:main.c        **** 
 233:main.c        ****     if (numErrors > 0) {
 942              		.loc 1 233 0
 943 06c7 83BDB8FE 		cmpl	$0, -328(%rbp)
 943      FFFF00
 944 06ce 7E4F     		jle	.L37
 234:main.c        ****         arg_print_errors(stdout, endOpt, progName);
 945              		.loc 1 234 0
 946 06d0 488B0500 		movq	stdout(%rip), %rax
 946      000000
 947 06d7 488B9568 		movq	-152(%rbp), %rdx
 947      FFFFFF
 948 06de 488B8D60 		movq	-160(%rbp), %rcx
 948      FFFFFF
 949 06e5 4889CE   		movq	%rcx, %rsi
 950 06e8 4889C7   		movq	%rax, %rdi
 951 06eb E8000000 		call	arg_print_errors
 951      00
 235:main.c        ****         fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 952              		.loc 1 235 0
 953 06f0 488B0500 		movq	stderr(%rip), %rax
 953      000000
 954 06f7 488B9568 		movq	-152(%rbp), %rdx
 954      FFFFFF
 955 06fe BE000000 		movl	$.LC41, %esi
 955      00
 956 0703 4889C7   		movq	%rax, %rdi
 957 0706 B8000000 		movl	$0, %eax
 957      00
 958 070b E8000000 		call	fprintf
 958      00
 236:main.c        ****         FAIL(FLP_ARGS, cleanup);
 959              		.loc 1 236 0
 960 0710 C7856CFE 		movl	$12, -404(%rbp)
 960      FFFF0C00 
 960      0000
 961 071a E99E2600 		jmp	.L31
 961      00
 962              	.L37:
 237:main.c        ****     }
 238:main.c        **** 
 239:main.c        ****     fStatus = flInitialise(0, &error);
 963              		.loc 1 239 0
 964 071f 488D8518 		leaq	-232(%rbp), %rax
 964      FFFFFF
 965 0726 4889C6   		movq	%rax, %rsi
 966 0729 BF000000 		movl	$0, %edi
 966      00
 967 072e E8000000 		call	flInitialise
 967      00
 968 0733 8985BCFE 		movl	%eax, -324(%rbp)
 968      FFFF
 240:main.c        ****     CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 969              		.loc 1 240 0
 970 0739 83BDBCFE 		cmpl	$0, -324(%rbp)
 970      FFFF00
 971 0740 740F     		je	.L38
 972              		.loc 1 240 0 is_stmt 0 discriminator 1
 973 0742 C7856CFE 		movl	$1, -404(%rbp)
 973      FFFF0100 
 973      0000
 974 074c E96C2600 		jmp	.L31
 974      00
 975              	.L38:
 241:main.c        **** 
 242:main.c        ****     vp = vpOpt->sval[0];
 976              		.loc 1 242 0 is_stmt 1
 977 0751 488B8538 		movq	-200(%rbp), %rax
 977      FFFFFF
 978 0758 488B4068 		movq	104(%rax), %rax
 979 075c 488B00   		movq	(%rax), %rax
 980 075f 48898578 		movq	%rax, -136(%rbp)
 980      FFFFFF
 243:main.c        **** 
 244:main.c        ****     printf("Attempting to open connection to FPGALink device %s...\n", vp);
 981              		.loc 1 244 0
 982 0766 488B8578 		movq	-136(%rbp), %rax
 982      FFFFFF
 983 076d 4889C6   		movq	%rax, %rsi
 984 0770 BF000000 		movl	$.LC42, %edi
 984      00
 985 0775 B8000000 		movl	$0, %eax
 985      00
 986 077a E8000000 		call	printf
 986      00
 245:main.c        ****     fStatus = flOpen(vp, &handle, NULL);
 987              		.loc 1 245 0
 988 077f 488D8D10 		leaq	-240(%rbp), %rcx
 988      FFFFFF
 989 0786 488B8578 		movq	-136(%rbp), %rax
 989      FFFFFF
 990 078d BA000000 		movl	$0, %edx
 990      00
 991 0792 4889CE   		movq	%rcx, %rsi
 992 0795 4889C7   		movq	%rax, %rdi
 993 0798 E8000000 		call	flOpen
 993      00
 994 079d 8985BCFE 		movl	%eax, -324(%rbp)
 994      FFFF
 246:main.c        ****     if (fStatus) {
 995              		.loc 1 246 0
 996 07a3 83BDBCFE 		cmpl	$0, -324(%rbp)
 996      FFFF00
 997 07aa 0F84EA01 		je	.L39
 997      0000
 247:main.c        ****         if (ivpOpt->count) {
 998              		.loc 1 247 0
 999 07b0 488B8530 		movq	-208(%rbp), %rax
 999      FFFFFF
 1000 07b7 8B4060   		movl	96(%rax), %eax
 1001 07ba 85C0     		testl	%eax, %eax
 1002 07bc 0F84A901 		je	.L40
 1002      0000
 1003              	.LBB5:
 248:main.c        ****             int count = 60;
 1004              		.loc 1 248 0
 1005 07c2 C78570FE 		movl	$60, -400(%rbp)
 1005      FFFF3C00 
 1005      0000
 249:main.c        ****             uint8 flag;
 250:main.c        ****             ivp = ivpOpt->sval[0];
 1006              		.loc 1 250 0
 1007 07cc 488B8530 		movq	-208(%rbp), %rax
 1007      FFFFFF
 1008 07d3 488B4068 		movq	104(%rax), %rax
 1009 07d7 488B00   		movq	(%rax), %rax
 1010 07da 48898570 		movq	%rax, -144(%rbp)
 1010      FFFFFF
 251:main.c        ****             printf("Loading firmware into %s...\n", ivp);
 1011              		.loc 1 251 0
 1012 07e1 488B8570 		movq	-144(%rbp), %rax
 1012      FFFFFF
 1013 07e8 4889C6   		movq	%rax, %rsi
 1014 07eb BF000000 		movl	$.LC43, %edi
 1014      00
 1015 07f0 B8000000 		movl	$0, %eax
 1015      00
 1016 07f5 E8000000 		call	printf
 1016      00
 252:main.c        ****             fStatus = flLoadStandardFirmware(ivp, vp, &error);
 1017              		.loc 1 252 0
 1018 07fa 488D9518 		leaq	-232(%rbp), %rdx
 1018      FFFFFF
 1019 0801 488B8D78 		movq	-136(%rbp), %rcx
 1019      FFFFFF
 1020 0808 488B8570 		movq	-144(%rbp), %rax
 1020      FFFFFF
 1021 080f 4889CE   		movq	%rcx, %rsi
 1022 0812 4889C7   		movq	%rax, %rdi
 1023 0815 E8000000 		call	flLoadStandardFirmware
 1023      00
 1024 081a 8985BCFE 		movl	%eax, -324(%rbp)
 1024      FFFF
 253:main.c        ****             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1025              		.loc 1 253 0
 1026 0820 83BDBCFE 		cmpl	$0, -324(%rbp)
 1026      FFFF00
 1027 0827 740F     		je	.L41
 1028              		.loc 1 253 0 is_stmt 0 discriminator 1
 1029 0829 C7856CFE 		movl	$1, -404(%rbp)
 1029      FFFF0100 
 1029      0000
 1030 0833 E9852500 		jmp	.L31
 1030      00
 1031              	.L41:
 254:main.c        **** 
 255:main.c        ****             printf("Awaiting renumeration");
 1032              		.loc 1 255 0 is_stmt 1
 1033 0838 BF000000 		movl	$.LC44, %edi
 1033      00
 1034 083d B8000000 		movl	$0, %eax
 1034      00
 1035 0842 E8000000 		call	printf
 1035      00
 256:main.c        ****             flSleep(1000);
 1036              		.loc 1 256 0
 1037 0847 BFE80300 		movl	$1000, %edi
 1037      00
 1038 084c E8000000 		call	flSleep
 1038      00
 1039              	.L45:
 257:main.c        ****             do {
 258:main.c        ****                 printf(".");
 1040              		.loc 1 258 0
 1041 0851 BF2E0000 		movl	$46, %edi
 1041      00
 1042 0856 E8000000 		call	putchar
 1042      00
 259:main.c        ****                 fflush(stdout);
 1043              		.loc 1 259 0
 1044 085b 488B0500 		movq	stdout(%rip), %rax
 1044      000000
 1045 0862 4889C7   		movq	%rax, %rdi
 1046 0865 E8000000 		call	fflush
 1046      00
 260:main.c        ****                 fStatus = flIsDeviceAvailable(vp, &flag, &error);
 1047              		.loc 1 260 0
 1048 086a 488D9518 		leaq	-232(%rbp), %rdx
 1048      FFFFFF
 1049 0871 488D8D28 		leaq	-216(%rbp), %rcx
 1049      FFFFFF
 1050 0878 488B8578 		movq	-136(%rbp), %rax
 1050      FFFFFF
 1051 087f 4889CE   		movq	%rcx, %rsi
 1052 0882 4889C7   		movq	%rax, %rdi
 1053 0885 E8000000 		call	flIsDeviceAvailable
 1053      00
 1054 088a 8985BCFE 		movl	%eax, -324(%rbp)
 1054      FFFF
 261:main.c        ****                 CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1055              		.loc 1 261 0
 1056 0890 83BDBCFE 		cmpl	$0, -324(%rbp)
 1056      FFFF00
 1057 0897 740F     		je	.L43
 1058              		.loc 1 261 0 is_stmt 0 discriminator 1
 1059 0899 C7856CFE 		movl	$1, -404(%rbp)
 1059      FFFF0100 
 1059      0000
 1060 08a3 E9152500 		jmp	.L31
 1060      00
 1061              	.L43:
 262:main.c        ****                 flSleep(250);
 1062              		.loc 1 262 0 is_stmt 1
 1063 08a8 BFFA0000 		movl	$250, %edi
 1063      00
 1064 08ad E8000000 		call	flSleep
 1064      00
 263:main.c        ****                 count--;
 1065              		.loc 1 263 0
 1066 08b2 83AD70FE 		subl	$1, -400(%rbp)
 1066      FFFF01
 264:main.c        ****             } while (!flag && count);
 1067              		.loc 1 264 0
 1068 08b9 0FB68528 		movzbl	-216(%rbp), %eax
 1068      FFFFFF
 1069 08c0 84C0     		testb	%al, %al
 1070 08c2 7509     		jne	.L44
 1071              		.loc 1 264 0 is_stmt 0 discriminator 1
 1072 08c4 83BD70FE 		cmpl	$0, -400(%rbp)
 1072      FFFF00
 1073 08cb 7584     		jne	.L45
 1074              	.L44:
 265:main.c        ****             printf("\n");
 1075              		.loc 1 265 0 is_stmt 1
 1076 08cd BF0A0000 		movl	$10, %edi
 1076      00
 1077 08d2 E8000000 		call	putchar
 1077      00
 266:main.c        ****             if (!flag) {
 1078              		.loc 1 266 0
 1079 08d7 0FB68528 		movzbl	-216(%rbp), %eax
 1079      FFFFFF
 1080 08de 84C0     		testb	%al, %al
 1081 08e0 752F     		jne	.L46
 267:main.c        ****                 fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 1082              		.loc 1 267 0
 1083 08e2 488B0500 		movq	stderr(%rip), %rax
 1083      000000
 1084 08e9 488B9578 		movq	-136(%rbp), %rdx
 1084      FFFFFF
 1085 08f0 BE000000 		movl	$.LC45, %esi
 1085      00
 1086 08f5 4889C7   		movq	%rax, %rdi
 1087 08f8 B8000000 		movl	$0, %eax
 1087      00
 1088 08fd E8000000 		call	fprintf
 1088      00
 268:main.c        ****                 FAIL(FLP_LIBERR, cleanup);
 1089              		.loc 1 268 0
 1090 0902 C7856CFE 		movl	$1, -404(%rbp)
 1090      FFFF0100 
 1090      0000
 1091 090c E9AC2400 		jmp	.L31
 1091      00
 1092              	.L46:
 269:main.c        ****             }
 270:main.c        **** 
 271:main.c        ****             printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 1093              		.loc 1 271 0
 1094 0911 488B8578 		movq	-136(%rbp), %rax
 1094      FFFFFF
 1095 0918 4889C6   		movq	%rax, %rsi
 1096 091b BF000000 		movl	$.LC46, %edi
 1096      00
 1097 0920 B8000000 		movl	$0, %eax
 1097      00
 1098 0925 E8000000 		call	printf
 1098      00
 272:main.c        ****             fStatus = flOpen(vp, &handle, &error);
 1099              		.loc 1 272 0
 1100 092a 488D9518 		leaq	-232(%rbp), %rdx
 1100      FFFFFF
 1101 0931 488D8D10 		leaq	-240(%rbp), %rcx
 1101      FFFFFF
 1102 0938 488B8578 		movq	-136(%rbp), %rax
 1102      FFFFFF
 1103 093f 4889CE   		movq	%rcx, %rsi
 1104 0942 4889C7   		movq	%rax, %rdi
 1105 0945 E8000000 		call	flOpen
 1105      00
 1106 094a 8985BCFE 		movl	%eax, -324(%rbp)
 1106      FFFF
 273:main.c        ****             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1107              		.loc 1 273 0
 1108 0950 83BDBCFE 		cmpl	$0, -324(%rbp)
 1108      FFFF00
 1109 0957 7410     		je	.L47
 1110              		.loc 1 273 0 is_stmt 0 discriminator 1
 1111 0959 C7856CFE 		movl	$1, -404(%rbp)
 1111      FFFF0100 
 1111      0000
 1112 0963 90       		nop
 1113 0964 E9542400 		jmp	.L31
 1113      00
 1114              	.L47:
 1115              	.LBE5:
 1116 0969 EB2F     		jmp	.L39
 1117              	.L40:
 274:main.c        ****         } else {
 275:main.c        ****             fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was suppli
 1118              		.loc 1 275 0 is_stmt 1
 1119 096b 488B0500 		movq	stderr(%rip), %rax
 1119      000000
 1120 0972 488B9578 		movq	-136(%rbp), %rdx
 1120      FFFFFF
 1121 0979 BE000000 		movl	$.LC47, %esi
 1121      00
 1122 097e 4889C7   		movq	%rax, %rdi
 1123 0981 B8000000 		movl	$0, %eax
 1123      00
 1124 0986 E8000000 		call	fprintf
 1124      00
 276:main.c        ****             FAIL(FLP_ARGS, cleanup);
 1125              		.loc 1 276 0
 1126 098b C7856CFE 		movl	$12, -404(%rbp)
 1126      FFFF0C00 
 1126      0000
 1127 0995 E9232400 		jmp	.L31
 1127      00
 1128              	.L39:
 277:main.c        ****         }
 278:main.c        ****     }
 279:main.c        **** 
 280:main.c        ****     printf(
 1129              		.loc 1 280 0
 1130 099a 488B8510 		movq	-240(%rbp), %rax
 1130      FFFFFF
 1131 09a1 4889C7   		movq	%rax, %rdi
 1132 09a4 E8000000 		call	flGetFirmwareVersion
 1132      00
 1133 09a9 89C3     		movl	%eax, %ebx
 281:main.c        ****             "Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 282:main.c        ****             vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 1134              		.loc 1 282 0
 1135 09ab 488B8510 		movq	-240(%rbp), %rax
 1135      FFFFFF
 1136 09b2 4889C7   		movq	%rax, %rdi
 1137 09b5 E8000000 		call	flGetFirmwareID
 1137      00
 280:main.c        ****             "Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 1138              		.loc 1 280 0
 1139 09ba 0FB7D0   		movzwl	%ax, %edx
 1140 09bd 488B8578 		movq	-136(%rbp), %rax
 1140      FFFFFF
 1141 09c4 89D9     		movl	%ebx, %ecx
 1142 09c6 4889C6   		movq	%rax, %rsi
 1143 09c9 BF000000 		movl	$.LC48, %edi
 1143      00
 1144 09ce B8000000 		movl	$0, %eax
 1144      00
 1145 09d3 E8000000 		call	printf
 1145      00
 283:main.c        ****     );
 284:main.c        **** 
 285:main.c        ****     isCommCapable = flIsCommCapable(handle, conduit);
 1146              		.loc 1 285 0
 1147 09d8 0FB69542 		movzbl	-446(%rbp), %edx
 1147      FEFFFF
 1148 09df 488B8510 		movq	-240(%rbp), %rax
 1148      FFFFFF
 1149 09e6 89D6     		movl	%edx, %esi
 1150 09e8 4889C7   		movq	%rax, %rdi
 1151 09eb E8000000 		call	flIsCommCapable
 1151      00
 1152 09f0 84C0     		testb	%al, %al
 1153 09f2 0F95C0   		setne	%al
 1154 09f5 888543FE 		movb	%al, -445(%rbp)
 1154      FFFF
 286:main.c        **** 
 287:main.c        ****     // -y reads in from csv and initiates the while loop
 288:main.c        ****     if (loopOpt->count > 0) {
 1155              		.loc 1 288 0
 1156 09fb 488B8548 		movq	-184(%rbp), %rax
 1156      FFFFFF
 1157 0a02 8B4060   		movl	96(%rax), %eax
 1158 0a05 85C0     		testl	%eax, %eax
 1159 0a07 0F8EB023 		jle	.L31
 1159      0000
 289:main.c        ****         if (isCommCapable) {
 1160              		.loc 1 289 0
 1161 0a0d 80BD43FE 		cmpb	$0, -445(%rbp)
 1161      FFFF00
 1162 0a14 0F847823 		je	.L48
 1162      0000
 1163              	.LBB6:
 290:main.c        ****             uint8 isRunning;
 291:main.c        ****             fStatus = flSelectConduit(handle, conduit, &error);
 1164              		.loc 1 291 0
 1165 0a1a 0FB68D42 		movzbl	-446(%rbp), %ecx
 1165      FEFFFF
 1166 0a21 488B8510 		movq	-240(%rbp), %rax
 1166      FFFFFF
 1167 0a28 488D9518 		leaq	-232(%rbp), %rdx
 1167      FFFFFF
 1168 0a2f 89CE     		movl	%ecx, %esi
 1169 0a31 4889C7   		movq	%rax, %rdi
 1170 0a34 E8000000 		call	flSelectConduit
 1170      00
 1171 0a39 8985BCFE 		movl	%eax, -324(%rbp)
 1171      FFFF
 292:main.c        ****             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1172              		.loc 1 292 0
 1173 0a3f 83BDBCFE 		cmpl	$0, -324(%rbp)
 1173      FFFF00
 1174 0a46 740F     		je	.L49
 1175              		.loc 1 292 0 is_stmt 0 discriminator 1
 1176 0a48 C7856CFE 		movl	$1, -404(%rbp)
 1176      FFFF0100 
 1176      0000
 1177 0a52 E9662300 		jmp	.L31
 1177      00
 1178              	.L49:
 293:main.c        ****             fStatus = flIsFPGARunning(handle, &isRunning, &error);
 1179              		.loc 1 293 0 is_stmt 1
 1180 0a57 488B8510 		movq	-240(%rbp), %rax
 1180      FFFFFF
 1181 0a5e 488D9518 		leaq	-232(%rbp), %rdx
 1181      FFFFFF
 1182 0a65 488D8D20 		leaq	-480(%rbp), %rcx
 1182      FEFFFF
 1183 0a6c 4889CE   		movq	%rcx, %rsi
 1184 0a6f 4889C7   		movq	%rax, %rdi
 1185 0a72 E8000000 		call	flIsFPGARunning
 1185      00
 1186 0a77 8985BCFE 		movl	%eax, -324(%rbp)
 1186      FFFF
 294:main.c        ****             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1187              		.loc 1 294 0
 1188 0a7d 83BDBCFE 		cmpl	$0, -324(%rbp)
 1188      FFFF00
 1189 0a84 740F     		je	.L51
 1190              		.loc 1 294 0 is_stmt 0 discriminator 1
 1191 0a86 C7856CFE 		movl	$1, -404(%rbp)
 1191      FFFF0100 
 1191      0000
 1192 0a90 E9282300 		jmp	.L31
 1192      00
 1193              	.L51:
 295:main.c        ****             if (isRunning) {
 1194              		.loc 1 295 0 is_stmt 1
 1195 0a95 0FB68520 		movzbl	-480(%rbp), %eax
 1195      FEFFFF
 1196 0a9c 84C0     		testb	%al, %al
 1197 0a9e 0F84C122 		je	.L52
 1197      0000
 1198              	.LBB7:
 296:main.c        **** 
 297:main.c        ****                 FILE *fPtr;
 298:main.c        ****                 fPtr = fopen("SampleBackEndDatabase.csv", "r+"); // change flag according to need
 1199              		.loc 1 298 0
 1200 0aa4 BE000000 		movl	$.LC49, %esi
 1200      00
 1201 0aa9 BF000000 		movl	$.LC50, %edi
 1201      00
 1202 0aae E8000000 		call	fopen
 1202      00
 1203 0ab3 48894588 		movq	%rax, -120(%rbp)
 299:main.c        ****                 if (fPtr == NULL) {
 1204              		.loc 1 299 0
 1205 0ab7 48837D88 		cmpq	$0, -120(%rbp)
 1205      00
 1206 0abc 7514     		jne	.L53
 300:main.c        ****                     printf("Csv doesn't exist \n");
 1207              		.loc 1 300 0
 1208 0abe BF000000 		movl	$.LC51, %edi
 1208      00
 1209 0ac3 E8000000 		call	puts
 1209      00
 301:main.c        ****                     return 0;
 1210              		.loc 1 301 0
 1211 0ac8 B8000000 		movl	$0, %eax
 1211      00
 1212 0acd E9472300 		jmp	.L266
 1212      00
 1213              	.L53:
 302:main.c        ****                 }
 303:main.c        ****                 size_t lineSize = 100;
 1214              		.loc 1 303 0
 1215 0ad2 48C78520 		movq	$100, -224(%rbp)
 1215      FFFFFF64 
 1215      000000
 304:main.c        ****                 char *lineFromFile = malloc(lineSize * sizeof(char));
 1216              		.loc 1 304 0
 1217 0add 488B8520 		movq	-224(%rbp), %rax
 1217      FFFFFF
 1218 0ae4 4889C7   		movq	%rax, %rdi
 1219 0ae7 E8000000 		call	malloc
 1219      00
 1220 0aec 48898528 		movq	%rax, -216(%rbp)
 1220      FFFFFF
 305:main.c        **** 
 306:main.c        ****                 while ((getline(&lineFromFile, &lineSize, fPtr)) != -1) {
 1221              		.loc 1 306 0
 1222 0af3 EB28     		jmp	.L55
 1223              	.L57:
 307:main.c        ****                     if (numLines != 0) format(lineFromFile);
 1224              		.loc 1 307 0
 1225 0af5 8B050000 		movl	numLines(%rip), %eax
 1225      0000
 1226 0afb 85C0     		testl	%eax, %eax
 1227 0afd 740F     		je	.L56
 1228              		.loc 1 307 0 is_stmt 0 discriminator 1
 1229 0aff 488B8528 		movq	-216(%rbp), %rax
 1229      FFFFFF
 1230 0b06 4889C7   		movq	%rax, %rdi
 1231 0b09 E8000000 		call	format
 1231      00
 1232              	.L56:
 308:main.c        ****                     numLines++;
 1233              		.loc 1 308 0 is_stmt 1
 1234 0b0e 8B050000 		movl	numLines(%rip), %eax
 1234      0000
 1235 0b14 83C001   		addl	$1, %eax
 1236 0b17 89050000 		movl	%eax, numLines(%rip)
 1236      0000
 1237              	.L55:
 306:main.c        ****                     if (numLines != 0) format(lineFromFile);
 1238              		.loc 1 306 0 discriminator 1
 1239 0b1d 488B5588 		movq	-120(%rbp), %rdx
 1240 0b21 488D8D20 		leaq	-224(%rbp), %rcx
 1240      FFFFFF
 1241 0b28 488D8528 		leaq	-216(%rbp), %rax
 1241      FFFFFF
 1242 0b2f 4889CE   		movq	%rcx, %rsi
 1243 0b32 4889C7   		movq	%rax, %rdi
 1244 0b35 E8000000 		call	getline
 1244      00
 1245 0b3a 4883F8FF 		cmpq	$-1, %rax
 1246 0b3e 75B5     		jne	.L57
 309:main.c        ****                 }
 310:main.c        ****                 numLines--;
 1247              		.loc 1 310 0
 1248 0b40 8B050000 		movl	numLines(%rip), %eax
 1248      0000
 1249 0b46 83E801   		subl	$1, %eax
 1250 0b49 89050000 		movl	%eax, numLines(%rip)
 1250      0000
 311:main.c        ****                 free(lineFromFile);
 1251              		.loc 1 311 0
 1252 0b4f 488B8528 		movq	-216(%rbp), %rax
 1252      FFFFFF
 1253 0b56 4889C7   		movq	%rax, %rdi
 1254 0b59 E8000000 		call	free
 1254      00
 312:main.c        ****                 fclose(fPtr);
 1255              		.loc 1 312 0
 1256 0b5e 488B4588 		movq	-120(%rbp), %rax
 1257 0b62 4889C7   		movq	%rax, %rdi
 1258 0b65 E8000000 		call	fclose
 1258      00
 313:main.c        **** 
 314:main.c        ****                 // Bank id error handling
 315:main.c        ****                 if(bankID < 0 || bankID > 31) {
 1259              		.loc 1 315 0
 1260 0b6a 8B050000 		movl	bankID(%rip), %eax
 1260      0000
 1261 0b70 85C0     		testl	%eax, %eax
 1262 0b72 780B     		js	.L58
 1263              		.loc 1 315 0 is_stmt 0 discriminator 1
 1264 0b74 8B050000 		movl	bankID(%rip), %eax
 1264      0000
 1265 0b7a 83F81F   		cmpl	$31, %eax
 1266 0b7d 7E14     		jle	.L59
 1267              	.L58:
 316:main.c        ****                     printf("%s\n", "Invalid bankID");
 1268              		.loc 1 316 0 is_stmt 1
 1269 0b7f BF000000 		movl	$.LC36, %edi
 1269      00
 1270 0b84 E8000000 		call	puts
 1270      00
 317:main.c        ****                     return 0;
 1271              		.loc 1 317 0
 1272 0b89 B8000000 		movl	$0, %eax
 1272      00
 1273 0b8e E9862200 		jmp	.L266
 1273      00
 1274              	.L59:
 318:main.c        ****                 }
 319:main.c        ****                 
 320:main.c        ****                 /*
 321:main.c        ****                     Format for initialisation of Max Amount which can be withdrawn in a transaction
 322:main.c        ****                     cap on number of notes to be dispensed
 323:main.c        **** 
 324:main.c        ****                     MAX Amount in a transaction (32 bit) | 2k cap (8 bit) | 1k cap (8 bit) | 500 ca
 325:main.c        ****                     (Before encryption)
 326:main.c        ****                 */
 327:main.c        ****                 uint32_t length = 1;
 1275              		.loc 1 327 0
 1276 0b93 C785C0FE 		movl	$1, -320(%rbp)
 1276      FFFF0100 
 1276      0000
 1277              	.LBB8:
 328:main.c        ****                 uint32_t befEncSenInit[2];
 329:main.c        ****                 for (int i = 0; i < 2; i++) befEncSenInit[i] = 0;
 1278              		.loc 1 329 0
 1279 0b9d C78574FE 		movl	$0, -396(%rbp)
 1279      FFFF0000 
 1279      0000
 1280 0ba7 EB1A     		jmp	.L60
 1281              	.L61:
 1282              		.loc 1 329 0 is_stmt 0 discriminator 2
 1283 0ba9 8B8574FE 		movl	-396(%rbp), %eax
 1283      FFFF
 1284 0baf 4898     		cltq
 1285 0bb1 C78485E0 		movl	$0, -288(%rbp,%rax,4)
 1285      FEFFFF00 
 1285      000000
 1286 0bbc 838574FE 		addl	$1, -396(%rbp)
 1286      FFFF01
 1287              	.L60:
 1288              		.loc 1 329 0 discriminator 1
 1289 0bc3 83BD74FE 		cmpl	$1, -396(%rbp)
 1289      FFFF01
 1290 0bca 7EDD     		jle	.L61
 1291              	.LBE8:
 330:main.c        ****                 befEncSenInit[1] = maxAmountCanBeDispensed;
 1292              		.loc 1 330 0 is_stmt 1
 1293 0bcc 8B050000 		movl	maxAmountCanBeDispensed(%rip), %eax
 1293      0000
 1294 0bd2 8985E4FE 		movl	%eax, -284(%rbp)
 1294      FFFF
 1295              	.LBB9:
 331:main.c        ****                 for (uint32_t i = 0; i <= 31; i += 8) {
 1296              		.loc 1 331 0
 1297 0bd8 C78578FE 		movl	$0, -392(%rbp)
 1297      FFFF0000 
 1297      0000
 1298 0be2 E9BB0000 		jmp	.L62
 1298      00
 1299              	.L67:
 332:main.c        ****                     if (i == 0) befEncSenInit[0] += ((1 << i) * ((uint32_t) max100Limit));
 1300              		.loc 1 332 0
 1301 0be7 83BD78FE 		cmpl	$0, -392(%rbp)
 1301      FFFF00
 1302 0bee 7529     		jne	.L63
 1303              		.loc 1 332 0 is_stmt 0 discriminator 1
 1304 0bf0 8B95E0FE 		movl	-288(%rbp), %edx
 1304      FFFF
 1305 0bf6 0FB60500 		movzbl	max100Limit(%rip), %eax
 1305      000000
 1306 0bfd 0FB6F0   		movzbl	%al, %esi
 1307 0c00 8B8578FE 		movl	-392(%rbp), %eax
 1307      FFFF
 1308 0c06 89C1     		movl	%eax, %ecx
 1309 0c08 D3E6     		sall	%cl, %esi
 1310 0c0a 89F0     		movl	%esi, %eax
 1311 0c0c 01D0     		addl	%edx, %eax
 1312 0c0e 8985E0FE 		movl	%eax, -288(%rbp)
 1312      FFFF
 1313 0c14 E9820000 		jmp	.L64
 1313      00
 1314              	.L63:
 333:main.c        ****                     else if (i == 8) befEncSenInit[0] += ((1 << i) * ((uint32_t) max500Limit));
 1315              		.loc 1 333 0 is_stmt 1
 1316 0c19 83BD78FE 		cmpl	$8, -392(%rbp)
 1316      FFFF08
 1317 0c20 7526     		jne	.L65
 1318              		.loc 1 333 0 is_stmt 0 discriminator 1
 1319 0c22 8B95E0FE 		movl	-288(%rbp), %edx
 1319      FFFF
 1320 0c28 0FB60500 		movzbl	max500Limit(%rip), %eax
 1320      000000
 1321 0c2f 0FB6F0   		movzbl	%al, %esi
 1322 0c32 8B8578FE 		movl	-392(%rbp), %eax
 1322      FFFF
 1323 0c38 89C1     		movl	%eax, %ecx
 1324 0c3a D3E6     		sall	%cl, %esi
 1325 0c3c 89F0     		movl	%esi, %eax
 1326 0c3e 01D0     		addl	%edx, %eax
 1327 0c40 8985E0FE 		movl	%eax, -288(%rbp)
 1327      FFFF
 1328 0c46 EB53     		jmp	.L64
 1329              	.L65:
 334:main.c        ****                     else if (i == 16) befEncSenInit[0] += ((1 << i) * ((uint32_t) max1000Limit));
 1330              		.loc 1 334 0 is_stmt 1
 1331 0c48 83BD78FE 		cmpl	$16, -392(%rbp)
 1331      FFFF10
 1332 0c4f 7526     		jne	.L66
 1333              		.loc 1 334 0 is_stmt 0 discriminator 1
 1334 0c51 8B95E0FE 		movl	-288(%rbp), %edx
 1334      FFFF
 1335 0c57 0FB60500 		movzbl	max1000Limit(%rip), %eax
 1335      000000
 1336 0c5e 0FB6F0   		movzbl	%al, %esi
 1337 0c61 8B8578FE 		movl	-392(%rbp), %eax
 1337      FFFF
 1338 0c67 89C1     		movl	%eax, %ecx
 1339 0c69 D3E6     		sall	%cl, %esi
 1340 0c6b 89F0     		movl	%esi, %eax
 1341 0c6d 01D0     		addl	%edx, %eax
 1342 0c6f 8985E0FE 		movl	%eax, -288(%rbp)
 1342      FFFF
 1343 0c75 EB24     		jmp	.L64
 1344              	.L66:
 335:main.c        ****                     else befEncSenInit[0] += ((1 << i) * ((uint32_t) max2000Limit));
 1345              		.loc 1 335 0 is_stmt 1
 1346 0c77 8B95E0FE 		movl	-288(%rbp), %edx
 1346      FFFF
 1347 0c7d 0FB60500 		movzbl	max2000Limit(%rip), %eax
 1347      000000
 1348 0c84 0FB6F0   		movzbl	%al, %esi
 1349 0c87 8B8578FE 		movl	-392(%rbp), %eax
 1349      FFFF
 1350 0c8d 89C1     		movl	%eax, %ecx
 1351 0c8f D3E6     		sall	%cl, %esi
 1352 0c91 89F0     		movl	%esi, %eax
 1353 0c93 01D0     		addl	%edx, %eax
 1354 0c95 8985E0FE 		movl	%eax, -288(%rbp)
 1354      FFFF
 1355              	.L64:
 331:main.c        ****                     if (i == 0) befEncSenInit[0] += ((1 << i) * ((uint32_t) max100Limit));
 1356              		.loc 1 331 0
 1357 0c9b 838578FE 		addl	$8, -392(%rbp)
 1357      FFFF08
 1358              	.L62:
 331:main.c        ****                     if (i == 0) befEncSenInit[0] += ((1 << i) * ((uint32_t) max100Limit));
 1359              		.loc 1 331 0 is_stmt 0 discriminator 1
 1360 0ca2 83BD78FE 		cmpl	$31, -392(%rbp)
 1360      FFFF1F
 1361 0ca9 0F8638FF 		jbe	.L67
 1361      FFFF
 1362              	.LBE9:
 336:main.c        ****                 }
 337:main.c        ****                 encrypt64(befEncSenInit);
 1363              		.loc 1 337 0 is_stmt 1
 1364 0caf 488D85E0 		leaq	-288(%rbp), %rax
 1364      FEFFFF
 1365 0cb6 4889C7   		movq	%rax, %rdi
 1366 0cb9 E8000000 		call	encrypt64
 1366      00
 1367              	.LBB10:
 338:main.c        **** 
 339:main.c        ****                 for (uint8_t i = 18; i <= 21; i++) {
 1368              		.loc 1 339 0
 1369 0cbe C68523FE 		movb	$18, -477(%rbp)
 1369      FFFF12
 1370 0cc5 E91C0100 		jmp	.L68
 1370      00
 1371              	.L75:
 1372              	.LBB11:
 340:main.c        ****                     uint8_t tempSto = 0;
 1373              		.loc 1 340 0
 1374 0cca C68500FF 		movb	$0, -256(%rbp)
 1374      FFFF00
 1375              	.LBB12:
 341:main.c        ****                     for (uint8_t j = 0; j <= 7; j++) {
 1376              		.loc 1 341 0
 1377 0cd1 C68524FE 		movb	$0, -476(%rbp)
 1377      FFFF00
 1378 0cd8 EB71     		jmp	.L69
 1379              	.L71:
 1380              	.LBB13:
 342:main.c        ****                         uint8_t temp = j + (i - 18) * 8;
 1381              		.loc 1 342 0
 1382 0cda 0FB68523 		movzbl	-477(%rbp), %eax
 1382      FEFFFF
 1383 0ce1 83E812   		subl	$18, %eax
 1384 0ce4 8D14C500 		leal	0(,%rax,8), %edx
 1384      000000
 1385 0ceb 0FB68524 		movzbl	-476(%rbp), %eax
 1385      FEFFFF
 1386 0cf2 01D0     		addl	%edx, %eax
 1387 0cf4 888544FE 		movb	%al, -444(%rbp)
 1387      FFFF
 343:main.c        ****                         if ((befEncSenInit[0] & (1 << temp)) != 0) {
 1388              		.loc 1 343 0
 1389 0cfa 8B95E0FE 		movl	-288(%rbp), %edx
 1389      FFFF
 1390 0d00 0FB68544 		movzbl	-444(%rbp), %eax
 1390      FEFFFF
 1391 0d07 BE010000 		movl	$1, %esi
 1391      00
 1392 0d0c 89C1     		movl	%eax, %ecx
 1393 0d0e D3E6     		sall	%cl, %esi
 1394 0d10 89F0     		movl	%esi, %eax
 1395 0d12 21D0     		andl	%edx, %eax
 1396 0d14 85C0     		testl	%eax, %eax
 1397 0d16 7423     		je	.L70
 344:main.c        ****                             tempSto += (1 << j);
 1398              		.loc 1 344 0
 1399 0d18 0FB68524 		movzbl	-476(%rbp), %eax
 1399      FEFFFF
 1400 0d1f BA010000 		movl	$1, %edx
 1400      00
 1401 0d24 89C1     		movl	%eax, %ecx
 1402 0d26 D3E2     		sall	%cl, %edx
 1403 0d28 89D0     		movl	%edx, %eax
 1404 0d2a 89C2     		movl	%eax, %edx
 1405 0d2c 0FB68500 		movzbl	-256(%rbp), %eax
 1405      FFFFFF
 1406 0d33 01D0     		addl	%edx, %eax
 1407 0d35 888500FF 		movb	%al, -256(%rbp)
 1407      FFFF
 1408              	.L70:
 1409              	.LBE13:
 341:main.c        ****                         uint8_t temp = j + (i - 18) * 8;
 1410              		.loc 1 341 0
 1411 0d3b 0FB68524 		movzbl	-476(%rbp), %eax
 1411      FEFFFF
 1412 0d42 83C001   		addl	$1, %eax
 1413 0d45 888524FE 		movb	%al, -476(%rbp)
 1413      FFFF
 1414              	.L69:
 341:main.c        ****                         uint8_t temp = j + (i - 18) * 8;
 1415              		.loc 1 341 0 is_stmt 0 discriminator 1
 1416 0d4b 80BD24FE 		cmpb	$7, -476(%rbp)
 1416      FFFF07
 1417 0d52 7686     		jbe	.L71
 1418              	.LBE12:
 345:main.c        ****                         }
 346:main.c        ****                     }
 347:main.c        ****                     flSleep(1000);
 1419              		.loc 1 347 0 is_stmt 1
 1420 0d54 BFE80300 		movl	$1000, %edi
 1420      00
 1421 0d59 E8000000 		call	flSleep
 1421      00
 348:main.c        ****                     fStatus = flWriteChannel(handle, (uint8_t) i, length, &tempSto, &error);
 1422              		.loc 1 348 0
 1423 0d5e 8B95C0FE 		movl	-320(%rbp), %edx
 1423      FFFF
 1424 0d64 0FB6B523 		movzbl	-477(%rbp), %esi
 1424      FEFFFF
 1425 0d6b 488B8510 		movq	-240(%rbp), %rax
 1425      FFFFFF
 1426 0d72 488DBD18 		leaq	-232(%rbp), %rdi
 1426      FFFFFF
 1427 0d79 488D8D00 		leaq	-256(%rbp), %rcx
 1427      FFFFFF
 1428 0d80 4989F8   		movq	%rdi, %r8
 1429 0d83 4889C7   		movq	%rax, %rdi
 1430 0d86 E8000000 		call	flWriteChannel
 1430      00
 1431 0d8b 8985BCFE 		movl	%eax, -324(%rbp)
 1431      FFFF
 349:main.c        ****                     if (LOG) printf("Write to channel %u = %u \n", i, tempSto);
 1432              		.loc 1 349 0
 1433 0d91 0FB60500 		movzbl	LOG(%rip), %eax
 1433      000000
 1434 0d98 84C0     		testb	%al, %al
 1435 0d9a 7422     		je	.L72
 1436              		.loc 1 349 0 is_stmt 0 discriminator 1
 1437 0d9c 0FB68500 		movzbl	-256(%rbp), %eax
 1437      FFFFFF
 1438 0da3 0FB6D0   		movzbl	%al, %edx
 1439 0da6 0FB68523 		movzbl	-477(%rbp), %eax
 1439      FEFFFF
 1440 0dad 89C6     		movl	%eax, %esi
 1441 0daf BF000000 		movl	$.LC52, %edi
 1441      00
 1442 0db4 B8000000 		movl	$0, %eax
 1442      00
 1443 0db9 E8000000 		call	printf
 1443      00
 1444              	.L72:
 350:main.c        ****                     CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1445              		.loc 1 350 0 is_stmt 1
 1446 0dbe 83BDBCFE 		cmpl	$0, -324(%rbp)
 1446      FFFF00
 1447 0dc5 740F     		je	.L73
 1448              		.loc 1 350 0 is_stmt 0 discriminator 1
 1449 0dc7 C7856CFE 		movl	$1, -404(%rbp)
 1449      FFFF0100 
 1449      0000
 1450              	.LBE11:
 1451              	.LBE10:
 1452 0dd1 E9E71F00 		jmp	.L31
 1452      00
 1453              	.L73:
 1454              	.LBB14:
 339:main.c        ****                     uint8_t tempSto = 0;
 1455              		.loc 1 339 0 is_stmt 1
 1456 0dd6 0FB68523 		movzbl	-477(%rbp), %eax
 1456      FEFFFF
 1457 0ddd 83C001   		addl	$1, %eax
 1458 0de0 888523FE 		movb	%al, -477(%rbp)
 1458      FFFF
 1459              	.L68:
 339:main.c        ****                     uint8_t tempSto = 0;
 1460              		.loc 1 339 0 is_stmt 0 discriminator 1
 1461 0de6 80BD23FE 		cmpb	$21, -477(%rbp)
 1461      FFFF15
 1462 0ded 0F86D7FE 		jbe	.L75
 1462      FFFF
 1463              	.LBE14:
 1464              	.LBB15:
 351:main.c        ****                 }
 352:main.c        **** 
 353:main.c        ****                 for (uint8_t i = 22; i <= 25; i++) {
 1465              		.loc 1 353 0 is_stmt 1
 1466 0df3 C68525FE 		movb	$22, -475(%rbp)
 1466      FFFF16
 1467 0dfa E91C0100 		jmp	.L76
 1467      00
 1468              	.L82:
 1469              	.LBB16:
 354:main.c        ****                     uint8_t tempSto = 0;
 1470              		.loc 1 354 0
 1471 0dff C68500FF 		movb	$0, -256(%rbp)
 1471      FFFF00
 1472              	.LBB17:
 355:main.c        ****                     for (uint8_t j = 0; j <= 7; j++) {
 1473              		.loc 1 355 0
 1474 0e06 C68526FE 		movb	$0, -474(%rbp)
 1474      FFFF00
 1475 0e0d EB71     		jmp	.L77
 1476              	.L79:
 1477              	.LBB18:
 356:main.c        ****                         uint8_t temp = j + (i - 22) * 8;
 1478              		.loc 1 356 0
 1479 0e0f 0FB68525 		movzbl	-475(%rbp), %eax
 1479      FEFFFF
 1480 0e16 83E816   		subl	$22, %eax
 1481 0e19 8D14C500 		leal	0(,%rax,8), %edx
 1481      000000
 1482 0e20 0FB68526 		movzbl	-474(%rbp), %eax
 1482      FEFFFF
 1483 0e27 01D0     		addl	%edx, %eax
 1484 0e29 888545FE 		movb	%al, -443(%rbp)
 1484      FFFF
 357:main.c        ****                         if ((befEncSenInit[1] & (1 << temp)) != 0) {
 1485              		.loc 1 357 0
 1486 0e2f 8B95E4FE 		movl	-284(%rbp), %edx
 1486      FFFF
 1487 0e35 0FB68545 		movzbl	-443(%rbp), %eax
 1487      FEFFFF
 1488 0e3c BE010000 		movl	$1, %esi
 1488      00
 1489 0e41 89C1     		movl	%eax, %ecx
 1490 0e43 D3E6     		sall	%cl, %esi
 1491 0e45 89F0     		movl	%esi, %eax
 1492 0e47 21D0     		andl	%edx, %eax
 1493 0e49 85C0     		testl	%eax, %eax
 1494 0e4b 7423     		je	.L78
 358:main.c        ****                             tempSto += (1 << j);
 1495              		.loc 1 358 0
 1496 0e4d 0FB68526 		movzbl	-474(%rbp), %eax
 1496      FEFFFF
 1497 0e54 BA010000 		movl	$1, %edx
 1497      00
 1498 0e59 89C1     		movl	%eax, %ecx
 1499 0e5b D3E2     		sall	%cl, %edx
 1500 0e5d 89D0     		movl	%edx, %eax
 1501 0e5f 89C2     		movl	%eax, %edx
 1502 0e61 0FB68500 		movzbl	-256(%rbp), %eax
 1502      FFFFFF
 1503 0e68 01D0     		addl	%edx, %eax
 1504 0e6a 888500FF 		movb	%al, -256(%rbp)
 1504      FFFF
 1505              	.L78:
 1506              	.LBE18:
 355:main.c        ****                         uint8_t temp = j + (i - 22) * 8;
 1507              		.loc 1 355 0
 1508 0e70 0FB68526 		movzbl	-474(%rbp), %eax
 1508      FEFFFF
 1509 0e77 83C001   		addl	$1, %eax
 1510 0e7a 888526FE 		movb	%al, -474(%rbp)
 1510      FFFF
 1511              	.L77:
 355:main.c        ****                         uint8_t temp = j + (i - 22) * 8;
 1512              		.loc 1 355 0 is_stmt 0 discriminator 1
 1513 0e80 80BD26FE 		cmpb	$7, -474(%rbp)
 1513      FFFF07
 1514 0e87 7686     		jbe	.L79
 1515              	.LBE17:
 359:main.c        ****                         }
 360:main.c        ****                     }
 361:main.c        ****                     flSleep(1000);
 1516              		.loc 1 361 0 is_stmt 1
 1517 0e89 BFE80300 		movl	$1000, %edi
 1517      00
 1518 0e8e E8000000 		call	flSleep
 1518      00
 362:main.c        ****                     fStatus = flWriteChannel(handle, (uint8_t) i, length, &tempSto, &error);
 1519              		.loc 1 362 0
 1520 0e93 8B95C0FE 		movl	-320(%rbp), %edx
 1520      FFFF
 1521 0e99 0FB6B525 		movzbl	-475(%rbp), %esi
 1521      FEFFFF
 1522 0ea0 488B8510 		movq	-240(%rbp), %rax
 1522      FFFFFF
 1523 0ea7 488DBD18 		leaq	-232(%rbp), %rdi
 1523      FFFFFF
 1524 0eae 488D8D00 		leaq	-256(%rbp), %rcx
 1524      FFFFFF
 1525 0eb5 4989F8   		movq	%rdi, %r8
 1526 0eb8 4889C7   		movq	%rax, %rdi
 1527 0ebb E8000000 		call	flWriteChannel
 1527      00
 1528 0ec0 8985BCFE 		movl	%eax, -324(%rbp)
 1528      FFFF
 363:main.c        ****                     if (LOG) printf("Write to channel %u = %u \n", i, tempSto);
 1529              		.loc 1 363 0
 1530 0ec6 0FB60500 		movzbl	LOG(%rip), %eax
 1530      000000
 1531 0ecd 84C0     		testb	%al, %al
 1532 0ecf 7422     		je	.L80
 1533              		.loc 1 363 0 is_stmt 0 discriminator 1
 1534 0ed1 0FB68500 		movzbl	-256(%rbp), %eax
 1534      FFFFFF
 1535 0ed8 0FB6D0   		movzbl	%al, %edx
 1536 0edb 0FB68525 		movzbl	-475(%rbp), %eax
 1536      FEFFFF
 1537 0ee2 89C6     		movl	%eax, %esi
 1538 0ee4 BF000000 		movl	$.LC52, %edi
 1538      00
 1539 0ee9 B8000000 		movl	$0, %eax
 1539      00
 1540 0eee E8000000 		call	printf
 1540      00
 1541              	.L80:
 364:main.c        ****                     CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1542              		.loc 1 364 0 is_stmt 1
 1543 0ef3 83BDBCFE 		cmpl	$0, -324(%rbp)
 1543      FFFF00
 1544 0efa 740F     		je	.L81
 1545              		.loc 1 364 0 is_stmt 0 discriminator 1
 1546 0efc C7856CFE 		movl	$1, -404(%rbp)
 1546      FFFF0100 
 1546      0000
 1547              	.LBE16:
 1548              	.LBE15:
 1549 0f06 E9B21E00 		jmp	.L31
 1549      00
 1550              	.L81:
 1551              	.LBB19:
 353:main.c        ****                     uint8_t tempSto = 0;
 1552              		.loc 1 353 0 is_stmt 1
 1553 0f0b 0FB68525 		movzbl	-475(%rbp), %eax
 1553      FEFFFF
 1554 0f12 83C001   		addl	$1, %eax
 1555 0f15 888525FE 		movb	%al, -475(%rbp)
 1555      FFFF
 1556              	.L76:
 353:main.c        ****                     uint8_t tempSto = 0;
 1557              		.loc 1 353 0 is_stmt 0 discriminator 1
 1558 0f1b 80BD25FE 		cmpb	$25, -475(%rbp)
 1558      FFFF19
 1559 0f22 0F86D7FE 		jbe	.L82
 1559      FFFF
 1560              	.L264:
 1561              	.LBE19:
 1562              	.LBB20:
 365:main.c        ****                 }
 366:main.c        **** 
 367:main.c        ****                 while (true) {
 368:main.c        ****                     uint8_t *readFromChannelZero = malloc(sizeof(uint8_t));
 1563              		.loc 1 368 0 is_stmt 1
 1564 0f28 BF010000 		movl	$1, %edi
 1564      00
 1565 0f2d E8000000 		call	malloc
 1565      00
 1566 0f32 48894590 		movq	%rax, -112(%rbp)
 369:main.c        **** 
 370:main.c        ****                     fStatus = flReadChannel(handle, (uint8_t) 0, length, readFromChannelZero, &erro
 1567              		.loc 1 370 0
 1568 0f36 8B95C0FE 		movl	-320(%rbp), %edx
 1568      FFFF
 1569 0f3c 488B8510 		movq	-240(%rbp), %rax
 1569      FFFFFF
 1570 0f43 488DB518 		leaq	-232(%rbp), %rsi
 1570      FFFFFF
 1571 0f4a 488B4D90 		movq	-112(%rbp), %rcx
 1572 0f4e 4989F0   		movq	%rsi, %r8
 1573 0f51 BE000000 		movl	$0, %esi
 1573      00
 1574 0f56 4889C7   		movq	%rax, %rdi
 1575 0f59 E8000000 		call	flReadChannel
 1575      00
 1576 0f5e 8985BCFE 		movl	%eax, -324(%rbp)
 1576      FFFF
 371:main.c        ****                     CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1577              		.loc 1 371 0
 1578 0f64 83BDBCFE 		cmpl	$0, -324(%rbp)
 1578      FFFF00
 1579 0f6b 740F     		je	.L83
 1580              		.loc 1 371 0 is_stmt 0 discriminator 1
 1581 0f6d C7856CFE 		movl	$1, -404(%rbp)
 1581      FFFF0100 
 1581      0000
 1582 0f77 E9E71D00 		jmp	.L74
 1582      00
 1583              	.L83:
 372:main.c        ****                     if (LOG) printf("Read from channel 0 = %u \n", *readFromChannelZero);
 1584              		.loc 1 372 0 is_stmt 1
 1585 0f7c 0FB60500 		movzbl	LOG(%rip), %eax
 1585      000000
 1586 0f83 84C0     		testb	%al, %al
 1587 0f85 741B     		je	.L84
 1588              		.loc 1 372 0 is_stmt 0 discriminator 1
 1589 0f87 488B4590 		movq	-112(%rbp), %rax
 1590 0f8b 0FB600   		movzbl	(%rax), %eax
 1591 0f8e 0FB6C0   		movzbl	%al, %eax
 1592 0f91 89C6     		movl	%eax, %esi
 1593 0f93 BF000000 		movl	$.LC53, %edi
 1593      00
 1594 0f98 B8000000 		movl	$0, %eax
 1594      00
 1595 0f9d E8000000 		call	printf
 1595      00
 1596              	.L84:
 373:main.c        **** 
 374:main.c        ****                     uint32_t valRead = 0;
 1597              		.loc 1 374 0 is_stmt 1
 1598 0fa2 C785C4FE 		movl	$0, -316(%rbp)
 1598      FFFF0000 
 1598      0000
 375:main.c        **** 
 376:main.c        ****                     if (((*readFromChannelZero) == 1) || ((*readFromChannelZero) == 2) || ((*readFr
 1599              		.loc 1 376 0
 1600 0fac 488B4590 		movq	-112(%rbp), %rax
 1601 0fb0 0FB600   		movzbl	(%rax), %eax
 1602 0fb3 3C01     		cmpb	$1, %al
 1603 0fb5 741A     		je	.L85
 1604              		.loc 1 376 0 is_stmt 0 discriminator 1
 1605 0fb7 488B4590 		movq	-112(%rbp), %rax
 1606 0fbb 0FB600   		movzbl	(%rax), %eax
 1607 0fbe 3C02     		cmpb	$2, %al
 1608 0fc0 740F     		je	.L85
 1609 0fc2 488B4590 		movq	-112(%rbp), %rax
 1610 0fc6 0FB600   		movzbl	(%rax), %eax
 1611 0fc9 3C05     		cmpb	$5, %al
 1612 0fcb 0F85831D 		jne	.L86
 1612      0000
 1613              	.L85:
 1614              	.LBB21:
 377:main.c        ****                         uint8_t cnt = 1;
 1615              		.loc 1 377 0 is_stmt 1
 1616 0fd1 C68527FE 		movb	$1, -473(%rbp)
 1616      FFFF01
 378:main.c        ****                         valRead = *readFromChannelZero;
 1617              		.loc 1 378 0
 1618 0fd8 488B4590 		movq	-112(%rbp), %rax
 1619 0fdc 0FB600   		movzbl	(%rax), %eax
 1620 0fdf 0FB6C0   		movzbl	%al, %eax
 1621 0fe2 8985C4FE 		movl	%eax, -316(%rbp)
 1621      FFFF
 379:main.c        ****                         bool cont = true;
 1622              		.loc 1 379 0
 1623 0fe8 C68528FE 		movb	$1, -472(%rbp)
 1623      FFFF01
 380:main.c        ****                         while (cnt < 3) {
 1624              		.loc 1 380 0
 1625 0fef E9A30000 		jmp	.L87
 1625      00
 1626              	.L92:
 381:main.c        ****                             flSleep(1000);
 1627              		.loc 1 381 0
 1628 0ff4 BFE80300 		movl	$1000, %edi
 1628      00
 1629 0ff9 E8000000 		call	flSleep
 1629      00
 382:main.c        ****                             fStatus = flReadChannel(handle, 0, length, readFromChannelZero, &error)
 1630              		.loc 1 382 0
 1631 0ffe 8B95C0FE 		movl	-320(%rbp), %edx
 1631      FFFF
 1632 1004 488B8510 		movq	-240(%rbp), %rax
 1632      FFFFFF
 1633 100b 488DB518 		leaq	-232(%rbp), %rsi
 1633      FFFFFF
 1634 1012 488B4D90 		movq	-112(%rbp), %rcx
 1635 1016 4989F0   		movq	%rsi, %r8
 1636 1019 BE000000 		movl	$0, %esi
 1636      00
 1637 101e 4889C7   		movq	%rax, %rdi
 1638 1021 E8000000 		call	flReadChannel
 1638      00
 1639 1026 8985BCFE 		movl	%eax, -324(%rbp)
 1639      FFFF
 383:main.c        ****                             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1640              		.loc 1 383 0
 1641 102c 83BDBCFE 		cmpl	$0, -324(%rbp)
 1641      FFFF00
 1642 1033 740F     		je	.L88
 1643              		.loc 1 383 0 is_stmt 0 discriminator 1
 1644 1035 C7856CFE 		movl	$1, -404(%rbp)
 1644      FFFF0100 
 1644      0000
 1645 103f E91F1D00 		jmp	.L74
 1645      00
 1646              	.L88:
 384:main.c        ****                             if (LOG) printf("Read from channel 0 = %u \n", *readFromChannelZero);
 1647              		.loc 1 384 0 is_stmt 1
 1648 1044 0FB60500 		movzbl	LOG(%rip), %eax
 1648      000000
 1649 104b 84C0     		testb	%al, %al
 1650 104d 741B     		je	.L89
 1651              		.loc 1 384 0 is_stmt 0 discriminator 1
 1652 104f 488B4590 		movq	-112(%rbp), %rax
 1653 1053 0FB600   		movzbl	(%rax), %eax
 1654 1056 0FB6C0   		movzbl	%al, %eax
 1655 1059 89C6     		movl	%eax, %esi
 1656 105b BF000000 		movl	$.LC53, %edi
 1656      00
 1657 1060 B8000000 		movl	$0, %eax
 1657      00
 1658 1065 E8000000 		call	printf
 1658      00
 1659              	.L89:
 385:main.c        **** 
 386:main.c        ****                             if (*readFromChannelZero == valRead) cnt++;
 1660              		.loc 1 386 0 is_stmt 1
 1661 106a 488B4590 		movq	-112(%rbp), %rax
 1662 106e 0FB600   		movzbl	(%rax), %eax
 1663 1071 0FB6C0   		movzbl	%al, %eax
 1664 1074 3B85C4FE 		cmpl	-316(%rbp), %eax
 1664      FFFF
 1665 107a 7512     		jne	.L90
 1666              		.loc 1 386 0 is_stmt 0 discriminator 1
 1667 107c 0FB68527 		movzbl	-473(%rbp), %eax
 1667      FEFFFF
 1668 1083 83C001   		addl	$1, %eax
 1669 1086 888527FE 		movb	%al, -473(%rbp)
 1669      FFFF
 1670 108c EB09     		jmp	.L87
 1671              	.L90:
 387:main.c        ****                             else {
 388:main.c        ****                                 cont = false;
 1672              		.loc 1 388 0 is_stmt 1
 1673 108e C68528FE 		movb	$0, -472(%rbp)
 1673      FFFF00
 389:main.c        ****                                 break;
 1674              		.loc 1 389 0
 1675 1095 EB0D     		jmp	.L91
 1676              	.L87:
 380:main.c        ****                             flSleep(1000);
 1677              		.loc 1 380 0 discriminator 1
 1678 1097 80BD27FE 		cmpb	$2, -473(%rbp)
 1678      FFFF02
 1679 109e 0F8650FF 		jbe	.L92
 1679      FFFF
 1680              	.L91:
 390:main.c        ****                             }
 391:main.c        ****                         }
 392:main.c        ****                         if (cont) {
 1681              		.loc 1 392 0
 1682 10a4 80BD28FE 		cmpb	$0, -472(%rbp)
 1682      FFFF00
 1683 10ab 0F84A31C 		je	.L86
 1683      0000
 393:main.c        ****                             if(valRead == 1 || valRead == 2) {
 1684              		.loc 1 393 0
 1685 10b1 83BDC4FE 		cmpl	$1, -316(%rbp)
 1685      FFFF01
 1686 10b8 740D     		je	.L93
 1687              		.loc 1 393 0 is_stmt 0 discriminator 1
 1688 10ba 83BDC4FE 		cmpl	$2, -316(%rbp)
 1688      FFFF02
 1689 10c1 0F856312 		jne	.L94
 1689      0000
 1690              	.L93:
 1691              	.LBB22:
 1692              	.LBB23:
 394:main.c        ****                                 uint32_t inpFromFrontEnd[2];
 395:main.c        ****                                 for (int i = 0; i < 2; i++) inpFromFrontEnd[i] = 0;
 1693              		.loc 1 395 0 is_stmt 1
 1694 10c7 C7857CFE 		movl	$0, -388(%rbp)
 1694      FFFF0000 
 1694      0000
 1695 10d1 EB1A     		jmp	.L95
 1696              	.L96:
 1697              		.loc 1 395 0 is_stmt 0 discriminator 2
 1698 10d3 8B857CFE 		movl	-388(%rbp), %eax
 1698      FFFF
 1699 10d9 4898     		cltq
 1700 10db C78485F0 		movl	$0, -272(%rbp,%rax,4)
 1700      FEFFFF00 
 1700      000000
 1701 10e6 83857CFE 		addl	$1, -388(%rbp)
 1701      FFFF01
 1702              	.L95:
 1703              		.loc 1 395 0 discriminator 1
 1704 10ed 83BD7CFE 		cmpl	$1, -388(%rbp)
 1704      FFFF01
 1705 10f4 7EDD     		jle	.L96
 1706              	.LBE23:
 1707              	.LBB24:
 396:main.c        ****                                 for (uint32_t i = 1; i <= 8; i++) {
 1708              		.loc 1 396 0 is_stmt 1
 1709 10f6 C78580FE 		movl	$1, -384(%rbp)
 1709      FFFF0100 
 1709      0000
 1710 1100 E9100100 		jmp	.L97
 1710      00
 1711              	.L103:
 1712              	.LBB25:
 397:main.c        ****                                     uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 1713              		.loc 1 397 0
 1714 1105 BF010000 		movl	$1, %edi
 1714      00
 1715 110a E8000000 		call	malloc
 1715      00
 1716 110f 488945A0 		movq	%rax, -96(%rbp)
 398:main.c        **** 
 399:main.c        ****                                     flSleep(1000);
 1717              		.loc 1 399 0
 1718 1113 BFE80300 		movl	$1000, %edi
 1718      00
 1719 1118 E8000000 		call	flSleep
 1719      00
 400:main.c        ****                                     fStatus = flReadChannel(handle, (uint8_t) i, length, readFromCh
 1720              		.loc 1 400 0
 1721 111d 8B95C0FE 		movl	-320(%rbp), %edx
 1721      FFFF
 1722 1123 8B8580FE 		movl	-384(%rbp), %eax
 1722      FFFF
 1723 1129 0FB6F0   		movzbl	%al, %esi
 1724 112c 488B8510 		movq	-240(%rbp), %rax
 1724      FFFFFF
 1725 1133 488DBD18 		leaq	-232(%rbp), %rdi
 1725      FFFFFF
 1726 113a 488B4DA0 		movq	-96(%rbp), %rcx
 1727 113e 4989F8   		movq	%rdi, %r8
 1728 1141 4889C7   		movq	%rax, %rdi
 1729 1144 E8000000 		call	flReadChannel
 1729      00
 1730 1149 8985BCFE 		movl	%eax, -324(%rbp)
 1730      FFFF
 401:main.c        ****                                     CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1731              		.loc 1 401 0
 1732 114f 83BDBCFE 		cmpl	$0, -324(%rbp)
 1732      FFFF00
 1733 1156 740F     		je	.L98
 1734              		.loc 1 401 0 is_stmt 0 discriminator 1
 1735 1158 C7856CFE 		movl	$1, -404(%rbp)
 1735      FFFF0100 
 1735      0000
 1736 1162 E9BE1100 		jmp	.L99
 1736      00
 1737              	.L98:
 402:main.c        ****                                     if (LOG) printf("Read from channel %u = %u \n", i, *readFromCha
 1738              		.loc 1 402 0 is_stmt 1
 1739 1167 0FB60500 		movzbl	LOG(%rip), %eax
 1739      000000
 1740 116e 84C0     		testb	%al, %al
 1741 1170 7421     		je	.L100
 1742              		.loc 1 402 0 is_stmt 0 discriminator 1
 1743 1172 488B45A0 		movq	-96(%rbp), %rax
 1744 1176 0FB600   		movzbl	(%rax), %eax
 1745 1179 0FB6D0   		movzbl	%al, %edx
 1746 117c 8B8580FE 		movl	-384(%rbp), %eax
 1746      FFFF
 1747 1182 89C6     		movl	%eax, %esi
 1748 1184 BF000000 		movl	$.LC54, %edi
 1748      00
 1749 1189 B8000000 		movl	$0, %eax
 1749      00
 1750 118e E8000000 		call	printf
 1750      00
 1751              	.L100:
 403:main.c        ****                                     uint32_t temp1 = 8 * (i - 1), temp2 = 8 * (i - 5);
 1752              		.loc 1 403 0 is_stmt 1
 1753 1193 8B8580FE 		movl	-384(%rbp), %eax
 1753      FFFF
 1754 1199 05FFFFFF 		addl	$536870911, %eax
 1754      1F
 1755 119e C1E003   		sall	$3, %eax
 1756 11a1 8985D8FE 		movl	%eax, -296(%rbp)
 1756      FFFF
 1757 11a7 8B8580FE 		movl	-384(%rbp), %eax
 1757      FFFF
 1758 11ad 05FBFFFF 		addl	$536870907, %eax
 1758      1F
 1759 11b2 C1E003   		sall	$3, %eax
 1760 11b5 8985DCFE 		movl	%eax, -292(%rbp)
 1760      FFFF
 404:main.c        ****                                     if (i <= 4) inpFromFrontEnd[0] += (*readFromChannel_i) * (1 << 
 1761              		.loc 1 404 0
 1762 11bb 83BD80FE 		cmpl	$4, -384(%rbp)
 1762      FFFF04
 1763 11c2 7726     		ja	.L101
 1764              		.loc 1 404 0 is_stmt 0 discriminator 1
 1765 11c4 8B95F0FE 		movl	-272(%rbp), %edx
 1765      FFFF
 1766 11ca 488B45A0 		movq	-96(%rbp), %rax
 1767 11ce 0FB600   		movzbl	(%rax), %eax
 1768 11d1 0FB6F0   		movzbl	%al, %esi
 1769 11d4 8B85D8FE 		movl	-296(%rbp), %eax
 1769      FFFF
 1770 11da 89C1     		movl	%eax, %ecx
 1771 11dc D3E6     		sall	%cl, %esi
 1772 11de 89F0     		movl	%esi, %eax
 1773 11e0 01D0     		addl	%edx, %eax
 1774 11e2 8985F0FE 		movl	%eax, -272(%rbp)
 1774      FFFF
 1775 11e8 EB24     		jmp	.L102
 1776              	.L101:
 405:main.c        ****                                     else inpFromFrontEnd[1] += (*readFromChannel_i) * (1 << temp2);
 1777              		.loc 1 405 0 is_stmt 1
 1778 11ea 8B95F4FE 		movl	-268(%rbp), %edx
 1778      FFFF
 1779 11f0 488B45A0 		movq	-96(%rbp), %rax
 1780 11f4 0FB600   		movzbl	(%rax), %eax
 1781 11f7 0FB6F0   		movzbl	%al, %esi
 1782 11fa 8B85DCFE 		movl	-292(%rbp), %eax
 1782      FFFF
 1783 1200 89C1     		movl	%eax, %ecx
 1784 1202 D3E6     		sall	%cl, %esi
 1785 1204 89F0     		movl	%esi, %eax
 1786 1206 01D0     		addl	%edx, %eax
 1787 1208 8985F4FE 		movl	%eax, -268(%rbp)
 1787      FFFF
 1788              	.L102:
 1789              	.LBE25:
 396:main.c        ****                                     uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 1790              		.loc 1 396 0
 1791 120e 838580FE 		addl	$1, -384(%rbp)
 1791      FFFF01
 1792              	.L97:
 396:main.c        ****                                     uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 1793              		.loc 1 396 0 is_stmt 0 discriminator 1
 1794 1215 83BD80FE 		cmpl	$8, -384(%rbp)
 1794      FFFF08
 1795 121c 0F86E3FE 		jbe	.L103
 1795      FFFF
 1796              	.LBE24:
 406:main.c        ****                                 }
 407:main.c        ****                                 decrypt64(inpFromFrontEnd);
 1797              		.loc 1 407 0 is_stmt 1
 1798 1222 488D85F0 		leaq	-272(%rbp), %rax
 1798      FEFFFF
 1799 1229 4889C7   		movq	%rax, %rdi
 1800 122c E8000000 		call	decrypt64
 1800      00
 408:main.c        ****                                 uint8_t num_100_admin = 0, num_500_admin = 0, num_1000_admin = 0, n
 1801              		.loc 1 408 0
 1802 1231 C68529FE 		movb	$0, -471(%rbp)
 1802      FFFF00
 1803 1238 C6852AFE 		movb	$0, -470(%rbp)
 1803      FFFF00
 1804 123f C6852BFE 		movb	$0, -469(%rbp)
 1804      FFFF00
 1805 1246 C6852CFE 		movb	$0, -468(%rbp)
 1805      FFFF00
 409:main.c        ****                                 uint16_t userID = 0, unhashedPin = 0;
 1806              		.loc 1 409 0
 1807 124d 66C78550 		movw	$0, -432(%rbp)
 1807      FEFFFF00 
 1807      00
 1808 1256 66C78552 		movw	$0, -430(%rbp)
 1808      FEFFFF00 
 1808      00
 1809              	.LBB26:
 410:main.c        **** 
 411:main.c        ****                                 for (uint16_t i = 1; i <= 32; i++) {
 1810              		.loc 1 411 0
 1811 125f 66C78554 		movw	$1, -428(%rbp)
 1811      FEFFFF01 
 1811      00
 1812 1268 E9970000 		jmp	.L104
 1812      00
 1813              	.L108:
 412:main.c        ****                                     if (i <= 16) {
 1814              		.loc 1 412 0
 1815 126d 6683BD54 		cmpw	$16, -428(%rbp)
 1815      FEFFFF10 
 1816 1275 773F     		ja	.L105
 413:main.c        ****                                         if ((inpFromFrontEnd[1] & (1 << (i - 1))) != 0) unhashedPin
 1817              		.loc 1 413 0
 1818 1277 8B95F4FE 		movl	-268(%rbp), %edx
 1818      FFFF
 1819 127d 0FB78554 		movzwl	-428(%rbp), %eax
 1819      FEFFFF
 1820 1284 83E801   		subl	$1, %eax
 1821 1287 BE010000 		movl	$1, %esi
 1821      00
 1822 128c 89C1     		movl	%eax, %ecx
 1823 128e D3E6     		sall	%cl, %esi
 1824 1290 89F0     		movl	%esi, %eax
 1825 1292 21D0     		andl	%edx, %eax
 1826 1294 85C0     		testl	%eax, %eax
 1827 1296 745B     		je	.L107
 1828              		.loc 1 413 0 is_stmt 0 discriminator 1
 1829 1298 0FB78554 		movzwl	-428(%rbp), %eax
 1829      FEFFFF
 1830 129f 83E801   		subl	$1, %eax
 1831 12a2 BA010000 		movl	$1, %edx
 1831      00
 1832 12a7 89C1     		movl	%eax, %ecx
 1833 12a9 D3E2     		sall	%cl, %edx
 1834 12ab 89D0     		movl	%edx, %eax
 1835 12ad 66018552 		addw	%ax, -430(%rbp)
 1835      FEFFFF
 1836 12b4 EB3D     		jmp	.L107
 1837              	.L105:
 414:main.c        ****                                     } else {
 415:main.c        ****                                         if ((inpFromFrontEnd[1] & (1 << (i - 1))) != 0) userID += (
 1838              		.loc 1 415 0 is_stmt 1
 1839 12b6 8B95F4FE 		movl	-268(%rbp), %edx
 1839      FFFF
 1840 12bc 0FB78554 		movzwl	-428(%rbp), %eax
 1840      FEFFFF
 1841 12c3 83E801   		subl	$1, %eax
 1842 12c6 BE010000 		movl	$1, %esi
 1842      00
 1843 12cb 89C1     		movl	%eax, %ecx
 1844 12cd D3E6     		sall	%cl, %esi
 1845 12cf 89F0     		movl	%esi, %eax
 1846 12d1 21D0     		andl	%edx, %eax
 1847 12d3 85C0     		testl	%eax, %eax
 1848 12d5 741C     		je	.L107
 1849              		.loc 1 415 0 is_stmt 0 discriminator 1
 1850 12d7 0FB78554 		movzwl	-428(%rbp), %eax
 1850      FEFFFF
 1851 12de 83E811   		subl	$17, %eax
 1852 12e1 BA010000 		movl	$1, %edx
 1852      00
 1853 12e6 89C1     		movl	%eax, %ecx
 1854 12e8 D3E2     		sall	%cl, %edx
 1855 12ea 89D0     		movl	%edx, %eax
 1856 12ec 66018550 		addw	%ax, -432(%rbp)
 1856      FEFFFF
 1857              	.L107:
 411:main.c        ****                                     if (i <= 16) {
 1858              		.loc 1 411 0 is_stmt 1
 1859 12f3 0FB78554 		movzwl	-428(%rbp), %eax
 1859      FEFFFF
 1860 12fa 83C001   		addl	$1, %eax
 1861 12fd 66898554 		movw	%ax, -428(%rbp)
 1861      FEFFFF
 1862              	.L104:
 411:main.c        ****                                     if (i <= 16) {
 1863              		.loc 1 411 0 is_stmt 0 discriminator 1
 1864 1304 6683BD54 		cmpw	$32, -428(%rbp)
 1864      FEFFFF20 
 1865 130c 0F865BFF 		jbe	.L108
 1865      FFFF
 1866              	.LBE26:
 416:main.c        ****                                     }
 417:main.c        ****                                 }
 418:main.c        ****                                 printf("unhashedPin %u\n", unhashedPin);
 1867              		.loc 1 418 0 is_stmt 1
 1868 1312 0FB78552 		movzwl	-430(%rbp), %eax
 1868      FEFFFF
 1869 1319 89C6     		movl	%eax, %esi
 1870 131b BF000000 		movl	$.LC55, %edi
 1870      00
 1871 1320 B8000000 		movl	$0, %eax
 1871      00
 1872 1325 E8000000 		call	printf
 1872      00
 419:main.c        ****                                 printf("userID %u\n", userID);
 1873              		.loc 1 419 0
 1874 132a 0FB78550 		movzwl	-432(%rbp), %eax
 1874      FEFFFF
 1875 1331 89C6     		movl	%eax, %esi
 1876 1333 BF000000 		movl	$.LC56, %edi
 1876      00
 1877 1338 B8000000 		movl	$0, %eax
 1877      00
 1878 133d E8000000 		call	printf
 1878      00
 420:main.c        ****                                 uint16_t hashedPin = myHash(unhashedPin);
 1879              		.loc 1 420 0
 1880 1342 0FB78552 		movzwl	-430(%rbp), %eax
 1880      FEFFFF
 1881 1349 89C7     		movl	%eax, %edi
 1882 134b E8000000 		call	myHash
 1882      00
 1883 1350 6689855E 		movw	%ax, -418(%rbp)
 1883      FEFFFF
 421:main.c        ****                                 printf("hashedPin %u\n", hashedPin);
 1884              		.loc 1 421 0
 1885 1357 0FB7855E 		movzwl	-418(%rbp), %eax
 1885      FEFFFF
 1886 135e 89C6     		movl	%eax, %esi
 1887 1360 BF000000 		movl	$.LC57, %edi
 1887      00
 1888 1365 B8000000 		movl	$0, %eax
 1888      00
 1889 136a E8000000 		call	printf
 1889      00
 422:main.c        **** 
 423:main.c        ****                                 int bal = -1;
 1890              		.loc 1 423 0
 1891 136f C78560FE 		movl	$-1, -416(%rbp)
 1891      FFFFFFFF 
 1891      FFFF
 424:main.c        ****                                 bool isAdmin = false;
 1892              		.loc 1 424 0
 1893 1379 C68521FE 		movb	$0, -479(%rbp)
 1893      FFFF00
 425:main.c        ****                                 int inLineNum = -1;
 1894              		.loc 1 425 0
 1895 1380 C78564FE 		movl	$-1, -412(%rbp)
 1895      FFFFFFFF 
 1895      FFFF
 426:main.c        ****                                 uint8_t *statusOnChan9 = malloc(sizeof(uint8_t));
 1896              		.loc 1 426 0
 1897 138a BF010000 		movl	$1, %edi
 1897      00
 1898 138f E8000000 		call	malloc
 1898      00
 1899 1394 488945A8 		movq	%rax, -88(%rbp)
 427:main.c        ****                                 if (find(userID, hashedPin, &isAdmin, &bal, &inLineNum)) {
 1900              		.loc 1 427 0
 1901 1398 0FB7B55E 		movzwl	-418(%rbp), %esi
 1901      FEFFFF
 1902 139f 0FB78550 		movzwl	-432(%rbp), %eax
 1902      FEFFFF
 1903 13a6 488DBD64 		leaq	-412(%rbp), %rdi
 1903      FEFFFF
 1904 13ad 488D8D60 		leaq	-416(%rbp), %rcx
 1904      FEFFFF
 1905 13b4 488D9521 		leaq	-479(%rbp), %rdx
 1905      FEFFFF
 1906 13bb 4989F8   		movq	%rdi, %r8
 1907 13be 89C7     		movl	%eax, %edi
 1908 13c0 E8000000 		call	find
 1908      00
 1909 13c5 84C0     		testb	%al, %al
 1910 13c7 0F841A0E 		je	.L109
 1910      0000
 428:main.c        ****                                     printf("Valid user found \n");
 1911              		.loc 1 428 0
 1912 13cd BF000000 		movl	$.LC58, %edi
 1912      00
 1913 13d2 E8000000 		call	puts
 1913      00
 429:main.c        ****                                     if (!isAdmin) {
 1914              		.loc 1 429 0
 1915 13d7 0FB68521 		movzbl	-479(%rbp), %eax
 1915      FEFFFF
 1916 13de 83F001   		xorl	$1, %eax
 1917 13e1 84C0     		testb	%al, %al
 1918 13e3 0F84B508 		je	.L110
 1918      0000
 1919              	.LBB27:
 430:main.c        ****                                         int reqAmo = inpFromFrontEnd[0];
 1920              		.loc 1 430 0
 1921 13e9 8B85F0FE 		movl	-272(%rbp), %eax
 1921      FFFF
 1922 13ef 898568FE 		movl	%eax, -408(%rbp)
 1922      FFFF
 431:main.c        ****                                         if (suffBalUser(bal, &reqAmo)) {
 1923              		.loc 1 431 0
 1924 13f5 8B8560FE 		movl	-416(%rbp), %eax
 1924      FFFF
 1925 13fb 488D9568 		leaq	-408(%rbp), %rdx
 1925      FEFFFF
 1926 1402 4889D6   		movq	%rdx, %rsi
 1927 1405 89C7     		movl	%eax, %edi
 1928 1407 E8000000 		call	suffBalUser
 1928      00
 1929 140c 84C0     		testb	%al, %al
 1930 140e 0F841505 		je	.L111
 1930      0000
 1931              	.LBB28:
 432:main.c        ****     //                                        printf("bal %u\n", bal);
 433:main.c        ****     //                                        printf("req %u\n", reqAmo);
 434:main.c        ****                                             if (LOG) printf("Sufficient Balance in account\n");
 1932              		.loc 1 434 0
 1933 1414 0FB60500 		movzbl	LOG(%rip), %eax
 1933      000000
 1934 141b 84C0     		testb	%al, %al
 1935 141d 740A     		je	.L112
 1936              		.loc 1 434 0 is_stmt 0 discriminator 1
 1937 141f BF000000 		movl	$.LC59, %edi
 1937      00
 1938 1424 E8000000 		call	puts
 1938      00
 1939              	.L112:
 435:main.c        ****                                             *statusOnChan9 = 1;
 1940              		.loc 1 435 0 is_stmt 1
 1941 1429 488B45A8 		movq	-88(%rbp), %rax
 1942 142d C60001   		movb	$1, (%rax)
 436:main.c        ****                                             flSleep(1000);
 1943              		.loc 1 436 0
 1944 1430 BFE80300 		movl	$1000, %edi
 1944      00
 1945 1435 E8000000 		call	flSleep
 1945      00
 437:main.c        ****                                             if (LOG) printf("Write to channel %u = %u \n", 9, *stat
 1946              		.loc 1 437 0
 1947 143a 0FB60500 		movzbl	LOG(%rip), %eax
 1947      000000
 1948 1441 84C0     		testb	%al, %al
 1949 1443 7420     		je	.L113
 1950              		.loc 1 437 0 is_stmt 0 discriminator 1
 1951 1445 488B45A8 		movq	-88(%rbp), %rax
 1952 1449 0FB600   		movzbl	(%rax), %eax
 1953 144c 0FB6C0   		movzbl	%al, %eax
 1954 144f 89C2     		movl	%eax, %edx
 1955 1451 BE090000 		movl	$9, %esi
 1955      00
 1956 1456 BF000000 		movl	$.LC52, %edi
 1956      00
 1957 145b B8000000 		movl	$0, %eax
 1957      00
 1958 1460 E8000000 		call	printf
 1958      00
 1959              	.L113:
 438:main.c        ****                                             fStatus = flWriteChannel(handle, (uint8_t) 9, length, s
 1960              		.loc 1 438 0 is_stmt 1
 1961 1465 8B95C0FE 		movl	-320(%rbp), %edx
 1961      FFFF
 1962 146b 488B8510 		movq	-240(%rbp), %rax
 1962      FFFFFF
 1963 1472 488DB518 		leaq	-232(%rbp), %rsi
 1963      FFFFFF
 1964 1479 488B4DA8 		movq	-88(%rbp), %rcx
 1965 147d 4989F0   		movq	%rsi, %r8
 1966 1480 BE090000 		movl	$9, %esi
 1966      00
 1967 1485 4889C7   		movq	%rax, %rdi
 1968 1488 E8000000 		call	flWriteChannel
 1968      00
 1969 148d 8985BCFE 		movl	%eax, -324(%rbp)
 1969      FFFF
 439:main.c        ****                                             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1970              		.loc 1 439 0
 1971 1493 83BDBCFE 		cmpl	$0, -324(%rbp)
 1971      FFFF00
 1972 149a 740F     		je	.L114
 1973              		.loc 1 439 0 is_stmt 0 discriminator 1
 1974 149c C7856CFE 		movl	$1, -404(%rbp)
 1974      FFFF0100 
 1974      0000
 1975 14a6 E9EE0700 		jmp	.L143
 1975      00
 1976              	.L114:
 440:main.c        ****                                             flSleep(1000);
 1977              		.loc 1 440 0 is_stmt 1
 1978 14ab BFE80300 		movl	$1000, %edi
 1978      00
 1979 14b0 E8000000 		call	flSleep
 1979      00
 1980              	.LBB29:
 441:main.c        ****                                             uint32_t befEncSen[2];
 442:main.c        ****                                             for (int i = 0; i < 2; i++) befEncSen[i] = 0;
 1981              		.loc 1 442 0
 1982 14b5 C78584FE 		movl	$0, -380(%rbp)
 1982      FFFF0000 
 1982      0000
 1983 14bf EB1A     		jmp	.L116
 1984              	.L117:
 1985              		.loc 1 442 0 is_stmt 0 discriminator 2
 1986 14c1 8B8584FE 		movl	-380(%rbp), %eax
 1986      FFFF
 1987 14c7 4898     		cltq
 1988 14c9 C7848500 		movl	$0, -256(%rbp,%rax,4)
 1988      FFFFFF00 
 1988      000000
 1989 14d4 838584FE 		addl	$1, -380(%rbp)
 1989      FFFF01
 1990              	.L116:
 1991              		.loc 1 442 0 discriminator 1
 1992 14db 83BD84FE 		cmpl	$1, -380(%rbp)
 1992      FFFF01
 1993 14e2 7EDD     		jle	.L117
 1994              	.LBE29:
 443:main.c        ****                                             if ((*readFromChannelZero) == 1) {
 1995              		.loc 1 443 0 is_stmt 1
 1996 14e4 488B4590 		movq	-112(%rbp), %rax
 1997 14e8 0FB600   		movzbl	(%rax), %eax
 1998 14eb 3C01     		cmpb	$1, %al
 1999 14ed 753B     		jne	.L118
 444:main.c        ****                                                 befEncSen[0] = maxPercent * (dataFromCSV[inLineNum]
 2000              		.loc 1 444 0
 2001 14ef 8B8564FE 		movl	-412(%rbp), %eax
 2001      FFFF
 2002 14f5 4898     		cltq
 2003 14f7 48C1E004 		salq	$4, %rax
 2004 14fb 48050000 		addq	$dataFromCSV+12, %rax
 2004      0000
 2005 1501 8B10     		movl	(%rax), %edx
 2006 1503 8B8568FE 		movl	-408(%rbp), %eax
 2006      FFFF
 2007 1509 29C2     		subl	%eax, %edx
 2008 150b 89D0     		movl	%edx, %eax
 2009 150d F20F2AC0 		cvtsi2sd	%eax, %xmm0
 2010 1511 F20F100D 		movsd	maxPercent(%rip), %xmm1
 2010      00000000 
 2011 1519 F20F59C1 		mulsd	%xmm1, %xmm0
 2012 151d F2480F2C 		cvttsd2siq	%xmm0, %rax
 2012      C0
 2013 1522 898500FF 		movl	%eax, -256(%rbp)
 2013      FFFF
 2014 1528 EB3A     		jmp	.L119
 2015              	.L118:
 445:main.c        ****                                             }
 446:main.c        ****                                             else if ((*readFromChannelZero) == 2)  {
 2016              		.loc 1 446 0
 2017 152a 488B4590 		movq	-112(%rbp), %rax
 2018 152e 0FB600   		movzbl	(%rax), %eax
 2019 1531 3C02     		cmpb	$2, %al
 2020 1533 752F     		jne	.L119
 447:main.c        ****                                                 befEncSen[0] = maxPercent * dataFromCSV[inLineNum][
 2021              		.loc 1 447 0
 2022 1535 8B8564FE 		movl	-412(%rbp), %eax
 2022      FFFF
 2023 153b 4898     		cltq
 2024 153d 48C1E004 		salq	$4, %rax
 2025 1541 48050000 		addq	$dataFromCSV+12, %rax
 2025      0000
 2026 1547 8B00     		movl	(%rax), %eax
 2027 1549 F20F2AC0 		cvtsi2sd	%eax, %xmm0
 2028 154d F20F100D 		movsd	maxPercent(%rip), %xmm1
 2028      00000000 
 2029 1555 F20F59C1 		mulsd	%xmm1, %xmm0
 2030 1559 F2480F2C 		cvttsd2siq	%xmm0, %rax
 2030      C0
 2031 155e 898500FF 		movl	%eax, -256(%rbp)
 2031      FFFF
 2032              	.L119:
 448:main.c        ****                                             }
 449:main.c        ****                                             encrypt64(befEncSen);
 2033              		.loc 1 449 0
 2034 1564 488D8500 		leaq	-256(%rbp), %rax
 2034      FFFFFF
 2035 156b 4889C7   		movq	%rax, %rdi
 2036 156e E8000000 		call	encrypt64
 2036      00
 2037              	.LBB30:
 450:main.c        ****                                             for (uint8_t i = 10; i <= 13; i++) {
 2038              		.loc 1 450 0
 2039 1573 C6852DFE 		movb	$10, -467(%rbp)
 2039      FFFF0A
 2040 157a E91C0100 		jmp	.L120
 2040      00
 2041              	.L126:
 2042              	.LBB31:
 451:main.c        ****                                                 uint8_t tempSto = 0;
 2043              		.loc 1 451 0
 2044 157f C68522FE 		movb	$0, -478(%rbp)
 2044      FFFF00
 2045              	.LBB32:
 452:main.c        ****                                                 for (uint8_t j = 0; j <= 7; j++) {
 2046              		.loc 1 452 0
 2047 1586 C6852EFE 		movb	$0, -466(%rbp)
 2047      FFFF00
 2048 158d EB71     		jmp	.L121
 2049              	.L123:
 2050              	.LBB33:
 453:main.c        ****                                                     uint8_t temp = j + (i - 10) * 8;
 2051              		.loc 1 453 0
 2052 158f 0FB6852D 		movzbl	-467(%rbp), %eax
 2052      FEFFFF
 2053 1596 83E80A   		subl	$10, %eax
 2054 1599 8D14C500 		leal	0(,%rax,8), %edx
 2054      000000
 2055 15a0 0FB6852E 		movzbl	-466(%rbp), %eax
 2055      FEFFFF
 2056 15a7 01D0     		addl	%edx, %eax
 2057 15a9 88854AFE 		movb	%al, -438(%rbp)
 2057      FFFF
 454:main.c        ****                                                     if ((befEncSen[0] & (1 << temp)) != 0) {
 2058              		.loc 1 454 0
 2059 15af 8B9500FF 		movl	-256(%rbp), %edx
 2059      FFFF
 2060 15b5 0FB6854A 		movzbl	-438(%rbp), %eax
 2060      FEFFFF
 2061 15bc BE010000 		movl	$1, %esi
 2061      00
 2062 15c1 89C1     		movl	%eax, %ecx
 2063 15c3 D3E6     		sall	%cl, %esi
 2064 15c5 89F0     		movl	%esi, %eax
 2065 15c7 21D0     		andl	%edx, %eax
 2066 15c9 85C0     		testl	%eax, %eax
 2067 15cb 7423     		je	.L122
 455:main.c        ****                                                         tempSto += (1 << j);
 2068              		.loc 1 455 0
 2069 15cd 0FB6852E 		movzbl	-466(%rbp), %eax
 2069      FEFFFF
 2070 15d4 BA010000 		movl	$1, %edx
 2070      00
 2071 15d9 89C1     		movl	%eax, %ecx
 2072 15db D3E2     		sall	%cl, %edx
 2073 15dd 89D0     		movl	%edx, %eax
 2074 15df 89C2     		movl	%eax, %edx
 2075 15e1 0FB68522 		movzbl	-478(%rbp), %eax
 2075      FEFFFF
 2076 15e8 01D0     		addl	%edx, %eax
 2077 15ea 888522FE 		movb	%al, -478(%rbp)
 2077      FFFF
 2078              	.L122:
 2079              	.LBE33:
 452:main.c        ****                                                     uint8_t temp = j + (i - 10) * 8;
 2080              		.loc 1 452 0
 2081 15f0 0FB6852E 		movzbl	-466(%rbp), %eax
 2081      FEFFFF
 2082 15f7 83C001   		addl	$1, %eax
 2083 15fa 88852EFE 		movb	%al, -466(%rbp)
 2083      FFFF
 2084              	.L121:
 452:main.c        ****                                                     uint8_t temp = j + (i - 10) * 8;
 2085              		.loc 1 452 0 is_stmt 0 discriminator 1
 2086 1600 80BD2EFE 		cmpb	$7, -466(%rbp)
 2086      FFFF07
 2087 1607 7686     		jbe	.L123
 2088              	.LBE32:
 456:main.c        ****                                                     }
 457:main.c        ****                                                 }
 458:main.c        ****                                                 flSleep(1000);
 2089              		.loc 1 458 0 is_stmt 1
 2090 1609 BFE80300 		movl	$1000, %edi
 2090      00
 2091 160e E8000000 		call	flSleep
 2091      00
 459:main.c        ****                                                 fStatus = flWriteChannel(handle, (uint8_t) i, lengt
 2092              		.loc 1 459 0
 2093 1613 8B95C0FE 		movl	-320(%rbp), %edx
 2093      FFFF
 2094 1619 0FB6B52D 		movzbl	-467(%rbp), %esi
 2094      FEFFFF
 2095 1620 488B8510 		movq	-240(%rbp), %rax
 2095      FFFFFF
 2096 1627 488DBD18 		leaq	-232(%rbp), %rdi
 2096      FFFFFF
 2097 162e 488D8D22 		leaq	-478(%rbp), %rcx
 2097      FEFFFF
 2098 1635 4989F8   		movq	%rdi, %r8
 2099 1638 4889C7   		movq	%rax, %rdi
 2100 163b E8000000 		call	flWriteChannel
 2100      00
 2101 1640 8985BCFE 		movl	%eax, -324(%rbp)
 2101      FFFF
 460:main.c        ****                                                 if (LOG) printf("Write to channel %u = %u \n", i, t
 2102              		.loc 1 460 0
 2103 1646 0FB60500 		movzbl	LOG(%rip), %eax
 2103      000000
 2104 164d 84C0     		testb	%al, %al
 2105 164f 7422     		je	.L124
 2106              		.loc 1 460 0 is_stmt 0 discriminator 1
 2107 1651 0FB68522 		movzbl	-478(%rbp), %eax
 2107      FEFFFF
 2108 1658 0FB6D0   		movzbl	%al, %edx
 2109 165b 0FB6852D 		movzbl	-467(%rbp), %eax
 2109      FEFFFF
 2110 1662 89C6     		movl	%eax, %esi
 2111 1664 BF000000 		movl	$.LC52, %edi
 2111      00
 2112 1669 B8000000 		movl	$0, %eax
 2112      00
 2113 166e E8000000 		call	printf
 2113      00
 2114              	.L124:
 461:main.c        ****                                                 CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2115              		.loc 1 461 0 is_stmt 1
 2116 1673 83BDBCFE 		cmpl	$0, -324(%rbp)
 2116      FFFF00
 2117 167a 740F     		je	.L125
 2118              		.loc 1 461 0 is_stmt 0 discriminator 1
 2119 167c C7856CFE 		movl	$1, -404(%rbp)
 2119      FFFF0100 
 2119      0000
 2120              	.LBE31:
 2121              	.LBE30:
 439:main.c        ****                                             flSleep(1000);
 2122              		.loc 1 439 0 is_stmt 1 discriminator 1
 2123 1686 E90E0600 		jmp	.L143
 2123      00
 2124              	.L125:
 2125              	.LBB34:
 450:main.c        ****                                                 uint8_t tempSto = 0;
 2126              		.loc 1 450 0
 2127 168b 0FB6852D 		movzbl	-467(%rbp), %eax
 2127      FEFFFF
 2128 1692 83C001   		addl	$1, %eax
 2129 1695 88852DFE 		movb	%al, -467(%rbp)
 2129      FFFF
 2130              	.L120:
 450:main.c        ****                                                 uint8_t tempSto = 0;
 2131              		.loc 1 450 0 is_stmt 0 discriminator 1
 2132 169b 80BD2DFE 		cmpb	$13, -467(%rbp)
 2132      FFFF0D
 2133 16a2 0F86D7FE 		jbe	.L126
 2133      FFFF
 2134              	.LBE34:
 2135              	.LBB35:
 462:main.c        ****                                             }
 463:main.c        **** 
 464:main.c        ****                                             for (uint8_t i = 14; i <= 17; i++) {
 2136              		.loc 1 464 0 is_stmt 1
 2137 16a8 C6852FFE 		movb	$14, -465(%rbp)
 2137      FFFF0E
 2138 16af E91C0100 		jmp	.L127
 2138      00
 2139              	.L133:
 2140              	.LBB36:
 465:main.c        ****                                                 uint8_t tempSto = 0;
 2141              		.loc 1 465 0
 2142 16b4 C68522FE 		movb	$0, -478(%rbp)
 2142      FFFF00
 2143              	.LBB37:
 466:main.c        ****                                                 for (uint8_t j = 0; j <= 7; j++) {
 2144              		.loc 1 466 0
 2145 16bb C68530FE 		movb	$0, -464(%rbp)
 2145      FFFF00
 2146 16c2 EB71     		jmp	.L128
 2147              	.L130:
 2148              	.LBB38:
 467:main.c        ****                                                     uint8_t temp = j + (i - 14) * 8;
 2149              		.loc 1 467 0
 2150 16c4 0FB6852F 		movzbl	-465(%rbp), %eax
 2150      FEFFFF
 2151 16cb 83E80E   		subl	$14, %eax
 2152 16ce 8D14C500 		leal	0(,%rax,8), %edx
 2152      000000
 2153 16d5 0FB68530 		movzbl	-464(%rbp), %eax
 2153      FEFFFF
 2154 16dc 01D0     		addl	%edx, %eax
 2155 16de 88854BFE 		movb	%al, -437(%rbp)
 2155      FFFF
 468:main.c        ****                                                     if ((befEncSen[1] & (1 << temp)) != 0) {
 2156              		.loc 1 468 0
 2157 16e4 8B9504FF 		movl	-252(%rbp), %edx
 2157      FFFF
 2158 16ea 0FB6854B 		movzbl	-437(%rbp), %eax
 2158      FEFFFF
 2159 16f1 BE010000 		movl	$1, %esi
 2159      00
 2160 16f6 89C1     		movl	%eax, %ecx
 2161 16f8 D3E6     		sall	%cl, %esi
 2162 16fa 89F0     		movl	%esi, %eax
 2163 16fc 21D0     		andl	%edx, %eax
 2164 16fe 85C0     		testl	%eax, %eax
 2165 1700 7423     		je	.L129
 469:main.c        ****                                                         tempSto += (1 << j);
 2166              		.loc 1 469 0
 2167 1702 0FB68530 		movzbl	-464(%rbp), %eax
 2167      FEFFFF
 2168 1709 BA010000 		movl	$1, %edx
 2168      00
 2169 170e 89C1     		movl	%eax, %ecx
 2170 1710 D3E2     		sall	%cl, %edx
 2171 1712 89D0     		movl	%edx, %eax
 2172 1714 89C2     		movl	%eax, %edx
 2173 1716 0FB68522 		movzbl	-478(%rbp), %eax
 2173      FEFFFF
 2174 171d 01D0     		addl	%edx, %eax
 2175 171f 888522FE 		movb	%al, -478(%rbp)
 2175      FFFF
 2176              	.L129:
 2177              	.LBE38:
 466:main.c        ****                                                     uint8_t temp = j + (i - 14) * 8;
 2178              		.loc 1 466 0
 2179 1725 0FB68530 		movzbl	-464(%rbp), %eax
 2179      FEFFFF
 2180 172c 83C001   		addl	$1, %eax
 2181 172f 888530FE 		movb	%al, -464(%rbp)
 2181      FFFF
 2182              	.L128:
 466:main.c        ****                                                     uint8_t temp = j + (i - 14) * 8;
 2183              		.loc 1 466 0 is_stmt 0 discriminator 1
 2184 1735 80BD30FE 		cmpb	$7, -464(%rbp)
 2184      FFFF07
 2185 173c 7686     		jbe	.L130
 2186              	.LBE37:
 470:main.c        ****                                                     }
 471:main.c        ****                                                 }
 472:main.c        ****                                                 flSleep(1000);
 2187              		.loc 1 472 0 is_stmt 1
 2188 173e BFE80300 		movl	$1000, %edi
 2188      00
 2189 1743 E8000000 		call	flSleep
 2189      00
 473:main.c        ****                                                 fStatus = flWriteChannel(handle, (uint8_t) i, lengt
 2190              		.loc 1 473 0
 2191 1748 8B95C0FE 		movl	-320(%rbp), %edx
 2191      FFFF
 2192 174e 0FB6B52F 		movzbl	-465(%rbp), %esi
 2192      FEFFFF
 2193 1755 488B8510 		movq	-240(%rbp), %rax
 2193      FFFFFF
 2194 175c 488DBD18 		leaq	-232(%rbp), %rdi
 2194      FFFFFF
 2195 1763 488D8D22 		leaq	-478(%rbp), %rcx
 2195      FEFFFF
 2196 176a 4989F8   		movq	%rdi, %r8
 2197 176d 4889C7   		movq	%rax, %rdi
 2198 1770 E8000000 		call	flWriteChannel
 2198      00
 2199 1775 8985BCFE 		movl	%eax, -324(%rbp)
 2199      FFFF
 474:main.c        ****                                                 if (LOG) printf("Write to channel %u = %u \n", i, t
 2200              		.loc 1 474 0
 2201 177b 0FB60500 		movzbl	LOG(%rip), %eax
 2201      000000
 2202 1782 84C0     		testb	%al, %al
 2203 1784 7422     		je	.L131
 2204              		.loc 1 474 0 is_stmt 0 discriminator 1
 2205 1786 0FB68522 		movzbl	-478(%rbp), %eax
 2205      FEFFFF
 2206 178d 0FB6D0   		movzbl	%al, %edx
 2207 1790 0FB6852F 		movzbl	-465(%rbp), %eax
 2207      FEFFFF
 2208 1797 89C6     		movl	%eax, %esi
 2209 1799 BF000000 		movl	$.LC52, %edi
 2209      00
 2210 179e B8000000 		movl	$0, %eax
 2210      00
 2211 17a3 E8000000 		call	printf
 2211      00
 2212              	.L131:
 475:main.c        ****                                                 CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2213              		.loc 1 475 0 is_stmt 1
 2214 17a8 83BDBCFE 		cmpl	$0, -324(%rbp)
 2214      FFFF00
 2215 17af 740F     		je	.L132
 2216              		.loc 1 475 0 is_stmt 0 discriminator 1
 2217 17b1 C7856CFE 		movl	$1, -404(%rbp)
 2217      FFFF0100 
 2217      0000
 2218              	.LBE36:
 2219              	.LBE35:
 439:main.c        ****                                             flSleep(1000);
 2220              		.loc 1 439 0 is_stmt 1 discriminator 1
 2221 17bb E9D90400 		jmp	.L143
 2221      00
 2222              	.L132:
 2223              	.LBB39:
 464:main.c        ****                                                 uint8_t tempSto = 0;
 2224              		.loc 1 464 0
 2225 17c0 0FB6852F 		movzbl	-465(%rbp), %eax
 2225      FEFFFF
 2226 17c7 83C001   		addl	$1, %eax
 2227 17ca 88852FFE 		movb	%al, -465(%rbp)
 2227      FFFF
 2228              	.L127:
 464:main.c        ****                                                 uint8_t tempSto = 0;
 2229              		.loc 1 464 0 is_stmt 0 discriminator 1
 2230 17d0 80BD2FFE 		cmpb	$17, -465(%rbp)
 2230      FFFF11
 2231 17d7 0F86D7FE 		jbe	.L133
 2231      FFFF
 2232              	.LBE39:
 476:main.c        ****                                             }
 477:main.c        ****                                             /* update the balance in the global variable now and up
 478:main.c        ****                                             if ((*readFromChannelZero) == 1) {
 2233              		.loc 1 478 0 is_stmt 1
 2234 17dd 488B4590 		movq	-112(%rbp), %rax
 2235 17e1 0FB600   		movzbl	(%rax), %eax
 2236 17e4 3C01     		cmpb	$1, %al
 2237 17e6 0F853801 		jne	.L134
 2237      0000
 479:main.c        ****                                                 dataFromCSV[inLineNum][3] -= reqAmo;
 2238              		.loc 1 479 0
 2239 17ec 8B8564FE 		movl	-412(%rbp), %eax
 2239      FFFF
 2240 17f2 8B9564FE 		movl	-412(%rbp), %edx
 2240      FFFF
 2241 17f8 4863D2   		movslq	%edx, %rdx
 2242 17fb 48C1E204 		salq	$4, %rdx
 2243 17ff 4881C200 		addq	$dataFromCSV+12, %rdx
 2243      000000
 2244 1806 8B0A     		movl	(%rdx), %ecx
 2245 1808 8B9568FE 		movl	-408(%rbp), %edx
 2245      FFFF
 2246 180e 29D1     		subl	%edx, %ecx
 2247 1810 89CA     		movl	%ecx, %edx
 2248 1812 4898     		cltq
 2249 1814 48C1E004 		salq	$4, %rax
 2250 1818 48050000 		addq	$dataFromCSV+12, %rax
 2250      0000
 2251 181e 8910     		movl	%edx, (%rax)
 480:main.c        **** 
 481:main.c        ****                                                 /* Updating csv file in place */
 482:main.c        ****                                                 fPtr = fopen("SampleBackEndDatabase.csv", "w+"); //
 2252              		.loc 1 482 0
 2253 1820 BE000000 		movl	$.LC60, %esi
 2253      00
 2254 1825 BF000000 		movl	$.LC50, %edi
 2254      00
 2255 182a E8000000 		call	fopen
 2255      00
 2256 182f 48894588 		movq	%rax, -120(%rbp)
 483:main.c        ****                                                 fprintf(fPtr, "%s", "\"User ID (decimal)\",\"PIN Ha
 2257              		.loc 1 483 0
 2258 1833 488B4588 		movq	-120(%rbp), %rax
 2259 1837 4889C1   		movq	%rax, %rcx
 2260 183a BA440000 		movl	$68, %edx
 2260      00
 2261 183f BE010000 		movl	$1, %esi
 2261      00
 2262 1844 BF000000 		movl	$.LC61, %edi
 2262      00
 2263 1849 E8000000 		call	fwrite
 2263      00
 484:main.c        ****                                                 fprintf(fPtr, "\n");
 2264              		.loc 1 484 0
 2265 184e 488B4588 		movq	-120(%rbp), %rax
 2266 1852 4889C6   		movq	%rax, %rsi
 2267 1855 BF0A0000 		movl	$10, %edi
 2267      00
 2268 185a E8000000 		call	fputc
 2268      00
 2269              	.LBB40:
 485:main.c        ****                                                 for (int i = 1; i <= numLines; i++) {
 2270              		.loc 1 485 0
 2271 185f C78588FE 		movl	$1, -376(%rbp)
 2271      FFFF0100 
 2271      0000
 2272 1869 E9930000 		jmp	.L135
 2272      00
 2273              	.L141:
 2274              	.LBB41:
 486:main.c        ****                                                     for (int k = 0; k < 4; k++) {
 2275              		.loc 1 486 0
 2276 186e C7858CFE 		movl	$0, -372(%rbp)
 2276      FFFF0000 
 2276      0000
 2277 1878 EB77     		jmp	.L136
 2278              	.L140:
 487:main.c        ****                                                         fprintf(fPtr, "%d", dataFromCSV[i][k]);
 2279              		.loc 1 487 0
 2280 187a 8B858CFE 		movl	-372(%rbp), %eax
 2280      FFFF
 2281 1880 4898     		cltq
 2282 1882 8B9588FE 		movl	-376(%rbp), %edx
 2282      FFFF
 2283 1888 4863D2   		movslq	%edx, %rdx
 2284 188b 48C1E202 		salq	$2, %rdx
 2285 188f 4801D0   		addq	%rdx, %rax
 2286 1892 8B148500 		movl	dataFromCSV(,%rax,4), %edx
 2286      000000
 2287 1899 488B4588 		movq	-120(%rbp), %rax
 2288 189d BE000000 		movl	$.LC1, %esi
 2288      00
 2289 18a2 4889C7   		movq	%rax, %rdi
 2290 18a5 B8000000 		movl	$0, %eax
 2290      00
 2291 18aa E8000000 		call	fprintf
 2291      00
 488:main.c        ****                                                         if (k == 3) {
 2292              		.loc 1 488 0
 2293 18af 83BD8CFE 		cmpl	$3, -372(%rbp)
 2293      FFFF03
 2294 18b6 7521     		jne	.L137
 489:main.c        ****                                                             if (i != numLines) fprintf(fPtr, "\n");
 2295              		.loc 1 489 0
 2296 18b8 8B050000 		movl	numLines(%rip), %eax
 2296      0000
 2297 18be 398588FE 		cmpl	%eax, -376(%rbp)
 2297      FFFF
 2298 18c4 7424     		je	.L139
 2299              		.loc 1 489 0 is_stmt 0 discriminator 1
 2300 18c6 488B4588 		movq	-120(%rbp), %rax
 2301 18ca 4889C6   		movq	%rax, %rsi
 2302 18cd BF0A0000 		movl	$10, %edi
 2302      00
 2303 18d2 E8000000 		call	fputc
 2303      00
 2304 18d7 EB11     		jmp	.L139
 2305              	.L137:
 490:main.c        ****                                                         } else fprintf(fPtr, ",");
 2306              		.loc 1 490 0 is_stmt 1
 2307 18d9 488B4588 		movq	-120(%rbp), %rax
 2308 18dd 4889C6   		movq	%rax, %rsi
 2309 18e0 BF2C0000 		movl	$44, %edi
 2309      00
 2310 18e5 E8000000 		call	fputc
 2310      00
 2311              	.L139:
 486:main.c        ****                                                         fprintf(fPtr, "%d", dataFromCSV[i][k]);
 2312              		.loc 1 486 0
 2313 18ea 83858CFE 		addl	$1, -372(%rbp)
 2313      FFFF01
 2314              	.L136:
 486:main.c        ****                                                         fprintf(fPtr, "%d", dataFromCSV[i][k]);
 2315              		.loc 1 486 0 is_stmt 0 discriminator 1
 2316 18f1 83BD8CFE 		cmpl	$3, -372(%rbp)
 2316      FFFF03
 2317 18f8 7E80     		jle	.L140
 2318              	.LBE41:
 485:main.c        ****                                                     for (int k = 0; k < 4; k++) {
 2319              		.loc 1 485 0 is_stmt 1
 2320 18fa 838588FE 		addl	$1, -376(%rbp)
 2320      FFFF01
 2321              	.L135:
 485:main.c        ****                                                     for (int k = 0; k < 4; k++) {
 2322              		.loc 1 485 0 is_stmt 0 discriminator 1
 2323 1901 8B050000 		movl	numLines(%rip), %eax
 2323      0000
 2324 1907 398588FE 		cmpl	%eax, -376(%rbp)
 2324      FFFF
 2325 190d 0F8E5BFF 		jle	.L141
 2325      FFFF
 2326              	.LBE40:
 491:main.c        ****                                                     }
 492:main.c        ****                                                 }
 493:main.c        ****                                                 fclose(fPtr);
 2327              		.loc 1 493 0 is_stmt 1
 2328 1913 488B4588 		movq	-120(%rbp), %rax
 2329 1917 4889C7   		movq	%rax, %rdi
 2330 191a E8000000 		call	fclose
 2330      00
 2331              	.LBE28:
 2332 191f E9700300 		jmp	.L142
 2332      00
 2333              	.L134:
 2334 1924 E96B0300 		jmp	.L142
 2334      00
 2335              	.L111:
 2336              	.LBB42:
 494:main.c        ****                                             }
 495:main.c        ****                                         } 
 496:main.c        ****                                         else {
 497:main.c        ****     //                                        printf("bal %u\n", bal);
 498:main.c        ****     //                                        printf("req %u\n", reqAmo);
 499:main.c        ****                                             if (LOG) printf("Insufficient Balance \n");
 2337              		.loc 1 499 0
 2338 1929 0FB60500 		movzbl	LOG(%rip), %eax
 2338      000000
 2339 1930 84C0     		testb	%al, %al
 2340 1932 740A     		je	.L144
 2341              		.loc 1 499 0 is_stmt 0 discriminator 1
 2342 1934 BF000000 		movl	$.LC62, %edi
 2342      00
 2343 1939 E8000000 		call	puts
 2343      00
 2344              	.L144:
 500:main.c        ****                                             *statusOnChan9 = 2;
 2345              		.loc 1 500 0 is_stmt 1
 2346 193e 488B45A8 		movq	-88(%rbp), %rax
 2347 1942 C60002   		movb	$2, (%rax)
 501:main.c        ****                                             flSleep(1000);
 2348              		.loc 1 501 0
 2349 1945 BFE80300 		movl	$1000, %edi
 2349      00
 2350 194a E8000000 		call	flSleep
 2350      00
 502:main.c        ****                                             if (LOG) printf("Write to channel %u = %u \n", 9, *stat
 2351              		.loc 1 502 0
 2352 194f 0FB60500 		movzbl	LOG(%rip), %eax
 2352      000000
 2353 1956 84C0     		testb	%al, %al
 2354 1958 7420     		je	.L145
 2355              		.loc 1 502 0 is_stmt 0 discriminator 1
 2356 195a 488B45A8 		movq	-88(%rbp), %rax
 2357 195e 0FB600   		movzbl	(%rax), %eax
 2358 1961 0FB6C0   		movzbl	%al, %eax
 2359 1964 89C2     		movl	%eax, %edx
 2360 1966 BE090000 		movl	$9, %esi
 2360      00
 2361 196b BF000000 		movl	$.LC52, %edi
 2361      00
 2362 1970 B8000000 		movl	$0, %eax
 2362      00
 2363 1975 E8000000 		call	printf
 2363      00
 2364              	.L145:
 503:main.c        ****                                             fStatus = flWriteChannel(handle, (uint8_t) 9, length, s
 2365              		.loc 1 503 0 is_stmt 1
 2366 197a 8B95C0FE 		movl	-320(%rbp), %edx
 2366      FFFF
 2367 1980 488B8510 		movq	-240(%rbp), %rax
 2367      FFFFFF
 2368 1987 488DB518 		leaq	-232(%rbp), %rsi
 2368      FFFFFF
 2369 198e 488B4DA8 		movq	-88(%rbp), %rcx
 2370 1992 4989F0   		movq	%rsi, %r8
 2371 1995 BE090000 		movl	$9, %esi
 2371      00
 2372 199a 4889C7   		movq	%rax, %rdi
 2373 199d E8000000 		call	flWriteChannel
 2373      00
 2374 19a2 8985BCFE 		movl	%eax, -324(%rbp)
 2374      FFFF
 504:main.c        ****                                             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2375              		.loc 1 504 0
 2376 19a8 83BDBCFE 		cmpl	$0, -324(%rbp)
 2376      FFFF00
 2377 19af 740F     		je	.L146
 2378              		.loc 1 504 0 is_stmt 0 discriminator 1
 2379 19b1 C7856CFE 		movl	$1, -404(%rbp)
 2379      FFFF0100 
 2379      0000
 2380 19bb E9D90200 		jmp	.L143
 2380      00
 2381              	.L146:
 2382              	.LBB43:
 505:main.c        ****                                             uint32_t befEncSen[2];
 506:main.c        ****                                             for (int i = 0; i < 2; i++) befEncSen[i] = 0;
 2383              		.loc 1 506 0 is_stmt 1
 2384 19c0 C78590FE 		movl	$0, -368(%rbp)
 2384      FFFF0000 
 2384      0000
 2385 19ca EB1A     		jmp	.L148
 2386              	.L149:
 2387              		.loc 1 506 0 is_stmt 0 discriminator 2
 2388 19cc 8B8590FE 		movl	-368(%rbp), %eax
 2388      FFFF
 2389 19d2 4898     		cltq
 2390 19d4 C7848500 		movl	$0, -256(%rbp,%rax,4)
 2390      FFFFFF00 
 2390      000000
 2391 19df 838590FE 		addl	$1, -368(%rbp)
 2391      FFFF01
 2392              	.L148:
 2393              		.loc 1 506 0 discriminator 1
 2394 19e6 83BD90FE 		cmpl	$1, -368(%rbp)
 2394      FFFF01
 2395 19ed 7EDD     		jle	.L149
 2396              	.LBE43:
 507:main.c        ****                                             befEncSen[0] = maxPercent * dataFromCSV[inLineNum][3];
 2397              		.loc 1 507 0 is_stmt 1
 2398 19ef 8B8564FE 		movl	-412(%rbp), %eax
 2398      FFFF
 2399 19f5 4898     		cltq
 2400 19f7 48C1E004 		salq	$4, %rax
 2401 19fb 48050000 		addq	$dataFromCSV+12, %rax
 2401      0000
 2402 1a01 8B00     		movl	(%rax), %eax
 2403 1a03 F20F2AC0 		cvtsi2sd	%eax, %xmm0
 2404 1a07 F20F100D 		movsd	maxPercent(%rip), %xmm1
 2404      00000000 
 2405 1a0f F20F59C1 		mulsd	%xmm1, %xmm0
 2406 1a13 F2480F2C 		cvttsd2siq	%xmm0, %rax
 2406      C0
 2407 1a18 898500FF 		movl	%eax, -256(%rbp)
 2407      FFFF
 508:main.c        ****                                             encrypt64(befEncSen);
 2408              		.loc 1 508 0
 2409 1a1e 488D8500 		leaq	-256(%rbp), %rax
 2409      FFFFFF
 2410 1a25 4889C7   		movq	%rax, %rdi
 2411 1a28 E8000000 		call	encrypt64
 2411      00
 2412              	.LBB44:
 509:main.c        ****                                             for (uint8_t i = 10; i <= 13; i++) {
 2413              		.loc 1 509 0
 2414 1a2d C68531FE 		movb	$10, -463(%rbp)
 2414      FFFF0A
 2415 1a34 E91C0100 		jmp	.L150
 2415      00
 2416              	.L156:
 2417              	.LBB45:
 510:main.c        ****                                                 uint8_t tempSto = 0;
 2418              		.loc 1 510 0
 2419 1a39 C68522FE 		movb	$0, -478(%rbp)
 2419      FFFF00
 2420              	.LBB46:
 511:main.c        ****                                                 for (uint8_t j = 0; j <= 7; j++) {
 2421              		.loc 1 511 0
 2422 1a40 C68532FE 		movb	$0, -462(%rbp)
 2422      FFFF00
 2423 1a47 EB71     		jmp	.L151
 2424              	.L153:
 2425              	.LBB47:
 512:main.c        ****                                                     uint8_t temp = j + (i - 10) * 8;
 2426              		.loc 1 512 0
 2427 1a49 0FB68531 		movzbl	-463(%rbp), %eax
 2427      FEFFFF
 2428 1a50 83E80A   		subl	$10, %eax
 2429 1a53 8D14C500 		leal	0(,%rax,8), %edx
 2429      000000
 2430 1a5a 0FB68532 		movzbl	-462(%rbp), %eax
 2430      FEFFFF
 2431 1a61 01D0     		addl	%edx, %eax
 2432 1a63 88854CFE 		movb	%al, -436(%rbp)
 2432      FFFF
 513:main.c        ****                                                     if ((befEncSen[0] & (1 << temp)) != 0) {
 2433              		.loc 1 513 0
 2434 1a69 8B9500FF 		movl	-256(%rbp), %edx
 2434      FFFF
 2435 1a6f 0FB6854C 		movzbl	-436(%rbp), %eax
 2435      FEFFFF
 2436 1a76 BE010000 		movl	$1, %esi
 2436      00
 2437 1a7b 89C1     		movl	%eax, %ecx
 2438 1a7d D3E6     		sall	%cl, %esi
 2439 1a7f 89F0     		movl	%esi, %eax
 2440 1a81 21D0     		andl	%edx, %eax
 2441 1a83 85C0     		testl	%eax, %eax
 2442 1a85 7423     		je	.L152
 514:main.c        ****                                                         tempSto += (1 << j);
 2443              		.loc 1 514 0
 2444 1a87 0FB68532 		movzbl	-462(%rbp), %eax
 2444      FEFFFF
 2445 1a8e BA010000 		movl	$1, %edx
 2445      00
 2446 1a93 89C1     		movl	%eax, %ecx
 2447 1a95 D3E2     		sall	%cl, %edx
 2448 1a97 89D0     		movl	%edx, %eax
 2449 1a99 89C2     		movl	%eax, %edx
 2450 1a9b 0FB68522 		movzbl	-478(%rbp), %eax
 2450      FEFFFF
 2451 1aa2 01D0     		addl	%edx, %eax
 2452 1aa4 888522FE 		movb	%al, -478(%rbp)
 2452      FFFF
 2453              	.L152:
 2454              	.LBE47:
 511:main.c        ****                                                     uint8_t temp = j + (i - 10) * 8;
 2455              		.loc 1 511 0
 2456 1aaa 0FB68532 		movzbl	-462(%rbp), %eax
 2456      FEFFFF
 2457 1ab1 83C001   		addl	$1, %eax
 2458 1ab4 888532FE 		movb	%al, -462(%rbp)
 2458      FFFF
 2459              	.L151:
 511:main.c        ****                                                     uint8_t temp = j + (i - 10) * 8;
 2460              		.loc 1 511 0 is_stmt 0 discriminator 1
 2461 1aba 80BD32FE 		cmpb	$7, -462(%rbp)
 2461      FFFF07
 2462 1ac1 7686     		jbe	.L153
 2463              	.LBE46:
 515:main.c        ****                                                     }
 516:main.c        ****                                                 }
 517:main.c        ****                                                 flSleep(1000);
 2464              		.loc 1 517 0 is_stmt 1
 2465 1ac3 BFE80300 		movl	$1000, %edi
 2465      00
 2466 1ac8 E8000000 		call	flSleep
 2466      00
 518:main.c        ****                                                 fStatus = flWriteChannel(handle, (uint8_t) i, lengt
 2467              		.loc 1 518 0
 2468 1acd 8B95C0FE 		movl	-320(%rbp), %edx
 2468      FFFF
 2469 1ad3 0FB6B531 		movzbl	-463(%rbp), %esi
 2469      FEFFFF
 2470 1ada 488B8510 		movq	-240(%rbp), %rax
 2470      FFFFFF
 2471 1ae1 488DBD18 		leaq	-232(%rbp), %rdi
 2471      FFFFFF
 2472 1ae8 488D8D22 		leaq	-478(%rbp), %rcx
 2472      FEFFFF
 2473 1aef 4989F8   		movq	%rdi, %r8
 2474 1af2 4889C7   		movq	%rax, %rdi
 2475 1af5 E8000000 		call	flWriteChannel
 2475      00
 2476 1afa 8985BCFE 		movl	%eax, -324(%rbp)
 2476      FFFF
 519:main.c        ****                                                 if (LOG) printf("Write to channel %u = %u \n", i, t
 2477              		.loc 1 519 0
 2478 1b00 0FB60500 		movzbl	LOG(%rip), %eax
 2478      000000
 2479 1b07 84C0     		testb	%al, %al
 2480 1b09 7422     		je	.L154
 2481              		.loc 1 519 0 is_stmt 0 discriminator 1
 2482 1b0b 0FB68522 		movzbl	-478(%rbp), %eax
 2482      FEFFFF
 2483 1b12 0FB6D0   		movzbl	%al, %edx
 2484 1b15 0FB68531 		movzbl	-463(%rbp), %eax
 2484      FEFFFF
 2485 1b1c 89C6     		movl	%eax, %esi
 2486 1b1e BF000000 		movl	$.LC52, %edi
 2486      00
 2487 1b23 B8000000 		movl	$0, %eax
 2487      00
 2488 1b28 E8000000 		call	printf
 2488      00
 2489              	.L154:
 520:main.c        ****                                                 CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2490              		.loc 1 520 0 is_stmt 1
 2491 1b2d 83BDBCFE 		cmpl	$0, -324(%rbp)
 2491      FFFF00
 2492 1b34 740F     		je	.L155
 2493              		.loc 1 520 0 is_stmt 0 discriminator 1
 2494 1b36 C7856CFE 		movl	$1, -404(%rbp)
 2494      FFFF0100 
 2494      0000
 2495              	.LBE45:
 2496              	.LBE44:
 504:main.c        ****                                             uint32_t befEncSen[2];
 2497              		.loc 1 504 0 is_stmt 1 discriminator 1
 2498 1b40 E9540100 		jmp	.L143
 2498      00
 2499              	.L155:
 2500              	.LBB48:
 509:main.c        ****                                                 uint8_t tempSto = 0;
 2501              		.loc 1 509 0
 2502 1b45 0FB68531 		movzbl	-463(%rbp), %eax
 2502      FEFFFF
 2503 1b4c 83C001   		addl	$1, %eax
 2504 1b4f 888531FE 		movb	%al, -463(%rbp)
 2504      FFFF
 2505              	.L150:
 509:main.c        ****                                                 uint8_t tempSto = 0;
 2506              		.loc 1 509 0 is_stmt 0 discriminator 1
 2507 1b55 80BD31FE 		cmpb	$13, -463(%rbp)
 2507      FFFF0D
 2508 1b5c 0F86D7FE 		jbe	.L156
 2508      FFFF
 2509              	.LBE48:
 2510              	.LBB49:
 521:main.c        ****                                             }
 522:main.c        **** 
 523:main.c        ****                                             for (uint8_t i = 14; i <= 17; i++) {
 2511              		.loc 1 523 0 is_stmt 1
 2512 1b62 C68533FE 		movb	$14, -461(%rbp)
 2512      FFFF0E
 2513 1b69 E9190100 		jmp	.L157
 2513      00
 2514              	.L163:
 2515              	.LBB50:
 524:main.c        ****                                                 uint8_t tempSto = 0;
 2516              		.loc 1 524 0
 2517 1b6e C68522FE 		movb	$0, -478(%rbp)
 2517      FFFF00
 2518              	.LBB51:
 525:main.c        ****                                                 for (uint8_t j = 0; j <= 7; j++) {
 2519              		.loc 1 525 0
 2520 1b75 C68534FE 		movb	$0, -460(%rbp)
 2520      FFFF00
 2521 1b7c EB71     		jmp	.L158
 2522              	.L160:
 2523              	.LBB52:
 526:main.c        ****                                                     uint8_t temp = j + (i - 14) * 8;
 2524              		.loc 1 526 0
 2525 1b7e 0FB68533 		movzbl	-461(%rbp), %eax
 2525      FEFFFF
 2526 1b85 83E80E   		subl	$14, %eax
 2527 1b88 8D14C500 		leal	0(,%rax,8), %edx
 2527      000000
 2528 1b8f 0FB68534 		movzbl	-460(%rbp), %eax
 2528      FEFFFF
 2529 1b96 01D0     		addl	%edx, %eax
 2530 1b98 88854DFE 		movb	%al, -435(%rbp)
 2530      FFFF
 527:main.c        ****                                                     if ((befEncSen[1] & (1 << temp)) != 0) {
 2531              		.loc 1 527 0
 2532 1b9e 8B9504FF 		movl	-252(%rbp), %edx
 2532      FFFF
 2533 1ba4 0FB6854D 		movzbl	-435(%rbp), %eax
 2533      FEFFFF
 2534 1bab BE010000 		movl	$1, %esi
 2534      00
 2535 1bb0 89C1     		movl	%eax, %ecx
 2536 1bb2 D3E6     		sall	%cl, %esi
 2537 1bb4 89F0     		movl	%esi, %eax
 2538 1bb6 21D0     		andl	%edx, %eax
 2539 1bb8 85C0     		testl	%eax, %eax
 2540 1bba 7423     		je	.L159
 528:main.c        ****                                                         tempSto += (1 << j);
 2541              		.loc 1 528 0
 2542 1bbc 0FB68534 		movzbl	-460(%rbp), %eax
 2542      FEFFFF
 2543 1bc3 BA010000 		movl	$1, %edx
 2543      00
 2544 1bc8 89C1     		movl	%eax, %ecx
 2545 1bca D3E2     		sall	%cl, %edx
 2546 1bcc 89D0     		movl	%edx, %eax
 2547 1bce 89C2     		movl	%eax, %edx
 2548 1bd0 0FB68522 		movzbl	-478(%rbp), %eax
 2548      FEFFFF
 2549 1bd7 01D0     		addl	%edx, %eax
 2550 1bd9 888522FE 		movb	%al, -478(%rbp)
 2550      FFFF
 2551              	.L159:
 2552              	.LBE52:
 525:main.c        ****                                                     uint8_t temp = j + (i - 14) * 8;
 2553              		.loc 1 525 0
 2554 1bdf 0FB68534 		movzbl	-460(%rbp), %eax
 2554      FEFFFF
 2555 1be6 83C001   		addl	$1, %eax
 2556 1be9 888534FE 		movb	%al, -460(%rbp)
 2556      FFFF
 2557              	.L158:
 525:main.c        ****                                                     uint8_t temp = j + (i - 14) * 8;
 2558              		.loc 1 525 0 is_stmt 0 discriminator 1
 2559 1bef 80BD34FE 		cmpb	$7, -460(%rbp)
 2559      FFFF07
 2560 1bf6 7686     		jbe	.L160
 2561              	.LBE51:
 529:main.c        ****                                                     }
 530:main.c        ****                                                 }
 531:main.c        ****                                                 flSleep(1000);
 2562              		.loc 1 531 0 is_stmt 1
 2563 1bf8 BFE80300 		movl	$1000, %edi
 2563      00
 2564 1bfd E8000000 		call	flSleep
 2564      00
 532:main.c        ****                                                 fStatus = flWriteChannel(handle, (uint8_t) i, lengt
 2565              		.loc 1 532 0
 2566 1c02 8B95C0FE 		movl	-320(%rbp), %edx
 2566      FFFF
 2567 1c08 0FB6B533 		movzbl	-461(%rbp), %esi
 2567      FEFFFF
 2568 1c0f 488B8510 		movq	-240(%rbp), %rax
 2568      FFFFFF
 2569 1c16 488DBD18 		leaq	-232(%rbp), %rdi
 2569      FFFFFF
 2570 1c1d 488D8D22 		leaq	-478(%rbp), %rcx
 2570      FEFFFF
 2571 1c24 4989F8   		movq	%rdi, %r8
 2572 1c27 4889C7   		movq	%rax, %rdi
 2573 1c2a E8000000 		call	flWriteChannel
 2573      00
 2574 1c2f 8985BCFE 		movl	%eax, -324(%rbp)
 2574      FFFF
 533:main.c        ****                                                 if (LOG) printf("Write to channel %u = %u \n", i, t
 2575              		.loc 1 533 0
 2576 1c35 0FB60500 		movzbl	LOG(%rip), %eax
 2576      000000
 2577 1c3c 84C0     		testb	%al, %al
 2578 1c3e 7422     		je	.L161
 2579              		.loc 1 533 0 is_stmt 0 discriminator 1
 2580 1c40 0FB68522 		movzbl	-478(%rbp), %eax
 2580      FEFFFF
 2581 1c47 0FB6D0   		movzbl	%al, %edx
 2582 1c4a 0FB68533 		movzbl	-461(%rbp), %eax
 2582      FEFFFF
 2583 1c51 89C6     		movl	%eax, %esi
 2584 1c53 BF000000 		movl	$.LC52, %edi
 2584      00
 2585 1c58 B8000000 		movl	$0, %eax
 2585      00
 2586 1c5d E8000000 		call	printf
 2586      00
 2587              	.L161:
 534:main.c        ****                                                 CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2588              		.loc 1 534 0 is_stmt 1
 2589 1c62 83BDBCFE 		cmpl	$0, -324(%rbp)
 2589      FFFF00
 2590 1c69 740C     		je	.L162
 2591              		.loc 1 534 0 is_stmt 0 discriminator 1
 2592 1c6b C7856CFE 		movl	$1, -404(%rbp)
 2592      FFFF0100 
 2592      0000
 2593              	.LBE50:
 2594              	.LBE49:
 504:main.c        ****                                             uint32_t befEncSen[2];
 2595              		.loc 1 504 0 is_stmt 1 discriminator 1
 2596 1c75 EB22     		jmp	.L143
 2597              	.L162:
 2598              	.LBB53:
 523:main.c        ****                                                 uint8_t tempSto = 0;
 2599              		.loc 1 523 0
 2600 1c77 0FB68533 		movzbl	-461(%rbp), %eax
 2600      FEFFFF
 2601 1c7e 83C001   		addl	$1, %eax
 2602 1c81 888533FE 		movb	%al, -461(%rbp)
 2602      FFFF
 2603              	.L157:
 523:main.c        ****                                                 uint8_t tempSto = 0;
 2604              		.loc 1 523 0 is_stmt 0 discriminator 1
 2605 1c87 80BD33FE 		cmpb	$17, -461(%rbp)
 2605      FFFF11
 2606 1c8e 0F86DAFE 		jbe	.L163
 2606      FFFF
 2607              	.L142:
 2608              	.LBE53:
 2609              	.LBE42:
 2610              	.LBE27:
 2611 1c94 E9870600 		jmp	.L199
 2611      00
 2612              	.L143:
 401:main.c        ****                                     if (LOG) printf("Read from channel %u = %u \n", i, *readFromCha
 2613              		.loc 1 401 0 is_stmt 1
 2614 1c99 E9C51000 		jmp	.L74
 2614      00
 2615              	.L110:
 2616              	.LBB54:
 535:main.c        ****                                             }
 536:main.c        ****                                         }
 537:main.c        ****                                     } 
 538:main.c        ****                                     else {
 539:main.c        ****                                         printf("User has admin privileges \n");
 2617              		.loc 1 539 0
 2618 1c9e BF000000 		movl	$.LC63, %edi
 2618      00
 2619 1ca3 E8000000 		call	puts
 2619      00
 540:main.c        ****                                         *statusOnChan9 = 3;
 2620              		.loc 1 540 0
 2621 1ca8 488B45A8 		movq	-88(%rbp), %rax
 2622 1cac C60003   		movb	$3, (%rax)
 541:main.c        ****                                         flSleep(1000);
 2623              		.loc 1 541 0
 2624 1caf BFE80300 		movl	$1000, %edi
 2624      00
 2625 1cb4 E8000000 		call	flSleep
 2625      00
 542:main.c        ****                                         if (LOG) printf("Write to channel %u = %u \n", 9, *statusOn
 2626              		.loc 1 542 0
 2627 1cb9 0FB60500 		movzbl	LOG(%rip), %eax
 2627      000000
 2628 1cc0 84C0     		testb	%al, %al
 2629 1cc2 7420     		je	.L165
 2630              		.loc 1 542 0 is_stmt 0 discriminator 1
 2631 1cc4 488B45A8 		movq	-88(%rbp), %rax
 2632 1cc8 0FB600   		movzbl	(%rax), %eax
 2633 1ccb 0FB6C0   		movzbl	%al, %eax
 2634 1cce 89C2     		movl	%eax, %edx
 2635 1cd0 BE090000 		movl	$9, %esi
 2635      00
 2636 1cd5 BF000000 		movl	$.LC52, %edi
 2636      00
 2637 1cda B8000000 		movl	$0, %eax
 2637      00
 2638 1cdf E8000000 		call	printf
 2638      00
 2639              	.L165:
 543:main.c        ****                                         fStatus = flWriteChannel(handle, (uint8_t) 9, length, statu
 2640              		.loc 1 543 0 is_stmt 1
 2641 1ce4 8B95C0FE 		movl	-320(%rbp), %edx
 2641      FFFF
 2642 1cea 488B8510 		movq	-240(%rbp), %rax
 2642      FFFFFF
 2643 1cf1 488DB518 		leaq	-232(%rbp), %rsi
 2643      FFFFFF
 2644 1cf8 488B4DA8 		movq	-88(%rbp), %rcx
 2645 1cfc 4989F0   		movq	%rsi, %r8
 2646 1cff BE090000 		movl	$9, %esi
 2646      00
 2647 1d04 4889C7   		movq	%rax, %rdi
 2648 1d07 E8000000 		call	flWriteChannel
 2648      00
 2649 1d0c 8985BCFE 		movl	%eax, -324(%rbp)
 2649      FFFF
 544:main.c        ****                                         CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2650              		.loc 1 544 0
 2651 1d12 83BDBCFE 		cmpl	$0, -324(%rbp)
 2651      FFFF00
 2652 1d19 740F     		je	.L166
 2653              		.loc 1 544 0 is_stmt 0 discriminator 1
 2654 1d1b C7856CFE 		movl	$1, -404(%rbp)
 2654      FFFF0100 
 2654      0000
 2655 1d25 E9FB0500 		jmp	.L99
 2655      00
 2656              	.L166:
 2657              	.LBB55:
 545:main.c        **** 
 546:main.c        ****                                         for (uint8_t i = 1; i <= 32; i++) {
 2658              		.loc 1 546 0 is_stmt 1
 2659 1d2a C68535FE 		movb	$1, -459(%rbp)
 2659      FFFF01
 2660 1d31 E92F0100 		jmp	.L168
 2660      00
 2661              	.L176:
 547:main.c        ****                                             if (i <= 8) {
 2662              		.loc 1 547 0
 2663 1d36 80BD35FE 		cmpb	$8, -459(%rbp)
 2663      FFFF08
 2664 1d3d 7745     		ja	.L169
 548:main.c        ****                                                 if ((inpFromFrontEnd[0] & (1 << (i - 1))) != 0) num
 2665              		.loc 1 548 0
 2666 1d3f 8B95F0FE 		movl	-272(%rbp), %edx
 2666      FFFF
 2667 1d45 0FB68535 		movzbl	-459(%rbp), %eax
 2667      FEFFFF
 2668 1d4c 83E801   		subl	$1, %eax
 2669 1d4f BE010000 		movl	$1, %esi
 2669      00
 2670 1d54 89C1     		movl	%eax, %ecx
 2671 1d56 D3E6     		sall	%cl, %esi
 2672 1d58 89F0     		movl	%esi, %eax
 2673 1d5a 21D0     		andl	%edx, %eax
 2674 1d5c 85C0     		testl	%eax, %eax
 2675 1d5e 0F84F100 		je	.L171
 2675      0000
 2676              		.loc 1 548 0 is_stmt 0 discriminator 1
 2677 1d64 0FB68535 		movzbl	-459(%rbp), %eax
 2677      FEFFFF
 2678 1d6b 83E801   		subl	$1, %eax
 2679 1d6e BA010000 		movl	$1, %edx
 2679      00
 2680 1d73 89C1     		movl	%eax, %ecx
 2681 1d75 D3E2     		sall	%cl, %edx
 2682 1d77 89D0     		movl	%edx, %eax
 2683 1d79 008529FE 		addb	%al, -471(%rbp)
 2683      FFFF
 2684 1d7f E9D10000 		jmp	.L171
 2684      00
 2685              	.L169:
 549:main.c        ****                                             } else if (i <= 16) {
 2686              		.loc 1 549 0 is_stmt 1
 2687 1d84 80BD35FE 		cmpb	$16, -459(%rbp)
 2687      FFFF10
 2688 1d8b 7745     		ja	.L172
 550:main.c        ****                                                 if ((inpFromFrontEnd[0] & (1 << (i - 1))) != 0) num
 2689              		.loc 1 550 0
 2690 1d8d 8B95F0FE 		movl	-272(%rbp), %edx
 2690      FFFF
 2691 1d93 0FB68535 		movzbl	-459(%rbp), %eax
 2691      FEFFFF
 2692 1d9a 83E801   		subl	$1, %eax
 2693 1d9d BE010000 		movl	$1, %esi
 2693      00
 2694 1da2 89C1     		movl	%eax, %ecx
 2695 1da4 D3E6     		sall	%cl, %esi
 2696 1da6 89F0     		movl	%esi, %eax
 2697 1da8 21D0     		andl	%edx, %eax
 2698 1daa 85C0     		testl	%eax, %eax
 2699 1dac 0F84A300 		je	.L171
 2699      0000
 2700              		.loc 1 550 0 is_stmt 0 discriminator 1
 2701 1db2 0FB68535 		movzbl	-459(%rbp), %eax
 2701      FEFFFF
 2702 1db9 83E809   		subl	$9, %eax
 2703 1dbc BA010000 		movl	$1, %edx
 2703      00
 2704 1dc1 89C1     		movl	%eax, %ecx
 2705 1dc3 D3E2     		sall	%cl, %edx
 2706 1dc5 89D0     		movl	%edx, %eax
 2707 1dc7 00852AFE 		addb	%al, -470(%rbp)
 2707      FFFF
 2708 1dcd E9830000 		jmp	.L171
 2708      00
 2709              	.L172:
 551:main.c        ****                                             } else if (i <= 24) {
 2710              		.loc 1 551 0 is_stmt 1
 2711 1dd2 80BD35FE 		cmpb	$24, -459(%rbp)
 2711      FFFF18
 2712 1dd9 773E     		ja	.L174
 552:main.c        ****                                                 if ((inpFromFrontEnd[0] & (1 << (i - 1))) != 0) num
 2713              		.loc 1 552 0
 2714 1ddb 8B95F0FE 		movl	-272(%rbp), %edx
 2714      FFFF
 2715 1de1 0FB68535 		movzbl	-459(%rbp), %eax
 2715      FEFFFF
 2716 1de8 83E801   		subl	$1, %eax
 2717 1deb BE010000 		movl	$1, %esi
 2717      00
 2718 1df0 89C1     		movl	%eax, %ecx
 2719 1df2 D3E6     		sall	%cl, %esi
 2720 1df4 89F0     		movl	%esi, %eax
 2721 1df6 21D0     		andl	%edx, %eax
 2722 1df8 85C0     		testl	%eax, %eax
 2723 1dfa 7459     		je	.L171
 2724              		.loc 1 552 0 is_stmt 0 discriminator 1
 2725 1dfc 0FB68535 		movzbl	-459(%rbp), %eax
 2725      FEFFFF
 2726 1e03 83E811   		subl	$17, %eax
 2727 1e06 BA010000 		movl	$1, %edx
 2727      00
 2728 1e0b 89C1     		movl	%eax, %ecx
 2729 1e0d D3E2     		sall	%cl, %edx
 2730 1e0f 89D0     		movl	%edx, %eax
 2731 1e11 00852BFE 		addb	%al, -469(%rbp)
 2731      FFFF
 2732 1e17 EB3C     		jmp	.L171
 2733              	.L174:
 553:main.c        ****                                             } else {
 554:main.c        ****                                                 if ((inpFromFrontEnd[0] & (1 << (i - 1))) != 0) num
 2734              		.loc 1 554 0 is_stmt 1
 2735 1e19 8B95F0FE 		movl	-272(%rbp), %edx
 2735      FFFF
 2736 1e1f 0FB68535 		movzbl	-459(%rbp), %eax
 2736      FEFFFF
 2737 1e26 83E801   		subl	$1, %eax
 2738 1e29 BE010000 		movl	$1, %esi
 2738      00
 2739 1e2e 89C1     		movl	%eax, %ecx
 2740 1e30 D3E6     		sall	%cl, %esi
 2741 1e32 89F0     		movl	%esi, %eax
 2742 1e34 21D0     		andl	%edx, %eax
 2743 1e36 85C0     		testl	%eax, %eax
 2744 1e38 741B     		je	.L171
 2745              		.loc 1 554 0 is_stmt 0 discriminator 1
 2746 1e3a 0FB68535 		movzbl	-459(%rbp), %eax
 2746      FEFFFF
 2747 1e41 83E819   		subl	$25, %eax
 2748 1e44 BA010000 		movl	$1, %edx
 2748      00
 2749 1e49 89C1     		movl	%eax, %ecx
 2750 1e4b D3E2     		sall	%cl, %edx
 2751 1e4d 89D0     		movl	%edx, %eax
 2752 1e4f 00852CFE 		addb	%al, -468(%rbp)
 2752      FFFF
 2753              	.L171:
 546:main.c        ****                                             if (i <= 8) {
 2754              		.loc 1 546 0 is_stmt 1
 2755 1e55 0FB68535 		movzbl	-459(%rbp), %eax
 2755      FEFFFF
 2756 1e5c 83C001   		addl	$1, %eax
 2757 1e5f 888535FE 		movb	%al, -459(%rbp)
 2757      FFFF
 2758              	.L168:
 546:main.c        ****                                             if (i <= 8) {
 2759              		.loc 1 546 0 is_stmt 0 discriminator 1
 2760 1e65 80BD35FE 		cmpb	$32, -459(%rbp)
 2760      FFFF20
 2761 1e6c 0F86C4FE 		jbe	.L176
 2761      FFFF
 2762              	.LBE55:
 2763              	.LBB56:
 555:main.c        ****                                             }
 556:main.c        ****                                         }
 557:main.c        **** 
 558:main.c        ****     //                            printf("num_2000_admin %u\n", num_2000_admin);
 559:main.c        ****     //                            printf("num_1000_admin %u\n", num_1000_admin);
 560:main.c        ****     //                            printf("num_500_admin %u\n", num_500_admin);
 561:main.c        ****     //                            printf("num_100_admin %u\n", num_100_admin);
 562:main.c        **** 
 563:main.c        ****                                         uint32_t befEncSen[2];
 564:main.c        ****                                         for (int i = 0; i < 2; i++) befEncSen[i] = 0;
 2764              		.loc 1 564 0 is_stmt 1
 2765 1e72 C78594FE 		movl	$0, -364(%rbp)
 2765      FFFF0000 
 2765      0000
 2766 1e7c EB1A     		jmp	.L177
 2767              	.L178:
 2768              		.loc 1 564 0 is_stmt 0 discriminator 2
 2769 1e7e 8B8594FE 		movl	-364(%rbp), %eax
 2769      FFFF
 2770 1e84 4898     		cltq
 2771 1e86 C7848500 		movl	$0, -256(%rbp,%rax,4)
 2771      FFFFFF00 
 2771      000000
 2772 1e91 838594FE 		addl	$1, -364(%rbp)
 2772      FFFF01
 2773              	.L177:
 2774              		.loc 1 564 0 discriminator 1
 2775 1e98 83BD94FE 		cmpl	$1, -364(%rbp)
 2775      FFFF01
 2776 1e9f 7EDD     		jle	.L178
 2777              	.LBE56:
 2778              	.LBB57:
 565:main.c        ****                                         for (uint32_t i = 0; i <= 31; i += 8) {
 2779              		.loc 1 565 0 is_stmt 1
 2780 1ea1 C78598FE 		movl	$0, -360(%rbp)
 2780      FFFF0000 
 2780      0000
 2781 1eab E9AC0000 		jmp	.L179
 2781      00
 2782              	.L184:
 566:main.c        ****                                             if (i == 0) befEncSen[0] += ((1 << i) * ((uint32_t) num
 2783              		.loc 1 566 0
 2784 1eb0 83BD98FE 		cmpl	$0, -360(%rbp)
 2784      FFFF00
 2785 1eb7 7523     		jne	.L180
 2786              		.loc 1 566 0 is_stmt 0 discriminator 1
 2787 1eb9 8B9500FF 		movl	-256(%rbp), %edx
 2787      FFFF
 2788 1ebf 0FB6B529 		movzbl	-471(%rbp), %esi
 2788      FEFFFF
 2789 1ec6 8B8598FE 		movl	-360(%rbp), %eax
 2789      FFFF
 2790 1ecc 89C1     		movl	%eax, %ecx
 2791 1ece D3E6     		sall	%cl, %esi
 2792 1ed0 89F0     		movl	%esi, %eax
 2793 1ed2 01D0     		addl	%edx, %eax
 2794 1ed4 898500FF 		movl	%eax, -256(%rbp)
 2794      FFFF
 2795 1eda EB79     		jmp	.L181
 2796              	.L180:
 567:main.c        ****                                             else if (i == 8) befEncSen[0] += ((1 << i) * ((uint32_t
 2797              		.loc 1 567 0 is_stmt 1
 2798 1edc 83BD98FE 		cmpl	$8, -360(%rbp)
 2798      FFFF08
 2799 1ee3 7523     		jne	.L182
 2800              		.loc 1 567 0 is_stmt 0 discriminator 1
 2801 1ee5 8B9500FF 		movl	-256(%rbp), %edx
 2801      FFFF
 2802 1eeb 0FB6B52A 		movzbl	-470(%rbp), %esi
 2802      FEFFFF
 2803 1ef2 8B8598FE 		movl	-360(%rbp), %eax
 2803      FFFF
 2804 1ef8 89C1     		movl	%eax, %ecx
 2805 1efa D3E6     		sall	%cl, %esi
 2806 1efc 89F0     		movl	%esi, %eax
 2807 1efe 01D0     		addl	%edx, %eax
 2808 1f00 898500FF 		movl	%eax, -256(%rbp)
 2808      FFFF
 2809 1f06 EB4D     		jmp	.L181
 2810              	.L182:
 568:main.c        ****                                             else if (i == 16) befEncSen[0] += ((1 << i) * ((uint32_
 2811              		.loc 1 568 0 is_stmt 1
 2812 1f08 83BD98FE 		cmpl	$16, -360(%rbp)
 2812      FFFF10
 2813 1f0f 7523     		jne	.L183
 2814              		.loc 1 568 0 is_stmt 0 discriminator 1
 2815 1f11 8B9500FF 		movl	-256(%rbp), %edx
 2815      FFFF
 2816 1f17 0FB6B52B 		movzbl	-469(%rbp), %esi
 2816      FEFFFF
 2817 1f1e 8B8598FE 		movl	-360(%rbp), %eax
 2817      FFFF
 2818 1f24 89C1     		movl	%eax, %ecx
 2819 1f26 D3E6     		sall	%cl, %esi
 2820 1f28 89F0     		movl	%esi, %eax
 2821 1f2a 01D0     		addl	%edx, %eax
 2822 1f2c 898500FF 		movl	%eax, -256(%rbp)
 2822      FFFF
 2823 1f32 EB21     		jmp	.L181
 2824              	.L183:
 569:main.c        ****                                             else befEncSen[0] += ((1 << i) * ((uint32_t) num_2000_a
 2825              		.loc 1 569 0 is_stmt 1
 2826 1f34 8B9500FF 		movl	-256(%rbp), %edx
 2826      FFFF
 2827 1f3a 0FB6B52C 		movzbl	-468(%rbp), %esi
 2827      FEFFFF
 2828 1f41 8B8598FE 		movl	-360(%rbp), %eax
 2828      FFFF
 2829 1f47 89C1     		movl	%eax, %ecx
 2830 1f49 D3E6     		sall	%cl, %esi
 2831 1f4b 89F0     		movl	%esi, %eax
 2832 1f4d 01D0     		addl	%edx, %eax
 2833 1f4f 898500FF 		movl	%eax, -256(%rbp)
 2833      FFFF
 2834              	.L181:
 565:main.c        ****                                             if (i == 0) befEncSen[0] += ((1 << i) * ((uint32_t) num
 2835              		.loc 1 565 0
 2836 1f55 838598FE 		addl	$8, -360(%rbp)
 2836      FFFF08
 2837              	.L179:
 565:main.c        ****                                             if (i == 0) befEncSen[0] += ((1 << i) * ((uint32_t) num
 2838              		.loc 1 565 0 is_stmt 0 discriminator 1
 2839 1f5c 83BD98FE 		cmpl	$31, -360(%rbp)
 2839      FFFF1F
 2840 1f63 0F8647FF 		jbe	.L184
 2840      FFFF
 2841              	.LBE57:
 570:main.c        ****                                         }
 571:main.c        ****                                         encrypt64(befEncSen);
 2842              		.loc 1 571 0 is_stmt 1
 2843 1f69 488D8500 		leaq	-256(%rbp), %rax
 2843      FFFFFF
 2844 1f70 4889C7   		movq	%rax, %rdi
 2845 1f73 E8000000 		call	encrypt64
 2845      00
 2846              	.LBB58:
 572:main.c        ****                                         for (uint8_t i = 10; i <= 13; i++) {
 2847              		.loc 1 572 0
 2848 1f78 C68536FE 		movb	$10, -458(%rbp)
 2848      FFFF0A
 2849 1f7f E91C0100 		jmp	.L185
 2849      00
 2850              	.L191:
 2851              	.LBB59:
 573:main.c        ****                                             uint8_t tempSto = 0;
 2852              		.loc 1 573 0
 2853 1f84 C68568FE 		movb	$0, -408(%rbp)
 2853      FFFF00
 2854              	.LBB60:
 574:main.c        ****                                             for (uint8_t j = 0; j <= 7; j++) {
 2855              		.loc 1 574 0
 2856 1f8b C68537FE 		movb	$0, -457(%rbp)
 2856      FFFF00
 2857 1f92 EB71     		jmp	.L186
 2858              	.L188:
 2859              	.LBB61:
 575:main.c        ****                                                 uint8_t temp = j + (i - 10) * 8;
 2860              		.loc 1 575 0
 2861 1f94 0FB68536 		movzbl	-458(%rbp), %eax
 2861      FEFFFF
 2862 1f9b 83E80A   		subl	$10, %eax
 2863 1f9e 8D14C500 		leal	0(,%rax,8), %edx
 2863      000000
 2864 1fa5 0FB68537 		movzbl	-457(%rbp), %eax
 2864      FEFFFF
 2865 1fac 01D0     		addl	%edx, %eax
 2866 1fae 88854EFE 		movb	%al, -434(%rbp)
 2866      FFFF
 576:main.c        ****                                                 if ((befEncSen[0] & (1 << temp)) != 0) {
 2867              		.loc 1 576 0
 2868 1fb4 8B9500FF 		movl	-256(%rbp), %edx
 2868      FFFF
 2869 1fba 0FB6854E 		movzbl	-434(%rbp), %eax
 2869      FEFFFF
 2870 1fc1 BE010000 		movl	$1, %esi
 2870      00
 2871 1fc6 89C1     		movl	%eax, %ecx
 2872 1fc8 D3E6     		sall	%cl, %esi
 2873 1fca 89F0     		movl	%esi, %eax
 2874 1fcc 21D0     		andl	%edx, %eax
 2875 1fce 85C0     		testl	%eax, %eax
 2876 1fd0 7423     		je	.L187
 577:main.c        ****                                                     tempSto += (1 << j);
 2877              		.loc 1 577 0
 2878 1fd2 0FB68537 		movzbl	-457(%rbp), %eax
 2878      FEFFFF
 2879 1fd9 BA010000 		movl	$1, %edx
 2879      00
 2880 1fde 89C1     		movl	%eax, %ecx
 2881 1fe0 D3E2     		sall	%cl, %edx
 2882 1fe2 89D0     		movl	%edx, %eax
 2883 1fe4 89C2     		movl	%eax, %edx
 2884 1fe6 0FB68568 		movzbl	-408(%rbp), %eax
 2884      FEFFFF
 2885 1fed 01D0     		addl	%edx, %eax
 2886 1fef 888568FE 		movb	%al, -408(%rbp)
 2886      FFFF
 2887              	.L187:
 2888              	.LBE61:
 574:main.c        ****                                                 uint8_t temp = j + (i - 10) * 8;
 2889              		.loc 1 574 0
 2890 1ff5 0FB68537 		movzbl	-457(%rbp), %eax
 2890      FEFFFF
 2891 1ffc 83C001   		addl	$1, %eax
 2892 1fff 888537FE 		movb	%al, -457(%rbp)
 2892      FFFF
 2893              	.L186:
 574:main.c        ****                                                 uint8_t temp = j + (i - 10) * 8;
 2894              		.loc 1 574 0 is_stmt 0 discriminator 1
 2895 2005 80BD37FE 		cmpb	$7, -457(%rbp)
 2895      FFFF07
 2896 200c 7686     		jbe	.L188
 2897              	.LBE60:
 578:main.c        ****                                                 }
 579:main.c        ****                                             }
 580:main.c        ****                                             flSleep(1000);
 2898              		.loc 1 580 0 is_stmt 1
 2899 200e BFE80300 		movl	$1000, %edi
 2899      00
 2900 2013 E8000000 		call	flSleep
 2900      00
 581:main.c        ****                                             if (LOG) printf("Write to channel %u = %u \n", i, tempS
 2901              		.loc 1 581 0
 2902 2018 0FB60500 		movzbl	LOG(%rip), %eax
 2902      000000
 2903 201f 84C0     		testb	%al, %al
 2904 2021 7422     		je	.L189
 2905              		.loc 1 581 0 is_stmt 0 discriminator 1
 2906 2023 0FB68568 		movzbl	-408(%rbp), %eax
 2906      FEFFFF
 2907 202a 0FB6D0   		movzbl	%al, %edx
 2908 202d 0FB68536 		movzbl	-458(%rbp), %eax
 2908      FEFFFF
 2909 2034 89C6     		movl	%eax, %esi
 2910 2036 BF000000 		movl	$.LC52, %edi
 2910      00
 2911 203b B8000000 		movl	$0, %eax
 2911      00
 2912 2040 E8000000 		call	printf
 2912      00
 2913              	.L189:
 582:main.c        ****                                             fStatus = flWriteChannel(handle, (uint8_t) i, length, &
 2914              		.loc 1 582 0 is_stmt 1
 2915 2045 8B95C0FE 		movl	-320(%rbp), %edx
 2915      FFFF
 2916 204b 0FB6B536 		movzbl	-458(%rbp), %esi
 2916      FEFFFF
 2917 2052 488B8510 		movq	-240(%rbp), %rax
 2917      FFFFFF
 2918 2059 488DBD18 		leaq	-232(%rbp), %rdi
 2918      FFFFFF
 2919 2060 488D8D68 		leaq	-408(%rbp), %rcx
 2919      FEFFFF
 2920 2067 4989F8   		movq	%rdi, %r8
 2921 206a 4889C7   		movq	%rax, %rdi
 2922 206d E8000000 		call	flWriteChannel
 2922      00
 2923 2072 8985BCFE 		movl	%eax, -324(%rbp)
 2923      FFFF
 583:main.c        ****                                             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2924              		.loc 1 583 0
 2925 2078 83BDBCFE 		cmpl	$0, -324(%rbp)
 2925      FFFF00
 2926 207f 740F     		je	.L190
 2927              		.loc 1 583 0 is_stmt 0 discriminator 1
 2928 2081 C7856CFE 		movl	$1, -404(%rbp)
 2928      FFFF0100 
 2928      0000
 2929              	.LBE59:
 2930              	.LBE58:
 544:main.c        **** 
 2931              		.loc 1 544 0 is_stmt 1 discriminator 1
 2932 208b E9950200 		jmp	.L99
 2932      00
 2933              	.L190:
 2934              	.LBB62:
 572:main.c        ****                                             uint8_t tempSto = 0;
 2935              		.loc 1 572 0
 2936 2090 0FB68536 		movzbl	-458(%rbp), %eax
 2936      FEFFFF
 2937 2097 83C001   		addl	$1, %eax
 2938 209a 888536FE 		movb	%al, -458(%rbp)
 2938      FFFF
 2939              	.L185:
 572:main.c        ****                                             uint8_t tempSto = 0;
 2940              		.loc 1 572 0 is_stmt 0 discriminator 1
 2941 20a0 80BD36FE 		cmpb	$13, -458(%rbp)
 2941      FFFF0D
 2942 20a7 0F86D7FE 		jbe	.L191
 2942      FFFF
 2943              	.LBE62:
 2944              	.LBB63:
 584:main.c        ****                                         }
 585:main.c        **** 
 586:main.c        ****                                         for (uint8_t i = 14; i <= 17; i++) {
 2945              		.loc 1 586 0 is_stmt 1
 2946 20ad C68538FE 		movb	$14, -456(%rbp)
 2946      FFFF0E
 2947 20b4 E91C0100 		jmp	.L192
 2947      00
 2948              	.L198:
 2949              	.LBB64:
 587:main.c        ****                                             uint8_t tempSto = 0;
 2950              		.loc 1 587 0
 2951 20b9 C68568FE 		movb	$0, -408(%rbp)
 2951      FFFF00
 2952              	.LBB65:
 588:main.c        ****                                             for (uint8_t j = 0; j <= 7; j++) {
 2953              		.loc 1 588 0
 2954 20c0 C68539FE 		movb	$0, -455(%rbp)
 2954      FFFF00
 2955 20c7 EB71     		jmp	.L193
 2956              	.L195:
 2957              	.LBB66:
 589:main.c        ****                                                 uint8_t temp = j + (i - 14) * 8;
 2958              		.loc 1 589 0
 2959 20c9 0FB68538 		movzbl	-456(%rbp), %eax
 2959      FEFFFF
 2960 20d0 83E80E   		subl	$14, %eax
 2961 20d3 8D14C500 		leal	0(,%rax,8), %edx
 2961      000000
 2962 20da 0FB68539 		movzbl	-455(%rbp), %eax
 2962      FEFFFF
 2963 20e1 01D0     		addl	%edx, %eax
 2964 20e3 88854FFE 		movb	%al, -433(%rbp)
 2964      FFFF
 590:main.c        ****                                                 if ((befEncSen[1] & (1 << temp)) != 0) {
 2965              		.loc 1 590 0
 2966 20e9 8B9504FF 		movl	-252(%rbp), %edx
 2966      FFFF
 2967 20ef 0FB6854F 		movzbl	-433(%rbp), %eax
 2967      FEFFFF
 2968 20f6 BE010000 		movl	$1, %esi
 2968      00
 2969 20fb 89C1     		movl	%eax, %ecx
 2970 20fd D3E6     		sall	%cl, %esi
 2971 20ff 89F0     		movl	%esi, %eax
 2972 2101 21D0     		andl	%edx, %eax
 2973 2103 85C0     		testl	%eax, %eax
 2974 2105 7423     		je	.L194
 591:main.c        ****                                                     tempSto += (1 << j);
 2975              		.loc 1 591 0
 2976 2107 0FB68539 		movzbl	-455(%rbp), %eax
 2976      FEFFFF
 2977 210e BA010000 		movl	$1, %edx
 2977      00
 2978 2113 89C1     		movl	%eax, %ecx
 2979 2115 D3E2     		sall	%cl, %edx
 2980 2117 89D0     		movl	%edx, %eax
 2981 2119 89C2     		movl	%eax, %edx
 2982 211b 0FB68568 		movzbl	-408(%rbp), %eax
 2982      FEFFFF
 2983 2122 01D0     		addl	%edx, %eax
 2984 2124 888568FE 		movb	%al, -408(%rbp)
 2984      FFFF
 2985              	.L194:
 2986              	.LBE66:
 588:main.c        ****                                                 uint8_t temp = j + (i - 14) * 8;
 2987              		.loc 1 588 0
 2988 212a 0FB68539 		movzbl	-455(%rbp), %eax
 2988      FEFFFF
 2989 2131 83C001   		addl	$1, %eax
 2990 2134 888539FE 		movb	%al, -455(%rbp)
 2990      FFFF
 2991              	.L193:
 588:main.c        ****                                                 uint8_t temp = j + (i - 14) * 8;
 2992              		.loc 1 588 0 is_stmt 0 discriminator 1
 2993 213a 80BD39FE 		cmpb	$7, -455(%rbp)
 2993      FFFF07
 2994 2141 7686     		jbe	.L195
 2995              	.LBE65:
 592:main.c        ****                                                 }
 593:main.c        ****                                             }
 594:main.c        ****                                             flSleep(1000);
 2996              		.loc 1 594 0 is_stmt 1
 2997 2143 BFE80300 		movl	$1000, %edi
 2997      00
 2998 2148 E8000000 		call	flSleep
 2998      00
 595:main.c        ****                                             if (LOG) printf("Write to channel %u = %u \n", i, tempS
 2999              		.loc 1 595 0
 3000 214d 0FB60500 		movzbl	LOG(%rip), %eax
 3000      000000
 3001 2154 84C0     		testb	%al, %al
 3002 2156 7422     		je	.L196
 3003              		.loc 1 595 0 is_stmt 0 discriminator 1
 3004 2158 0FB68568 		movzbl	-408(%rbp), %eax
 3004      FEFFFF
 3005 215f 0FB6D0   		movzbl	%al, %edx
 3006 2162 0FB68538 		movzbl	-456(%rbp), %eax
 3006      FEFFFF
 3007 2169 89C6     		movl	%eax, %esi
 3008 216b BF000000 		movl	$.LC52, %edi
 3008      00
 3009 2170 B8000000 		movl	$0, %eax
 3009      00
 3010 2175 E8000000 		call	printf
 3010      00
 3011              	.L196:
 596:main.c        ****                                             fStatus = flWriteChannel(handle, (uint8_t) i, length, &
 3012              		.loc 1 596 0 is_stmt 1
 3013 217a 8B95C0FE 		movl	-320(%rbp), %edx
 3013      FFFF
 3014 2180 0FB6B538 		movzbl	-456(%rbp), %esi
 3014      FEFFFF
 3015 2187 488B8510 		movq	-240(%rbp), %rax
 3015      FFFFFF
 3016 218e 488DBD18 		leaq	-232(%rbp), %rdi
 3016      FFFFFF
 3017 2195 488D8D68 		leaq	-408(%rbp), %rcx
 3017      FEFFFF
 3018 219c 4989F8   		movq	%rdi, %r8
 3019 219f 4889C7   		movq	%rax, %rdi
 3020 21a2 E8000000 		call	flWriteChannel
 3020      00
 3021 21a7 8985BCFE 		movl	%eax, -324(%rbp)
 3021      FFFF
 597:main.c        ****                                             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3022              		.loc 1 597 0
 3023 21ad 83BDBCFE 		cmpl	$0, -324(%rbp)
 3023      FFFF00
 3024 21b4 740F     		je	.L197
 3025              		.loc 1 597 0 is_stmt 0 discriminator 1
 3026 21b6 C7856CFE 		movl	$1, -404(%rbp)
 3026      FFFF0100 
 3026      0000
 3027              	.LBE64:
 3028              	.LBE63:
 544:main.c        **** 
 3029              		.loc 1 544 0 is_stmt 1 discriminator 1
 3030 21c0 E9600100 		jmp	.L99
 3030      00
 3031              	.L197:
 3032              	.LBB67:
 586:main.c        ****                                             uint8_t tempSto = 0;
 3033              		.loc 1 586 0
 3034 21c5 0FB68538 		movzbl	-456(%rbp), %eax
 3034      FEFFFF
 3035 21cc 83C001   		addl	$1, %eax
 3036 21cf 888538FE 		movb	%al, -456(%rbp)
 3036      FFFF
 3037              	.L192:
 586:main.c        ****                                             uint8_t tempSto = 0;
 3038              		.loc 1 586 0 is_stmt 0 discriminator 1
 3039 21d5 80BD38FE 		cmpb	$17, -456(%rbp)
 3039      FFFF11
 3040 21dc 0F86D7FE 		jbe	.L198
 3040      FFFF
 3041              	.LBE67:
 3042 21e2 E9390100 		jmp	.L199
 3042      00
 3043              	.L109:
 3044              	.LBE54:
 598:main.c        ****                                         }
 599:main.c        ****                                     }
 600:main.c        ****                                 }
 601:main.c        ****                                 else {
 602:main.c        ****                                     printf("Invalid user \n");
 3045              		.loc 1 602 0 is_stmt 1
 3046 21e7 BF000000 		movl	$.LC64, %edi
 3046      00
 3047 21ec E8000000 		call	puts
 3047      00
 603:main.c        ****                                     *statusOnChan9 = 4;
 3048              		.loc 1 603 0
 3049 21f1 488B45A8 		movq	-88(%rbp), %rax
 3050 21f5 C60004   		movb	$4, (%rax)
 604:main.c        ****                                     flSleep(1000);
 3051              		.loc 1 604 0
 3052 21f8 BFE80300 		movl	$1000, %edi
 3052      00
 3053 21fd E8000000 		call	flSleep
 3053      00
 605:main.c        ****                                     if (LOG) printf("Write to channel %u = %u \n", 9, *statusOnChan
 3054              		.loc 1 605 0
 3055 2202 0FB60500 		movzbl	LOG(%rip), %eax
 3055      000000
 3056 2209 84C0     		testb	%al, %al
 3057 220b 7420     		je	.L200
 3058              		.loc 1 605 0 is_stmt 0 discriminator 1
 3059 220d 488B45A8 		movq	-88(%rbp), %rax
 3060 2211 0FB600   		movzbl	(%rax), %eax
 3061 2214 0FB6C0   		movzbl	%al, %eax
 3062 2217 89C2     		movl	%eax, %edx
 3063 2219 BE090000 		movl	$9, %esi
 3063      00
 3064 221e BF000000 		movl	$.LC52, %edi
 3064      00
 3065 2223 B8000000 		movl	$0, %eax
 3065      00
 3066 2228 E8000000 		call	printf
 3066      00
 3067              	.L200:
 606:main.c        ****                                     fStatus = flWriteChannel(handle, (uint8_t) 9, length, statusOnC
 3068              		.loc 1 606 0 is_stmt 1
 3069 222d 8B95C0FE 		movl	-320(%rbp), %edx
 3069      FFFF
 3070 2233 488B8510 		movq	-240(%rbp), %rax
 3070      FFFFFF
 3071 223a 488DB518 		leaq	-232(%rbp), %rsi
 3071      FFFFFF
 3072 2241 488B4DA8 		movq	-88(%rbp), %rcx
 3073 2245 4989F0   		movq	%rsi, %r8
 3074 2248 BE090000 		movl	$9, %esi
 3074      00
 3075 224d 4889C7   		movq	%rax, %rdi
 3076 2250 E8000000 		call	flWriteChannel
 3076      00
 3077 2255 8985BCFE 		movl	%eax, -324(%rbp)
 3077      FFFF
 607:main.c        ****                                     CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3078              		.loc 1 607 0
 3079 225b 83BDBCFE 		cmpl	$0, -324(%rbp)
 3079      FFFF00
 3080 2262 740F     		je	.L201
 3081              		.loc 1 607 0 is_stmt 0 discriminator 1
 3082 2264 C7856CFE 		movl	$1, -404(%rbp)
 3082      FFFF0100 
 3082      0000
 3083 226e E9B20000 		jmp	.L99
 3083      00
 3084              	.L201:
 3085              	.LBB68:
 608:main.c        ****                                     for (int i = 10; i <= 17; i++) {
 3086              		.loc 1 608 0 is_stmt 1
 3087 2273 C7859CFE 		movl	$10, -356(%rbp)
 3087      FFFF0A00 
 3087      0000
 3088 227d E9910000 		jmp	.L202
 3088      00
 3089              	.L205:
 3090              	.LBB69:
 609:main.c        ****                                         uint8_t tempSto = 0;
 3091              		.loc 1 609 0
 3092 2282 C68500FF 		movb	$0, -256(%rbp)
 3092      FFFF00
 610:main.c        ****                                         flSleep(1000);
 3093              		.loc 1 610 0
 3094 2289 BFE80300 		movl	$1000, %edi
 3094      00
 3095 228e E8000000 		call	flSleep
 3095      00
 611:main.c        ****                                         if (LOG) printf("Write to channel %u = %u \n", i, tempSto);
 3096              		.loc 1 611 0
 3097 2293 0FB60500 		movzbl	LOG(%rip), %eax
 3097      000000
 3098 229a 84C0     		testb	%al, %al
 3099 229c 7421     		je	.L203
 3100              		.loc 1 611 0 is_stmt 0 discriminator 1
 3101 229e 0FB68500 		movzbl	-256(%rbp), %eax
 3101      FFFFFF
 3102 22a5 0FB6D0   		movzbl	%al, %edx
 3103 22a8 8B859CFE 		movl	-356(%rbp), %eax
 3103      FFFF
 3104 22ae 89C6     		movl	%eax, %esi
 3105 22b0 BF000000 		movl	$.LC52, %edi
 3105      00
 3106 22b5 B8000000 		movl	$0, %eax
 3106      00
 3107 22ba E8000000 		call	printf
 3107      00
 3108              	.L203:
 612:main.c        ****                                         fStatus = flWriteChannel(handle, (uint8_t) i, length, &temp
 3109              		.loc 1 612 0 is_stmt 1
 3110 22bf 8B95C0FE 		movl	-320(%rbp), %edx
 3110      FFFF
 3111 22c5 8B859CFE 		movl	-356(%rbp), %eax
 3111      FFFF
 3112 22cb 0FB6F0   		movzbl	%al, %esi
 3113 22ce 488B8510 		movq	-240(%rbp), %rax
 3113      FFFFFF
 3114 22d5 488DBD18 		leaq	-232(%rbp), %rdi
 3114      FFFFFF
 3115 22dc 488D8D00 		leaq	-256(%rbp), %rcx
 3115      FFFFFF
 3116 22e3 4989F8   		movq	%rdi, %r8
 3117 22e6 4889C7   		movq	%rax, %rdi
 3118 22e9 E8000000 		call	flWriteChannel
 3118      00
 3119 22ee 8985BCFE 		movl	%eax, -324(%rbp)
 3119      FFFF
 613:main.c        ****                                         CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3120              		.loc 1 613 0
 3121 22f4 83BDBCFE 		cmpl	$0, -324(%rbp)
 3121      FFFF00
 3122 22fb 740F     		je	.L204
 3123              		.loc 1 613 0 is_stmt 0 discriminator 1
 3124 22fd C7856CFE 		movl	$1, -404(%rbp)
 3124      FFFF0100 
 3124      0000
 3125              	.LBE69:
 3126              	.LBE68:
 401:main.c        ****                                     if (LOG) printf("Read from channel %u = %u \n", i, *readFromCha
 3127              		.loc 1 401 0 is_stmt 1 discriminator 1
 3128 2307 E9570A00 		jmp	.L74
 3128      00
 3129              	.L204:
 3130              	.LBB70:
 608:main.c        ****                                         uint8_t tempSto = 0;
 3131              		.loc 1 608 0
 3132 230c 83859CFE 		addl	$1, -356(%rbp)
 3132      FFFF01
 3133              	.L202:
 608:main.c        ****                                         uint8_t tempSto = 0;
 3134              		.loc 1 608 0 is_stmt 0 discriminator 1
 3135 2313 83BD9CFE 		cmpl	$17, -356(%rbp)
 3135      FFFF11
 3136 231a 0F8E62FF 		jle	.L205
 3136      FFFF
 3137              	.L199:
 3138              	.LBE70:
 3139              	.LBE22:
 393:main.c        ****                                 uint32_t inpFromFrontEnd[2];
 3140              		.loc 1 393 0 is_stmt 1 discriminator 2
 3141 2320 E92F0A00 		jmp	.L86
 3141      00
 3142              	.L99:
 3143              	.LBE21:
 3144              	.LBE20:
 3145 2325 E9930A00 		jmp	.L31
 3145      00
 3146              	.L94:
 3147              	.LBB105:
 3148              	.LBB103:
 614:main.c        ****                                     }
 615:main.c        ****                                 }
 616:main.c        ****                             }
 617:main.c        ****                             else if(valRead == 5) {
 3149              		.loc 1 617 0
 3150 232a 83BDC4FE 		cmpl	$5, -316(%rbp)
 3150      FFFF05
 3151 2331 0F851D0A 		jne	.L86
 3151      0000
 3152              	.LBB71:
 3153              	.LBB72:
 618:main.c        ****                                 uint32_t inpFromFrontEnd[2];
 619:main.c        ****                                 for (int i = 0; i < 2; i++) inpFromFrontEnd[i] = 0;
 3154              		.loc 1 619 0
 3155 2337 C785A0FE 		movl	$0, -352(%rbp)
 3155      FFFF0000 
 3155      0000
 3156 2341 EB1A     		jmp	.L206
 3157              	.L207:
 3158              		.loc 1 619 0 is_stmt 0 discriminator 2
 3159 2343 8B85A0FE 		movl	-352(%rbp), %eax
 3159      FFFF
 3160 2349 4898     		cltq
 3161 234b C78485F0 		movl	$0, -272(%rbp,%rax,4)
 3161      FEFFFF00 
 3161      000000
 3162 2356 8385A0FE 		addl	$1, -352(%rbp)
 3162      FFFF01
 3163              	.L206:
 3164              		.loc 1 619 0 discriminator 1
 3165 235d 83BDA0FE 		cmpl	$1, -352(%rbp)
 3165      FFFF01
 3166 2364 7EDD     		jle	.L207
 3167              	.LBE72:
 3168              	.LBB73:
 620:main.c        ****                                 for (uint32_t i = 1; i <= 8; i++) {
 3169              		.loc 1 620 0 is_stmt 1
 3170 2366 C785A4FE 		movl	$1, -348(%rbp)
 3170      FFFF0100 
 3170      0000
 3171 2370 E9100100 		jmp	.L208
 3171      00
 3172              	.L214:
 3173              	.LBB74:
 621:main.c        ****                                     uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 3174              		.loc 1 621 0
 3175 2375 BF010000 		movl	$1, %edi
 3175      00
 3176 237a E8000000 		call	malloc
 3176      00
 3177 237f 48894598 		movq	%rax, -104(%rbp)
 622:main.c        **** 
 623:main.c        ****                                     flSleep(1000);
 3178              		.loc 1 623 0
 3179 2383 BFE80300 		movl	$1000, %edi
 3179      00
 3180 2388 E8000000 		call	flSleep
 3180      00
 624:main.c        ****                                     fStatus = flReadChannel(handle, (uint8_t) i, length, readFromCh
 3181              		.loc 1 624 0
 3182 238d 8B95C0FE 		movl	-320(%rbp), %edx
 3182      FFFF
 3183 2393 8B85A4FE 		movl	-348(%rbp), %eax
 3183      FFFF
 3184 2399 0FB6F0   		movzbl	%al, %esi
 3185 239c 488B8510 		movq	-240(%rbp), %rax
 3185      FFFFFF
 3186 23a3 488DBD18 		leaq	-232(%rbp), %rdi
 3186      FFFFFF
 3187 23aa 488B4D98 		movq	-104(%rbp), %rcx
 3188 23ae 4989F8   		movq	%rdi, %r8
 3189 23b1 4889C7   		movq	%rax, %rdi
 3190 23b4 E8000000 		call	flReadChannel
 3190      00
 3191 23b9 8985BCFE 		movl	%eax, -324(%rbp)
 3191      FFFF
 625:main.c        ****                                     CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3192              		.loc 1 625 0
 3193 23bf 83BDBCFE 		cmpl	$0, -324(%rbp)
 3193      FFFF00
 3194 23c6 740F     		je	.L209
 3195              		.loc 1 625 0 is_stmt 0 discriminator 1
 3196 23c8 C7856CFE 		movl	$1, -404(%rbp)
 3196      FFFF0100 
 3196      0000
 3197 23d2 E97B0900 		jmp	.L210
 3197      00
 3198              	.L209:
 626:main.c        ****                                     if (LOG) printf("Read from channel %u = %u \n", i, *readFromCha
 3199              		.loc 1 626 0 is_stmt 1
 3200 23d7 0FB60500 		movzbl	LOG(%rip), %eax
 3200      000000
 3201 23de 84C0     		testb	%al, %al
 3202 23e0 7421     		je	.L211
 3203              		.loc 1 626 0 is_stmt 0 discriminator 1
 3204 23e2 488B4598 		movq	-104(%rbp), %rax
 3205 23e6 0FB600   		movzbl	(%rax), %eax
 3206 23e9 0FB6D0   		movzbl	%al, %edx
 3207 23ec 8B85A4FE 		movl	-348(%rbp), %eax
 3207      FFFF
 3208 23f2 89C6     		movl	%eax, %esi
 3209 23f4 BF000000 		movl	$.LC54, %edi
 3209      00
 3210 23f9 B8000000 		movl	$0, %eax
 3210      00
 3211 23fe E8000000 		call	printf
 3211      00
 3212              	.L211:
 627:main.c        ****                                     uint32_t temp1 = 8 * (i - 1), temp2 = 8 * (i - 5);
 3213              		.loc 1 627 0 is_stmt 1
 3214 2403 8B85A4FE 		movl	-348(%rbp), %eax
 3214      FFFF
 3215 2409 05FFFFFF 		addl	$536870911, %eax
 3215      1F
 3216 240e C1E003   		sall	$3, %eax
 3217 2411 8985C8FE 		movl	%eax, -312(%rbp)
 3217      FFFF
 3218 2417 8B85A4FE 		movl	-348(%rbp), %eax
 3218      FFFF
 3219 241d 05FBFFFF 		addl	$536870907, %eax
 3219      1F
 3220 2422 C1E003   		sall	$3, %eax
 3221 2425 8985CCFE 		movl	%eax, -308(%rbp)
 3221      FFFF
 628:main.c        ****                                     if (i <= 4) inpFromFrontEnd[0] += (*readFromChannel_i) * (1 << 
 3222              		.loc 1 628 0
 3223 242b 83BDA4FE 		cmpl	$4, -348(%rbp)
 3223      FFFF04
 3224 2432 7726     		ja	.L212
 3225              		.loc 1 628 0 is_stmt 0 discriminator 1
 3226 2434 8B95F0FE 		movl	-272(%rbp), %edx
 3226      FFFF
 3227 243a 488B4598 		movq	-104(%rbp), %rax
 3228 243e 0FB600   		movzbl	(%rax), %eax
 3229 2441 0FB6F0   		movzbl	%al, %esi
 3230 2444 8B85C8FE 		movl	-312(%rbp), %eax
 3230      FFFF
 3231 244a 89C1     		movl	%eax, %ecx
 3232 244c D3E6     		sall	%cl, %esi
 3233 244e 89F0     		movl	%esi, %eax
 3234 2450 01D0     		addl	%edx, %eax
 3235 2452 8985F0FE 		movl	%eax, -272(%rbp)
 3235      FFFF
 3236 2458 EB24     		jmp	.L213
 3237              	.L212:
 629:main.c        ****                                     else inpFromFrontEnd[1] += (*readFromChannel_i) * (1 << temp2);
 3238              		.loc 1 629 0 is_stmt 1
 3239 245a 8B95F4FE 		movl	-268(%rbp), %edx
 3239      FFFF
 3240 2460 488B4598 		movq	-104(%rbp), %rax
 3241 2464 0FB600   		movzbl	(%rax), %eax
 3242 2467 0FB6F0   		movzbl	%al, %esi
 3243 246a 8B85CCFE 		movl	-308(%rbp), %eax
 3243      FFFF
 3244 2470 89C1     		movl	%eax, %ecx
 3245 2472 D3E6     		sall	%cl, %esi
 3246 2474 89F0     		movl	%esi, %eax
 3247 2476 01D0     		addl	%edx, %eax
 3248 2478 8985F4FE 		movl	%eax, -268(%rbp)
 3248      FFFF
 3249              	.L213:
 3250              	.LBE74:
 620:main.c        ****                                     uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 3251              		.loc 1 620 0
 3252 247e 8385A4FE 		addl	$1, -348(%rbp)
 3252      FFFF01
 3253              	.L208:
 620:main.c        ****                                     uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 3254              		.loc 1 620 0 is_stmt 0 discriminator 1
 3255 2485 83BDA4FE 		cmpl	$8, -348(%rbp)
 3255      FFFF08
 3256 248c 0F86E3FE 		jbe	.L214
 3256      FFFF
 3257              	.LBE73:
 630:main.c        ****                                 }
 631:main.c        ****                                 decrypt64(inpFromFrontEnd);
 3258              		.loc 1 631 0 is_stmt 1
 3259 2492 488D85F0 		leaq	-272(%rbp), %rax
 3259      FEFFFF
 3260 2499 4889C7   		movq	%rax, %rdi
 3261 249c E8000000 		call	decrypt64
 3261      00
 632:main.c        ****                                 uint16_t userID = 0, unhashedPin = 0;
 3262              		.loc 1 632 0
 3263 24a1 66C78556 		movw	$0, -426(%rbp)
 3263      FEFFFF00 
 3263      00
 3264 24aa 66C78558 		movw	$0, -424(%rbp)
 3264      FEFFFF00 
 3264      00
 3265              	.LBB75:
 633:main.c        **** 
 634:main.c        ****                                 for (uint16_t i = 1; i <= 32; i++) {
 3266              		.loc 1 634 0
 3267 24b3 66C7855A 		movw	$1, -422(%rbp)
 3267      FEFFFF01 
 3267      00
 3268 24bc E9970000 		jmp	.L215
 3268      00
 3269              	.L219:
 635:main.c        ****                                     if (i <= 16) {
 3270              		.loc 1 635 0
 3271 24c1 6683BD5A 		cmpw	$16, -422(%rbp)
 3271      FEFFFF10 
 3272 24c9 773F     		ja	.L216
 636:main.c        ****                                         if ((inpFromFrontEnd[1] & (1 << (i - 1))) != 0) unhashedPin
 3273              		.loc 1 636 0
 3274 24cb 8B95F4FE 		movl	-268(%rbp), %edx
 3274      FFFF
 3275 24d1 0FB7855A 		movzwl	-422(%rbp), %eax
 3275      FEFFFF
 3276 24d8 83E801   		subl	$1, %eax
 3277 24db BE010000 		movl	$1, %esi
 3277      00
 3278 24e0 89C1     		movl	%eax, %ecx
 3279 24e2 D3E6     		sall	%cl, %esi
 3280 24e4 89F0     		movl	%esi, %eax
 3281 24e6 21D0     		andl	%edx, %eax
 3282 24e8 85C0     		testl	%eax, %eax
 3283 24ea 745B     		je	.L218
 3284              		.loc 1 636 0 is_stmt 0 discriminator 1
 3285 24ec 0FB7855A 		movzwl	-422(%rbp), %eax
 3285      FEFFFF
 3286 24f3 83E801   		subl	$1, %eax
 3287 24f6 BA010000 		movl	$1, %edx
 3287      00
 3288 24fb 89C1     		movl	%eax, %ecx
 3289 24fd D3E2     		sall	%cl, %edx
 3290 24ff 89D0     		movl	%edx, %eax
 3291 2501 66018558 		addw	%ax, -424(%rbp)
 3291      FEFFFF
 3292 2508 EB3D     		jmp	.L218
 3293              	.L216:
 637:main.c        ****                                     } else {
 638:main.c        ****                                         if ((inpFromFrontEnd[1] & (1 << (i - 1))) != 0) userID += (
 3294              		.loc 1 638 0 is_stmt 1
 3295 250a 8B95F4FE 		movl	-268(%rbp), %edx
 3295      FFFF
 3296 2510 0FB7855A 		movzwl	-422(%rbp), %eax
 3296      FEFFFF
 3297 2517 83E801   		subl	$1, %eax
 3298 251a BE010000 		movl	$1, %esi
 3298      00
 3299 251f 89C1     		movl	%eax, %ecx
 3300 2521 D3E6     		sall	%cl, %esi
 3301 2523 89F0     		movl	%esi, %eax
 3302 2525 21D0     		andl	%edx, %eax
 3303 2527 85C0     		testl	%eax, %eax
 3304 2529 741C     		je	.L218
 3305              		.loc 1 638 0 is_stmt 0 discriminator 1
 3306 252b 0FB7855A 		movzwl	-422(%rbp), %eax
 3306      FEFFFF
 3307 2532 83E811   		subl	$17, %eax
 3308 2535 BA010000 		movl	$1, %edx
 3308      00
 3309 253a 89C1     		movl	%eax, %ecx
 3310 253c D3E2     		sall	%cl, %edx
 3311 253e 89D0     		movl	%edx, %eax
 3312 2540 66018556 		addw	%ax, -426(%rbp)
 3312      FEFFFF
 3313              	.L218:
 634:main.c        ****                                     if (i <= 16) {
 3314              		.loc 1 634 0 is_stmt 1
 3315 2547 0FB7855A 		movzwl	-422(%rbp), %eax
 3315      FEFFFF
 3316 254e 83C001   		addl	$1, %eax
 3317 2551 6689855A 		movw	%ax, -422(%rbp)
 3317      FEFFFF
 3318              	.L215:
 634:main.c        ****                                     if (i <= 16) {
 3319              		.loc 1 634 0 is_stmt 0 discriminator 1
 3320 2558 6683BD5A 		cmpw	$32, -422(%rbp)
 3320      FEFFFF20 
 3321 2560 0F865BFF 		jbe	.L219
 3321      FFFF
 3322              	.LBE75:
 639:main.c        ****                                     }
 640:main.c        ****                                 }
 641:main.c        ****                                 printf("unhashedPin %u\n", unhashedPin);
 3323              		.loc 1 641 0 is_stmt 1
 3324 2566 0FB78558 		movzwl	-424(%rbp), %eax
 3324      FEFFFF
 3325 256d 89C6     		movl	%eax, %esi
 3326 256f BF000000 		movl	$.LC55, %edi
 3326      00
 3327 2574 B8000000 		movl	$0, %eax
 3327      00
 3328 2579 E8000000 		call	printf
 3328      00
 642:main.c        ****                                 printf("userID %u\n", userID);
 3329              		.loc 1 642 0
 3330 257e 0FB78556 		movzwl	-426(%rbp), %eax
 3330      FEFFFF
 3331 2585 89C6     		movl	%eax, %esi
 3332 2587 BF000000 		movl	$.LC56, %edi
 3332      00
 3333 258c B8000000 		movl	$0, %eax
 3333      00
 3334 2591 E8000000 		call	printf
 3334      00
 643:main.c        ****                                 uint16_t hashedPin = myHash(unhashedPin);
 3335              		.loc 1 643 0
 3336 2596 0FB78558 		movzwl	-424(%rbp), %eax
 3336      FEFFFF
 3337 259d 89C7     		movl	%eax, %edi
 3338 259f E8000000 		call	myHash
 3338      00
 3339 25a4 6689855C 		movw	%ax, -420(%rbp)
 3339      FEFFFF
 644:main.c        ****                                 printf("hashedPin %u\n", hashedPin);
 3340              		.loc 1 644 0
 3341 25ab 0FB7855C 		movzwl	-420(%rbp), %eax
 3341      FEFFFF
 3342 25b2 89C6     		movl	%eax, %esi
 3343 25b4 BF000000 		movl	$.LC57, %edi
 3343      00
 3344 25b9 B8000000 		movl	$0, %eax
 3344      00
 3345 25be E8000000 		call	printf
 3345      00
 645:main.c        ****                                 int bal = -1;
 3346              		.loc 1 645 0
 3347 25c3 C78564FE 		movl	$-1, -412(%rbp)
 3347      FFFFFFFF 
 3347      FFFF
 646:main.c        ****                                 bool isAdmin = false;
 3348              		.loc 1 646 0
 3349 25cd C68522FE 		movb	$0, -478(%rbp)
 3349      FFFF00
 647:main.c        ****                                 int inLineNum = -1;
 3350              		.loc 1 647 0
 3351 25d4 C78568FE 		movl	$-1, -408(%rbp)
 3351      FFFFFFFF 
 3351      FFFF
 648:main.c        **** 
 649:main.c        ****                                 if (find(userID, hashedPin, &isAdmin, &bal, &inLineNum)) {
 3352              		.loc 1 649 0
 3353 25de 0FB7B55C 		movzwl	-420(%rbp), %esi
 3353      FEFFFF
 3354 25e5 0FB78556 		movzwl	-426(%rbp), %eax
 3354      FEFFFF
 3355 25ec 488DBD68 		leaq	-408(%rbp), %rdi
 3355      FEFFFF
 3356 25f3 488D8D64 		leaq	-412(%rbp), %rcx
 3356      FEFFFF
 3357 25fa 488D9522 		leaq	-478(%rbp), %rdx
 3357      FEFFFF
 3358 2601 4989F8   		movq	%rdi, %r8
 3359 2604 89C7     		movl	%eax, %edi
 3360 2606 E8000000 		call	find
 3360      00
 3361 260b 84C0     		testb	%al, %al
 3362 260d 0F848E04 		je	.L220
 3362      0000
 650:main.c        ****                                     printf("Valid user found from cache \n");
 3363              		.loc 1 650 0
 3364 2613 BF000000 		movl	$.LC65, %edi
 3364      00
 3365 2618 E8000000 		call	puts
 3365      00
 651:main.c        ****                                     if (!isAdmin) {
 3366              		.loc 1 651 0
 3367 261d 0FB68522 		movzbl	-478(%rbp), %eax
 3367      FEFFFF
 3368 2624 83F001   		xorl	$1, %eax
 3369 2627 84C0     		testb	%al, %al
 3370 2629 0F845E04 		je	.L221
 3370      0000
 3371              	.LBB76:
 652:main.c        ****                                         int remCacheBal = inpFromFrontEnd[0];
 3372              		.loc 1 652 0
 3373 262f 8B85F0FE 		movl	-272(%rbp), %eax
 3373      FFFF
 3374 2635 8985D0FE 		movl	%eax, -304(%rbp)
 3374      FFFF
 653:main.c        ****                                         printf("Bef Balance %d\n", bal);
 3375              		.loc 1 653 0
 3376 263b 8B8564FE 		movl	-412(%rbp), %eax
 3376      FFFF
 3377 2641 89C6     		movl	%eax, %esi
 3378 2643 BF000000 		movl	$.LC66, %edi
 3378      00
 3379 2648 B8000000 		movl	$0, %eax
 3379      00
 3380 264d E8000000 		call	printf
 3380      00
 654:main.c        ****                                         int finalBal = (maxPercent * bal - remCacheBal);
 3381              		.loc 1 654 0
 3382 2652 8B8564FE 		movl	-412(%rbp), %eax
 3382      FFFF
 3383 2658 F20F2AC0 		cvtsi2sd	%eax, %xmm0
 3384 265c F20F100D 		movsd	maxPercent(%rip), %xmm1
 3384      00000000 
 3385 2664 F20F59C1 		mulsd	%xmm1, %xmm0
 3386 2668 F20F2A8D 		cvtsi2sd	-304(%rbp), %xmm1
 3386      D0FEFFFF 
 3387 2670 F20F5CC1 		subsd	%xmm1, %xmm0
 3388 2674 F20F2CC0 		cvttsd2si	%xmm0, %eax
 3389 2678 8985D4FE 		movl	%eax, -300(%rbp)
 3389      FFFF
 655:main.c        ****                                         printf("Final Balance %d\n", finalBal);
 3390              		.loc 1 655 0
 3391 267e 8B85D4FE 		movl	-300(%rbp), %eax
 3391      FFFF
 3392 2684 89C6     		movl	%eax, %esi
 3393 2686 BF000000 		movl	$.LC67, %edi
 3393      00
 3394 268b B8000000 		movl	$0, %eax
 3394      00
 3395 2690 E8000000 		call	printf
 3395      00
 656:main.c        ****                                         finalBal = bal - finalBal;
 3396              		.loc 1 656 0
 3397 2695 8B8564FE 		movl	-412(%rbp), %eax
 3397      FFFF
 3398 269b 2B85D4FE 		subl	-300(%rbp), %eax
 3398      FFFF
 3399 26a1 8985D4FE 		movl	%eax, -300(%rbp)
 3399      FFFF
 3400              	.LBB77:
 657:main.c        **** 
 658:main.c        ****                                         uint32_t befEncSen[2];
 659:main.c        ****                                         for (int i = 0; i < 2; i++) befEncSen[i] = 0;
 3401              		.loc 1 659 0
 3402 26a7 C785A8FE 		movl	$0, -344(%rbp)
 3402      FFFF0000 
 3402      0000
 3403 26b1 EB1A     		jmp	.L222
 3404              	.L223:
 3405              		.loc 1 659 0 is_stmt 0 discriminator 2
 3406 26b3 8B85A8FE 		movl	-344(%rbp), %eax
 3406      FFFF
 3407 26b9 4898     		cltq
 3408 26bb C7848500 		movl	$0, -256(%rbp,%rax,4)
 3408      FFFFFF00 
 3408      000000
 3409 26c6 8385A8FE 		addl	$1, -344(%rbp)
 3409      FFFF01
 3410              	.L222:
 3411              		.loc 1 659 0 discriminator 1
 3412 26cd 83BDA8FE 		cmpl	$1, -344(%rbp)
 3412      FFFF01
 3413 26d4 7EDD     		jle	.L223
 3414              	.LBE77:
 660:main.c        ****                                         befEncSen[0] = maxPercent * finalBal;
 3415              		.loc 1 660 0 is_stmt 1
 3416 26d6 F20F2A85 		cvtsi2sd	-300(%rbp), %xmm0
 3416      D4FEFFFF 
 3417 26de F20F100D 		movsd	maxPercent(%rip), %xmm1
 3417      00000000 
 3418 26e6 F20F59C1 		mulsd	%xmm1, %xmm0
 3419 26ea F2480F2C 		cvttsd2siq	%xmm0, %rax
 3419      C0
 3420 26ef 898500FF 		movl	%eax, -256(%rbp)
 3420      FFFF
 661:main.c        ****                                         encrypt64(befEncSen);
 3421              		.loc 1 661 0
 3422 26f5 488D8500 		leaq	-256(%rbp), %rax
 3422      FFFFFF
 3423 26fc 4889C7   		movq	%rax, %rdi
 3424 26ff E8000000 		call	encrypt64
 3424      00
 3425              	.LBB78:
 662:main.c        ****                                         for (uint8_t i = 10; i <= 13; i++) {
 3426              		.loc 1 662 0
 3427 2704 C6853AFE 		movb	$10, -454(%rbp)
 3427      FFFF0A
 3428 270b E91C0100 		jmp	.L224
 3428      00
 3429              	.L231:
 3430              	.LBB79:
 663:main.c        ****                                             uint8_t tempSto = 0;
 3431              		.loc 1 663 0
 3432 2710 C68560FE 		movb	$0, -416(%rbp)
 3432      FFFF00
 3433              	.LBB80:
 664:main.c        ****                                             for (uint8_t j = 0; j <= 7; j++) {
 3434              		.loc 1 664 0
 3435 2717 C6853BFE 		movb	$0, -453(%rbp)
 3435      FFFF00
 3436 271e EB71     		jmp	.L225
 3437              	.L227:
 3438              	.LBB81:
 665:main.c        ****                                                 uint8_t temp = j + (i - 10) * 8;
 3439              		.loc 1 665 0
 3440 2720 0FB6853A 		movzbl	-454(%rbp), %eax
 3440      FEFFFF
 3441 2727 83E80A   		subl	$10, %eax
 3442 272a 8D14C500 		leal	0(,%rax,8), %edx
 3442      000000
 3443 2731 0FB6853B 		movzbl	-453(%rbp), %eax
 3443      FEFFFF
 3444 2738 01D0     		addl	%edx, %eax
 3445 273a 888546FE 		movb	%al, -442(%rbp)
 3445      FFFF
 666:main.c        ****                                                 if ((befEncSen[0] & (1 << temp)) != 0) {
 3446              		.loc 1 666 0
 3447 2740 8B9500FF 		movl	-256(%rbp), %edx
 3447      FFFF
 3448 2746 0FB68546 		movzbl	-442(%rbp), %eax
 3448      FEFFFF
 3449 274d BE010000 		movl	$1, %esi
 3449      00
 3450 2752 89C1     		movl	%eax, %ecx
 3451 2754 D3E6     		sall	%cl, %esi
 3452 2756 89F0     		movl	%esi, %eax
 3453 2758 21D0     		andl	%edx, %eax
 3454 275a 85C0     		testl	%eax, %eax
 3455 275c 7423     		je	.L226
 667:main.c        ****                                                     tempSto += (1 << j);
 3456              		.loc 1 667 0
 3457 275e 0FB6853B 		movzbl	-453(%rbp), %eax
 3457      FEFFFF
 3458 2765 BA010000 		movl	$1, %edx
 3458      00
 3459 276a 89C1     		movl	%eax, %ecx
 3460 276c D3E2     		sall	%cl, %edx
 3461 276e 89D0     		movl	%edx, %eax
 3462 2770 89C2     		movl	%eax, %edx
 3463 2772 0FB68560 		movzbl	-416(%rbp), %eax
 3463      FEFFFF
 3464 2779 01D0     		addl	%edx, %eax
 3465 277b 888560FE 		movb	%al, -416(%rbp)
 3465      FFFF
 3466              	.L226:
 3467              	.LBE81:
 664:main.c        ****                                                 uint8_t temp = j + (i - 10) * 8;
 3468              		.loc 1 664 0
 3469 2781 0FB6853B 		movzbl	-453(%rbp), %eax
 3469      FEFFFF
 3470 2788 83C001   		addl	$1, %eax
 3471 278b 88853BFE 		movb	%al, -453(%rbp)
 3471      FFFF
 3472              	.L225:
 664:main.c        ****                                                 uint8_t temp = j + (i - 10) * 8;
 3473              		.loc 1 664 0 is_stmt 0 discriminator 1
 3474 2791 80BD3BFE 		cmpb	$7, -453(%rbp)
 3474      FFFF07
 3475 2798 7686     		jbe	.L227
 3476              	.LBE80:
 668:main.c        ****                                                 }
 669:main.c        ****                                             }
 670:main.c        ****                                             flSleep(1000);
 3477              		.loc 1 670 0 is_stmt 1
 3478 279a BFE80300 		movl	$1000, %edi
 3478      00
 3479 279f E8000000 		call	flSleep
 3479      00
 671:main.c        ****                                             fStatus = flWriteChannel(handle, (uint8_t) i, length, &
 3480              		.loc 1 671 0
 3481 27a4 8B95C0FE 		movl	-320(%rbp), %edx
 3481      FFFF
 3482 27aa 0FB6B53A 		movzbl	-454(%rbp), %esi
 3482      FEFFFF
 3483 27b1 488B8510 		movq	-240(%rbp), %rax
 3483      FFFFFF
 3484 27b8 488DBD18 		leaq	-232(%rbp), %rdi
 3484      FFFFFF
 3485 27bf 488D8D60 		leaq	-416(%rbp), %rcx
 3485      FEFFFF
 3486 27c6 4989F8   		movq	%rdi, %r8
 3487 27c9 4889C7   		movq	%rax, %rdi
 3488 27cc E8000000 		call	flWriteChannel
 3488      00
 3489 27d1 8985BCFE 		movl	%eax, -324(%rbp)
 3489      FFFF
 672:main.c        ****                                             if (LOG) printf("Write to channel %u = %u \n", i, tempS
 3490              		.loc 1 672 0
 3491 27d7 0FB60500 		movzbl	LOG(%rip), %eax
 3491      000000
 3492 27de 84C0     		testb	%al, %al
 3493 27e0 7422     		je	.L228
 3494              		.loc 1 672 0 is_stmt 0 discriminator 1
 3495 27e2 0FB68560 		movzbl	-416(%rbp), %eax
 3495      FEFFFF
 3496 27e9 0FB6D0   		movzbl	%al, %edx
 3497 27ec 0FB6853A 		movzbl	-454(%rbp), %eax
 3497      FEFFFF
 3498 27f3 89C6     		movl	%eax, %esi
 3499 27f5 BF000000 		movl	$.LC52, %edi
 3499      00
 3500 27fa B8000000 		movl	$0, %eax
 3500      00
 3501 27ff E8000000 		call	printf
 3501      00
 3502              	.L228:
 673:main.c        ****                                             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3503              		.loc 1 673 0 is_stmt 1
 3504 2804 83BDBCFE 		cmpl	$0, -324(%rbp)
 3504      FFFF00
 3505 280b 740F     		je	.L229
 3506              		.loc 1 673 0 is_stmt 0 discriminator 1
 3507 280d C7856CFE 		movl	$1, -404(%rbp)
 3507      FFFF0100 
 3507      0000
 3508              	.LBE79:
 3509              	.LBE78:
 3510 2817 E9360500 		jmp	.L210
 3510      00
 3511              	.L229:
 3512              	.LBB82:
 662:main.c        ****                                             uint8_t tempSto = 0;
 3513              		.loc 1 662 0 is_stmt 1
 3514 281c 0FB6853A 		movzbl	-454(%rbp), %eax
 3514      FEFFFF
 3515 2823 83C001   		addl	$1, %eax
 3516 2826 88853AFE 		movb	%al, -454(%rbp)
 3516      FFFF
 3517              	.L224:
 662:main.c        ****                                             uint8_t tempSto = 0;
 3518              		.loc 1 662 0 is_stmt 0 discriminator 1
 3519 282c 80BD3AFE 		cmpb	$13, -454(%rbp)
 3519      FFFF0D
 3520 2833 0F86D7FE 		jbe	.L231
 3520      FFFF
 3521              	.LBE82:
 3522              	.LBB83:
 674:main.c        ****                                         }
 675:main.c        **** 
 676:main.c        ****                                         for (uint8_t i = 14; i <= 17; i++) {
 3523              		.loc 1 676 0 is_stmt 1
 3524 2839 C6853CFE 		movb	$14, -452(%rbp)
 3524      FFFF0E
 3525 2840 E91C0100 		jmp	.L232
 3525      00
 3526              	.L238:
 3527              	.LBB84:
 677:main.c        ****                                             uint8_t tempSto = 0;
 3528              		.loc 1 677 0
 3529 2845 C68560FE 		movb	$0, -416(%rbp)
 3529      FFFF00
 3530              	.LBB85:
 678:main.c        ****                                             for (uint8_t j = 0; j <= 7; j++) {
 3531              		.loc 1 678 0
 3532 284c C6853DFE 		movb	$0, -451(%rbp)
 3532      FFFF00
 3533 2853 EB71     		jmp	.L233
 3534              	.L235:
 3535              	.LBB86:
 679:main.c        ****                                                 uint8_t temp = j + (i - 14) * 8;
 3536              		.loc 1 679 0
 3537 2855 0FB6853C 		movzbl	-452(%rbp), %eax
 3537      FEFFFF
 3538 285c 83E80E   		subl	$14, %eax
 3539 285f 8D14C500 		leal	0(,%rax,8), %edx
 3539      000000
 3540 2866 0FB6853D 		movzbl	-451(%rbp), %eax
 3540      FEFFFF
 3541 286d 01D0     		addl	%edx, %eax
 3542 286f 888547FE 		movb	%al, -441(%rbp)
 3542      FFFF
 680:main.c        ****                                                 if ((befEncSen[1] & (1 << temp)) != 0) {
 3543              		.loc 1 680 0
 3544 2875 8B9504FF 		movl	-252(%rbp), %edx
 3544      FFFF
 3545 287b 0FB68547 		movzbl	-441(%rbp), %eax
 3545      FEFFFF
 3546 2882 BE010000 		movl	$1, %esi
 3546      00
 3547 2887 89C1     		movl	%eax, %ecx
 3548 2889 D3E6     		sall	%cl, %esi
 3549 288b 89F0     		movl	%esi, %eax
 3550 288d 21D0     		andl	%edx, %eax
 3551 288f 85C0     		testl	%eax, %eax
 3552 2891 7423     		je	.L234
 681:main.c        ****                                                     tempSto += (1 << j);
 3553              		.loc 1 681 0
 3554 2893 0FB6853D 		movzbl	-451(%rbp), %eax
 3554      FEFFFF
 3555 289a BA010000 		movl	$1, %edx
 3555      00
 3556 289f 89C1     		movl	%eax, %ecx
 3557 28a1 D3E2     		sall	%cl, %edx
 3558 28a3 89D0     		movl	%edx, %eax
 3559 28a5 89C2     		movl	%eax, %edx
 3560 28a7 0FB68560 		movzbl	-416(%rbp), %eax
 3560      FEFFFF
 3561 28ae 01D0     		addl	%edx, %eax
 3562 28b0 888560FE 		movb	%al, -416(%rbp)
 3562      FFFF
 3563              	.L234:
 3564              	.LBE86:
 678:main.c        ****                                                 uint8_t temp = j + (i - 14) * 8;
 3565              		.loc 1 678 0
 3566 28b6 0FB6853D 		movzbl	-451(%rbp), %eax
 3566      FEFFFF
 3567 28bd 83C001   		addl	$1, %eax
 3568 28c0 88853DFE 		movb	%al, -451(%rbp)
 3568      FFFF
 3569              	.L233:
 678:main.c        ****                                                 uint8_t temp = j + (i - 14) * 8;
 3570              		.loc 1 678 0 is_stmt 0 discriminator 1
 3571 28c6 80BD3DFE 		cmpb	$7, -451(%rbp)
 3571      FFFF07
 3572 28cd 7686     		jbe	.L235
 3573              	.LBE85:
 682:main.c        ****                                                 }
 683:main.c        ****                                             }
 684:main.c        ****                                             flSleep(1000);
 3574              		.loc 1 684 0 is_stmt 1
 3575 28cf BFE80300 		movl	$1000, %edi
 3575      00
 3576 28d4 E8000000 		call	flSleep
 3576      00
 685:main.c        ****                                             fStatus = flWriteChannel(handle, (uint8_t) i, length, &
 3577              		.loc 1 685 0
 3578 28d9 8B95C0FE 		movl	-320(%rbp), %edx
 3578      FFFF
 3579 28df 0FB6B53C 		movzbl	-452(%rbp), %esi
 3579      FEFFFF
 3580 28e6 488B8510 		movq	-240(%rbp), %rax
 3580      FFFFFF
 3581 28ed 488DBD18 		leaq	-232(%rbp), %rdi
 3581      FFFFFF
 3582 28f4 488D8D60 		leaq	-416(%rbp), %rcx
 3582      FEFFFF
 3583 28fb 4989F8   		movq	%rdi, %r8
 3584 28fe 4889C7   		movq	%rax, %rdi
 3585 2901 E8000000 		call	flWriteChannel
 3585      00
 3586 2906 8985BCFE 		movl	%eax, -324(%rbp)
 3586      FFFF
 686:main.c        ****                                             if (LOG) printf("Write to channel %u = %u \n", i, tempS
 3587              		.loc 1 686 0
 3588 290c 0FB60500 		movzbl	LOG(%rip), %eax
 3588      000000
 3589 2913 84C0     		testb	%al, %al
 3590 2915 7422     		je	.L236
 3591              		.loc 1 686 0 is_stmt 0 discriminator 1
 3592 2917 0FB68560 		movzbl	-416(%rbp), %eax
 3592      FEFFFF
 3593 291e 0FB6D0   		movzbl	%al, %edx
 3594 2921 0FB6853C 		movzbl	-452(%rbp), %eax
 3594      FEFFFF
 3595 2928 89C6     		movl	%eax, %esi
 3596 292a BF000000 		movl	$.LC52, %edi
 3596      00
 3597 292f B8000000 		movl	$0, %eax
 3597      00
 3598 2934 E8000000 		call	printf
 3598      00
 3599              	.L236:
 687:main.c        ****                                             CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3600              		.loc 1 687 0 is_stmt 1
 3601 2939 83BDBCFE 		cmpl	$0, -324(%rbp)
 3601      FFFF00
 3602 2940 740F     		je	.L237
 3603              		.loc 1 687 0 is_stmt 0 discriminator 1
 3604 2942 C7856CFE 		movl	$1, -404(%rbp)
 3604      FFFF0100 
 3604      0000
 3605              	.LBE84:
 3606              	.LBE83:
 3607 294c E9010400 		jmp	.L210
 3607      00
 3608              	.L237:
 3609              	.LBB87:
 676:main.c        ****                                             uint8_t tempSto = 0;
 3610              		.loc 1 676 0 is_stmt 1
 3611 2951 0FB6853C 		movzbl	-452(%rbp), %eax
 3611      FEFFFF
 3612 2958 83C001   		addl	$1, %eax
 3613 295b 88853CFE 		movb	%al, -452(%rbp)
 3613      FFFF
 3614              	.L232:
 676:main.c        ****                                             uint8_t tempSto = 0;
 3615              		.loc 1 676 0 is_stmt 0 discriminator 1
 3616 2961 80BD3CFE 		cmpb	$17, -452(%rbp)
 3616      FFFF11
 3617 2968 0F86D7FE 		jbe	.L238
 3617      FFFF
 3618              	.LBE87:
 688:main.c        ****                                         }
 689:main.c        **** 
 690:main.c        ****                                         /* update the balance in the global variable now and update
 691:main.c        ****                                         dataFromCSV[inLineNum][3] = finalBal;
 3619              		.loc 1 691 0 is_stmt 1
 3620 296e 8B8568FE 		movl	-408(%rbp), %eax
 3620      FFFF
 3621 2974 4898     		cltq
 3622 2976 48C1E004 		salq	$4, %rax
 3623 297a 488D9000 		leaq	dataFromCSV+12(%rax), %rdx
 3623      000000
 3624 2981 8B85D4FE 		movl	-300(%rbp), %eax
 3624      FFFF
 3625 2987 8902     		movl	%eax, (%rdx)
 692:main.c        **** 
 693:main.c        ****                                         /* Updating csv file in place */
 694:main.c        ****                                         fPtr = fopen("SampleBackEndDatabase.csv", "w+"); // change 
 3626              		.loc 1 694 0
 3627 2989 BE000000 		movl	$.LC60, %esi
 3627      00
 3628 298e BF000000 		movl	$.LC50, %edi
 3628      00
 3629 2993 E8000000 		call	fopen
 3629      00
 3630 2998 48894588 		movq	%rax, -120(%rbp)
 695:main.c        ****                                         fprintf(fPtr, "%s", "\"User ID (decimal)\",\"PIN Hash (deci
 3631              		.loc 1 695 0
 3632 299c 488B4588 		movq	-120(%rbp), %rax
 3633 29a0 4889C1   		movq	%rax, %rcx
 3634 29a3 BA440000 		movl	$68, %edx
 3634      00
 3635 29a8 BE010000 		movl	$1, %esi
 3635      00
 3636 29ad BF000000 		movl	$.LC61, %edi
 3636      00
 3637 29b2 E8000000 		call	fwrite
 3637      00
 696:main.c        ****                                         fprintf(fPtr, "\n");
 3638              		.loc 1 696 0
 3639 29b7 488B4588 		movq	-120(%rbp), %rax
 3640 29bb 4889C6   		movq	%rax, %rsi
 3641 29be BF0A0000 		movl	$10, %edi
 3641      00
 3642 29c3 E8000000 		call	fputc
 3642      00
 3643              	.LBB88:
 697:main.c        ****                                         for (int i = 1; i <= numLines; i++) {
 3644              		.loc 1 697 0
 3645 29c8 C785ACFE 		movl	$1, -340(%rbp)
 3645      FFFF0100 
 3645      0000
 3646 29d2 E9930000 		jmp	.L239
 3646      00
 3647              	.L245:
 3648              	.LBB89:
 698:main.c        ****                                             for (int k = 0; k < 4; k++) {
 3649              		.loc 1 698 0
 3650 29d7 C785B0FE 		movl	$0, -336(%rbp)
 3650      FFFF0000 
 3650      0000
 3651 29e1 EB77     		jmp	.L240
 3652              	.L244:
 699:main.c        ****                                                 fprintf(fPtr, "%d", dataFromCSV[i][k]);
 3653              		.loc 1 699 0
 3654 29e3 8B85B0FE 		movl	-336(%rbp), %eax
 3654      FFFF
 3655 29e9 4898     		cltq
 3656 29eb 8B95ACFE 		movl	-340(%rbp), %edx
 3656      FFFF
 3657 29f1 4863D2   		movslq	%edx, %rdx
 3658 29f4 48C1E202 		salq	$2, %rdx
 3659 29f8 4801D0   		addq	%rdx, %rax
 3660 29fb 8B148500 		movl	dataFromCSV(,%rax,4), %edx
 3660      000000
 3661 2a02 488B4588 		movq	-120(%rbp), %rax
 3662 2a06 BE000000 		movl	$.LC1, %esi
 3662      00
 3663 2a0b 4889C7   		movq	%rax, %rdi
 3664 2a0e B8000000 		movl	$0, %eax
 3664      00
 3665 2a13 E8000000 		call	fprintf
 3665      00
 700:main.c        ****                                                 if (k == 3) {
 3666              		.loc 1 700 0
 3667 2a18 83BDB0FE 		cmpl	$3, -336(%rbp)
 3667      FFFF03
 3668 2a1f 7521     		jne	.L241
 701:main.c        ****                                                     if (i != numLines) fprintf(fPtr, "\n");
 3669              		.loc 1 701 0
 3670 2a21 8B050000 		movl	numLines(%rip), %eax
 3670      0000
 3671 2a27 3985ACFE 		cmpl	%eax, -340(%rbp)
 3671      FFFF
 3672 2a2d 7424     		je	.L243
 3673              		.loc 1 701 0 is_stmt 0 discriminator 1
 3674 2a2f 488B4588 		movq	-120(%rbp), %rax
 3675 2a33 4889C6   		movq	%rax, %rsi
 3676 2a36 BF0A0000 		movl	$10, %edi
 3676      00
 3677 2a3b E8000000 		call	fputc
 3677      00
 3678 2a40 EB11     		jmp	.L243
 3679              	.L241:
 702:main.c        ****                                                 } else fprintf(fPtr, ",");
 3680              		.loc 1 702 0 is_stmt 1
 3681 2a42 488B4588 		movq	-120(%rbp), %rax
 3682 2a46 4889C6   		movq	%rax, %rsi
 3683 2a49 BF2C0000 		movl	$44, %edi
 3683      00
 3684 2a4e E8000000 		call	fputc
 3684      00
 3685              	.L243:
 698:main.c        ****                                                 fprintf(fPtr, "%d", dataFromCSV[i][k]);
 3686              		.loc 1 698 0
 3687 2a53 8385B0FE 		addl	$1, -336(%rbp)
 3687      FFFF01
 3688              	.L240:
 698:main.c        ****                                                 fprintf(fPtr, "%d", dataFromCSV[i][k]);
 3689              		.loc 1 698 0 is_stmt 0 discriminator 1
 3690 2a5a 83BDB0FE 		cmpl	$3, -336(%rbp)
 3690      FFFF03
 3691 2a61 7E80     		jle	.L244
 3692              	.LBE89:
 697:main.c        ****                                             for (int k = 0; k < 4; k++) {
 3693              		.loc 1 697 0 is_stmt 1
 3694 2a63 8385ACFE 		addl	$1, -340(%rbp)
 3694      FFFF01
 3695              	.L239:
 697:main.c        ****                                             for (int k = 0; k < 4; k++) {
 3696              		.loc 1 697 0 is_stmt 0 discriminator 1
 3697 2a6a 8B050000 		movl	numLines(%rip), %eax
 3697      0000
 3698 2a70 3985ACFE 		cmpl	%eax, -340(%rbp)
 3698      FFFF
 3699 2a76 0F8E5BFF 		jle	.L245
 3699      FFFF
 3700              	.LBE88:
 703:main.c        ****                                             }
 704:main.c        ****                                         }
 705:main.c        ****                                         fclose(fPtr);
 3701              		.loc 1 705 0 is_stmt 1
 3702 2a7c 488B4588 		movq	-120(%rbp), %rax
 3703 2a80 4889C7   		movq	%rax, %rdi
 3704 2a83 E8000000 		call	fclose
 3704      00
 3705              	.LBE76:
 3706 2a88 E9C70200 		jmp	.L86
 3706      00
 3707              	.L221:
 706:main.c        ****                                     }
 707:main.c        ****                                     else {
 708:main.c        ****                                         printf("%s\n", "Admin found from cache");
 3708              		.loc 1 708 0
 3709 2a8d BF000000 		movl	$.LC68, %edi
 3709      00
 3710 2a92 E8000000 		call	puts
 3710      00
 709:main.c        ****                                         return 0;
 3711              		.loc 1 709 0
 3712 2a97 B8000000 		movl	$0, %eax
 3712      00
 3713              	.LBE71:
 3714              	.LBE103:
 3715              	.LBE105:
 3716              	.LBE7:
 3717 2a9c E9780300 		jmp	.L266
 3717      00
 3718              	.L220:
 3719              	.LBB108:
 3720              	.LBB106:
 3721              	.LBB104:
 3722              	.LBB102:
 3723              	.LBB90:
 710:main.c        ****                                     }
 711:main.c        ****                                 }
 712:main.c        ****                                 else {
 713:main.c        ****                                     printf("%s\n", "Empty cache");
 3724              		.loc 1 713 0
 3725 2aa1 BF000000 		movl	$.LC69, %edi
 3725      00
 3726 2aa6 E8000000 		call	puts
 3726      00
 3727              	.LBB91:
 714:main.c        **** 
 715:main.c        ****                                     uint32_t befEncSen[2];
 716:main.c        ****                                     for (int i = 0; i < 2; i++) befEncSen[i] = 0;
 3728              		.loc 1 716 0
 3729 2aab C785B4FE 		movl	$0, -332(%rbp)
 3729      FFFF0000 
 3729      0000
 3730 2ab5 EB1A     		jmp	.L247
 3731              	.L248:
 3732              		.loc 1 716 0 is_stmt 0 discriminator 2
 3733 2ab7 8B85B4FE 		movl	-332(%rbp), %eax
 3733      FFFF
 3734 2abd 4898     		cltq
 3735 2abf C7848500 		movl	$0, -256(%rbp,%rax,4)
 3735      FFFFFF00 
 3735      000000
 3736 2aca 8385B4FE 		addl	$1, -332(%rbp)
 3736      FFFF01
 3737              	.L247:
 3738              		.loc 1 716 0 discriminator 1
 3739 2ad1 83BDB4FE 		cmpl	$1, -332(%rbp)
 3739      FFFF01
 3740 2ad8 7EDD     		jle	.L248
 3741              	.LBE91:
 717:main.c        ****                                     encrypt64(befEncSen);
 3742              		.loc 1 717 0 is_stmt 1
 3743 2ada 488D8500 		leaq	-256(%rbp), %rax
 3743      FFFFFF
 3744 2ae1 4889C7   		movq	%rax, %rdi
 3745 2ae4 E8000000 		call	encrypt64
 3745      00
 3746              	.LBB92:
 718:main.c        ****                                     for (uint8_t i = 10; i <= 13; i++) {
 3747              		.loc 1 718 0
 3748 2ae9 C6853EFE 		movb	$10, -450(%rbp)
 3748      FFFF0A
 3749 2af0 E91C0100 		jmp	.L249
 3749      00
 3750              	.L256:
 3751              	.LBB93:
 719:main.c        ****                                         uint8_t tempSto = 0;
 3752              		.loc 1 719 0
 3753 2af5 C68560FE 		movb	$0, -416(%rbp)
 3753      FFFF00
 3754              	.LBB94:
 720:main.c        ****                                         for (uint8_t j = 0; j <= 7; j++) {
 3755              		.loc 1 720 0
 3756 2afc C6853FFE 		movb	$0, -449(%rbp)
 3756      FFFF00
 3757 2b03 EB71     		jmp	.L250
 3758              	.L252:
 3759              	.LBB95:
 721:main.c        ****                                             uint8_t temp = j + (i - 10) * 8;
 3760              		.loc 1 721 0
 3761 2b05 0FB6853E 		movzbl	-450(%rbp), %eax
 3761      FEFFFF
 3762 2b0c 83E80A   		subl	$10, %eax
 3763 2b0f 8D14C500 		leal	0(,%rax,8), %edx
 3763      000000
 3764 2b16 0FB6853F 		movzbl	-449(%rbp), %eax
 3764      FEFFFF
 3765 2b1d 01D0     		addl	%edx, %eax
 3766 2b1f 888548FE 		movb	%al, -440(%rbp)
 3766      FFFF
 722:main.c        ****                                             if ((befEncSen[0] & (1 << temp)) != 0) {
 3767              		.loc 1 722 0
 3768 2b25 8B9500FF 		movl	-256(%rbp), %edx
 3768      FFFF
 3769 2b2b 0FB68548 		movzbl	-440(%rbp), %eax
 3769      FEFFFF
 3770 2b32 BE010000 		movl	$1, %esi
 3770      00
 3771 2b37 89C1     		movl	%eax, %ecx
 3772 2b39 D3E6     		sall	%cl, %esi
 3773 2b3b 89F0     		movl	%esi, %eax
 3774 2b3d 21D0     		andl	%edx, %eax
 3775 2b3f 85C0     		testl	%eax, %eax
 3776 2b41 7423     		je	.L251
 723:main.c        ****                                                 tempSto += (1 << j);
 3777              		.loc 1 723 0
 3778 2b43 0FB6853F 		movzbl	-449(%rbp), %eax
 3778      FEFFFF
 3779 2b4a BA010000 		movl	$1, %edx
 3779      00
 3780 2b4f 89C1     		movl	%eax, %ecx
 3781 2b51 D3E2     		sall	%cl, %edx
 3782 2b53 89D0     		movl	%edx, %eax
 3783 2b55 89C2     		movl	%eax, %edx
 3784 2b57 0FB68560 		movzbl	-416(%rbp), %eax
 3784      FEFFFF
 3785 2b5e 01D0     		addl	%edx, %eax
 3786 2b60 888560FE 		movb	%al, -416(%rbp)
 3786      FFFF
 3787              	.L251:
 3788              	.LBE95:
 720:main.c        ****                                             uint8_t temp = j + (i - 10) * 8;
 3789              		.loc 1 720 0
 3790 2b66 0FB6853F 		movzbl	-449(%rbp), %eax
 3790      FEFFFF
 3791 2b6d 83C001   		addl	$1, %eax
 3792 2b70 88853FFE 		movb	%al, -449(%rbp)
 3792      FFFF
 3793              	.L250:
 720:main.c        ****                                             uint8_t temp = j + (i - 10) * 8;
 3794              		.loc 1 720 0 is_stmt 0 discriminator 1
 3795 2b76 80BD3FFE 		cmpb	$7, -449(%rbp)
 3795      FFFF07
 3796 2b7d 7686     		jbe	.L252
 3797              	.LBE94:
 724:main.c        ****                                             }
 725:main.c        ****                                         }
 726:main.c        ****                                         flSleep(1000);
 3798              		.loc 1 726 0 is_stmt 1
 3799 2b7f BFE80300 		movl	$1000, %edi
 3799      00
 3800 2b84 E8000000 		call	flSleep
 3800      00
 727:main.c        ****                                         fStatus = flWriteChannel(handle, (uint8_t) i, length, &temp
 3801              		.loc 1 727 0
 3802 2b89 8B95C0FE 		movl	-320(%rbp), %edx
 3802      FFFF
 3803 2b8f 0FB6B53E 		movzbl	-450(%rbp), %esi
 3803      FEFFFF
 3804 2b96 488B8510 		movq	-240(%rbp), %rax
 3804      FFFFFF
 3805 2b9d 488DBD18 		leaq	-232(%rbp), %rdi
 3805      FFFFFF
 3806 2ba4 488D8D60 		leaq	-416(%rbp), %rcx
 3806      FEFFFF
 3807 2bab 4989F8   		movq	%rdi, %r8
 3808 2bae 4889C7   		movq	%rax, %rdi
 3809 2bb1 E8000000 		call	flWriteChannel
 3809      00
 3810 2bb6 8985BCFE 		movl	%eax, -324(%rbp)
 3810      FFFF
 728:main.c        ****                                         if (LOG) printf("Write to channel %u = %u \n", i, tempSto);
 3811              		.loc 1 728 0
 3812 2bbc 0FB60500 		movzbl	LOG(%rip), %eax
 3812      000000
 3813 2bc3 84C0     		testb	%al, %al
 3814 2bc5 7422     		je	.L253
 3815              		.loc 1 728 0 is_stmt 0 discriminator 1
 3816 2bc7 0FB68560 		movzbl	-416(%rbp), %eax
 3816      FEFFFF
 3817 2bce 0FB6D0   		movzbl	%al, %edx
 3818 2bd1 0FB6853E 		movzbl	-450(%rbp), %eax
 3818      FEFFFF
 3819 2bd8 89C6     		movl	%eax, %esi
 3820 2bda BF000000 		movl	$.LC52, %edi
 3820      00
 3821 2bdf B8000000 		movl	$0, %eax
 3821      00
 3822 2be4 E8000000 		call	printf
 3822      00
 3823              	.L253:
 729:main.c        ****                                         CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3824              		.loc 1 729 0 is_stmt 1
 3825 2be9 83BDBCFE 		cmpl	$0, -324(%rbp)
 3825      FFFF00
 3826 2bf0 740F     		je	.L254
 3827              		.loc 1 729 0 is_stmt 0 discriminator 1
 3828 2bf2 C7856CFE 		movl	$1, -404(%rbp)
 3828      FFFF0100 
 3828      0000
 3829              	.LBE93:
 3830              	.LBE92:
 3831 2bfc E9510100 		jmp	.L210
 3831      00
 3832              	.L254:
 3833              	.LBB96:
 718:main.c        ****                                         uint8_t tempSto = 0;
 3834              		.loc 1 718 0 is_stmt 1
 3835 2c01 0FB6853E 		movzbl	-450(%rbp), %eax
 3835      FEFFFF
 3836 2c08 83C001   		addl	$1, %eax
 3837 2c0b 88853EFE 		movb	%al, -450(%rbp)
 3837      FFFF
 3838              	.L249:
 718:main.c        ****                                         uint8_t tempSto = 0;
 3839              		.loc 1 718 0 is_stmt 0 discriminator 1
 3840 2c11 80BD3EFE 		cmpb	$13, -450(%rbp)
 3840      FFFF0D
 3841 2c18 0F86D7FE 		jbe	.L256
 3841      FFFF
 3842              	.LBE96:
 3843              	.LBB97:
 730:main.c        ****                                     }
 731:main.c        **** 
 732:main.c        ****                                     for (uint8_t i = 14; i <= 17; i++) {
 3844              		.loc 1 732 0 is_stmt 1
 3845 2c1e C68540FE 		movb	$14, -448(%rbp)
 3845      FFFF0E
 3846 2c25 E9190100 		jmp	.L257
 3846      00
 3847              	.L263:
 3848              	.LBB98:
 733:main.c        ****                                         uint8_t tempSto = 0;
 3849              		.loc 1 733 0
 3850 2c2a C68560FE 		movb	$0, -416(%rbp)
 3850      FFFF00
 3851              	.LBB99:
 734:main.c        ****                                         for (uint8_t j = 0; j <= 7; j++) {
 3852              		.loc 1 734 0
 3853 2c31 C68541FE 		movb	$0, -447(%rbp)
 3853      FFFF00
 3854 2c38 EB71     		jmp	.L258
 3855              	.L260:
 3856              	.LBB100:
 735:main.c        ****                                             uint8_t temp = j + (i - 14) * 8;
 3857              		.loc 1 735 0
 3858 2c3a 0FB68540 		movzbl	-448(%rbp), %eax
 3858      FEFFFF
 3859 2c41 83E80E   		subl	$14, %eax
 3860 2c44 8D14C500 		leal	0(,%rax,8), %edx
 3860      000000
 3861 2c4b 0FB68541 		movzbl	-447(%rbp), %eax
 3861      FEFFFF
 3862 2c52 01D0     		addl	%edx, %eax
 3863 2c54 888549FE 		movb	%al, -439(%rbp)
 3863      FFFF
 736:main.c        ****                                             if ((befEncSen[1] & (1 << temp)) != 0) {
 3864              		.loc 1 736 0
 3865 2c5a 8B9504FF 		movl	-252(%rbp), %edx
 3865      FFFF
 3866 2c60 0FB68549 		movzbl	-439(%rbp), %eax
 3866      FEFFFF
 3867 2c67 BE010000 		movl	$1, %esi
 3867      00
 3868 2c6c 89C1     		movl	%eax, %ecx
 3869 2c6e D3E6     		sall	%cl, %esi
 3870 2c70 89F0     		movl	%esi, %eax
 3871 2c72 21D0     		andl	%edx, %eax
 3872 2c74 85C0     		testl	%eax, %eax
 3873 2c76 7423     		je	.L259
 737:main.c        ****                                                 tempSto += (1 << j);
 3874              		.loc 1 737 0
 3875 2c78 0FB68541 		movzbl	-447(%rbp), %eax
 3875      FEFFFF
 3876 2c7f BA010000 		movl	$1, %edx
 3876      00
 3877 2c84 89C1     		movl	%eax, %ecx
 3878 2c86 D3E2     		sall	%cl, %edx
 3879 2c88 89D0     		movl	%edx, %eax
 3880 2c8a 89C2     		movl	%eax, %edx
 3881 2c8c 0FB68560 		movzbl	-416(%rbp), %eax
 3881      FEFFFF
 3882 2c93 01D0     		addl	%edx, %eax
 3883 2c95 888560FE 		movb	%al, -416(%rbp)
 3883      FFFF
 3884              	.L259:
 3885              	.LBE100:
 734:main.c        ****                                             uint8_t temp = j + (i - 14) * 8;
 3886              		.loc 1 734 0
 3887 2c9b 0FB68541 		movzbl	-447(%rbp), %eax
 3887      FEFFFF
 3888 2ca2 83C001   		addl	$1, %eax
 3889 2ca5 888541FE 		movb	%al, -447(%rbp)
 3889      FFFF
 3890              	.L258:
 734:main.c        ****                                             uint8_t temp = j + (i - 14) * 8;
 3891              		.loc 1 734 0 is_stmt 0 discriminator 1
 3892 2cab 80BD41FE 		cmpb	$7, -447(%rbp)
 3892      FFFF07
 3893 2cb2 7686     		jbe	.L260
 3894              	.LBE99:
 738:main.c        ****                                             }
 739:main.c        ****                                         }
 740:main.c        ****                                         flSleep(1000);
 3895              		.loc 1 740 0 is_stmt 1
 3896 2cb4 BFE80300 		movl	$1000, %edi
 3896      00
 3897 2cb9 E8000000 		call	flSleep
 3897      00
 741:main.c        ****                                         fStatus = flWriteChannel(handle, (uint8_t) i, length, &temp
 3898              		.loc 1 741 0
 3899 2cbe 8B95C0FE 		movl	-320(%rbp), %edx
 3899      FFFF
 3900 2cc4 0FB6B540 		movzbl	-448(%rbp), %esi
 3900      FEFFFF
 3901 2ccb 488B8510 		movq	-240(%rbp), %rax
 3901      FFFFFF
 3902 2cd2 488DBD18 		leaq	-232(%rbp), %rdi
 3902      FFFFFF
 3903 2cd9 488D8D60 		leaq	-416(%rbp), %rcx
 3903      FEFFFF
 3904 2ce0 4989F8   		movq	%rdi, %r8
 3905 2ce3 4889C7   		movq	%rax, %rdi
 3906 2ce6 E8000000 		call	flWriteChannel
 3906      00
 3907 2ceb 8985BCFE 		movl	%eax, -324(%rbp)
 3907      FFFF
 742:main.c        ****                                         if (LOG) printf("Write to channel %u = %u \n", i, tempSto);
 3908              		.loc 1 742 0
 3909 2cf1 0FB60500 		movzbl	LOG(%rip), %eax
 3909      000000
 3910 2cf8 84C0     		testb	%al, %al
 3911 2cfa 7422     		je	.L261
 3912              		.loc 1 742 0 is_stmt 0 discriminator 1
 3913 2cfc 0FB68560 		movzbl	-416(%rbp), %eax
 3913      FEFFFF
 3914 2d03 0FB6D0   		movzbl	%al, %edx
 3915 2d06 0FB68540 		movzbl	-448(%rbp), %eax
 3915      FEFFFF
 3916 2d0d 89C6     		movl	%eax, %esi
 3917 2d0f BF000000 		movl	$.LC52, %edi
 3917      00
 3918 2d14 B8000000 		movl	$0, %eax
 3918      00
 3919 2d19 E8000000 		call	printf
 3919      00
 3920              	.L261:
 743:main.c        ****                                         CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3921              		.loc 1 743 0 is_stmt 1
 3922 2d1e 83BDBCFE 		cmpl	$0, -324(%rbp)
 3922      FFFF00
 3923 2d25 740C     		je	.L262
 3924              		.loc 1 743 0 is_stmt 0 discriminator 1
 3925 2d27 C7856CFE 		movl	$1, -404(%rbp)
 3925      FFFF0100 
 3925      0000
 3926              	.LBE98:
 3927              	.LBE97:
 3928 2d31 EB1F     		jmp	.L210
 3929              	.L262:
 3930              	.LBB101:
 732:main.c        ****                                         uint8_t tempSto = 0;
 3931              		.loc 1 732 0 is_stmt 1
 3932 2d33 0FB68540 		movzbl	-448(%rbp), %eax
 3932      FEFFFF
 3933 2d3a 83C001   		addl	$1, %eax
 3934 2d3d 888540FE 		movb	%al, -448(%rbp)
 3934      FFFF
 3935              	.L257:
 732:main.c        ****                                         uint8_t tempSto = 0;
 3936              		.loc 1 732 0 is_stmt 0 discriminator 1
 3937 2d43 80BD40FE 		cmpb	$17, -448(%rbp)
 3937      FFFF11
 3938 2d4a 0F86DAFE 		jbe	.L263
 3938      FFFF
 3939              	.LBE101:
 3940 2d50 EB02     		jmp	.L86
 3941              	.L210:
 3942              	.LBE90:
 3943              	.LBE102:
 3944              	.LBE104:
 3945              	.LBE106:
 3946 2d52 EB69     		jmp	.L31
 3947              	.L86:
 3948              	.LBB107:
 744:main.c        ****                                     }
 745:main.c        ****                                 }
 746:main.c        ****                             }
 747:main.c        ****                         } 
 748:main.c        ****                     }
 749:main.c        ****                     flSleep(1000);
 3949              		.loc 1 749 0 is_stmt 1
 3950 2d54 BFE80300 		movl	$1000, %edi
 3950      00
 3951 2d59 E8000000 		call	flSleep
 3951      00
 3952              	.LBE107:
 750:main.c        ****                 }
 3953              		.loc 1 750 0
 3954 2d5e E9C5E1FF 		jmp	.L264
 3954      FF
 3955              	.L74:
 3956              	.LBE108:
 292:main.c        ****             fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3957              		.loc 1 292 0
 3958 2d63 EB58     		jmp	.L31
 3959              	.L52:
 751:main.c        **** 
 752:main.c        ****             } else {
 753:main.c        ****                 fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --
 3960              		.loc 1 753 0
 3961 2d65 488B0500 		movq	stderr(%rip), %rax
 3961      000000
 3962 2d6c 488B9578 		movq	-136(%rbp), %rdx
 3962      FFFFFF
 3963 2d73 BE000000 		movl	$.LC70, %esi
 3963      00
 3964 2d78 4889C7   		movq	%rax, %rdi
 3965 2d7b B8000000 		movl	$0, %eax
 3965      00
 3966 2d80 E8000000 		call	fprintf
 3966      00
 754:main.c        ****                 FAIL(FLP_ARGS, cleanup);
 3967              		.loc 1 754 0
 3968 2d85 C7856CFE 		movl	$12, -404(%rbp)
 3968      FFFF0C00 
 3968      0000
 3969 2d8f 90       		nop
 3970 2d90 EB2B     		jmp	.L31
 3971              	.L48:
 3972              	.LBE6:
 755:main.c        ****             }
 756:main.c        ****         } else {
 757:main.c        ****             fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 3973              		.loc 1 757 0
 3974 2d92 488B0500 		movq	stderr(%rip), %rax
 3974      000000
 3975 2d99 488B9578 		movq	-136(%rbp), %rdx
 3975      FFFFFF
 3976 2da0 BE000000 		movl	$.LC71, %esi
 3976      00
 3977 2da5 4889C7   		movq	%rax, %rdi
 3978 2da8 B8000000 		movl	$0, %eax
 3978      00
 3979 2dad E8000000 		call	fprintf
 3979      00
 758:main.c        ****             FAIL(FLP_ARGS, cleanup);
 3980              		.loc 1 758 0
 3981 2db2 C7856CFE 		movl	$12, -404(%rbp)
 3981      FFFF0C00 
 3981      0000
 3982 2dbc 90       		nop
 3983              	.L31:
 759:main.c        ****         }
 760:main.c        ****     }
 761:main.c        **** 
 762:main.c        ****     cleanup:
 763:main.c        ****     free((void *) line);
 3984              		.loc 1 763 0
 3985 2dbd 488B4580 		movq	-128(%rbp), %rax
 3986 2dc1 4889C7   		movq	%rax, %rdi
 3987 2dc4 E8000000 		call	free
 3987      00
 764:main.c        ****     flClose(handle);
 3988              		.loc 1 764 0
 3989 2dc9 488B8510 		movq	-240(%rbp), %rax
 3989      FFFFFF
 3990 2dd0 4889C7   		movq	%rax, %rdi
 3991 2dd3 E8000000 		call	flClose
 3991      00
 765:main.c        ****     if (error) {
 3992              		.loc 1 765 0
 3993 2dd8 488B8518 		movq	-232(%rbp), %rax
 3993      FFFFFF
 3994 2ddf 4885C0   		testq	%rax, %rax
 3995 2de2 742F     		je	.L265
 766:main.c        ****         fprintf(stderr, "%s\n", error);
 3996              		.loc 1 766 0
 3997 2de4 488B9518 		movq	-232(%rbp), %rdx
 3997      FFFFFF
 3998 2deb 488B0500 		movq	stderr(%rip), %rax
 3998      000000
 3999 2df2 BE000000 		movl	$.LC72, %esi
 3999      00
 4000 2df7 4889C7   		movq	%rax, %rdi
 4001 2dfa B8000000 		movl	$0, %eax
 4001      00
 4002 2dff E8000000 		call	fprintf
 4002      00
 767:main.c        ****         flFreeError(error);
 4003              		.loc 1 767 0
 4004 2e04 488B8518 		movq	-232(%rbp), %rax
 4004      FFFFFF
 4005 2e0b 4889C7   		movq	%rax, %rdi
 4006 2e0e E8000000 		call	flFreeError
 4006      00
 4007              	.L265:
 768:main.c        ****     }
 769:main.c        ****     return retVal;
 4008              		.loc 1 769 0
 4009 2e13 8B856CFE 		movl	-404(%rbp), %eax
 4009      FFFF
 4010              	.L266:
 770:main.c        **** }...
 4011              		.loc 1 770 0
 4012 2e19 4881C4E8 		addq	$488, %rsp
 4012      010000
 4013 2e20 5B       		popq	%rbx
 4014 2e21 5D       		popq	%rbp
 4015              		.cfi_def_cfa 7, 8
 4016 2e22 C3       		ret
 4017              		.cfi_endproc
 4018              	.LFE14:
 4020              	.Letext0:
 4021              		.file 2 "/usr/include/stdint.h"
 4022              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 4023              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 4024              		.file 5 "/usr/include/stdio.h"
 4025              		.file 6 "/usr/include/libio.h"
 4026              		.file 7 "/home/anirudh/Downloads/DLD-LAB/04-connectingatms/backend/libs/libargtable2/argtable2.h"
 4027              		.file 8 "/home/anirudh/Downloads/DLD-LAB/04-connectingatms/backend/common/makestuff.h"
 4028              		.file 9 "/home/anirudh/Downloads/DLD-LAB/04-connectingatms/backend/libs/libfpgalink/libfpgalink.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000186a50 dataFromCSV
     /tmp/ccZldqHh.s:10     .bss:0000000000000000 numLines
     /tmp/ccZldqHh.s:15     .bss:0000000000000004 LOG
     /tmp/ccZldqHh.s:22     .data:0000000000000000 bankID
     /tmp/ccZldqHh.s:28     .data:0000000000000004 maxAmountCanBeDispensed
     /tmp/ccZldqHh.s:33     .data:0000000000000008 max2000Limit
     /tmp/ccZldqHh.s:38     .data:0000000000000009 max1000Limit
     /tmp/ccZldqHh.s:43     .data:000000000000000a max500Limit
     /tmp/ccZldqHh.s:48     .data:000000000000000b max100Limit
     /tmp/ccZldqHh.s:54     .data:0000000000000010 maxPercent
     /tmp/ccZldqHh.s:60     .text:0000000000000000 decrypt
     /tmp/ccZldqHh.s:162    .text:00000000000000dd encrypt
     /tmp/ccZldqHh.s:263    .text:00000000000001ba decrypt64
     /tmp/ccZldqHh.s:297    .text:00000000000001f7 encrypt64
     /tmp/ccZldqHh.s:331    .text:0000000000000234 myHash
     /tmp/ccZldqHh.s:404    .text:00000000000002aa format
     /tmp/ccZldqHh.s:460    .text:000000000000032a find
     /tmp/ccZldqHh.s:547    .text:00000000000003d7 suffBalUser
     /tmp/ccZldqHh.s:607    .rodata:00000000000000e0 errMessages
     /tmp/ccZldqHh.s:761    .text:0000000000000411 main

UNDEFINED SYMBOLS
strtok
sscanf
arg_str0
arg_str1
arg_lit0
arg_end
arg_nullcheck
stderr
fprintf
arg_parse
atoi
puts
printf
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
flIsCommCapable
flSelectConduit
flIsFPGARunning
fopen
malloc
getline
free
fclose
flWriteChannel
flReadChannel
fwrite
fputc
flClose
flFreeError
