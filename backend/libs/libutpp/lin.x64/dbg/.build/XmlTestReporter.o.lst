   1              		.file	"XmlTestReporter.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.local	_ZStL8__ioinit
   5              		.comm	_ZStL8__ioinit,1,1
   7              	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs:
   8              	.LFB1265:
   9              		.file 1 "XmlTestReporter.cpp"
   1:XmlTestReporter.cpp **** #include "XmlTestReporter.h"
   2:XmlTestReporter.cpp **** #include "Config.h"
   3:XmlTestReporter.cpp **** 
   4:XmlTestReporter.cpp **** #include <iostream>
   5:XmlTestReporter.cpp **** #include <sstream>
   6:XmlTestReporter.cpp **** #include <string>
   7:XmlTestReporter.cpp **** 
   8:XmlTestReporter.cpp **** using std::string;
   9:XmlTestReporter.cpp **** using std::ostringstream;
  10:XmlTestReporter.cpp **** using std::ostream;
  11:XmlTestReporter.cpp **** 
  12:XmlTestReporter.cpp **** namespace {
  13:XmlTestReporter.cpp **** 
  14:XmlTestReporter.cpp **** void ReplaceChar(string& str, char c, string const& replacement)
  15:XmlTestReporter.cpp **** {
  10              		.loc 1 15 0
  11              		.cfi_startproc
  12 0000 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0001 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0004 4883EC30 		subq	$48, %rsp
  18 0008 48897DE8 		movq	%rdi, -24(%rbp)
  19 000c 89F0     		movl	%esi, %eax
  20 000e 488955D8 		movq	%rdx, -40(%rbp)
  21 0012 8845E4   		movb	%al, -28(%rbp)
  22              	.LBB2:
  23              	.LBB3:
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  24              		.loc 1 16 0
  25 0015 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  26 0019 488B45E8 		movq	-24(%rbp), %rax
  27 001d BA000000 		movl	$0, %edx
  27      00
  28 0022 89CE     		movl	%ecx, %esi
  29 0024 4889C7   		movq	%rax, %rdi
  30 0027 E8000000 		call	_ZNKSs4findEcm@PLT
  30      00
  31 002c 488945F8 		movq	%rax, -8(%rbp)
  32 0030 EB3A     		jmp	.L2
  33              	.L3:
  17:XmlTestReporter.cpp ****         str.replace(pos, 1, replacement);
  34              		.loc 1 17 0 discriminator 2
  35 0032 488B55D8 		movq	-40(%rbp), %rdx
  36 0036 488B75F8 		movq	-8(%rbp), %rsi
  37 003a 488B45E8 		movq	-24(%rbp), %rax
  38 003e 4889D1   		movq	%rdx, %rcx
  39 0041 BA010000 		movl	$1, %edx
  39      00
  40 0046 4889C7   		movq	%rax, %rdi
  41 0049 E8000000 		call	_ZNSs7replaceEmmRKSs@PLT
  41      00
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  42              		.loc 1 16 0 discriminator 2
  43 004e 488B45F8 		movq	-8(%rbp), %rax
  44 0052 488D5001 		leaq	1(%rax), %rdx
  45 0056 0FBE4DE4 		movsbl	-28(%rbp), %ecx
  46 005a 488B45E8 		movq	-24(%rbp), %rax
  47 005e 89CE     		movl	%ecx, %esi
  48 0060 4889C7   		movq	%rax, %rdi
  49 0063 E8000000 		call	_ZNKSs4findEcm@PLT
  49      00
  50 0068 488945F8 		movq	%rax, -8(%rbp)
  51              	.L2:
  16:XmlTestReporter.cpp ****     for (size_t pos = str.find(c); pos != string::npos; pos = str.find(c, pos + 1))
  52              		.loc 1 16 0 is_stmt 0 discriminator 1
  53 006c 48837DF8 		cmpq	$-1, -8(%rbp)
  53      FF
  54 0071 75BF     		jne	.L3
  55              	.LBE3:
  56              	.LBE2:
  18:XmlTestReporter.cpp **** }
  57              		.loc 1 18 0 is_stmt 1
  58 0073 C9       		leave
  59              		.cfi_def_cfa 7, 8
  60 0074 C3       		ret
  61              		.cfi_endproc
  62              	.LFE1265:
  64              		.section	.rodata
  65              	.LC0:
  66 0000 26616D70 		.string	"&amp;"
  66      3B00
  67              	.LC1:
  68 0006 266C743B 		.string	"&lt;"
  68      00
  69              	.LC2:
  70 000b 2667743B 		.string	"&gt;"
  70      00
  71              	.LC3:
  72 0010 2661706F 		.string	"&apos;"
  72      733B00
  73              	.LC4:
  74 0017 2671756F 		.string	"&quot;"
  74      743B00
  75              		.text
  77              	_ZN12_GLOBAL__N_19XmlEscapeERKSs:
  78              	.LFB1266:
  19:XmlTestReporter.cpp **** 
  20:XmlTestReporter.cpp **** string XmlEscape(string const& value)
  21:XmlTestReporter.cpp **** {
  79              		.loc 1 21 0
  80              		.cfi_startproc
  81              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  82              		.cfi_lsda 0x1b,.LLSDA1266
  83 0075 55       		pushq	%rbp
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 6, -16
  86 0076 4889E5   		movq	%rsp, %rbp
  87              		.cfi_def_cfa_register 6
  88 0079 53       		pushq	%rbx
  89 007a 4883EC68 		subq	$104, %rsp
  90              		.cfi_offset 3, -24
  91 007e 48897D98 		movq	%rdi, -104(%rbp)
  92 0082 48897590 		movq	%rsi, -112(%rbp)
  93              	.LBB4:
  22:XmlTestReporter.cpp ****     string escaped = value;
  94              		.loc 1 22 0
  95 0086 488B5590 		movq	-112(%rbp), %rdx
  96 008a 488B4598 		movq	-104(%rbp), %rax
  97 008e 4889D6   		movq	%rdx, %rsi
  98 0091 4889C7   		movq	%rax, %rdi
  99              	.LEHB0:
 100 0094 E8000000 		call	_ZNSsC1ERKSs@PLT
 100      00
 101              	.LEHE0:
  23:XmlTestReporter.cpp **** 
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '&', "&amp;");
 102              		.loc 1 24 0
 103 0099 488D45E0 		leaq	-32(%rbp), %rax
 104 009d 4889C7   		movq	%rax, %rdi
 105 00a0 E8000000 		call	_ZNSaIcEC1Ev@PLT
 105      00
 106 00a5 488D55E0 		leaq	-32(%rbp), %rdx
 107 00a9 488D45A0 		leaq	-96(%rbp), %rax
 108 00ad 488D3500 		leaq	.LC0(%rip), %rsi
 108      000000
 109 00b4 4889C7   		movq	%rax, %rdi
 110              	.LEHB1:
 111 00b7 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 111      00
 112              	.LEHE1:
 113              		.loc 1 24 0 is_stmt 0 discriminator 1
 114 00bc 488D55A0 		leaq	-96(%rbp), %rdx
 115 00c0 488B4598 		movq	-104(%rbp), %rax
 116 00c4 BE260000 		movl	$38, %esi
 116      00
 117 00c9 4889C7   		movq	%rax, %rdi
 118              	.LEHB2:
 119 00cc E82FFFFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 119      FF
 120              	.LEHE2:
 121 00d1 488D45A0 		leaq	-96(%rbp), %rax
 122 00d5 4889C7   		movq	%rax, %rdi
 123              	.LEHB3:
 124 00d8 E8000000 		call	_ZNSsD1Ev@PLT
 124      00
 125              	.LEHE3:
 126              		.loc 1 24 0 discriminator 2
 127 00dd 488D45E0 		leaq	-32(%rbp), %rax
 128 00e1 4889C7   		movq	%rax, %rdi
 129 00e4 E8000000 		call	_ZNSaIcED1Ev@PLT
 129      00
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 130              		.loc 1 25 0 is_stmt 1 discriminator 2
 131 00e9 488D45E0 		leaq	-32(%rbp), %rax
 132 00ed 4889C7   		movq	%rax, %rdi
 133 00f0 E8000000 		call	_ZNSaIcEC1Ev@PLT
 133      00
 134 00f5 488D55E0 		leaq	-32(%rbp), %rdx
 135 00f9 488D45B0 		leaq	-80(%rbp), %rax
 136 00fd 488D3500 		leaq	.LC1(%rip), %rsi
 136      000000
 137 0104 4889C7   		movq	%rax, %rdi
 138              	.LEHB4:
 139 0107 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 139      00
 140              	.LEHE4:
 141              		.loc 1 25 0 is_stmt 0 discriminator 1
 142 010c 488D55B0 		leaq	-80(%rbp), %rdx
 143 0110 488B4598 		movq	-104(%rbp), %rax
 144 0114 BE3C0000 		movl	$60, %esi
 144      00
 145 0119 4889C7   		movq	%rax, %rdi
 146              	.LEHB5:
 147 011c E8DFFEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 147      FF
 148              	.LEHE5:
 149 0121 488D45B0 		leaq	-80(%rbp), %rax
 150 0125 4889C7   		movq	%rax, %rdi
 151              	.LEHB6:
 152 0128 E8000000 		call	_ZNSsD1Ev@PLT
 152      00
 153              	.LEHE6:
 154              		.loc 1 25 0 discriminator 2
 155 012d 488D45E0 		leaq	-32(%rbp), %rax
 156 0131 4889C7   		movq	%rax, %rdi
 157 0134 E8000000 		call	_ZNSaIcED1Ev@PLT
 157      00
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 158              		.loc 1 26 0 is_stmt 1 discriminator 2
 159 0139 488D45E0 		leaq	-32(%rbp), %rax
 160 013d 4889C7   		movq	%rax, %rdi
 161 0140 E8000000 		call	_ZNSaIcEC1Ev@PLT
 161      00
 162 0145 488D55E0 		leaq	-32(%rbp), %rdx
 163 0149 488D45C0 		leaq	-64(%rbp), %rax
 164 014d 488D3500 		leaq	.LC2(%rip), %rsi
 164      000000
 165 0154 4889C7   		movq	%rax, %rdi
 166              	.LEHB7:
 167 0157 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 167      00
 168              	.LEHE7:
 169              		.loc 1 26 0 is_stmt 0 discriminator 1
 170 015c 488D55C0 		leaq	-64(%rbp), %rdx
 171 0160 488B4598 		movq	-104(%rbp), %rax
 172 0164 BE3E0000 		movl	$62, %esi
 172      00
 173 0169 4889C7   		movq	%rax, %rdi
 174              	.LEHB8:
 175 016c E88FFEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 175      FF
 176              	.LEHE8:
 177 0171 488D45C0 		leaq	-64(%rbp), %rax
 178 0175 4889C7   		movq	%rax, %rdi
 179              	.LEHB9:
 180 0178 E8000000 		call	_ZNSsD1Ev@PLT
 180      00
 181              	.LEHE9:
 182              		.loc 1 26 0 discriminator 2
 183 017d 488D45E0 		leaq	-32(%rbp), %rax
 184 0181 4889C7   		movq	%rax, %rdi
 185 0184 E8000000 		call	_ZNSaIcED1Ev@PLT
 185      00
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 186              		.loc 1 27 0 is_stmt 1 discriminator 2
 187 0189 488D45E0 		leaq	-32(%rbp), %rax
 188 018d 4889C7   		movq	%rax, %rdi
 189 0190 E8000000 		call	_ZNSaIcEC1Ev@PLT
 189      00
 190 0195 488D55E0 		leaq	-32(%rbp), %rdx
 191 0199 488D45D0 		leaq	-48(%rbp), %rax
 192 019d 488D3500 		leaq	.LC3(%rip), %rsi
 192      000000
 193 01a4 4889C7   		movq	%rax, %rdi
 194              	.LEHB10:
 195 01a7 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 195      00
 196              	.LEHE10:
 197              		.loc 1 27 0 is_stmt 0 discriminator 1
 198 01ac 488D55D0 		leaq	-48(%rbp), %rdx
 199 01b0 488B4598 		movq	-104(%rbp), %rax
 200 01b4 BE270000 		movl	$39, %esi
 200      00
 201 01b9 4889C7   		movq	%rax, %rdi
 202              	.LEHB11:
 203 01bc E83FFEFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 203      FF
 204              	.LEHE11:
 205 01c1 488D45D0 		leaq	-48(%rbp), %rax
 206 01c5 4889C7   		movq	%rax, %rdi
 207              	.LEHB12:
 208 01c8 E8000000 		call	_ZNSsD1Ev@PLT
 208      00
 209              	.LEHE12:
 210              		.loc 1 27 0 discriminator 2
 211 01cd 488D45E0 		leaq	-32(%rbp), %rax
 212 01d1 4889C7   		movq	%rax, %rdi
 213 01d4 E8000000 		call	_ZNSaIcED1Ev@PLT
 213      00
  28:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 214              		.loc 1 28 0 is_stmt 1 discriminator 2
 215 01d9 488D45D0 		leaq	-48(%rbp), %rax
 216 01dd 4889C7   		movq	%rax, %rdi
 217 01e0 E8000000 		call	_ZNSaIcEC1Ev@PLT
 217      00
 218 01e5 488D55D0 		leaq	-48(%rbp), %rdx
 219 01e9 488D45E0 		leaq	-32(%rbp), %rax
 220 01ed 488D3500 		leaq	.LC4(%rip), %rsi
 220      000000
 221 01f4 4889C7   		movq	%rax, %rdi
 222              	.LEHB13:
 223 01f7 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 223      00
 224              	.LEHE13:
 225              		.loc 1 28 0 is_stmt 0 discriminator 1
 226 01fc 488D55E0 		leaq	-32(%rbp), %rdx
 227 0200 488B4598 		movq	-104(%rbp), %rax
 228 0204 BE220000 		movl	$34, %esi
 228      00
 229 0209 4889C7   		movq	%rax, %rdi
 230              	.LEHB14:
 231 020c E8EFFDFF 		call	_ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
 231      FF
 232              	.LEHE14:
 233 0211 488D45E0 		leaq	-32(%rbp), %rax
 234 0215 4889C7   		movq	%rax, %rdi
 235              	.LEHB15:
 236 0218 E8000000 		call	_ZNSsD1Ev@PLT
 236      00
 237              	.LEHE15:
 238              		.loc 1 28 0 discriminator 2
 239 021d 488D45D0 		leaq	-48(%rbp), %rax
 240 0221 4889C7   		movq	%rax, %rdi
 241 0224 E8000000 		call	_ZNSaIcED1Ev@PLT
 241      00
  29:XmlTestReporter.cpp ****  
  30:XmlTestReporter.cpp ****     return escaped;
 242              		.loc 1 30 0 is_stmt 1 discriminator 2
 243 0229 E9C20000 		jmp	.L27
 243      00
 244              	.L18:
 245 022e 4889C3   		movq	%rax, %rbx
  24:XmlTestReporter.cpp ****     ReplaceChar(escaped, '<', "&lt;");
 246              		.loc 1 24 0
 247 0231 488D45A0 		leaq	-96(%rbp), %rax
 248 0235 4889C7   		movq	%rax, %rdi
 249 0238 E8000000 		call	_ZNSsD1Ev@PLT
 249      00
 250 023d EB03     		jmp	.L7
 251              	.L17:
 252 023f 4889C3   		movq	%rax, %rbx
 253              	.L7:
 254 0242 488D45E0 		leaq	-32(%rbp), %rax
 255 0246 4889C7   		movq	%rax, %rdi
 256 0249 E8000000 		call	_ZNSaIcED1Ev@PLT
 256      00
 257 024e E9860000 		jmp	.L8
 257      00
 258              	.L20:
 259 0253 4889C3   		movq	%rax, %rbx
  25:XmlTestReporter.cpp ****     ReplaceChar(escaped, '>', "&gt;");
 260              		.loc 1 25 0
 261 0256 488D45B0 		leaq	-80(%rbp), %rax
 262 025a 4889C7   		movq	%rax, %rdi
 263 025d E8000000 		call	_ZNSsD1Ev@PLT
 263      00
 264 0262 EB03     		jmp	.L10
 265              	.L19:
 266 0264 4889C3   		movq	%rax, %rbx
 267              	.L10:
 268 0267 488D45E0 		leaq	-32(%rbp), %rax
 269 026b 4889C7   		movq	%rax, %rdi
 270 026e E8000000 		call	_ZNSaIcED1Ev@PLT
 270      00
 271 0273 EB64     		jmp	.L8
 272              	.L22:
 273 0275 4889C3   		movq	%rax, %rbx
  26:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\'', "&apos;");
 274              		.loc 1 26 0
 275 0278 488D45C0 		leaq	-64(%rbp), %rax
 276 027c 4889C7   		movq	%rax, %rdi
 277 027f E8000000 		call	_ZNSsD1Ev@PLT
 277      00
 278 0284 EB03     		jmp	.L12
 279              	.L21:
 280 0286 4889C3   		movq	%rax, %rbx
 281              	.L12:
 282 0289 488D45E0 		leaq	-32(%rbp), %rax
 283 028d 4889C7   		movq	%rax, %rdi
 284 0290 E8000000 		call	_ZNSaIcED1Ev@PLT
 284      00
 285 0295 EB42     		jmp	.L8
 286              	.L24:
 287 0297 4889C3   		movq	%rax, %rbx
  27:XmlTestReporter.cpp ****     ReplaceChar(escaped, '\"', "&quot;");
 288              		.loc 1 27 0
 289 029a 488D45D0 		leaq	-48(%rbp), %rax
 290 029e 4889C7   		movq	%rax, %rdi
 291 02a1 E8000000 		call	_ZNSsD1Ev@PLT
 291      00
 292 02a6 EB03     		jmp	.L14
 293              	.L23:
 294 02a8 4889C3   		movq	%rax, %rbx
 295              	.L14:
 296 02ab 488D45E0 		leaq	-32(%rbp), %rax
 297 02af 4889C7   		movq	%rax, %rdi
 298 02b2 E8000000 		call	_ZNSaIcED1Ev@PLT
 298      00
 299 02b7 EB20     		jmp	.L8
 300              	.L26:
 301 02b9 4889C3   		movq	%rax, %rbx
  28:XmlTestReporter.cpp ****  
 302              		.loc 1 28 0
 303 02bc 488D45E0 		leaq	-32(%rbp), %rax
 304 02c0 4889C7   		movq	%rax, %rdi
 305 02c3 E8000000 		call	_ZNSsD1Ev@PLT
 305      00
 306 02c8 EB03     		jmp	.L16
 307              	.L25:
 308 02ca 4889C3   		movq	%rax, %rbx
 309              	.L16:
 310 02cd 488D45D0 		leaq	-48(%rbp), %rax
 311 02d1 4889C7   		movq	%rax, %rdi
 312 02d4 E8000000 		call	_ZNSaIcED1Ev@PLT
 312      00
 313              	.L8:
 314 02d9 488B4598 		movq	-104(%rbp), %rax
 315 02dd 4889C7   		movq	%rax, %rdi
 316 02e0 E8000000 		call	_ZNSsD1Ev@PLT
 316      00
 317 02e5 4889D8   		movq	%rbx, %rax
 318 02e8 4889C7   		movq	%rax, %rdi
 319              	.LEHB16:
 320 02eb E8000000 		call	_Unwind_Resume@PLT
 320      00
 321              	.LEHE16:
 322              	.L27:
 323              	.LBE4:
  31:XmlTestReporter.cpp **** }
 324              		.loc 1 31 0
 325 02f0 488B4598 		movq	-104(%rbp), %rax
 326 02f4 4883C468 		addq	$104, %rsp
 327 02f8 5B       		popq	%rbx
 328 02f9 5D       		popq	%rbp
 329              		.cfi_def_cfa 7, 8
 330 02fa C3       		ret
 331              		.cfi_endproc
 332              	.LFE1266:
 333              		.globl	__gxx_personality_v0
 334              		.section	.gcc_except_table,"a",@progbits
 335              	.LLSDA1266:
 336 0000 FF       		.byte	0xff
 337 0001 FF       		.byte	0xff
 338 0002 01       		.byte	0x1
 339 0003 60       		.uleb128 .LLSDACSE1266-.LLSDACSB1266
 340              	.LLSDACSB1266:
 341 0004 1F       		.uleb128 .LEHB0-.LFB1266
 342 0005 05       		.uleb128 .LEHE0-.LEHB0
 343 0006 00       		.uleb128 0
 344 0007 00       		.uleb128 0
 345 0008 42       		.uleb128 .LEHB1-.LFB1266
 346 0009 05       		.uleb128 .LEHE1-.LEHB1
 347 000a CA03     		.uleb128 .L17-.LFB1266
 348 000c 00       		.uleb128 0
 349 000d 57       		.uleb128 .LEHB2-.LFB1266
 350 000e 05       		.uleb128 .LEHE2-.LEHB2
 351 000f B903     		.uleb128 .L18-.LFB1266
 352 0011 00       		.uleb128 0
 353 0012 63       		.uleb128 .LEHB3-.LFB1266
 354 0013 05       		.uleb128 .LEHE3-.LEHB3
 355 0014 CA03     		.uleb128 .L17-.LFB1266
 356 0016 00       		.uleb128 0
 357 0017 9201     		.uleb128 .LEHB4-.LFB1266
 358 0019 05       		.uleb128 .LEHE4-.LEHB4
 359 001a EF03     		.uleb128 .L19-.LFB1266
 360 001c 00       		.uleb128 0
 361 001d A701     		.uleb128 .LEHB5-.LFB1266
 362 001f 05       		.uleb128 .LEHE5-.LEHB5
 363 0020 DE03     		.uleb128 .L20-.LFB1266
 364 0022 00       		.uleb128 0
 365 0023 B301     		.uleb128 .LEHB6-.LFB1266
 366 0025 05       		.uleb128 .LEHE6-.LEHB6
 367 0026 EF03     		.uleb128 .L19-.LFB1266
 368 0028 00       		.uleb128 0
 369 0029 E201     		.uleb128 .LEHB7-.LFB1266
 370 002b 05       		.uleb128 .LEHE7-.LEHB7
 371 002c 9104     		.uleb128 .L21-.LFB1266
 372 002e 00       		.uleb128 0
 373 002f F701     		.uleb128 .LEHB8-.LFB1266
 374 0031 05       		.uleb128 .LEHE8-.LEHB8
 375 0032 8004     		.uleb128 .L22-.LFB1266
 376 0034 00       		.uleb128 0
 377 0035 8302     		.uleb128 .LEHB9-.LFB1266
 378 0037 05       		.uleb128 .LEHE9-.LEHB9
 379 0038 9104     		.uleb128 .L21-.LFB1266
 380 003a 00       		.uleb128 0
 381 003b B202     		.uleb128 .LEHB10-.LFB1266
 382 003d 05       		.uleb128 .LEHE10-.LEHB10
 383 003e B304     		.uleb128 .L23-.LFB1266
 384 0040 00       		.uleb128 0
 385 0041 C702     		.uleb128 .LEHB11-.LFB1266
 386 0043 05       		.uleb128 .LEHE11-.LEHB11
 387 0044 A204     		.uleb128 .L24-.LFB1266
 388 0046 00       		.uleb128 0
 389 0047 D302     		.uleb128 .LEHB12-.LFB1266
 390 0049 05       		.uleb128 .LEHE12-.LEHB12
 391 004a B304     		.uleb128 .L23-.LFB1266
 392 004c 00       		.uleb128 0
 393 004d 8203     		.uleb128 .LEHB13-.LFB1266
 394 004f 05       		.uleb128 .LEHE13-.LEHB13
 395 0050 D504     		.uleb128 .L25-.LFB1266
 396 0052 00       		.uleb128 0
 397 0053 9703     		.uleb128 .LEHB14-.LFB1266
 398 0055 05       		.uleb128 .LEHE14-.LEHB14
 399 0056 C404     		.uleb128 .L26-.LFB1266
 400 0058 00       		.uleb128 0
 401 0059 A303     		.uleb128 .LEHB15-.LFB1266
 402 005b 05       		.uleb128 .LEHE15-.LEHB15
 403 005c D504     		.uleb128 .L25-.LFB1266
 404 005e 00       		.uleb128 0
 405 005f F604     		.uleb128 .LEHB16-.LFB1266
 406 0061 05       		.uleb128 .LEHE16-.LEHB16
 407 0062 00       		.uleb128 0
 408 0063 00       		.uleb128 0
 409              	.LLSDACSE1266:
 410              		.text
 412              		.section	.rodata
 413              	.LC5:
 414 001e 2800     		.string	"("
 415              	.LC6:
 416 0020 29203A20 		.string	") : "
 416      00
 417              		.text
 419              	_ZN12_GLOBAL__N_119BuildFailureMessageERKSsiS1_:
 420              	.LFB1267:
  32:XmlTestReporter.cpp **** 
  33:XmlTestReporter.cpp **** string BuildFailureMessage(string const& file, int line, string const& message)
  34:XmlTestReporter.cpp **** {
 421              		.loc 1 34 0
 422              		.cfi_startproc
 423              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 424              		.cfi_lsda 0x1b,.LLSDA1267
 425 02fb 55       		pushq	%rbp
 426              		.cfi_def_cfa_offset 16
 427              		.cfi_offset 6, -16
 428 02fc 4889E5   		movq	%rsp, %rbp
 429              		.cfi_def_cfa_register 6
 430 02ff 53       		pushq	%rbx
 431 0300 4881EC88 		subq	$392, %rsp
 431      010000
 432              		.cfi_offset 3, -24
 433 0307 4889BD88 		movq	%rdi, -376(%rbp)
 433      FEFFFF
 434 030e 4889B580 		movq	%rsi, -384(%rbp)
 434      FEFFFF
 435 0315 89957CFE 		movl	%edx, -388(%rbp)
 435      FFFF
 436 031b 48898D70 		movq	%rcx, -400(%rbp)
 436      FEFFFF
 437              	.LBB5:
  35:XmlTestReporter.cpp ****     ostringstream failureMessage;
 438              		.loc 1 35 0
 439 0322 488D8590 		leaq	-368(%rbp), %rax
 439      FEFFFF
 440 0329 BE100000 		movl	$16, %esi
 440      00
 441 032e 4889C7   		movq	%rax, %rdi
 442              	.LEHB17:
 443 0331 E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode@PLT
 443      00
 444              	.LEHE17:
  36:XmlTestReporter.cpp ****     failureMessage << file << "(" << line << ") : " << message;
 445              		.loc 1 36 0
 446 0336 488B9580 		movq	-384(%rbp), %rdx
 446      FEFFFF
 447 033d 488D8590 		leaq	-368(%rbp), %rax
 447      FEFFFF
 448 0344 4889D6   		movq	%rdx, %rsi
 449 0347 4889C7   		movq	%rax, %rdi
 450              	.LEHB18:
 451 034a E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 451      00
 452 034f 488D3500 		leaq	.LC5(%rip), %rsi
 452      000000
 453 0356 4889C7   		movq	%rax, %rdi
 454 0359 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 454      00
 455              		.loc 1 36 0 is_stmt 0 discriminator 1
 456 035e 8B957CFE 		movl	-388(%rbp), %edx
 456      FFFF
 457 0364 89D6     		movl	%edx, %esi
 458 0366 4889C7   		movq	%rax, %rdi
 459 0369 E8000000 		call	_ZNSolsEi@PLT
 459      00
 460 036e 488D3500 		leaq	.LC6(%rip), %rsi
 460      000000
 461 0375 4889C7   		movq	%rax, %rdi
 462 0378 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 462      00
 463 037d 488B9570 		movq	-400(%rbp), %rdx
 463      FEFFFF
 464 0384 4889D6   		movq	%rdx, %rsi
 465 0387 4889C7   		movq	%rax, %rdi
 466 038a E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 466      00
  37:XmlTestReporter.cpp ****     return failureMessage.str();
 467              		.loc 1 37 0 is_stmt 1
 468 038f 488B8588 		movq	-376(%rbp), %rax
 468      FEFFFF
 469 0396 488D9590 		leaq	-368(%rbp), %rdx
 469      FEFFFF
 470 039d 4889D6   		movq	%rdx, %rsi
 471 03a0 4889C7   		movq	%rax, %rdi
 472 03a3 E8000000 		call	_ZNKSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv@PLT
 472      00
 473              	.LEHE18:
 474              		.loc 1 37 0 is_stmt 0 discriminator 1
 475 03a8 90       		nop
 476 03a9 488D8590 		leaq	-368(%rbp), %rax
 476      FEFFFF
 477 03b0 4889C7   		movq	%rax, %rdi
 478              	.LEHB19:
 479 03b3 E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 479      00
 480              	.LEHE19:
 481 03b8 EB1D     		jmp	.L32
 482              	.L31:
 483 03ba 4889C3   		movq	%rax, %rbx
 484              		.loc 1 37 0
 485 03bd 488D8590 		leaq	-368(%rbp), %rax
 485      FEFFFF
 486 03c4 4889C7   		movq	%rax, %rdi
 487 03c7 E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev@PLT
 487      00
 488 03cc 4889D8   		movq	%rbx, %rax
 489 03cf 4889C7   		movq	%rax, %rdi
 490              	.LEHB20:
 491 03d2 E8000000 		call	_Unwind_Resume@PLT
 491      00
 492              	.LEHE20:
 493              	.L32:
 494              	.LBE5:
  38:XmlTestReporter.cpp **** }
 495              		.loc 1 38 0 is_stmt 1
 496 03d7 488B8588 		movq	-376(%rbp), %rax
 496      FEFFFF
 497 03de 4881C488 		addq	$392, %rsp
 497      010000
 498 03e5 5B       		popq	%rbx
 499 03e6 5D       		popq	%rbp
 500              		.cfi_def_cfa 7, 8
 501 03e7 C3       		ret
 502              		.cfi_endproc
 503              	.LFE1267:
 504              		.section	.gcc_except_table
 505              	.LLSDA1267:
 506 0064 FF       		.byte	0xff
 507 0065 FF       		.byte	0xff
 508 0066 01       		.byte	0x1
 509 0067 13       		.uleb128 .LLSDACSE1267-.LLSDACSB1267
 510              	.LLSDACSB1267:
 511 0068 36       		.uleb128 .LEHB17-.LFB1267
 512 0069 05       		.uleb128 .LEHE17-.LEHB17
 513 006a 00       		.uleb128 0
 514 006b 00       		.uleb128 0
 515 006c 4F       		.uleb128 .LEHB18-.LFB1267
 516 006d 5E       		.uleb128 .LEHE18-.LEHB18
 517 006e BF01     		.uleb128 .L31-.LFB1267
 518 0070 00       		.uleb128 0
 519 0071 B801     		.uleb128 .LEHB19-.LFB1267
 520 0073 05       		.uleb128 .LEHE19-.LEHB19
 521 0074 00       		.uleb128 0
 522 0075 00       		.uleb128 0
 523 0076 D701     		.uleb128 .LEHB20-.LFB1267
 524 0078 05       		.uleb128 .LEHE20-.LEHB20
 525 0079 00       		.uleb128 0
 526 007a 00       		.uleb128 0
 527              	.LLSDACSE1267:
 528              		.text
 530              		.section	.text._ZN8UnitTest12TestReporterC2Ev,"axG",@progbits,_ZN8UnitTest12TestReporterC5Ev,comda
 531              		.align 2
 532              		.weak	_ZN8UnitTest12TestReporterC2Ev
 534              	_ZN8UnitTest12TestReporterC2Ev:
 535              	.LFB1271:
 536              		.file 2 "TestReporter.h"
   1:TestReporter.h **** #ifndef UNITTEST_TESTREPORTER_H
   2:TestReporter.h **** #define UNITTEST_TESTREPORTER_H
   3:TestReporter.h **** 
   4:TestReporter.h **** namespace UnitTest {
   5:TestReporter.h **** 
   6:TestReporter.h **** class TestDetails;
   7:TestReporter.h **** 
   8:TestReporter.h **** class TestReporter
 537              		.loc 2 8 0
 538              		.cfi_startproc
 539 0000 55       		pushq	%rbp
 540              		.cfi_def_cfa_offset 16
 541              		.cfi_offset 6, -16
 542 0001 4889E5   		movq	%rsp, %rbp
 543              		.cfi_def_cfa_register 6
 544 0004 48897DF8 		movq	%rdi, -8(%rbp)
 545              	.LBB6:
 546              		.loc 2 8 0
 547 0008 488B45F8 		movq	-8(%rbp), %rax
 548 000c 488B1500 		movq	_ZTVN8UnitTest12TestReporterE@GOTPCREL(%rip), %rdx
 548      000000
 549 0013 488D5210 		leaq	16(%rdx), %rdx
 550 0017 488910   		movq	%rdx, (%rax)
 551              	.LBE6:
 552 001a 5D       		popq	%rbp
 553              		.cfi_def_cfa 7, 8
 554 001b C3       		ret
 555              		.cfi_endproc
 556              	.LFE1271:
 558              		.weak	_ZN8UnitTest12TestReporterC1Ev
 559              		.set	_ZN8UnitTest12TestReporterC1Ev,_ZN8UnitTest12TestReporterC2Ev
 560              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 561              		.align 2
 562              		.weak	_ZN8UnitTest20DeferredTestReporterC2Ev
 564              	_ZN8UnitTest20DeferredTestReporterC2Ev:
 565              	.LFB1273:
 566              		.file 3 "DeferredTestReporter.h"
   1:DeferredTestReporter.h **** #ifndef UNITTEST_DEFERREDTESTREPORTER_H
   2:DeferredTestReporter.h **** #define UNITTEST_DEFERREDTESTREPORTER_H
   3:DeferredTestReporter.h **** 
   4:DeferredTestReporter.h **** #include "TestReporter.h"
   5:DeferredTestReporter.h **** #include "DeferredTestResult.h"
   6:DeferredTestReporter.h **** 
   7:DeferredTestReporter.h **** #include <vector>
   8:DeferredTestReporter.h **** 
   9:DeferredTestReporter.h **** namespace UnitTest
  10:DeferredTestReporter.h **** {
  11:DeferredTestReporter.h **** 
  12:DeferredTestReporter.h **** class DeferredTestReporter : public TestReporter
 567              		.loc 3 12 0
 568              		.cfi_startproc
 569              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 570              		.cfi_lsda 0x1b,.LLSDA1273
 571 0000 55       		pushq	%rbp
 572              		.cfi_def_cfa_offset 16
 573              		.cfi_offset 6, -16
 574 0001 4889E5   		movq	%rsp, %rbp
 575              		.cfi_def_cfa_register 6
 576 0004 53       		pushq	%rbx
 577 0005 4883EC18 		subq	$24, %rsp
 578              		.cfi_offset 3, -24
 579 0009 48897DE8 		movq	%rdi, -24(%rbp)
 580              	.LBB7:
 581              		.loc 3 12 0
 582 000d 488B45E8 		movq	-24(%rbp), %rax
 583 0011 4889C7   		movq	%rax, %rdi
 584 0014 E8000000 		call	_ZN8UnitTest12TestReporterC2Ev@PLT
 584      00
 585 0019 488B45E8 		movq	-24(%rbp), %rax
 586 001d 488B1500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rdx
 586      000000
 587 0024 488D5210 		leaq	16(%rdx), %rdx
 588 0028 488910   		movq	%rdx, (%rax)
 589 002b 488B45E8 		movq	-24(%rbp), %rax
 590 002f 4883C008 		addq	$8, %rax
 591 0033 4889C7   		movq	%rax, %rdi
 592              	.LEHB21:
 593 0036 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev@PLT
 593      00
 594              	.LEHE21:
 595              	.LBE7:
 596 003b EB1A     		jmp	.L37
 597              	.L36:
 598 003d 4889C3   		movq	%rax, %rbx
 599              	.LBB8:
 600 0040 488B45E8 		movq	-24(%rbp), %rax
 601 0044 4889C7   		movq	%rax, %rdi
 602 0047 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 602      00
 603 004c 4889D8   		movq	%rbx, %rax
 604 004f 4889C7   		movq	%rax, %rdi
 605              	.LEHB22:
 606 0052 E8000000 		call	_Unwind_Resume@PLT
 606      00
 607              	.LEHE22:
 608              	.L37:
 609              	.LBE8:
 610 0057 4883C418 		addq	$24, %rsp
 611 005b 5B       		popq	%rbx
 612 005c 5D       		popq	%rbp
 613              		.cfi_def_cfa 7, 8
 614 005d C3       		ret
 615              		.cfi_endproc
 616              	.LFE1273:
 617              		.section	.gcc_except_table
 618              	.LLSDA1273:
 619 007b FF       		.byte	0xff
 620 007c FF       		.byte	0xff
 621 007d 01       		.byte	0x1
 622 007e 08       		.uleb128 .LLSDACSE1273-.LLSDACSB1273
 623              	.LLSDACSB1273:
 624 007f 36       		.uleb128 .LEHB21-.LFB1273
 625 0080 05       		.uleb128 .LEHE21-.LEHB21
 626 0081 3D       		.uleb128 .L36-.LFB1273
 627 0082 00       		.uleb128 0
 628 0083 52       		.uleb128 .LEHB22-.LFB1273
 629 0084 05       		.uleb128 .LEHE22-.LEHB22
 630 0085 00       		.uleb128 0
 631 0086 00       		.uleb128 0
 632              	.LLSDACSE1273:
 633              		.section	.text._ZN8UnitTest20DeferredTestReporterC2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 635              		.weak	_ZN8UnitTest20DeferredTestReporterC1Ev
 636              		.set	_ZN8UnitTest20DeferredTestReporterC1Ev,_ZN8UnitTest20DeferredTestReporterC2Ev
 637              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 638              		.align 2
 639              		.weak	_ZN8UnitTest20DeferredTestReporterD2Ev
 641              	_ZN8UnitTest20DeferredTestReporterD2Ev:
 642              	.LFB1276:
 643              		.loc 3 12 0
 644              		.cfi_startproc
 645              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 646              		.cfi_lsda 0x1b,.LLSDA1276
 647 0000 55       		pushq	%rbp
 648              		.cfi_def_cfa_offset 16
 649              		.cfi_offset 6, -16
 650 0001 4889E5   		movq	%rsp, %rbp
 651              		.cfi_def_cfa_register 6
 652 0004 53       		pushq	%rbx
 653 0005 4883EC18 		subq	$24, %rsp
 654              		.cfi_offset 3, -24
 655 0009 48897DE8 		movq	%rdi, -24(%rbp)
 656              	.LBB9:
 657              		.loc 3 12 0
 658 000d 488B45E8 		movq	-24(%rbp), %rax
 659 0011 488B1500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rdx
 659      000000
 660 0018 488D5210 		leaq	16(%rdx), %rdx
 661 001c 488910   		movq	%rdx, (%rax)
 662 001f 488B45E8 		movq	-24(%rbp), %rax
 663 0023 4883C008 		addq	$8, %rax
 664 0027 4889C7   		movq	%rax, %rdi
 665              	.LEHB23:
 666 002a E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev@PLT
 666      00
 667              	.LEHE23:
 668              		.loc 3 12 0 is_stmt 0 discriminator 1
 669 002f 488B45E8 		movq	-24(%rbp), %rax
 670 0033 4889C7   		movq	%rax, %rdi
 671              	.LEHB24:
 672 0036 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 672      00
 673              	.LEHE24:
 674              	.LBE9:
 675 003b B8000000 		movl	$0, %eax
 675      00
 676 0040 85C0     		testl	%eax, %eax
 677 0042 7428     		je	.L43
 678 0044 488B45E8 		movq	-24(%rbp), %rax
 679 0048 4889C7   		movq	%rax, %rdi
 680 004b E8000000 		call	_ZdlPv@PLT
 680      00
 681 0050 EB1A     		jmp	.L43
 682              	.L42:
 683 0052 4889C3   		movq	%rax, %rbx
 684              	.LBB10:
 685              		.loc 3 12 0
 686 0055 488B45E8 		movq	-24(%rbp), %rax
 687 0059 4889C7   		movq	%rax, %rdi
 688 005c E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 688      00
 689 0061 4889D8   		movq	%rbx, %rax
 690 0064 4889C7   		movq	%rax, %rdi
 691              	.LEHB25:
 692 0067 E8000000 		call	_Unwind_Resume@PLT
 692      00
 693              	.LEHE25:
 694              	.L43:
 695              	.LBE10:
 696 006c 4883C418 		addq	$24, %rsp
 697 0070 5B       		popq	%rbx
 698 0071 5D       		popq	%rbp
 699              		.cfi_def_cfa 7, 8
 700 0072 C3       		ret
 701              		.cfi_endproc
 702              	.LFE1276:
 703              		.section	.gcc_except_table
 704              	.LLSDA1276:
 705 0087 FF       		.byte	0xff
 706 0088 FF       		.byte	0xff
 707 0089 01       		.byte	0x1
 708 008a 0C       		.uleb128 .LLSDACSE1276-.LLSDACSB1276
 709              	.LLSDACSB1276:
 710 008b 2A       		.uleb128 .LEHB23-.LFB1276
 711 008c 05       		.uleb128 .LEHE23-.LEHB23
 712 008d 52       		.uleb128 .L42-.LFB1276
 713 008e 00       		.uleb128 0
 714 008f 36       		.uleb128 .LEHB24-.LFB1276
 715 0090 05       		.uleb128 .LEHE24-.LEHB24
 716 0091 00       		.uleb128 0
 717 0092 00       		.uleb128 0
 718 0093 67       		.uleb128 .LEHB25-.LFB1276
 719 0094 05       		.uleb128 .LEHE25-.LEHB25
 720 0095 00       		.uleb128 0
 721 0096 00       		.uleb128 0
 722              	.LLSDACSE1276:
 723              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 725              		.weak	_ZN8UnitTest20DeferredTestReporterD1Ev
 726              		.set	_ZN8UnitTest20DeferredTestReporterD1Ev,_ZN8UnitTest20DeferredTestReporterD2Ev
 727              		.section	.text._ZN8UnitTest20DeferredTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 728              		.align 2
 729              		.weak	_ZN8UnitTest20DeferredTestReporterD0Ev
 731              	_ZN8UnitTest20DeferredTestReporterD0Ev:
 732              	.LFB1278:
 733              		.loc 3 12 0 is_stmt 1
 734              		.cfi_startproc
 735 0000 55       		pushq	%rbp
 736              		.cfi_def_cfa_offset 16
 737              		.cfi_offset 6, -16
 738 0001 4889E5   		movq	%rsp, %rbp
 739              		.cfi_def_cfa_register 6
 740 0004 4883EC10 		subq	$16, %rsp
 741 0008 48897DF8 		movq	%rdi, -8(%rbp)
 742              		.loc 3 12 0
 743 000c 488B45F8 		movq	-8(%rbp), %rax
 744 0010 4889C7   		movq	%rax, %rdi
 745 0013 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD1Ev@PLT
 745      00
 746 0018 488B45F8 		movq	-8(%rbp), %rax
 747 001c 4889C7   		movq	%rax, %rdi
 748 001f E8000000 		call	_ZdlPv@PLT
 748      00
 749 0024 C9       		leave
 750              		.cfi_def_cfa 7, 8
 751 0025 C3       		ret
 752              		.cfi_endproc
 753              	.LFE1278:
 755              		.text
 756              		.align 2
 757              		.globl	_ZN8UnitTest15XmlTestReporterC2ERSo
 759              	_ZN8UnitTest15XmlTestReporterC2ERSo:
 760              	.LFB1279:
  39:XmlTestReporter.cpp **** 
  40:XmlTestReporter.cpp **** }
  41:XmlTestReporter.cpp **** 
  42:XmlTestReporter.cpp **** namespace UnitTest {
  43:XmlTestReporter.cpp **** 
  44:XmlTestReporter.cpp **** XmlTestReporter::XmlTestReporter(ostream& ostream)
 761              		.loc 1 44 0
 762              		.cfi_startproc
 763 03e8 55       		pushq	%rbp
 764              		.cfi_def_cfa_offset 16
 765              		.cfi_offset 6, -16
 766 03e9 4889E5   		movq	%rsp, %rbp
 767              		.cfi_def_cfa_register 6
 768 03ec 4883EC10 		subq	$16, %rsp
 769 03f0 48897DF8 		movq	%rdi, -8(%rbp)
 770 03f4 488975F0 		movq	%rsi, -16(%rbp)
 771              	.LBB11:
  45:XmlTestReporter.cpp ****     : m_ostream(ostream)
 772              		.loc 1 45 0
 773 03f8 488B45F8 		movq	-8(%rbp), %rax
 774 03fc 4889C7   		movq	%rax, %rdi
 775 03ff E8000000 		call	_ZN8UnitTest20DeferredTestReporterC2Ev@PLT
 775      00
 776 0404 488B45F8 		movq	-8(%rbp), %rax
 777 0408 488B1500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rdx
 777      000000
 778 040f 488D5210 		leaq	16(%rdx), %rdx
 779 0413 488910   		movq	%rdx, (%rax)
 780 0416 488B45F8 		movq	-8(%rbp), %rax
 781 041a 488B55F0 		movq	-16(%rbp), %rdx
 782 041e 48895020 		movq	%rdx, 32(%rax)
 783              	.LBE11:
  46:XmlTestReporter.cpp **** {
  47:XmlTestReporter.cpp **** }
 784              		.loc 1 47 0
 785 0422 C9       		leave
 786              		.cfi_def_cfa 7, 8
 787 0423 C3       		ret
 788              		.cfi_endproc
 789              	.LFE1279:
 791              		.globl	_ZN8UnitTest15XmlTestReporterC1ERSo
 792              		.set	_ZN8UnitTest15XmlTestReporterC1ERSo,_ZN8UnitTest15XmlTestReporterC2ERSo
 793              		.align 2
 794              		.globl	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 796              	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif:
 797              	.LFB1281:
  48:XmlTestReporter.cpp **** 
  49:XmlTestReporter.cpp **** void XmlTestReporter::ReportSummary(int totalTestCount, int failedTestCount,
  50:XmlTestReporter.cpp ****                                     int failureCount, float secondsElapsed)
  51:XmlTestReporter.cpp **** {
 798              		.loc 1 51 0
 799              		.cfi_startproc
 800 0424 55       		pushq	%rbp
 801              		.cfi_def_cfa_offset 16
 802              		.cfi_offset 6, -16
 803 0425 4889E5   		movq	%rsp, %rbp
 804              		.cfi_def_cfa_register 6
 805 0428 4883EC40 		subq	$64, %rsp
 806 042c 48897DD8 		movq	%rdi, -40(%rbp)
 807 0430 8975D4   		movl	%esi, -44(%rbp)
 808 0433 8955D0   		movl	%edx, -48(%rbp)
 809 0436 894DCC   		movl	%ecx, -52(%rbp)
 810 0439 F30F1145 		movss	%xmm0, -56(%rbp)
 810      C8
 811              	.LBB12:
  52:XmlTestReporter.cpp ****     AddXmlElement(m_ostream, NULL);
 812              		.loc 1 52 0
 813 043e 488B45D8 		movq	-40(%rbp), %rax
 814 0442 488B4820 		movq	32(%rax), %rcx
 815 0446 488B45D8 		movq	-40(%rbp), %rax
 816 044a BA000000 		movl	$0, %edx
 816      00
 817 044f 4889CE   		movq	%rcx, %rsi
 818 0452 4889C7   		movq	%rax, %rdi
 819 0455 E8000000 		call	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc@PLT
 819      00
  53:XmlTestReporter.cpp **** 
  54:XmlTestReporter.cpp ****     BeginResults(m_ostream, totalTestCount, failedTestCount, failureCount, secondsElapsed);
 820              		.loc 1 54 0
 821 045a 488B45D8 		movq	-40(%rbp), %rax
 822 045e 488B7020 		movq	32(%rax), %rsi
 823 0462 8B45C8   		movl	-56(%rbp), %eax
 824 0465 448B45CC 		movl	-52(%rbp), %r8d
 825 0469 8B4DD0   		movl	-48(%rbp), %ecx
 826 046c 8B55D4   		movl	-44(%rbp), %edx
 827 046f 488B7DD8 		movq	-40(%rbp), %rdi
 828 0473 8945C4   		movl	%eax, -60(%rbp)
 829 0476 F30F1045 		movss	-60(%rbp), %xmm0
 829      C4
 830 047b E8000000 		call	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif@PLT
 830      00
  55:XmlTestReporter.cpp **** 
  56:XmlTestReporter.cpp ****     DeferredTestResultList const& results = GetResults();
 831              		.loc 1 56 0
 832 0480 488B45D8 		movq	-40(%rbp), %rax
 833 0484 4889C7   		movq	%rax, %rdi
 834 0487 E8000000 		call	_ZN8UnitTest20DeferredTestReporter10GetResultsEv@PLT
 834      00
 835 048c 488945F8 		movq	%rax, -8(%rbp)
 836              	.LBB13:
  57:XmlTestReporter.cpp ****     for (DeferredTestResultList::const_iterator i = results.begin(); i != results.end(); ++i)
 837              		.loc 1 57 0
 838 0490 488B45F8 		movq	-8(%rbp), %rax
 839 0494 4889C7   		movq	%rax, %rdi
 840 0497 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv@PLT
 840      00
 841 049c 488945E0 		movq	%rax, -32(%rbp)
 842 04a0 E9920000 		jmp	.L48
 842      00
 843              	.L50:
  58:XmlTestReporter.cpp ****     {
  59:XmlTestReporter.cpp ****         BeginTest(m_ostream, *i);
 844              		.loc 1 59 0
 845 04a5 488D45E0 		leaq	-32(%rbp), %rax
 846 04a9 4889C7   		movq	%rax, %rdi
 847 04ac E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 847      00
 848 04b1 4889C2   		movq	%rax, %rdx
 849 04b4 488B45D8 		movq	-40(%rbp), %rax
 850 04b8 488B4820 		movq	32(%rax), %rcx
 851 04bc 488B45D8 		movq	-40(%rbp), %rax
 852 04c0 4889CE   		movq	%rcx, %rsi
 853 04c3 4889C7   		movq	%rax, %rdi
 854 04c6 E8000000 		call	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE@PLT
 854      00
  60:XmlTestReporter.cpp **** 
  61:XmlTestReporter.cpp ****         if (i->failed)
 855              		.loc 1 61 0
 856 04cb 488D45E0 		leaq	-32(%rbp), %rax
 857 04cf 4889C7   		movq	%rax, %rdi
 858 04d2 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
 858      00
 859 04d7 0FB64034 		movzbl	52(%rax), %eax
 860 04db 84C0     		testb	%al, %al
 861 04dd 7426     		je	.L49
  62:XmlTestReporter.cpp ****             AddFailure(m_ostream, *i);
 862              		.loc 1 62 0
 863 04df 488D45E0 		leaq	-32(%rbp), %rax
 864 04e3 4889C7   		movq	%rax, %rdi
 865 04e6 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 865      00
 866 04eb 4889C2   		movq	%rax, %rdx
 867 04ee 488B45D8 		movq	-40(%rbp), %rax
 868 04f2 488B4820 		movq	32(%rax), %rcx
 869 04f6 488B45D8 		movq	-40(%rbp), %rax
 870 04fa 4889CE   		movq	%rcx, %rsi
 871 04fd 4889C7   		movq	%rax, %rdi
 872 0500 E8000000 		call	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE@PLT
 872      00
 873              	.L49:
  63:XmlTestReporter.cpp **** 
  64:XmlTestReporter.cpp ****         EndTest(m_ostream, *i);
 874              		.loc 1 64 0
 875 0505 488D45E0 		leaq	-32(%rbp), %rax
 876 0509 4889C7   		movq	%rax, %rdi
 877 050c E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 877      00
 878 0511 4889C2   		movq	%rax, %rdx
 879 0514 488B45D8 		movq	-40(%rbp), %rax
 880 0518 488B4820 		movq	32(%rax), %rcx
 881 051c 488B45D8 		movq	-40(%rbp), %rax
 882 0520 4889CE   		movq	%rcx, %rsi
 883 0523 4889C7   		movq	%rax, %rdi
 884 0526 E8000000 		call	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE@PLT
 884      00
  57:XmlTestReporter.cpp ****     {
 885              		.loc 1 57 0
 886 052b 488D45E0 		leaq	-32(%rbp), %rax
 887 052f 4889C7   		movq	%rax, %rdi
 888 0532 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv@
 888      00
 889              	.L48:
  57:XmlTestReporter.cpp ****     {
 890              		.loc 1 57 0 is_stmt 0 discriminator 1
 891 0537 488B45F8 		movq	-8(%rbp), %rax
 892 053b 4889C7   		movq	%rax, %rdi
 893 053e E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 893      00
 894 0543 488945F0 		movq	%rax, -16(%rbp)
 895 0547 488D55F0 		leaq	-16(%rbp), %rdx
 896 054b 488D45E0 		leaq	-32(%rbp), %rax
 897 054f 4889D6   		movq	%rdx, %rsi
 898 0552 4889C7   		movq	%rax, %rdi
 899 0555 E8000000 		call	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iter
 899      00
 900 055a 84C0     		testb	%al, %al
 901 055c 0F8543FF 		jne	.L50
 901      FFFF
 902              	.LBE13:
  65:XmlTestReporter.cpp ****     }
  66:XmlTestReporter.cpp **** 
  67:XmlTestReporter.cpp ****     EndResults(m_ostream);
 903              		.loc 1 67 0 is_stmt 1
 904 0562 488B45D8 		movq	-40(%rbp), %rax
 905 0566 488B5020 		movq	32(%rax), %rdx
 906 056a 488B45D8 		movq	-40(%rbp), %rax
 907 056e 4889D6   		movq	%rdx, %rsi
 908 0571 4889C7   		movq	%rax, %rdi
 909 0574 E8000000 		call	_ZN8UnitTest15XmlTestReporter10EndResultsERSo@PLT
 909      00
 910              	.LBE12:
  68:XmlTestReporter.cpp **** }
 911              		.loc 1 68 0
 912 0579 C9       		leave
 913              		.cfi_def_cfa 7, 8
 914 057a C3       		ret
 915              		.cfi_endproc
 916              	.LFE1281:
 918              		.section	.rodata
 919              	.LC7:
 920 0025 3C3F786D 		.string	"<?xml version=\"1.0\""
 920      6C207665 
 920      7273696F 
 920      6E3D2231 
 920      2E302200 
 921              	.LC8:
 922 0039 20656E63 		.string	" encoding=\""
 922      6F64696E 
 922      673D2200 
 923              	.LC9:
 924 0045 2200     		.string	"\""
 925              	.LC10:
 926 0047 3F3E00   		.string	"?>"
 927              		.text
 928 057b 90       		.align 2
 929              		.globl	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
 931              	_ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc:
 932              	.LFB1282:
  69:XmlTestReporter.cpp **** 
  70:XmlTestReporter.cpp **** void XmlTestReporter::AddXmlElement(ostream& os, char const* encoding)
  71:XmlTestReporter.cpp **** {
 933              		.loc 1 71 0
 934              		.cfi_startproc
 935 057c 55       		pushq	%rbp
 936              		.cfi_def_cfa_offset 16
 937              		.cfi_offset 6, -16
 938 057d 4889E5   		movq	%rsp, %rbp
 939              		.cfi_def_cfa_register 6
 940 0580 4883EC20 		subq	$32, %rsp
 941 0584 48897DF8 		movq	%rdi, -8(%rbp)
 942 0588 488975F0 		movq	%rsi, -16(%rbp)
 943 058c 488955E8 		movq	%rdx, -24(%rbp)
  72:XmlTestReporter.cpp ****     os << "<?xml version=\"1.0\"";
 944              		.loc 1 72 0
 945 0590 488B45F0 		movq	-16(%rbp), %rax
 946 0594 488D3500 		leaq	.LC7(%rip), %rsi
 946      000000
 947 059b 4889C7   		movq	%rax, %rdi
 948 059e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 948      00
  73:XmlTestReporter.cpp **** 
  74:XmlTestReporter.cpp ****     if (encoding != NULL)
 949              		.loc 1 74 0
 950 05a3 48837DE8 		cmpq	$0, -24(%rbp)
 950      00
 951 05a8 7431     		je	.L52
  75:XmlTestReporter.cpp ****         os << " encoding=\"" << encoding << "\"";
 952              		.loc 1 75 0
 953 05aa 488B45F0 		movq	-16(%rbp), %rax
 954 05ae 488D3500 		leaq	.LC8(%rip), %rsi
 954      000000
 955 05b5 4889C7   		movq	%rax, %rdi
 956 05b8 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 956      00
 957 05bd 488B55E8 		movq	-24(%rbp), %rdx
 958 05c1 4889D6   		movq	%rdx, %rsi
 959 05c4 4889C7   		movq	%rax, %rdi
 960 05c7 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 960      00
 961 05cc 488D3500 		leaq	.LC9(%rip), %rsi
 961      000000
 962 05d3 4889C7   		movq	%rax, %rdi
 963 05d6 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 963      00
 964              	.L52:
  76:XmlTestReporter.cpp **** 
  77:XmlTestReporter.cpp ****     os << "?>";
 965              		.loc 1 77 0
 966 05db 488B45F0 		movq	-16(%rbp), %rax
 967 05df 488D3500 		leaq	.LC10(%rip), %rsi
 967      000000
 968 05e6 4889C7   		movq	%rax, %rdi
 969 05e9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 969      00
  78:XmlTestReporter.cpp **** }
 970              		.loc 1 78 0
 971 05ee C9       		leave
 972              		.cfi_def_cfa 7, 8
 973 05ef C3       		ret
 974              		.cfi_endproc
 975              	.LFE1282:
 977              		.section	.rodata
 978              	.LC11:
 979 004a 3C756E69 		.string	"<unittest-results"
 979      74746573 
 979      742D7265 
 979      73756C74 
 979      7300
 980              	.LC12:
 981 005c 20746573 		.string	" tests=\""
 981      74733D22 
 981      00
 982              	.LC13:
 983 0065 20666169 		.string	" failedtests=\""
 983      6C656474 
 983      65737473 
 983      3D2200
 984              	.LC14:
 985 0074 20666169 		.string	" failures=\""
 985      6C757265 
 985      733D2200 
 986              	.LC15:
 987 0080 2074696D 		.string	" time=\""
 987      653D2200 
 988              	.LC16:
 989 0088 3E00     		.string	">"
 990              		.text
 991              		.align 2
 992              		.globl	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
 994              	_ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif:
 995              	.LFB1283:
  79:XmlTestReporter.cpp **** 
  80:XmlTestReporter.cpp **** void XmlTestReporter::BeginResults(std::ostream& os, int totalTestCount, int failedTestCount, 
  81:XmlTestReporter.cpp ****                                    int failureCount, float secondsElapsed)
  82:XmlTestReporter.cpp **** {
 996              		.loc 1 82 0
 997              		.cfi_startproc
 998 05f0 55       		pushq	%rbp
 999              		.cfi_def_cfa_offset 16
 1000              		.cfi_offset 6, -16
 1001 05f1 4889E5   		movq	%rsp, %rbp
 1002              		.cfi_def_cfa_register 6
 1003 05f4 4883EC30 		subq	$48, %rsp
 1004 05f8 48897DF8 		movq	%rdi, -8(%rbp)
 1005 05fc 488975F0 		movq	%rsi, -16(%rbp)
 1006 0600 8955EC   		movl	%edx, -20(%rbp)
 1007 0603 894DE8   		movl	%ecx, -24(%rbp)
 1008 0606 448945E4 		movl	%r8d, -28(%rbp)
 1009 060a F30F1145 		movss	%xmm0, -32(%rbp)
 1009      E0
  83:XmlTestReporter.cpp ****    os << "<unittest-results"
 1010              		.loc 1 83 0
 1011 060f 488B45F0 		movq	-16(%rbp), %rax
 1012 0613 488D3500 		leaq	.LC11(%rip), %rsi
 1012      000000
 1013 061a 4889C7   		movq	%rax, %rdi
 1014 061d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1014      00
  84:XmlTestReporter.cpp ****        << " tests=\"" << totalTestCount << "\"" 
 1015              		.loc 1 84 0
 1016 0622 488D3500 		leaq	.LC12(%rip), %rsi
 1016      000000
 1017 0629 4889C7   		movq	%rax, %rdi
 1018 062c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1018      00
 1019 0631 8B55EC   		movl	-20(%rbp), %edx
 1020 0634 89D6     		movl	%edx, %esi
 1021 0636 4889C7   		movq	%rax, %rdi
 1022 0639 E8000000 		call	_ZNSolsEi@PLT
 1022      00
 1023 063e 488D3500 		leaq	.LC9(%rip), %rsi
 1023      000000
 1024 0645 4889C7   		movq	%rax, %rdi
 1025 0648 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1025      00
  85:XmlTestReporter.cpp ****        << " failedtests=\"" << failedTestCount << "\"" 
 1026              		.loc 1 85 0
 1027 064d 488D3500 		leaq	.LC13(%rip), %rsi
 1027      000000
 1028 0654 4889C7   		movq	%rax, %rdi
 1029 0657 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1029      00
 1030 065c 8B55E8   		movl	-24(%rbp), %edx
 1031 065f 89D6     		movl	%edx, %esi
 1032 0661 4889C7   		movq	%rax, %rdi
 1033 0664 E8000000 		call	_ZNSolsEi@PLT
 1033      00
 1034 0669 488D3500 		leaq	.LC9(%rip), %rsi
 1034      000000
 1035 0670 4889C7   		movq	%rax, %rdi
 1036 0673 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1036      00
  86:XmlTestReporter.cpp ****        << " failures=\"" << failureCount << "\"" 
 1037              		.loc 1 86 0
 1038 0678 488D3500 		leaq	.LC14(%rip), %rsi
 1038      000000
 1039 067f 4889C7   		movq	%rax, %rdi
 1040 0682 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1040      00
 1041 0687 8B55E4   		movl	-28(%rbp), %edx
 1042 068a 89D6     		movl	%edx, %esi
 1043 068c 4889C7   		movq	%rax, %rdi
 1044 068f E8000000 		call	_ZNSolsEi@PLT
 1044      00
 1045 0694 488D3500 		leaq	.LC9(%rip), %rsi
 1045      000000
 1046 069b 4889C7   		movq	%rax, %rdi
 1047 069e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1047      00
  87:XmlTestReporter.cpp ****        << " time=\"" << secondsElapsed << "\""
 1048              		.loc 1 87 0
 1049 06a3 488D3500 		leaq	.LC15(%rip), %rsi
 1049      000000
 1050 06aa 4889C7   		movq	%rax, %rdi
 1051 06ad E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1051      00
 1052 06b2 4889C2   		movq	%rax, %rdx
 1053 06b5 8B45E0   		movl	-32(%rbp), %eax
 1054 06b8 8945DC   		movl	%eax, -36(%rbp)
 1055 06bb F30F1045 		movss	-36(%rbp), %xmm0
 1055      DC
 1056 06c0 4889D7   		movq	%rdx, %rdi
 1057 06c3 E8000000 		call	_ZNSolsEf@PLT
 1057      00
 1058 06c8 488D3500 		leaq	.LC9(%rip), %rsi
 1058      000000
 1059 06cf 4889C7   		movq	%rax, %rdi
 1060 06d2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1060      00
  88:XmlTestReporter.cpp ****        << ">";
 1061              		.loc 1 88 0
 1062 06d7 488D3500 		leaq	.LC16(%rip), %rsi
 1062      000000
 1063 06de 4889C7   		movq	%rax, %rdi
 1064 06e1 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1064      00
  89:XmlTestReporter.cpp **** }
 1065              		.loc 1 89 0
 1066 06e6 C9       		leave
 1067              		.cfi_def_cfa 7, 8
 1068 06e7 C3       		ret
 1069              		.cfi_endproc
 1070              	.LFE1283:
 1072              		.section	.rodata
 1073              	.LC17:
 1074 008a 3C2F756E 		.string	"</unittest-results>"
 1074      69747465 
 1074      73742D72 
 1074      6573756C 
 1074      74733E00 
 1075              		.text
 1076              		.align 2
 1077              		.globl	_ZN8UnitTest15XmlTestReporter10EndResultsERSo
 1079              	_ZN8UnitTest15XmlTestReporter10EndResultsERSo:
 1080              	.LFB1284:
  90:XmlTestReporter.cpp **** 
  91:XmlTestReporter.cpp **** void XmlTestReporter::EndResults(std::ostream& os)
  92:XmlTestReporter.cpp **** {
 1081              		.loc 1 92 0
 1082              		.cfi_startproc
 1083 06e8 55       		pushq	%rbp
 1084              		.cfi_def_cfa_offset 16
 1085              		.cfi_offset 6, -16
 1086 06e9 4889E5   		movq	%rsp, %rbp
 1087              		.cfi_def_cfa_register 6
 1088 06ec 4883EC10 		subq	$16, %rsp
 1089 06f0 48897DF8 		movq	%rdi, -8(%rbp)
 1090 06f4 488975F0 		movq	%rsi, -16(%rbp)
  93:XmlTestReporter.cpp ****     os << "</unittest-results>";
 1091              		.loc 1 93 0
 1092 06f8 488B45F0 		movq	-16(%rbp), %rax
 1093 06fc 488D3500 		leaq	.LC17(%rip), %rsi
 1093      000000
 1094 0703 4889C7   		movq	%rax, %rdi
 1095 0706 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1095      00
  94:XmlTestReporter.cpp **** }
 1096              		.loc 1 94 0
 1097 070b C9       		leave
 1098              		.cfi_def_cfa 7, 8
 1099 070c C3       		ret
 1100              		.cfi_endproc
 1101              	.LFE1284:
 1103              		.section	.rodata
 1104              	.LC18:
 1105 009e 3C746573 		.string	"<test"
 1105      7400
 1106              	.LC19:
 1107 00a4 20737569 		.string	" suite=\""
 1107      74653D22 
 1107      00
 1108              	.LC20:
 1109 00ad 206E616D 		.string	" name=\""
 1109      653D2200 
 1110              		.text
 1111 070d 90       		.align 2
 1112              		.globl	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
 1114              	_ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE:
 1115              	.LFB1285:
  95:XmlTestReporter.cpp **** 
  96:XmlTestReporter.cpp **** void XmlTestReporter::BeginTest(std::ostream& os, DeferredTestResult const& result)
  97:XmlTestReporter.cpp **** {
 1116              		.loc 1 97 0
 1117              		.cfi_startproc
 1118 070e 55       		pushq	%rbp
 1119              		.cfi_def_cfa_offset 16
 1120              		.cfi_offset 6, -16
 1121 070f 4889E5   		movq	%rsp, %rbp
 1122              		.cfi_def_cfa_register 6
 1123 0712 4155     		pushq	%r13
 1124 0714 4154     		pushq	%r12
 1125 0716 53       		pushq	%rbx
 1126 0717 4883EC28 		subq	$40, %rsp
 1127              		.cfi_offset 13, -24
 1128              		.cfi_offset 12, -32
 1129              		.cfi_offset 3, -40
 1130 071b 48897DD8 		movq	%rdi, -40(%rbp)
 1131 071f 488975D0 		movq	%rsi, -48(%rbp)
 1132 0723 488955C8 		movq	%rdx, -56(%rbp)
  98:XmlTestReporter.cpp ****     os << "<test"
  99:XmlTestReporter.cpp ****         << " suite=\"" << result.suiteName << "\"" 
 100:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 101:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1133              		.loc 1 101 0
 1134 0727 488B45C8 		movq	-56(%rbp), %rax
 1135 072b 8B5830   		movl	48(%rax), %ebx
 100:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1136              		.loc 1 100 0
 1137 072e 488B45C8 		movq	-56(%rbp), %rax
 1138 0732 4C8D6808 		leaq	8(%rax), %r13
  99:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 1139              		.loc 1 99 0
 1140 0736 4C8B65C8 		movq	-56(%rbp), %r12
  98:XmlTestReporter.cpp ****     os << "<test"
 1141              		.loc 1 98 0
 1142 073a 488B45D0 		movq	-48(%rbp), %rax
 1143 073e 488D3500 		leaq	.LC18(%rip), %rsi
 1143      000000
 1144 0745 4889C7   		movq	%rax, %rdi
 1145 0748 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1145      00
  99:XmlTestReporter.cpp ****         << " name=\"" << result.testName << "\""
 1146              		.loc 1 99 0
 1147 074d 488D3500 		leaq	.LC19(%rip), %rsi
 1147      000000
 1148 0754 4889C7   		movq	%rax, %rdi
 1149 0757 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1149      00
 1150 075c 4C89E6   		movq	%r12, %rsi
 1151 075f 4889C7   		movq	%rax, %rdi
 1152 0762 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 1152      00
 1153 0767 488D3500 		leaq	.LC9(%rip), %rsi
 1153      000000
 1154 076e 4889C7   		movq	%rax, %rdi
 1155 0771 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1155      00
 100:XmlTestReporter.cpp ****         << " time=\"" << result.timeElapsed << "\"";
 1156              		.loc 1 100 0
 1157 0776 488D3500 		leaq	.LC20(%rip), %rsi
 1157      000000
 1158 077d 4889C7   		movq	%rax, %rdi
 1159 0780 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1159      00
 1160 0785 4C89EE   		movq	%r13, %rsi
 1161 0788 4889C7   		movq	%rax, %rdi
 1162 078b E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 1162      00
 1163 0790 488D3500 		leaq	.LC9(%rip), %rsi
 1163      000000
 1164 0797 4889C7   		movq	%rax, %rdi
 1165 079a E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1165      00
 1166              		.loc 1 101 0
 1167 079f 488D3500 		leaq	.LC15(%rip), %rsi
 1167      000000
 1168 07a6 4889C7   		movq	%rax, %rdi
 1169 07a9 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1169      00
 1170 07ae 895DC4   		movl	%ebx, -60(%rbp)
 1171 07b1 F30F1045 		movss	-60(%rbp), %xmm0
 1171      C4
 1172 07b6 4889C7   		movq	%rax, %rdi
 1173 07b9 E8000000 		call	_ZNSolsEf@PLT
 1173      00
 1174 07be 488D3500 		leaq	.LC9(%rip), %rsi
 1174      000000
 1175 07c5 4889C7   		movq	%rax, %rdi
 1176 07c8 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1176      00
 102:XmlTestReporter.cpp **** }
 1177              		.loc 1 102 0
 1178 07cd 4883C428 		addq	$40, %rsp
 1179 07d1 5B       		popq	%rbx
 1180 07d2 415C     		popq	%r12
 1181 07d4 415D     		popq	%r13
 1182 07d6 5D       		popq	%rbp
 1183              		.cfi_def_cfa 7, 8
 1184 07d7 C3       		ret
 1185              		.cfi_endproc
 1186              	.LFE1285:
 1188              		.section	.rodata
 1189              	.LC21:
 1190 00b5 3C2F7465 		.string	"</test>"
 1190      73743E00 
 1191              	.LC22:
 1192 00bd 2F3E00   		.string	"/>"
 1193              		.text
 1194              		.align 2
 1195              		.globl	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
 1197              	_ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE:
 1198              	.LFB1286:
 103:XmlTestReporter.cpp **** 
 104:XmlTestReporter.cpp **** void XmlTestReporter::EndTest(std::ostream& os, DeferredTestResult const& result)
 105:XmlTestReporter.cpp **** {
 1199              		.loc 1 105 0
 1200              		.cfi_startproc
 1201 07d8 55       		pushq	%rbp
 1202              		.cfi_def_cfa_offset 16
 1203              		.cfi_offset 6, -16
 1204 07d9 4889E5   		movq	%rsp, %rbp
 1205              		.cfi_def_cfa_register 6
 1206 07dc 4883EC20 		subq	$32, %rsp
 1207 07e0 48897DF8 		movq	%rdi, -8(%rbp)
 1208 07e4 488975F0 		movq	%rsi, -16(%rbp)
 1209 07e8 488955E8 		movq	%rdx, -24(%rbp)
 106:XmlTestReporter.cpp ****     if (result.failed)
 1210              		.loc 1 106 0
 1211 07ec 488B45E8 		movq	-24(%rbp), %rax
 1212 07f0 0FB64034 		movzbl	52(%rax), %eax
 1213 07f4 84C0     		testb	%al, %al
 1214 07f6 7415     		je	.L57
 107:XmlTestReporter.cpp ****         os << "</test>";
 1215              		.loc 1 107 0
 1216 07f8 488B45F0 		movq	-16(%rbp), %rax
 1217 07fc 488D3500 		leaq	.LC21(%rip), %rsi
 1217      000000
 1218 0803 4889C7   		movq	%rax, %rdi
 1219 0806 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1219      00
 1220 080b EB13     		jmp	.L56
 1221              	.L57:
 108:XmlTestReporter.cpp ****     else
 109:XmlTestReporter.cpp ****         os << "/>";
 1222              		.loc 1 109 0
 1223 080d 488B45F0 		movq	-16(%rbp), %rax
 1224 0811 488D3500 		leaq	.LC22(%rip), %rsi
 1224      000000
 1225 0818 4889C7   		movq	%rax, %rdi
 1226 081b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1226      00
 1227              	.L56:
 110:XmlTestReporter.cpp **** }
 1228              		.loc 1 110 0
 1229 0820 C9       		leave
 1230              		.cfi_def_cfa 7, 8
 1231 0821 C3       		ret
 1232              		.cfi_endproc
 1233              	.LFE1286:
 1235              		.section	.rodata
 1236              	.LC23:
 1237 00c0 3C666169 		.string	"<failure"
 1237      6C757265 
 1237      00
 1238              	.LC24:
 1239 00c9 206D6573 		.string	" message=\""
 1239      73616765 
 1239      3D2200
 1240              		.text
 1241              		.align 2
 1242              		.globl	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
 1244              	_ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE:
 1245              	.LFB1287:
 111:XmlTestReporter.cpp **** 
 112:XmlTestReporter.cpp **** void XmlTestReporter::AddFailure(std::ostream& os, DeferredTestResult const& result)
 113:XmlTestReporter.cpp **** {
 1246              		.loc 1 113 0
 1247              		.cfi_startproc
 1248              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1249              		.cfi_lsda 0x1b,.LLSDA1287
 1250 0822 55       		pushq	%rbp
 1251              		.cfi_def_cfa_offset 16
 1252              		.cfi_offset 6, -16
 1253 0823 4889E5   		movq	%rsp, %rbp
 1254              		.cfi_def_cfa_register 6
 1255 0826 53       		pushq	%rbx
 1256 0827 4883EC58 		subq	$88, %rsp
 1257              		.cfi_offset 3, -24
 1258 082b 48897DB8 		movq	%rdi, -72(%rbp)
 1259 082f 488975B0 		movq	%rsi, -80(%rbp)
 1260 0833 488955A8 		movq	%rdx, -88(%rbp)
 1261              	.LBB14:
 114:XmlTestReporter.cpp ****     os << ">"; // close <test> element
 1262              		.loc 1 114 0
 1263 0837 488B45B0 		movq	-80(%rbp), %rax
 1264 083b 488D3500 		leaq	.LC16(%rip), %rsi
 1264      000000
 1265 0842 4889C7   		movq	%rax, %rdi
 1266              	.LEHB26:
 1267 0845 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1267      00
 1268              	.LBB15:
 115:XmlTestReporter.cpp **** 
 116:XmlTestReporter.cpp ****     for (DeferredTestResult::FailureVec::const_iterator it = result.failures.begin(); 
 1269              		.loc 1 116 0
 1270 084a 488B45A8 		movq	-88(%rbp), %rax
 1271 084e 4883C018 		addq	$24, %rax
 1272 0852 4889C7   		movq	%rax, %rdi
 1273 0855 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 1273      00
 1274 085a 488945C0 		movq	%rax, -64(%rbp)
 1275 085e E9B80000 		jmp	.L60
 1275      00
 1276              	.L61:
 1277              	.LBB16:
 117:XmlTestReporter.cpp ****          it != result.failures.end(); 
 118:XmlTestReporter.cpp ****          ++it)
 119:XmlTestReporter.cpp ****     {
 120:XmlTestReporter.cpp ****         string const escapedMessage = XmlEscape(it->second);
 1278              		.loc 1 120 0
 1279 0863 488D45C0 		leaq	-64(%rbp), %rax
 1280 0867 4889C7   		movq	%rax, %rdi
 1281 086a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv@PLT
 1281      00
 1282 086f 488D5008 		leaq	8(%rax), %rdx
 1283 0873 488D45D0 		leaq	-48(%rbp), %rax
 1284 0877 4889D6   		movq	%rdx, %rsi
 1285 087a 4889C7   		movq	%rax, %rdi
 1286 087d E8F3F7FF 		call	_ZN12_GLOBAL__N_19XmlEscapeERKSs
 1286      FF
 1287              	.LEHE26:
 121:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1288              		.loc 1 121 0
 1289 0882 488D45C0 		leaq	-64(%rbp), %rax
 1290 0886 4889C7   		movq	%rax, %rdi
 1291              	.LEHB27:
 1292 0889 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv@PLT
 1292      00
 1293 088e 8B10     		movl	(%rax), %edx
 1294 0890 488B45A8 		movq	-88(%rbp), %rax
 1295 0894 488D7010 		leaq	16(%rax), %rsi
 1296 0898 488D45E0 		leaq	-32(%rbp), %rax
 1297 089c 488D4DD0 		leaq	-48(%rbp), %rcx
 1298 08a0 4889C7   		movq	%rax, %rdi
 1299 08a3 E853FAFF 		call	_ZN12_GLOBAL__N_119BuildFailureMessageERKSsiS1_
 1299      FF
 1300              	.LEHE27:
 122:XmlTestReporter.cpp **** 
 123:XmlTestReporter.cpp ****         os << "<failure" << " message=\"" << message << "\"" << "/>";
 1301              		.loc 1 123 0
 1302 08a8 488B45B0 		movq	-80(%rbp), %rax
 1303 08ac 488D3500 		leaq	.LC23(%rip), %rsi
 1303      000000
 1304 08b3 4889C7   		movq	%rax, %rdi
 1305              	.LEHB28:
 1306 08b6 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1306      00
 1307 08bb 488D3500 		leaq	.LC24(%rip), %rsi
 1307      000000
 1308 08c2 4889C7   		movq	%rax, %rdi
 1309 08c5 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1309      00
 1310              		.loc 1 123 0 is_stmt 0 discriminator 1
 1311 08ca 488D55E0 		leaq	-32(%rbp), %rdx
 1312 08ce 4889D6   		movq	%rdx, %rsi
 1313 08d1 4889C7   		movq	%rax, %rdi
 1314 08d4 E8000000 		call	_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E@PLT
 1314      00
 1315 08d9 488D3500 		leaq	.LC9(%rip), %rsi
 1315      000000
 1316 08e0 4889C7   		movq	%rax, %rdi
 1317 08e3 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1317      00
 1318 08e8 488D3500 		leaq	.LC22(%rip), %rsi
 1318      000000
 1319 08ef 4889C7   		movq	%rax, %rdi
 1320 08f2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@PLT
 1320      00
 1321              	.LEHE28:
 121:XmlTestReporter.cpp ****         string const message = BuildFailureMessage(result.failureFile, it->first, escapedMessage);
 1322              		.loc 1 121 0 is_stmt 1
 1323 08f7 488D45E0 		leaq	-32(%rbp), %rax
 1324 08fb 4889C7   		movq	%rax, %rdi
 1325              	.LEHB29:
 1326 08fe E8000000 		call	_ZNSsD1Ev@PLT
 1326      00
 1327              	.LEHE29:
 124:XmlTestReporter.cpp ****     }
 1328              		.loc 1 124 0
 1329 0903 488D45D0 		leaq	-48(%rbp), %rax
 1330 0907 4889C7   		movq	%rax, %rdi
 1331              	.LEHB30:
 1332 090a E8000000 		call	_ZNSsD1Ev@PLT
 1332      00
 1333              	.LBE16:
 116:XmlTestReporter.cpp ****          it != result.failures.end(); 
 1334              		.loc 1 116 0
 1335 090f 488D45C0 		leaq	-64(%rbp), %rax
 1336 0913 4889C7   		movq	%rax, %rdi
 1337 0916 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv@PLT
 1337      00
 1338              	.L60:
 117:XmlTestReporter.cpp ****          ++it)
 1339              		.loc 1 117 0
 1340 091b 488B45A8 		movq	-88(%rbp), %rax
 1341 091f 4883C018 		addq	$24, %rax
 1342 0923 4889C7   		movq	%rax, %rdi
 1343 0926 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 1343      00
 1344 092b 488945E0 		movq	%rax, -32(%rbp)
 116:XmlTestReporter.cpp ****          it != result.failures.end(); 
 1345              		.loc 1 116 0
 1346 092f 488D55E0 		leaq	-32(%rbp), %rdx
 1347 0933 488D45C0 		leaq	-64(%rbp), %rax
 1348 0937 4889D6   		movq	%rdx, %rsi
 1349 093a 4889C7   		movq	%rax, %rdi
 1350 093d E8000000 		call	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_@PLT
 1350      00
 1351              	.LEHE30:
 1352 0942 84C0     		testb	%al, %al
 1353 0944 0F8519FF 		jne	.L61
 1353      FFFF
 1354 094a EB2B     		jmp	.L66
 1355              	.L65:
 1356 094c 4889C3   		movq	%rax, %rbx
 1357              	.LBB17:
 121:XmlTestReporter.cpp **** 
 1358              		.loc 1 121 0
 1359 094f 488D45E0 		leaq	-32(%rbp), %rax
 1360 0953 4889C7   		movq	%rax, %rdi
 1361 0956 E8000000 		call	_ZNSsD1Ev@PLT
 1361      00
 1362 095b EB03     		jmp	.L63
 1363              	.L64:
 1364 095d 4889C3   		movq	%rax, %rbx
 1365              	.L63:
 1366              		.loc 1 124 0
 1367 0960 488D45D0 		leaq	-48(%rbp), %rax
 1368 0964 4889C7   		movq	%rax, %rdi
 1369 0967 E8000000 		call	_ZNSsD1Ev@PLT
 1369      00
 1370 096c 4889D8   		movq	%rbx, %rax
 1371 096f 4889C7   		movq	%rax, %rdi
 1372              	.LEHB31:
 1373 0972 E8000000 		call	_Unwind_Resume@PLT
 1373      00
 1374              	.LEHE31:
 1375              	.L66:
 1376              	.LBE17:
 1377              	.LBE15:
 1378              	.LBE14:
 125:XmlTestReporter.cpp **** }
 1379              		.loc 1 125 0
 1380 0977 4883C458 		addq	$88, %rsp
 1381 097b 5B       		popq	%rbx
 1382 097c 5D       		popq	%rbp
 1383              		.cfi_def_cfa 7, 8
 1384 097d C3       		ret
 1385              		.cfi_endproc
 1386              	.LFE1287:
 1387              		.section	.gcc_except_table
 1388              	.LLSDA1287:
 1389 0097 FF       		.byte	0xff
 1390 0098 FF       		.byte	0xff
 1391 0099 01       		.byte	0x1
 1392 009a 1F       		.uleb128 .LLSDACSE1287-.LLSDACSB1287
 1393              	.LLSDACSB1287:
 1394 009b 23       		.uleb128 .LEHB26-.LFB1287
 1395 009c 3D       		.uleb128 .LEHE26-.LEHB26
 1396 009d 00       		.uleb128 0
 1397 009e 00       		.uleb128 0
 1398 009f 67       		.uleb128 .LEHB27-.LFB1287
 1399 00a0 1F       		.uleb128 .LEHE27-.LEHB27
 1400 00a1 BB02     		.uleb128 .L64-.LFB1287
 1401 00a3 00       		.uleb128 0
 1402 00a4 9401     		.uleb128 .LEHB28-.LFB1287
 1403 00a6 41       		.uleb128 .LEHE28-.LEHB28
 1404 00a7 AA02     		.uleb128 .L65-.LFB1287
 1405 00a9 00       		.uleb128 0
 1406 00aa DC01     		.uleb128 .LEHB29-.LFB1287
 1407 00ac 05       		.uleb128 .LEHE29-.LEHB29
 1408 00ad BB02     		.uleb128 .L64-.LFB1287
 1409 00af 00       		.uleb128 0
 1410 00b0 E801     		.uleb128 .LEHB30-.LFB1287
 1411 00b2 38       		.uleb128 .LEHE30-.LEHB30
 1412 00b3 00       		.uleb128 0
 1413 00b4 00       		.uleb128 0
 1414 00b5 D002     		.uleb128 .LEHB31-.LFB1287
 1415 00b7 05       		.uleb128 .LEHE31-.LEHB31
 1416 00b8 00       		.uleb128 0
 1417 00b9 00       		.uleb128 0
 1418              	.LLSDACSE1287:
 1419              		.text
 1421              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZNSt6vect
 1422              		.align 2
 1423              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 1425              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 1426              	.LFB1317:
 1427              		.file 4 "/usr/include/c++/4.8/bits/stl_vector.h"
   1:/usr/include/c++/4.8/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_vector.h **** 
   3:/usr/include/c++/4.8/bits/stl_vector.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_vector.h **** //
   5:/usr/include/c++/4.8/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_vector.h **** 
  11:/usr/include/c++/4.8/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_vector.h **** 
  16:/usr/include/c++/4.8/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_vector.h **** 
  20:/usr/include/c++/4.8/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_vector.h **** 
  25:/usr/include/c++/4.8/bits/stl_vector.h **** /*
  26:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  27:/usr/include/c++/4.8/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  30:/usr/include/c++/4.8/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  38:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  39:/usr/include/c++/4.8/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/4.8/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  42:/usr/include/c++/4.8/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/4.8/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_vector.h ****  */
  50:/usr/include/c++/4.8/bits/stl_vector.h **** 
  51:/usr/include/c++/4.8/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/4.8/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/4.8/bits/stl_vector.h ****  */
  55:/usr/include/c++/4.8/bits/stl_vector.h **** 
  56:/usr/include/c++/4.8/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/4.8/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/4.8/bits/stl_vector.h **** 
  59:/usr/include/c++/4.8/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/4.8/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/4.8/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/4.8/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
  65:/usr/include/c++/4.8/bits/stl_vector.h **** 
  66:/usr/include/c++/4.8/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/4.8/bits/stl_vector.h **** {
  68:/usr/include/c++/4.8/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/4.8/bits/stl_vector.h **** 
  70:/usr/include/c++/4.8/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/4.8/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/4.8/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/4.8/bits/stl_vector.h ****     {
  74:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/4.8/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/4.8/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/4.8/bits/stl_vector.h **** 
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/4.8/bits/stl_vector.h ****       {
  82:/usr/include/c++/4.8/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/4.8/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/4.8/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/4.8/bits/stl_vector.h **** 
  86:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  88:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/4.8/bits/stl_vector.h **** 
  90:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a)
  91:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  92:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/4.8/bits/stl_vector.h **** 
  94:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a)
  96:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_start(0), _M_finish(0), _M_end_of_storage(0)
  98:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 100:/usr/include/c++/4.8/bits/stl_vector.h **** 
 101:/usr/include/c++/4.8/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x)
 102:/usr/include/c++/4.8/bits/stl_vector.h **** 	{
 103:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
 107:/usr/include/c++/4.8/bits/stl_vector.h ****       };
 108:/usr/include/c++/4.8/bits/stl_vector.h ****       
 109:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 110:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/4.8/bits/stl_vector.h **** 
 112:/usr/include/c++/4.8/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/4.8/bits/stl_vector.h **** 
 116:/usr/include/c++/4.8/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/4.8/bits/stl_vector.h **** 
 120:/usr/include/c++/4.8/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/4.8/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/4.8/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/4.8/bits/stl_vector.h **** 
 124:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/4.8/bits/stl_vector.h **** 
 127:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a)
 128:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/4.8/bits/stl_vector.h **** 
 130:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 133:/usr/include/c++/4.8/bits/stl_vector.h **** 
 134:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/4.8/bits/stl_vector.h **** 
 138:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a)
 140:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/4.8/bits/stl_vector.h **** 
 142:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x)
 143:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/4.8/bits/stl_vector.h **** 
 146:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 149:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/4.8/bits/stl_vector.h **** 	else
 152:/usr/include/c++/4.8/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/4.8/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:/usr/include/c++/4.8/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/4.8/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 157:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 158:/usr/include/c++/4.8/bits/stl_vector.h **** 
 159:/usr/include/c++/4.8/bits/stl_vector.h ****       ~_Vector_base()
 160:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/4.8/bits/stl_vector.h **** 
 163:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 164:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/4.8/bits/stl_vector.h **** 
 166:/usr/include/c++/4.8/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/4.8/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 169:/usr/include/c++/4.8/bits/stl_vector.h **** 
 170:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 171:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 172:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 173:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__p)
 174:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 175:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 176:/usr/include/c++/4.8/bits/stl_vector.h **** 
 177:/usr/include/c++/4.8/bits/stl_vector.h ****     private:
 178:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 179:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 180:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 181:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 182:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 183:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 184:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 185:/usr/include/c++/4.8/bits/stl_vector.h ****     };
 186:/usr/include/c++/4.8/bits/stl_vector.h **** 
 187:/usr/include/c++/4.8/bits/stl_vector.h **** 
 188:/usr/include/c++/4.8/bits/stl_vector.h ****   /**
 189:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 190:/usr/include/c++/4.8/bits/stl_vector.h ****    *  individual elements in any order.
 191:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 192:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @ingroup sequences
 193:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 194:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 195:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 196:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 197:/usr/include/c++/4.8/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 198:/usr/include/c++/4.8/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 199:/usr/include/c++/4.8/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 200:/usr/include/c++/4.8/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 201:/usr/include/c++/4.8/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 202:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 203:/usr/include/c++/4.8/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 204:/usr/include/c++/4.8/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 205:/usr/include/c++/4.8/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 206:/usr/include/c++/4.8/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 207:/usr/include/c++/4.8/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 208:/usr/include/c++/4.8/bits/stl_vector.h ****   */
 209:/usr/include/c++/4.8/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 210:/usr/include/c++/4.8/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 211:/usr/include/c++/4.8/bits/stl_vector.h ****     {
 212:/usr/include/c++/4.8/bits/stl_vector.h ****       // Concept requirements.
 213:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 214:/usr/include/c++/4.8/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 215:/usr/include/c++/4.8/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 216:/usr/include/c++/4.8/bits/stl_vector.h ****       
 217:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 218:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 219:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 220:/usr/include/c++/4.8/bits/stl_vector.h **** 
 221:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 222:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Tp					 value_type;
 223:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 224:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 225:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 226:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 227:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 228:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 229:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator;
 230:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 231:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 232:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef size_t					 size_type;
 233:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 234:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 235:/usr/include/c++/4.8/bits/stl_vector.h **** 
 236:/usr/include/c++/4.8/bits/stl_vector.h ****     protected:
 237:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_allocate;
 238:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_deallocate;
 239:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_impl;
 240:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 241:/usr/include/c++/4.8/bits/stl_vector.h **** 
 242:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 243:/usr/include/c++/4.8/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 244:/usr/include/c++/4.8/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 245:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 246:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Default constructor creates no elements.
 247:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 248:/usr/include/c++/4.8/bits/stl_vector.h ****       vector()
 1428              		.loc 4 248 0
 1429              		.cfi_startproc
 1430 0000 55       		pushq	%rbp
 1431              		.cfi_def_cfa_offset 16
 1432              		.cfi_offset 6, -16
 1433 0001 4889E5   		movq	%rsp, %rbp
 1434              		.cfi_def_cfa_register 6
 1435 0004 4883EC10 		subq	$16, %rsp
 1436 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1437              	.LBB18:
 249:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base() { }
 1438              		.loc 4 249 0
 1439 000c 488B45F8 		movq	-8(%rbp), %rax
 1440 0010 4889C7   		movq	%rax, %rdi
 1441 0013 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev@PLT
 1441      00
 1442              	.LBE18:
 1443 0018 C9       		leave
 1444              		.cfi_def_cfa 7, 8
 1445 0019 C3       		ret
 1446              		.cfi_endproc
 1447              	.LFE1317:
 1449              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 1450              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1451              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1452              		.align 2
 1453              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 1455              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 1456              	.LFB1320:
 250:/usr/include/c++/4.8/bits/stl_vector.h **** 
 251:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 252:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 253:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 254:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 255:/usr/include/c++/4.8/bits/stl_vector.h ****       explicit
 256:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(const allocator_type& __a)
 257:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__a) { }
 258:/usr/include/c++/4.8/bits/stl_vector.h **** 
 259:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 260:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 261:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 262:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 263:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 264:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 265:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 266:/usr/include/c++/4.8/bits/stl_vector.h ****        *  constructed elements.
 267:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 268:/usr/include/c++/4.8/bits/stl_vector.h ****       explicit
 269:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 270:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__n, __a)
 271:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 272:/usr/include/c++/4.8/bits/stl_vector.h **** 
 273:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 274:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 275:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 276:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 277:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 278:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 279:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 280:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 281:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 282:/usr/include/c++/4.8/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 283:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__n, __a)
 284:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 285:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 286:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 287:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 288:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 289:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 290:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 291:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 292:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 293:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 294:/usr/include/c++/4.8/bits/stl_vector.h ****       explicit
 295:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 296:/usr/include/c++/4.8/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 297:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__n, __a)
 298:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 299:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 300:/usr/include/c++/4.8/bits/stl_vector.h **** 
 301:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 302:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 303:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 304:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 305:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 306:/usr/include/c++/4.8/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 307:/usr/include/c++/4.8/bits/stl_vector.h ****        *  but any extra memory in
 308:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 309:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 310:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(const vector& __x)
 311:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__x.size(),
 312:/usr/include/c++/4.8/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 313:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 314:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 315:/usr/include/c++/4.8/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 316:/usr/include/c++/4.8/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 317:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 318:/usr/include/c++/4.8/bits/stl_vector.h **** 
 319:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 320:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 321:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 322:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 323:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 324:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 325:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 326:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 327:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 328:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 329:/usr/include/c++/4.8/bits/stl_vector.h **** 
 330:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 331:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 332:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 333:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 334:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 335:/usr/include/c++/4.8/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 336:/usr/include/c++/4.8/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 337:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 338:/usr/include/c++/4.8/bits/stl_vector.h **** 
 339:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 340:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 341:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 342:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 343:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 344:/usr/include/c++/4.8/bits/stl_vector.h **** 	  {
 345:/usr/include/c++/4.8/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 346:/usr/include/c++/4.8/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 347:/usr/include/c++/4.8/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 348:/usr/include/c++/4.8/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 349:/usr/include/c++/4.8/bits/stl_vector.h **** 	    __rv.clear();
 350:/usr/include/c++/4.8/bits/stl_vector.h **** 	  }
 351:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 352:/usr/include/c++/4.8/bits/stl_vector.h **** 
 353:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 354:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 355:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 356:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 357:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 358:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 359:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer_list @a __l.
 360:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 361:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 362:/usr/include/c++/4.8/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 363:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 364:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 365:/usr/include/c++/4.8/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 366:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__a)
 367:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 368:/usr/include/c++/4.8/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 369:/usr/include/c++/4.8/bits/stl_vector.h **** 			    random_access_iterator_tag());
 370:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 371:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 372:/usr/include/c++/4.8/bits/stl_vector.h **** 
 373:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 374:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 375:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 376:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 377:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 378:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 379:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 380:/usr/include/c++/4.8/bits/stl_vector.h ****        *  [first,last).
 381:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 382:/usr/include/c++/4.8/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 383:/usr/include/c++/4.8/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 384:/usr/include/c++/4.8/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 385:/usr/include/c++/4.8/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 386:/usr/include/c++/4.8/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 387:/usr/include/c++/4.8/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 388:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 389:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 390:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator,
 391:/usr/include/c++/4.8/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 392:/usr/include/c++/4.8/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 393:/usr/include/c++/4.8/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 394:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Base(__a)
 395:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 396:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 397:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
 398:/usr/include/c++/4.8/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 399:/usr/include/c++/4.8/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 400:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Base(__a)
 401:/usr/include/c++/4.8/bits/stl_vector.h ****         {
 402:/usr/include/c++/4.8/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 403:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 404:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 405:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
 406:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 407:/usr/include/c++/4.8/bits/stl_vector.h **** 
 408:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 409:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 410:/usr/include/c++/4.8/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 411:/usr/include/c++/4.8/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 412:/usr/include/c++/4.8/bits/stl_vector.h ****        *  responsibility.
 413:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 414:/usr/include/c++/4.8/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 1457              		.loc 4 414 0
 1458              		.cfi_startproc
 1459              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1460              		.cfi_lsda 0x1b,.LLSDA1320
 1461 0000 55       		pushq	%rbp
 1462              		.cfi_def_cfa_offset 16
 1463              		.cfi_offset 6, -16
 1464 0001 4889E5   		movq	%rsp, %rbp
 1465              		.cfi_def_cfa_register 6
 1466 0004 53       		pushq	%rbx
 1467 0005 4883EC18 		subq	$24, %rsp
 1468              		.cfi_offset 3, -24
 1469 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1470              	.LBB19:
 415:/usr/include/c++/4.8/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 416:/usr/include/c++/4.8/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 1471              		.loc 4 416 0
 1472 000d 488B45E8 		movq	-24(%rbp), %rax
 1473 0011 4889C7   		movq	%rax, %rdi
 1474              	.LEHB32:
 1475 0014 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1475      00
 1476 0019 4889C2   		movq	%rax, %rdx
 1477 001c 488B45E8 		movq	-24(%rbp), %rax
 1478 0020 488B4808 		movq	8(%rax), %rcx
 1479 0024 488B45E8 		movq	-24(%rbp), %rax
 1480 0028 488B00   		movq	(%rax), %rax
 415:/usr/include/c++/4.8/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 1481              		.loc 4 415 0
 1482 002b 4889CE   		movq	%rcx, %rsi
 1483 002e 4889C7   		movq	%rax, %rdi
 1484 0031 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1484      00
 1485              	.LEHE32:
 1486              		.loc 4 416 0
 1487 0036 488B45E8 		movq	-24(%rbp), %rax
 1488 003a 4889C7   		movq	%rax, %rdi
 1489              	.LEHB33:
 1490 003d E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1490      00
 1491              	.LEHE33:
 1492 0042 EB1A     		jmp	.L72
 1493              	.L71:
 1494 0044 4889C3   		movq	%rax, %rbx
 1495 0047 488B45E8 		movq	-24(%rbp), %rax
 1496 004b 4889C7   		movq	%rax, %rdi
 1497 004e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 1497      00
 1498 0053 4889D8   		movq	%rbx, %rax
 1499 0056 4889C7   		movq	%rax, %rdi
 1500              	.LEHB34:
 1501 0059 E8000000 		call	_Unwind_Resume@PLT
 1501      00
 1502              	.LEHE34:
 1503              	.L72:
 1504              	.LBE19:
 1505 005e 4883C418 		addq	$24, %rsp
 1506 0062 5B       		popq	%rbx
 1507 0063 5D       		popq	%rbp
 1508              		.cfi_def_cfa 7, 8
 1509 0064 C3       		ret
 1510              		.cfi_endproc
 1511              	.LFE1320:
 1512              		.section	.gcc_except_table
 1513              	.LLSDA1320:
 1514 00ba FF       		.byte	0xff
 1515 00bb FF       		.byte	0xff
 1516 00bc 01       		.byte	0x1
 1517 00bd 0C       		.uleb128 .LLSDACSE1320-.LLSDACSB1320
 1518              	.LLSDACSB1320:
 1519 00be 14       		.uleb128 .LEHB32-.LFB1320
 1520 00bf 22       		.uleb128 .LEHE32-.LEHB32
 1521 00c0 44       		.uleb128 .L71-.LFB1320
 1522 00c1 00       		.uleb128 0
 1523 00c2 3D       		.uleb128 .LEHB33-.LFB1320
 1524 00c3 05       		.uleb128 .LEHE33-.LEHB33
 1525 00c4 00       		.uleb128 0
 1526 00c5 00       		.uleb128 0
 1527 00c6 59       		.uleb128 .LEHB34-.LFB1320
 1528 00c7 05       		.uleb128 .LEHE34-.LEHB34
 1529 00c8 00       		.uleb128 0
 1530 00c9 00       		.uleb128 0
 1531              	.LLSDACSE1320:
 1532              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 1534              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 1535              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 1536              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv,"axG",@progbits,_ZNKS
 1537              		.align 2
 1538              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
 1540              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:
 1541              	.LFB1322:
 417:/usr/include/c++/4.8/bits/stl_vector.h **** 
 418:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 419:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 420:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 421:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 422:/usr/include/c++/4.8/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 423:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 424:/usr/include/c++/4.8/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 425:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 426:/usr/include/c++/4.8/bits/stl_vector.h ****       vector&
 427:/usr/include/c++/4.8/bits/stl_vector.h ****       operator=(const vector& __x);
 428:/usr/include/c++/4.8/bits/stl_vector.h **** 
 429:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 431:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 432:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 433:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 434:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 435:/usr/include/c++/4.8/bits/stl_vector.h ****        *  if the allocators permit it).
 436:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 437:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 438:/usr/include/c++/4.8/bits/stl_vector.h ****       vector&
 439:/usr/include/c++/4.8/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 440:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 441:/usr/include/c++/4.8/bits/stl_vector.h ****         constexpr bool __move_storage =
 442:/usr/include/c++/4.8/bits/stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 443:/usr/include/c++/4.8/bits/stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 444:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_move_assign(std::move(__x),
 445:/usr/include/c++/4.8/bits/stl_vector.h ****                        integral_constant<bool, __move_storage>());
 446:/usr/include/c++/4.8/bits/stl_vector.h **** 	return *this;
 447:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 448:/usr/include/c++/4.8/bits/stl_vector.h **** 
 449:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 450:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 451:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 452:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 453:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 454:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer list @a __l.
 455:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 456:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 457:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 458:/usr/include/c++/4.8/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 459:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 460:/usr/include/c++/4.8/bits/stl_vector.h ****       vector&
 461:/usr/include/c++/4.8/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 462:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 463:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 464:/usr/include/c++/4.8/bits/stl_vector.h **** 	return *this;
 465:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 466:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 467:/usr/include/c++/4.8/bits/stl_vector.h **** 
 468:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 469:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 470:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 471:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 472:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 473:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 474:/usr/include/c++/4.8/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 475:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 476:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 477:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 478:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 479:/usr/include/c++/4.8/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 480:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 481:/usr/include/c++/4.8/bits/stl_vector.h **** 
 482:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 483:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 484:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 485:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 486:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 487:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 488:/usr/include/c++/4.8/bits/stl_vector.h ****        *  range [__first,__last).
 489:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 490:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 491:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 492:/usr/include/c++/4.8/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 493:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 494:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 495:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator,
 496:/usr/include/c++/4.8/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 497:/usr/include/c++/4.8/bits/stl_vector.h ****         void
 498:/usr/include/c++/4.8/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 499:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 500:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 501:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
 502:/usr/include/c++/4.8/bits/stl_vector.h ****         void
 503:/usr/include/c++/4.8/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 504:/usr/include/c++/4.8/bits/stl_vector.h ****         {
 505:/usr/include/c++/4.8/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 506:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 507:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 508:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
 509:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 510:/usr/include/c++/4.8/bits/stl_vector.h **** 
 511:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 512:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 513:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 514:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 515:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 516:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 517:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer list @a __l.
 518:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 519:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 520:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 521:/usr/include/c++/4.8/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 522:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 523:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 524:/usr/include/c++/4.8/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 525:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 526:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 527:/usr/include/c++/4.8/bits/stl_vector.h **** 
 528:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 529:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::get_allocator;
 530:/usr/include/c++/4.8/bits/stl_vector.h **** 
 531:/usr/include/c++/4.8/bits/stl_vector.h ****       // iterators
 532:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 533:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 534:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 535:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 536:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 537:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 538:/usr/include/c++/4.8/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 539:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 540:/usr/include/c++/4.8/bits/stl_vector.h **** 
 541:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 542:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 543:/usr/include/c++/4.8/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 544:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 545:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 546:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 547:/usr/include/c++/4.8/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 1542              		.loc 4 547 0
 1543              		.cfi_startproc
 1544 0000 55       		pushq	%rbp
 1545              		.cfi_def_cfa_offset 16
 1546              		.cfi_offset 6, -16
 1547 0001 4889E5   		movq	%rsp, %rbp
 1548              		.cfi_def_cfa_register 6
 1549 0004 4883EC20 		subq	$32, %rsp
 1550 0008 48897DE8 		movq	%rdi, -24(%rbp)
 548:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1551              		.loc 4 548 0
 1552 000c 488B45E8 		movq	-24(%rbp), %rax
 1553 0010 488B00   		movq	(%rax), %rax
 1554 0013 488945F8 		movq	%rax, -8(%rbp)
 1555 0017 488D55F8 		leaq	-8(%rbp), %rdx
 1556 001b 488D45F0 		leaq	-16(%rbp), %rax
 1557 001f 4889D6   		movq	%rdx, %rsi
 1558 0022 4889C7   		movq	%rax, %rdi
 1559 0025 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1559      00
 1560 002a 488B45F0 		movq	-16(%rbp), %rax
 1561 002e C9       		leave
 1562              		.cfi_def_cfa 7, 8
 1563 002f C3       		ret
 1564              		.cfi_endproc
 1565              	.LFE1322:
 1567              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv,"axG",@progbits,_ZNKSt6
 1568              		.align 2
 1569              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
 1571              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:
 1572              	.LFB1323:
 549:/usr/include/c++/4.8/bits/stl_vector.h **** 
 550:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 551:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 552:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 553:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 554:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 555:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 556:/usr/include/c++/4.8/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 557:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 558:/usr/include/c++/4.8/bits/stl_vector.h **** 
 559:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 560:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 561:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 562:/usr/include/c++/4.8/bits/stl_vector.h ****        *  ordinary element order.
 563:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 564:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 565:/usr/include/c++/4.8/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 1573              		.loc 4 565 0
 1574              		.cfi_startproc
 1575 0000 55       		pushq	%rbp
 1576              		.cfi_def_cfa_offset 16
 1577              		.cfi_offset 6, -16
 1578 0001 4889E5   		movq	%rsp, %rbp
 1579              		.cfi_def_cfa_register 6
 1580 0004 4883EC20 		subq	$32, %rsp
 1581 0008 48897DE8 		movq	%rdi, -24(%rbp)
 566:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1582              		.loc 4 566 0
 1583 000c 488B45E8 		movq	-24(%rbp), %rax
 1584 0010 488B4008 		movq	8(%rax), %rax
 1585 0014 488945F8 		movq	%rax, -8(%rbp)
 1586 0018 488D55F8 		leaq	-8(%rbp), %rdx
 1587 001c 488D45F0 		leaq	-16(%rbp), %rax
 1588 0020 4889D6   		movq	%rdx, %rsi
 1589 0023 4889C7   		movq	%rax, %rdi
 1590 0026 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 1590      00
 1591 002b 488B45F0 		movq	-16(%rbp), %rax
 1592 002f C9       		leave
 1593              		.cfi_def_cfa 7, 8
 1594 0030 C3       		ret
 1595              		.cfi_endproc
 1596              	.LFE1323:
 1598              		.section	.text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__n
 1599              		.weak	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_ite
 1601              	_ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT
 1602              	.LFB1324:
 1603              		.file 5 "/usr/include/c++/4.8/bits/stl_iterator.h"
   1:/usr/include/c++/4.8/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_iterator.h **** 
   3:/usr/include/c++/4.8/bits/stl_iterator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_iterator.h **** //
   5:/usr/include/c++/4.8/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  11:/usr/include/c++/4.8/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  16:/usr/include/c++/4.8/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  20:/usr/include/c++/4.8/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  25:/usr/include/c++/4.8/bits/stl_iterator.h **** /*
  26:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  27:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  30:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  38:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  39:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  42:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_iterator.h ****  */
  50:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  51:/usr/include/c++/4.8/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  55:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/4.8/bits/stl_iterator.h ****  */
  59:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  60:/usr/include/c++/4.8/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/4.8/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  63:/usr/include/c++/4.8/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/4.8/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/4.8/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  67:/usr/include/c++/4.8/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/c++/4.8/bits/stl_iterator.h **** {
  69:/usr/include/c++/4.8/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  71:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
  72:/usr/include/c++/4.8/bits/stl_iterator.h ****    * @addtogroup iterators
  73:/usr/include/c++/4.8/bits/stl_iterator.h ****    * @{
  74:/usr/include/c++/4.8/bits/stl_iterator.h ****    */
  75:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  76:/usr/include/c++/4.8/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  77:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
  78:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  79:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  80:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  81:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  82:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  83:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @code
  84:/usr/include/c++/4.8/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  85:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @endcode
  86:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
  87:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  88:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  89:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  90:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
  91:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  92:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  93:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  94:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
  95:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
  96:/usr/include/c++/4.8/bits/stl_iterator.h ****     class reverse_iterator
  97:/usr/include/c++/4.8/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  98:/usr/include/c++/4.8/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
  99:/usr/include/c++/4.8/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 100:/usr/include/c++/4.8/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 101:/usr/include/c++/4.8/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 102:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 103:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 104:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Iterator current;
 105:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 106:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 107:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 108:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 109:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 110:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 111:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 112:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 113:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 114:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 115:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 116:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 117:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 118:/usr/include/c++/4.8/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 119:/usr/include/c++/4.8/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 120:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 121:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 122:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 123:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 124:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 125:/usr/include/c++/4.8/bits/stl_iterator.h ****       explicit
 126:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 127:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 128:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 129:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The copy constructor is normal.
 130:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 131:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 132:/usr/include/c++/4.8/bits/stl_iterator.h ****       : current(__x.current) { }
 133:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 134:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 135:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 136:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 137:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 138:/usr/include/c++/4.8/bits/stl_iterator.h ****       template<typename _Iter>
 139:/usr/include/c++/4.8/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 140:/usr/include/c++/4.8/bits/stl_iterator.h **** 	: current(__x.base()) { }
 141:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 142:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 143:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 144:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 145:/usr/include/c++/4.8/bits/stl_iterator.h ****       iterator_type
 146:/usr/include/c++/4.8/bits/stl_iterator.h ****       base() const
 147:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return current; }
 148:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 149:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 150:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 151:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 152:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 153:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 154:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 155:/usr/include/c++/4.8/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 156:/usr/include/c++/4.8/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 157:/usr/include/c++/4.8/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 158:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 159:/usr/include/c++/4.8/bits/stl_iterator.h ****       reference
 160:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*() const
 161:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 162:/usr/include/c++/4.8/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 163:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *--__tmp;
 164:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 165:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 166:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 167:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 168:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 169:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 170:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 171:/usr/include/c++/4.8/bits/stl_iterator.h ****       pointer
 172:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator->() const
 173:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return &(operator*()); }
 174:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 175:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 176:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  @c *this
 177:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 178:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 179:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 180:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator&
 181:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 182:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 183:/usr/include/c++/4.8/bits/stl_iterator.h **** 	--current;
 184:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 185:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 186:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 187:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 188:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 189:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 190:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 191:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 192:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator
 193:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 194:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 195:/usr/include/c++/4.8/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 196:/usr/include/c++/4.8/bits/stl_iterator.h **** 	--current;
 197:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return __tmp;
 198:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 199:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 200:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 201:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  @c *this
 202:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 203:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 204:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 205:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator&
 206:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator--()
 207:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 208:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++current;
 209:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 210:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 211:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 212:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 213:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 214:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 215:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 216:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 217:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator
 218:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator--(int)
 219:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 220:/usr/include/c++/4.8/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 221:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++current;
 222:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return __tmp;
 223:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 224:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 225:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 226:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 227:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 228:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 229:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 230:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator
 231:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator+(difference_type __n) const
 232:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 233:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 234:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 235:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  *this
 236:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 237:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 238:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 239:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 240:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator&
 241:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator+=(difference_type __n)
 242:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 243:/usr/include/c++/4.8/bits/stl_iterator.h **** 	current -= __n;
 244:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 245:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 246:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 247:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 248:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 249:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 250:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 251:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 252:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator
 253:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator-(difference_type __n) const
 254:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 255:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 256:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 257:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  *this
 258:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 259:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 260:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 261:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 262:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator&
 263:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator-=(difference_type __n)
 264:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 265:/usr/include/c++/4.8/bits/stl_iterator.h **** 	current += __n;
 266:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 267:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 268:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 269:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 270:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 271:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 272:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 273:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 274:/usr/include/c++/4.8/bits/stl_iterator.h ****       reference
 275:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator[](difference_type __n) const
 276:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *(*this + __n); }
 277:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 278:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 279:/usr/include/c++/4.8/bits/stl_iterator.h ****   //@{
 280:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 281:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 282:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 283:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @return  A simple bool.
 284:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 285:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 286:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 287:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 288:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 289:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 290:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 291:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 292:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 293:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 294:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 295:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 296:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 297:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 298:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 299:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 300:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 301:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 302:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 303:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 304:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 305:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__x == __y); }
 306:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 307:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 308:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 309:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 310:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 311:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y < __x; }
 312:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 313:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 314:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 315:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 316:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 317:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__y < __x); }
 318:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 319:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 320:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 321:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 322:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 323:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__x < __y); }
 324:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 325:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 326:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 327:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 328:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 329:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 330:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 331:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 332:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 333:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 334:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 335:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 336:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 337:/usr/include/c++/4.8/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 338:/usr/include/c++/4.8/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 339:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 340:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 341:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 342:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 343:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 344:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 345:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 346:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 347:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 348:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 349:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 350:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 351:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 352:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 353:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 354:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 355:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__x == __y); }
 356:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 357:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 358:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 359:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 360:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 361:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y < __x; }
 362:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 363:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 364:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 365:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 366:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 367:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__y < __x); }
 368:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 369:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 370:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 371:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 372:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 373:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__x < __y); }
 374:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 375:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 376:/usr/include/c++/4.8/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 377:/usr/include/c++/4.8/bits/stl_iterator.h ****     // DR 685.
 378:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline auto
 379:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 380:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 381:/usr/include/c++/4.8/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 382:/usr/include/c++/4.8/bits/stl_iterator.h **** #else
 383:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 384:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 385:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 386:/usr/include/c++/4.8/bits/stl_iterator.h **** #endif
 387:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 388:/usr/include/c++/4.8/bits/stl_iterator.h ****   //@}
 389:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 390:/usr/include/c++/4.8/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 391:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 392:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 393:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 394:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 395:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 396:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  push_back.
 397:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 398:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 399:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  save typing.
 400:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 401:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 402:/usr/include/c++/4.8/bits/stl_iterator.h ****     class back_insert_iterator
 403:/usr/include/c++/4.8/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 404:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 405:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 406:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Container* container;
 407:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 408:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 409:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 410:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Container          container_type;
 411:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 412:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 413:/usr/include/c++/4.8/bits/stl_iterator.h ****       explicit
 414:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x) : container(&__x) { }
 415:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 416:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 417:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 418:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 419:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 420:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 421:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 422:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 423:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 424:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 425:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 426:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 427:/usr/include/c++/4.8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 428:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 429:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 430:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 431:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_back(__value);
 432:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 433:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 434:/usr/include/c++/4.8/bits/stl_iterator.h **** #else
 435:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 436:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 437:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 438:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_back(__value);
 439:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 440:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 441:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 442:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 443:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 444:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 445:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 446:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 447:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 448:/usr/include/c++/4.8/bits/stl_iterator.h **** #endif
 449:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 450:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.
 451:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 452:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*()
 453:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 454:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 455:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 456:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 457:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 458:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 459:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 460:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 461:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator
 462:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 463:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 464:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 465:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 466:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 467:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 468:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 469:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 470:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 471:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 472:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 473:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 474:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 475:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  types for you.
 476:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 477:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 478:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 479:/usr/include/c++/4.8/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 480:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 481:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 482:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 483:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 484:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 485:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 486:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 487:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  push_front.
 488:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 489:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 490:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  save typing.
 491:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 492:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 493:/usr/include/c++/4.8/bits/stl_iterator.h ****     class front_insert_iterator
 494:/usr/include/c++/4.8/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 495:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 496:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 497:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Container* container;
 498:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 499:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 500:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 501:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Container          container_type;
 502:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 503:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 504:/usr/include/c++/4.8/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x) : container(&__x) { }
 505:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 506:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 507:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 508:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 509:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 510:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 511:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 512:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 513:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 514:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 515:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 516:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 517:/usr/include/c++/4.8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 518:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 519:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 520:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 521:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_front(__value);
 522:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 523:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 524:/usr/include/c++/4.8/bits/stl_iterator.h **** #else
 525:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 526:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 527:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 528:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_front(__value);
 529:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 530:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 531:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 532:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 533:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 534:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 535:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 536:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 537:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 538:/usr/include/c++/4.8/bits/stl_iterator.h **** #endif
 539:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 540:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.
 541:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 542:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*()
 543:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 544:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 545:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 546:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 547:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 548:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 549:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 550:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 551:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator
 552:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 553:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 554:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 555:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 556:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 557:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 558:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 559:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 560:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 561:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 562:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 563:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 564:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 565:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  types for you.
 566:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 567:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 568:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 569:/usr/include/c++/4.8/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 570:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 571:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 572:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 573:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 574:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 575:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 576:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 577:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 578:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  position.
 579:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 580:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 581:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  %iterator's position.)
 582:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 583:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 584:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  save typing.
 585:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 586:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 587:/usr/include/c++/4.8/bits/stl_iterator.h ****     class insert_iterator
 588:/usr/include/c++/4.8/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 589:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 590:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 591:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Container* container;
 592:/usr/include/c++/4.8/bits/stl_iterator.h ****       typename _Container::iterator iter;
 593:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 594:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 595:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 596:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Container          container_type;
 597:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 598:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 599:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 600:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 601:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 602:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 603:/usr/include/c++/4.8/bits/stl_iterator.h ****       : container(&__x), iter(__i) {}
 604:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 605:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 606:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 607:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 608:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 609:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 610:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 611:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 612:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 613:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 614:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 615:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 616:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 617:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @code
 618:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     // vector v contains A and Z
 619:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 620:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 621:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     i = 1;
 622:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     i = 2;
 623:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     i = 3;
 624:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 625:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 626:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @endcode
 627:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 628:/usr/include/c++/4.8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 629:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 630:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 631:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 632:/usr/include/c++/4.8/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 633:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++iter;
 634:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 635:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 636:/usr/include/c++/4.8/bits/stl_iterator.h **** #else
 637:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 638:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 639:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 640:/usr/include/c++/4.8/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 641:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++iter;
 642:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 643:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 644:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 645:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 646:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 647:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 648:/usr/include/c++/4.8/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 649:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++iter;
 650:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 651:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 652:/usr/include/c++/4.8/bits/stl_iterator.h **** #endif
 653:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 654:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.
 655:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 656:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*()
 657:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 658:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 659:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 660:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 661:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 662:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 663:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 664:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 665:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 666:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 667:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 668:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 669:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 670:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 671:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 672:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 673:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 674:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 675:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 676:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 677:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 678:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 679:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  types for you.
 680:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 681:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 682:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 683:/usr/include/c++/4.8/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 684:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 685:/usr/include/c++/4.8/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 686:/usr/include/c++/4.8/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 687:/usr/include/c++/4.8/bits/stl_iterator.h ****     }
 688:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 689:/usr/include/c++/4.8/bits/stl_iterator.h ****   // @} group iterators
 690:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 691:/usr/include/c++/4.8/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 692:/usr/include/c++/4.8/bits/stl_iterator.h **** } // namespace
 693:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 694:/usr/include/c++/4.8/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 695:/usr/include/c++/4.8/bits/stl_iterator.h **** {
 696:/usr/include/c++/4.8/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 697:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 698:/usr/include/c++/4.8/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 699:/usr/include/c++/4.8/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 700:/usr/include/c++/4.8/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 701:/usr/include/c++/4.8/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 702:/usr/include/c++/4.8/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 703:/usr/include/c++/4.8/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 704:/usr/include/c++/4.8/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 705:/usr/include/c++/4.8/bits/stl_iterator.h ****   using std::iterator_traits;
 706:/usr/include/c++/4.8/bits/stl_iterator.h ****   using std::iterator;
 707:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 708:/usr/include/c++/4.8/bits/stl_iterator.h ****     class __normal_iterator
 709:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 710:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 711:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Iterator _M_current;
 712:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 713:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 714:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 715:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 716:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 717:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 718:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 719:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 720:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 721:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 722:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 723:/usr/include/c++/4.8/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
 724:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 725:/usr/include/c++/4.8/bits/stl_iterator.h ****       explicit
 726:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 727:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 728:/usr/include/c++/4.8/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 729:/usr/include/c++/4.8/bits/stl_iterator.h ****       template<typename _Iter>
 730:/usr/include/c++/4.8/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 731:/usr/include/c++/4.8/bits/stl_iterator.h **** 			  typename __enable_if<
 732:/usr/include/c++/4.8/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 733:/usr/include/c++/4.8/bits/stl_iterator.h **** 		      _Container>::__type>& __i)
 734:/usr/include/c++/4.8/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 735:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 736:/usr/include/c++/4.8/bits/stl_iterator.h ****       // Forward iterator requirements
 737:/usr/include/c++/4.8/bits/stl_iterator.h ****       reference
 738:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*() const
 739:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *_M_current; }
 740:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 741:/usr/include/c++/4.8/bits/stl_iterator.h ****       pointer
 742:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator->() const
 743:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 744:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 745:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator&
 746:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 747:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 748:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++_M_current;
 749:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 750:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 751:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 752:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator
 753:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 754:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 755:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 756:/usr/include/c++/4.8/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 757:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator&
 758:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator--()
 759:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 760:/usr/include/c++/4.8/bits/stl_iterator.h **** 	--_M_current;
 761:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 762:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 763:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 764:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator
 765:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator--(int)
 766:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 767:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 768:/usr/include/c++/4.8/bits/stl_iterator.h ****       // Random access iterator requirements
 769:/usr/include/c++/4.8/bits/stl_iterator.h ****       reference
 770:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator[](const difference_type& __n) const
 771:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current[__n]; }
 772:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 773:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator&
 774:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator+=(const difference_type& __n)
 775:/usr/include/c++/4.8/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 776:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 777:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator
 778:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator+(const difference_type& __n) const
 779:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 780:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 781:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator&
 782:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator-=(const difference_type& __n)
 783:/usr/include/c++/4.8/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 784:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 785:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator
 786:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator-(const difference_type& __n) const
 787:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 788:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 789:/usr/include/c++/4.8/bits/stl_iterator.h ****       const _Iterator&
 790:/usr/include/c++/4.8/bits/stl_iterator.h ****       base() const
 791:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 792:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 793:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 794:/usr/include/c++/4.8/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 795:/usr/include/c++/4.8/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 796:/usr/include/c++/4.8/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 797:/usr/include/c++/4.8/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 798:/usr/include/c++/4.8/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 799:/usr/include/c++/4.8/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 800:/usr/include/c++/4.8/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 801:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 802:/usr/include/c++/4.8/bits/stl_iterator.h ****   // Forward iterator requirements
 803:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 804:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 805:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 806:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 807:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 808:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 809:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 810:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 811:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 812:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 813:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 814:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 815:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 816:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 817:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 818:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 819:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 820:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 821:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 822:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 823:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 1604              		.loc 5 823 0
 1605              		.cfi_startproc
 1606 0000 55       		pushq	%rbp
 1607              		.cfi_def_cfa_offset 16
 1608              		.cfi_offset 6, -16
 1609 0001 4889E5   		movq	%rsp, %rbp
 1610              		.cfi_def_cfa_register 6
 1611 0004 53       		pushq	%rbx
 1612 0005 4883EC18 		subq	$24, %rsp
 1613              		.cfi_offset 3, -24
 1614 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1615 000d 488975E0 		movq	%rsi, -32(%rbp)
 824:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 825:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 1616              		.loc 5 825 0
 1617 0011 488B45E8 		movq	-24(%rbp), %rax
 1618 0015 4889C7   		movq	%rax, %rdi
 1619 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1619      00
 1620 001d 488B18   		movq	(%rax), %rbx
 1621 0020 488B45E0 		movq	-32(%rbp), %rax
 1622 0024 4889C7   		movq	%rax, %rdi
 1623 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 1623      00
 1624 002c 488B00   		movq	(%rax), %rax
 1625 002f 4839C3   		cmpq	%rax, %rbx
 1626 0032 0F95C0   		setne	%al
 1627 0035 4883C418 		addq	$24, %rsp
 1628 0039 5B       		popq	%rbx
 1629 003a 5D       		popq	%rbp
 1630              		.cfi_def_cfa 7, 8
 1631 003b C3       		ret
 1632              		.cfi_endproc
 1633              	.LFE1324:
 1635              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1636              		.align 2
 1637              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
 1639              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:
 1640              	.LFB1325:
 746:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 1641              		.loc 5 746 0
 1642              		.cfi_startproc
 1643 0000 55       		pushq	%rbp
 1644              		.cfi_def_cfa_offset 16
 1645              		.cfi_offset 6, -16
 1646 0001 4889E5   		movq	%rsp, %rbp
 1647              		.cfi_def_cfa_register 6
 1648 0004 48897DF8 		movq	%rdi, -8(%rbp)
 748:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 1649              		.loc 5 748 0
 1650 0008 488B45F8 		movq	-8(%rbp), %rax
 1651 000c 488B00   		movq	(%rax), %rax
 1652 000f 488D5038 		leaq	56(%rax), %rdx
 1653 0013 488B45F8 		movq	-8(%rbp), %rax
 1654 0017 488910   		movq	%rdx, (%rax)
 749:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 1655              		.loc 5 749 0
 1656 001a 488B45F8 		movq	-8(%rbp), %rax
 750:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 1657              		.loc 5 750 0
 1658 001e 5D       		popq	%rbp
 1659              		.cfi_def_cfa 7, 8
 1660 001f C3       		ret
 1661              		.cfi_endproc
 1662              	.LFE1325:
 1664              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1665              		.align 2
 1666              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeE
 1668              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:
 1669              	.LFB1326:
 738:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *_M_current; }
 1670              		.loc 5 738 0
 1671              		.cfi_startproc
 1672 0000 55       		pushq	%rbp
 1673              		.cfi_def_cfa_offset 16
 1674              		.cfi_offset 6, -16
 1675 0001 4889E5   		movq	%rsp, %rbp
 1676              		.cfi_def_cfa_register 6
 1677 0004 48897DF8 		movq	%rdi, -8(%rbp)
 739:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 1678              		.loc 5 739 0
 1679 0008 488B45F8 		movq	-8(%rbp), %rax
 1680 000c 488B00   		movq	(%rax), %rax
 1681 000f 5D       		popq	%rbp
 1682              		.cfi_def_cfa 7, 8
 1683 0010 C3       		ret
 1684              		.cfi_endproc
 1685              	.LFE1326:
 1687              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 1688              		.align 2
 1689              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptE
 1691              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:
 1692              	.LFB1327:
 742:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 1693              		.loc 5 742 0
 1694              		.cfi_startproc
 1695 0000 55       		pushq	%rbp
 1696              		.cfi_def_cfa_offset 16
 1697              		.cfi_offset 6, -16
 1698 0001 4889E5   		movq	%rsp, %rbp
 1699              		.cfi_def_cfa_register 6
 1700 0004 48897DF8 		movq	%rdi, -8(%rbp)
 743:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 1701              		.loc 5 743 0
 1702 0008 488B45F8 		movq	-8(%rbp), %rax
 1703 000c 488B00   		movq	(%rax), %rax
 1704 000f 5D       		popq	%rbp
 1705              		.cfi_def_cfa 7, 8
 1706 0010 C3       		ret
 1707              		.cfi_endproc
 1708              	.LFE1327:
 1710              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiS
 1711              		.align 2
 1712              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv
 1714              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv:
 1715              	.LFB1329:
 547:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 1716              		.loc 4 547 0
 1717              		.cfi_startproc
 1718 0000 55       		pushq	%rbp
 1719              		.cfi_def_cfa_offset 16
 1720              		.cfi_offset 6, -16
 1721 0001 4889E5   		movq	%rsp, %rbp
 1722              		.cfi_def_cfa_register 6
 1723 0004 4883EC20 		subq	$32, %rsp
 1724 0008 48897DE8 		movq	%rdi, -24(%rbp)
 548:/usr/include/c++/4.8/bits/stl_vector.h **** 
 1725              		.loc 4 548 0
 1726 000c 488B45E8 		movq	-24(%rbp), %rax
 1727 0010 488B00   		movq	(%rax), %rax
 1728 0013 488945F8 		movq	%rax, -8(%rbp)
 1729 0017 488D55F8 		leaq	-8(%rbp), %rdx
 1730 001b 488D45F0 		leaq	-16(%rbp), %rax
 1731 001f 4889D6   		movq	%rdx, %rsi
 1732 0022 4889C7   		movq	%rax, %rdi
 1733 0025 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_@PLT
 1733      00
 1734 002a 488B45F0 		movq	-16(%rbp), %rax
 1735 002e C9       		leave
 1736              		.cfi_def_cfa 7, 8
 1737 002f C3       		ret
 1738              		.cfi_endproc
 1739              	.LFE1329:
 1741              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiSsE
 1742              		.align 2
 1743              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv
 1745              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv:
 1746              	.LFB1330:
 565:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 1747              		.loc 4 565 0
 1748              		.cfi_startproc
 1749 0000 55       		pushq	%rbp
 1750              		.cfi_def_cfa_offset 16
 1751              		.cfi_offset 6, -16
 1752 0001 4889E5   		movq	%rsp, %rbp
 1753              		.cfi_def_cfa_register 6
 1754 0004 4883EC20 		subq	$32, %rsp
 1755 0008 48897DE8 		movq	%rdi, -24(%rbp)
 1756              		.loc 4 566 0
 1757 000c 488B45E8 		movq	-24(%rbp), %rax
 1758 0010 488B4008 		movq	8(%rax), %rax
 1759 0014 488945F8 		movq	%rax, -8(%rbp)
 1760 0018 488D55F8 		leaq	-8(%rbp), %rdx
 1761 001c 488D45F0 		leaq	-16(%rbp), %rax
 1762 0020 4889D6   		movq	%rdx, %rsi
 1763 0023 4889C7   		movq	%rax, %rdi
 1764 0026 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_@PLT
 1764      00
 1765 002b 488B45F0 		movq	-16(%rbp), %rax
 1766 002f C9       		leave
 1767              		.cfi_def_cfa 7, 8
 1768 0030 C3       		ret
 1769              		.cfi_endproc
 1770              	.LFE1330:
 1772              		.section	.text._ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0
 1773              		.weak	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
 1775              	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:
 1776              	.LFB1331:
 823:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 1777              		.loc 5 823 0
 1778              		.cfi_startproc
 1779 0000 55       		pushq	%rbp
 1780              		.cfi_def_cfa_offset 16
 1781              		.cfi_offset 6, -16
 1782 0001 4889E5   		movq	%rsp, %rbp
 1783              		.cfi_def_cfa_register 6
 1784 0004 53       		pushq	%rbx
 1785 0005 4883EC18 		subq	$24, %rsp
 1786              		.cfi_offset 3, -24
 1787 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1788 000d 488975E0 		movq	%rsi, -32(%rbp)
 1789              		.loc 5 825 0
 1790 0011 488B45E8 		movq	-24(%rbp), %rax
 1791 0015 4889C7   		movq	%rax, %rdi
 1792 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1792      00
 1793 001d 488B18   		movq	(%rax), %rbx
 1794 0020 488B45E0 		movq	-32(%rbp), %rax
 1795 0024 4889C7   		movq	%rax, %rdi
 1796 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1796      00
 1797 002c 488B00   		movq	(%rax), %rax
 1798 002f 4839C3   		cmpq	%rax, %rbx
 1799 0032 0F95C0   		setne	%al
 1800 0035 4883C418 		addq	$24, %rsp
 1801 0039 5B       		popq	%rbx
 1802 003a 5D       		popq	%rbp
 1803              		.cfi_def_cfa 7, 8
 1804 003b C3       		ret
 1805              		.cfi_endproc
 1806              	.LFE1331:
 1808              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv,"axG",@pr
 1809              		.align 2
 1810              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
 1812              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:
 1813              	.LFB1332:
 746:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 1814              		.loc 5 746 0
 1815              		.cfi_startproc
 1816 0000 55       		pushq	%rbp
 1817              		.cfi_def_cfa_offset 16
 1818              		.cfi_offset 6, -16
 1819 0001 4889E5   		movq	%rsp, %rbp
 1820              		.cfi_def_cfa_register 6
 1821 0004 48897DF8 		movq	%rdi, -8(%rbp)
 748:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 1822              		.loc 5 748 0
 1823 0008 488B45F8 		movq	-8(%rbp), %rax
 1824 000c 488B00   		movq	(%rax), %rax
 1825 000f 488D5010 		leaq	16(%rax), %rdx
 1826 0013 488B45F8 		movq	-8(%rbp), %rax
 1827 0017 488910   		movq	%rdx, (%rax)
 749:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 1828              		.loc 5 749 0
 1829 001a 488B45F8 		movq	-8(%rbp), %rax
 750:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 1830              		.loc 5 750 0
 1831 001e 5D       		popq	%rbp
 1832              		.cfi_def_cfa 7, 8
 1833 001f C3       		ret
 1834              		.cfi_endproc
 1835              	.LFE1332:
 1837              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv,"axG",@p
 1838              		.align 2
 1839              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv
 1841              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv:
 1842              	.LFB1333:
 742:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 1843              		.loc 5 742 0
 1844              		.cfi_startproc
 1845 0000 55       		pushq	%rbp
 1846              		.cfi_def_cfa_offset 16
 1847              		.cfi_offset 6, -16
 1848 0001 4889E5   		movq	%rsp, %rbp
 1849              		.cfi_def_cfa_register 6
 1850 0004 48897DF8 		movq	%rdi, -8(%rbp)
 743:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 1851              		.loc 5 743 0
 1852 0008 488B45F8 		movq	-8(%rbp), %rax
 1853 000c 488B00   		movq	(%rax), %rax
 1854 000f 5D       		popq	%rbp
 1855              		.cfi_def_cfa 7, 8
 1856 0010 C3       		ret
 1857              		.cfi_endproc
 1858              	.LFE1333:
 1860              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev,"axG"
 1861              		.align 2
 1862              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
 1864              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:
 1865              	.LFB1373:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 1866              		.loc 4 79 0
 1867              		.cfi_startproc
 1868 0000 55       		pushq	%rbp
 1869              		.cfi_def_cfa_offset 16
 1870              		.cfi_offset 6, -16
 1871 0001 4889E5   		movq	%rsp, %rbp
 1872              		.cfi_def_cfa_register 6
 1873 0004 4883EC10 		subq	$16, %rsp
 1874 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1875              	.LBB20:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 1876              		.loc 4 79 0
 1877 000c 488B45F8 		movq	-8(%rbp), %rax
 1878 0010 4889C7   		movq	%rax, %rdi
 1879 0013 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev@PLT
 1879      00
 1880              	.LBE20:
 1881 0018 C9       		leave
 1882              		.cfi_def_cfa 7, 8
 1883 0019 C3       		ret
 1884              		.cfi_endproc
 1885              	.LFE1373:
 1887              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
 1888              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_
 1889              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev,"axG",@progbits,_ZN
 1890              		.align 2
 1891              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
 1893              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:
 1894              	.LFB1375:
 124:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl() { }
 1895              		.loc 4 124 0
 1896              		.cfi_startproc
 1897 0000 55       		pushq	%rbp
 1898              		.cfi_def_cfa_offset 16
 1899              		.cfi_offset 6, -16
 1900 0001 4889E5   		movq	%rsp, %rbp
 1901              		.cfi_def_cfa_register 6
 1902 0004 4883EC10 		subq	$16, %rsp
 1903 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1904              	.LBB21:
 125:/usr/include/c++/4.8/bits/stl_vector.h **** 
 1905              		.loc 4 125 0
 1906 000c 488B45F8 		movq	-8(%rbp), %rax
 1907 0010 4889C7   		movq	%rax, %rdi
 1908 0013 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev@PLT
 1908      00
 1909              	.LBE21:
 1910 0018 C9       		leave
 1911              		.cfi_def_cfa 7, 8
 1912 0019 C3       		ret
 1913              		.cfi_endproc
 1914              	.LFE1375:
 1916              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
 1917              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev,_ZNSt12_Vector_baseIN8UnitTes
 1918              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 1919              		.align 2
 1920              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 1922              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 1923              	.LFB1378:
 159:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 1924              		.loc 4 159 0
 1925              		.cfi_startproc
 1926              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1927              		.cfi_lsda 0x1b,.LLSDA1378
 1928 0000 55       		pushq	%rbp
 1929              		.cfi_def_cfa_offset 16
 1930              		.cfi_offset 6, -16
 1931 0001 4889E5   		movq	%rsp, %rbp
 1932              		.cfi_def_cfa_register 6
 1933 0004 53       		pushq	%rbx
 1934 0005 4883EC18 		subq	$24, %rsp
 1935              		.cfi_offset 3, -24
 1936 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1937              	.LBB22:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 1938              		.loc 4 161 0
 1939 000d 488B45E8 		movq	-24(%rbp), %rax
 1940 0011 488B4010 		movq	16(%rax), %rax
 1941 0015 4889C2   		movq	%rax, %rdx
 1942 0018 488B45E8 		movq	-24(%rbp), %rax
 1943 001c 488B00   		movq	(%rax), %rax
 1944 001f 4829C2   		subq	%rax, %rdx
 1945 0022 4889D0   		movq	%rdx, %rax
 1946 0025 48C1F803 		sarq	$3, %rax
 1947 0029 4889C2   		movq	%rax, %rdx
 1948 002c 48B8B76D 		movabsq	$7905747460161236407, %rax
 1948      DBB66DDB 
 1948      B66D
 1949 0036 480FAFC2 		imulq	%rdx, %rax
 1950 003a 4889C2   		movq	%rax, %rdx
 1951 003d 488B45E8 		movq	-24(%rbp), %rax
 1952 0041 488B08   		movq	(%rax), %rcx
 160:/usr/include/c++/4.8/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 1953              		.loc 4 160 0
 1954 0044 488B45E8 		movq	-24(%rbp), %rax
 1955 0048 4889CE   		movq	%rcx, %rsi
 1956 004b 4889C7   		movq	%rax, %rdi
 1957              	.LEHB35:
 1958 004e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 1958      00
 1959              	.LEHE35:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 1960              		.loc 4 161 0
 1961 0053 488B45E8 		movq	-24(%rbp), %rax
 1962 0057 4889C7   		movq	%rax, %rdi
 1963 005a E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 1963      00
 1964 005f EB1A     		jmp	.L102
 1965              	.L101:
 1966 0061 4889C3   		movq	%rax, %rbx
 1967 0064 488B45E8 		movq	-24(%rbp), %rax
 1968 0068 4889C7   		movq	%rax, %rdi
 1969 006b E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 1969      00
 1970 0070 4889D8   		movq	%rbx, %rax
 1971 0073 4889C7   		movq	%rax, %rdi
 1972              	.LEHB36:
 1973 0076 E8000000 		call	_Unwind_Resume@PLT
 1973      00
 1974              	.LEHE36:
 1975              	.L102:
 1976              	.LBE22:
 1977 007b 4883C418 		addq	$24, %rsp
 1978 007f 5B       		popq	%rbx
 1979 0080 5D       		popq	%rbp
 1980              		.cfi_def_cfa 7, 8
 1981 0081 C3       		ret
 1982              		.cfi_endproc
 1983              	.LFE1378:
 1984              		.section	.gcc_except_table
 1985              	.LLSDA1378:
 1986 00ca FF       		.byte	0xff
 1987 00cb FF       		.byte	0xff
 1988 00cc 01       		.byte	0x1
 1989 00cd 08       		.uleb128 .LLSDACSE1378-.LLSDACSB1378
 1990              	.LLSDACSB1378:
 1991 00ce 4E       		.uleb128 .LEHB35-.LFB1378
 1992 00cf 05       		.uleb128 .LEHE35-.LEHB35
 1993 00d0 61       		.uleb128 .L101-.LFB1378
 1994 00d1 00       		.uleb128 0
 1995 00d2 76       		.uleb128 .LEHB36-.LFB1378
 1996 00d3 05       		.uleb128 .LEHE36-.LEHB36
 1997 00d4 00       		.uleb128 0
 1998 00d5 00       		.uleb128 0
 1999              	.LLSDACSE1378:
 2000              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 2002              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 2003              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt12_Vector_baseIN8UnitTes
 2004              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv,
 2005              		.align 2
 2006              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 2008              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 2009              	.LFB1380:
 113:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2010              		.loc 4 113 0
 2011              		.cfi_startproc
 2012 0000 55       		pushq	%rbp
 2013              		.cfi_def_cfa_offset 16
 2014              		.cfi_offset 6, -16
 2015 0001 4889E5   		movq	%rsp, %rbp
 2016              		.cfi_def_cfa_register 6
 2017 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2018              		.loc 4 114 0
 2019 0008 488B45F8 		movq	-8(%rbp), %rax
 2020 000c 5D       		popq	%rbp
 2021              		.cfi_def_cfa 7, 8
 2022 000d C3       		ret
 2023              		.cfi_endproc
 2024              	.LFE1380:
 2026              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E,"axG",@progbits,_Z
 2027              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
 2029              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:
 2030              	.LFB1381:
 2031              		.file 6 "/usr/include/c++/4.8/bits/stl_construct.h"
   1:/usr/include/c++/4.8/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_construct.h **** 
   3:/usr/include/c++/4.8/bits/stl_construct.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_construct.h **** //
   5:/usr/include/c++/4.8/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_construct.h **** 
  11:/usr/include/c++/4.8/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_construct.h **** 
  16:/usr/include/c++/4.8/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_construct.h **** 
  20:/usr/include/c++/4.8/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_construct.h **** 
  25:/usr/include/c++/4.8/bits/stl_construct.h **** /*
  26:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  27:/usr/include/c++/4.8/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  30:/usr/include/c++/4.8/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  38:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  39:/usr/include/c++/4.8/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.8/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  42:/usr/include/c++/4.8/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_construct.h ****  */
  50:/usr/include/c++/4.8/bits/stl_construct.h **** 
  51:/usr/include/c++/4.8/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/4.8/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/4.8/bits/stl_construct.h ****  */
  55:/usr/include/c++/4.8/bits/stl_construct.h **** 
  56:/usr/include/c++/4.8/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/4.8/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/4.8/bits/stl_construct.h **** 
  59:/usr/include/c++/4.8/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/4.8/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/4.8/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/4.8/bits/stl_construct.h **** 
  63:/usr/include/c++/4.8/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/4.8/bits/stl_construct.h **** {
  65:/usr/include/c++/4.8/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/4.8/bits/stl_construct.h **** 
  67:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
  68:/usr/include/c++/4.8/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/4.8/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/4.8/bits/stl_construct.h ****    */
  71:/usr/include/c++/4.8/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/4.8/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/4.8/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/4.8/bits/stl_construct.h **** #else
  77:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/4.8/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/4.8/bits/stl_construct.h ****     {
  81:/usr/include/c++/4.8/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/4.8/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/4.8/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/4.8/bits/stl_construct.h ****     }
  85:/usr/include/c++/4.8/bits/stl_construct.h **** #endif
  86:/usr/include/c++/4.8/bits/stl_construct.h **** 
  87:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
  88:/usr/include/c++/4.8/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:/usr/include/c++/4.8/bits/stl_construct.h ****    */
  90:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _Tp>
  91:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
  92:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:/usr/include/c++/4.8/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  94:/usr/include/c++/4.8/bits/stl_construct.h **** 
  95:/usr/include/c++/4.8/bits/stl_construct.h ****   template<bool>
  96:/usr/include/c++/4.8/bits/stl_construct.h ****     struct _Destroy_aux
  97:/usr/include/c++/4.8/bits/stl_construct.h ****     {
  98:/usr/include/c++/4.8/bits/stl_construct.h ****       template<typename _ForwardIterator>
  99:/usr/include/c++/4.8/bits/stl_construct.h ****         static void
 100:/usr/include/c++/4.8/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:/usr/include/c++/4.8/bits/stl_construct.h **** 	{
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 103:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 104:/usr/include/c++/4.8/bits/stl_construct.h **** 	}
 105:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 106:/usr/include/c++/4.8/bits/stl_construct.h **** 
 107:/usr/include/c++/4.8/bits/stl_construct.h ****   template<>
 108:/usr/include/c++/4.8/bits/stl_construct.h ****     struct _Destroy_aux<true>
 109:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 110:/usr/include/c++/4.8/bits/stl_construct.h ****       template<typename _ForwardIterator>
 111:/usr/include/c++/4.8/bits/stl_construct.h ****         static void
 112:/usr/include/c++/4.8/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 113:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 114:/usr/include/c++/4.8/bits/stl_construct.h **** 
 115:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
 116:/usr/include/c++/4.8/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 117:/usr/include/c++/4.8/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 118:/usr/include/c++/4.8/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 119:/usr/include/c++/4.8/bits/stl_construct.h ****    */
 120:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _ForwardIterator>
 121:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
 122:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 123:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 124:/usr/include/c++/4.8/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 125:/usr/include/c++/4.8/bits/stl_construct.h ****                        _Value_type;
 126:/usr/include/c++/4.8/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 127:/usr/include/c++/4.8/bits/stl_construct.h **** 	__destroy(__first, __last);
 128:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 129:/usr/include/c++/4.8/bits/stl_construct.h **** 
 130:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
 131:/usr/include/c++/4.8/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 132:/usr/include/c++/4.8/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 133:/usr/include/c++/4.8/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 134:/usr/include/c++/4.8/bits/stl_construct.h ****    */
 135:/usr/include/c++/4.8/bits/stl_construct.h **** 
 136:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 137:/usr/include/c++/4.8/bits/stl_construct.h ****     void
 138:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 139:/usr/include/c++/4.8/bits/stl_construct.h **** 	     _Allocator& __alloc)
 140:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 141:/usr/include/c++/4.8/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 142:/usr/include/c++/4.8/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 143:/usr/include/c++/4.8/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 144:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 145:/usr/include/c++/4.8/bits/stl_construct.h **** 
 146:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
 148:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 2032              		.loc 6 148 0
 2033              		.cfi_startproc
 2034 0000 55       		pushq	%rbp
 2035              		.cfi_def_cfa_offset 16
 2036              		.cfi_offset 6, -16
 2037 0001 4889E5   		movq	%rsp, %rbp
 2038              		.cfi_def_cfa_register 6
 2039 0004 4883EC20 		subq	$32, %rsp
 2040 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2041 000c 488975F0 		movq	%rsi, -16(%rbp)
 2042 0010 488955E8 		movq	%rdx, -24(%rbp)
 149:/usr/include/c++/4.8/bits/stl_construct.h **** 	     allocator<_Tp>&)
 150:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 151:/usr/include/c++/4.8/bits/stl_construct.h ****       _Destroy(__first, __last);
 2043              		.loc 6 151 0
 2044 0014 488B55F0 		movq	-16(%rbp), %rdx
 2045 0018 488B45F8 		movq	-8(%rbp), %rax
 2046 001c 4889D6   		movq	%rdx, %rsi
 2047 001f 4889C7   		movq	%rax, %rdi
 2048 0022 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 2048      00
 152:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 2049              		.loc 6 152 0
 2050 0027 C9       		leave
 2051              		.cfi_def_cfa 7, 8
 2052 0028 C3       		ret
 2053              		.cfi_endproc
 2054              	.LFE1381:
 2056              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 2057              		.align 2
 2058              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ER
 2060              	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:
 2061              	.LFB1383:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 2062              		.loc 5 726 0
 2063              		.cfi_startproc
 2064 0000 55       		pushq	%rbp
 2065              		.cfi_def_cfa_offset 16
 2066              		.cfi_offset 6, -16
 2067 0001 4889E5   		movq	%rsp, %rbp
 2068              		.cfi_def_cfa_register 6
 2069 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2070 0008 488975F0 		movq	%rsi, -16(%rbp)
 2071              	.LBB23:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 2072              		.loc 5 726 0
 2073 000c 488B45F0 		movq	-16(%rbp), %rax
 2074 0010 488B10   		movq	(%rax), %rdx
 2075 0013 488B45F8 		movq	-8(%rbp), %rax
 2076 0017 488910   		movq	%rdx, (%rax)
 2077              	.LBE23:
 2078 001a 5D       		popq	%rbp
 2079              		.cfi_def_cfa 7, 8
 2080 001b C3       		ret
 2081              		.cfi_endproc
 2082              	.LFE1383:
 2084              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ER
 2085              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 2086              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaI
 2087              		.align 2
 2088              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4ba
 2090              	_ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:
 2091              	.LFB1385:
 790:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 2092              		.loc 5 790 0
 2093              		.cfi_startproc
 2094 0000 55       		pushq	%rbp
 2095              		.cfi_def_cfa_offset 16
 2096              		.cfi_offset 6, -16
 2097 0001 4889E5   		movq	%rsp, %rbp
 2098              		.cfi_def_cfa_register 6
 2099 0004 48897DF8 		movq	%rdi, -8(%rbp)
 791:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 2100              		.loc 5 791 0
 2101 0008 488B45F8 		movq	-8(%rbp), %rax
 2102 000c 5D       		popq	%rbp
 2103              		.cfi_def_cfa 7, 8
 2104 000d C3       		ret
 2105              		.cfi_endproc
 2106              	.LFE1385:
 2108              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_,"axG"
 2109              		.align 2
 2110              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_
 2112              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:
 2113              	.LFB1387:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 2114              		.loc 5 726 0
 2115              		.cfi_startproc
 2116 0000 55       		pushq	%rbp
 2117              		.cfi_def_cfa_offset 16
 2118              		.cfi_offset 6, -16
 2119 0001 4889E5   		movq	%rsp, %rbp
 2120              		.cfi_def_cfa_register 6
 2121 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2122 0008 488975F0 		movq	%rsi, -16(%rbp)
 2123              	.LBB24:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 2124              		.loc 5 726 0
 2125 000c 488B45F0 		movq	-16(%rbp), %rax
 2126 0010 488B10   		movq	(%rax), %rdx
 2127 0013 488B45F8 		movq	-8(%rbp), %rax
 2128 0017 488910   		movq	%rdx, (%rax)
 2129              	.LBE24:
 2130 001a 5D       		popq	%rbp
 2131              		.cfi_def_cfa 7, 8
 2132 001b C3       		ret
 2133              		.cfi_endproc
 2134              	.LFE1387:
 2136              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_
 2137              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_,_ZN9__gnu_cxx17
 2138              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv,"axG"
 2139              		.align 2
 2140              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
 2142              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:
 2143              	.LFB1389:
 790:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 2144              		.loc 5 790 0
 2145              		.cfi_startproc
 2146 0000 55       		pushq	%rbp
 2147              		.cfi_def_cfa_offset 16
 2148              		.cfi_offset 6, -16
 2149 0001 4889E5   		movq	%rsp, %rbp
 2150              		.cfi_def_cfa_register 6
 2151 0004 48897DF8 		movq	%rdi, -8(%rbp)
 791:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 2152              		.loc 5 791 0
 2153 0008 488B45F8 		movq	-8(%rbp), %rax
 2154 000c 5D       		popq	%rbp
 2155              		.cfi_def_cfa 7, 8
 2156 000d C3       		ret
 2157              		.cfi_endproc
 2158              	.LFE1389:
 2160              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev,"axG"
 2161              		.align 2
 2162              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
 2164              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:
 2165              	.LFB1410:
  86:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 2166              		.loc 4 86 0
 2167              		.cfi_startproc
 2168 0000 55       		pushq	%rbp
 2169              		.cfi_def_cfa_offset 16
 2170              		.cfi_offset 6, -16
 2171 0001 4889E5   		movq	%rsp, %rbp
 2172              		.cfi_def_cfa_register 6
 2173 0004 4883EC10 		subq	$16, %rsp
 2174 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2175              	.LBB25:
  87:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
 2176              		.loc 4 87 0
 2177 000c 488B45F8 		movq	-8(%rbp), %rax
 2178 0010 4889C7   		movq	%rax, %rdi
 2179 0013 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2179      00
 2180 0018 488B45F8 		movq	-8(%rbp), %rax
 2181 001c 48C70000 		movq	$0, (%rax)
 2181      000000
 2182 0023 488B45F8 		movq	-8(%rbp), %rax
 2183 0027 48C74008 		movq	$0, 8(%rax)
 2183      00000000 
 2184 002f 488B45F8 		movq	-8(%rbp), %rax
 2185 0033 48C74010 		movq	$0, 16(%rax)
 2185      00000000 
 2186              	.LBE25:
  88:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2187              		.loc 4 88 0
 2188 003b C9       		leave
 2189              		.cfi_def_cfa 7, 8
 2190 003c C3       		ret
 2191              		.cfi_endproc
 2192              	.LFE1410:
 2194              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
 2195              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev,_ZNSt12_Vector_
 2196              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2197              		.align 2
 2198              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2200              	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev:
 2201              	.LFB1413:
 2202              		.file 7 "/usr/include/c++/4.8/bits/allocator.h"
   1:/usr/include/c++/4.8/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/4.8/bits/allocator.h **** 
   3:/usr/include/c++/4.8/bits/allocator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/allocator.h **** //
   5:/usr/include/c++/4.8/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/allocator.h **** // any later version.
  10:/usr/include/c++/4.8/bits/allocator.h **** 
  11:/usr/include/c++/4.8/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/allocator.h **** 
  16:/usr/include/c++/4.8/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/allocator.h **** 
  20:/usr/include/c++/4.8/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/allocator.h **** 
  25:/usr/include/c++/4.8/bits/allocator.h **** /*
  26:/usr/include/c++/4.8/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/4.8/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/4.8/bits/allocator.h ****  *
  29:/usr/include/c++/4.8/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/4.8/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/4.8/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/4.8/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/4.8/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/4.8/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/4.8/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/4.8/bits/allocator.h ****  */
  37:/usr/include/c++/4.8/bits/allocator.h **** 
  38:/usr/include/c++/4.8/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/4.8/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/4.8/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/4.8/bits/allocator.h ****  */
  42:/usr/include/c++/4.8/bits/allocator.h **** 
  43:/usr/include/c++/4.8/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/4.8/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/4.8/bits/allocator.h **** 
  46:/usr/include/c++/4.8/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/4.8/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/4.8/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/4.8/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/4.8/bits/allocator.h **** #endif
  51:/usr/include/c++/4.8/bits/allocator.h **** 
  52:/usr/include/c++/4.8/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/4.8/bits/allocator.h **** {
  54:/usr/include/c++/4.8/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/4.8/bits/allocator.h **** 
  56:/usr/include/c++/4.8/bits/allocator.h ****   /**
  57:/usr/include/c++/4.8/bits/allocator.h ****    *  @addtogroup allocators
  58:/usr/include/c++/4.8/bits/allocator.h ****    *  @{
  59:/usr/include/c++/4.8/bits/allocator.h ****    */
  60:/usr/include/c++/4.8/bits/allocator.h **** 
  61:/usr/include/c++/4.8/bits/allocator.h ****   /// allocator<void> specialization.
  62:/usr/include/c++/4.8/bits/allocator.h ****   template<>
  63:/usr/include/c++/4.8/bits/allocator.h ****     class allocator<void>
  64:/usr/include/c++/4.8/bits/allocator.h ****     {
  65:/usr/include/c++/4.8/bits/allocator.h ****     public:
  66:/usr/include/c++/4.8/bits/allocator.h ****       typedef size_t      size_type;
  67:/usr/include/c++/4.8/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  68:/usr/include/c++/4.8/bits/allocator.h ****       typedef void*       pointer;
  69:/usr/include/c++/4.8/bits/allocator.h ****       typedef const void* const_pointer;
  70:/usr/include/c++/4.8/bits/allocator.h ****       typedef void        value_type;
  71:/usr/include/c++/4.8/bits/allocator.h **** 
  72:/usr/include/c++/4.8/bits/allocator.h ****       template<typename _Tp1>
  73:/usr/include/c++/4.8/bits/allocator.h ****         struct rebind
  74:/usr/include/c++/4.8/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  75:/usr/include/c++/4.8/bits/allocator.h **** 
  76:/usr/include/c++/4.8/bits/allocator.h **** #if __cplusplus >= 201103L
  77:/usr/include/c++/4.8/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  78:/usr/include/c++/4.8/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  79:/usr/include/c++/4.8/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  80:/usr/include/c++/4.8/bits/allocator.h **** #endif
  81:/usr/include/c++/4.8/bits/allocator.h ****     };
  82:/usr/include/c++/4.8/bits/allocator.h **** 
  83:/usr/include/c++/4.8/bits/allocator.h ****   /**
  84:/usr/include/c++/4.8/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  85:/usr/include/c++/4.8/bits/allocator.h ****    *
  86:/usr/include/c++/4.8/bits/allocator.h ****    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html
  87:/usr/include/c++/4.8/bits/allocator.h ****    *  for further details.
  88:/usr/include/c++/4.8/bits/allocator.h ****    *
  89:/usr/include/c++/4.8/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  90:/usr/include/c++/4.8/bits/allocator.h ****    */
  91:/usr/include/c++/4.8/bits/allocator.h ****   template<typename _Tp>
  92:/usr/include/c++/4.8/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
  93:/usr/include/c++/4.8/bits/allocator.h ****     {
  94:/usr/include/c++/4.8/bits/allocator.h ****    public:
  95:/usr/include/c++/4.8/bits/allocator.h ****       typedef size_t     size_type;
  96:/usr/include/c++/4.8/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  97:/usr/include/c++/4.8/bits/allocator.h ****       typedef _Tp*       pointer;
  98:/usr/include/c++/4.8/bits/allocator.h ****       typedef const _Tp* const_pointer;
  99:/usr/include/c++/4.8/bits/allocator.h ****       typedef _Tp&       reference;
 100:/usr/include/c++/4.8/bits/allocator.h ****       typedef const _Tp& const_reference;
 101:/usr/include/c++/4.8/bits/allocator.h ****       typedef _Tp        value_type;
 102:/usr/include/c++/4.8/bits/allocator.h **** 
 103:/usr/include/c++/4.8/bits/allocator.h ****       template<typename _Tp1>
 104:/usr/include/c++/4.8/bits/allocator.h ****         struct rebind
 105:/usr/include/c++/4.8/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 106:/usr/include/c++/4.8/bits/allocator.h **** 
 107:/usr/include/c++/4.8/bits/allocator.h **** #if __cplusplus >= 201103L
 108:/usr/include/c++/4.8/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 109:/usr/include/c++/4.8/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 110:/usr/include/c++/4.8/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 111:/usr/include/c++/4.8/bits/allocator.h **** #endif
 112:/usr/include/c++/4.8/bits/allocator.h **** 
 113:/usr/include/c++/4.8/bits/allocator.h ****       allocator() throw() { }
 114:/usr/include/c++/4.8/bits/allocator.h **** 
 115:/usr/include/c++/4.8/bits/allocator.h ****       allocator(const allocator& __a) throw()
 116:/usr/include/c++/4.8/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 117:/usr/include/c++/4.8/bits/allocator.h **** 
 118:/usr/include/c++/4.8/bits/allocator.h ****       template<typename _Tp1>
 119:/usr/include/c++/4.8/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 120:/usr/include/c++/4.8/bits/allocator.h **** 
 121:/usr/include/c++/4.8/bits/allocator.h ****       ~allocator() throw() { }
 2203              		.loc 7 121 0
 2204              		.cfi_startproc
 2205 0000 55       		pushq	%rbp
 2206              		.cfi_def_cfa_offset 16
 2207              		.cfi_offset 6, -16
 2208 0001 4889E5   		movq	%rsp, %rbp
 2209              		.cfi_def_cfa_register 6
 2210 0004 4883EC10 		subq	$16, %rsp
 2211 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2212              	.LBB26:
 2213              		.loc 7 121 0
 2214 000c 488B45F8 		movq	-8(%rbp), %rax
 2215 0010 4889C7   		movq	%rax, %rdi
 2216 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev@PLT
 2216      00
 2217              	.LBE26:
 2218 0018 C9       		leave
 2219              		.cfi_def_cfa 7, 8
 2220 0019 C3       		ret
 2221              		.cfi_endproc
 2222              	.LFE1413:
 2224              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev
 2225              		.set	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev,_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 2226              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m,"a
 2227              		.align 2
 2228              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
 2230              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:
 2231              	.LFB1415:
 171:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 2232              		.loc 4 171 0
 2233              		.cfi_startproc
 2234 0000 55       		pushq	%rbp
 2235              		.cfi_def_cfa_offset 16
 2236              		.cfi_offset 6, -16
 2237 0001 4889E5   		movq	%rsp, %rbp
 2238              		.cfi_def_cfa_register 6
 2239 0004 4883EC20 		subq	$32, %rsp
 2240 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2241 000c 488975F0 		movq	%rsi, -16(%rbp)
 2242 0010 488955E8 		movq	%rdx, -24(%rbp)
 173:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 2243              		.loc 4 173 0
 2244 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2244      00
 2245 0019 7417     		je	.L115
 174:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 2246              		.loc 4 174 0
 2247 001b 488B45F8 		movq	-8(%rbp), %rax
 2248 001f 488B55E8 		movq	-24(%rbp), %rdx
 2249 0023 488B4DF0 		movq	-16(%rbp), %rcx
 2250 0027 4889CE   		movq	%rcx, %rsi
 2251 002a 4889C7   		movq	%rax, %rdi
 2252 002d E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m@PLT
 2252      00
 2253              	.L115:
 175:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2254              		.loc 4 175 0
 2255 0032 C9       		leave
 2256              		.cfi_def_cfa 7, 8
 2257 0033 C3       		ret
 2258              		.cfi_endproc
 2259              	.LFE1415:
 2261              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_,"axG",@progbits,_ZSt8_Destroy
 2262              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
 2264              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:
 2265              	.LFB1416:
 122:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 2266              		.loc 6 122 0
 2267              		.cfi_startproc
 2268 0000 55       		pushq	%rbp
 2269              		.cfi_def_cfa_offset 16
 2270              		.cfi_offset 6, -16
 2271 0001 4889E5   		movq	%rsp, %rbp
 2272              		.cfi_def_cfa_register 6
 2273 0004 4883EC10 		subq	$16, %rsp
 2274 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2275 000c 488975F0 		movq	%rsi, -16(%rbp)
 2276              	.LBB27:
 126:/usr/include/c++/4.8/bits/stl_construct.h **** 	__destroy(__first, __last);
 2277              		.loc 6 126 0
 2278 0010 488B55F0 		movq	-16(%rbp), %rdx
 2279 0014 488B45F8 		movq	-8(%rbp), %rax
 2280 0018 4889D6   		movq	%rdx, %rsi
 2281 001b 4889C7   		movq	%rax, %rdi
 2282 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_@PLT
 2282      00
 2283              	.LBE27:
 128:/usr/include/c++/4.8/bits/stl_construct.h **** 
 2284              		.loc 6 128 0
 2285 0023 C9       		leave
 2286              		.cfi_def_cfa 7, 8
 2287 0024 C3       		ret
 2288              		.cfi_endproc
 2289              	.LFE1416:
 2291              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 2292              		.align 2
 2293              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2295              	_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:
 2296              	.LFB1427:
 113:/usr/include/c++/4.8/bits/allocator.h **** 
 2297              		.loc 7 113 0
 2298              		.cfi_startproc
 2299 0000 55       		pushq	%rbp
 2300              		.cfi_def_cfa_offset 16
 2301              		.cfi_offset 6, -16
 2302 0001 4889E5   		movq	%rsp, %rbp
 2303              		.cfi_def_cfa_register 6
 2304 0004 4883EC10 		subq	$16, %rsp
 2305 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2306              	.LBB28:
 113:/usr/include/c++/4.8/bits/allocator.h **** 
 2307              		.loc 7 113 0
 2308 000c 488B45F8 		movq	-8(%rbp), %rax
 2309 0010 4889C7   		movq	%rax, %rdi
 2310 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev@PLT
 2310      00
 2311              	.LBE28:
 2312 0018 C9       		leave
 2313              		.cfi_def_cfa 7, 8
 2314 0019 C3       		ret
 2315              		.cfi_endproc
 2316              	.LFE1427:
 2318              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
 2319              		.set	_ZNSaIN8UnitTest18DeferredTestResultEEC1Ev,_ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
 2320              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_
 2321              		.align 2
 2322              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
 2324              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:
 2325              	.LFB1430:
 2326              		.file 8 "/usr/include/c++/4.8/ext/new_allocator.h"
   1:/usr/include/c++/4.8/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/4.8/ext/new_allocator.h **** 
   3:/usr/include/c++/4.8/ext/new_allocator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/ext/new_allocator.h **** //
   5:/usr/include/c++/4.8/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/4.8/ext/new_allocator.h **** 
  11:/usr/include/c++/4.8/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/ext/new_allocator.h **** 
  16:/usr/include/c++/4.8/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/ext/new_allocator.h **** 
  20:/usr/include/c++/4.8/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/ext/new_allocator.h **** 
  25:/usr/include/c++/4.8/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/4.8/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/4.8/ext/new_allocator.h ****  */
  28:/usr/include/c++/4.8/ext/new_allocator.h **** 
  29:/usr/include/c++/4.8/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/4.8/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/4.8/ext/new_allocator.h **** 
  32:/usr/include/c++/4.8/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/4.8/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/4.8/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/4.8/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/4.8/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/4.8/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/4.8/ext/new_allocator.h **** #endif
  39:/usr/include/c++/4.8/ext/new_allocator.h **** 
  40:/usr/include/c++/4.8/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/4.8/ext/new_allocator.h **** {
  42:/usr/include/c++/4.8/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/4.8/ext/new_allocator.h **** 
  44:/usr/include/c++/4.8/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/4.8/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/4.8/ext/new_allocator.h **** 
  47:/usr/include/c++/4.8/ext/new_allocator.h ****   /**
  48:/usr/include/c++/4.8/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/4.8/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/4.8/ext/new_allocator.h ****    *
  51:/usr/include/c++/4.8/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/4.8/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/4.8/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/4.8/ext/new_allocator.h ****    *
  55:/usr/include/c++/4.8/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/4.8/ext/new_allocator.h ****    */
  57:/usr/include/c++/4.8/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/4.8/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/4.8/ext/new_allocator.h ****     {
  60:/usr/include/c++/4.8/ext/new_allocator.h ****     public:
  61:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/4.8/ext/new_allocator.h **** 
  69:/usr/include/c++/4.8/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/4.8/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/4.8/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/4.8/ext/new_allocator.h **** 
  73:/usr/include/c++/4.8/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/4.8/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/4.8/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/4.8/ext/new_allocator.h **** #endif
  78:/usr/include/c++/4.8/ext/new_allocator.h **** 
  79:/usr/include/c++/4.8/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/4.8/ext/new_allocator.h **** 
  81:/usr/include/c++/4.8/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/4.8/ext/new_allocator.h **** 
  83:/usr/include/c++/4.8/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/4.8/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/4.8/ext/new_allocator.h **** 
  86:/usr/include/c++/4.8/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 2327              		.loc 8 86 0
 2328              		.cfi_startproc
 2329 0000 55       		pushq	%rbp
 2330              		.cfi_def_cfa_offset 16
 2331              		.cfi_offset 6, -16
 2332 0001 4889E5   		movq	%rsp, %rbp
 2333              		.cfi_def_cfa_register 6
 2334 0004 48897DF8 		movq	%rdi, -8(%rbp)
 2335              		.loc 8 86 0
 2336 0008 5D       		popq	%rbp
 2337              		.cfi_def_cfa 7, 8
 2338 0009 C3       		ret
 2339              		.cfi_endproc
 2340              	.LFE1430:
 2342              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
 2343              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev,_ZN9__gnu_cxx13new_allocato
 2344              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m,"ax
 2345              		.align 2
 2346              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
 2348              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:
 2349              	.LFB1432:
  87:/usr/include/c++/4.8/ext/new_allocator.h **** 
  88:/usr/include/c++/4.8/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/4.8/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/4.8/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/4.8/ext/new_allocator.h **** 
  92:/usr/include/c++/4.8/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/4.8/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/4.8/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/4.8/ext/new_allocator.h **** 
  96:/usr/include/c++/4.8/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/4.8/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/4.8/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/4.8/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/4.8/ext/new_allocator.h ****       { 
 101:/usr/include/c++/4.8/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/4.8/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/4.8/ext/new_allocator.h **** 
 104:/usr/include/c++/4.8/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:/usr/include/c++/4.8/ext/new_allocator.h ****       }
 106:/usr/include/c++/4.8/ext/new_allocator.h **** 
 107:/usr/include/c++/4.8/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/4.8/ext/new_allocator.h ****       void
 109:/usr/include/c++/4.8/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 2350              		.loc 8 109 0
 2351              		.cfi_startproc
 2352 0000 55       		pushq	%rbp
 2353              		.cfi_def_cfa_offset 16
 2354              		.cfi_offset 6, -16
 2355 0001 4889E5   		movq	%rsp, %rbp
 2356              		.cfi_def_cfa_register 6
 2357 0004 4883EC20 		subq	$32, %rsp
 2358 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2359 000c 488975F0 		movq	%rsi, -16(%rbp)
 2360 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/4.8/ext/new_allocator.h ****       { ::operator delete(__p); }
 2361              		.loc 8 110 0
 2362 0014 488B45F0 		movq	-16(%rbp), %rax
 2363 0018 4889C7   		movq	%rax, %rdi
 2364 001b E8000000 		call	_ZdlPv@PLT
 2364      00
 2365 0020 C9       		leave
 2366              		.cfi_def_cfa 7, 8
 2367 0021 C3       		ret
 2368              		.cfi_endproc
 2369              	.LFE1432:
 2371              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_,"axG",
 2372              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
 2374              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:
 2375              	.LFB1433:
 100:/usr/include/c++/4.8/bits/stl_construct.h **** 	{
 2376              		.loc 6 100 0
 2377              		.cfi_startproc
 2378 0000 55       		pushq	%rbp
 2379              		.cfi_def_cfa_offset 16
 2380              		.cfi_offset 6, -16
 2381 0001 4889E5   		movq	%rsp, %rbp
 2382              		.cfi_def_cfa_register 6
 2383 0004 4883EC10 		subq	$16, %rsp
 2384 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2385 000c 488975F0 		movq	%rsi, -16(%rbp)
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2386              		.loc 6 102 0
 2387 0010 EB19     		jmp	.L123
 2388              	.L124:
 103:/usr/include/c++/4.8/bits/stl_construct.h **** 	}
 2389              		.loc 6 103 0 discriminator 2
 2390 0012 488B45F8 		movq	-8(%rbp), %rax
 2391 0016 4889C7   		movq	%rax, %rdi
 2392 0019 E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 2392      00
 2393 001e 4889C7   		movq	%rax, %rdi
 2394 0021 E8000000 		call	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_@PLT
 2394      00
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2395              		.loc 6 102 0 discriminator 2
 2396 0026 488345F8 		addq	$56, -8(%rbp)
 2396      38
 2397              	.L123:
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 2398              		.loc 6 102 0 is_stmt 0 discriminator 1
 2399 002b 488B45F8 		movq	-8(%rbp), %rax
 2400 002f 483B45F0 		cmpq	-16(%rbp), %rax
 2401 0033 75DD     		jne	.L124
 104:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 2402              		.loc 6 104 0 is_stmt 1
 2403 0035 C9       		leave
 2404              		.cfi_def_cfa 7, 8
 2405 0036 C3       		ret
 2406              		.cfi_endproc
 2407              	.LFE1433:
 2409              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev,"axG",@progbits,_
 2410              		.align 2
 2411              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
 2413              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:
 2414              	.LFB1436:
  79:/usr/include/c++/4.8/ext/new_allocator.h **** 
 2415              		.loc 8 79 0
 2416              		.cfi_startproc
 2417 0000 55       		pushq	%rbp
 2418              		.cfi_def_cfa_offset 16
 2419              		.cfi_offset 6, -16
 2420 0001 4889E5   		movq	%rsp, %rbp
 2421              		.cfi_def_cfa_register 6
 2422 0004 48897DF8 		movq	%rdi, -8(%rbp)
  79:/usr/include/c++/4.8/ext/new_allocator.h **** 
 2423              		.loc 8 79 0
 2424 0008 5D       		popq	%rbp
 2425              		.cfi_def_cfa 7, 8
 2426 0009 C3       		ret
 2427              		.cfi_endproc
 2428              	.LFE1436:
 2430              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
 2431              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev,_ZN9__gnu_cxx13new_allocato
 2432              		.section	.text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_,"axG",@progbits,_ZSt11__a
 2433              		.weak	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
 2435              	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:
 2436              	.LFB1438:
 2437              		.file 9 "/usr/include/c++/4.8/bits/move.h"
   1:/usr/include/c++/4.8/bits/move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:/usr/include/c++/4.8/bits/move.h **** 
   3:/usr/include/c++/4.8/bits/move.h **** // Copyright (C) 2007-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/move.h **** //
   5:/usr/include/c++/4.8/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/move.h **** // any later version.
  10:/usr/include/c++/4.8/bits/move.h **** 
  11:/usr/include/c++/4.8/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/move.h **** 
  16:/usr/include/c++/4.8/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/move.h **** 
  20:/usr/include/c++/4.8/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/move.h **** 
  25:/usr/include/c++/4.8/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/4.8/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/4.8/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/4.8/bits/move.h ****  */
  29:/usr/include/c++/4.8/bits/move.h **** 
  30:/usr/include/c++/4.8/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/4.8/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/4.8/bits/move.h **** 
  33:/usr/include/c++/4.8/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/4.8/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/4.8/bits/move.h **** 
  36:/usr/include/c++/4.8/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/4.8/bits/move.h **** {
  38:/usr/include/c++/4.8/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/4.8/bits/move.h **** 
  40:/usr/include/c++/4.8/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/4.8/bits/move.h ****   /**
  42:/usr/include/c++/4.8/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/4.8/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/4.8/bits/move.h ****    */
  45:/usr/include/c++/4.8/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/4.8/bits/move.h ****     inline _Tp*
  47:/usr/include/c++/4.8/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 2438              		.loc 9 47 0
 2439              		.cfi_startproc
 2440 0000 55       		pushq	%rbp
 2441              		.cfi_def_cfa_offset 16
 2442              		.cfi_offset 6, -16
 2443 0001 4889E5   		movq	%rsp, %rbp
 2444              		.cfi_def_cfa_register 6
 2445 0004 48897DF8 		movq	%rdi, -8(%rbp)
  48:/usr/include/c++/4.8/bits/move.h ****     {
  49:/usr/include/c++/4.8/bits/move.h ****       return reinterpret_cast<_Tp*>
  50:/usr/include/c++/4.8/bits/move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 2446              		.loc 9 50 0
 2447 0008 488B45F8 		movq	-8(%rbp), %rax
  51:/usr/include/c++/4.8/bits/move.h ****     }
 2448              		.loc 9 51 0
 2449 000c 5D       		popq	%rbp
 2450              		.cfi_def_cfa 7, 8
 2451 000d C3       		ret
 2452              		.cfi_endproc
 2453              	.LFE1438:
 2455              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2456              		.align 2
 2457              		.weak	_ZN8UnitTest18DeferredTestResultD2Ev
 2459              	_ZN8UnitTest18DeferredTestResultD2Ev:
 2460              	.LFB1441:
 2461              		.file 10 "DeferredTestResult.h"
   1:DeferredTestResult.h **** #ifndef UNITTEST_DEFERREDTESTRESULT_H
   2:DeferredTestResult.h **** #define UNITTEST_DEFERREDTESTRESULT_H
   3:DeferredTestResult.h **** 
   4:DeferredTestResult.h **** #include <string>
   5:DeferredTestResult.h **** #include <vector>
   6:DeferredTestResult.h **** 
   7:DeferredTestResult.h **** namespace UnitTest
   8:DeferredTestResult.h **** {
   9:DeferredTestResult.h **** 
  10:DeferredTestResult.h **** struct DeferredTestResult
 2462              		.loc 10 10 0
 2463              		.cfi_startproc
 2464              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2465              		.cfi_lsda 0x1b,.LLSDA1441
 2466 0000 55       		pushq	%rbp
 2467              		.cfi_def_cfa_offset 16
 2468              		.cfi_offset 6, -16
 2469 0001 4889E5   		movq	%rsp, %rbp
 2470              		.cfi_def_cfa_register 6
 2471 0004 53       		pushq	%rbx
 2472 0005 4883EC18 		subq	$24, %rsp
 2473              		.cfi_offset 3, -24
 2474 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2475              	.LBB29:
 2476              		.loc 10 10 0
 2477 000d 488B45E8 		movq	-24(%rbp), %rax
 2478 0011 4883C018 		addq	$24, %rax
 2479 0015 4889C7   		movq	%rax, %rdi
 2480              	.LEHB37:
 2481 0018 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev@PLT
 2481      00
 2482              	.LEHE37:
 2483              		.loc 10 10 0 is_stmt 0 discriminator 1
 2484 001d 488B45E8 		movq	-24(%rbp), %rax
 2485 0021 4883C010 		addq	$16, %rax
 2486 0025 4889C7   		movq	%rax, %rdi
 2487              	.LEHB38:
 2488 0028 E8000000 		call	_ZNSsD1Ev@PLT
 2488      00
 2489              	.LEHE38:
 2490              		.loc 10 10 0 discriminator 2
 2491 002d 488B45E8 		movq	-24(%rbp), %rax
 2492 0031 4883C008 		addq	$8, %rax
 2493 0035 4889C7   		movq	%rax, %rdi
 2494              	.LEHB39:
 2495 0038 E8000000 		call	_ZNSsD1Ev@PLT
 2495      00
 2496              	.LEHE39:
 2497              		.loc 10 10 0 discriminator 3
 2498 003d 488B45E8 		movq	-24(%rbp), %rax
 2499 0041 4889C7   		movq	%rax, %rdi
 2500              	.LEHB40:
 2501 0044 E8000000 		call	_ZNSsD1Ev@PLT
 2501      00
 2502              	.LEHE40:
 2503 0049 EB44     		jmp	.L136
 2504              	.L133:
 2505 004b 4889C3   		movq	%rax, %rbx
 2506              		.loc 10 10 0
 2507 004e 488B45E8 		movq	-24(%rbp), %rax
 2508 0052 4883C010 		addq	$16, %rax
 2509 0056 4889C7   		movq	%rax, %rdi
 2510 0059 E8000000 		call	_ZNSsD1Ev@PLT
 2510      00
 2511 005e EB03     		jmp	.L131
 2512              	.L134:
 2513 0060 4889C3   		movq	%rax, %rbx
 2514              	.L131:
 2515 0063 488B45E8 		movq	-24(%rbp), %rax
 2516 0067 4883C008 		addq	$8, %rax
 2517 006b 4889C7   		movq	%rax, %rdi
 2518 006e E8000000 		call	_ZNSsD1Ev@PLT
 2518      00
 2519 0073 EB03     		jmp	.L132
 2520              	.L135:
 2521 0075 4889C3   		movq	%rax, %rbx
 2522              	.L132:
 2523 0078 488B45E8 		movq	-24(%rbp), %rax
 2524 007c 4889C7   		movq	%rax, %rdi
 2525 007f E8000000 		call	_ZNSsD1Ev@PLT
 2525      00
 2526 0084 4889D8   		movq	%rbx, %rax
 2527 0087 4889C7   		movq	%rax, %rdi
 2528              	.LEHB41:
 2529 008a E8000000 		call	_Unwind_Resume@PLT
 2529      00
 2530              	.LEHE41:
 2531              	.L136:
 2532              	.LBE29:
 2533 008f 4883C418 		addq	$24, %rsp
 2534 0093 5B       		popq	%rbx
 2535 0094 5D       		popq	%rbp
 2536              		.cfi_def_cfa 7, 8
 2537 0095 C3       		ret
 2538              		.cfi_endproc
 2539              	.LFE1441:
 2540              		.section	.gcc_except_table
 2541              	.LLSDA1441:
 2542 00d6 FF       		.byte	0xff
 2543 00d7 FF       		.byte	0xff
 2544 00d8 01       		.byte	0x1
 2545 00d9 15       		.uleb128 .LLSDACSE1441-.LLSDACSB1441
 2546              	.LLSDACSB1441:
 2547 00da 18       		.uleb128 .LEHB37-.LFB1441
 2548 00db 05       		.uleb128 .LEHE37-.LEHB37
 2549 00dc 4B       		.uleb128 .L133-.LFB1441
 2550 00dd 00       		.uleb128 0
 2551 00de 28       		.uleb128 .LEHB38-.LFB1441
 2552 00df 05       		.uleb128 .LEHE38-.LEHB38
 2553 00e0 60       		.uleb128 .L134-.LFB1441
 2554 00e1 00       		.uleb128 0
 2555 00e2 38       		.uleb128 .LEHB39-.LFB1441
 2556 00e3 05       		.uleb128 .LEHE39-.LEHB39
 2557 00e4 75       		.uleb128 .L135-.LFB1441
 2558 00e5 00       		.uleb128 0
 2559 00e6 44       		.uleb128 .LEHB40-.LFB1441
 2560 00e7 05       		.uleb128 .LEHE40-.LEHB40
 2561 00e8 00       		.uleb128 0
 2562 00e9 00       		.uleb128 0
 2563 00ea 8A01     		.uleb128 .LEHB41-.LFB1441
 2564 00ec 05       		.uleb128 .LEHE41-.LEHB41
 2565 00ed 00       		.uleb128 0
 2566 00ee 00       		.uleb128 0
 2567              	.LLSDACSE1441:
 2568              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 2570              		.weak	_ZN8UnitTest18DeferredTestResultD1Ev
 2571              		.set	_ZN8UnitTest18DeferredTestResultD1Ev,_ZN8UnitTest18DeferredTestResultD2Ev
 2572              		.section	.text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_,"axG",@progbits,_ZSt8_DestroyIN8
 2573              		.weak	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
 2575              	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:
 2576              	.LFB1439:
  92:/usr/include/c++/4.8/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 2577              		.loc 6 92 0 is_stmt 1
 2578              		.cfi_startproc
 2579 0000 55       		pushq	%rbp
 2580              		.cfi_def_cfa_offset 16
 2581              		.cfi_offset 6, -16
 2582 0001 4889E5   		movq	%rsp, %rbp
 2583              		.cfi_def_cfa_register 6
 2584 0004 4883EC10 		subq	$16, %rsp
 2585 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/4.8/bits/stl_construct.h **** 
 2586              		.loc 6 93 0
 2587 000c 488B45F8 		movq	-8(%rbp), %rax
 2588 0010 4889C7   		movq	%rax, %rdi
 2589 0013 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 2589      00
 2590 0018 C9       		leave
 2591              		.cfi_def_cfa 7, 8
 2592 0019 C3       		ret
 2593              		.cfi_endproc
 2594              	.LFE1439:
 2596              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESaIS
 2597              		.align 2
 2598              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
 2600              	_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:
 2601              	.LFB1445:
 414:/usr/include/c++/4.8/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 2602              		.loc 4 414 0
 2603              		.cfi_startproc
 2604              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2605              		.cfi_lsda 0x1b,.LLSDA1445
 2606 0000 55       		pushq	%rbp
 2607              		.cfi_def_cfa_offset 16
 2608              		.cfi_offset 6, -16
 2609 0001 4889E5   		movq	%rsp, %rbp
 2610              		.cfi_def_cfa_register 6
 2611 0004 53       		pushq	%rbx
 2612 0005 4883EC18 		subq	$24, %rsp
 2613              		.cfi_offset 3, -24
 2614 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2615              	.LBB30:
 416:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2616              		.loc 4 416 0
 2617 000d 488B45E8 		movq	-24(%rbp), %rax
 2618 0011 4889C7   		movq	%rax, %rdi
 2619              	.LEHB42:
 2620 0014 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2620      00
 2621 0019 4889C2   		movq	%rax, %rdx
 2622 001c 488B45E8 		movq	-24(%rbp), %rax
 2623 0020 488B4808 		movq	8(%rax), %rcx
 2624 0024 488B45E8 		movq	-24(%rbp), %rax
 2625 0028 488B00   		movq	(%rax), %rax
 415:/usr/include/c++/4.8/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 2626              		.loc 4 415 0
 2627 002b 4889CE   		movq	%rcx, %rsi
 2628 002e 4889C7   		movq	%rax, %rdi
 2629 0031 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 2629      00
 2630              	.LEHE42:
 416:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2631              		.loc 4 416 0
 2632 0036 488B45E8 		movq	-24(%rbp), %rax
 2633 003a 4889C7   		movq	%rax, %rdi
 2634              	.LEHB43:
 2635 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 2635      00
 2636              	.LEHE43:
 2637 0042 EB1A     		jmp	.L142
 2638              	.L141:
 2639 0044 4889C3   		movq	%rax, %rbx
 2640 0047 488B45E8 		movq	-24(%rbp), %rax
 2641 004b 4889C7   		movq	%rax, %rdi
 2642 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 2642      00
 2643 0053 4889D8   		movq	%rbx, %rax
 2644 0056 4889C7   		movq	%rax, %rdi
 2645              	.LEHB44:
 2646 0059 E8000000 		call	_Unwind_Resume@PLT
 2646      00
 2647              	.LEHE44:
 2648              	.L142:
 2649              	.LBE30:
 2650 005e 4883C418 		addq	$24, %rsp
 2651 0062 5B       		popq	%rbx
 2652 0063 5D       		popq	%rbp
 2653              		.cfi_def_cfa 7, 8
 2654 0064 C3       		ret
 2655              		.cfi_endproc
 2656              	.LFE1445:
 2657              		.section	.gcc_except_table
 2658              	.LLSDA1445:
 2659 00ef FF       		.byte	0xff
 2660 00f0 FF       		.byte	0xff
 2661 00f1 01       		.byte	0x1
 2662 00f2 0C       		.uleb128 .LLSDACSE1445-.LLSDACSB1445
 2663              	.LLSDACSB1445:
 2664 00f3 14       		.uleb128 .LEHB42-.LFB1445
 2665 00f4 22       		.uleb128 .LEHE42-.LEHB42
 2666 00f5 44       		.uleb128 .L141-.LFB1445
 2667 00f6 00       		.uleb128 0
 2668 00f7 3D       		.uleb128 .LEHB43-.LFB1445
 2669 00f8 05       		.uleb128 .LEHE43-.LEHB43
 2670 00f9 00       		.uleb128 0
 2671 00fa 00       		.uleb128 0
 2672 00fb 59       		.uleb128 .LEHB44-.LFB1445
 2673 00fc 05       		.uleb128 .LEHE44-.LEHB44
 2674 00fd 00       		.uleb128 0
 2675 00fe 00       		.uleb128 0
 2676              	.LLSDACSE1445:
 2677              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESaIS
 2679              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev
 2680              		.set	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev,_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
 2681              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_
 2682              		.align 2
 2683              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev
 2685              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:
 2686              	.LFB1454:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 2687              		.loc 4 79 0
 2688              		.cfi_startproc
 2689 0000 55       		pushq	%rbp
 2690              		.cfi_def_cfa_offset 16
 2691              		.cfi_offset 6, -16
 2692 0001 4889E5   		movq	%rsp, %rbp
 2693              		.cfi_def_cfa_register 6
 2694 0004 4883EC10 		subq	$16, %rsp
 2695 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2696              	.LBB31:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 2697              		.loc 4 79 0
 2698 000c 488B45F8 		movq	-8(%rbp), %rax
 2699 0010 4889C7   		movq	%rax, %rdi
 2700 0013 E8000000 		call	_ZNSaISt4pairIiSsEED2Ev@PLT
 2700      00
 2701              	.LBE31:
 2702 0018 C9       		leave
 2703              		.cfi_def_cfa 7, 8
 2704 0019 C3       		ret
 2705              		.cfi_endproc
 2706              	.LFE1454:
 2708              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev
 2709              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_baseISt4pairIiSsESa
 2710              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseISt
 2711              		.align 2
 2712              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
 2714              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:
 2715              	.LFB1456:
 159:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 2716              		.loc 4 159 0
 2717              		.cfi_startproc
 2718              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2719              		.cfi_lsda 0x1b,.LLSDA1456
 2720 0000 55       		pushq	%rbp
 2721              		.cfi_def_cfa_offset 16
 2722              		.cfi_offset 6, -16
 2723 0001 4889E5   		movq	%rsp, %rbp
 2724              		.cfi_def_cfa_register 6
 2725 0004 53       		pushq	%rbx
 2726 0005 4883EC18 		subq	$24, %rsp
 2727              		.cfi_offset 3, -24
 2728 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2729              	.LBB32:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2730              		.loc 4 161 0
 2731 000d 488B45E8 		movq	-24(%rbp), %rax
 2732 0011 488B4010 		movq	16(%rax), %rax
 2733 0015 4889C2   		movq	%rax, %rdx
 2734 0018 488B45E8 		movq	-24(%rbp), %rax
 2735 001c 488B00   		movq	(%rax), %rax
 2736 001f 4829C2   		subq	%rax, %rdx
 2737 0022 4889D0   		movq	%rdx, %rax
 2738 0025 48C1F804 		sarq	$4, %rax
 2739 0029 4889C2   		movq	%rax, %rdx
 2740 002c 488B45E8 		movq	-24(%rbp), %rax
 2741 0030 488B08   		movq	(%rax), %rcx
 160:/usr/include/c++/4.8/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 2742              		.loc 4 160 0
 2743 0033 488B45E8 		movq	-24(%rbp), %rax
 2744 0037 4889CE   		movq	%rcx, %rsi
 2745 003a 4889C7   		movq	%rax, %rdi
 2746              	.LEHB45:
 2747 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 2747      00
 2748              	.LEHE45:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2749              		.loc 4 161 0
 2750 0042 488B45E8 		movq	-24(%rbp), %rax
 2751 0046 4889C7   		movq	%rax, %rdi
 2752 0049 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 2752      00
 2753 004e EB1A     		jmp	.L149
 2754              	.L148:
 2755 0050 4889C3   		movq	%rax, %rbx
 2756 0053 488B45E8 		movq	-24(%rbp), %rax
 2757 0057 4889C7   		movq	%rax, %rdi
 2758 005a E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 2758      00
 2759 005f 4889D8   		movq	%rbx, %rax
 2760 0062 4889C7   		movq	%rax, %rdi
 2761              	.LEHB46:
 2762 0065 E8000000 		call	_Unwind_Resume@PLT
 2762      00
 2763              	.LEHE46:
 2764              	.L149:
 2765              	.LBE32:
 2766 006a 4883C418 		addq	$24, %rsp
 2767 006e 5B       		popq	%rbx
 2768 006f 5D       		popq	%rbp
 2769              		.cfi_def_cfa 7, 8
 2770 0070 C3       		ret
 2771              		.cfi_endproc
 2772              	.LFE1456:
 2773              		.section	.gcc_except_table
 2774              	.LLSDA1456:
 2775 00ff FF       		.byte	0xff
 2776 0100 FF       		.byte	0xff
 2777 0101 01       		.byte	0x1
 2778 0102 08       		.uleb128 .LLSDACSE1456-.LLSDACSB1456
 2779              	.LLSDACSB1456:
 2780 0103 3D       		.uleb128 .LEHB45-.LFB1456
 2781 0104 05       		.uleb128 .LEHE45-.LEHB45
 2782 0105 50       		.uleb128 .L148-.LFB1456
 2783 0106 00       		.uleb128 0
 2784 0107 65       		.uleb128 .LEHB46-.LFB1456
 2785 0108 05       		.uleb128 .LEHE46-.LEHB46
 2786 0109 00       		.uleb128 0
 2787 010a 00       		.uleb128 0
 2788              	.LLSDACSE1456:
 2789              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseISt
 2791              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev
 2792              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev,_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
 2793              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZN
 2794              		.align 2
 2795              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
 2797              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:
 2798              	.LFB1458:
 113:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2799              		.loc 4 113 0
 2800              		.cfi_startproc
 2801 0000 55       		pushq	%rbp
 2802              		.cfi_def_cfa_offset 16
 2803              		.cfi_offset 6, -16
 2804 0001 4889E5   		movq	%rsp, %rbp
 2805              		.cfi_def_cfa_register 6
 2806 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2807              		.loc 4 114 0
 2808 0008 488B45F8 		movq	-8(%rbp), %rax
 2809 000c 5D       		popq	%rbp
 2810              		.cfi_def_cfa 7, 8
 2811 000d C3       		ret
 2812              		.cfi_endproc
 2813              	.LFE1458:
 2815              		.section	.text._ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPSt4pai
 2816              		.weak	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E
 2818              	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E:
 2819              	.LFB1459:
 148:/usr/include/c++/4.8/bits/stl_construct.h **** 	     allocator<_Tp>&)
 2820              		.loc 6 148 0
 2821              		.cfi_startproc
 2822 0000 55       		pushq	%rbp
 2823              		.cfi_def_cfa_offset 16
 2824              		.cfi_offset 6, -16
 2825 0001 4889E5   		movq	%rsp, %rbp
 2826              		.cfi_def_cfa_register 6
 2827 0004 4883EC20 		subq	$32, %rsp
 2828 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2829 000c 488975F0 		movq	%rsi, -16(%rbp)
 2830 0010 488955E8 		movq	%rdx, -24(%rbp)
 151:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 2831              		.loc 6 151 0
 2832 0014 488B55F0 		movq	-16(%rbp), %rdx
 2833 0018 488B45F8 		movq	-8(%rbp), %rax
 2834 001c 4889D6   		movq	%rdx, %rsi
 2835 001f 4889C7   		movq	%rax, %rdi
 2836 0022 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_@PLT
 2836      00
 2837              		.loc 6 152 0
 2838 0027 C9       		leave
 2839              		.cfi_def_cfa 7, 8
 2840 0028 C3       		ret
 2841              		.cfi_endproc
 2842              	.LFE1459:
 2844              		.section	.text._ZNSaISt4pairIiSsEED2Ev,"axG",@progbits,_ZNSaISt4pairIiSsEED5Ev,comdat
 2845              		.align 2
 2846              		.weak	_ZNSaISt4pairIiSsEED2Ev
 2848              	_ZNSaISt4pairIiSsEED2Ev:
 2849              	.LFB1465:
 2850              		.loc 7 121 0
 2851              		.cfi_startproc
 2852 0000 55       		pushq	%rbp
 2853              		.cfi_def_cfa_offset 16
 2854              		.cfi_offset 6, -16
 2855 0001 4889E5   		movq	%rsp, %rbp
 2856              		.cfi_def_cfa_register 6
 2857 0004 4883EC10 		subq	$16, %rsp
 2858 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2859              	.LBB33:
 2860              		.loc 7 121 0
 2861 000c 488B45F8 		movq	-8(%rbp), %rax
 2862 0010 4889C7   		movq	%rax, %rdi
 2863 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev@PLT
 2863      00
 2864              	.LBE33:
 2865 0018 C9       		leave
 2866              		.cfi_def_cfa 7, 8
 2867 0019 C3       		ret
 2868              		.cfi_endproc
 2869              	.LFE1465:
 2871              		.weak	_ZNSaISt4pairIiSsEED1Ev
 2872              		.set	_ZNSaISt4pairIiSsEED1Ev,_ZNSaISt4pairIiSsEED2Ev
 2873              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m,"axG",@progbits,_ZNSt
 2874              		.align 2
 2875              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m
 2877              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m:
 2878              	.LFB1467:
 171:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 2879              		.loc 4 171 0
 2880              		.cfi_startproc
 2881 0000 55       		pushq	%rbp
 2882              		.cfi_def_cfa_offset 16
 2883              		.cfi_offset 6, -16
 2884 0001 4889E5   		movq	%rsp, %rbp
 2885              		.cfi_def_cfa_register 6
 2886 0004 4883EC20 		subq	$32, %rsp
 2887 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2888 000c 488975F0 		movq	%rsi, -16(%rbp)
 2889 0010 488955E8 		movq	%rdx, -24(%rbp)
 173:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 2890              		.loc 4 173 0
 2891 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2891      00
 2892 0019 7417     		je	.L155
 174:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 2893              		.loc 4 174 0
 2894 001b 488B45F8 		movq	-8(%rbp), %rax
 2895 001f 488B55E8 		movq	-24(%rbp), %rdx
 2896 0023 488B4DF0 		movq	-16(%rbp), %rcx
 2897 0027 4889CE   		movq	%rcx, %rsi
 2898 002a 4889C7   		movq	%rax, %rdi
 2899 002d E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m@PLT
 2899      00
 2900              	.L155:
 175:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2901              		.loc 4 175 0
 2902 0032 C9       		leave
 2903              		.cfi_def_cfa 7, 8
 2904 0033 C3       		ret
 2905              		.cfi_endproc
 2906              	.LFE1467:
 2908              		.section	.text._ZSt8_DestroyIPSt4pairIiSsEEvT_S3_,"axG",@progbits,_ZSt8_DestroyIPSt4pairIiSsEEvT_S
 2909              		.weak	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_
 2911              	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_:
 2912              	.LFB1468:
 122:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 2913              		.loc 6 122 0
 2914              		.cfi_startproc
 2915 0000 55       		pushq	%rbp
 2916              		.cfi_def_cfa_offset 16
 2917              		.cfi_offset 6, -16
 2918 0001 4889E5   		movq	%rsp, %rbp
 2919              		.cfi_def_cfa_register 6
 2920 0004 4883EC10 		subq	$16, %rsp
 2921 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2922 000c 488975F0 		movq	%rsi, -16(%rbp)
 2923              	.LBB34:
 126:/usr/include/c++/4.8/bits/stl_construct.h **** 	__destroy(__first, __last);
 2924              		.loc 6 126 0
 2925 0010 488B55F0 		movq	-16(%rbp), %rdx
 2926 0014 488B45F8 		movq	-8(%rbp), %rax
 2927 0018 4889D6   		movq	%rdx, %rsi
 2928 001b 4889C7   		movq	%rax, %rdi
 2929 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_@PLT
 2929      00
 2930              	.LBE34:
 128:/usr/include/c++/4.8/bits/stl_construct.h **** 
 2931              		.loc 6 128 0
 2932 0023 C9       		leave
 2933              		.cfi_def_cfa 7, 8
 2934 0024 C3       		ret
 2935              		.cfi_endproc
 2936              	.LFE1468:
 2938              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_a
 2939              		.align 2
 2940              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
 2942              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:
 2943              	.LFB1470:
  86:/usr/include/c++/4.8/ext/new_allocator.h **** 
 2944              		.loc 8 86 0
 2945              		.cfi_startproc
 2946 0000 55       		pushq	%rbp
 2947              		.cfi_def_cfa_offset 16
 2948              		.cfi_offset 6, -16
 2949 0001 4889E5   		movq	%rsp, %rbp
 2950              		.cfi_def_cfa_register 6
 2951 0004 48897DF8 		movq	%rdi, -8(%rbp)
  86:/usr/include/c++/4.8/ext/new_allocator.h **** 
 2952              		.loc 8 86 0
 2953 0008 5D       		popq	%rbp
 2954              		.cfi_def_cfa 7, 8
 2955 0009 C3       		ret
 2956              		.cfi_endproc
 2957              	.LFE1470:
 2959              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev
 2960              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev,_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
 2961              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m,"axG",@progbits,_ZN9__
 2962              		.align 2
 2963              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m
 2965              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m:
 2966              	.LFB1472:
 109:/usr/include/c++/4.8/ext/new_allocator.h ****       { ::operator delete(__p); }
 2967              		.loc 8 109 0
 2968              		.cfi_startproc
 2969 0000 55       		pushq	%rbp
 2970              		.cfi_def_cfa_offset 16
 2971              		.cfi_offset 6, -16
 2972 0001 4889E5   		movq	%rsp, %rbp
 2973              		.cfi_def_cfa_register 6
 2974 0004 4883EC20 		subq	$32, %rsp
 2975 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2976 000c 488975F0 		movq	%rsi, -16(%rbp)
 2977 0010 488955E8 		movq	%rdx, -24(%rbp)
 2978              		.loc 8 110 0
 2979 0014 488B45F0 		movq	-16(%rbp), %rax
 2980 0018 4889C7   		movq	%rax, %rdi
 2981 001b E8000000 		call	_ZdlPv@PLT
 2981      00
 2982 0020 C9       		leave
 2983              		.cfi_def_cfa 7, 8
 2984 0021 C3       		ret
 2985              		.cfi_endproc
 2986              	.LFE1472:
 2988              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_,"axG",@progbits,_ZNSt12_D
 2989              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_
 2991              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_:
 2992              	.LFB1473:
 100:/usr/include/c++/4.8/bits/stl_construct.h **** 	{
 2993              		.loc 6 100 0
 2994              		.cfi_startproc
 2995 0000 55       		pushq	%rbp
 2996              		.cfi_def_cfa_offset 16
 2997              		.cfi_offset 6, -16
 2998 0001 4889E5   		movq	%rsp, %rbp
 2999              		.cfi_def_cfa_register 6
 3000 0004 4883EC10 		subq	$16, %rsp
 3001 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3002 000c 488975F0 		movq	%rsi, -16(%rbp)
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3003              		.loc 6 102 0
 3004 0010 EB19     		jmp	.L162
 3005              	.L163:
 103:/usr/include/c++/4.8/bits/stl_construct.h **** 	}
 3006              		.loc 6 103 0 discriminator 2
 3007 0012 488B45F8 		movq	-8(%rbp), %rax
 3008 0016 4889C7   		movq	%rax, %rdi
 3009 0019 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 3009      00
 3010 001e 4889C7   		movq	%rax, %rdi
 3011 0021 E8000000 		call	_ZSt8_DestroyISt4pairIiSsEEvPT_@PLT
 3011      00
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3012              		.loc 6 102 0 discriminator 2
 3013 0026 488345F8 		addq	$16, -8(%rbp)
 3013      10
 3014              	.L162:
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3015              		.loc 6 102 0 is_stmt 0 discriminator 1
 3016 002b 488B45F8 		movq	-8(%rbp), %rax
 3017 002f 483B45F0 		cmpq	-16(%rbp), %rax
 3018 0033 75DD     		jne	.L163
 104:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 3019              		.loc 6 104 0 is_stmt 1
 3020 0035 C9       		leave
 3021              		.cfi_def_cfa 7, 8
 3022 0036 C3       		ret
 3023              		.cfi_endproc
 3024              	.LFE1473:
 3026              		.section	.text._ZSt11__addressofISt4pairIiSsEEPT_RS2_,"axG",@progbits,_ZSt11__addressofISt4pairIiS
 3027              		.weak	_ZSt11__addressofISt4pairIiSsEEPT_RS2_
 3029              	_ZSt11__addressofISt4pairIiSsEEPT_RS2_:
 3030              	.LFB1474:
  47:/usr/include/c++/4.8/bits/move.h ****     {
 3031              		.loc 9 47 0
 3032              		.cfi_startproc
 3033 0000 55       		pushq	%rbp
 3034              		.cfi_def_cfa_offset 16
 3035              		.cfi_offset 6, -16
 3036 0001 4889E5   		movq	%rsp, %rbp
 3037              		.cfi_def_cfa_register 6
 3038 0004 48897DF8 		movq	%rdi, -8(%rbp)
  50:/usr/include/c++/4.8/bits/move.h ****     }
 3039              		.loc 9 50 0
 3040 0008 488B45F8 		movq	-8(%rbp), %rax
 3041              		.loc 9 51 0
 3042 000c 5D       		popq	%rbp
 3043              		.cfi_def_cfa 7, 8
 3044 000d C3       		ret
 3045              		.cfi_endproc
 3046              	.LFE1474:
 3048              		.section	.text._ZNSt4pairIiSsED2Ev,"axG",@progbits,_ZNSt4pairIiSsED5Ev,comdat
 3049              		.align 2
 3050              		.weak	_ZNSt4pairIiSsED2Ev
 3052              	_ZNSt4pairIiSsED2Ev:
 3053              	.LFB1477:
 3054              		.file 11 "/usr/include/c++/4.8/bits/stl_pair.h"
   1:/usr/include/c++/4.8/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_pair.h **** 
   3:/usr/include/c++/4.8/bits/stl_pair.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_pair.h **** //
   5:/usr/include/c++/4.8/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_pair.h **** 
  11:/usr/include/c++/4.8/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_pair.h **** 
  16:/usr/include/c++/4.8/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_pair.h **** 
  20:/usr/include/c++/4.8/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_pair.h **** 
  25:/usr/include/c++/4.8/bits/stl_pair.h **** /*
  26:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  27:/usr/include/c++/4.8/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  30:/usr/include/c++/4.8/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  38:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  39:/usr/include/c++/4.8/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.8/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  42:/usr/include/c++/4.8/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_pair.h ****  */
  50:/usr/include/c++/4.8/bits/stl_pair.h **** 
  51:/usr/include/c++/4.8/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/4.8/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/4.8/bits/stl_pair.h ****  */
  55:/usr/include/c++/4.8/bits/stl_pair.h **** 
  56:/usr/include/c++/4.8/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/4.8/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/4.8/bits/stl_pair.h **** 
  59:/usr/include/c++/4.8/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/4.8/bits/stl_pair.h **** 
  61:/usr/include/c++/4.8/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/4.8/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/usr/include/c++/4.8/bits/stl_pair.h **** #endif
  64:/usr/include/c++/4.8/bits/stl_pair.h **** 
  65:/usr/include/c++/4.8/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/4.8/bits/stl_pair.h **** {
  67:/usr/include/c++/4.8/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/usr/include/c++/4.8/bits/stl_pair.h **** 
  69:/usr/include/c++/4.8/bits/stl_pair.h ****   /**
  70:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @{
  72:/usr/include/c++/4.8/bits/stl_pair.h ****    */
  73:/usr/include/c++/4.8/bits/stl_pair.h **** 
  74:/usr/include/c++/4.8/bits/stl_pair.h **** #if __cplusplus >= 201103L
  75:/usr/include/c++/4.8/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/usr/include/c++/4.8/bits/stl_pair.h ****   struct piecewise_construct_t { };
  77:/usr/include/c++/4.8/bits/stl_pair.h **** 
  78:/usr/include/c++/4.8/bits/stl_pair.h ****   /// piecewise_construct
  79:/usr/include/c++/4.8/bits/stl_pair.h ****   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
  80:/usr/include/c++/4.8/bits/stl_pair.h **** 
  81:/usr/include/c++/4.8/bits/stl_pair.h ****   // Forward declarations.
  82:/usr/include/c++/4.8/bits/stl_pair.h ****   template<typename...>
  83:/usr/include/c++/4.8/bits/stl_pair.h ****     class tuple;
  84:/usr/include/c++/4.8/bits/stl_pair.h **** 
  85:/usr/include/c++/4.8/bits/stl_pair.h ****   template<std::size_t...>
  86:/usr/include/c++/4.8/bits/stl_pair.h ****     struct _Index_tuple;
  87:/usr/include/c++/4.8/bits/stl_pair.h **** #endif
  88:/usr/include/c++/4.8/bits/stl_pair.h **** 
  89:/usr/include/c++/4.8/bits/stl_pair.h ****  /**
  90:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
  91:/usr/include/c++/4.8/bits/stl_pair.h ****    *
  92:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
  93:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
  94:/usr/include/c++/4.8/bits/stl_pair.h ****    */
  95:/usr/include/c++/4.8/bits/stl_pair.h ****   template<class _T1, class _T2>
  96:/usr/include/c++/4.8/bits/stl_pair.h ****     struct pair
 3055              		.loc 11 96 0
 3056              		.cfi_startproc
 3057 0000 55       		pushq	%rbp
 3058              		.cfi_def_cfa_offset 16
 3059              		.cfi_offset 6, -16
 3060 0001 4889E5   		movq	%rsp, %rbp
 3061              		.cfi_def_cfa_register 6
 3062 0004 4883EC10 		subq	$16, %rsp
 3063 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3064              	.LBB35:
 3065              		.loc 11 96 0
 3066 000c 488B45F8 		movq	-8(%rbp), %rax
 3067 0010 4883C008 		addq	$8, %rax
 3068 0014 4889C7   		movq	%rax, %rdi
 3069 0017 E8000000 		call	_ZNSsD1Ev@PLT
 3069      00
 3070              	.LBE35:
 3071 001c C9       		leave
 3072              		.cfi_def_cfa 7, 8
 3073 001d C3       		ret
 3074              		.cfi_endproc
 3075              	.LFE1477:
 3077              		.weak	_ZNSt4pairIiSsED1Ev
 3078              		.set	_ZNSt4pairIiSsED1Ev,_ZNSt4pairIiSsED2Ev
 3079              		.section	.text._ZSt8_DestroyISt4pairIiSsEEvPT_,"axG",@progbits,_ZSt8_DestroyISt4pairIiSsEEvPT_,com
 3080              		.weak	_ZSt8_DestroyISt4pairIiSsEEvPT_
 3082              	_ZSt8_DestroyISt4pairIiSsEEvPT_:
 3083              	.LFB1475:
  92:/usr/include/c++/4.8/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 3084              		.loc 6 92 0
 3085              		.cfi_startproc
 3086 0000 55       		pushq	%rbp
 3087              		.cfi_def_cfa_offset 16
 3088              		.cfi_offset 6, -16
 3089 0001 4889E5   		movq	%rsp, %rbp
 3090              		.cfi_def_cfa_register 6
 3091 0004 4883EC10 		subq	$16, %rsp
 3092 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/4.8/bits/stl_construct.h **** 
 3093              		.loc 6 93 0
 3094 000c 488B45F8 		movq	-8(%rbp), %rax
 3095 0010 4889C7   		movq	%rax, %rdi
 3096 0013 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 3096      00
 3097 0018 C9       		leave
 3098              		.cfi_def_cfa 7, 8
 3099 0019 C3       		ret
 3100              		.cfi_endproc
 3101              	.LFE1475:
 3103              		.weak	_ZTVN8UnitTest15XmlTestReporterE
 3104              		.section	.data.rel.ro._ZTVN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTVN8UnitTest15XmlTestRepo
 3105              		.align 32
 3108              	_ZTVN8UnitTest15XmlTestReporterE:
 3109 0000 00000000 		.quad	0
 3109      00000000 
 3110 0008 00000000 		.quad	_ZTIN8UnitTest15XmlTestReporterE
 3110      00000000 
 3111 0010 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD1Ev
 3111      00000000 
 3112 0018 00000000 		.quad	_ZN8UnitTest15XmlTestReporterD0Ev
 3112      00000000 
 3113 0020 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 3113      00000000 
 3114 0028 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 3114      00000000 
 3115 0030 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 3115      00000000 
 3116 0038 00000000 		.quad	_ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
 3116      00000000 
 3117              		.section	.text._ZN8UnitTest15XmlTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD5Ev
 3118              		.align 2
 3119              		.weak	_ZN8UnitTest15XmlTestReporterD2Ev
 3121              	_ZN8UnitTest15XmlTestReporterD2Ev:
 3122              	.LFB1480:
 3123              		.file 12 "XmlTestReporter.h"
   1:XmlTestReporter.h **** #ifndef UNITTEST_XMLTESTREPORTER_H
   2:XmlTestReporter.h **** #define UNITTEST_XMLTESTREPORTER_H
   3:XmlTestReporter.h **** 
   4:XmlTestReporter.h **** #include "DeferredTestReporter.h"
   5:XmlTestReporter.h **** 
   6:XmlTestReporter.h **** #include <iosfwd>
   7:XmlTestReporter.h **** 
   8:XmlTestReporter.h **** namespace UnitTest
   9:XmlTestReporter.h **** {
  10:XmlTestReporter.h **** 
  11:XmlTestReporter.h **** class XmlTestReporter : public DeferredTestReporter
 3124              		.loc 12 11 0
 3125              		.cfi_startproc
 3126 0000 55       		pushq	%rbp
 3127              		.cfi_def_cfa_offset 16
 3128              		.cfi_offset 6, -16
 3129 0001 4889E5   		movq	%rsp, %rbp
 3130              		.cfi_def_cfa_register 6
 3131 0004 4883EC10 		subq	$16, %rsp
 3132 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3133              	.LBB36:
 3134              		.loc 12 11 0
 3135 000c 488B45F8 		movq	-8(%rbp), %rax
 3136 0010 488B1500 		movq	_ZTVN8UnitTest15XmlTestReporterE@GOTPCREL(%rip), %rdx
 3136      000000
 3137 0017 488D5210 		leaq	16(%rdx), %rdx
 3138 001b 488910   		movq	%rdx, (%rax)
 3139 001e 488B45F8 		movq	-8(%rbp), %rax
 3140 0022 4889C7   		movq	%rax, %rdi
 3141 0025 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD2Ev@PLT
 3141      00
 3142              	.LBE36:
 3143 002a B8000000 		movl	$0, %eax
 3143      00
 3144 002f 85C0     		testl	%eax, %eax
 3145 0031 740C     		je	.L169
 3146              		.loc 12 11 0 is_stmt 0 discriminator 1
 3147 0033 488B45F8 		movq	-8(%rbp), %rax
 3148 0037 4889C7   		movq	%rax, %rdi
 3149 003a E8000000 		call	_ZdlPv@PLT
 3149      00
 3150              	.L169:
 3151              		.loc 12 11 0
 3152 003f C9       		leave
 3153              		.cfi_def_cfa 7, 8
 3154 0040 C3       		ret
 3155              		.cfi_endproc
 3156              	.LFE1480:
 3158              		.weak	_ZN8UnitTest15XmlTestReporterD1Ev
 3159              		.set	_ZN8UnitTest15XmlTestReporterD1Ev,_ZN8UnitTest15XmlTestReporterD2Ev
 3160              		.section	.text._ZN8UnitTest15XmlTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest15XmlTestReporterD0Ev
 3161              		.align 2
 3162              		.weak	_ZN8UnitTest15XmlTestReporterD0Ev
 3164              	_ZN8UnitTest15XmlTestReporterD0Ev:
 3165              	.LFB1482:
 3166              		.loc 12 11 0 is_stmt 1
 3167              		.cfi_startproc
 3168 0000 55       		pushq	%rbp
 3169              		.cfi_def_cfa_offset 16
 3170              		.cfi_offset 6, -16
 3171 0001 4889E5   		movq	%rsp, %rbp
 3172              		.cfi_def_cfa_register 6
 3173 0004 4883EC10 		subq	$16, %rsp
 3174 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3175              		.loc 12 11 0
 3176 000c 488B45F8 		movq	-8(%rbp), %rax
 3177 0010 4889C7   		movq	%rax, %rdi
 3178 0013 E8000000 		call	_ZN8UnitTest15XmlTestReporterD1Ev@PLT
 3178      00
 3179 0018 488B45F8 		movq	-8(%rbp), %rax
 3180 001c 4889C7   		movq	%rax, %rdi
 3181 001f E8000000 		call	_ZdlPv@PLT
 3181      00
 3182 0024 C9       		leave
 3183              		.cfi_def_cfa 7, 8
 3184 0025 C3       		ret
 3185              		.cfi_endproc
 3186              	.LFE1482:
 3188              		.weak	_ZTIN8UnitTest15XmlTestReporterE
 3189              		.section	.data.rel.ro._ZTIN8UnitTest15XmlTestReporterE,"awG",@progbits,_ZTIN8UnitTest15XmlTestRepo
 3190              		.align 16
 3193              	_ZTIN8UnitTest15XmlTestReporterE:
 3194 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 3194      00000000 
 3195 0008 00000000 		.quad	_ZTSN8UnitTest15XmlTestReporterE
 3195      00000000 
 3196 0010 00000000 		.quad	_ZTIN8UnitTest20DeferredTestReporterE
 3196      00000000 
 3197              		.weak	_ZTSN8UnitTest15XmlTestReporterE
 3198              		.section	.rodata._ZTSN8UnitTest15XmlTestReporterE,"aG",@progbits,_ZTSN8UnitTest15XmlTestReporterE,
 3199              		.align 16
 3202              	_ZTSN8UnitTest15XmlTestReporterE:
 3203 0000 4E38556E 		.string	"N8UnitTest15XmlTestReporterE"
 3203      69745465 
 3203      73743135 
 3203      586D6C54 
 3203      65737452 
 3204              		.text
 3206              	_Z41__static_initialization_and_destruction_0ii:
 3207              	.LFB1483:
 126:XmlTestReporter.cpp **** 
 127:XmlTestReporter.cpp **** }
 3208              		.loc 1 127 0
 3209              		.cfi_startproc
 3210 097e 55       		pushq	%rbp
 3211              		.cfi_def_cfa_offset 16
 3212              		.cfi_offset 6, -16
 3213 097f 4889E5   		movq	%rsp, %rbp
 3214              		.cfi_def_cfa_register 6
 3215 0982 4883EC10 		subq	$16, %rsp
 3216 0986 897DFC   		movl	%edi, -4(%rbp)
 3217 0989 8975F8   		movl	%esi, -8(%rbp)
 3218              		.loc 1 127 0
 3219 098c 837DFC01 		cmpl	$1, -4(%rbp)
 3220 0990 7532     		jne	.L174
 3221              		.loc 1 127 0 is_stmt 0 discriminator 1
 3222 0992 817DF8FF 		cmpl	$65535, -8(%rbp)
 3222      FF0000
 3223 0999 7529     		jne	.L174
 3224              		.file 13 "/usr/include/c++/4.8/iostream"
   1:/usr/include/c++/4.8/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/4.8/iostream **** 
   3:/usr/include/c++/4.8/iostream **** // Copyright (C) 1997-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/iostream **** //
   5:/usr/include/c++/4.8/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/iostream **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/iostream **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/iostream **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/iostream **** // any later version.
  10:/usr/include/c++/4.8/iostream **** 
  11:/usr/include/c++/4.8/iostream **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/iostream **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/iostream **** 
  16:/usr/include/c++/4.8/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/iostream **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/iostream **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/iostream **** 
  20:/usr/include/c++/4.8/iostream **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/iostream **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/iostream **** 
  25:/usr/include/c++/4.8/iostream **** /** @file include/iostream
  26:/usr/include/c++/4.8/iostream ****  *  This is a Standard C++ Library header.
  27:/usr/include/c++/4.8/iostream ****  */
  28:/usr/include/c++/4.8/iostream **** 
  29:/usr/include/c++/4.8/iostream **** //
  30:/usr/include/c++/4.8/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  31:/usr/include/c++/4.8/iostream **** //
  32:/usr/include/c++/4.8/iostream **** 
  33:/usr/include/c++/4.8/iostream **** #ifndef _GLIBCXX_IOSTREAM
  34:/usr/include/c++/4.8/iostream **** #define _GLIBCXX_IOSTREAM 1
  35:/usr/include/c++/4.8/iostream **** 
  36:/usr/include/c++/4.8/iostream **** #pragma GCC system_header
  37:/usr/include/c++/4.8/iostream **** 
  38:/usr/include/c++/4.8/iostream **** #include <bits/c++config.h>
  39:/usr/include/c++/4.8/iostream **** #include <ostream>
  40:/usr/include/c++/4.8/iostream **** #include <istream>
  41:/usr/include/c++/4.8/iostream **** 
  42:/usr/include/c++/4.8/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  43:/usr/include/c++/4.8/iostream **** {
  44:/usr/include/c++/4.8/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  45:/usr/include/c++/4.8/iostream **** 
  46:/usr/include/c++/4.8/iostream ****   /**
  47:/usr/include/c++/4.8/iostream ****    *  @name Standard Stream Objects
  48:/usr/include/c++/4.8/iostream ****    *
  49:/usr/include/c++/4.8/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  50:/usr/include/c++/4.8/iostream ****    *  objects</em>.  For other declarations, see
  51:/usr/include/c++/4.8/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/io.html
  52:/usr/include/c++/4.8/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  53:/usr/include/c++/4.8/iostream ****    *
  54:/usr/include/c++/4.8/iostream ****    *  They are required by default to cooperate with the global C
  55:/usr/include/c++/4.8/iostream ****    *  library's @c FILE streams, and to be available during program
  56:/usr/include/c++/4.8/iostream ****    *  startup and termination. For more information, see the section of the
  57:/usr/include/c++/4.8/iostream ****    *  manual linked to above.
  58:/usr/include/c++/4.8/iostream ****   */
  59:/usr/include/c++/4.8/iostream ****   //@{
  60:/usr/include/c++/4.8/iostream ****   extern istream cin;		/// Linked to standard input
  61:/usr/include/c++/4.8/iostream ****   extern ostream cout;		/// Linked to standard output
  62:/usr/include/c++/4.8/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  63:/usr/include/c++/4.8/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  64:/usr/include/c++/4.8/iostream **** 
  65:/usr/include/c++/4.8/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  66:/usr/include/c++/4.8/iostream ****   extern wistream wcin;		/// Linked to standard input
  67:/usr/include/c++/4.8/iostream ****   extern wostream wcout;	/// Linked to standard output
  68:/usr/include/c++/4.8/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  69:/usr/include/c++/4.8/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  70:/usr/include/c++/4.8/iostream **** #endif
  71:/usr/include/c++/4.8/iostream ****   //@}
  72:/usr/include/c++/4.8/iostream **** 
  73:/usr/include/c++/4.8/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  74:/usr/include/c++/4.8/iostream ****   static ios_base::Init __ioinit;
 3225              		.loc 13 74 0 is_stmt 1
 3226 099b 488D3D00 		leaq	_ZStL8__ioinit(%rip), %rdi
 3226      000000
 3227 09a2 E8000000 		call	_ZNSt8ios_base4InitC1Ev@PLT
 3227      00
 3228 09a7 488D1500 		leaq	__dso_handle(%rip), %rdx
 3228      000000
 3229 09ae 488D3500 		leaq	_ZStL8__ioinit(%rip), %rsi
 3229      000000
 3230 09b5 488B0500 		movq	_ZNSt8ios_base4InitD1Ev@GOTPCREL(%rip), %rax
 3230      000000
 3231 09bc 4889C7   		movq	%rax, %rdi
 3232 09bf E8000000 		call	__cxa_atexit@PLT
 3232      00
 3233              	.L174:
 3234              		.loc 1 127 0
 3235 09c4 C9       		leave
 3236              		.cfi_def_cfa 7, 8
 3237 09c5 C3       		ret
 3238              		.cfi_endproc
 3239              	.LFE1483:
 3242              	_GLOBAL__sub_I_XmlTestReporter.cpp:
 3243              	.LFB1484:
 3244              		.loc 1 127 0
 3245              		.cfi_startproc
 3246 09c6 55       		pushq	%rbp
 3247              		.cfi_def_cfa_offset 16
 3248              		.cfi_offset 6, -16
 3249 09c7 4889E5   		movq	%rsp, %rbp
 3250              		.cfi_def_cfa_register 6
 3251              		.loc 1 127 0
 3252 09ca BEFFFF00 		movl	$65535, %esi
 3252      00
 3253 09cf BF010000 		movl	$1, %edi
 3253      00
 3254 09d4 E8A5FFFF 		call	_Z41__static_initialization_and_destruction_0ii
 3254      FF
 3255 09d9 5D       		popq	%rbp
 3256              		.cfi_def_cfa 7, 8
 3257 09da C3       		ret
 3258              		.cfi_endproc
 3259              	.LFE1484:
 3261              		.section	.init_array,"aw"
 3262              		.align 8
 3263 0000 00000000 		.quad	_GLOBAL__sub_I_XmlTestReporter.cpp
 3263      00000000 
 3264              		.section	.data.rel.ro.local,"aw",@progbits
 3265              		.align 8
 3268              	_ZZL18__gthread_active_pvE20__gthread_active_ptr:
 3269 0000 00000000 		.quad	_ZL28__gthrw___pthread_key_createPjPFvPvE
 3269      00000000 
 3270              		.weakref	_ZL28__gthrw___pthread_key_createPjPFvPvE,__pthread_key_create
 3271              		.text
 3272              	.Letext0:
 3273              		.file 14 "/usr/include/c++/4.8/cwchar"
 3274              		.file 15 "/usr/include/c++/4.8/bits/char_traits.h"
 3275              		.file 16 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h"
 3276              		.file 17 "/usr/include/c++/4.8/clocale"
 3277              		.file 18 "/usr/include/c++/4.8/bits/basic_string.h"
 3278              		.file 19 "/usr/include/c++/4.8/bits/basic_string.tcc"
 3279              		.file 20 "/usr/include/c++/4.8/bits/vector.tcc"
 3280              		.file 21 "/usr/include/c++/4.8/bits/stringfwd.h"
 3281              		.file 22 "/usr/include/c++/4.8/bits/ios_base.h"
 3282              		.file 23 "/usr/include/c++/4.8/cwctype"
 3283              		.file 24 "/usr/include/c++/4.8/iosfwd"
 3284              		.file 25 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h"
 3285              		.file 26 "/usr/include/c++/4.8/ext/numeric_traits.h"
 3286              		.file 27 "/usr/include/c++/4.8/ext/alloc_traits.h"
 3287              		.file 28 "/usr/include/c++/4.8/bits/cpp_type_traits.h"
 3288              		.file 29 "/usr/include/c++/4.8/debug/debug.h"
 3289              		.file 30 "/usr/include/stdio.h"
 3290              		.file 31 "<built-in>"
 3291              		.file 32 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 3292              		.file 33 "/usr/include/wchar.h"
 3293              		.file 34 "/usr/include/time.h"
 3294              		.file 35 "/usr/include/locale.h"
 3295              		.file 36 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3296              		.file 37 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h"
 3297              		.file 38 "/usr/include/wctype.h"
 18837              		.align 8
 18840              	DW.ref.__gxx_personality_v0:
 18841 0000 00000000 		.quad	__gxx_personality_v0
 18841      00000000 
 18842              		.hidden	__dso_handle
 18843              		.ident	"GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4"
 18844              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 XmlTestReporter.cpp
                             .bss:0000000000000000 _ZStL8__ioinit
     /tmp/ccEvYOAz.s:7      .text:0000000000000000 _ZN12_GLOBAL__N_111ReplaceCharERSscRKSs
     /tmp/ccEvYOAz.s:77     .text:0000000000000075 _ZN12_GLOBAL__N_19XmlEscapeERKSs
     /tmp/ccEvYOAz.s:18840  .data.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccEvYOAz.s:419    .text:00000000000002fb _ZN12_GLOBAL__N_119BuildFailureMessageERKSsiS1_
     /tmp/ccEvYOAz.s:534    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC2Ev
     /tmp/ccEvYOAz.s:534    .text._ZN8UnitTest12TestReporterC2Ev:0000000000000000 _ZN8UnitTest12TestReporterC1Ev
     /tmp/ccEvYOAz.s:564    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC2Ev
     /tmp/ccEvYOAz.s:1425   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccEvYOAz.s:564    .text._ZN8UnitTest20DeferredTestReporterC2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterC1Ev
     /tmp/ccEvYOAz.s:641    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD2Ev
     /tmp/ccEvYOAz.s:1455   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccEvYOAz.s:641    .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD1Ev
     /tmp/ccEvYOAz.s:731    .text._ZN8UnitTest20DeferredTestReporterD0Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD0Ev
     /tmp/ccEvYOAz.s:759    .text:00000000000003e8 _ZN8UnitTest15XmlTestReporterC2ERSo
     /tmp/ccEvYOAz.s:3108   .data.rel.ro._ZTVN8UnitTest15XmlTestReporterE:0000000000000000 _ZTVN8UnitTest15XmlTestReporterE
     /tmp/ccEvYOAz.s:759    .text:00000000000003e8 _ZN8UnitTest15XmlTestReporterC1ERSo
     /tmp/ccEvYOAz.s:796    .text:0000000000000424 _ZN8UnitTest15XmlTestReporter13ReportSummaryEiiif
     /tmp/ccEvYOAz.s:931    .text:000000000000057c _ZN8UnitTest15XmlTestReporter13AddXmlElementERSoPKc
     /tmp/ccEvYOAz.s:994    .text:00000000000005f0 _ZN8UnitTest15XmlTestReporter12BeginResultsERSoiiif
     /tmp/ccEvYOAz.s:1540   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
     /tmp/ccEvYOAz.s:1668   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccEvYOAz.s:1114   .text:000000000000070e _ZN8UnitTest15XmlTestReporter9BeginTestERSoRKNS_18DeferredTestResultE
     /tmp/ccEvYOAz.s:1691   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEptEv
     /tmp/ccEvYOAz.s:1244   .text:0000000000000822 _ZN8UnitTest15XmlTestReporter10AddFailureERSoRKNS_18DeferredTestResultE
     /tmp/ccEvYOAz.s:1197   .text:00000000000007d8 _ZN8UnitTest15XmlTestReporter7EndTestERSoRKNS_18DeferredTestResultE
     /tmp/ccEvYOAz.s:1639   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccEvYOAz.s:1571   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
     /tmp/ccEvYOAz.s:1601   .text._ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:0000000000000000 _ZN9__gnu_cxxneIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
     /tmp/ccEvYOAz.s:1079   .text:00000000000006e8 _ZN8UnitTest15XmlTestReporter10EndResultsERSo
     /tmp/ccEvYOAz.s:1714   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv
     /tmp/ccEvYOAz.s:1841   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEptEv
     /tmp/ccEvYOAz.s:1812   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccEvYOAz.s:1745   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv
     /tmp/ccEvYOAz.s:1775   .text._ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:0000000000000000 _ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
     /tmp/ccEvYOAz.s:1425   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccEvYOAz.s:1893   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev
     /tmp/ccEvYOAz.s:1455   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccEvYOAz.s:2008   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccEvYOAz.s:2029   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
     /tmp/ccEvYOAz.s:1922   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccEvYOAz.s:2060   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS4_
     /tmp/ccEvYOAz.s:2090   .text._ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccEvYOAz.s:2112   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_
     /tmp/ccEvYOAz.s:2142   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccEvYOAz.s:1864   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
     /tmp/ccEvYOAz.s:2200   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccEvYOAz.s:1864   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
     /tmp/ccEvYOAz.s:2164   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC1Ev
     /tmp/ccEvYOAz.s:1893   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC1Ev
     /tmp/ccEvYOAz.s:2230   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccEvYOAz.s:1922   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccEvYOAz.s:2264   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
     /tmp/ccEvYOAz.s:2060   .text._ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS4_
     /tmp/ccEvYOAz.s:2112   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_
     /tmp/ccEvYOAz.s:2164   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC2Ev
     /tmp/ccEvYOAz.s:2295   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccEvYOAz.s:2324   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccEvYOAz.s:2200   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccEvYOAz.s:2348   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
     /tmp/ccEvYOAz.s:2374   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
     /tmp/ccEvYOAz.s:2413   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev
     /tmp/ccEvYOAz.s:2295   .text._ZNSaIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccEvYOAz.s:2324   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccEvYOAz.s:2435   .text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:0000000000000000 _ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
     /tmp/ccEvYOAz.s:2575   .text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:0000000000000000 _ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
     /tmp/ccEvYOAz.s:2413   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC1Ev
     /tmp/ccEvYOAz.s:2459   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD2Ev
     /tmp/ccEvYOAz.s:2600   .text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev
     /tmp/ccEvYOAz.s:2459   .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD1Ev
     /tmp/ccEvYOAz.s:2600   .text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
     /tmp/ccEvYOAz.s:2797   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccEvYOAz.s:2818   .text._ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E
     /tmp/ccEvYOAz.s:2714   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
     /tmp/ccEvYOAz.s:2685   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev
     /tmp/ccEvYOAz.s:2848   .text._ZNSaISt4pairIiSsEED2Ev:0000000000000000 _ZNSaISt4pairIiSsEED2Ev
     /tmp/ccEvYOAz.s:2685   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev
     /tmp/ccEvYOAz.s:2877   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccEvYOAz.s:2714   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev
     /tmp/ccEvYOAz.s:2911   .text._ZSt8_DestroyIPSt4pairIiSsEEvT_S3_:0000000000000000 _ZSt8_DestroyIPSt4pairIiSsEEvT_S3_
     /tmp/ccEvYOAz.s:2942   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
     /tmp/ccEvYOAz.s:2848   .text._ZNSaISt4pairIiSsEED2Ev:0000000000000000 _ZNSaISt4pairIiSsEED1Ev
     /tmp/ccEvYOAz.s:2965   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m
     /tmp/ccEvYOAz.s:2991   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_
     /tmp/ccEvYOAz.s:2942   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev
     /tmp/ccEvYOAz.s:3029   .text._ZSt11__addressofISt4pairIiSsEEPT_RS2_:0000000000000000 _ZSt11__addressofISt4pairIiSsEEPT_RS2_
     /tmp/ccEvYOAz.s:3082   .text._ZSt8_DestroyISt4pairIiSsEEvPT_:0000000000000000 _ZSt8_DestroyISt4pairIiSsEEvPT_
     /tmp/ccEvYOAz.s:3052   .text._ZNSt4pairIiSsED2Ev:0000000000000000 _ZNSt4pairIiSsED2Ev
     /tmp/ccEvYOAz.s:3052   .text._ZNSt4pairIiSsED2Ev:0000000000000000 _ZNSt4pairIiSsED1Ev
     /tmp/ccEvYOAz.s:3193   .data.rel.ro._ZTIN8UnitTest15XmlTestReporterE:0000000000000000 _ZTIN8UnitTest15XmlTestReporterE
     /tmp/ccEvYOAz.s:3121   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD1Ev
     /tmp/ccEvYOAz.s:3164   .text._ZN8UnitTest15XmlTestReporterD0Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD0Ev
     /tmp/ccEvYOAz.s:3121   .text._ZN8UnitTest15XmlTestReporterD2Ev:0000000000000000 _ZN8UnitTest15XmlTestReporterD2Ev
     /tmp/ccEvYOAz.s:3202   .rodata._ZTSN8UnitTest15XmlTestReporterE:0000000000000000 _ZTSN8UnitTest15XmlTestReporterE
     /tmp/ccEvYOAz.s:3206   .text:000000000000097e _Z41__static_initialization_and_destruction_0ii
     /tmp/ccEvYOAz.s:3242   .text:00000000000009c6 _GLOBAL__sub_I_XmlTestReporter.cpp
     /tmp/ccEvYOAz.s:3268   .data.rel.ro.local:0000000000000000 _ZZL18__gthread_active_pvE20__gthread_active_ptr
                           .group:0000000000000000 _ZN8UnitTest12TestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterC5Ev
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterD5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC5ERKS4_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC5ERKS4_
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implC5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEEC5Ev
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultD5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSaISt4pairIiSsEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED5Ev
                           .group:0000000000000000 _ZNSt4pairIiSsED5Ev
                           .group:0000000000000000 _ZN8UnitTest15XmlTestReporterD5Ev

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
_ZNKSs4findEcm
_ZNSs7replaceEmmRKSs
_ZNSsC1ERKSs
_ZNSaIcEC1Ev
_ZNSsC1EPKcRKSaIcE
_ZNSsD1Ev
_ZNSaIcED1Ev
_Unwind_Resume
__gxx_personality_v0
_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEEC1ESt13_Ios_Openmode
_ZStlsIcSt11char_traitsIcESaIcEERSt13basic_ostreamIT_T0_ES7_RKSbIS4_S5_T1_E
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNSolsEi
_ZNKSt19basic_ostringstreamIcSt11char_traitsIcESaIcEE3strEv
_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
_ZTVN8UnitTest12TestReporterE
_ZTVN8UnitTest20DeferredTestReporterE
_ZN8UnitTest12TestReporterD2Ev
_ZdlPv
_ZN8UnitTest20DeferredTestReporter10GetResultsEv
_ZNSolsEf
_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest20DeferredTestReporterE
_ZNSt8ios_base4InitC1Ev
__dso_handle
_ZNSt8ios_base4InitD1Ev
__cxa_atexit
__pthread_key_create
