   1              		.file	"prog.c"
   2              		.text
   3              	.Ltext0:
   5              	littleEndian32:
   6              	.LFB3:
   7              		.file 1 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h"
   1:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** /*
   2:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * Copyright (C) 2009-2012 Chris McClelland
   3:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  *
   4:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * This program is free software: you can redistribute it and/or modify
   5:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * it under the terms of the GNU Lesser General Public License as published by
   6:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * the Free Software Foundation, either version 3 of the License, or
   7:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * (at your option) any later version.
   8:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  *
   9:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * This program is distributed in the hope that it will be useful,
  10:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * GNU Lesser General Public License for more details.
  13:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  *
  14:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * You should have received a copy of the GNU Lesser General Public License
  15:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h ****  */
  17:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  18:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #ifndef MAKESTUFF_H
  19:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define MAKESTUFF_H
  20:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  21:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #include <stddef.h>
  22:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  23:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #ifndef __cplusplus
  24:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#ifdef WIN32
  25:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		typedef char bool;
  26:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		enum {
  27:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 			false = 0,
  28:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 			true = 1
  29:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		};
  30:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#else
  31:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#include <stdbool.h>
  32:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#endif
  33:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #endif
  34:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  35:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #ifdef WIN32
  36:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT
  37:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) __declspec(dllexport) t __stdcall
  38:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#define PFSZD "%Iu"
  39:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#ifdef _WIN64
  40:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#define PFSZH "%016IX"
  41:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  42:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#else
  43:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#define PFSZH "%08IX"
  44:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  45:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#endif
  46:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #else
  47:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#define WARN_UNUSED_RESULT __attribute__((warn_unused_result))
  48:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#define DLLEXPORT(t) t
  49:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#define PFSZD "%zu"
  50:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#ifdef __LP64__
  51:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#define PFSZH "%016zX"
  52:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 64
  53:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#else
  54:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#define PFSZH "%08zX"
  55:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#define WORD_LENGTH 32
  56:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#endif
  57:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #endif
  58:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  59:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #ifndef NULL
  60:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#define NULL ((void*)0)
  61:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #endif
  62:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  63:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** typedef unsigned char      uint8;
  64:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** typedef unsigned short     uint16;
  65:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #ifndef __cplusplus
  66:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#ifndef SDCC
  67:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		typedef unsigned long long uint64;
  68:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#endif
  69:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #endif
  70:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  71:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** typedef signed char        int8;
  72:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** typedef signed short       int16;
  73:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  74:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #if (defined __AVR__ && defined __GNUC__) || defined SDCC
  75:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	// The embedded platforms have sizeof(int) = 2, so use long
  76:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	typedef signed long    int32;
  77:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	typedef unsigned long  uint32;
  78:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #else
  79:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	// The i686 & x86_64 have sizeof(int) = 4
  80:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	typedef signed int     int32;
  81:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	typedef unsigned int   uint32;
  82:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #endif
  83:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  84:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #ifndef __cplusplus
  85:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#ifndef SDCC
  86:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		typedef signed long long int64;
  87:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#endif
  88:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #endif
  89:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  90:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** typedef unsigned int       bitfield;
  91:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
  92:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #if defined __GNUC__
  93:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#define swap32(x) __builtin_bswap32(x)
  94:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #elif defined WIN32
  95:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#ifdef __cplusplus
  96:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		extern "C"
  97:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#endif
  98:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	unsigned long  __cdecl _byteswap_ulong(unsigned long);
  99:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#define swap32(x) _byteswap_ulong(x)
 100:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#ifndef __cplusplus
 101:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		#define inline __inline
 102:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#endif
 103:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #endif
 104:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define swap16(x) ((uint16)((((x) & 0x00FF) << 8) | (((x) >> 8) & 0x00FF)))
 105:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
 106:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** // The C standard requires this two-level indirection thing
 107:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #undef CONCAT
 108:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define CONCAT_INTERNAL(x, y) x ## y
 109:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define CONCAT(x, y) CONCAT_INTERNAL(x, y)
 110:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
 111:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define STR_INTERNAL(x) #x
 112:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define STR(x) STR_INTERNAL(x)
 113:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
 114:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** // The VA_NARGS() macro - count the number of arguments in a C99 variadic macro
 115:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define VA_EXPAND(x) x
 116:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define VA_NARGS(...) VA_EXPAND(VA_NARGS_INTERNAL(__VA_ARGS__, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
 117:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define VA_NARGS_INTERNAL(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y
 118:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define FAIL(code, label) { retVal = code; goto label; }
 119:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
 120:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** // The CHECK_STATUS() macro - if condition is true, set a returnCode and jump to a label (exit,
 121:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** // cleanup etc). If liberror is included you can also give an error message.
 122:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define CHECK_INTERNAL3(condition, code, label) if ( condition ) { FAIL(code, label); }
 123:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define CHECK_INTERNAL4(condition, code, label, prefix) LIBERROR_IS_REQUIRED
 124:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define CHECK_INTERNAL5(condition, code, label, ...) LIBERROR_IS_REQUIRED
 125:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #define CHECK_STATUS(...) VA_EXPAND(CONCAT(CHECK_INTERNAL, VA_NARGS(__VA_ARGS__))(__VA_ARGS__))
 126:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 
 127:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** #ifdef BYTE_ORDER
 128:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 	#if BYTE_ORDER == 1234
 129:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		// Little-endian machines
 130:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		static inline uint16 bigEndian16(uint16 x) {
 131:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 			return swap16(x);
 132:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		}
 133:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		static inline uint32 bigEndian32(uint32 x) {
 134:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 			return swap32(x);
 135:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		}
 136:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		static inline uint16 littleEndian16(uint16 x) {
 137:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 			return x;
 138:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		}
 139:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		static inline uint32 littleEndian32(uint32 x) {
   8              		.loc 1 139 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 897DFC   		movl	%edi, -4(%rbp)
 140:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 			return x;
  16              		.loc 1 140 0
  17 0007 8B45FC   		movl	-4(%rbp), %eax
 141:/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/common/makestuff.h **** 		}
  18              		.loc 1 141 0
  19 000a 5D       		popq	%rbp
  20              		.cfi_def_cfa 7, 8
  21 000b C3       		ret
  22              		.cfi_endproc
  23              	.LFE3:
  25              		.section	.rodata
  26              	.LC0:
  27 0000 62656769 		.string	"beginShift()"
  27      6E536869 
  27      66742829 
  27      00
  28              		.text
  30              	beginShift:
  31              	.LFB4:
  32              		.file 2 "prog.c"
   1:prog.c        **** /*
   2:prog.c        ****  * Copyright (C) 2009-2012 Chris McClelland
   3:prog.c        ****  *
   4:prog.c        ****  * This program is free software: you can redistribute it and/or modify
   5:prog.c        ****  * it under the terms of the GNU Lesser General Public License as published by
   6:prog.c        ****  * the Free Software Foundation, either version 3 of the License, or
   7:prog.c        ****  * (at your option) any later version.
   8:prog.c        ****  *
   9:prog.c        ****  * This program is distributed in the hope that it will be useful,
  10:prog.c        ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:prog.c        ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:prog.c        ****  * GNU Lesser General Public License for more details.
  13:prog.c        ****  *
  14:prog.c        ****  * You should have received a copy of the GNU Lesser General Public License
  15:prog.c        ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:prog.c        ****  */
  17:prog.c        **** #include <stdlib.h>
  18:prog.c        **** #include <string.h>
  19:prog.c        **** #include <makestuff.h>
  20:prog.c        **** #include <libusbwrap.h>
  21:prog.c        **** #include <liberror.h>
  22:prog.c        **** #include "libfpgalink.h"
  23:prog.c        **** #include "private.h"
  24:prog.c        **** #include "csvfplay.h"
  25:prog.c        **** #include "vendorCommands.h"
  26:prog.c        **** 
  27:prog.c        **** // ------------------------------------------------------------------------------------------------
  28:prog.c        **** // Implementation of private functions
  29:prog.c        **** // ------------------------------------------------------------------------------------------------
  30:prog.c        **** 
  31:prog.c        **** // Kick off a shift operation on the micro. This will typically be followed by a bunch of sends and
  32:prog.c        **** // receives on EP1OUT & EP1IN. This operation specifies the operation (i.e one of four JTAG shift
  33:prog.c        **** // operations, parallel shift or serial shift. It also specifies a count, which is either a bit-
  34:prog.c        **** // count or a byte-count depending on the context.
  35:prog.c        **** //
  36:prog.c        **** // Called by:
  37:prog.c        **** //   jtagShiftInOut() -> beginShift()
  38:prog.c        **** //   flProgram() -> xProgram() -> fileWrite() -> dataWrite() -> beginShift()
  39:prog.c        **** //
  40:prog.c        **** static FLStatus beginShift(
  41:prog.c        **** 	struct FLContext *handle, uint32 count, ProgOp progOp, uint8 mode, const char **error)
  42:prog.c        **** {
  33              		.loc 2 42 0
  34              		.cfi_startproc
  35 000c 55       		pushq	%rbp
  36              		.cfi_def_cfa_offset 16
  37              		.cfi_offset 6, -16
  38 000d 4889E5   		movq	%rsp, %rbp
  39              		.cfi_def_cfa_register 6
  40 0010 53       		pushq	%rbx
  41 0011 4883EC58 		subq	$88, %rsp
  42              		.cfi_offset 3, -24
  43 0015 48897DC8 		movq	%rdi, -56(%rbp)
  44 0019 8975C4   		movl	%esi, -60(%rbp)
  45 001c 8955C0   		movl	%edx, -64(%rbp)
  46 001f 89C8     		movl	%ecx, %eax
  47 0021 4C8945B0 		movq	%r8, -80(%rbp)
  48 0025 8845BC   		movb	%al, -68(%rbp)
  49              		.loc 2 42 0
  50 0028 64488B04 		movq	%fs:40, %rax
  50      25280000 
  50      00
  51 0031 488945E8 		movq	%rax, -24(%rbp)
  52 0035 31C0     		xorl	%eax, %eax
  43:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
  53              		.loc 2 43 0
  54 0037 C745D800 		movl	$0, -40(%rbp)
  54      000000
  44:prog.c        **** 	USBStatus uStatus;
  45:prog.c        **** 	union {
  46:prog.c        **** 		uint32 u32;
  47:prog.c        **** 		uint8 bytes[4];
  48:prog.c        **** 	} countUnion;
  49:prog.c        **** 	countUnion.u32 = littleEndian32(count);
  55              		.loc 2 49 0
  56 003e 8B45C4   		movl	-60(%rbp), %eax
  57 0041 89C7     		movl	%eax, %edi
  58 0043 E8B8FFFF 		call	littleEndian32
  58      FF
  59 0048 8945E0   		movl	%eax, -32(%rbp)
  50:prog.c        **** 	uStatus = usbControlWrite(
  51:prog.c        **** 		handle->device,
  52:prog.c        **** 		CMD_PROG_CLOCK_DATA,  // bRequest
  53:prog.c        **** 		(uint8)mode,          // wValue
  54:prog.c        **** 		(uint8)progOp,        // wIndex
  60              		.loc 2 54 0
  61 004b 8B45C0   		movl	-64(%rbp), %eax
  50:prog.c        **** 	uStatus = usbControlWrite(
  62              		.loc 2 50 0
  63 004e 0FB6C8   		movzbl	%al, %ecx
  64 0051 0FB655BC 		movzbl	-68(%rbp), %edx
  65 0055 488B45C8 		movq	-56(%rbp), %rax
  66 0059 488B00   		movq	(%rax), %rax
  67 005c 488D7DE0 		leaq	-32(%rbp), %rdi
  68 0060 488B75B0 		movq	-80(%rbp), %rsi
  69 0064 48897424 		movq	%rsi, 8(%rsp)
  69      08
  70 0069 C7042488 		movl	$5000, (%rsp)
  70      130000
  71 0070 41B90400 		movl	$4, %r9d
  71      0000
  72 0076 4989F8   		movq	%rdi, %r8
  73 0079 BE810000 		movl	$129, %esi
  73      00
  74 007e 4889C7   		movq	%rax, %rdi
  75 0081 E8000000 		call	usbControlWrite@PLT
  75      00
  76 0086 8945DC   		movl	%eax, -36(%rbp)
  55:prog.c        **** 		countUnion.bytes,     // send count
  56:prog.c        **** 		4,                    // wLength
  57:prog.c        **** 		5000,                 // timeout (ms)
  58:prog.c        **** 		error
  59:prog.c        **** 	);
  60:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_SHIFT, cleanup, "beginShift()");
  77              		.loc 2 60 0
  78 0089 837DDC00 		cmpl	$0, -36(%rbp)
  79 008d 741B     		je	.L4
  80              		.loc 2 60 0 is_stmt 0 discriminator 1
  81 008f 488B45B0 		movq	-80(%rbp), %rax
  82 0093 488D3500 		leaq	.LC0(%rip), %rsi
  82      000000
  83 009a 4889C7   		movq	%rax, %rdi
  84 009d E8000000 		call	errPrefix@PLT
  84      00
  85 00a2 C745D80F 		movl	$15, -40(%rbp)
  85      000000
  86 00a9 90       		nop
  87              	.L4:
  61:prog.c        **** cleanup:
  62:prog.c        **** 	return retVal;
  88              		.loc 2 62 0 is_stmt 1
  89 00aa 8B45D8   		movl	-40(%rbp), %eax
  63:prog.c        **** }
  90              		.loc 2 63 0
  91 00ad 488B5DE8 		movq	-24(%rbp), %rbx
  92 00b1 6448331C 		xorq	%fs:40, %rbx
  92      25280000 
  92      00
  93 00ba 7405     		je	.L6
  94 00bc E8000000 		call	__stack_chk_fail@PLT
  94      00
  95              	.L6:
  96 00c1 4883C458 		addq	$88, %rsp
  97 00c5 5B       		popq	%rbx
  98 00c6 5D       		popq	%rbp
  99              		.cfi_def_cfa 7, 8
 100 00c7 C3       		ret
 101              		.cfi_endproc
 102              	.LFE4:
 104              		.section	.rodata
 105              	.LC1:
 106 000d 646F5365 		.string	"doSend()"
 106      6E642829 
 106      00
 107              		.text
 109              	doSend:
 110              	.LFB5:
  64:prog.c        **** 
  65:prog.c        **** // Send a chunk of data to the micro on EP1OUT. The previous call to beginShift() specifies what th
  66:prog.c        **** // micro should actually do with the data.
  67:prog.c        **** //
  68:prog.c        **** // Called by:
  69:prog.c        **** //   jtagShiftInOut() -> doSend()
  70:prog.c        **** //   flProgram() -> xProgram() -> fileWrite() -> dataWrite() -> doSend()
  71:prog.c        **** //
  72:prog.c        **** static FLStatus doSend(
  73:prog.c        **** 	struct FLContext *handle, const uint8 *sendPtr, uint16 chunkSize, const char **error)
  74:prog.c        **** {
 111              		.loc 2 74 0
 112              		.cfi_startproc
 113 00c8 55       		pushq	%rbp
 114              		.cfi_def_cfa_offset 16
 115              		.cfi_offset 6, -16
 116 00c9 4889E5   		movq	%rsp, %rbp
 117              		.cfi_def_cfa_register 6
 118 00cc 4883EC30 		subq	$48, %rsp
 119 00d0 48897DE8 		movq	%rdi, -24(%rbp)
 120 00d4 488975E0 		movq	%rsi, -32(%rbp)
 121 00d8 89D0     		movl	%edx, %eax
 122 00da 48894DD0 		movq	%rcx, -48(%rbp)
 123 00de 668945DC 		movw	%ax, -36(%rbp)
  75:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 124              		.loc 2 75 0
 125 00e2 C745F800 		movl	$0, -8(%rbp)
 125      000000
  76:prog.c        **** 	USBStatus uStatus = usbBulkWrite(
 126              		.loc 2 76 0
 127 00e9 0FB74DDC 		movzwl	-36(%rbp), %ecx
  77:prog.c        **** 		handle->device,
  78:prog.c        **** 		handle->progOutEP,    // write to out endpoint
 128              		.loc 2 78 0
 129 00ed 488B45E8 		movq	-24(%rbp), %rax
 130 00f1 0FB64015 		movzbl	21(%rax), %eax
  76:prog.c        **** 	USBStatus uStatus = usbBulkWrite(
 131              		.loc 2 76 0
 132 00f5 0FB6F0   		movzbl	%al, %esi
 133 00f8 488B45E8 		movq	-24(%rbp), %rax
 134 00fc 488B00   		movq	(%rax), %rax
 135 00ff 488B7DD0 		movq	-48(%rbp), %rdi
 136 0103 488B55E0 		movq	-32(%rbp), %rdx
 137 0107 4989F9   		movq	%rdi, %r9
 138 010a 41B88813 		movl	$5000, %r8d
 138      0000
 139 0110 4889C7   		movq	%rax, %rdi
 140 0113 E8000000 		call	usbBulkWrite@PLT
 140      00
 141 0118 8945FC   		movl	%eax, -4(%rbp)
  79:prog.c        **** 		sendPtr,              // write from send buffer
  80:prog.c        **** 		chunkSize,            // write this many bytes
  81:prog.c        **** 		5000,                 // timeout in milliseconds
  82:prog.c        **** 		error
  83:prog.c        **** 	);
  84:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_SEND, cleanup, "doSend()");
 142              		.loc 2 84 0
 143 011b 837DFC00 		cmpl	$0, -4(%rbp)
 144 011f 741B     		je	.L8
 145              		.loc 2 84 0 is_stmt 0 discriminator 1
 146 0121 488B45D0 		movq	-48(%rbp), %rax
 147 0125 488D3500 		leaq	.LC1(%rip), %rsi
 147      000000
 148 012c 4889C7   		movq	%rax, %rdi
 149 012f E8000000 		call	errPrefix@PLT
 149      00
 150 0134 C745F80D 		movl	$13, -8(%rbp)
 150      000000
 151 013b 90       		nop
 152              	.L8:
  85:prog.c        **** cleanup:
  86:prog.c        **** 	return retVal;
 153              		.loc 2 86 0 is_stmt 1
 154 013c 8B45F8   		movl	-8(%rbp), %eax
  87:prog.c        **** }
 155              		.loc 2 87 0
 156 013f C9       		leave
 157              		.cfi_def_cfa 7, 8
 158 0140 C3       		ret
 159              		.cfi_endproc
 160              	.LFE5:
 162              		.section	.rodata
 163              	.LC2:
 164 0016 646F5265 		.string	"doReceive()"
 164      63656976 
 164      65282900 
 165              		.text
 167              	doReceive:
 168              	.LFB6:
  88:prog.c        **** 
  89:prog.c        **** // Receive a chunk of data from the micro on EP1IN. The previous call to beginShift() specifies the
  90:prog.c        **** // source of the data.
  91:prog.c        **** //
  92:prog.c        **** // Called by:
  93:prog.c        **** //   jtagShiftInOut() -> doReceive()
  94:prog.c        **** //
  95:prog.c        **** static FLStatus doReceive(
  96:prog.c        **** 	struct FLContext *handle, uint8 *receivePtr, uint16 chunkSize, const char **error)
  97:prog.c        **** {
 169              		.loc 2 97 0
 170              		.cfi_startproc
 171 0141 55       		pushq	%rbp
 172              		.cfi_def_cfa_offset 16
 173              		.cfi_offset 6, -16
 174 0142 4889E5   		movq	%rsp, %rbp
 175              		.cfi_def_cfa_register 6
 176 0145 4883EC30 		subq	$48, %rsp
 177 0149 48897DE8 		movq	%rdi, -24(%rbp)
 178 014d 488975E0 		movq	%rsi, -32(%rbp)
 179 0151 89D0     		movl	%edx, %eax
 180 0153 48894DD0 		movq	%rcx, -48(%rbp)
 181 0157 668945DC 		movw	%ax, -36(%rbp)
  98:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 182              		.loc 2 98 0
 183 015b C745F800 		movl	$0, -8(%rbp)
 183      000000
  99:prog.c        **** 	USBStatus uStatus = usbBulkRead(
 184              		.loc 2 99 0
 185 0162 0FB74DDC 		movzwl	-36(%rbp), %ecx
 100:prog.c        **** 		handle->device,
 101:prog.c        **** 		handle->progInEP,    // read from in endpoint
 186              		.loc 2 101 0
 187 0166 488B45E8 		movq	-24(%rbp), %rax
 188 016a 0FB64016 		movzbl	22(%rax), %eax
  99:prog.c        **** 	USBStatus uStatus = usbBulkRead(
 189              		.loc 2 99 0
 190 016e 0FB6F0   		movzbl	%al, %esi
 191 0171 488B45E8 		movq	-24(%rbp), %rax
 192 0175 488B00   		movq	(%rax), %rax
 193 0178 488B7DD0 		movq	-48(%rbp), %rdi
 194 017c 488B55E0 		movq	-32(%rbp), %rdx
 195 0180 4989F9   		movq	%rdi, %r9
 196 0183 41B88813 		movl	$5000, %r8d
 196      0000
 197 0189 4889C7   		movq	%rax, %rdi
 198 018c E8000000 		call	usbBulkRead@PLT
 198      00
 199 0191 8945FC   		movl	%eax, -4(%rbp)
 102:prog.c        **** 		receivePtr,          // read into the receive buffer
 103:prog.c        **** 		chunkSize,           // read this many bytes
 104:prog.c        **** 		5000,                // timeout in milliseconds
 105:prog.c        **** 		error
 106:prog.c        **** 	);
 107:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_RECV, cleanup, "doReceive()");
 200              		.loc 2 107 0
 201 0194 837DFC00 		cmpl	$0, -4(%rbp)
 202 0198 741B     		je	.L11
 203              		.loc 2 107 0 is_stmt 0 discriminator 1
 204 019a 488B45D0 		movq	-48(%rbp), %rax
 205 019e 488D3500 		leaq	.LC2(%rip), %rsi
 205      000000
 206 01a5 4889C7   		movq	%rax, %rdi
 207 01a8 E8000000 		call	errPrefix@PLT
 207      00
 208 01ad C745F80E 		movl	$14, -8(%rbp)
 208      000000
 209 01b4 90       		nop
 210              	.L11:
 108:prog.c        **** cleanup:
 109:prog.c        **** 	return retVal;
 211              		.loc 2 109 0 is_stmt 1
 212 01b5 8B45F8   		movl	-8(%rbp), %eax
 110:prog.c        **** }
 213              		.loc 2 110 0
 214 01b8 C9       		leave
 215              		.cfi_def_cfa 7, 8
 216 01b9 C3       		ret
 217              		.cfi_endproc
 218              	.LFE6:
 220              		.section	.rodata
 221 0022 00000000 		.align 8
 221      0000
 222              	.LC3:
 223 0028 20202020 		.string	"                                                                                         
 223      20202020 
 223      20202020 
 223      20202020 
 223      20202020 
 224              		.text
 226              	spaces:
 227              	.LFB7:
 111:prog.c        **** 
 112:prog.c        **** static const char *spaces(ptrdiff_t n) {
 228              		.loc 2 112 0
 229              		.cfi_startproc
 230 01ba 55       		pushq	%rbp
 231              		.cfi_def_cfa_offset 16
 232              		.cfi_offset 6, -16
 233 01bb 4889E5   		movq	%rsp, %rbp
 234              		.cfi_def_cfa_register 6
 235 01be 48897DE8 		movq	%rdi, -24(%rbp)
 113:prog.c        **** 	const char *const s =
 236              		.loc 2 113 0
 237 01c2 488D0500 		leaq	.LC3(%rip), %rax
 237      000000
 238 01c9 488945F8 		movq	%rax, -8(%rbp)
 114:prog.c        **** 		"                                                                "
 115:prog.c        **** 		"                                                                "
 116:prog.c        **** 		"                                                                "
 117:prog.c        **** 		"                                                                ";
 118:prog.c        **** 	return s + 256-n;
 239              		.loc 2 118 0
 240 01cd 488B45E8 		movq	-24(%rbp), %rax
 241 01d1 BA000100 		movl	$256, %edx
 241      00
 242 01d6 4829C2   		subq	%rax, %rdx
 243 01d9 488B45F8 		movq	-8(%rbp), %rax
 244 01dd 4801D0   		addq	%rdx, %rax
 119:prog.c        **** }
 245              		.loc 2 119 0
 246 01e0 5D       		popq	%rbp
 247              		.cfi_def_cfa 7, 8
 248 01e1 C3       		ret
 249              		.cfi_endproc
 250              	.LFE7:
 252              		.section	.rodata
 253 0129 00000000 		.align 8
 253      000000
 254              	.LC4:
 255 0130 706F7075 		.string	"populateMap(): Unexpected end of config string:\n  %s\n  %s^"
 255      6C617465 
 255      4D617028 
 255      293A2055 
 255      6E657870 
 256 016b 00000000 		.align 8
 256      00
 257              	.LC5:
 258 0170 706F7075 		.string	"populateMap(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 258      6C617465 
 258      4D617028 
 258      293A2050 
 258      6F727420 
 259 01b6 0000     		.align 8
 260              	.LC6:
 261 01b8 706F7075 		.string	"populateMap(): Bit number is not valid:\n  %s\n  %s^"
 261      6C617465 
 261      4D617028 
 261      293A2042 
 261      6974206E 
 262 01eb 00000000 		.align 8
 262      00
 263              	.LC7:
 264 01f0 706F7075 		.string	"populateMap(): port '%c%d' is already used:\n  %s\n  %s^"
 264      6C617465 
 264      4D617028 
 264      293A2070 
 264      6F727420 
 265 0227 00       		.align 8
 266              	.LC8:
 267 0228 706F7075 		.string	"populateMap(): Expecting '+', '-' or '?' at char %d"
 267      6C617465 
 267      4D617028 
 267      293A2045 
 267      78706563 
 268              		.text
 270              	populateMap:
 271              	.LFB8:
 120:prog.c        **** 
 121:prog.c        **** #define GET_CHAR(func) \
 122:prog.c        **** 	ch = *ptr; \
 123:prog.c        **** 	CHECK_STATUS( \
 124:prog.c        **** 		ch == '\0', FL_CONF_FORMAT, cleanup, \
 125:prog.c        **** 		func"(): Unexpected end of config string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig))
 126:prog.c        **** 
 127:prog.c        **** #define EXPECT_CHAR(ex, func) \
 128:prog.c        **** 	GET_CHAR(func) \
 129:prog.c        **** 	CHECK_STATUS( \
 130:prog.c        **** 		ch != ex, FL_CONF_FORMAT, cleanup, \
 131:prog.c        **** 		func"(): Expecting "#ex":\n  %s\n  %s^", portConfig, spaces(ptr-portConfig)); \
 132:prog.c        **** 	ptr++
 133:prog.c        **** 
 134:prog.c        **** #define GET_PORT(port, func) \
 135:prog.c        **** 	GET_CHAR(func) \
 136:prog.c        **** 	CHECK_STATUS( \
 137:prog.c        **** 		ch < 'A' || ch > 'Z', FL_CONF_FORMAT, cleanup, \
 138:prog.c        **** 		func"(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^", portConfig, spaces(ptr-portCo
 139:prog.c        **** 	port = (uint8)(ch - 'A'); \
 140:prog.c        **** 	ptr++
 141:prog.c        **** 
 142:prog.c        **** #define GET_BIT(bit, func) \
 143:prog.c        **** 	GET_CHAR(func) \
 144:prog.c        **** 	CHECK_STATUS( \
 145:prog.c        **** 		ch < '0' || ch > '9', FL_CONF_FORMAT, cleanup, \
 146:prog.c        **** 		func"(): Bit number is not valid:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig)); \
 147:prog.c        **** 	bit = (uint8)(strtoul(ptr, (char**)&ptr, 10));
 148:prog.c        **** 
 149:prog.c        **** #define GET_DIGIT(bit, func) \
 150:prog.c        **** 	GET_CHAR(func) \
 151:prog.c        **** 	CHECK_STATUS( \
 152:prog.c        **** 		ch < '0' || ch > '7', FL_CONF_FORMAT, cleanup, \
 153:prog.c        **** 		func"(): Bit '%c' is not valid at char %d", ch, ptr-portConfig); \
 154:prog.c        **** 	bit = (uint8)(ch - '0'); \
 155:prog.c        **** 	ptr++
 156:prog.c        **** 
 157:prog.c        **** #define GET_PAIR(port, bit, func) \
 158:prog.c        **** 	GET_PORT(port, func); \
 159:prog.c        **** 	GET_BIT(bit, func)
 160:prog.c        **** 
 161:prog.c        **** #define SET_BIT(port, bit, status, func) \
 162:prog.c        **** 	CHECK_STATUS( \
 163:prog.c        **** 		pinMap[port][bit] != PIN_UNUSED, FL_CONF_FORMAT, cleanup,					\
 164:prog.c        **** 		func"(): port '%c%d' is already used:\n  %s\n  %s^", port+'A', bit, portConfig, spaces(ptr-portCo
 165:prog.c        **** 	pinMap[port][bit] = status
 166:prog.c        **** 
 167:prog.c        **** // This function parses a comma-separated list of ports with a suffix representing the desired stat
 168:prog.c        **** // of the port, e.g "A0+,B5-,D7/" means "PA0 is an output driven high, PB5 is an output driven low,
 169:prog.c        **** // and PD7 is an input". The result is recorded in the pinMap array, which is assumed to be of
 170:prog.c        **** // length 5*8=40. The parse stops when it encounters something other than a comma separator, and th
 171:prog.c        **** // location of that character stored in *endPtr.
 172:prog.c        **** //
 173:prog.c        **** // Called by:
 174:prog.c        **** //   xProgram() -> populateMap()
 175:prog.c        **** //
 176:prog.c        **** static FLStatus populateMap(
 177:prog.c        **** 	const char *portConfig, const char *ptr, const char **endPtr,
 178:prog.c        **** 	PinConfig pinMap[26][32], const char **error)
 179:prog.c        **** {
 272              		.loc 2 179 0
 273              		.cfi_startproc
 274 01e2 55       		pushq	%rbp
 275              		.cfi_def_cfa_offset 16
 276              		.cfi_offset 6, -16
 277 01e3 4889E5   		movq	%rsp, %rbp
 278              		.cfi_def_cfa_register 6
 279 01e6 4883EC40 		subq	$64, %rsp
 280 01ea 48897DE8 		movq	%rdi, -24(%rbp)
 281 01ee 488975E0 		movq	%rsi, -32(%rbp)
 282 01f2 488955D8 		movq	%rdx, -40(%rbp)
 283 01f6 48894DD0 		movq	%rcx, -48(%rbp)
 284 01fa 4C8945C8 		movq	%r8, -56(%rbp)
 180:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 285              		.loc 2 180 0
 286 01fe C745FC00 		movl	$0, -4(%rbp)
 286      000000
 287              	.L31:
 181:prog.c        **** 	uint8 thisPort, thisBit;
 182:prog.c        **** 	char ch;
 183:prog.c        **** 	do {
 184:prog.c        **** 		GET_PAIR(thisPort, thisBit, "populateMap");
 288              		.loc 2 184 0
 289 0205 488B45E0 		movq	-32(%rbp), %rax
 290 0209 0FB600   		movzbl	(%rax), %eax
 291 020c 8845F9   		movb	%al, -7(%rbp)
 292 020f 807DF900 		cmpb	$0, -7(%rbp)
 293 0213 7544     		jne	.L16
 294              		.loc 2 184 0 is_stmt 0 discriminator 1
 295 0215 488B45E0 		movq	-32(%rbp), %rax
 296 0219 4889C2   		movq	%rax, %rdx
 297 021c 488B45E8 		movq	-24(%rbp), %rax
 298 0220 4829C2   		subq	%rax, %rdx
 299 0223 4889D0   		movq	%rdx, %rax
 300 0226 4889C7   		movq	%rax, %rdi
 301 0229 E88CFFFF 		call	spaces
 301      FF
 302 022e 4889C1   		movq	%rax, %rcx
 303 0231 488B55E8 		movq	-24(%rbp), %rdx
 304 0235 488B45C8 		movq	-56(%rbp), %rax
 305 0239 488D3500 		leaq	.LC4(%rip), %rsi
 305      000000
 306 0240 4889C7   		movq	%rax, %rdi
 307 0243 B8000000 		movl	$0, %eax
 307      00
 308 0248 E8000000 		call	errRender@PLT
 308      00
 309 024d C745FC0B 		movl	$11, -4(%rbp)
 309      000000
 310 0254 E9E10300 		jmp	.L17
 310      00
 311              	.L16:
 312              		.loc 2 184 0 discriminator 2
 313 0259 807DF940 		cmpb	$64, -7(%rbp)
 314 025d 7E06     		jle	.L18
 315 025f 807DF95A 		cmpb	$90, -7(%rbp)
 316 0263 7E44     		jle	.L19
 317              	.L18:
 318              		.loc 2 184 0 discriminator 1
 319 0265 488B45E0 		movq	-32(%rbp), %rax
 320 0269 4889C2   		movq	%rax, %rdx
 321 026c 488B45E8 		movq	-24(%rbp), %rax
 322 0270 4829C2   		subq	%rax, %rdx
 323 0273 4889D0   		movq	%rdx, %rax
 324 0276 4889C7   		movq	%rax, %rdi
 325 0279 E83CFFFF 		call	spaces
 325      FF
 326 027e 4889C1   		movq	%rax, %rcx
 327 0281 488B55E8 		movq	-24(%rbp), %rdx
 328 0285 488B45C8 		movq	-56(%rbp), %rax
 329 0289 488D3500 		leaq	.LC5(%rip), %rsi
 329      000000
 330 0290 4889C7   		movq	%rax, %rdi
 331 0293 B8000000 		movl	$0, %eax
 331      00
 332 0298 E8000000 		call	errRender@PLT
 332      00
 333 029d C745FC0B 		movl	$11, -4(%rbp)
 333      000000
 334 02a4 E9910300 		jmp	.L17
 334      00
 335              	.L19:
 336 02a9 0FB645F9 		movzbl	-7(%rbp), %eax
 337 02ad 83E841   		subl	$65, %eax
 338 02b0 8845FA   		movb	%al, -6(%rbp)
 339 02b3 488B45E0 		movq	-32(%rbp), %rax
 340 02b7 4883C001 		addq	$1, %rax
 341 02bb 488945E0 		movq	%rax, -32(%rbp)
 342 02bf 488B45E0 		movq	-32(%rbp), %rax
 343 02c3 0FB600   		movzbl	(%rax), %eax
 344 02c6 8845F9   		movb	%al, -7(%rbp)
 345 02c9 807DF900 		cmpb	$0, -7(%rbp)
 346 02cd 7544     		jne	.L20
 347 02cf 488B45E0 		movq	-32(%rbp), %rax
 348 02d3 4889C2   		movq	%rax, %rdx
 349 02d6 488B45E8 		movq	-24(%rbp), %rax
 350 02da 4829C2   		subq	%rax, %rdx
 351 02dd 4889D0   		movq	%rdx, %rax
 352 02e0 4889C7   		movq	%rax, %rdi
 353 02e3 E8D2FEFF 		call	spaces
 353      FF
 354 02e8 4889C1   		movq	%rax, %rcx
 355 02eb 488B55E8 		movq	-24(%rbp), %rdx
 356 02ef 488B45C8 		movq	-56(%rbp), %rax
 357 02f3 488D3500 		leaq	.LC4(%rip), %rsi
 357      000000
 358 02fa 4889C7   		movq	%rax, %rdi
 359 02fd B8000000 		movl	$0, %eax
 359      00
 360 0302 E8000000 		call	errRender@PLT
 360      00
 361 0307 C745FC0B 		movl	$11, -4(%rbp)
 361      000000
 362 030e E9270300 		jmp	.L17
 362      00
 363              	.L20:
 364              		.loc 2 184 0 discriminator 2
 365 0313 807DF92F 		cmpb	$47, -7(%rbp)
 366 0317 7E06     		jle	.L21
 367 0319 807DF939 		cmpb	$57, -7(%rbp)
 368 031d 7E44     		jle	.L22
 369              	.L21:
 370              		.loc 2 184 0 discriminator 1
 371 031f 488B45E0 		movq	-32(%rbp), %rax
 372 0323 4889C2   		movq	%rax, %rdx
 373 0326 488B45E8 		movq	-24(%rbp), %rax
 374 032a 4829C2   		subq	%rax, %rdx
 375 032d 4889D0   		movq	%rdx, %rax
 376 0330 4889C7   		movq	%rax, %rdi
 377 0333 E882FEFF 		call	spaces
 377      FF
 378 0338 4889C1   		movq	%rax, %rcx
 379 033b 488B55E8 		movq	-24(%rbp), %rdx
 380 033f 488B45C8 		movq	-56(%rbp), %rax
 381 0343 488D3500 		leaq	.LC6(%rip), %rsi
 381      000000
 382 034a 4889C7   		movq	%rax, %rdi
 383 034d B8000000 		movl	$0, %eax
 383      00
 384 0352 E8000000 		call	errRender@PLT
 384      00
 385 0357 C745FC0B 		movl	$11, -4(%rbp)
 385      000000
 386 035e E9D70200 		jmp	.L17
 386      00
 387              	.L22:
 388 0363 488B45E0 		movq	-32(%rbp), %rax
 389 0367 488D4DE0 		leaq	-32(%rbp), %rcx
 390 036b BA0A0000 		movl	$10, %edx
 390      00
 391 0370 4889CE   		movq	%rcx, %rsi
 392 0373 4889C7   		movq	%rax, %rdi
 393 0376 E8000000 		call	strtoul@PLT
 393      00
 394 037b 8845FB   		movb	%al, -5(%rbp)
 185:prog.c        **** 		GET_CHAR("populateMap");
 395              		.loc 2 185 0 is_stmt 1 discriminator 1
 396 037e 488B45E0 		movq	-32(%rbp), %rax
 397 0382 0FB600   		movzbl	(%rax), %eax
 398 0385 8845F9   		movb	%al, -7(%rbp)
 399 0388 807DF900 		cmpb	$0, -7(%rbp)
 400 038c 7544     		jne	.L23
 401 038e 488B45E0 		movq	-32(%rbp), %rax
 402 0392 4889C2   		movq	%rax, %rdx
 403 0395 488B45E8 		movq	-24(%rbp), %rax
 404 0399 4829C2   		subq	%rax, %rdx
 405 039c 4889D0   		movq	%rdx, %rax
 406 039f 4889C7   		movq	%rax, %rdi
 407 03a2 E813FEFF 		call	spaces
 407      FF
 408 03a7 4889C1   		movq	%rax, %rcx
 409 03aa 488B55E8 		movq	-24(%rbp), %rdx
 410 03ae 488B45C8 		movq	-56(%rbp), %rax
 411 03b2 488D3500 		leaq	.LC4(%rip), %rsi
 411      000000
 412 03b9 4889C7   		movq	%rax, %rdi
 413 03bc B8000000 		movl	$0, %eax
 413      00
 414 03c1 E8000000 		call	errRender@PLT
 414      00
 415 03c6 C745FC0B 		movl	$11, -4(%rbp)
 415      000000
 416 03cd E9680200 		jmp	.L17
 416      00
 417              	.L23:
 186:prog.c        **** 		if ( ch == '+' ) {
 418              		.loc 2 186 0
 419 03d2 807DF92B 		cmpb	$43, -7(%rbp)
 420 03d6 0F85A000 		jne	.L24
 420      0000
 187:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_HIGH, "populateMap");
 421              		.loc 2 187 0
 422 03dc 0FB645FA 		movzbl	-6(%rbp), %eax
 423 03e0 48C1E007 		salq	$7, %rax
 424 03e4 4889C2   		movq	%rax, %rdx
 425 03e7 488B45D0 		movq	-48(%rbp), %rax
 426 03eb 4801C2   		addq	%rax, %rdx
 427 03ee 0FB645FB 		movzbl	-5(%rbp), %eax
 428 03f2 4898     		cltq
 429 03f4 8B0482   		movl	(%rdx,%rax,4), %eax
 430 03f7 85C0     		testl	%eax, %eax
 431 03f9 745D     		je	.L25
 432              		.loc 2 187 0 is_stmt 0 discriminator 1
 433 03fb 488B45E0 		movq	-32(%rbp), %rax
 434 03ff 4889C2   		movq	%rax, %rdx
 435 0402 488B45E8 		movq	-24(%rbp), %rax
 436 0406 4829C2   		subq	%rax, %rdx
 437 0409 4889D0   		movq	%rdx, %rax
 438 040c 4883E801 		subq	$1, %rax
 439 0410 4889C7   		movq	%rax, %rdi
 440 0413 E8A2FDFF 		call	spaces
 440      FF
 441 0418 4889C1   		movq	%rax, %rcx
 442 041b 0FB655FB 		movzbl	-5(%rbp), %edx
 443 041f 0FB645FA 		movzbl	-6(%rbp), %eax
 444 0423 8D7041   		leal	65(%rax), %esi
 445 0426 488B7DE8 		movq	-24(%rbp), %rdi
 446 042a 488B45C8 		movq	-56(%rbp), %rax
 447 042e 4989C9   		movq	%rcx, %r9
 448 0431 4989F8   		movq	%rdi, %r8
 449 0434 89D1     		movl	%edx, %ecx
 450 0436 89F2     		movl	%esi, %edx
 451 0438 488D3500 		leaq	.LC7(%rip), %rsi
 451      000000
 452 043f 4889C7   		movq	%rax, %rdi
 453 0442 B8000000 		movl	$0, %eax
 453      00
 454 0447 E8000000 		call	errRender@PLT
 454      00
 455 044c C745FC0B 		movl	$11, -4(%rbp)
 455      000000
 456 0453 E9E20100 		jmp	.L17
 456      00
 457              	.L25:
 458              		.loc 2 187 0 discriminator 2
 459 0458 0FB645FA 		movzbl	-6(%rbp), %eax
 460 045c 48C1E007 		salq	$7, %rax
 461 0460 4889C2   		movq	%rax, %rdx
 462 0463 488B45D0 		movq	-48(%rbp), %rax
 463 0467 4801C2   		addq	%rax, %rdx
 464 046a 0FB645FB 		movzbl	-5(%rbp), %eax
 465 046e 4898     		cltq
 466 0470 C7048201 		movl	$1, (%rdx,%rax,4)
 466      000000
 467 0477 E9800100 		jmp	.L26
 467      00
 468              	.L24:
 188:prog.c        **** 		} else if ( ch == '-' ) {
 469              		.loc 2 188 0 is_stmt 1
 470 047c 807DF92D 		cmpb	$45, -7(%rbp)
 471 0480 0F85A000 		jne	.L27
 471      0000
 189:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_LOW, "populateMap");
 472              		.loc 2 189 0
 473 0486 0FB645FA 		movzbl	-6(%rbp), %eax
 474 048a 48C1E007 		salq	$7, %rax
 475 048e 4889C2   		movq	%rax, %rdx
 476 0491 488B45D0 		movq	-48(%rbp), %rax
 477 0495 4801C2   		addq	%rax, %rdx
 478 0498 0FB645FB 		movzbl	-5(%rbp), %eax
 479 049c 4898     		cltq
 480 049e 8B0482   		movl	(%rdx,%rax,4), %eax
 481 04a1 85C0     		testl	%eax, %eax
 482 04a3 745D     		je	.L28
 483              		.loc 2 189 0 is_stmt 0 discriminator 1
 484 04a5 488B45E0 		movq	-32(%rbp), %rax
 485 04a9 4889C2   		movq	%rax, %rdx
 486 04ac 488B45E8 		movq	-24(%rbp), %rax
 487 04b0 4829C2   		subq	%rax, %rdx
 488 04b3 4889D0   		movq	%rdx, %rax
 489 04b6 4883E801 		subq	$1, %rax
 490 04ba 4889C7   		movq	%rax, %rdi
 491 04bd E8F8FCFF 		call	spaces
 491      FF
 492 04c2 4889C1   		movq	%rax, %rcx
 493 04c5 0FB655FB 		movzbl	-5(%rbp), %edx
 494 04c9 0FB645FA 		movzbl	-6(%rbp), %eax
 495 04cd 8D7041   		leal	65(%rax), %esi
 496 04d0 488B7DE8 		movq	-24(%rbp), %rdi
 497 04d4 488B45C8 		movq	-56(%rbp), %rax
 498 04d8 4989C9   		movq	%rcx, %r9
 499 04db 4989F8   		movq	%rdi, %r8
 500 04de 89D1     		movl	%edx, %ecx
 501 04e0 89F2     		movl	%esi, %edx
 502 04e2 488D3500 		leaq	.LC7(%rip), %rsi
 502      000000
 503 04e9 4889C7   		movq	%rax, %rdi
 504 04ec B8000000 		movl	$0, %eax
 504      00
 505 04f1 E8000000 		call	errRender@PLT
 505      00
 506 04f6 C745FC0B 		movl	$11, -4(%rbp)
 506      000000
 507 04fd E9380100 		jmp	.L17
 507      00
 508              	.L28:
 509              		.loc 2 189 0 discriminator 2
 510 0502 0FB645FA 		movzbl	-6(%rbp), %eax
 511 0506 48C1E007 		salq	$7, %rax
 512 050a 4889C2   		movq	%rax, %rdx
 513 050d 488B45D0 		movq	-48(%rbp), %rax
 514 0511 4801C2   		addq	%rax, %rdx
 515 0514 0FB645FB 		movzbl	-5(%rbp), %eax
 516 0518 4898     		cltq
 517 051a C7048202 		movl	$2, (%rdx,%rax,4)
 517      000000
 518 0521 E9D60000 		jmp	.L26
 518      00
 519              	.L27:
 190:prog.c        **** 		} else if ( ch == '?' ) {
 520              		.loc 2 190 0 is_stmt 1
 521 0526 807DF93F 		cmpb	$63, -7(%rbp)
 522 052a 0F859D00 		jne	.L29
 522      0000
 191:prog.c        **** 			SET_BIT(thisPort, thisBit, PIN_INPUT, "populateMap");
 523              		.loc 2 191 0
 524 0530 0FB645FA 		movzbl	-6(%rbp), %eax
 525 0534 48C1E007 		salq	$7, %rax
 526 0538 4889C2   		movq	%rax, %rdx
 527 053b 488B45D0 		movq	-48(%rbp), %rax
 528 053f 4801C2   		addq	%rax, %rdx
 529 0542 0FB645FB 		movzbl	-5(%rbp), %eax
 530 0546 4898     		cltq
 531 0548 8B0482   		movl	(%rdx,%rax,4), %eax
 532 054b 85C0     		testl	%eax, %eax
 533 054d 745D     		je	.L30
 534              		.loc 2 191 0 is_stmt 0 discriminator 1
 535 054f 488B45E0 		movq	-32(%rbp), %rax
 536 0553 4889C2   		movq	%rax, %rdx
 537 0556 488B45E8 		movq	-24(%rbp), %rax
 538 055a 4829C2   		subq	%rax, %rdx
 539 055d 4889D0   		movq	%rdx, %rax
 540 0560 4883E801 		subq	$1, %rax
 541 0564 4889C7   		movq	%rax, %rdi
 542 0567 E84EFCFF 		call	spaces
 542      FF
 543 056c 4889C1   		movq	%rax, %rcx
 544 056f 0FB655FB 		movzbl	-5(%rbp), %edx
 545 0573 0FB645FA 		movzbl	-6(%rbp), %eax
 546 0577 8D7041   		leal	65(%rax), %esi
 547 057a 488B7DE8 		movq	-24(%rbp), %rdi
 548 057e 488B45C8 		movq	-56(%rbp), %rax
 549 0582 4989C9   		movq	%rcx, %r9
 550 0585 4989F8   		movq	%rdi, %r8
 551 0588 89D1     		movl	%edx, %ecx
 552 058a 89F2     		movl	%esi, %edx
 553 058c 488D3500 		leaq	.LC7(%rip), %rsi
 553      000000
 554 0593 4889C7   		movq	%rax, %rdi
 555 0596 B8000000 		movl	$0, %eax
 555      00
 556 059b E8000000 		call	errRender@PLT
 556      00
 557 05a0 C745FC0B 		movl	$11, -4(%rbp)
 557      000000
 558 05a7 E98E0000 		jmp	.L17
 558      00
 559              	.L30:
 560              		.loc 2 191 0 discriminator 2
 561 05ac 0FB645FA 		movzbl	-6(%rbp), %eax
 562 05b0 48C1E007 		salq	$7, %rax
 563 05b4 4889C2   		movq	%rax, %rdx
 564 05b7 488B45D0 		movq	-48(%rbp), %rax
 565 05bb 4801C2   		addq	%rax, %rdx
 566 05be 0FB645FB 		movzbl	-5(%rbp), %eax
 567 05c2 4898     		cltq
 568 05c4 C7048203 		movl	$3, (%rdx,%rax,4)
 568      000000
 569 05cb EB2F     		jmp	.L26
 570              	.L29:
 192:prog.c        **** 		} else {
 193:prog.c        **** 			CHECK_STATUS(
 571              		.loc 2 193 0 is_stmt 1 discriminator 1
 572 05cd 488B45E0 		movq	-32(%rbp), %rax
 573 05d1 4889C2   		movq	%rax, %rdx
 574 05d4 488B45E8 		movq	-24(%rbp), %rax
 575 05d8 4829C2   		subq	%rax, %rdx
 576 05db 488B45C8 		movq	-56(%rbp), %rax
 577 05df 488D3500 		leaq	.LC8(%rip), %rsi
 577      000000
 578 05e6 4889C7   		movq	%rax, %rdi
 579 05e9 B8000000 		movl	$0, %eax
 579      00
 580 05ee E8000000 		call	errRender@PLT
 580      00
 581 05f3 C745FC0B 		movl	$11, -4(%rbp)
 581      000000
 582 05fa EB3E     		jmp	.L17
 583              	.L26:
 194:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 195:prog.c        **** 				"populateMap(): Expecting '+', '-' or '?' at char %d", ptr-portConfig);
 196:prog.c        **** 		}
 197:prog.c        **** 		ptr++;
 584              		.loc 2 197 0
 585 05fc 488B45E0 		movq	-32(%rbp), %rax
 586 0600 4883C001 		addq	$1, %rax
 587 0604 488945E0 		movq	%rax, -32(%rbp)
 198:prog.c        **** 		ch = *ptr++;
 588              		.loc 2 198 0
 589 0608 488B45E0 		movq	-32(%rbp), %rax
 590 060c 488D5001 		leaq	1(%rax), %rdx
 591 0610 488955E0 		movq	%rdx, -32(%rbp)
 592 0614 0FB600   		movzbl	(%rax), %eax
 593 0617 8845F9   		movb	%al, -7(%rbp)
 199:prog.c        **** 	} while ( ch == ',' );
 594              		.loc 2 199 0
 595 061a 807DF92C 		cmpb	$44, -7(%rbp)
 596 061e 0F84E1FB 		je	.L31
 596      FFFF
 200:prog.c        **** 	if ( endPtr ) {
 597              		.loc 2 200 0
 598 0624 48837DD8 		cmpq	$0, -40(%rbp)
 598      00
 599 0629 740F     		je	.L17
 201:prog.c        **** 		*endPtr = ptr - 1;
 600              		.loc 2 201 0
 601 062b 488B45E0 		movq	-32(%rbp), %rax
 602 062f 488D50FF 		leaq	-1(%rax), %rdx
 603 0633 488B45D8 		movq	-40(%rbp), %rax
 604 0637 488910   		movq	%rdx, (%rax)
 605              	.L17:
 202:prog.c        **** 	}
 203:prog.c        **** cleanup:
 204:prog.c        **** 	return retVal;
 606              		.loc 2 204 0
 607 063a 8B45FC   		movl	-4(%rbp), %eax
 205:prog.c        **** }
 608              		.loc 2 205 0
 609 063d C9       		leave
 610              		.cfi_def_cfa 7, 8
 611 063e C3       		ret
 612              		.cfi_endproc
 613              	.LFE8:
 615              		.section	.rodata
 616              	.LC9:
 617 025c 706F7274 		.string	"portMap()"
 617      4D617028 
 617      2900
 618              		.text
 620              	portMap:
 621              	.LFB9:
 206:prog.c        **** 
 207:prog.c        **** // This function re-maps the physical port used by the micro for its logical programming ports.
 208:prog.c        **** //
 209:prog.c        **** // Called by:
 210:prog.c        **** //   xProgram() -> portMap()
 211:prog.c        **** //   progOpen() -> portMap()
 212:prog.c        **** //
 213:prog.c        **** static FLStatus portMap(
 214:prog.c        **** 	struct FLContext *handle, LogicalPort patchOp, uint8 port, uint8 bit,
 215:prog.c        **** 	const char **error)
 216:prog.c        **** {
 622              		.loc 2 216 0
 623              		.cfi_startproc
 624 063f 55       		pushq	%rbp
 625              		.cfi_def_cfa_offset 16
 626              		.cfi_offset 6, -16
 627 0640 4889E5   		movq	%rsp, %rbp
 628              		.cfi_def_cfa_register 6
 629 0643 4883EC40 		subq	$64, %rsp
 630 0647 48897DE8 		movq	%rdi, -24(%rbp)
 631 064b 8975E4   		movl	%esi, -28(%rbp)
 632 064e 89C8     		movl	%ecx, %eax
 633 0650 4C8945D0 		movq	%r8, -48(%rbp)
 634 0654 8855E0   		movb	%dl, -32(%rbp)
 635 0657 8845DC   		movb	%al, -36(%rbp)
 217:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 636              		.loc 2 217 0
 637 065a C745F800 		movl	$0, -8(%rbp)
 637      000000
 218:prog.c        **** 	USBStatus uStatus;
 219:prog.c        **** 	const uint16 index = (uint16)((port << 8) | patchOp);
 638              		.loc 2 219 0
 639 0661 0FB645E0 		movzbl	-32(%rbp), %eax
 640 0665 C1E008   		sall	$8, %eax
 641 0668 89C2     		movl	%eax, %edx
 642 066a 8B45E4   		movl	-28(%rbp), %eax
 643 066d 09D0     		orl	%edx, %eax
 644 066f 668945F4 		movw	%ax, -12(%rbp)
 220:prog.c        **** 	const uint16 value = (uint16)bit;
 645              		.loc 2 220 0
 646 0673 0FB645DC 		movzbl	-36(%rbp), %eax
 647 0677 668945F6 		movw	%ax, -10(%rbp)
 221:prog.c        **** 	uStatus = usbControlWrite(
 648              		.loc 2 221 0
 649 067b 0FB74DF4 		movzwl	-12(%rbp), %ecx
 650 067f 0FB755F6 		movzwl	-10(%rbp), %edx
 651 0683 488B45E8 		movq	-24(%rbp), %rax
 652 0687 488B00   		movq	(%rax), %rax
 653 068a 488B75D0 		movq	-48(%rbp), %rsi
 654 068e 48897424 		movq	%rsi, 8(%rsp)
 654      08
 655 0693 C70424E8 		movl	$1000, (%rsp)
 655      030000
 656 069a 41B90000 		movl	$0, %r9d
 656      0000
 657 06a0 41B80000 		movl	$0, %r8d
 657      0000
 658 06a6 BE860000 		movl	$134, %esi
 658      00
 659 06ab 4889C7   		movq	%rax, %rdi
 660 06ae E8000000 		call	usbControlWrite@PLT
 660      00
 661 06b3 8945FC   		movl	%eax, -4(%rbp)
 222:prog.c        **** 		handle->device,
 223:prog.c        **** 		CMD_PORT_MAP,  // bRequest
 224:prog.c        **** 		value,         // wValue
 225:prog.c        **** 		index,         // wIndex
 226:prog.c        **** 		NULL,          // no data
 227:prog.c        **** 		0,             // wLength
 228:prog.c        **** 		1000,          // timeout (ms)
 229:prog.c        **** 		error
 230:prog.c        **** 	);
 231:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_PORT_MAP, cleanup, "portMap()");
 662              		.loc 2 231 0
 663 06b6 837DFC00 		cmpl	$0, -4(%rbp)
 664 06ba 741B     		je	.L34
 665              		.loc 2 231 0 is_stmt 0 discriminator 1
 666 06bc 488B45D0 		movq	-48(%rbp), %rax
 667 06c0 488D3500 		leaq	.LC9(%rip), %rsi
 667      000000
 668 06c7 4889C7   		movq	%rax, %rdi
 669 06ca E8000000 		call	errPrefix@PLT
 669      00
 670 06cf C745F80C 		movl	$12, -8(%rbp)
 670      000000
 671 06d6 90       		nop
 672              	.L34:
 232:prog.c        **** cleanup:
 233:prog.c        **** 	return retVal;
 673              		.loc 2 233 0 is_stmt 1
 674 06d7 8B45F8   		movl	-8(%rbp), %eax
 234:prog.c        **** }
 675              		.loc 2 234 0
 676 06da C9       		leave
 677              		.cfi_def_cfa 7, 8
 678 06db C3       		ret
 679              		.cfi_endproc
 680              	.LFE9:
 683              	makeLookup:
 684              	.LFB10:
 235:prog.c        **** 
 236:prog.c        **** // The bits in each byte of a programming file may need to be swapped before sending to the micro;
 237:prog.c        **** // this function makes a translation map for efficient bit-swapping. If bitOrder = {0,1,2,3,4,5,6,7
 238:prog.c        **** // then the resulting translation map does nothing. If bitOrder = {7,6,5,4,3,2,1,0} then the
 239:prog.c        **** // resulting translation map mirrors the bits.
 240:prog.c        **** //
 241:prog.c        **** // Called by:
 242:prog.c        **** //   xProgram() -> makeLookup()
 243:prog.c        **** //
 244:prog.c        **** static void makeLookup(const uint8 bitOrder[8], uint8 lookupTable[256]) {
 685              		.loc 2 244 0
 686              		.cfi_startproc
 687 06dc 55       		pushq	%rbp
 688              		.cfi_def_cfa_offset 16
 689              		.cfi_offset 6, -16
 690 06dd 4889E5   		movq	%rsp, %rbp
 691              		.cfi_def_cfa_register 6
 692 06e0 48897DE8 		movq	%rdi, -24(%rbp)
 693 06e4 488975E0 		movq	%rsi, -32(%rbp)
 245:prog.c        **** 	uint8 thisByte;
 246:prog.c        **** 	uint16 i;
 247:prog.c        **** 	for ( i = 0; i < 256; i++ ) {
 694              		.loc 2 247 0
 695 06e8 66C745FE 		movw	$0, -2(%rbp)
 695      0000
 696 06ee E9960100 		jmp	.L37
 696      00
 697              	.L46:
 248:prog.c        **** 		thisByte = 0x00;
 698              		.loc 2 248 0
 699 06f3 C645FD00 		movb	$0, -3(%rbp)
 249:prog.c        **** 		if ( i & 0x80 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[7])); }
 700              		.loc 2 249 0
 701 06f7 0FB745FE 		movzwl	-2(%rbp), %eax
 702 06fb 25800000 		andl	$128, %eax
 702      00
 703 0700 85C0     		testl	%eax, %eax
 704 0702 7424     		je	.L38
 705              		.loc 2 249 0 is_stmt 0 discriminator 1
 706 0704 488B45E8 		movq	-24(%rbp), %rax
 707 0708 4883C007 		addq	$7, %rax
 708 070c 0FB600   		movzbl	(%rax), %eax
 709 070f 0FB6C0   		movzbl	%al, %eax
 710 0712 BA010000 		movl	$1, %edx
 710      00
 711 0717 89C1     		movl	%eax, %ecx
 712 0719 D3E2     		sall	%cl, %edx
 713 071b 89D0     		movl	%edx, %eax
 714 071d 89C2     		movl	%eax, %edx
 715 071f 0FB645FD 		movzbl	-3(%rbp), %eax
 716 0723 09D0     		orl	%edx, %eax
 717 0725 8845FD   		movb	%al, -3(%rbp)
 718              	.L38:
 250:prog.c        **** 		if ( i & 0x40 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[6])); }
 719              		.loc 2 250 0 is_stmt 1
 720 0728 0FB745FE 		movzwl	-2(%rbp), %eax
 721 072c 83E040   		andl	$64, %eax
 722 072f 85C0     		testl	%eax, %eax
 723 0731 7424     		je	.L39
 724              		.loc 2 250 0 is_stmt 0 discriminator 1
 725 0733 488B45E8 		movq	-24(%rbp), %rax
 726 0737 4883C006 		addq	$6, %rax
 727 073b 0FB600   		movzbl	(%rax), %eax
 728 073e 0FB6C0   		movzbl	%al, %eax
 729 0741 BA010000 		movl	$1, %edx
 729      00
 730 0746 89C1     		movl	%eax, %ecx
 731 0748 D3E2     		sall	%cl, %edx
 732 074a 89D0     		movl	%edx, %eax
 733 074c 89C2     		movl	%eax, %edx
 734 074e 0FB645FD 		movzbl	-3(%rbp), %eax
 735 0752 09D0     		orl	%edx, %eax
 736 0754 8845FD   		movb	%al, -3(%rbp)
 737              	.L39:
 251:prog.c        **** 		if ( i & 0x20 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[5])); }
 738              		.loc 2 251 0 is_stmt 1
 739 0757 0FB745FE 		movzwl	-2(%rbp), %eax
 740 075b 83E020   		andl	$32, %eax
 741 075e 85C0     		testl	%eax, %eax
 742 0760 7424     		je	.L40
 743              		.loc 2 251 0 is_stmt 0 discriminator 1
 744 0762 488B45E8 		movq	-24(%rbp), %rax
 745 0766 4883C005 		addq	$5, %rax
 746 076a 0FB600   		movzbl	(%rax), %eax
 747 076d 0FB6C0   		movzbl	%al, %eax
 748 0770 BA010000 		movl	$1, %edx
 748      00
 749 0775 89C1     		movl	%eax, %ecx
 750 0777 D3E2     		sall	%cl, %edx
 751 0779 89D0     		movl	%edx, %eax
 752 077b 89C2     		movl	%eax, %edx
 753 077d 0FB645FD 		movzbl	-3(%rbp), %eax
 754 0781 09D0     		orl	%edx, %eax
 755 0783 8845FD   		movb	%al, -3(%rbp)
 756              	.L40:
 252:prog.c        **** 		if ( i & 0x10 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[4])); }
 757              		.loc 2 252 0 is_stmt 1
 758 0786 0FB745FE 		movzwl	-2(%rbp), %eax
 759 078a 83E010   		andl	$16, %eax
 760 078d 85C0     		testl	%eax, %eax
 761 078f 7424     		je	.L41
 762              		.loc 2 252 0 is_stmt 0 discriminator 1
 763 0791 488B45E8 		movq	-24(%rbp), %rax
 764 0795 4883C004 		addq	$4, %rax
 765 0799 0FB600   		movzbl	(%rax), %eax
 766 079c 0FB6C0   		movzbl	%al, %eax
 767 079f BA010000 		movl	$1, %edx
 767      00
 768 07a4 89C1     		movl	%eax, %ecx
 769 07a6 D3E2     		sall	%cl, %edx
 770 07a8 89D0     		movl	%edx, %eax
 771 07aa 89C2     		movl	%eax, %edx
 772 07ac 0FB645FD 		movzbl	-3(%rbp), %eax
 773 07b0 09D0     		orl	%edx, %eax
 774 07b2 8845FD   		movb	%al, -3(%rbp)
 775              	.L41:
 253:prog.c        **** 		if ( i & 0x08 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[3])); }
 776              		.loc 2 253 0 is_stmt 1
 777 07b5 0FB745FE 		movzwl	-2(%rbp), %eax
 778 07b9 83E008   		andl	$8, %eax
 779 07bc 85C0     		testl	%eax, %eax
 780 07be 7424     		je	.L42
 781              		.loc 2 253 0 is_stmt 0 discriminator 1
 782 07c0 488B45E8 		movq	-24(%rbp), %rax
 783 07c4 4883C003 		addq	$3, %rax
 784 07c8 0FB600   		movzbl	(%rax), %eax
 785 07cb 0FB6C0   		movzbl	%al, %eax
 786 07ce BA010000 		movl	$1, %edx
 786      00
 787 07d3 89C1     		movl	%eax, %ecx
 788 07d5 D3E2     		sall	%cl, %edx
 789 07d7 89D0     		movl	%edx, %eax
 790 07d9 89C2     		movl	%eax, %edx
 791 07db 0FB645FD 		movzbl	-3(%rbp), %eax
 792 07df 09D0     		orl	%edx, %eax
 793 07e1 8845FD   		movb	%al, -3(%rbp)
 794              	.L42:
 254:prog.c        **** 		if ( i & 0x04 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[2])); }
 795              		.loc 2 254 0 is_stmt 1
 796 07e4 0FB745FE 		movzwl	-2(%rbp), %eax
 797 07e8 83E004   		andl	$4, %eax
 798 07eb 85C0     		testl	%eax, %eax
 799 07ed 7424     		je	.L43
 800              		.loc 2 254 0 is_stmt 0 discriminator 1
 801 07ef 488B45E8 		movq	-24(%rbp), %rax
 802 07f3 4883C002 		addq	$2, %rax
 803 07f7 0FB600   		movzbl	(%rax), %eax
 804 07fa 0FB6C0   		movzbl	%al, %eax
 805 07fd BA010000 		movl	$1, %edx
 805      00
 806 0802 89C1     		movl	%eax, %ecx
 807 0804 D3E2     		sall	%cl, %edx
 808 0806 89D0     		movl	%edx, %eax
 809 0808 89C2     		movl	%eax, %edx
 810 080a 0FB645FD 		movzbl	-3(%rbp), %eax
 811 080e 09D0     		orl	%edx, %eax
 812 0810 8845FD   		movb	%al, -3(%rbp)
 813              	.L43:
 255:prog.c        **** 		if ( i & 0x02 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[1])); }
 814              		.loc 2 255 0 is_stmt 1
 815 0813 0FB745FE 		movzwl	-2(%rbp), %eax
 816 0817 83E002   		andl	$2, %eax
 817 081a 85C0     		testl	%eax, %eax
 818 081c 7424     		je	.L44
 819              		.loc 2 255 0 is_stmt 0 discriminator 1
 820 081e 488B45E8 		movq	-24(%rbp), %rax
 821 0822 4883C001 		addq	$1, %rax
 822 0826 0FB600   		movzbl	(%rax), %eax
 823 0829 0FB6C0   		movzbl	%al, %eax
 824 082c BA010000 		movl	$1, %edx
 824      00
 825 0831 89C1     		movl	%eax, %ecx
 826 0833 D3E2     		sall	%cl, %edx
 827 0835 89D0     		movl	%edx, %eax
 828 0837 89C2     		movl	%eax, %edx
 829 0839 0FB645FD 		movzbl	-3(%rbp), %eax
 830 083d 09D0     		orl	%edx, %eax
 831 083f 8845FD   		movb	%al, -3(%rbp)
 832              	.L44:
 256:prog.c        **** 		if ( i & 0x01 ) { thisByte = (uint8)(thisByte | (1 << bitOrder[0])); }
 833              		.loc 2 256 0 is_stmt 1
 834 0842 0FB745FE 		movzwl	-2(%rbp), %eax
 835 0846 83E001   		andl	$1, %eax
 836 0849 85C0     		testl	%eax, %eax
 837 084b 7420     		je	.L45
 838              		.loc 2 256 0 is_stmt 0 discriminator 1
 839 084d 488B45E8 		movq	-24(%rbp), %rax
 840 0851 0FB600   		movzbl	(%rax), %eax
 841 0854 0FB6C0   		movzbl	%al, %eax
 842 0857 BA010000 		movl	$1, %edx
 842      00
 843 085c 89C1     		movl	%eax, %ecx
 844 085e D3E2     		sall	%cl, %edx
 845 0860 89D0     		movl	%edx, %eax
 846 0862 89C2     		movl	%eax, %edx
 847 0864 0FB645FD 		movzbl	-3(%rbp), %eax
 848 0868 09D0     		orl	%edx, %eax
 849 086a 8845FD   		movb	%al, -3(%rbp)
 850              	.L45:
 257:prog.c        **** 		lookupTable[i] = thisByte;
 851              		.loc 2 257 0 is_stmt 1
 852 086d 0FB755FE 		movzwl	-2(%rbp), %edx
 853 0871 488B45E0 		movq	-32(%rbp), %rax
 854 0875 4801C2   		addq	%rax, %rdx
 855 0878 0FB645FD 		movzbl	-3(%rbp), %eax
 856 087c 8802     		movb	%al, (%rdx)
 247:prog.c        **** 		thisByte = 0x00;
 857              		.loc 2 247 0
 858 087e 0FB745FE 		movzwl	-2(%rbp), %eax
 859 0882 83C001   		addl	$1, %eax
 860 0885 668945FE 		movw	%ax, -2(%rbp)
 861              	.L37:
 247:prog.c        **** 		thisByte = 0x00;
 862              		.loc 2 247 0 is_stmt 0 discriminator 1
 863 0889 66817DFE 		cmpw	$255, -2(%rbp)
 863      FF00
 864 088f 0F865EFE 		jbe	.L46
 864      FFFF
 258:prog.c        **** 	}
 259:prog.c        **** }	
 865              		.loc 2 259 0 is_stmt 1
 866 0895 5D       		popq	%rbp
 867              		.cfi_def_cfa 7, 8
 868 0896 C3       		ret
 869              		.cfi_endproc
 870              	.LFE10:
 872              		.section	.rodata
 873              	.LC10:
 874 0266 64617461 		.string	"dataWrite()"
 874      57726974 
 874      65282900 
 875              		.text
 877              	dataWrite:
 878              	.LFB11:
 260:prog.c        **** 
 261:prog.c        **** // For serial & parallel programming, when the FPGA is ready to accept data, this function sends it
 262:prog.c        **** // one 64-byte block at a time, with a bit-transformation applied to each block.
 263:prog.c        **** //
 264:prog.c        **** // Called by:
 265:prog.c        **** //   xProgram() -> fileWrite() -> dataWrite()
 266:prog.c        **** //   xProgram() -> dataWrite()
 267:prog.c        **** //
 268:prog.c        **** static FLStatus dataWrite(struct FLContext *handle, ProgOp progOp, const uint8 *buf, uint32 len, co
 879              		.loc 2 268 0
 880              		.cfi_startproc
 881 0897 55       		pushq	%rbp
 882              		.cfi_def_cfa_offset 16
 883              		.cfi_offset 6, -16
 884 0898 4889E5   		movq	%rsp, %rbp
 885              		.cfi_def_cfa_register 6
 886 089b 53       		pushq	%rbx
 887 089c 4881EC98 		subq	$152, %rsp
 887      000000
 888              		.cfi_offset 3, -24
 889 08a3 48897D88 		movq	%rdi, -120(%rbp)
 890 08a7 897584   		movl	%esi, -124(%rbp)
 891 08aa 48899578 		movq	%rdx, -136(%rbp)
 891      FFFFFF
 892 08b1 894D80   		movl	%ecx, -128(%rbp)
 893 08b4 4C898570 		movq	%r8, -144(%rbp)
 893      FFFFFF
 894 08bb 4C898D68 		movq	%r9, -152(%rbp)
 894      FFFFFF
 895              		.loc 2 268 0
 896 08c2 64488B04 		movq	%fs:40, %rax
 896      25280000 
 896      00
 897 08cb 488945E8 		movq	%rax, -24(%rbp)
 898 08cf 31C0     		xorl	%eax, %eax
 269:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 899              		.loc 2 269 0
 900 08d1 C7459800 		movl	$0, -104(%rbp)
 900      000000
 270:prog.c        **** 	uint16 chunkSize;
 271:prog.c        **** 	FLStatus fStatus = beginShift(handle, len, progOp, 0x00, error);
 901              		.loc 2 271 0
 902 08d8 488B8D68 		movq	-152(%rbp), %rcx
 902      FFFFFF
 903 08df 8B5584   		movl	-124(%rbp), %edx
 904 08e2 8B7580   		movl	-128(%rbp), %esi
 905 08e5 488B4588 		movq	-120(%rbp), %rax
 906 08e9 4989C8   		movq	%rcx, %r8
 907 08ec B9000000 		movl	$0, %ecx
 907      00
 908 08f1 4889C7   		movq	%rax, %rdi
 909 08f4 E813F7FF 		call	beginShift
 909      FF
 910 08f9 89459C   		movl	%eax, -100(%rbp)
 272:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 911              		.loc 2 272 0
 912 08fc 837D9C00 		cmpl	$0, -100(%rbp)
 913 0900 7421     		je	.L48
 914              		.loc 2 272 0 is_stmt 0 discriminator 1
 915 0902 488B8568 		movq	-152(%rbp), %rax
 915      FFFFFF
 916 0909 488D3500 		leaq	.LC10(%rip), %rsi
 916      000000
 917 0910 4889C7   		movq	%rax, %rdi
 918 0913 E8000000 		call	errPrefix@PLT
 918      00
 919 0918 8B459C   		movl	-100(%rbp), %eax
 920 091b 894598   		movl	%eax, -104(%rbp)
 921 091e E9450100 		jmp	.L49
 921      00
 922              	.L48:
 273:prog.c        **** 	if ( lookupTable ) {
 923              		.loc 2 273 0 is_stmt 1
 924 0923 4883BD70 		cmpq	$0, -144(%rbp)
 924      FFFFFF00 
 925 092b 0F84C400 		je	.L50
 925      0000
 926              	.LBB2:
 274:prog.c        **** 		uint8 bitSwap[64];
 275:prog.c        **** 		uint16 i;
 276:prog.c        **** 		while ( len ) {
 927              		.loc 2 276 0
 928 0931 E9B30000 		jmp	.L51
 928      00
 929              	.L57:
 277:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 930              		.loc 2 277 0
 931 0936 837D803F 		cmpl	$63, -128(%rbp)
 932 093a 7705     		ja	.L52
 933              		.loc 2 277 0 is_stmt 0 discriminator 1
 934 093c 8B4580   		movl	-128(%rbp), %eax
 935 093f EB05     		jmp	.L53
 936              	.L52:
 937              		.loc 2 277 0 discriminator 2
 938 0941 B8400000 		movl	$64, %eax
 938      00
 939              	.L53:
 940              		.loc 2 277 0 discriminator 3
 941 0946 66894596 		movw	%ax, -106(%rbp)
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 942              		.loc 2 278 0 is_stmt 1 discriminator 3
 943 094a 66C74594 		movw	$0, -108(%rbp)
 943      0000
 944 0950 EB36     		jmp	.L54
 945              	.L55:
 279:prog.c        **** 				bitSwap[i] = lookupTable[buf[i]];
 946              		.loc 2 279 0 discriminator 2
 947 0952 0FB74594 		movzwl	-108(%rbp), %eax
 948 0956 0FB74D94 		movzwl	-108(%rbp), %ecx
 949 095a 488B9578 		movq	-136(%rbp), %rdx
 949      FFFFFF
 950 0961 4801CA   		addq	%rcx, %rdx
 951 0964 0FB612   		movzbl	(%rdx), %edx
 952 0967 0FB6CA   		movzbl	%dl, %ecx
 953 096a 488B9570 		movq	-144(%rbp), %rdx
 953      FFFFFF
 954 0971 4801CA   		addq	%rcx, %rdx
 955 0974 0FB612   		movzbl	(%rdx), %edx
 956 0977 4898     		cltq
 957 0979 885405A0 		movb	%dl, -96(%rbp,%rax)
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 958              		.loc 2 278 0 discriminator 2
 959 097d 0FB74594 		movzwl	-108(%rbp), %eax
 960 0981 83C001   		addl	$1, %eax
 961 0984 66894594 		movw	%ax, -108(%rbp)
 962              	.L54:
 278:prog.c        **** 			for ( i = 0; i < chunkSize; i++ ) {
 963              		.loc 2 278 0 is_stmt 0 discriminator 1
 964 0988 0FB74594 		movzwl	-108(%rbp), %eax
 965 098c 663B4596 		cmpw	-106(%rbp), %ax
 966 0990 72C0     		jb	.L55
 280:prog.c        **** 			}
 281:prog.c        **** 			fStatus = doSend(handle, bitSwap, chunkSize, error);
 967              		.loc 2 281 0 is_stmt 1
 968 0992 0FB75596 		movzwl	-106(%rbp), %edx
 969 0996 488B8D68 		movq	-152(%rbp), %rcx
 969      FFFFFF
 970 099d 488D75A0 		leaq	-96(%rbp), %rsi
 971 09a1 488B4588 		movq	-120(%rbp), %rax
 972 09a5 4889C7   		movq	%rax, %rdi
 973 09a8 E81BF7FF 		call	doSend
 973      FF
 974 09ad 89459C   		movl	%eax, -100(%rbp)
 282:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 975              		.loc 2 282 0
 976 09b0 837D9C00 		cmpl	$0, -100(%rbp)
 977 09b4 7421     		je	.L56
 978              		.loc 2 282 0 is_stmt 0 discriminator 1
 979 09b6 488B8568 		movq	-152(%rbp), %rax
 979      FFFFFF
 980 09bd 488D3500 		leaq	.LC10(%rip), %rsi
 980      000000
 981 09c4 4889C7   		movq	%rax, %rdi
 982 09c7 E8000000 		call	errPrefix@PLT
 982      00
 983 09cc 8B459C   		movl	-100(%rbp), %eax
 984 09cf 894598   		movl	%eax, -104(%rbp)
 985 09d2 E9910000 		jmp	.L49
 985      00
 986              	.L56:
 283:prog.c        **** 			buf += chunkSize;
 987              		.loc 2 283 0 is_stmt 1
 988 09d7 0FB74596 		movzwl	-106(%rbp), %eax
 989 09db 48018578 		addq	%rax, -136(%rbp)
 989      FFFFFF
 284:prog.c        **** 			len -= chunkSize;
 990              		.loc 2 284 0
 991 09e2 0FB74596 		movzwl	-106(%rbp), %eax
 992 09e6 294580   		subl	%eax, -128(%rbp)
 993              	.L51:
 276:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 994              		.loc 2 276 0 discriminator 1
 995 09e9 837D8000 		cmpl	$0, -128(%rbp)
 996 09ed 0F8543FF 		jne	.L57
 996      FFFF
 997              	.LBE2:
 998 09f3 EB73     		jmp	.L49
 999              	.L50:
 285:prog.c        **** 		}
 286:prog.c        **** 	} else {
 287:prog.c        **** 		while ( len ) {
 1000              		.loc 2 287 0
 1001 09f5 EB6B     		jmp	.L58
 1002              	.L62:
 288:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1003              		.loc 2 288 0
 1004 09f7 837D803F 		cmpl	$63, -128(%rbp)
 1005 09fb 7705     		ja	.L59
 1006              		.loc 2 288 0 is_stmt 0 discriminator 1
 1007 09fd 8B4580   		movl	-128(%rbp), %eax
 1008 0a00 EB05     		jmp	.L60
 1009              	.L59:
 1010              		.loc 2 288 0 discriminator 2
 1011 0a02 B8400000 		movl	$64, %eax
 1011      00
 1012              	.L60:
 1013              		.loc 2 288 0 discriminator 3
 1014 0a07 66894596 		movw	%ax, -106(%rbp)
 289:prog.c        **** 			fStatus = doSend(handle, buf, chunkSize, error);
 1015              		.loc 2 289 0 is_stmt 1 discriminator 3
 1016 0a0b 0FB75596 		movzwl	-106(%rbp), %edx
 1017 0a0f 488B8D68 		movq	-152(%rbp), %rcx
 1017      FFFFFF
 1018 0a16 488BB578 		movq	-136(%rbp), %rsi
 1018      FFFFFF
 1019 0a1d 488B4588 		movq	-120(%rbp), %rax
 1020 0a21 4889C7   		movq	%rax, %rdi
 1021 0a24 E89FF6FF 		call	doSend
 1021      FF
 1022 0a29 89459C   		movl	%eax, -100(%rbp)
 290:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "dataWrite()");
 1023              		.loc 2 290 0 discriminator 3
 1024 0a2c 837D9C00 		cmpl	$0, -100(%rbp)
 1025 0a30 741E     		je	.L61
 1026              		.loc 2 290 0 is_stmt 0 discriminator 1
 1027 0a32 488B8568 		movq	-152(%rbp), %rax
 1027      FFFFFF
 1028 0a39 488D3500 		leaq	.LC10(%rip), %rsi
 1028      000000
 1029 0a40 4889C7   		movq	%rax, %rdi
 1030 0a43 E8000000 		call	errPrefix@PLT
 1030      00
 1031 0a48 8B459C   		movl	-100(%rbp), %eax
 1032 0a4b 894598   		movl	%eax, -104(%rbp)
 1033 0a4e EB18     		jmp	.L49
 1034              	.L61:
 291:prog.c        **** 			buf += chunkSize;
 1035              		.loc 2 291 0 is_stmt 1
 1036 0a50 0FB74596 		movzwl	-106(%rbp), %eax
 1037 0a54 48018578 		addq	%rax, -136(%rbp)
 1037      FFFFFF
 292:prog.c        **** 			len -= chunkSize;
 1038              		.loc 2 292 0
 1039 0a5b 0FB74596 		movzwl	-106(%rbp), %eax
 1040 0a5f 294580   		subl	%eax, -128(%rbp)
 1041              	.L58:
 287:prog.c        **** 			chunkSize = (uint16)((len >= 64) ? 64 : len);
 1042              		.loc 2 287 0 discriminator 1
 1043 0a62 837D8000 		cmpl	$0, -128(%rbp)
 1044 0a66 758F     		jne	.L62
 1045              	.L49:
 293:prog.c        **** 		}
 294:prog.c        **** 	}
 295:prog.c        **** cleanup:
 296:prog.c        **** 	return retVal;
 1046              		.loc 2 296 0
 1047 0a68 8B4598   		movl	-104(%rbp), %eax
 297:prog.c        **** }
 1048              		.loc 2 297 0
 1049 0a6b 488B5DE8 		movq	-24(%rbp), %rbx
 1050 0a6f 6448331C 		xorq	%fs:40, %rbx
 1050      25280000 
 1050      00
 1051 0a78 7405     		je	.L64
 1052 0a7a E8000000 		call	__stack_chk_fail@PLT
 1052      00
 1053              	.L64:
 1054 0a7f 4881C498 		addq	$152, %rsp
 1054      000000
 1055 0a86 5B       		popq	%rbx
 1056 0a87 5D       		popq	%rbp
 1057              		.cfi_def_cfa 7, 8
 1058 0a88 C3       		ret
 1059              		.cfi_endproc
 1060              	.LFE11:
 1062              		.section	.rodata
 1063 0272 00000000 		.align 8
 1063      0000
 1064              	.LC11:
 1065 0278 7850726F 		.string	"xProgram(): unsupported ProgOp"
 1065      6772616D 
 1065      28293A20 
 1065      756E7375 
 1065      70706F72 
 1066 0297 00       		.align 8
 1067              	.LC12:
 1068 0298 7850726F 		.string	"xProgram(): Unexpected end of config string:\n  %s\n  %s^"
 1068      6772616D 
 1068      28293A20 
 1068      556E6578 
 1068      70656374 
 1069              		.align 8
 1070              	.LC13:
 1071 02d0 7850726F 		.string	"xProgram(): Expecting ':':\n  %s\n  %s^"
 1071      6772616D 
 1071      28293A20 
 1071      45787065 
 1071      6374696E 
 1072 02f6 0000     		.align 8
 1073              	.LC14:
 1074 02f8 7850726F 		.string	"xProgram(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 1074      6772616D 
 1074      28293A20 
 1074      506F7274 
 1074      20697320 
 1075 033b 00000000 		.align 8
 1075      00
 1076              	.LC15:
 1077 0340 7850726F 		.string	"xProgram(): Bit number is not valid:\n  %s\n  %s^"
 1077      6772616D 
 1077      28293A20 
 1077      42697420 
 1077      6E756D62 
 1078              		.align 8
 1079              	.LC16:
 1080 0370 7850726F 		.string	"xProgram(): port '%c%d' is already used:\n  %s\n  %s^"
 1080      6772616D 
 1080      28293A20 
 1080      706F7274 
 1080      20272563 
 1081 03a4 00000000 		.align 8
 1082              	.LC17:
 1083 03a8 7850726F 		.string	"xProgram(): Bit '%c' is not valid at char %d"
 1083      6772616D 
 1083      28293A20 
 1083      42697420 
 1083      27256327 
 1084              	.LC18:
 1085 03d5 7850726F 		.string	"xProgram()"
 1085      6772616D 
 1085      282900
 1086              		.align 8
 1087              	.LC19:
 1088 03e0 7850726F 		.string	"xProgram(): Expecting ']':\n  %s\n  %s^"
 1088      6772616D 
 1088      28293A20 
 1088      45787065 
 1088      6374696E 
 1089 0406 0000     		.align 8
 1090              	.LC20:
 1091 0408 7850726F 		.string	"xProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^"
 1091      6772616D 
 1091      28293A20 
 1091      45787065 
 1091      6374696E 
 1092 043f 00       		.align 8
 1093              	.LC21:
 1094 0440 7850726F 		.string	"xProgram(): DONE did not assert"
 1094      6772616D 
 1094      28293A20 
 1094      444F4E45 
 1094      20646964 
 1095              		.align 8
 1096              	.LC22:
 1097 0460 7850726F 		.string	"xProgram(): INIT unexpectedly low (CRC error during config)"
 1097      6772616D 
 1097      28293A20 
 1097      494E4954 
 1097      20756E65 
 1098              		.text
 1100              	xProgram:
 1101              	.LFB12:
 298:prog.c        **** 
 299:prog.c        **** // This function performs either a serial or a parallel programming operation on Xilinx FPGAs.
 300:prog.c        **** //
 301:prog.c        **** // Called by:
 302:prog.c        **** //   flProgram() -> xProgram()
 303:prog.c        **** //
 304:prog.c        **** static FLStatus xProgram(struct FLContext *handle, ProgOp progOp, const char *portConfig, const uin
 1102              		.loc 2 304 0
 1103              		.cfi_startproc
 1104 0a89 55       		pushq	%rbp
 1105              		.cfi_def_cfa_offset 16
 1106              		.cfi_offset 6, -16
 1107 0a8a 4889E5   		movq	%rsp, %rbp
 1108              		.cfi_def_cfa_register 6
 1109 0a8d 53       		pushq	%rbx
 1110 0a8e 4881ECD8 		subq	$3800, %rsp
 1110      0E0000
 1111              		.cfi_offset 3, -24
 1112 0a95 4889BD48 		movq	%rdi, -3768(%rbp)
 1112      F1FFFF
 1113 0a9c 89B544F1 		movl	%esi, -3772(%rbp)
 1113      FFFF
 1114 0aa2 48899538 		movq	%rdx, -3784(%rbp)
 1114      F1FFFF
 1115 0aa9 48898D30 		movq	%rcx, -3792(%rbp)
 1115      F1FFFF
 1116 0ab0 44898540 		movl	%r8d, -3776(%rbp)
 1116      F1FFFF
 1117 0ab7 4C898D28 		movq	%r9, -3800(%rbp)
 1117      F1FFFF
 1118              		.loc 2 304 0
 1119 0abe 64488B04 		movq	%fs:40, %rax
 1119      25280000 
 1119      00
 1120 0ac7 488945E8 		movq	%rax, -24(%rbp)
 1121 0acb 31C0     		xorl	%eax, %eax
 305:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 1122              		.loc 2 305 0
 1123 0acd C78568F1 		movl	$0, -3736(%rbp)
 1123      FFFF0000 
 1123      0000
 306:prog.c        **** 	FLStatus fStatus;
 307:prog.c        **** 	uint8 progPort, progBit;
 308:prog.c        **** 	uint8 initPort, initBit;
 309:prog.c        **** 	uint8 donePort, doneBit;
 310:prog.c        **** 	uint8 cclkPort, cclkBit;
 311:prog.c        **** 	uint8 dataPort, dataBit[8];
 312:prog.c        **** 	uint8 port, bit;
 313:prog.c        **** 	uint8 initStatus, doneStatus;
 314:prog.c        **** 	const char *ptr = portConfig + 2;
 1124              		.loc 2 314 0
 1125 0ad7 488B8538 		movq	-3784(%rbp), %rax
 1125      F1FFFF
 1126 0ade 4883C002 		addq	$2, %rax
 1127 0ae2 48898578 		movq	%rax, -3720(%rbp)
 1127      F1FFFF
 315:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 1128              		.loc 2 315 0
 1129 0ae9 488DB580 		leaq	-3712(%rbp), %rsi
 1129      F1FFFF
 1130 0af0 B8000000 		movl	$0, %eax
 1130      00
 1131 0af5 BAA00100 		movl	$416, %edx
 1131      00
 1132 0afa 4889F7   		movq	%rsi, %rdi
 1133 0afd 4889D1   		movq	%rdx, %rcx
 1134 0b00 F348AB   		rep stosq
 316:prog.c        **** 	PinConfig thisPin;
 317:prog.c        **** 	const uint8 zeroBlock[64] = {0,};
 1135              		.loc 2 317 0
 1136 0b03 488DB5A0 		leaq	-352(%rbp), %rsi
 1136      FEFFFF
 1137 0b0a B8000000 		movl	$0, %eax
 1137      00
 1138 0b0f BA080000 		movl	$8, %edx
 1138      00
 1139 0b14 4889F7   		movq	%rsi, %rdi
 1140 0b17 4889D1   		movq	%rdx, %rcx
 1141 0b1a F348AB   		rep stosq
 318:prog.c        **** 	uint8 lookupTable[256];
 319:prog.c        **** 	int i;
 320:prog.c        **** 	char ch;
 321:prog.c        **** 	CHECK_STATUS(
 1142              		.loc 2 321 0
 1143 0b1d 83BD44F1 		cmpl	$5, -3772(%rbp)
 1143      FFFF05
 1144 0b24 742E     		je	.L66
 1145              		.loc 2 321 0 is_stmt 0 discriminator 1
 1146 0b26 83BD44F1 		cmpl	$6, -3772(%rbp)
 1146      FFFF06
 1147 0b2d 7425     		je	.L66
 1148 0b2f 488B8528 		movq	-3800(%rbp), %rax
 1148      F1FFFF
 1149 0b36 488D3500 		leaq	.LC11(%rip), %rsi
 1149      000000
 1150 0b3d 4889C7   		movq	%rax, %rdi
 1151 0b40 E8000000 		call	errPrefix@PLT
 1151      00
 1152 0b45 C78568F1 		movl	$11, -3736(%rbp)
 1152      FFFF0B00 
 1152      0000
 1153 0b4f E9431C00 		jmp	.L67
 1153      00
 1154              	.L66:
 322:prog.c        **** 		progOp != PROG_PARALLEL && progOp != PROG_SPI_SEND, FL_CONF_FORMAT, cleanup,
 323:prog.c        **** 		"xProgram(): unsupported ProgOp");
 324:prog.c        **** 	EXPECT_CHAR(':', "xProgram");
 1155              		.loc 2 324 0 is_stmt 1
 1156 0b54 488B8578 		movq	-3720(%rbp), %rax
 1156      F1FFFF
 1157 0b5b 0FB600   		movzbl	(%rax), %eax
 1158 0b5e 88855EF1 		movb	%al, -3746(%rbp)
 1158      FFFF
 1159 0b64 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1159      FFFF00
 1160 0b6b 7553     		jne	.L68
 1161              		.loc 2 324 0 is_stmt 0 discriminator 1
 1162 0b6d 488B8578 		movq	-3720(%rbp), %rax
 1162      F1FFFF
 1163 0b74 4889C2   		movq	%rax, %rdx
 1164 0b77 488B8538 		movq	-3784(%rbp), %rax
 1164      F1FFFF
 1165 0b7e 4829C2   		subq	%rax, %rdx
 1166 0b81 4889D0   		movq	%rdx, %rax
 1167 0b84 4889C7   		movq	%rax, %rdi
 1168 0b87 E82EF6FF 		call	spaces
 1168      FF
 1169 0b8c 4889C1   		movq	%rax, %rcx
 1170 0b8f 488B9538 		movq	-3784(%rbp), %rdx
 1170      F1FFFF
 1171 0b96 488B8528 		movq	-3800(%rbp), %rax
 1171      F1FFFF
 1172 0b9d 488D3500 		leaq	.LC12(%rip), %rsi
 1172      000000
 1173 0ba4 4889C7   		movq	%rax, %rdi
 1174 0ba7 B8000000 		movl	$0, %eax
 1174      00
 1175 0bac E8000000 		call	errRender@PLT
 1175      00
 1176 0bb1 C78568F1 		movl	$11, -3736(%rbp)
 1176      FFFF0B00 
 1176      0000
 1177 0bbb E9D71B00 		jmp	.L67
 1177      00
 1178              	.L68:
 1179              		.loc 2 324 0 discriminator 2
 1180 0bc0 80BD5EF1 		cmpb	$58, -3746(%rbp)
 1180      FFFF3A
 1181 0bc7 7453     		je	.L69
 1182              		.loc 2 324 0 discriminator 1
 1183 0bc9 488B8578 		movq	-3720(%rbp), %rax
 1183      F1FFFF
 1184 0bd0 4889C2   		movq	%rax, %rdx
 1185 0bd3 488B8538 		movq	-3784(%rbp), %rax
 1185      F1FFFF
 1186 0bda 4829C2   		subq	%rax, %rdx
 1187 0bdd 4889D0   		movq	%rdx, %rax
 1188 0be0 4889C7   		movq	%rax, %rdi
 1189 0be3 E8D2F5FF 		call	spaces
 1189      FF
 1190 0be8 4889C1   		movq	%rax, %rcx
 1191 0beb 488B9538 		movq	-3784(%rbp), %rdx
 1191      F1FFFF
 1192 0bf2 488B8528 		movq	-3800(%rbp), %rax
 1192      F1FFFF
 1193 0bf9 488D3500 		leaq	.LC13(%rip), %rsi
 1193      000000
 1194 0c00 4889C7   		movq	%rax, %rdi
 1195 0c03 B8000000 		movl	$0, %eax
 1195      00
 1196 0c08 E8000000 		call	errRender@PLT
 1196      00
 1197 0c0d C78568F1 		movl	$11, -3736(%rbp)
 1197      FFFF0B00 
 1197      0000
 1198 0c17 E97B1B00 		jmp	.L67
 1198      00
 1199              	.L69:
 1200              		.loc 2 324 0 discriminator 2
 1201 0c1c 488B8578 		movq	-3720(%rbp), %rax
 1201      F1FFFF
 1202 0c23 4883C001 		addq	$1, %rax
 1203 0c27 48898578 		movq	%rax, -3720(%rbp)
 1203      F1FFFF
 325:prog.c        **** 
 326:prog.c        **** 	GET_PAIR(progPort, progBit, "xProgram");
 1204              		.loc 2 326 0 is_stmt 1 discriminator 2
 1205 0c2e 488B8578 		movq	-3720(%rbp), %rax
 1205      F1FFFF
 1206 0c35 0FB600   		movzbl	(%rax), %eax
 1207 0c38 88855EF1 		movb	%al, -3746(%rbp)
 1207      FFFF
 1208 0c3e 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1208      FFFF00
 1209 0c45 7553     		jne	.L70
 1210              		.loc 2 326 0 is_stmt 0 discriminator 1
 1211 0c47 488B8578 		movq	-3720(%rbp), %rax
 1211      F1FFFF
 1212 0c4e 4889C2   		movq	%rax, %rdx
 1213 0c51 488B8538 		movq	-3784(%rbp), %rax
 1213      F1FFFF
 1214 0c58 4829C2   		subq	%rax, %rdx
 1215 0c5b 4889D0   		movq	%rdx, %rax
 1216 0c5e 4889C7   		movq	%rax, %rdi
 1217 0c61 E854F5FF 		call	spaces
 1217      FF
 1218 0c66 4889C1   		movq	%rax, %rcx
 1219 0c69 488B9538 		movq	-3784(%rbp), %rdx
 1219      F1FFFF
 1220 0c70 488B8528 		movq	-3800(%rbp), %rax
 1220      F1FFFF
 1221 0c77 488D3500 		leaq	.LC12(%rip), %rsi
 1221      000000
 1222 0c7e 4889C7   		movq	%rax, %rdi
 1223 0c81 B8000000 		movl	$0, %eax
 1223      00
 1224 0c86 E8000000 		call	errRender@PLT
 1224      00
 1225 0c8b C78568F1 		movl	$11, -3736(%rbp)
 1225      FFFF0B00 
 1225      0000
 1226 0c95 E9FD1A00 		jmp	.L67
 1226      00
 1227              	.L70:
 1228              		.loc 2 326 0 discriminator 2
 1229 0c9a 80BD5EF1 		cmpb	$64, -3746(%rbp)
 1229      FFFF40
 1230 0ca1 7E09     		jle	.L71
 1231 0ca3 80BD5EF1 		cmpb	$90, -3746(%rbp)
 1231      FFFF5A
 1232 0caa 7E53     		jle	.L72
 1233              	.L71:
 1234              		.loc 2 326 0 discriminator 1
 1235 0cac 488B8578 		movq	-3720(%rbp), %rax
 1235      F1FFFF
 1236 0cb3 4889C2   		movq	%rax, %rdx
 1237 0cb6 488B8538 		movq	-3784(%rbp), %rax
 1237      F1FFFF
 1238 0cbd 4829C2   		subq	%rax, %rdx
 1239 0cc0 4889D0   		movq	%rdx, %rax
 1240 0cc3 4889C7   		movq	%rax, %rdi
 1241 0cc6 E8EFF4FF 		call	spaces
 1241      FF
 1242 0ccb 4889C1   		movq	%rax, %rcx
 1243 0cce 488B9538 		movq	-3784(%rbp), %rdx
 1243      F1FFFF
 1244 0cd5 488B8528 		movq	-3800(%rbp), %rax
 1244      F1FFFF
 1245 0cdc 488D3500 		leaq	.LC14(%rip), %rsi
 1245      000000
 1246 0ce3 4889C7   		movq	%rax, %rdi
 1247 0ce6 B8000000 		movl	$0, %eax
 1247      00
 1248 0ceb E8000000 		call	errRender@PLT
 1248      00
 1249 0cf0 C78568F1 		movl	$11, -3736(%rbp)
 1249      FFFF0B00 
 1249      0000
 1250 0cfa E9981A00 		jmp	.L67
 1250      00
 1251              	.L72:
 1252 0cff 0FB6855E 		movzbl	-3746(%rbp), %eax
 1252      F1FFFF
 1253 0d06 83E841   		subl	$65, %eax
 1254 0d09 88855FF1 		movb	%al, -3745(%rbp)
 1254      FFFF
 1255 0d0f 488B8578 		movq	-3720(%rbp), %rax
 1255      F1FFFF
 1256 0d16 4883C001 		addq	$1, %rax
 1257 0d1a 48898578 		movq	%rax, -3720(%rbp)
 1257      F1FFFF
 1258 0d21 488B8578 		movq	-3720(%rbp), %rax
 1258      F1FFFF
 1259 0d28 0FB600   		movzbl	(%rax), %eax
 1260 0d2b 88855EF1 		movb	%al, -3746(%rbp)
 1260      FFFF
 1261 0d31 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1261      FFFF00
 1262 0d38 7553     		jne	.L73
 1263 0d3a 488B8578 		movq	-3720(%rbp), %rax
 1263      F1FFFF
 1264 0d41 4889C2   		movq	%rax, %rdx
 1265 0d44 488B8538 		movq	-3784(%rbp), %rax
 1265      F1FFFF
 1266 0d4b 4829C2   		subq	%rax, %rdx
 1267 0d4e 4889D0   		movq	%rdx, %rax
 1268 0d51 4889C7   		movq	%rax, %rdi
 1269 0d54 E861F4FF 		call	spaces
 1269      FF
 1270 0d59 4889C1   		movq	%rax, %rcx
 1271 0d5c 488B9538 		movq	-3784(%rbp), %rdx
 1271      F1FFFF
 1272 0d63 488B8528 		movq	-3800(%rbp), %rax
 1272      F1FFFF
 1273 0d6a 488D3500 		leaq	.LC12(%rip), %rsi
 1273      000000
 1274 0d71 4889C7   		movq	%rax, %rdi
 1275 0d74 B8000000 		movl	$0, %eax
 1275      00
 1276 0d79 E8000000 		call	errRender@PLT
 1276      00
 1277 0d7e C78568F1 		movl	$11, -3736(%rbp)
 1277      FFFF0B00 
 1277      0000
 1278 0d88 E90A1A00 		jmp	.L67
 1278      00
 1279              	.L73:
 1280              		.loc 2 326 0 discriminator 2
 1281 0d8d 80BD5EF1 		cmpb	$47, -3746(%rbp)
 1281      FFFF2F
 1282 0d94 7E09     		jle	.L74
 1283 0d96 80BD5EF1 		cmpb	$57, -3746(%rbp)
 1283      FFFF39
 1284 0d9d 7E53     		jle	.L75
 1285              	.L74:
 1286              		.loc 2 326 0 discriminator 1
 1287 0d9f 488B8578 		movq	-3720(%rbp), %rax
 1287      F1FFFF
 1288 0da6 4889C2   		movq	%rax, %rdx
 1289 0da9 488B8538 		movq	-3784(%rbp), %rax
 1289      F1FFFF
 1290 0db0 4829C2   		subq	%rax, %rdx
 1291 0db3 4889D0   		movq	%rdx, %rax
 1292 0db6 4889C7   		movq	%rax, %rdi
 1293 0db9 E8FCF3FF 		call	spaces
 1293      FF
 1294 0dbe 4889C1   		movq	%rax, %rcx
 1295 0dc1 488B9538 		movq	-3784(%rbp), %rdx
 1295      F1FFFF
 1296 0dc8 488B8528 		movq	-3800(%rbp), %rax
 1296      F1FFFF
 1297 0dcf 488D3500 		leaq	.LC15(%rip), %rsi
 1297      000000
 1298 0dd6 4889C7   		movq	%rax, %rdi
 1299 0dd9 B8000000 		movl	$0, %eax
 1299      00
 1300 0dde E8000000 		call	errRender@PLT
 1300      00
 1301 0de3 C78568F1 		movl	$11, -3736(%rbp)
 1301      FFFF0B00 
 1301      0000
 1302 0ded E9A51900 		jmp	.L67
 1302      00
 1303              	.L75:
 1304 0df2 488B8578 		movq	-3720(%rbp), %rax
 1304      F1FFFF
 1305 0df9 488D8D78 		leaq	-3720(%rbp), %rcx
 1305      F1FFFF
 1306 0e00 BA0A0000 		movl	$10, %edx
 1306      00
 1307 0e05 4889CE   		movq	%rcx, %rsi
 1308 0e08 4889C7   		movq	%rax, %rdi
 1309 0e0b E8000000 		call	strtoul@PLT
 1309      00
 1310 0e10 888560F1 		movb	%al, -3744(%rbp)
 1310      FFFF
 327:prog.c        **** 	SET_BIT(progPort, progBit, PIN_LOW, "xProgram");
 1311              		.loc 2 327 0 is_stmt 1 discriminator 1
 1312 0e16 0FB6955F 		movzbl	-3745(%rbp), %edx
 1312      F1FFFF
 1313 0e1d 0FB68560 		movzbl	-3744(%rbp), %eax
 1313      F1FFFF
 1314 0e24 4898     		cltq
 1315 0e26 4863D2   		movslq	%edx, %rdx
 1316 0e29 48C1E205 		salq	$5, %rdx
 1317 0e2d 4801D0   		addq	%rdx, %rax
 1318 0e30 8B848580 		movl	-3712(%rbp,%rax,4), %eax
 1318      F1FFFF
 1319 0e37 85C0     		testl	%eax, %eax
 1320 0e39 7472     		je	.L76
 1321 0e3b 488B8578 		movq	-3720(%rbp), %rax
 1321      F1FFFF
 1322 0e42 4889C2   		movq	%rax, %rdx
 1323 0e45 488B8538 		movq	-3784(%rbp), %rax
 1323      F1FFFF
 1324 0e4c 4829C2   		subq	%rax, %rdx
 1325 0e4f 4889D0   		movq	%rdx, %rax
 1326 0e52 4883E801 		subq	$1, %rax
 1327 0e56 4889C7   		movq	%rax, %rdi
 1328 0e59 E85CF3FF 		call	spaces
 1328      FF
 1329 0e5e 4889C1   		movq	%rax, %rcx
 1330 0e61 0FB69560 		movzbl	-3744(%rbp), %edx
 1330      F1FFFF
 1331 0e68 0FB6855F 		movzbl	-3745(%rbp), %eax
 1331      F1FFFF
 1332 0e6f 8D7041   		leal	65(%rax), %esi
 1333 0e72 488BBD38 		movq	-3784(%rbp), %rdi
 1333      F1FFFF
 1334 0e79 488B8528 		movq	-3800(%rbp), %rax
 1334      F1FFFF
 1335 0e80 4989C9   		movq	%rcx, %r9
 1336 0e83 4989F8   		movq	%rdi, %r8
 1337 0e86 89D1     		movl	%edx, %ecx
 1338 0e88 89F2     		movl	%esi, %edx
 1339 0e8a 488D3500 		leaq	.LC16(%rip), %rsi
 1339      000000
 1340 0e91 4889C7   		movq	%rax, %rdi
 1341 0e94 B8000000 		movl	$0, %eax
 1341      00
 1342 0e99 E8000000 		call	errRender@PLT
 1342      00
 1343 0e9e C78568F1 		movl	$11, -3736(%rbp)
 1343      FFFF0B00 
 1343      0000
 1344 0ea8 E9EA1800 		jmp	.L67
 1344      00
 1345              	.L76:
 1346              		.loc 2 327 0 is_stmt 0 discriminator 2
 1347 0ead 0FB6955F 		movzbl	-3745(%rbp), %edx
 1347      F1FFFF
 1348 0eb4 0FB68560 		movzbl	-3744(%rbp), %eax
 1348      F1FFFF
 1349 0ebb 4898     		cltq
 1350 0ebd 4863D2   		movslq	%edx, %rdx
 1351 0ec0 48C1E205 		salq	$5, %rdx
 1352 0ec4 4801D0   		addq	%rdx, %rax
 1353 0ec7 C7848580 		movl	$2, -3712(%rbp,%rax,4)
 1353      F1FFFF02 
 1353      000000
 328:prog.c        **** 
 329:prog.c        **** 	GET_PAIR(initPort, initBit, "xProgram");
 1354              		.loc 2 329 0 is_stmt 1 discriminator 2
 1355 0ed2 488B8578 		movq	-3720(%rbp), %rax
 1355      F1FFFF
 1356 0ed9 0FB600   		movzbl	(%rax), %eax
 1357 0edc 88855EF1 		movb	%al, -3746(%rbp)
 1357      FFFF
 1358 0ee2 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1358      FFFF00
 1359 0ee9 7553     		jne	.L77
 1360              		.loc 2 329 0 is_stmt 0 discriminator 1
 1361 0eeb 488B8578 		movq	-3720(%rbp), %rax
 1361      F1FFFF
 1362 0ef2 4889C2   		movq	%rax, %rdx
 1363 0ef5 488B8538 		movq	-3784(%rbp), %rax
 1363      F1FFFF
 1364 0efc 4829C2   		subq	%rax, %rdx
 1365 0eff 4889D0   		movq	%rdx, %rax
 1366 0f02 4889C7   		movq	%rax, %rdi
 1367 0f05 E8B0F2FF 		call	spaces
 1367      FF
 1368 0f0a 4889C1   		movq	%rax, %rcx
 1369 0f0d 488B9538 		movq	-3784(%rbp), %rdx
 1369      F1FFFF
 1370 0f14 488B8528 		movq	-3800(%rbp), %rax
 1370      F1FFFF
 1371 0f1b 488D3500 		leaq	.LC12(%rip), %rsi
 1371      000000
 1372 0f22 4889C7   		movq	%rax, %rdi
 1373 0f25 B8000000 		movl	$0, %eax
 1373      00
 1374 0f2a E8000000 		call	errRender@PLT
 1374      00
 1375 0f2f C78568F1 		movl	$11, -3736(%rbp)
 1375      FFFF0B00 
 1375      0000
 1376 0f39 E9591800 		jmp	.L67
 1376      00
 1377              	.L77:
 1378              		.loc 2 329 0 discriminator 2
 1379 0f3e 80BD5EF1 		cmpb	$64, -3746(%rbp)
 1379      FFFF40
 1380 0f45 7E09     		jle	.L78
 1381 0f47 80BD5EF1 		cmpb	$90, -3746(%rbp)
 1381      FFFF5A
 1382 0f4e 7E53     		jle	.L79
 1383              	.L78:
 1384              		.loc 2 329 0 discriminator 1
 1385 0f50 488B8578 		movq	-3720(%rbp), %rax
 1385      F1FFFF
 1386 0f57 4889C2   		movq	%rax, %rdx
 1387 0f5a 488B8538 		movq	-3784(%rbp), %rax
 1387      F1FFFF
 1388 0f61 4829C2   		subq	%rax, %rdx
 1389 0f64 4889D0   		movq	%rdx, %rax
 1390 0f67 4889C7   		movq	%rax, %rdi
 1391 0f6a E84BF2FF 		call	spaces
 1391      FF
 1392 0f6f 4889C1   		movq	%rax, %rcx
 1393 0f72 488B9538 		movq	-3784(%rbp), %rdx
 1393      F1FFFF
 1394 0f79 488B8528 		movq	-3800(%rbp), %rax
 1394      F1FFFF
 1395 0f80 488D3500 		leaq	.LC14(%rip), %rsi
 1395      000000
 1396 0f87 4889C7   		movq	%rax, %rdi
 1397 0f8a B8000000 		movl	$0, %eax
 1397      00
 1398 0f8f E8000000 		call	errRender@PLT
 1398      00
 1399 0f94 C78568F1 		movl	$11, -3736(%rbp)
 1399      FFFF0B00 
 1399      0000
 1400 0f9e E9F41700 		jmp	.L67
 1400      00
 1401              	.L79:
 1402 0fa3 0FB6855E 		movzbl	-3746(%rbp), %eax
 1402      F1FFFF
 1403 0faa 83E841   		subl	$65, %eax
 1404 0fad 888561F1 		movb	%al, -3743(%rbp)
 1404      FFFF
 1405 0fb3 488B8578 		movq	-3720(%rbp), %rax
 1405      F1FFFF
 1406 0fba 4883C001 		addq	$1, %rax
 1407 0fbe 48898578 		movq	%rax, -3720(%rbp)
 1407      F1FFFF
 1408 0fc5 488B8578 		movq	-3720(%rbp), %rax
 1408      F1FFFF
 1409 0fcc 0FB600   		movzbl	(%rax), %eax
 1410 0fcf 88855EF1 		movb	%al, -3746(%rbp)
 1410      FFFF
 1411 0fd5 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1411      FFFF00
 1412 0fdc 7553     		jne	.L80
 1413 0fde 488B8578 		movq	-3720(%rbp), %rax
 1413      F1FFFF
 1414 0fe5 4889C2   		movq	%rax, %rdx
 1415 0fe8 488B8538 		movq	-3784(%rbp), %rax
 1415      F1FFFF
 1416 0fef 4829C2   		subq	%rax, %rdx
 1417 0ff2 4889D0   		movq	%rdx, %rax
 1418 0ff5 4889C7   		movq	%rax, %rdi
 1419 0ff8 E8BDF1FF 		call	spaces
 1419      FF
 1420 0ffd 4889C1   		movq	%rax, %rcx
 1421 1000 488B9538 		movq	-3784(%rbp), %rdx
 1421      F1FFFF
 1422 1007 488B8528 		movq	-3800(%rbp), %rax
 1422      F1FFFF
 1423 100e 488D3500 		leaq	.LC12(%rip), %rsi
 1423      000000
 1424 1015 4889C7   		movq	%rax, %rdi
 1425 1018 B8000000 		movl	$0, %eax
 1425      00
 1426 101d E8000000 		call	errRender@PLT
 1426      00
 1427 1022 C78568F1 		movl	$11, -3736(%rbp)
 1427      FFFF0B00 
 1427      0000
 1428 102c E9661700 		jmp	.L67
 1428      00
 1429              	.L80:
 1430              		.loc 2 329 0 discriminator 2
 1431 1031 80BD5EF1 		cmpb	$47, -3746(%rbp)
 1431      FFFF2F
 1432 1038 7E09     		jle	.L81
 1433 103a 80BD5EF1 		cmpb	$57, -3746(%rbp)
 1433      FFFF39
 1434 1041 7E53     		jle	.L82
 1435              	.L81:
 1436              		.loc 2 329 0 discriminator 1
 1437 1043 488B8578 		movq	-3720(%rbp), %rax
 1437      F1FFFF
 1438 104a 4889C2   		movq	%rax, %rdx
 1439 104d 488B8538 		movq	-3784(%rbp), %rax
 1439      F1FFFF
 1440 1054 4829C2   		subq	%rax, %rdx
 1441 1057 4889D0   		movq	%rdx, %rax
 1442 105a 4889C7   		movq	%rax, %rdi
 1443 105d E858F1FF 		call	spaces
 1443      FF
 1444 1062 4889C1   		movq	%rax, %rcx
 1445 1065 488B9538 		movq	-3784(%rbp), %rdx
 1445      F1FFFF
 1446 106c 488B8528 		movq	-3800(%rbp), %rax
 1446      F1FFFF
 1447 1073 488D3500 		leaq	.LC15(%rip), %rsi
 1447      000000
 1448 107a 4889C7   		movq	%rax, %rdi
 1449 107d B8000000 		movl	$0, %eax
 1449      00
 1450 1082 E8000000 		call	errRender@PLT
 1450      00
 1451 1087 C78568F1 		movl	$11, -3736(%rbp)
 1451      FFFF0B00 
 1451      0000
 1452 1091 E9011700 		jmp	.L67
 1452      00
 1453              	.L82:
 1454 1096 488B8578 		movq	-3720(%rbp), %rax
 1454      F1FFFF
 1455 109d 488D8D78 		leaq	-3720(%rbp), %rcx
 1455      F1FFFF
 1456 10a4 BA0A0000 		movl	$10, %edx
 1456      00
 1457 10a9 4889CE   		movq	%rcx, %rsi
 1458 10ac 4889C7   		movq	%rax, %rdi
 1459 10af E8000000 		call	strtoul@PLT
 1459      00
 1460 10b4 888562F1 		movb	%al, -3742(%rbp)
 1460      FFFF
 330:prog.c        **** 	SET_BIT(initPort, initBit, PIN_INPUT, "xProgram");
 1461              		.loc 2 330 0 is_stmt 1 discriminator 1
 1462 10ba 0FB69561 		movzbl	-3743(%rbp), %edx
 1462      F1FFFF
 1463 10c1 0FB68562 		movzbl	-3742(%rbp), %eax
 1463      F1FFFF
 1464 10c8 4898     		cltq
 1465 10ca 4863D2   		movslq	%edx, %rdx
 1466 10cd 48C1E205 		salq	$5, %rdx
 1467 10d1 4801D0   		addq	%rdx, %rax
 1468 10d4 8B848580 		movl	-3712(%rbp,%rax,4), %eax
 1468      F1FFFF
 1469 10db 85C0     		testl	%eax, %eax
 1470 10dd 7472     		je	.L83
 1471 10df 488B8578 		movq	-3720(%rbp), %rax
 1471      F1FFFF
 1472 10e6 4889C2   		movq	%rax, %rdx
 1473 10e9 488B8538 		movq	-3784(%rbp), %rax
 1473      F1FFFF
 1474 10f0 4829C2   		subq	%rax, %rdx
 1475 10f3 4889D0   		movq	%rdx, %rax
 1476 10f6 4883E801 		subq	$1, %rax
 1477 10fa 4889C7   		movq	%rax, %rdi
 1478 10fd E8B8F0FF 		call	spaces
 1478      FF
 1479 1102 4889C1   		movq	%rax, %rcx
 1480 1105 0FB69562 		movzbl	-3742(%rbp), %edx
 1480      F1FFFF
 1481 110c 0FB68561 		movzbl	-3743(%rbp), %eax
 1481      F1FFFF
 1482 1113 8D7041   		leal	65(%rax), %esi
 1483 1116 488BBD38 		movq	-3784(%rbp), %rdi
 1483      F1FFFF
 1484 111d 488B8528 		movq	-3800(%rbp), %rax
 1484      F1FFFF
 1485 1124 4989C9   		movq	%rcx, %r9
 1486 1127 4989F8   		movq	%rdi, %r8
 1487 112a 89D1     		movl	%edx, %ecx
 1488 112c 89F2     		movl	%esi, %edx
 1489 112e 488D3500 		leaq	.LC16(%rip), %rsi
 1489      000000
 1490 1135 4889C7   		movq	%rax, %rdi
 1491 1138 B8000000 		movl	$0, %eax
 1491      00
 1492 113d E8000000 		call	errRender@PLT
 1492      00
 1493 1142 C78568F1 		movl	$11, -3736(%rbp)
 1493      FFFF0B00 
 1493      0000
 1494 114c E9461600 		jmp	.L67
 1494      00
 1495              	.L83:
 1496              		.loc 2 330 0 is_stmt 0 discriminator 2
 1497 1151 0FB69561 		movzbl	-3743(%rbp), %edx
 1497      F1FFFF
 1498 1158 0FB68562 		movzbl	-3742(%rbp), %eax
 1498      F1FFFF
 1499 115f 4898     		cltq
 1500 1161 4863D2   		movslq	%edx, %rdx
 1501 1164 48C1E205 		salq	$5, %rdx
 1502 1168 4801D0   		addq	%rdx, %rax
 1503 116b C7848580 		movl	$3, -3712(%rbp,%rax,4)
 1503      F1FFFF03 
 1503      000000
 331:prog.c        **** 
 332:prog.c        **** 	GET_PAIR(donePort, doneBit, "xProgram");
 1504              		.loc 2 332 0 is_stmt 1 discriminator 2
 1505 1176 488B8578 		movq	-3720(%rbp), %rax
 1505      F1FFFF
 1506 117d 0FB600   		movzbl	(%rax), %eax
 1507 1180 88855EF1 		movb	%al, -3746(%rbp)
 1507      FFFF
 1508 1186 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1508      FFFF00
 1509 118d 7553     		jne	.L84
 1510              		.loc 2 332 0 is_stmt 0 discriminator 1
 1511 118f 488B8578 		movq	-3720(%rbp), %rax
 1511      F1FFFF
 1512 1196 4889C2   		movq	%rax, %rdx
 1513 1199 488B8538 		movq	-3784(%rbp), %rax
 1513      F1FFFF
 1514 11a0 4829C2   		subq	%rax, %rdx
 1515 11a3 4889D0   		movq	%rdx, %rax
 1516 11a6 4889C7   		movq	%rax, %rdi
 1517 11a9 E80CF0FF 		call	spaces
 1517      FF
 1518 11ae 4889C1   		movq	%rax, %rcx
 1519 11b1 488B9538 		movq	-3784(%rbp), %rdx
 1519      F1FFFF
 1520 11b8 488B8528 		movq	-3800(%rbp), %rax
 1520      F1FFFF
 1521 11bf 488D3500 		leaq	.LC12(%rip), %rsi
 1521      000000
 1522 11c6 4889C7   		movq	%rax, %rdi
 1523 11c9 B8000000 		movl	$0, %eax
 1523      00
 1524 11ce E8000000 		call	errRender@PLT
 1524      00
 1525 11d3 C78568F1 		movl	$11, -3736(%rbp)
 1525      FFFF0B00 
 1525      0000
 1526 11dd E9B51500 		jmp	.L67
 1526      00
 1527              	.L84:
 1528              		.loc 2 332 0 discriminator 2
 1529 11e2 80BD5EF1 		cmpb	$64, -3746(%rbp)
 1529      FFFF40
 1530 11e9 7E09     		jle	.L85
 1531 11eb 80BD5EF1 		cmpb	$90, -3746(%rbp)
 1531      FFFF5A
 1532 11f2 7E53     		jle	.L86
 1533              	.L85:
 1534              		.loc 2 332 0 discriminator 1
 1535 11f4 488B8578 		movq	-3720(%rbp), %rax
 1535      F1FFFF
 1536 11fb 4889C2   		movq	%rax, %rdx
 1537 11fe 488B8538 		movq	-3784(%rbp), %rax
 1537      F1FFFF
 1538 1205 4829C2   		subq	%rax, %rdx
 1539 1208 4889D0   		movq	%rdx, %rax
 1540 120b 4889C7   		movq	%rax, %rdi
 1541 120e E8A7EFFF 		call	spaces
 1541      FF
 1542 1213 4889C1   		movq	%rax, %rcx
 1543 1216 488B9538 		movq	-3784(%rbp), %rdx
 1543      F1FFFF
 1544 121d 488B8528 		movq	-3800(%rbp), %rax
 1544      F1FFFF
 1545 1224 488D3500 		leaq	.LC14(%rip), %rsi
 1545      000000
 1546 122b 4889C7   		movq	%rax, %rdi
 1547 122e B8000000 		movl	$0, %eax
 1547      00
 1548 1233 E8000000 		call	errRender@PLT
 1548      00
 1549 1238 C78568F1 		movl	$11, -3736(%rbp)
 1549      FFFF0B00 
 1549      0000
 1550 1242 E9501500 		jmp	.L67
 1550      00
 1551              	.L86:
 1552 1247 0FB6855E 		movzbl	-3746(%rbp), %eax
 1552      F1FFFF
 1553 124e 83E841   		subl	$65, %eax
 1554 1251 888563F1 		movb	%al, -3741(%rbp)
 1554      FFFF
 1555 1257 488B8578 		movq	-3720(%rbp), %rax
 1555      F1FFFF
 1556 125e 4883C001 		addq	$1, %rax
 1557 1262 48898578 		movq	%rax, -3720(%rbp)
 1557      F1FFFF
 1558 1269 488B8578 		movq	-3720(%rbp), %rax
 1558      F1FFFF
 1559 1270 0FB600   		movzbl	(%rax), %eax
 1560 1273 88855EF1 		movb	%al, -3746(%rbp)
 1560      FFFF
 1561 1279 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1561      FFFF00
 1562 1280 7553     		jne	.L87
 1563 1282 488B8578 		movq	-3720(%rbp), %rax
 1563      F1FFFF
 1564 1289 4889C2   		movq	%rax, %rdx
 1565 128c 488B8538 		movq	-3784(%rbp), %rax
 1565      F1FFFF
 1566 1293 4829C2   		subq	%rax, %rdx
 1567 1296 4889D0   		movq	%rdx, %rax
 1568 1299 4889C7   		movq	%rax, %rdi
 1569 129c E819EFFF 		call	spaces
 1569      FF
 1570 12a1 4889C1   		movq	%rax, %rcx
 1571 12a4 488B9538 		movq	-3784(%rbp), %rdx
 1571      F1FFFF
 1572 12ab 488B8528 		movq	-3800(%rbp), %rax
 1572      F1FFFF
 1573 12b2 488D3500 		leaq	.LC12(%rip), %rsi
 1573      000000
 1574 12b9 4889C7   		movq	%rax, %rdi
 1575 12bc B8000000 		movl	$0, %eax
 1575      00
 1576 12c1 E8000000 		call	errRender@PLT
 1576      00
 1577 12c6 C78568F1 		movl	$11, -3736(%rbp)
 1577      FFFF0B00 
 1577      0000
 1578 12d0 E9C21400 		jmp	.L67
 1578      00
 1579              	.L87:
 1580              		.loc 2 332 0 discriminator 2
 1581 12d5 80BD5EF1 		cmpb	$47, -3746(%rbp)
 1581      FFFF2F
 1582 12dc 7E09     		jle	.L88
 1583 12de 80BD5EF1 		cmpb	$57, -3746(%rbp)
 1583      FFFF39
 1584 12e5 7E53     		jle	.L89
 1585              	.L88:
 1586              		.loc 2 332 0 discriminator 1
 1587 12e7 488B8578 		movq	-3720(%rbp), %rax
 1587      F1FFFF
 1588 12ee 4889C2   		movq	%rax, %rdx
 1589 12f1 488B8538 		movq	-3784(%rbp), %rax
 1589      F1FFFF
 1590 12f8 4829C2   		subq	%rax, %rdx
 1591 12fb 4889D0   		movq	%rdx, %rax
 1592 12fe 4889C7   		movq	%rax, %rdi
 1593 1301 E8B4EEFF 		call	spaces
 1593      FF
 1594 1306 4889C1   		movq	%rax, %rcx
 1595 1309 488B9538 		movq	-3784(%rbp), %rdx
 1595      F1FFFF
 1596 1310 488B8528 		movq	-3800(%rbp), %rax
 1596      F1FFFF
 1597 1317 488D3500 		leaq	.LC15(%rip), %rsi
 1597      000000
 1598 131e 4889C7   		movq	%rax, %rdi
 1599 1321 B8000000 		movl	$0, %eax
 1599      00
 1600 1326 E8000000 		call	errRender@PLT
 1600      00
 1601 132b C78568F1 		movl	$11, -3736(%rbp)
 1601      FFFF0B00 
 1601      0000
 1602 1335 E95D1400 		jmp	.L67
 1602      00
 1603              	.L89:
 1604 133a 488B8578 		movq	-3720(%rbp), %rax
 1604      F1FFFF
 1605 1341 488D8D78 		leaq	-3720(%rbp), %rcx
 1605      F1FFFF
 1606 1348 BA0A0000 		movl	$10, %edx
 1606      00
 1607 134d 4889CE   		movq	%rcx, %rsi
 1608 1350 4889C7   		movq	%rax, %rdi
 1609 1353 E8000000 		call	strtoul@PLT
 1609      00
 1610 1358 888564F1 		movb	%al, -3740(%rbp)
 1610      FFFF
 333:prog.c        **** 	SET_BIT(donePort, doneBit, PIN_INPUT, "xProgram");
 1611              		.loc 2 333 0 is_stmt 1 discriminator 1
 1612 135e 0FB69563 		movzbl	-3741(%rbp), %edx
 1612      F1FFFF
 1613 1365 0FB68564 		movzbl	-3740(%rbp), %eax
 1613      F1FFFF
 1614 136c 4898     		cltq
 1615 136e 4863D2   		movslq	%edx, %rdx
 1616 1371 48C1E205 		salq	$5, %rdx
 1617 1375 4801D0   		addq	%rdx, %rax
 1618 1378 8B848580 		movl	-3712(%rbp,%rax,4), %eax
 1618      F1FFFF
 1619 137f 85C0     		testl	%eax, %eax
 1620 1381 7472     		je	.L90
 1621 1383 488B8578 		movq	-3720(%rbp), %rax
 1621      F1FFFF
 1622 138a 4889C2   		movq	%rax, %rdx
 1623 138d 488B8538 		movq	-3784(%rbp), %rax
 1623      F1FFFF
 1624 1394 4829C2   		subq	%rax, %rdx
 1625 1397 4889D0   		movq	%rdx, %rax
 1626 139a 4883E801 		subq	$1, %rax
 1627 139e 4889C7   		movq	%rax, %rdi
 1628 13a1 E814EEFF 		call	spaces
 1628      FF
 1629 13a6 4889C1   		movq	%rax, %rcx
 1630 13a9 0FB69564 		movzbl	-3740(%rbp), %edx
 1630      F1FFFF
 1631 13b0 0FB68563 		movzbl	-3741(%rbp), %eax
 1631      F1FFFF
 1632 13b7 8D7041   		leal	65(%rax), %esi
 1633 13ba 488BBD38 		movq	-3784(%rbp), %rdi
 1633      F1FFFF
 1634 13c1 488B8528 		movq	-3800(%rbp), %rax
 1634      F1FFFF
 1635 13c8 4989C9   		movq	%rcx, %r9
 1636 13cb 4989F8   		movq	%rdi, %r8
 1637 13ce 89D1     		movl	%edx, %ecx
 1638 13d0 89F2     		movl	%esi, %edx
 1639 13d2 488D3500 		leaq	.LC16(%rip), %rsi
 1639      000000
 1640 13d9 4889C7   		movq	%rax, %rdi
 1641 13dc B8000000 		movl	$0, %eax
 1641      00
 1642 13e1 E8000000 		call	errRender@PLT
 1642      00
 1643 13e6 C78568F1 		movl	$11, -3736(%rbp)
 1643      FFFF0B00 
 1643      0000
 1644 13f0 E9A21300 		jmp	.L67
 1644      00
 1645              	.L90:
 1646              		.loc 2 333 0 is_stmt 0 discriminator 2
 1647 13f5 0FB69563 		movzbl	-3741(%rbp), %edx
 1647      F1FFFF
 1648 13fc 0FB68564 		movzbl	-3740(%rbp), %eax
 1648      F1FFFF
 1649 1403 4898     		cltq
 1650 1405 4863D2   		movslq	%edx, %rdx
 1651 1408 48C1E205 		salq	$5, %rdx
 1652 140c 4801D0   		addq	%rdx, %rax
 1653 140f C7848580 		movl	$3, -3712(%rbp,%rax,4)
 1653      F1FFFF03 
 1653      000000
 334:prog.c        **** 
 335:prog.c        **** 	GET_PAIR(cclkPort, cclkBit, "xProgram");
 1654              		.loc 2 335 0 is_stmt 1 discriminator 2
 1655 141a 488B8578 		movq	-3720(%rbp), %rax
 1655      F1FFFF
 1656 1421 0FB600   		movzbl	(%rax), %eax
 1657 1424 88855EF1 		movb	%al, -3746(%rbp)
 1657      FFFF
 1658 142a 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1658      FFFF00
 1659 1431 7553     		jne	.L91
 1660              		.loc 2 335 0 is_stmt 0 discriminator 1
 1661 1433 488B8578 		movq	-3720(%rbp), %rax
 1661      F1FFFF
 1662 143a 4889C2   		movq	%rax, %rdx
 1663 143d 488B8538 		movq	-3784(%rbp), %rax
 1663      F1FFFF
 1664 1444 4829C2   		subq	%rax, %rdx
 1665 1447 4889D0   		movq	%rdx, %rax
 1666 144a 4889C7   		movq	%rax, %rdi
 1667 144d E868EDFF 		call	spaces
 1667      FF
 1668 1452 4889C1   		movq	%rax, %rcx
 1669 1455 488B9538 		movq	-3784(%rbp), %rdx
 1669      F1FFFF
 1670 145c 488B8528 		movq	-3800(%rbp), %rax
 1670      F1FFFF
 1671 1463 488D3500 		leaq	.LC12(%rip), %rsi
 1671      000000
 1672 146a 4889C7   		movq	%rax, %rdi
 1673 146d B8000000 		movl	$0, %eax
 1673      00
 1674 1472 E8000000 		call	errRender@PLT
 1674      00
 1675 1477 C78568F1 		movl	$11, -3736(%rbp)
 1675      FFFF0B00 
 1675      0000
 1676 1481 E9111300 		jmp	.L67
 1676      00
 1677              	.L91:
 1678              		.loc 2 335 0 discriminator 2
 1679 1486 80BD5EF1 		cmpb	$64, -3746(%rbp)
 1679      FFFF40
 1680 148d 7E09     		jle	.L92
 1681 148f 80BD5EF1 		cmpb	$90, -3746(%rbp)
 1681      FFFF5A
 1682 1496 7E53     		jle	.L93
 1683              	.L92:
 1684              		.loc 2 335 0 discriminator 1
 1685 1498 488B8578 		movq	-3720(%rbp), %rax
 1685      F1FFFF
 1686 149f 4889C2   		movq	%rax, %rdx
 1687 14a2 488B8538 		movq	-3784(%rbp), %rax
 1687      F1FFFF
 1688 14a9 4829C2   		subq	%rax, %rdx
 1689 14ac 4889D0   		movq	%rdx, %rax
 1690 14af 4889C7   		movq	%rax, %rdi
 1691 14b2 E803EDFF 		call	spaces
 1691      FF
 1692 14b7 4889C1   		movq	%rax, %rcx
 1693 14ba 488B9538 		movq	-3784(%rbp), %rdx
 1693      F1FFFF
 1694 14c1 488B8528 		movq	-3800(%rbp), %rax
 1694      F1FFFF
 1695 14c8 488D3500 		leaq	.LC14(%rip), %rsi
 1695      000000
 1696 14cf 4889C7   		movq	%rax, %rdi
 1697 14d2 B8000000 		movl	$0, %eax
 1697      00
 1698 14d7 E8000000 		call	errRender@PLT
 1698      00
 1699 14dc C78568F1 		movl	$11, -3736(%rbp)
 1699      FFFF0B00 
 1699      0000
 1700 14e6 E9AC1200 		jmp	.L67
 1700      00
 1701              	.L93:
 1702 14eb 0FB6855E 		movzbl	-3746(%rbp), %eax
 1702      F1FFFF
 1703 14f2 83E841   		subl	$65, %eax
 1704 14f5 888565F1 		movb	%al, -3739(%rbp)
 1704      FFFF
 1705 14fb 488B8578 		movq	-3720(%rbp), %rax
 1705      F1FFFF
 1706 1502 4883C001 		addq	$1, %rax
 1707 1506 48898578 		movq	%rax, -3720(%rbp)
 1707      F1FFFF
 1708 150d 488B8578 		movq	-3720(%rbp), %rax
 1708      F1FFFF
 1709 1514 0FB600   		movzbl	(%rax), %eax
 1710 1517 88855EF1 		movb	%al, -3746(%rbp)
 1710      FFFF
 1711 151d 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1711      FFFF00
 1712 1524 7553     		jne	.L94
 1713 1526 488B8578 		movq	-3720(%rbp), %rax
 1713      F1FFFF
 1714 152d 4889C2   		movq	%rax, %rdx
 1715 1530 488B8538 		movq	-3784(%rbp), %rax
 1715      F1FFFF
 1716 1537 4829C2   		subq	%rax, %rdx
 1717 153a 4889D0   		movq	%rdx, %rax
 1718 153d 4889C7   		movq	%rax, %rdi
 1719 1540 E875ECFF 		call	spaces
 1719      FF
 1720 1545 4889C1   		movq	%rax, %rcx
 1721 1548 488B9538 		movq	-3784(%rbp), %rdx
 1721      F1FFFF
 1722 154f 488B8528 		movq	-3800(%rbp), %rax
 1722      F1FFFF
 1723 1556 488D3500 		leaq	.LC12(%rip), %rsi
 1723      000000
 1724 155d 4889C7   		movq	%rax, %rdi
 1725 1560 B8000000 		movl	$0, %eax
 1725      00
 1726 1565 E8000000 		call	errRender@PLT
 1726      00
 1727 156a C78568F1 		movl	$11, -3736(%rbp)
 1727      FFFF0B00 
 1727      0000
 1728 1574 E91E1200 		jmp	.L67
 1728      00
 1729              	.L94:
 1730              		.loc 2 335 0 discriminator 2
 1731 1579 80BD5EF1 		cmpb	$47, -3746(%rbp)
 1731      FFFF2F
 1732 1580 7E09     		jle	.L95
 1733 1582 80BD5EF1 		cmpb	$57, -3746(%rbp)
 1733      FFFF39
 1734 1589 7E53     		jle	.L96
 1735              	.L95:
 1736              		.loc 2 335 0 discriminator 1
 1737 158b 488B8578 		movq	-3720(%rbp), %rax
 1737      F1FFFF
 1738 1592 4889C2   		movq	%rax, %rdx
 1739 1595 488B8538 		movq	-3784(%rbp), %rax
 1739      F1FFFF
 1740 159c 4829C2   		subq	%rax, %rdx
 1741 159f 4889D0   		movq	%rdx, %rax
 1742 15a2 4889C7   		movq	%rax, %rdi
 1743 15a5 E810ECFF 		call	spaces
 1743      FF
 1744 15aa 4889C1   		movq	%rax, %rcx
 1745 15ad 488B9538 		movq	-3784(%rbp), %rdx
 1745      F1FFFF
 1746 15b4 488B8528 		movq	-3800(%rbp), %rax
 1746      F1FFFF
 1747 15bb 488D3500 		leaq	.LC15(%rip), %rsi
 1747      000000
 1748 15c2 4889C7   		movq	%rax, %rdi
 1749 15c5 B8000000 		movl	$0, %eax
 1749      00
 1750 15ca E8000000 		call	errRender@PLT
 1750      00
 1751 15cf C78568F1 		movl	$11, -3736(%rbp)
 1751      FFFF0B00 
 1751      0000
 1752 15d9 E9B91100 		jmp	.L67
 1752      00
 1753              	.L96:
 1754 15de 488B8578 		movq	-3720(%rbp), %rax
 1754      F1FFFF
 1755 15e5 488D8D78 		leaq	-3720(%rbp), %rcx
 1755      F1FFFF
 1756 15ec BA0A0000 		movl	$10, %edx
 1756      00
 1757 15f1 4889CE   		movq	%rcx, %rsi
 1758 15f4 4889C7   		movq	%rax, %rdi
 1759 15f7 E8000000 		call	strtoul@PLT
 1759      00
 1760 15fc 888566F1 		movb	%al, -3738(%rbp)
 1760      FFFF
 336:prog.c        **** 	SET_BIT(cclkPort, cclkBit, PIN_LOW, "xProgram");
 1761              		.loc 2 336 0 is_stmt 1 discriminator 1
 1762 1602 0FB69565 		movzbl	-3739(%rbp), %edx
 1762      F1FFFF
 1763 1609 0FB68566 		movzbl	-3738(%rbp), %eax
 1763      F1FFFF
 1764 1610 4898     		cltq
 1765 1612 4863D2   		movslq	%edx, %rdx
 1766 1615 48C1E205 		salq	$5, %rdx
 1767 1619 4801D0   		addq	%rdx, %rax
 1768 161c 8B848580 		movl	-3712(%rbp,%rax,4), %eax
 1768      F1FFFF
 1769 1623 85C0     		testl	%eax, %eax
 1770 1625 7472     		je	.L97
 1771 1627 488B8578 		movq	-3720(%rbp), %rax
 1771      F1FFFF
 1772 162e 4889C2   		movq	%rax, %rdx
 1773 1631 488B8538 		movq	-3784(%rbp), %rax
 1773      F1FFFF
 1774 1638 4829C2   		subq	%rax, %rdx
 1775 163b 4889D0   		movq	%rdx, %rax
 1776 163e 4883E801 		subq	$1, %rax
 1777 1642 4889C7   		movq	%rax, %rdi
 1778 1645 E870EBFF 		call	spaces
 1778      FF
 1779 164a 4889C1   		movq	%rax, %rcx
 1780 164d 0FB69566 		movzbl	-3738(%rbp), %edx
 1780      F1FFFF
 1781 1654 0FB68565 		movzbl	-3739(%rbp), %eax
 1781      F1FFFF
 1782 165b 8D7041   		leal	65(%rax), %esi
 1783 165e 488BBD38 		movq	-3784(%rbp), %rdi
 1783      F1FFFF
 1784 1665 488B8528 		movq	-3800(%rbp), %rax
 1784      F1FFFF
 1785 166c 4989C9   		movq	%rcx, %r9
 1786 166f 4989F8   		movq	%rdi, %r8
 1787 1672 89D1     		movl	%edx, %ecx
 1788 1674 89F2     		movl	%esi, %edx
 1789 1676 488D3500 		leaq	.LC16(%rip), %rsi
 1789      000000
 1790 167d 4889C7   		movq	%rax, %rdi
 1791 1680 B8000000 		movl	$0, %eax
 1791      00
 1792 1685 E8000000 		call	errRender@PLT
 1792      00
 1793 168a C78568F1 		movl	$11, -3736(%rbp)
 1793      FFFF0B00 
 1793      0000
 1794 1694 E9FE1000 		jmp	.L67
 1794      00
 1795              	.L97:
 1796              		.loc 2 336 0 is_stmt 0 discriminator 2
 1797 1699 0FB69565 		movzbl	-3739(%rbp), %edx
 1797      F1FFFF
 1798 16a0 0FB68566 		movzbl	-3738(%rbp), %eax
 1798      F1FFFF
 1799 16a7 4898     		cltq
 1800 16a9 4863D2   		movslq	%edx, %rdx
 1801 16ac 48C1E205 		salq	$5, %rdx
 1802 16b0 4801D0   		addq	%rdx, %rax
 1803 16b3 C7848580 		movl	$2, -3712(%rbp,%rax,4)
 1803      F1FFFF02 
 1803      000000
 337:prog.c        **** 
 338:prog.c        **** 	GET_PORT(dataPort, "xProgram");
 1804              		.loc 2 338 0 is_stmt 1 discriminator 2
 1805 16be 488B8578 		movq	-3720(%rbp), %rax
 1805      F1FFFF
 1806 16c5 0FB600   		movzbl	(%rax), %eax
 1807 16c8 88855EF1 		movb	%al, -3746(%rbp)
 1807      FFFF
 1808 16ce 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1808      FFFF00
 1809 16d5 7553     		jne	.L98
 1810              		.loc 2 338 0 is_stmt 0 discriminator 1
 1811 16d7 488B8578 		movq	-3720(%rbp), %rax
 1811      F1FFFF
 1812 16de 4889C2   		movq	%rax, %rdx
 1813 16e1 488B8538 		movq	-3784(%rbp), %rax
 1813      F1FFFF
 1814 16e8 4829C2   		subq	%rax, %rdx
 1815 16eb 4889D0   		movq	%rdx, %rax
 1816 16ee 4889C7   		movq	%rax, %rdi
 1817 16f1 E8C4EAFF 		call	spaces
 1817      FF
 1818 16f6 4889C1   		movq	%rax, %rcx
 1819 16f9 488B9538 		movq	-3784(%rbp), %rdx
 1819      F1FFFF
 1820 1700 488B8528 		movq	-3800(%rbp), %rax
 1820      F1FFFF
 1821 1707 488D3500 		leaq	.LC12(%rip), %rsi
 1821      000000
 1822 170e 4889C7   		movq	%rax, %rdi
 1823 1711 B8000000 		movl	$0, %eax
 1823      00
 1824 1716 E8000000 		call	errRender@PLT
 1824      00
 1825 171b C78568F1 		movl	$11, -3736(%rbp)
 1825      FFFF0B00 
 1825      0000
 1826 1725 E96D1000 		jmp	.L67
 1826      00
 1827              	.L98:
 1828              		.loc 2 338 0 discriminator 2
 1829 172a 80BD5EF1 		cmpb	$64, -3746(%rbp)
 1829      FFFF40
 1830 1731 7E09     		jle	.L99
 1831 1733 80BD5EF1 		cmpb	$90, -3746(%rbp)
 1831      FFFF5A
 1832 173a 7E53     		jle	.L100
 1833              	.L99:
 1834              		.loc 2 338 0 discriminator 1
 1835 173c 488B8578 		movq	-3720(%rbp), %rax
 1835      F1FFFF
 1836 1743 4889C2   		movq	%rax, %rdx
 1837 1746 488B8538 		movq	-3784(%rbp), %rax
 1837      F1FFFF
 1838 174d 4829C2   		subq	%rax, %rdx
 1839 1750 4889D0   		movq	%rdx, %rax
 1840 1753 4889C7   		movq	%rax, %rdi
 1841 1756 E85FEAFF 		call	spaces
 1841      FF
 1842 175b 4889C1   		movq	%rax, %rcx
 1843 175e 488B9538 		movq	-3784(%rbp), %rdx
 1843      F1FFFF
 1844 1765 488B8528 		movq	-3800(%rbp), %rax
 1844      F1FFFF
 1845 176c 488D3500 		leaq	.LC14(%rip), %rsi
 1845      000000
 1846 1773 4889C7   		movq	%rax, %rdi
 1847 1776 B8000000 		movl	$0, %eax
 1847      00
 1848 177b E8000000 		call	errRender@PLT
 1848      00
 1849 1780 C78568F1 		movl	$11, -3736(%rbp)
 1849      FFFF0B00 
 1849      0000
 1850 178a E9081000 		jmp	.L67
 1850      00
 1851              	.L100:
 1852 178f 0FB6855E 		movzbl	-3746(%rbp), %eax
 1852      F1FFFF
 1853 1796 83E841   		subl	$65, %eax
 1854 1799 888567F1 		movb	%al, -3737(%rbp)
 1854      FFFF
 1855 179f 488B8578 		movq	-3720(%rbp), %rax
 1855      F1FFFF
 1856 17a6 4883C001 		addq	$1, %rax
 1857 17aa 48898578 		movq	%rax, -3720(%rbp)
 1857      F1FFFF
 339:prog.c        **** 	if ( progOp == PROG_PARALLEL ) {
 1858              		.loc 2 339 0 is_stmt 1 discriminator 1
 1859 17b1 83BD44F1 		cmpl	$5, -3772(%rbp)
 1859      FFFF05
 1860 17b8 0F851202 		jne	.L101
 1860      0000
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 1861              		.loc 2 340 0
 1862 17be C7856CF1 		movl	$0, -3732(%rbp)
 1862      FFFF0000 
 1862      0000
 1863 17c8 E9D80100 		jmp	.L102
 1863      00
 1864              	.L107:
 341:prog.c        **** 			GET_DIGIT(dataBit[i], "xProgram");
 1865              		.loc 2 341 0
 1866 17cd 488B8578 		movq	-3720(%rbp), %rax
 1866      F1FFFF
 1867 17d4 0FB600   		movzbl	(%rax), %eax
 1868 17d7 88855EF1 		movb	%al, -3746(%rbp)
 1868      FFFF
 1869 17dd 80BD5EF1 		cmpb	$0, -3746(%rbp)
 1869      FFFF00
 1870 17e4 7553     		jne	.L103
 1871              		.loc 2 341 0 is_stmt 0 discriminator 1
 1872 17e6 488B8578 		movq	-3720(%rbp), %rax
 1872      F1FFFF
 1873 17ed 4889C2   		movq	%rax, %rdx
 1874 17f0 488B8538 		movq	-3784(%rbp), %rax
 1874      F1FFFF
 1875 17f7 4829C2   		subq	%rax, %rdx
 1876 17fa 4889D0   		movq	%rdx, %rax
 1877 17fd 4889C7   		movq	%rax, %rdi
 1878 1800 E8B5E9FF 		call	spaces
 1878      FF
 1879 1805 4889C1   		movq	%rax, %rcx
 1880 1808 488B9538 		movq	-3784(%rbp), %rdx
 1880      F1FFFF
 1881 180f 488B8528 		movq	-3800(%rbp), %rax
 1881      F1FFFF
 1882 1816 488D3500 		leaq	.LC12(%rip), %rsi
 1882      000000
 1883 181d 4889C7   		movq	%rax, %rdi
 1884 1820 B8000000 		movl	$0, %eax
 1884      00
 1885 1825 E8000000 		call	errRender@PLT
 1885      00
 1886 182a C78568F1 		movl	$11, -3736(%rbp)
 1886      FFFF0B00 
 1886      0000
 1887 1834 E95E0F00 		jmp	.L67
 1887      00
 1888              	.L103:
 1889              		.loc 2 341 0 discriminator 2
 1890 1839 80BD5EF1 		cmpb	$47, -3746(%rbp)
 1890      FFFF2F
 1891 1840 7E09     		jle	.L104
 1892 1842 80BD5EF1 		cmpb	$55, -3746(%rbp)
 1892      FFFF37
 1893 1849 7E48     		jle	.L105
 1894              	.L104:
 1895              		.loc 2 341 0 discriminator 1
 1896 184b 488B8578 		movq	-3720(%rbp), %rax
 1896      F1FFFF
 1897 1852 4889C2   		movq	%rax, %rdx
 1898 1855 488B8538 		movq	-3784(%rbp), %rax
 1898      F1FFFF
 1899 185c 4889D1   		movq	%rdx, %rcx
 1900 185f 4829C1   		subq	%rax, %rcx
 1901 1862 0FBE955E 		movsbl	-3746(%rbp), %edx
 1901      F1FFFF
 1902 1869 488B8528 		movq	-3800(%rbp), %rax
 1902      F1FFFF
 1903 1870 488D3500 		leaq	.LC17(%rip), %rsi
 1903      000000
 1904 1877 4889C7   		movq	%rax, %rdi
 1905 187a B8000000 		movl	$0, %eax
 1905      00
 1906 187f E8000000 		call	errRender@PLT
 1906      00
 1907 1884 C78568F1 		movl	$11, -3736(%rbp)
 1907      FFFF0B00 
 1907      0000
 1908 188e E9040F00 		jmp	.L67
 1908      00
 1909              	.L105:
 1910 1893 0FB6855E 		movzbl	-3746(%rbp), %eax
 1910      F1FFFF
 1911 189a 8D50D0   		leal	-48(%rax), %edx
 1912 189d 8B856CF1 		movl	-3732(%rbp), %eax
 1912      FFFF
 1913 18a3 4898     		cltq
 1914 18a5 88940580 		movb	%dl, -384(%rbp,%rax)
 1914      FEFFFF
 1915 18ac 488B8578 		movq	-3720(%rbp), %rax
 1915      F1FFFF
 1916 18b3 4883C001 		addq	$1, %rax
 1917 18b7 48898578 		movq	%rax, -3720(%rbp)
 1917      F1FFFF
 342:prog.c        **** 			SET_BIT(dataPort, dataBit[i], PIN_LOW, "xProgram");
 1918              		.loc 2 342 0 is_stmt 1 discriminator 1
 1919 18be 0FB69567 		movzbl	-3737(%rbp), %edx
 1919      F1FFFF
 1920 18c5 8B856CF1 		movl	-3732(%rbp), %eax
 1920      FFFF
 1921 18cb 4898     		cltq
 1922 18cd 0FB68405 		movzbl	-384(%rbp,%rax), %eax
 1922      80FEFFFF 
 1923 18d5 0FB6C0   		movzbl	%al, %eax
 1924 18d8 4898     		cltq
 1925 18da 4863D2   		movslq	%edx, %rdx
 1926 18dd 48C1E205 		salq	$5, %rdx
 1927 18e1 4801D0   		addq	%rdx, %rax
 1928 18e4 8B848580 		movl	-3712(%rbp,%rax,4), %eax
 1928      F1FFFF
 1929 18eb 85C0     		testl	%eax, %eax
 1930 18ed 747E     		je	.L106
 1931 18ef 488B8578 		movq	-3720(%rbp), %rax
 1931      F1FFFF
 1932 18f6 4889C2   		movq	%rax, %rdx
 1933 18f9 488B8538 		movq	-3784(%rbp), %rax
 1933      F1FFFF
 1934 1900 4829C2   		subq	%rax, %rdx
 1935 1903 4889D0   		movq	%rdx, %rax
 1936 1906 4883E801 		subq	$1, %rax
 1937 190a 4889C7   		movq	%rax, %rdi
 1938 190d E8A8E8FF 		call	spaces
 1938      FF
 1939 1912 4889C1   		movq	%rax, %rcx
 1940 1915 8B856CF1 		movl	-3732(%rbp), %eax
 1940      FFFF
 1941 191b 4898     		cltq
 1942 191d 0FB68405 		movzbl	-384(%rbp,%rax), %eax
 1942      80FEFFFF 
 1943 1925 0FB6D0   		movzbl	%al, %edx
 1944 1928 0FB68567 		movzbl	-3737(%rbp), %eax
 1944      F1FFFF
 1945 192f 8D7041   		leal	65(%rax), %esi
 1946 1932 488BBD38 		movq	-3784(%rbp), %rdi
 1946      F1FFFF
 1947 1939 488B8528 		movq	-3800(%rbp), %rax
 1947      F1FFFF
 1948 1940 4989C9   		movq	%rcx, %r9
 1949 1943 4989F8   		movq	%rdi, %r8
 1950 1946 89D1     		movl	%edx, %ecx
 1951 1948 89F2     		movl	%esi, %edx
 1952 194a 488D3500 		leaq	.LC16(%rip), %rsi
 1952      000000
 1953 1951 4889C7   		movq	%rax, %rdi
 1954 1954 B8000000 		movl	$0, %eax
 1954      00
 1955 1959 E8000000 		call	errRender@PLT
 1955      00
 1956 195e C78568F1 		movl	$11, -3736(%rbp)
 1956      FFFF0B00 
 1956      0000
 1957 1968 E92A0E00 		jmp	.L67
 1957      00
 1958              	.L106:
 1959              		.loc 2 342 0 is_stmt 0 discriminator 2
 1960 196d 0FB69567 		movzbl	-3737(%rbp), %edx
 1960      F1FFFF
 1961 1974 8B856CF1 		movl	-3732(%rbp), %eax
 1961      FFFF
 1962 197a 4898     		cltq
 1963 197c 0FB68405 		movzbl	-384(%rbp,%rax), %eax
 1963      80FEFFFF 
 1964 1984 0FB6C0   		movzbl	%al, %eax
 1965 1987 4898     		cltq
 1966 1989 4863D2   		movslq	%edx, %rdx
 1967 198c 48C1E205 		salq	$5, %rdx
 1968 1990 4801D0   		addq	%rdx, %rax
 1969 1993 C7848580 		movl	$2, -3712(%rbp,%rax,4)
 1969      F1FFFF02 
 1969      000000
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 1970              		.loc 2 340 0 is_stmt 1 discriminator 2
 1971 199e 83856CF1 		addl	$1, -3732(%rbp)
 1971      FFFF01
 1972              	.L102:
 340:prog.c        **** 		for ( i = 0; i < 8; i++ ) {
 1973              		.loc 2 340 0 is_stmt 0 discriminator 1
 1974 19a5 83BD6CF1 		cmpl	$7, -3732(%rbp)
 1974      FFFF07
 1975 19ac 0F8E1BFE 		jle	.L107
 1975      FFFF
 343:prog.c        **** 		}
 344:prog.c        **** 		makeLookup(dataBit, lookupTable);
 1976              		.loc 2 344 0 is_stmt 1
 1977 19b2 488D95E0 		leaq	-288(%rbp), %rdx
 1977      FEFFFF
 1978 19b9 488D8580 		leaq	-384(%rbp), %rax
 1978      FEFFFF
 1979 19c0 4889D6   		movq	%rdx, %rsi
 1980 19c3 4889C7   		movq	%rax, %rdi
 1981 19c6 E811EDFF 		call	makeLookup
 1981      FF
 1982 19cb E9190200 		jmp	.L108
 1982      00
 1983              	.L101:
 345:prog.c        **** 	} else if ( progOp == PROG_SPI_SEND ) {
 1984              		.loc 2 345 0
 1985 19d0 83BD44F1 		cmpl	$6, -3772(%rbp)
 1985      FFFF06
 1986 19d7 0F850C02 		jne	.L108
 1986      0000
 1987              	.LBB3:
 346:prog.c        **** 		const uint8 bitOrder[8] = {7,6,5,4,3,2,1,0};
 1988              		.loc 2 346 0
 1989 19dd C68590FE 		movb	$7, -368(%rbp)
 1989      FFFF07
 1990 19e4 C68591FE 		movb	$6, -367(%rbp)
 1990      FFFF06
 1991 19eb C68592FE 		movb	$5, -366(%rbp)
 1991      FFFF05
 1992 19f2 C68593FE 		movb	$4, -365(%rbp)
 1992      FFFF04
 1993 19f9 C68594FE 		movb	$3, -364(%rbp)
 1993      FFFF03
 1994 1a00 C68595FE 		movb	$2, -363(%rbp)
 1994      FFFF02
 1995 1a07 C68596FE 		movb	$1, -362(%rbp)
 1995      FFFF01
 1996 1a0e C68597FE 		movb	$0, -361(%rbp)
 1996      FFFF00
 347:prog.c        **** 		makeLookup(bitOrder, lookupTable);
 1997              		.loc 2 347 0
 1998 1a15 488D95E0 		leaq	-288(%rbp), %rdx
 1998      FEFFFF
 1999 1a1c 488D8590 		leaq	-368(%rbp), %rax
 1999      FEFFFF
 2000 1a23 4889D6   		movq	%rdx, %rsi
 2001 1a26 4889C7   		movq	%rax, %rdi
 2002 1a29 E8AEECFF 		call	makeLookup
 2002      FF
 348:prog.c        **** 		GET_BIT(dataBit[0], "xProgram");
 2003              		.loc 2 348 0
 2004 1a2e 488B8578 		movq	-3720(%rbp), %rax
 2004      F1FFFF
 2005 1a35 0FB600   		movzbl	(%rax), %eax
 2006 1a38 88855EF1 		movb	%al, -3746(%rbp)
 2006      FFFF
 2007 1a3e 80BD5EF1 		cmpb	$0, -3746(%rbp)
 2007      FFFF00
 2008 1a45 7553     		jne	.L109
 2009              		.loc 2 348 0 is_stmt 0 discriminator 1
 2010 1a47 488B8578 		movq	-3720(%rbp), %rax
 2010      F1FFFF
 2011 1a4e 4889C2   		movq	%rax, %rdx
 2012 1a51 488B8538 		movq	-3784(%rbp), %rax
 2012      F1FFFF
 2013 1a58 4829C2   		subq	%rax, %rdx
 2014 1a5b 4889D0   		movq	%rdx, %rax
 2015 1a5e 4889C7   		movq	%rax, %rdi
 2016 1a61 E854E7FF 		call	spaces
 2016      FF
 2017 1a66 4889C1   		movq	%rax, %rcx
 2018 1a69 488B9538 		movq	-3784(%rbp), %rdx
 2018      F1FFFF
 2019 1a70 488B8528 		movq	-3800(%rbp), %rax
 2019      F1FFFF
 2020 1a77 488D3500 		leaq	.LC12(%rip), %rsi
 2020      000000
 2021 1a7e 4889C7   		movq	%rax, %rdi
 2022 1a81 B8000000 		movl	$0, %eax
 2022      00
 2023 1a86 E8000000 		call	errRender@PLT
 2023      00
 2024 1a8b C78568F1 		movl	$11, -3736(%rbp)
 2024      FFFF0B00 
 2024      0000
 2025 1a95 E9FD0C00 		jmp	.L67
 2025      00
 2026              	.L109:
 2027              		.loc 2 348 0 discriminator 2
 2028 1a9a 80BD5EF1 		cmpb	$47, -3746(%rbp)
 2028      FFFF2F
 2029 1aa1 7E09     		jle	.L111
 2030 1aa3 80BD5EF1 		cmpb	$57, -3746(%rbp)
 2030      FFFF39
 2031 1aaa 7E53     		jle	.L112
 2032              	.L111:
 2033              		.loc 2 348 0 discriminator 1
 2034 1aac 488B8578 		movq	-3720(%rbp), %rax
 2034      F1FFFF
 2035 1ab3 4889C2   		movq	%rax, %rdx
 2036 1ab6 488B8538 		movq	-3784(%rbp), %rax
 2036      F1FFFF
 2037 1abd 4829C2   		subq	%rax, %rdx
 2038 1ac0 4889D0   		movq	%rdx, %rax
 2039 1ac3 4889C7   		movq	%rax, %rdi
 2040 1ac6 E8EFE6FF 		call	spaces
 2040      FF
 2041 1acb 4889C1   		movq	%rax, %rcx
 2042 1ace 488B9538 		movq	-3784(%rbp), %rdx
 2042      F1FFFF
 2043 1ad5 488B8528 		movq	-3800(%rbp), %rax
 2043      F1FFFF
 2044 1adc 488D3500 		leaq	.LC15(%rip), %rsi
 2044      000000
 2045 1ae3 4889C7   		movq	%rax, %rdi
 2046 1ae6 B8000000 		movl	$0, %eax
 2046      00
 2047 1aeb E8000000 		call	errRender@PLT
 2047      00
 2048 1af0 C78568F1 		movl	$11, -3736(%rbp)
 2048      FFFF0B00 
 2048      0000
 2049 1afa E9980C00 		jmp	.L67
 2049      00
 2050              	.L112:
 2051 1aff 488B8578 		movq	-3720(%rbp), %rax
 2051      F1FFFF
 2052 1b06 488D8D78 		leaq	-3720(%rbp), %rcx
 2052      F1FFFF
 2053 1b0d BA0A0000 		movl	$10, %edx
 2053      00
 2054 1b12 4889CE   		movq	%rcx, %rsi
 2055 1b15 4889C7   		movq	%rax, %rdi
 2056 1b18 E8000000 		call	strtoul@PLT
 2056      00
 2057 1b1d 888580FE 		movb	%al, -384(%rbp)
 2057      FFFF
 349:prog.c        **** 		SET_BIT(dataPort, dataBit[0], PIN_LOW, "xProgram");
 2058              		.loc 2 349 0 is_stmt 1 discriminator 1
 2059 1b23 0FB69567 		movzbl	-3737(%rbp), %edx
 2059      F1FFFF
 2060 1b2a 0FB68580 		movzbl	-384(%rbp), %eax
 2060      FEFFFF
 2061 1b31 0FB6C0   		movzbl	%al, %eax
 2062 1b34 4898     		cltq
 2063 1b36 4863D2   		movslq	%edx, %rdx
 2064 1b39 48C1E205 		salq	$5, %rdx
 2065 1b3d 4801D0   		addq	%rdx, %rax
 2066 1b40 8B848580 		movl	-3712(%rbp,%rax,4), %eax
 2066      F1FFFF
 2067 1b47 85C0     		testl	%eax, %eax
 2068 1b49 7476     		je	.L113
 2069 1b4b 488B8578 		movq	-3720(%rbp), %rax
 2069      F1FFFF
 2070 1b52 4889C2   		movq	%rax, %rdx
 2071 1b55 488B8538 		movq	-3784(%rbp), %rax
 2071      F1FFFF
 2072 1b5c 4829C2   		subq	%rax, %rdx
 2073 1b5f 4889D0   		movq	%rdx, %rax
 2074 1b62 4883E801 		subq	$1, %rax
 2075 1b66 4889C7   		movq	%rax, %rdi
 2076 1b69 E84CE6FF 		call	spaces
 2076      FF
 2077 1b6e 4889C1   		movq	%rax, %rcx
 2078 1b71 0FB68580 		movzbl	-384(%rbp), %eax
 2078      FEFFFF
 2079 1b78 0FB6D0   		movzbl	%al, %edx
 2080 1b7b 0FB68567 		movzbl	-3737(%rbp), %eax
 2080      F1FFFF
 2081 1b82 8D7041   		leal	65(%rax), %esi
 2082 1b85 488BBD38 		movq	-3784(%rbp), %rdi
 2082      F1FFFF
 2083 1b8c 488B8528 		movq	-3800(%rbp), %rax
 2083      F1FFFF
 2084 1b93 4989C9   		movq	%rcx, %r9
 2085 1b96 4989F8   		movq	%rdi, %r8
 2086 1b99 89D1     		movl	%edx, %ecx
 2087 1b9b 89F2     		movl	%esi, %edx
 2088 1b9d 488D3500 		leaq	.LC16(%rip), %rsi
 2088      000000
 2089 1ba4 4889C7   		movq	%rax, %rdi
 2090 1ba7 B8000000 		movl	$0, %eax
 2090      00
 2091 1bac E8000000 		call	errRender@PLT
 2091      00
 2092 1bb1 C78568F1 		movl	$11, -3736(%rbp)
 2092      FFFF0B00 
 2092      0000
 2093 1bbb 90       		nop
 2094 1bbc E9D60B00 		jmp	.L67
 2094      00
 2095              	.L113:
 2096              		.loc 2 349 0 is_stmt 0 discriminator 2
 2097 1bc1 0FB69567 		movzbl	-3737(%rbp), %edx
 2097      F1FFFF
 2098 1bc8 0FB68580 		movzbl	-384(%rbp), %eax
 2098      FEFFFF
 2099 1bcf 0FB6C0   		movzbl	%al, %eax
 2100 1bd2 4898     		cltq
 2101 1bd4 4863D2   		movslq	%edx, %rdx
 2102 1bd7 48C1E205 		salq	$5, %rdx
 2103 1bdb 4801D0   		addq	%rdx, %rax
 2104 1bde C7848580 		movl	$2, -3712(%rbp,%rax,4)
 2104      F1FFFF02 
 2104      000000
 2105              	.L108:
 2106              	.LBE3:
 350:prog.c        **** 	}
 351:prog.c        **** 
 352:prog.c        **** 	GET_CHAR("xProgram");
 2107              		.loc 2 352 0 is_stmt 1
 2108 1be9 488B8578 		movq	-3720(%rbp), %rax
 2108      F1FFFF
 2109 1bf0 0FB600   		movzbl	(%rax), %eax
 2110 1bf3 88855EF1 		movb	%al, -3746(%rbp)
 2110      FFFF
 2111 1bf9 80BD5EF1 		cmpb	$0, -3746(%rbp)
 2111      FFFF00
 2112 1c00 7553     		jne	.L114
 2113              		.loc 2 352 0 is_stmt 0 discriminator 1
 2114 1c02 488B8578 		movq	-3720(%rbp), %rax
 2114      F1FFFF
 2115 1c09 4889C2   		movq	%rax, %rdx
 2116 1c0c 488B8538 		movq	-3784(%rbp), %rax
 2116      F1FFFF
 2117 1c13 4829C2   		subq	%rax, %rdx
 2118 1c16 4889D0   		movq	%rdx, %rax
 2119 1c19 4889C7   		movq	%rax, %rdi
 2120 1c1c E899E5FF 		call	spaces
 2120      FF
 2121 1c21 4889C1   		movq	%rax, %rcx
 2122 1c24 488B9538 		movq	-3784(%rbp), %rdx
 2122      F1FFFF
 2123 1c2b 488B8528 		movq	-3800(%rbp), %rax
 2123      F1FFFF
 2124 1c32 488D3500 		leaq	.LC12(%rip), %rsi
 2124      000000
 2125 1c39 4889C7   		movq	%rax, %rdi
 2126 1c3c B8000000 		movl	$0, %eax
 2126      00
 2127 1c41 E8000000 		call	errRender@PLT
 2127      00
 2128 1c46 C78568F1 		movl	$11, -3736(%rbp)
 2128      FFFF0B00 
 2128      0000
 2129 1c50 E9420B00 		jmp	.L67
 2129      00
 2130              	.L114:
 353:prog.c        **** 	if ( ch == '[' ) {
 2131              		.loc 2 353 0 is_stmt 1
 2132 1c55 80BD5EF1 		cmpb	$91, -3746(%rbp)
 2132      FFFF5B
 2133 1c5c 0F855001 		jne	.L115
 2133      0000
 354:prog.c        **** 		ptr++;
 2134              		.loc 2 354 0
 2135 1c62 488B8578 		movq	-3720(%rbp), %rax
 2135      F1FFFF
 2136 1c69 4883C001 		addq	$1, %rax
 2137 1c6d 48898578 		movq	%rax, -3720(%rbp)
 2137      F1FFFF
 355:prog.c        **** 		fStatus = populateMap(portConfig, ptr, &ptr, pinMap, error);
 2138              		.loc 2 355 0
 2139 1c74 488BB578 		movq	-3720(%rbp), %rsi
 2139      F1FFFF
 2140 1c7b 488BBD28 		movq	-3800(%rbp), %rdi
 2140      F1FFFF
 2141 1c82 488D8D80 		leaq	-3712(%rbp), %rcx
 2141      F1FFFF
 2142 1c89 488D9578 		leaq	-3720(%rbp), %rdx
 2142      F1FFFF
 2143 1c90 488B8538 		movq	-3784(%rbp), %rax
 2143      F1FFFF
 2144 1c97 4989F8   		movq	%rdi, %r8
 2145 1c9a 4889C7   		movq	%rax, %rdi
 2146 1c9d E840E5FF 		call	populateMap
 2146      FF
 2147 1ca2 898570F1 		movl	%eax, -3728(%rbp)
 2147      FFFF
 356:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2148              		.loc 2 356 0
 2149 1ca8 83BD70F1 		cmpl	$0, -3728(%rbp)
 2149      FFFF00
 2150 1caf 7427     		je	.L116
 2151              		.loc 2 356 0 is_stmt 0 discriminator 1
 2152 1cb1 488B8528 		movq	-3800(%rbp), %rax
 2152      F1FFFF
 2153 1cb8 488D3500 		leaq	.LC18(%rip), %rsi
 2153      000000
 2154 1cbf 4889C7   		movq	%rax, %rdi
 2155 1cc2 E8000000 		call	errPrefix@PLT
 2155      00
 2156 1cc7 8B8570F1 		movl	-3728(%rbp), %eax
 2156      FFFF
 2157 1ccd 898568F1 		movl	%eax, -3736(%rbp)
 2157      FFFF
 2158 1cd3 E9BF0A00 		jmp	.L67
 2158      00
 2159              	.L116:
 357:prog.c        **** 		EXPECT_CHAR(']', "xProgram");
 2160              		.loc 2 357 0 is_stmt 1
 2161 1cd8 488B8578 		movq	-3720(%rbp), %rax
 2161      F1FFFF
 2162 1cdf 0FB600   		movzbl	(%rax), %eax
 2163 1ce2 88855EF1 		movb	%al, -3746(%rbp)
 2163      FFFF
 2164 1ce8 80BD5EF1 		cmpb	$0, -3746(%rbp)
 2164      FFFF00
 2165 1cef 7553     		jne	.L117
 2166              		.loc 2 357 0 is_stmt 0 discriminator 1
 2167 1cf1 488B8578 		movq	-3720(%rbp), %rax
 2167      F1FFFF
 2168 1cf8 4889C2   		movq	%rax, %rdx
 2169 1cfb 488B8538 		movq	-3784(%rbp), %rax
 2169      F1FFFF
 2170 1d02 4829C2   		subq	%rax, %rdx
 2171 1d05 4889D0   		movq	%rdx, %rax
 2172 1d08 4889C7   		movq	%rax, %rdi
 2173 1d0b E8AAE4FF 		call	spaces
 2173      FF
 2174 1d10 4889C1   		movq	%rax, %rcx
 2175 1d13 488B9538 		movq	-3784(%rbp), %rdx
 2175      F1FFFF
 2176 1d1a 488B8528 		movq	-3800(%rbp), %rax
 2176      F1FFFF
 2177 1d21 488D3500 		leaq	.LC12(%rip), %rsi
 2177      000000
 2178 1d28 4889C7   		movq	%rax, %rdi
 2179 1d2b B8000000 		movl	$0, %eax
 2179      00
 2180 1d30 E8000000 		call	errRender@PLT
 2180      00
 2181 1d35 C78568F1 		movl	$11, -3736(%rbp)
 2181      FFFF0B00 
 2181      0000
 2182 1d3f E9530A00 		jmp	.L67
 2182      00
 2183              	.L117:
 2184              		.loc 2 357 0 discriminator 2
 2185 1d44 80BD5EF1 		cmpb	$93, -3746(%rbp)
 2185      FFFF5D
 2186 1d4b 7453     		je	.L118
 2187              		.loc 2 357 0 discriminator 1
 2188 1d4d 488B8578 		movq	-3720(%rbp), %rax
 2188      F1FFFF
 2189 1d54 4889C2   		movq	%rax, %rdx
 2190 1d57 488B8538 		movq	-3784(%rbp), %rax
 2190      F1FFFF
 2191 1d5e 4829C2   		subq	%rax, %rdx
 2192 1d61 4889D0   		movq	%rdx, %rax
 2193 1d64 4889C7   		movq	%rax, %rdi
 2194 1d67 E84EE4FF 		call	spaces
 2194      FF
 2195 1d6c 4889C1   		movq	%rax, %rcx
 2196 1d6f 488B9538 		movq	-3784(%rbp), %rdx
 2196      F1FFFF
 2197 1d76 488B8528 		movq	-3800(%rbp), %rax
 2197      F1FFFF
 2198 1d7d 488D3500 		leaq	.LC19(%rip), %rsi
 2198      000000
 2199 1d84 4889C7   		movq	%rax, %rdi
 2200 1d87 B8000000 		movl	$0, %eax
 2200      00
 2201 1d8c E8000000 		call	errRender@PLT
 2201      00
 2202 1d91 C78568F1 		movl	$11, -3736(%rbp)
 2202      FFFF0B00 
 2202      0000
 2203 1d9b E9F70900 		jmp	.L67
 2203      00
 2204              	.L118:
 2205              		.loc 2 357 0 discriminator 2
 2206 1da0 488B8578 		movq	-3720(%rbp), %rax
 2206      F1FFFF
 2207 1da7 4883C001 		addq	$1, %rax
 2208 1dab 48898578 		movq	%rax, -3720(%rbp)
 2208      F1FFFF
 2209              	.L115:
 358:prog.c        **** 	}
 359:prog.c        **** 	ch = *ptr;
 2210              		.loc 2 359 0 is_stmt 1
 2211 1db2 488B8578 		movq	-3720(%rbp), %rax
 2211      F1FFFF
 2212 1db9 0FB600   		movzbl	(%rax), %eax
 2213 1dbc 88855EF1 		movb	%al, -3746(%rbp)
 2213      FFFF
 360:prog.c        **** 	CHECK_STATUS(
 2214              		.loc 2 360 0
 2215 1dc2 80BD5EF1 		cmpb	$0, -3746(%rbp)
 2215      FFFF00
 2216 1dc9 745C     		je	.L119
 2217              		.loc 2 360 0 is_stmt 0 discriminator 1
 2218 1dcb 80BD5EF1 		cmpb	$58, -3746(%rbp)
 2218      FFFF3A
 2219 1dd2 7453     		je	.L119
 2220 1dd4 488B8578 		movq	-3720(%rbp), %rax
 2220      F1FFFF
 2221 1ddb 4889C2   		movq	%rax, %rdx
 2222 1dde 488B8538 		movq	-3784(%rbp), %rax
 2222      F1FFFF
 2223 1de5 4829C2   		subq	%rax, %rdx
 2224 1de8 4889D0   		movq	%rdx, %rax
 2225 1deb 4889C7   		movq	%rax, %rdi
 2226 1dee E8C7E3FF 		call	spaces
 2226      FF
 2227 1df3 4889C1   		movq	%rax, %rcx
 2228 1df6 488B9538 		movq	-3784(%rbp), %rdx
 2228      F1FFFF
 2229 1dfd 488B8528 		movq	-3800(%rbp), %rax
 2229      F1FFFF
 2230 1e04 488D3500 		leaq	.LC20(%rip), %rsi
 2230      000000
 2231 1e0b 4889C7   		movq	%rax, %rdi
 2232 1e0e B8000000 		movl	$0, %eax
 2232      00
 2233 1e13 E8000000 		call	errRender@PLT
 2233      00
 2234 1e18 C78568F1 		movl	$11, -3736(%rbp)
 2234      FFFF0B00 
 2234      0000
 2235 1e22 E9700900 		jmp	.L67
 2235      00
 2236              	.L119:
 361:prog.c        **** 		ch != '\0' && ch != ':', FL_CONF_FORMAT, cleanup,
 362:prog.c        **** 		"xProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig));
 363:prog.c        **** 
 364:prog.c        **** 	// Map the CCLK bit & the SelectMAP data bus
 365:prog.c        **** 	fStatus = portMap(handle, LP_SCK, cclkPort, cclkBit, error);
 2237              		.loc 2 365 0 is_stmt 1
 2238 1e27 0FB68D66 		movzbl	-3738(%rbp), %ecx
 2238      F1FFFF
 2239 1e2e 0FB69565 		movzbl	-3739(%rbp), %edx
 2239      F1FFFF
 2240 1e35 488BB528 		movq	-3800(%rbp), %rsi
 2240      F1FFFF
 2241 1e3c 488B8548 		movq	-3768(%rbp), %rax
 2241      F1FFFF
 2242 1e43 4989F0   		movq	%rsi, %r8
 2243 1e46 BE040000 		movl	$4, %esi
 2243      00
 2244 1e4b 4889C7   		movq	%rax, %rdi
 2245 1e4e E8ECE7FF 		call	portMap
 2245      FF
 2246 1e53 898570F1 		movl	%eax, -3728(%rbp)
 2246      FFFF
 366:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2247              		.loc 2 366 0
 2248 1e59 83BD70F1 		cmpl	$0, -3728(%rbp)
 2248      FFFF00
 2249 1e60 7427     		je	.L120
 2250              		.loc 2 366 0 is_stmt 0 discriminator 1
 2251 1e62 488B8528 		movq	-3800(%rbp), %rax
 2251      F1FFFF
 2252 1e69 488D3500 		leaq	.LC18(%rip), %rsi
 2252      000000
 2253 1e70 4889C7   		movq	%rax, %rdi
 2254 1e73 E8000000 		call	errPrefix@PLT
 2254      00
 2255 1e78 8B8570F1 		movl	-3728(%rbp), %eax
 2255      FFFF
 2256 1e7e 898568F1 		movl	%eax, -3736(%rbp)
 2256      FFFF
 2257 1e84 E90E0900 		jmp	.L67
 2257      00
 2258              	.L120:
 367:prog.c        **** 	if ( progOp == PROG_PARALLEL ) {
 2259              		.loc 2 367 0 is_stmt 1
 2260 1e89 83BD44F1 		cmpl	$5, -3772(%rbp)
 2260      FFFF05
 2261 1e90 7564     		jne	.L121
 368:prog.c        **** 		fStatus = portMap(handle, LP_D8, dataPort, 0x00, error);
 2262              		.loc 2 368 0
 2263 1e92 0FB69567 		movzbl	-3737(%rbp), %edx
 2263      F1FFFF
 2264 1e99 488B8D28 		movq	-3800(%rbp), %rcx
 2264      F1FFFF
 2265 1ea0 488B8548 		movq	-3768(%rbp), %rax
 2265      F1FFFF
 2266 1ea7 4989C8   		movq	%rcx, %r8
 2267 1eaa B9000000 		movl	$0, %ecx
 2267      00
 2268 1eaf BE050000 		movl	$5, %esi
 2268      00
 2269 1eb4 4889C7   		movq	%rax, %rdi
 2270 1eb7 E883E7FF 		call	portMap
 2270      FF
 2271 1ebc 898570F1 		movl	%eax, -3728(%rbp)
 2271      FFFF
 369:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2272              		.loc 2 369 0
 2273 1ec2 83BD70F1 		cmpl	$0, -3728(%rbp)
 2273      FFFF00
 2274 1ec9 0F849500 		je	.L122
 2274      0000
 2275              		.loc 2 369 0 is_stmt 0 discriminator 1
 2276 1ecf 488B8528 		movq	-3800(%rbp), %rax
 2276      F1FFFF
 2277 1ed6 488D3500 		leaq	.LC18(%rip), %rsi
 2277      000000
 2278 1edd 4889C7   		movq	%rax, %rdi
 2279 1ee0 E8000000 		call	errPrefix@PLT
 2279      00
 2280 1ee5 8B8570F1 		movl	-3728(%rbp), %eax
 2280      FFFF
 2281 1eeb 898568F1 		movl	%eax, -3736(%rbp)
 2281      FFFF
 2282 1ef1 E9A10800 		jmp	.L67
 2282      00
 2283              	.L121:
 370:prog.c        **** 	} else if ( progOp == PROG_SPI_SEND ) {
 2284              		.loc 2 370 0 is_stmt 1
 2285 1ef6 83BD44F1 		cmpl	$6, -3772(%rbp)
 2285      FFFF06
 2286 1efd 7565     		jne	.L122
 371:prog.c        **** 		fStatus = portMap(handle, LP_MOSI, dataPort, dataBit[0], error);
 2287              		.loc 2 371 0
 2288 1eff 0FB68580 		movzbl	-384(%rbp), %eax
 2288      FEFFFF
 2289 1f06 0FB6C8   		movzbl	%al, %ecx
 2290 1f09 0FB69567 		movzbl	-3737(%rbp), %edx
 2290      F1FFFF
 2291 1f10 488BB528 		movq	-3800(%rbp), %rsi
 2291      F1FFFF
 2292 1f17 488B8548 		movq	-3768(%rbp), %rax
 2292      F1FFFF
 2293 1f1e 4989F0   		movq	%rsi, %r8
 2294 1f21 BE020000 		movl	$2, %esi
 2294      00
 2295 1f26 4889C7   		movq	%rax, %rdi
 2296 1f29 E811E7FF 		call	portMap
 2296      FF
 2297 1f2e 898570F1 		movl	%eax, -3728(%rbp)
 2297      FFFF
 372:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2298              		.loc 2 372 0
 2299 1f34 83BD70F1 		cmpl	$0, -3728(%rbp)
 2299      FFFF00
 2300 1f3b 7427     		je	.L122
 2301              		.loc 2 372 0 is_stmt 0 discriminator 1
 2302 1f3d 488B8528 		movq	-3800(%rbp), %rax
 2302      F1FFFF
 2303 1f44 488D3500 		leaq	.LC18(%rip), %rsi
 2303      000000
 2304 1f4b 4889C7   		movq	%rax, %rdi
 2305 1f4e E8000000 		call	errPrefix@PLT
 2305      00
 2306 1f53 8B8570F1 		movl	-3728(%rbp), %eax
 2306      FFFF
 2307 1f59 898568F1 		movl	%eax, -3736(%rbp)
 2307      FFFF
 2308 1f5f E9330800 		jmp	.L67
 2308      00
 2309              	.L122:
 373:prog.c        **** 	}
 374:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 2310              		.loc 2 374 0 is_stmt 1
 2311 1f64 488B9528 		movq	-3800(%rbp), %rdx
 2311      F1FFFF
 2312 1f6b 488B8548 		movq	-3768(%rbp), %rax
 2312      F1FFFF
 2313 1f72 4989D0   		movq	%rdx, %r8
 2314 1f75 B9000000 		movl	$0, %ecx
 2314      00
 2315 1f7a BA000000 		movl	$0, %edx
 2315      00
 2316 1f7f BE000000 		movl	$0, %esi
 2316      00
 2317 1f84 4889C7   		movq	%rax, %rdi
 2318 1f87 E8B3E6FF 		call	portMap
 2318      FF
 2319 1f8c 898570F1 		movl	%eax, -3728(%rbp)
 2319      FFFF
 375:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2320              		.loc 2 375 0
 2321 1f92 83BD70F1 		cmpl	$0, -3728(%rbp)
 2321      FFFF00
 2322 1f99 7427     		je	.L123
 2323              		.loc 2 375 0 is_stmt 0 discriminator 1
 2324 1f9b 488B8528 		movq	-3800(%rbp), %rax
 2324      F1FFFF
 2325 1fa2 488D3500 		leaq	.LC18(%rip), %rsi
 2325      000000
 2326 1fa9 4889C7   		movq	%rax, %rdi
 2327 1fac E8000000 		call	errPrefix@PLT
 2327      00
 2328 1fb1 8B8570F1 		movl	-3728(%rbp), %eax
 2328      FFFF
 2329 1fb7 898568F1 		movl	%eax, -3736(%rbp)
 2329      FFFF
 2330 1fbd E9D50700 		jmp	.L67
 2330      00
 2331              	.L123:
 376:prog.c        **** 
 377:prog.c        **** 	// Assert PROG & wait for INIT & DONE to go low
 378:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, NULL, error); // INIT is inp
 2332              		.loc 2 378 0 is_stmt 1
 2333 1fc2 0FB69562 		movzbl	-3742(%rbp), %edx
 2333      F1FFFF
 2334 1fc9 0FB6B561 		movzbl	-3743(%rbp), %esi
 2334      F1FFFF
 2335 1fd0 488B8D28 		movq	-3800(%rbp), %rcx
 2335      F1FFFF
 2336 1fd7 488B8548 		movq	-3768(%rbp), %rax
 2336      F1FFFF
 2337 1fde 4989C9   		movq	%rcx, %r9
 2338 1fe1 41B80000 		movl	$0, %r8d
 2338      0000
 2339 1fe7 B9030000 		movl	$3, %ecx
 2339      00
 2340 1fec 4889C7   		movq	%rax, %rdi
 2341 1fef E8000000 		call	flSingleBitPortAccess@PLT
 2341      00
 2342 1ff4 898570F1 		movl	%eax, -3728(%rbp)
 2342      FFFF
 379:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2343              		.loc 2 379 0
 2344 1ffa 83BD70F1 		cmpl	$0, -3728(%rbp)
 2344      FFFF00
 2345 2001 7427     		je	.L124
 2346              		.loc 2 379 0 is_stmt 0 discriminator 1
 2347 2003 488B8528 		movq	-3800(%rbp), %rax
 2347      F1FFFF
 2348 200a 488D3500 		leaq	.LC18(%rip), %rsi
 2348      000000
 2349 2011 4889C7   		movq	%rax, %rdi
 2350 2014 E8000000 		call	errPrefix@PLT
 2350      00
 2351 2019 8B8570F1 		movl	-3728(%rbp), %eax
 2351      FFFF
 2352 201f 898568F1 		movl	%eax, -3736(%rbp)
 2352      FFFF
 2353 2025 E96D0700 		jmp	.L67
 2353      00
 2354              	.L124:
 380:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, NULL, error); // DONE is inp
 2355              		.loc 2 380 0 is_stmt 1
 2356 202a 0FB69564 		movzbl	-3740(%rbp), %edx
 2356      F1FFFF
 2357 2031 0FB6B563 		movzbl	-3741(%rbp), %esi
 2357      F1FFFF
 2358 2038 488B8D28 		movq	-3800(%rbp), %rcx
 2358      F1FFFF
 2359 203f 488B8548 		movq	-3768(%rbp), %rax
 2359      F1FFFF
 2360 2046 4989C9   		movq	%rcx, %r9
 2361 2049 41B80000 		movl	$0, %r8d
 2361      0000
 2362 204f B9030000 		movl	$3, %ecx
 2362      00
 2363 2054 4889C7   		movq	%rax, %rdi
 2364 2057 E8000000 		call	flSingleBitPortAccess@PLT
 2364      00
 2365 205c 898570F1 		movl	%eax, -3728(%rbp)
 2365      FFFF
 381:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2366              		.loc 2 381 0
 2367 2062 83BD70F1 		cmpl	$0, -3728(%rbp)
 2367      FFFF00
 2368 2069 7427     		je	.L125
 2369              		.loc 2 381 0 is_stmt 0 discriminator 1
 2370 206b 488B8528 		movq	-3800(%rbp), %rax
 2370      F1FFFF
 2371 2072 488D3500 		leaq	.LC18(%rip), %rsi
 2371      000000
 2372 2079 4889C7   		movq	%rax, %rdi
 2373 207c E8000000 		call	errPrefix@PLT
 2373      00
 2374 2081 8B8570F1 		movl	-3728(%rbp), %eax
 2374      FFFF
 2375 2087 898568F1 		movl	%eax, -3736(%rbp)
 2375      FFFF
 2376 208d E9050700 		jmp	.L67
 2376      00
 2377              	.L125:
 382:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, progPort, progBit, PIN_LOW, NULL, error); // PROG is low
 2378              		.loc 2 382 0 is_stmt 1
 2379 2092 0FB69560 		movzbl	-3744(%rbp), %edx
 2379      F1FFFF
 2380 2099 0FB6B55F 		movzbl	-3745(%rbp), %esi
 2380      F1FFFF
 2381 20a0 488B8D28 		movq	-3800(%rbp), %rcx
 2381      F1FFFF
 2382 20a7 488B8548 		movq	-3768(%rbp), %rax
 2382      F1FFFF
 2383 20ae 4989C9   		movq	%rcx, %r9
 2384 20b1 41B80000 		movl	$0, %r8d
 2384      0000
 2385 20b7 B9020000 		movl	$2, %ecx
 2385      00
 2386 20bc 4889C7   		movq	%rax, %rdi
 2387 20bf E8000000 		call	flSingleBitPortAccess@PLT
 2387      00
 2388 20c4 898570F1 		movl	%eax, -3728(%rbp)
 2388      FFFF
 383:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2389              		.loc 2 383 0
 2390 20ca 83BD70F1 		cmpl	$0, -3728(%rbp)
 2390      FFFF00
 2391 20d1 7427     		je	.L126
 2392              		.loc 2 383 0 is_stmt 0 discriminator 1
 2393 20d3 488B8528 		movq	-3800(%rbp), %rax
 2393      F1FFFF
 2394 20da 488D3500 		leaq	.LC18(%rip), %rsi
 2394      000000
 2395 20e1 4889C7   		movq	%rax, %rdi
 2396 20e4 E8000000 		call	errPrefix@PLT
 2396      00
 2397 20e9 8B8570F1 		movl	-3728(%rbp), %eax
 2397      FFFF
 2398 20ef 898568F1 		movl	%eax, -3736(%rbp)
 2398      FFFF
 2399 20f5 E99D0600 		jmp	.L67
 2399      00
 2400              	.L126:
 384:prog.c        **** 	do {
 385:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2401              		.loc 2 385 0 is_stmt 1
 2402 20fa 0FB69562 		movzbl	-3742(%rbp), %edx
 2402      F1FFFF
 2403 2101 0FB6B561 		movzbl	-3743(%rbp), %esi
 2403      F1FFFF
 2404 2108 488BBD28 		movq	-3800(%rbp), %rdi
 2404      F1FFFF
 2405 210f 488D8D5A 		leaq	-3750(%rbp), %rcx
 2405      F1FFFF
 2406 2116 488B8548 		movq	-3768(%rbp), %rax
 2406      F1FFFF
 2407 211d 4989F9   		movq	%rdi, %r9
 2408 2120 4989C8   		movq	%rcx, %r8
 2409 2123 B9030000 		movl	$3, %ecx
 2409      00
 2410 2128 4889C7   		movq	%rax, %rdi
 2411 212b E8000000 		call	flSingleBitPortAccess@PLT
 2411      00
 2412 2130 898570F1 		movl	%eax, -3728(%rbp)
 2412      FFFF
 386:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2413              		.loc 2 386 0
 2414 2136 83BD70F1 		cmpl	$0, -3728(%rbp)
 2414      FFFF00
 2415 213d 7427     		je	.L127
 2416              		.loc 2 386 0 is_stmt 0 discriminator 1
 2417 213f 488B8528 		movq	-3800(%rbp), %rax
 2417      F1FFFF
 2418 2146 488D3500 		leaq	.LC18(%rip), %rsi
 2418      000000
 2419 214d 4889C7   		movq	%rax, %rdi
 2420 2150 E8000000 		call	errPrefix@PLT
 2420      00
 2421 2155 8B8570F1 		movl	-3728(%rbp), %eax
 2421      FFFF
 2422 215b 898568F1 		movl	%eax, -3736(%rbp)
 2422      FFFF
 2423 2161 E9310600 		jmp	.L67
 2423      00
 2424              	.L127:
 387:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 2425              		.loc 2 387 0 is_stmt 1
 2426 2166 0FB69564 		movzbl	-3740(%rbp), %edx
 2426      F1FFFF
 2427 216d 0FB6B563 		movzbl	-3741(%rbp), %esi
 2427      F1FFFF
 2428 2174 488BBD28 		movq	-3800(%rbp), %rdi
 2428      F1FFFF
 2429 217b 488D8D5B 		leaq	-3749(%rbp), %rcx
 2429      F1FFFF
 2430 2182 488B8548 		movq	-3768(%rbp), %rax
 2430      F1FFFF
 2431 2189 4989F9   		movq	%rdi, %r9
 2432 218c 4989C8   		movq	%rcx, %r8
 2433 218f B9030000 		movl	$3, %ecx
 2433      00
 2434 2194 4889C7   		movq	%rax, %rdi
 2435 2197 E8000000 		call	flSingleBitPortAccess@PLT
 2435      00
 2436 219c 898570F1 		movl	%eax, -3728(%rbp)
 2436      FFFF
 388:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2437              		.loc 2 388 0
 2438 21a2 83BD70F1 		cmpl	$0, -3728(%rbp)
 2438      FFFF00
 2439 21a9 7427     		je	.L128
 2440              		.loc 2 388 0 is_stmt 0 discriminator 1
 2441 21ab 488B8528 		movq	-3800(%rbp), %rax
 2441      F1FFFF
 2442 21b2 488D3500 		leaq	.LC18(%rip), %rsi
 2442      000000
 2443 21b9 4889C7   		movq	%rax, %rdi
 2444 21bc E8000000 		call	errPrefix@PLT
 2444      00
 2445 21c1 8B8570F1 		movl	-3728(%rbp), %eax
 2445      FFFF
 2446 21c7 898568F1 		movl	%eax, -3736(%rbp)
 2446      FFFF
 2447 21cd E9C50500 		jmp	.L67
 2447      00
 2448              	.L128:
 389:prog.c        **** 	} while ( initStatus || doneStatus );
 2449              		.loc 2 389 0 is_stmt 1
 2450 21d2 0FB6855A 		movzbl	-3750(%rbp), %eax
 2450      F1FFFF
 2451 21d9 84C0     		testb	%al, %al
 2452 21db 0F8519FF 		jne	.L126
 2452      FFFF
 2453              		.loc 2 389 0 is_stmt 0 discriminator 1
 2454 21e1 0FB6855B 		movzbl	-3749(%rbp), %eax
 2454      F1FFFF
 2455 21e8 84C0     		testb	%al, %al
 2456 21ea 0F850AFF 		jne	.L126
 2456      FFFF
 390:prog.c        **** 
 391:prog.c        **** 	// Now it's safe to switch to conduit mode zero (=JTAG, etc)
 392:prog.c        **** 	fStatus = flSelectConduit(handle, 0x00, error);
 2457              		.loc 2 392 0 is_stmt 1
 2458 21f0 488B9528 		movq	-3800(%rbp), %rdx
 2458      F1FFFF
 2459 21f7 488B8548 		movq	-3768(%rbp), %rax
 2459      F1FFFF
 2460 21fe BE000000 		movl	$0, %esi
 2460      00
 2461 2203 4889C7   		movq	%rax, %rdi
 2462 2206 E8000000 		call	flSelectConduit@PLT
 2462      00
 2463 220b 898570F1 		movl	%eax, -3728(%rbp)
 2463      FFFF
 393:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2464              		.loc 2 393 0
 2465 2211 83BD70F1 		cmpl	$0, -3728(%rbp)
 2465      FFFF00
 2466 2218 7427     		je	.L129
 2467              		.loc 2 393 0 is_stmt 0 discriminator 1
 2468 221a 488B8528 		movq	-3800(%rbp), %rax
 2468      F1FFFF
 2469 2221 488D3500 		leaq	.LC18(%rip), %rsi
 2469      000000
 2470 2228 4889C7   		movq	%rax, %rdi
 2471 222b E8000000 		call	errPrefix@PLT
 2471      00
 2472 2230 8B8570F1 		movl	-3728(%rbp), %eax
 2472      FFFF
 2473 2236 898568F1 		movl	%eax, -3736(%rbp)
 2473      FFFF
 2474 223c E9560500 		jmp	.L67
 2474      00
 2475              	.L129:
 394:prog.c        **** 
 395:prog.c        **** 	// Apply requested configuration to each specified pin
 396:prog.c        **** 	pinMap[progPort][progBit] = PIN_UNUSED;
 2476              		.loc 2 396 0 is_stmt 1
 2477 2241 0FB6955F 		movzbl	-3745(%rbp), %edx
 2477      F1FFFF
 2478 2248 0FB68560 		movzbl	-3744(%rbp), %eax
 2478      F1FFFF
 2479 224f 4898     		cltq
 2480 2251 4863D2   		movslq	%edx, %rdx
 2481 2254 48C1E205 		salq	$5, %rdx
 2482 2258 4801D0   		addq	%rdx, %rax
 2483 225b C7848580 		movl	$0, -3712(%rbp,%rax,4)
 2483      F1FFFF00 
 2483      000000
 397:prog.c        **** 	pinMap[initPort][initBit] = PIN_UNUSED;
 2484              		.loc 2 397 0
 2485 2266 0FB69561 		movzbl	-3743(%rbp), %edx
 2485      F1FFFF
 2486 226d 0FB68562 		movzbl	-3742(%rbp), %eax
 2486      F1FFFF
 2487 2274 4898     		cltq
 2488 2276 4863D2   		movslq	%edx, %rdx
 2489 2279 48C1E205 		salq	$5, %rdx
 2490 227d 4801D0   		addq	%rdx, %rax
 2491 2280 C7848580 		movl	$0, -3712(%rbp,%rax,4)
 2491      F1FFFF00 
 2491      000000
 398:prog.c        **** 	pinMap[donePort][doneBit] = PIN_UNUSED;
 2492              		.loc 2 398 0
 2493 228b 0FB69563 		movzbl	-3741(%rbp), %edx
 2493      F1FFFF
 2494 2292 0FB68564 		movzbl	-3740(%rbp), %eax
 2494      F1FFFF
 2495 2299 4898     		cltq
 2496 229b 4863D2   		movslq	%edx, %rdx
 2497 229e 48C1E205 		salq	$5, %rdx
 2498 22a2 4801D0   		addq	%rdx, %rax
 2499 22a5 C7848580 		movl	$0, -3712(%rbp,%rax,4)
 2499      F1FFFF00 
 2499      000000
 399:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 2500              		.loc 2 399 0
 2501 22b0 C6855CF1 		movb	$0, -3748(%rbp)
 2501      FFFF00
 2502 22b7 E9D50000 		jmp	.L130
 2502      00
 2503              	.L134:
 400:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2504              		.loc 2 400 0
 2505 22bc C6855DF1 		movb	$0, -3747(%rbp)
 2505      FFFF00
 2506 22c3 E9AC0000 		jmp	.L131
 2506      00
 2507              	.L133:
 401:prog.c        **** 			thisPin = pinMap[port][bit];
 2508              		.loc 2 401 0
 2509 22c8 0FB6955C 		movzbl	-3748(%rbp), %edx
 2509      F1FFFF
 2510 22cf 0FB6855D 		movzbl	-3747(%rbp), %eax
 2510      F1FFFF
 2511 22d6 4898     		cltq
 2512 22d8 4863D2   		movslq	%edx, %rdx
 2513 22db 48C1E205 		salq	$5, %rdx
 2514 22df 4801D0   		addq	%rdx, %rax
 2515 22e2 8B848580 		movl	-3712(%rbp,%rax,4), %eax
 2515      F1FFFF
 2516 22e9 898574F1 		movl	%eax, -3724(%rbp)
 2516      FFFF
 402:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 2517              		.loc 2 402 0
 2518 22ef 83BD74F1 		cmpl	$0, -3724(%rbp)
 2518      FFFF00
 2519 22f6 746C     		je	.L132
 403:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, thisPin, NULL, error);
 2520              		.loc 2 403 0
 2521 22f8 8B8574F1 		movl	-3724(%rbp), %eax
 2521      FFFF
 2522 22fe 0FB6C8   		movzbl	%al, %ecx
 2523 2301 0FB6955D 		movzbl	-3747(%rbp), %edx
 2523      F1FFFF
 2524 2308 0FB6B55C 		movzbl	-3748(%rbp), %esi
 2524      F1FFFF
 2525 230f 488BBD28 		movq	-3800(%rbp), %rdi
 2525      F1FFFF
 2526 2316 488B8548 		movq	-3768(%rbp), %rax
 2526      F1FFFF
 2527 231d 4989F9   		movq	%rdi, %r9
 2528 2320 41B80000 		movl	$0, %r8d
 2528      0000
 2529 2326 4889C7   		movq	%rax, %rdi
 2530 2329 E8000000 		call	flSingleBitPortAccess@PLT
 2530      00
 2531 232e 898570F1 		movl	%eax, -3728(%rbp)
 2531      FFFF
 404:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2532              		.loc 2 404 0
 2533 2334 83BD70F1 		cmpl	$0, -3728(%rbp)
 2533      FFFF00
 2534 233b 7427     		je	.L132
 2535              		.loc 2 404 0 is_stmt 0 discriminator 1
 2536 233d 488B8528 		movq	-3800(%rbp), %rax
 2536      F1FFFF
 2537 2344 488D3500 		leaq	.LC18(%rip), %rsi
 2537      000000
 2538 234b 4889C7   		movq	%rax, %rdi
 2539 234e E8000000 		call	errPrefix@PLT
 2539      00
 2540 2353 8B8570F1 		movl	-3728(%rbp), %eax
 2540      FFFF
 2541 2359 898568F1 		movl	%eax, -3736(%rbp)
 2541      FFFF
 2542 235f E9330400 		jmp	.L67
 2542      00
 2543              	.L132:
 400:prog.c        **** 			thisPin = pinMap[port][bit];
 2544              		.loc 2 400 0 is_stmt 1
 2545 2364 0FB6855D 		movzbl	-3747(%rbp), %eax
 2545      F1FFFF
 2546 236b 83C001   		addl	$1, %eax
 2547 236e 88855DF1 		movb	%al, -3747(%rbp)
 2547      FFFF
 2548              	.L131:
 400:prog.c        **** 			thisPin = pinMap[port][bit];
 2549              		.loc 2 400 0 is_stmt 0 discriminator 1
 2550 2374 80BD5DF1 		cmpb	$31, -3747(%rbp)
 2550      FFFF1F
 2551 237b 0F8647FF 		jbe	.L133
 2551      FFFF
 399:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2552              		.loc 2 399 0 is_stmt 1
 2553 2381 0FB6855C 		movzbl	-3748(%rbp), %eax
 2553      F1FFFF
 2554 2388 83C001   		addl	$1, %eax
 2555 238b 88855CF1 		movb	%al, -3748(%rbp)
 2555      FFFF
 2556              	.L130:
 399:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2557              		.loc 2 399 0 is_stmt 0 discriminator 1
 2558 2391 80BD5CF1 		cmpb	$25, -3748(%rbp)
 2558      FFFF19
 2559 2398 0F861EFF 		jbe	.L134
 2559      FFFF
 405:prog.c        **** 			}
 406:prog.c        **** 		}
 407:prog.c        **** 	}
 408:prog.c        **** 
 409:prog.c        **** 	// Deassert PROG and wait for INIT to go high
 410:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, progPort, progBit, PIN_HIGH, NULL, error); // PROG is high
 2560              		.loc 2 410 0 is_stmt 1
 2561 239e 0FB69560 		movzbl	-3744(%rbp), %edx
 2561      F1FFFF
 2562 23a5 0FB6B55F 		movzbl	-3745(%rbp), %esi
 2562      F1FFFF
 2563 23ac 488B8D28 		movq	-3800(%rbp), %rcx
 2563      F1FFFF
 2564 23b3 488B8548 		movq	-3768(%rbp), %rax
 2564      F1FFFF
 2565 23ba 4989C9   		movq	%rcx, %r9
 2566 23bd 41B80000 		movl	$0, %r8d
 2566      0000
 2567 23c3 B9010000 		movl	$1, %ecx
 2567      00
 2568 23c8 4889C7   		movq	%rax, %rdi
 2569 23cb E8000000 		call	flSingleBitPortAccess@PLT
 2569      00
 2570 23d0 898570F1 		movl	%eax, -3728(%rbp)
 2570      FFFF
 411:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2571              		.loc 2 411 0
 2572 23d6 83BD70F1 		cmpl	$0, -3728(%rbp)
 2572      FFFF00
 2573 23dd 7427     		je	.L135
 2574              		.loc 2 411 0 is_stmt 0 discriminator 1
 2575 23df 488B8528 		movq	-3800(%rbp), %rax
 2575      F1FFFF
 2576 23e6 488D3500 		leaq	.LC18(%rip), %rsi
 2576      000000
 2577 23ed 4889C7   		movq	%rax, %rdi
 2578 23f0 E8000000 		call	errPrefix@PLT
 2578      00
 2579 23f5 8B8570F1 		movl	-3728(%rbp), %eax
 2579      FFFF
 2580 23fb 898568F1 		movl	%eax, -3736(%rbp)
 2580      FFFF
 2581 2401 E9910300 		jmp	.L67
 2581      00
 2582              	.L135:
 412:prog.c        **** 	do {
 413:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2583              		.loc 2 413 0 is_stmt 1
 2584 2406 0FB69562 		movzbl	-3742(%rbp), %edx
 2584      F1FFFF
 2585 240d 0FB6B561 		movzbl	-3743(%rbp), %esi
 2585      F1FFFF
 2586 2414 488BBD28 		movq	-3800(%rbp), %rdi
 2586      F1FFFF
 2587 241b 488D8D5A 		leaq	-3750(%rbp), %rcx
 2587      F1FFFF
 2588 2422 488B8548 		movq	-3768(%rbp), %rax
 2588      F1FFFF
 2589 2429 4989F9   		movq	%rdi, %r9
 2590 242c 4989C8   		movq	%rcx, %r8
 2591 242f B9030000 		movl	$3, %ecx
 2591      00
 2592 2434 4889C7   		movq	%rax, %rdi
 2593 2437 E8000000 		call	flSingleBitPortAccess@PLT
 2593      00
 2594 243c 898570F1 		movl	%eax, -3728(%rbp)
 2594      FFFF
 414:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2595              		.loc 2 414 0
 2596 2442 83BD70F1 		cmpl	$0, -3728(%rbp)
 2596      FFFF00
 2597 2449 7427     		je	.L136
 2598              		.loc 2 414 0 is_stmt 0 discriminator 1
 2599 244b 488B8528 		movq	-3800(%rbp), %rax
 2599      F1FFFF
 2600 2452 488D3500 		leaq	.LC18(%rip), %rsi
 2600      000000
 2601 2459 4889C7   		movq	%rax, %rdi
 2602 245c E8000000 		call	errPrefix@PLT
 2602      00
 2603 2461 8B8570F1 		movl	-3728(%rbp), %eax
 2603      FFFF
 2604 2467 898568F1 		movl	%eax, -3736(%rbp)
 2604      FFFF
 2605 246d E9250300 		jmp	.L67
 2605      00
 2606              	.L136:
 415:prog.c        **** 	} while ( !initStatus );
 2607              		.loc 2 415 0 is_stmt 1
 2608 2472 0FB6855A 		movzbl	-3750(%rbp), %eax
 2608      F1FFFF
 2609 2479 84C0     		testb	%al, %al
 2610 247b 7489     		je	.L135
 416:prog.c        **** 
 417:prog.c        **** 	// Write the programming file into the FPGA
 418:prog.c        **** 	fStatus = dataWrite(handle, progOp, data, len, lookupTable, error);
 2611              		.loc 2 418 0
 2612 247d 4C8B8528 		movq	-3800(%rbp), %r8
 2612      F1FFFF
 2613 2484 488DBDE0 		leaq	-288(%rbp), %rdi
 2613      FEFFFF
 2614 248b 8B8D40F1 		movl	-3776(%rbp), %ecx
 2614      FFFF
 2615 2491 488B9530 		movq	-3792(%rbp), %rdx
 2615      F1FFFF
 2616 2498 8BB544F1 		movl	-3772(%rbp), %esi
 2616      FFFF
 2617 249e 488B8548 		movq	-3768(%rbp), %rax
 2617      F1FFFF
 2618 24a5 4D89C1   		movq	%r8, %r9
 2619 24a8 4989F8   		movq	%rdi, %r8
 2620 24ab 4889C7   		movq	%rax, %rdi
 2621 24ae E8E4E3FF 		call	dataWrite
 2621      FF
 2622 24b3 898570F1 		movl	%eax, -3728(%rbp)
 2622      FFFF
 419:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2623              		.loc 2 419 0
 2624 24b9 83BD70F1 		cmpl	$0, -3728(%rbp)
 2624      FFFF00
 2625 24c0 7427     		je	.L137
 2626              		.loc 2 419 0 is_stmt 0 discriminator 1
 2627 24c2 488B8528 		movq	-3800(%rbp), %rax
 2627      F1FFFF
 2628 24c9 488D3500 		leaq	.LC18(%rip), %rsi
 2628      000000
 2629 24d0 4889C7   		movq	%rax, %rdi
 2630 24d3 E8000000 		call	errPrefix@PLT
 2630      00
 2631 24d8 8B8570F1 		movl	-3728(%rbp), %eax
 2631      FFFF
 2632 24de 898568F1 		movl	%eax, -3736(%rbp)
 2632      FFFF
 2633 24e4 E9AE0200 		jmp	.L67
 2633      00
 2634              	.L137:
 420:prog.c        **** 
 421:prog.c        **** 	i = 0;
 2635              		.loc 2 421 0 is_stmt 1
 2636 24e9 C7856CF1 		movl	$0, -3732(%rbp)
 2636      FFFF0000 
 2636      0000
 2637              	.L145:
 422:prog.c        **** 	for ( ; ; ) {
 423:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, initPort, initBit, PIN_INPUT, &initStatus, error);
 2638              		.loc 2 423 0
 2639 24f3 0FB69562 		movzbl	-3742(%rbp), %edx
 2639      F1FFFF
 2640 24fa 0FB6B561 		movzbl	-3743(%rbp), %esi
 2640      F1FFFF
 2641 2501 488BBD28 		movq	-3800(%rbp), %rdi
 2641      F1FFFF
 2642 2508 488D8D5A 		leaq	-3750(%rbp), %rcx
 2642      F1FFFF
 2643 250f 488B8548 		movq	-3768(%rbp), %rax
 2643      F1FFFF
 2644 2516 4989F9   		movq	%rdi, %r9
 2645 2519 4989C8   		movq	%rcx, %r8
 2646 251c B9030000 		movl	$3, %ecx
 2646      00
 2647 2521 4889C7   		movq	%rax, %rdi
 2648 2524 E8000000 		call	flSingleBitPortAccess@PLT
 2648      00
 2649 2529 898570F1 		movl	%eax, -3728(%rbp)
 2649      FFFF
 424:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2650              		.loc 2 424 0
 2651 252f 83BD70F1 		cmpl	$0, -3728(%rbp)
 2651      FFFF00
 2652 2536 7427     		je	.L138
 2653              		.loc 2 424 0 is_stmt 0 discriminator 1
 2654 2538 488B8528 		movq	-3800(%rbp), %rax
 2654      F1FFFF
 2655 253f 488D3500 		leaq	.LC18(%rip), %rsi
 2655      000000
 2656 2546 4889C7   		movq	%rax, %rdi
 2657 2549 E8000000 		call	errPrefix@PLT
 2657      00
 2658 254e 8B8570F1 		movl	-3728(%rbp), %eax
 2658      FFFF
 2659 2554 898568F1 		movl	%eax, -3736(%rbp)
 2659      FFFF
 2660 255a E9380200 		jmp	.L67
 2660      00
 2661              	.L138:
 425:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 2662              		.loc 2 425 0 is_stmt 1
 2663 255f 0FB69564 		movzbl	-3740(%rbp), %edx
 2663      F1FFFF
 2664 2566 0FB6B563 		movzbl	-3741(%rbp), %esi
 2664      F1FFFF
 2665 256d 488BBD28 		movq	-3800(%rbp), %rdi
 2665      F1FFFF
 2666 2574 488D8D5B 		leaq	-3749(%rbp), %rcx
 2666      F1FFFF
 2667 257b 488B8548 		movq	-3768(%rbp), %rax
 2667      F1FFFF
 2668 2582 4989F9   		movq	%rdi, %r9
 2669 2585 4989C8   		movq	%rcx, %r8
 2670 2588 B9030000 		movl	$3, %ecx
 2670      00
 2671 258d 4889C7   		movq	%rax, %rdi
 2672 2590 E8000000 		call	flSingleBitPortAccess@PLT
 2672      00
 2673 2595 898570F1 		movl	%eax, -3728(%rbp)
 2673      FFFF
 426:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2674              		.loc 2 426 0
 2675 259b 83BD70F1 		cmpl	$0, -3728(%rbp)
 2675      FFFF00
 2676 25a2 7427     		je	.L139
 2677              		.loc 2 426 0 is_stmt 0 discriminator 1
 2678 25a4 488B8528 		movq	-3800(%rbp), %rax
 2678      F1FFFF
 2679 25ab 488D3500 		leaq	.LC18(%rip), %rsi
 2679      000000
 2680 25b2 4889C7   		movq	%rax, %rdi
 2681 25b5 E8000000 		call	errPrefix@PLT
 2681      00
 2682 25ba 8B8570F1 		movl	-3728(%rbp), %eax
 2682      FFFF
 2683 25c0 898568F1 		movl	%eax, -3736(%rbp)
 2683      FFFF
 2684 25c6 E9CC0100 		jmp	.L67
 2684      00
 2685              	.L139:
 427:prog.c        **** 		if ( doneStatus ) {
 2686              		.loc 2 427 0 is_stmt 1
 2687 25cb 0FB6855B 		movzbl	-3749(%rbp), %eax
 2687      F1FFFF
 2688 25d2 84C0     		testb	%al, %al
 2689 25d4 740D     		je	.L140
 428:prog.c        **** 			// If DONE goes high, we've finished.
 429:prog.c        **** 			break;
 2690              		.loc 2 429 0
 2691 25d6 90       		nop
 430:prog.c        **** 		} else if ( initStatus ) {
 431:prog.c        **** 			// If DONE remains low and INIT remains high, we probably just need more clocks
 432:prog.c        **** 			i++;
 433:prog.c        **** 			CHECK_STATUS(i == 10, FL_PROG_ERR, cleanup, "xProgram(): DONE did not assert");
 434:prog.c        **** 			fStatus = dataWrite(handle, progOp, zeroBlock, 64, lookupTable, error);
 435:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 436:prog.c        **** 		} else {
 437:prog.c        **** 			// If DONE remains low and INIT goes low, an error occurred
 438:prog.c        **** 			CHECK_STATUS(
 439:prog.c        **** 				true, FL_PROG_ERR, cleanup,
 440:prog.c        **** 				"xProgram(): INIT unexpectedly low (CRC error during config)");
 441:prog.c        **** 		}
 442:prog.c        **** 	}
 443:prog.c        **** 
 444:prog.c        **** 	// Make all specified pins inputs; leave INIT & DONE as inputs and leave PROG driven high
 445:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 2692              		.loc 2 445 0
 2693 25d7 C6855CF1 		movb	$0, -3748(%rbp)
 2693      FFFF00
 2694 25de E9A70100 		jmp	.L146
 2694      00
 2695              	.L140:
 430:prog.c        **** 		} else if ( initStatus ) {
 2696              		.loc 2 430 0
 2697 25e3 0FB6855A 		movzbl	-3750(%rbp), %eax
 2697      F1FFFF
 2698 25ea 84C0     		testb	%al, %al
 2699 25ec 0F84A000 		je	.L142
 2699      0000
 432:prog.c        **** 			CHECK_STATUS(i == 10, FL_PROG_ERR, cleanup, "xProgram(): DONE did not assert");
 2700              		.loc 2 432 0
 2701 25f2 83856CF1 		addl	$1, -3732(%rbp)
 2701      FFFF01
 433:prog.c        **** 			fStatus = dataWrite(handle, progOp, zeroBlock, 64, lookupTable, error);
 2702              		.loc 2 433 0
 2703 25f9 83BD6CF1 		cmpl	$10, -3732(%rbp)
 2703      FFFF0A
 2704 2600 7525     		jne	.L143
 433:prog.c        **** 			fStatus = dataWrite(handle, progOp, zeroBlock, 64, lookupTable, error);
 2705              		.loc 2 433 0 is_stmt 0 discriminator 1
 2706 2602 488B8528 		movq	-3800(%rbp), %rax
 2706      F1FFFF
 2707 2609 488D3500 		leaq	.LC21(%rip), %rsi
 2707      000000
 2708 2610 4889C7   		movq	%rax, %rdi
 2709 2613 E8000000 		call	errPrefix@PLT
 2709      00
 2710 2618 C78568F1 		movl	$20, -3736(%rbp)
 2710      FFFF1400 
 2710      0000
 2711 2622 E9700100 		jmp	.L67
 2711      00
 2712              	.L143:
 434:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2713              		.loc 2 434 0 is_stmt 1
 2714 2627 488BBD28 		movq	-3800(%rbp), %rdi
 2714      F1FFFF
 2715 262e 488D8DE0 		leaq	-288(%rbp), %rcx
 2715      FEFFFF
 2716 2635 488D95A0 		leaq	-352(%rbp), %rdx
 2716      FEFFFF
 2717 263c 8BB544F1 		movl	-3772(%rbp), %esi
 2717      FFFF
 2718 2642 488B8548 		movq	-3768(%rbp), %rax
 2718      F1FFFF
 2719 2649 4989F9   		movq	%rdi, %r9
 2720 264c 4989C8   		movq	%rcx, %r8
 2721 264f B9400000 		movl	$64, %ecx
 2721      00
 2722 2654 4889C7   		movq	%rax, %rdi
 2723 2657 E83BE2FF 		call	dataWrite
 2723      FF
 2724 265c 898570F1 		movl	%eax, -3728(%rbp)
 2724      FFFF
 435:prog.c        **** 		} else {
 2725              		.loc 2 435 0
 2726 2662 83BD70F1 		cmpl	$0, -3728(%rbp)
 2726      FFFF00
 2727 2669 744C     		je	.L144
 435:prog.c        **** 		} else {
 2728              		.loc 2 435 0 is_stmt 0 discriminator 1
 2729 266b 488B8528 		movq	-3800(%rbp), %rax
 2729      F1FFFF
 2730 2672 488D3500 		leaq	.LC18(%rip), %rsi
 2730      000000
 2731 2679 4889C7   		movq	%rax, %rdi
 2732 267c E8000000 		call	errPrefix@PLT
 2732      00
 2733 2681 8B8570F1 		movl	-3728(%rbp), %eax
 2733      FFFF
 2734 2687 898568F1 		movl	%eax, -3736(%rbp)
 2734      FFFF
 2735 268d E9050100 		jmp	.L67
 2735      00
 2736              	.L142:
 438:prog.c        **** 				true, FL_PROG_ERR, cleanup,
 2737              		.loc 2 438 0 is_stmt 1 discriminator 1
 2738 2692 488B8528 		movq	-3800(%rbp), %rax
 2738      F1FFFF
 2739 2699 488D3500 		leaq	.LC22(%rip), %rsi
 2739      000000
 2740 26a0 4889C7   		movq	%rax, %rdi
 2741 26a3 E8000000 		call	errPrefix@PLT
 2741      00
 2742 26a8 C78568F1 		movl	$20, -3736(%rbp)
 2742      FFFF1400 
 2742      0000
 2743 26b2 E9E00000 		jmp	.L67
 2743      00
 2744              	.L144:
 442:prog.c        **** 
 2745              		.loc 2 442 0
 2746 26b7 E937FEFF 		jmp	.L145
 2746      FF
 2747              	.L150:
 446:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2748              		.loc 2 446 0
 2749 26bc C6855DF1 		movb	$0, -3747(%rbp)
 2749      FFFF00
 2750 26c3 E9A50000 		jmp	.L147
 2750      00
 2751              	.L149:
 447:prog.c        **** 			thisPin = pinMap[port][bit];
 2752              		.loc 2 447 0
 2753 26c8 0FB6955C 		movzbl	-3748(%rbp), %edx
 2753      F1FFFF
 2754 26cf 0FB6855D 		movzbl	-3747(%rbp), %eax
 2754      F1FFFF
 2755 26d6 4898     		cltq
 2756 26d8 4863D2   		movslq	%edx, %rdx
 2757 26db 48C1E205 		salq	$5, %rdx
 2758 26df 4801D0   		addq	%rdx, %rax
 2759 26e2 8B848580 		movl	-3712(%rbp,%rax,4), %eax
 2759      F1FFFF
 2760 26e9 898574F1 		movl	%eax, -3724(%rbp)
 2760      FFFF
 448:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 2761              		.loc 2 448 0
 2762 26ef 83BD74F1 		cmpl	$0, -3724(%rbp)
 2762      FFFF00
 2763 26f6 7465     		je	.L148
 449:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, PIN_INPUT, NULL, error);
 2764              		.loc 2 449 0
 2765 26f8 0FB6955D 		movzbl	-3747(%rbp), %edx
 2765      F1FFFF
 2766 26ff 0FB6B55C 		movzbl	-3748(%rbp), %esi
 2766      F1FFFF
 2767 2706 488B8D28 		movq	-3800(%rbp), %rcx
 2767      F1FFFF
 2768 270d 488B8548 		movq	-3768(%rbp), %rax
 2768      F1FFFF
 2769 2714 4989C9   		movq	%rcx, %r9
 2770 2717 41B80000 		movl	$0, %r8d
 2770      0000
 2771 271d B9030000 		movl	$3, %ecx
 2771      00
 2772 2722 4889C7   		movq	%rax, %rdi
 2773 2725 E8000000 		call	flSingleBitPortAccess@PLT
 2773      00
 2774 272a 898570F1 		movl	%eax, -3728(%rbp)
 2774      FFFF
 450:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "xProgram()");
 2775              		.loc 2 450 0
 2776 2730 83BD70F1 		cmpl	$0, -3728(%rbp)
 2776      FFFF00
 2777 2737 7424     		je	.L148
 2778              		.loc 2 450 0 is_stmt 0 discriminator 1
 2779 2739 488B8528 		movq	-3800(%rbp), %rax
 2779      F1FFFF
 2780 2740 488D3500 		leaq	.LC18(%rip), %rsi
 2780      000000
 2781 2747 4889C7   		movq	%rax, %rdi
 2782 274a E8000000 		call	errPrefix@PLT
 2782      00
 2783 274f 8B8570F1 		movl	-3728(%rbp), %eax
 2783      FFFF
 2784 2755 898568F1 		movl	%eax, -3736(%rbp)
 2784      FFFF
 2785 275b EB3A     		jmp	.L67
 2786              	.L148:
 446:prog.c        **** 			thisPin = pinMap[port][bit];
 2787              		.loc 2 446 0 is_stmt 1
 2788 275d 0FB6855D 		movzbl	-3747(%rbp), %eax
 2788      F1FFFF
 2789 2764 83C001   		addl	$1, %eax
 2790 2767 88855DF1 		movb	%al, -3747(%rbp)
 2790      FFFF
 2791              	.L147:
 446:prog.c        **** 			thisPin = pinMap[port][bit];
 2792              		.loc 2 446 0 is_stmt 0 discriminator 1
 2793 276d 80BD5DF1 		cmpb	$31, -3747(%rbp)
 2793      FFFF1F
 2794 2774 0F864EFF 		jbe	.L149
 2794      FFFF
 445:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2795              		.loc 2 445 0 is_stmt 1
 2796 277a 0FB6855C 		movzbl	-3748(%rbp), %eax
 2796      F1FFFF
 2797 2781 83C001   		addl	$1, %eax
 2798 2784 88855CF1 		movb	%al, -3748(%rbp)
 2798      FFFF
 2799              	.L146:
 445:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 2800              		.loc 2 445 0 is_stmt 0 discriminator 1
 2801 278a 80BD5CF1 		cmpb	$25, -3748(%rbp)
 2801      FFFF19
 2802 2791 0F8625FF 		jbe	.L150
 2802      FFFF
 2803              	.L67:
 451:prog.c        **** 			}
 452:prog.c        **** 		}
 453:prog.c        **** 	}
 454:prog.c        **** cleanup:
 455:prog.c        **** 	return retVal;
 2804              		.loc 2 455 0 is_stmt 1
 2805 2797 8B8568F1 		movl	-3736(%rbp), %eax
 2805      FFFF
 456:prog.c        **** }
 2806              		.loc 2 456 0
 2807 279d 488B5DE8 		movq	-24(%rbp), %rbx
 2808 27a1 6448331C 		xorq	%fs:40, %rbx
 2808      25280000 
 2808      00
 2809 27aa 7405     		je	.L152
 2810 27ac E8000000 		call	__stack_chk_fail@PLT
 2810      00
 2811              	.L152:
 2812 27b1 4881C4D8 		addq	$3800, %rsp
 2812      0E0000
 2813 27b8 5B       		popq	%rbx
 2814 27b9 5D       		popq	%rbp
 2815              		.cfi_def_cfa 7, 8
 2816 27ba C3       		ret
 2817              		.cfi_endproc
 2818              	.LFE12:
 2820              		.section	.rodata
 2821 049c 00000000 		.align 8
 2822              	.LC23:
 2823 04a0 6150726F 		.string	"aProgram(): Unexpected end of config string:\n  %s\n  %s^"
 2823      6772616D 
 2823      28293A20 
 2823      556E6578 
 2823      70656374 
 2824              		.align 8
 2825              	.LC24:
 2826 04d8 6150726F 		.string	"aProgram(): Expecting ':':\n  %s\n  %s^"
 2826      6772616D 
 2826      28293A20 
 2826      45787065 
 2826      6374696E 
 2827 04fe 0000     		.align 8
 2828              	.LC25:
 2829 0500 6150726F 		.string	"aProgram(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 2829      6772616D 
 2829      28293A20 
 2829      506F7274 
 2829      20697320 
 2830 0543 00000000 		.align 8
 2830      00
 2831              	.LC26:
 2832 0548 6150726F 		.string	"aProgram(): Bit number is not valid:\n  %s\n  %s^"
 2832      6772616D 
 2832      28293A20 
 2832      42697420 
 2832      6E756D62 
 2833              		.align 8
 2834              	.LC27:
 2835 0578 6150726F 		.string	"aProgram(): port '%c%d' is already used:\n  %s\n  %s^"
 2835      6772616D 
 2835      28293A20 
 2835      706F7274 
 2835      20272563 
 2836              	.LC28:
 2837 05ac 6150726F 		.string	"aProgram()"
 2837      6772616D 
 2837      282900
 2838 05b7 00       		.align 8
 2839              	.LC29:
 2840 05b8 6150726F 		.string	"aProgram(): Expecting ']':\n  %s\n  %s^"
 2840      6772616D 
 2840      28293A20 
 2840      45787065 
 2840      6374696E 
 2841 05de 0000     		.align 8
 2842              	.LC30:
 2843 05e0 6150726F 		.string	"aProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^"
 2843      6772616D 
 2843      28293A20 
 2843      45787065 
 2843      6374696E 
 2844 0617 00       		.align 8
 2845              	.LC31:
 2846 0618 6150726F 		.string	"aProgram(): CONF_DONE remained low (CRC error during config)"
 2846      6772616D 
 2846      28293A20 
 2846      434F4E46 
 2846      5F444F4E 
 2847              		.text
 2849              	aProgram:
 2850              	.LFB13:
 457:prog.c        **** 
 458:prog.c        **** // This function performs a "passive" serial programming operation on Altera FPGAs.
 459:prog.c        **** //
 460:prog.c        **** // Called by:
 461:prog.c        **** //   flProgramBlob() -> xProgram()
 462:prog.c        **** //
 463:prog.c        **** static FLStatus aProgram(struct FLContext *handle, const char *portConfig, const uint8 *data, uint3
 2851              		.loc 2 463 0
 2852              		.cfi_startproc
 2853 27bb 55       		pushq	%rbp
 2854              		.cfi_def_cfa_offset 16
 2855              		.cfi_offset 6, -16
 2856 27bc 4889E5   		movq	%rsp, %rbp
 2857              		.cfi_def_cfa_register 6
 2858 27bf 53       		pushq	%rbx
 2859 27c0 4881EC78 		subq	$3704, %rsp
 2859      0E0000
 2860              		.cfi_offset 3, -24
 2861 27c7 4889BDA8 		movq	%rdi, -3672(%rbp)
 2861      F1FFFF
 2862 27ce 4889B5A0 		movq	%rsi, -3680(%rbp)
 2862      F1FFFF
 2863 27d5 48899598 		movq	%rdx, -3688(%rbp)
 2863      F1FFFF
 2864 27dc 898D94F1 		movl	%ecx, -3692(%rbp)
 2864      FFFF
 2865 27e2 4C898588 		movq	%r8, -3704(%rbp)
 2865      F1FFFF
 2866              		.loc 2 463 0
 2867 27e9 64488B04 		movq	%fs:40, %rax
 2867      25280000 
 2867      00
 2868 27f2 488945E8 		movq	%rax, -24(%rbp)
 2869 27f6 31C0     		xorl	%eax, %eax
 464:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 2870              		.loc 2 464 0
 2871 27f8 C785BCF1 		movl	$0, -3652(%rbp)
 2871      FFFF0000 
 2871      0000
 465:prog.c        **** 	FLStatus fStatus;
 466:prog.c        **** 	uint8 ncfgPort, ncfgBit;
 467:prog.c        **** 	uint8 donePort, doneBit;
 468:prog.c        **** 	uint8 dclkPort, dclkBit;
 469:prog.c        **** 	uint8 dataPort, dataBit;
 470:prog.c        **** 	uint8 port, bit;
 471:prog.c        **** 	uint8 doneStatus;
 472:prog.c        **** 	const char *ptr = portConfig + 2;
 2872              		.loc 2 472 0
 2873 2802 488B85A0 		movq	-3680(%rbp), %rax
 2873      F1FFFF
 2874 2809 4883C002 		addq	$2, %rax
 2875 280d 488985C8 		movq	%rax, -3640(%rbp)
 2875      F1FFFF
 473:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 2876              		.loc 2 473 0
 2877 2814 488DB5D0 		leaq	-3632(%rbp), %rsi
 2877      F1FFFF
 2878 281b B8000000 		movl	$0, %eax
 2878      00
 2879 2820 BAA00100 		movl	$416, %edx
 2879      00
 2880 2825 4889F7   		movq	%rsi, %rdi
 2881 2828 4889D1   		movq	%rdx, %rcx
 2882 282b F348AB   		rep stosq
 474:prog.c        **** 	PinConfig thisPin;
 475:prog.c        **** 	uint8 lookupTable[256];
 476:prog.c        **** 	const uint8 bitOrder[8] = {0,1,2,3,4,5,6,7};
 2883              		.loc 2 476 0
 2884 282e C685D0FE 		movb	$0, -304(%rbp)
 2884      FFFF00
 2885 2835 C685D1FE 		movb	$1, -303(%rbp)
 2885      FFFF01
 2886 283c C685D2FE 		movb	$2, -302(%rbp)
 2886      FFFF02
 2887 2843 C685D3FE 		movb	$3, -301(%rbp)
 2887      FFFF03
 2888 284a C685D4FE 		movb	$4, -300(%rbp)
 2888      FFFF04
 2889 2851 C685D5FE 		movb	$5, -299(%rbp)
 2889      FFFF05
 2890 2858 C685D6FE 		movb	$6, -298(%rbp)
 2890      FFFF06
 2891 285f C685D7FE 		movb	$7, -297(%rbp)
 2891      FFFF07
 477:prog.c        **** 	char ch;
 478:prog.c        **** 	EXPECT_CHAR(':', "aProgram");
 2892              		.loc 2 478 0
 2893 2866 488B85C8 		movq	-3640(%rbp), %rax
 2893      F1FFFF
 2894 286d 0FB600   		movzbl	(%rax), %eax
 2895 2870 8885B3F1 		movb	%al, -3661(%rbp)
 2895      FFFF
 2896 2876 80BDB3F1 		cmpb	$0, -3661(%rbp)
 2896      FFFF00
 2897 287d 7553     		jne	.L154
 2898              		.loc 2 478 0 is_stmt 0 discriminator 1
 2899 287f 488B85C8 		movq	-3640(%rbp), %rax
 2899      F1FFFF
 2900 2886 4889C2   		movq	%rax, %rdx
 2901 2889 488B85A0 		movq	-3680(%rbp), %rax
 2901      F1FFFF
 2902 2890 4829C2   		subq	%rax, %rdx
 2903 2893 4889D0   		movq	%rdx, %rax
 2904 2896 4889C7   		movq	%rax, %rdi
 2905 2899 E81CD9FF 		call	spaces
 2905      FF
 2906 289e 4889C1   		movq	%rax, %rcx
 2907 28a1 488B95A0 		movq	-3680(%rbp), %rdx
 2907      F1FFFF
 2908 28a8 488B8588 		movq	-3704(%rbp), %rax
 2908      F1FFFF
 2909 28af 488D3500 		leaq	.LC23(%rip), %rsi
 2909      000000
 2910 28b6 4889C7   		movq	%rax, %rdi
 2911 28b9 B8000000 		movl	$0, %eax
 2911      00
 2912 28be E8000000 		call	errRender@PLT
 2912      00
 2913 28c3 C785BCF1 		movl	$11, -3652(%rbp)
 2913      FFFF0B00 
 2913      0000
 2914 28cd E9991200 		jmp	.L155
 2914      00
 2915              	.L154:
 2916              		.loc 2 478 0 discriminator 2
 2917 28d2 80BDB3F1 		cmpb	$58, -3661(%rbp)
 2917      FFFF3A
 2918 28d9 7453     		je	.L156
 2919              		.loc 2 478 0 discriminator 1
 2920 28db 488B85C8 		movq	-3640(%rbp), %rax
 2920      F1FFFF
 2921 28e2 4889C2   		movq	%rax, %rdx
 2922 28e5 488B85A0 		movq	-3680(%rbp), %rax
 2922      F1FFFF
 2923 28ec 4829C2   		subq	%rax, %rdx
 2924 28ef 4889D0   		movq	%rdx, %rax
 2925 28f2 4889C7   		movq	%rax, %rdi
 2926 28f5 E8C0D8FF 		call	spaces
 2926      FF
 2927 28fa 4889C1   		movq	%rax, %rcx
 2928 28fd 488B95A0 		movq	-3680(%rbp), %rdx
 2928      F1FFFF
 2929 2904 488B8588 		movq	-3704(%rbp), %rax
 2929      F1FFFF
 2930 290b 488D3500 		leaq	.LC24(%rip), %rsi
 2930      000000
 2931 2912 4889C7   		movq	%rax, %rdi
 2932 2915 B8000000 		movl	$0, %eax
 2932      00
 2933 291a E8000000 		call	errRender@PLT
 2933      00
 2934 291f C785BCF1 		movl	$11, -3652(%rbp)
 2934      FFFF0B00 
 2934      0000
 2935 2929 E93D1200 		jmp	.L155
 2935      00
 2936              	.L156:
 2937              		.loc 2 478 0 discriminator 2
 2938 292e 488B85C8 		movq	-3640(%rbp), %rax
 2938      F1FFFF
 2939 2935 4883C001 		addq	$1, %rax
 2940 2939 488985C8 		movq	%rax, -3640(%rbp)
 2940      F1FFFF
 479:prog.c        **** 
 480:prog.c        **** 	GET_PAIR(ncfgPort, ncfgBit, "aProgram");
 2941              		.loc 2 480 0 is_stmt 1 discriminator 2
 2942 2940 488B85C8 		movq	-3640(%rbp), %rax
 2942      F1FFFF
 2943 2947 0FB600   		movzbl	(%rax), %eax
 2944 294a 8885B3F1 		movb	%al, -3661(%rbp)
 2944      FFFF
 2945 2950 80BDB3F1 		cmpb	$0, -3661(%rbp)
 2945      FFFF00
 2946 2957 7553     		jne	.L157
 2947              		.loc 2 480 0 is_stmt 0 discriminator 1
 2948 2959 488B85C8 		movq	-3640(%rbp), %rax
 2948      F1FFFF
 2949 2960 4889C2   		movq	%rax, %rdx
 2950 2963 488B85A0 		movq	-3680(%rbp), %rax
 2950      F1FFFF
 2951 296a 4829C2   		subq	%rax, %rdx
 2952 296d 4889D0   		movq	%rdx, %rax
 2953 2970 4889C7   		movq	%rax, %rdi
 2954 2973 E842D8FF 		call	spaces
 2954      FF
 2955 2978 4889C1   		movq	%rax, %rcx
 2956 297b 488B95A0 		movq	-3680(%rbp), %rdx
 2956      F1FFFF
 2957 2982 488B8588 		movq	-3704(%rbp), %rax
 2957      F1FFFF
 2958 2989 488D3500 		leaq	.LC23(%rip), %rsi
 2958      000000
 2959 2990 4889C7   		movq	%rax, %rdi
 2960 2993 B8000000 		movl	$0, %eax
 2960      00
 2961 2998 E8000000 		call	errRender@PLT
 2961      00
 2962 299d C785BCF1 		movl	$11, -3652(%rbp)
 2962      FFFF0B00 
 2962      0000
 2963 29a7 E9BF1100 		jmp	.L155
 2963      00
 2964              	.L157:
 2965              		.loc 2 480 0 discriminator 2
 2966 29ac 80BDB3F1 		cmpb	$64, -3661(%rbp)
 2966      FFFF40
 2967 29b3 7E09     		jle	.L158
 2968 29b5 80BDB3F1 		cmpb	$90, -3661(%rbp)
 2968      FFFF5A
 2969 29bc 7E53     		jle	.L159
 2970              	.L158:
 2971              		.loc 2 480 0 discriminator 1
 2972 29be 488B85C8 		movq	-3640(%rbp), %rax
 2972      F1FFFF
 2973 29c5 4889C2   		movq	%rax, %rdx
 2974 29c8 488B85A0 		movq	-3680(%rbp), %rax
 2974      F1FFFF
 2975 29cf 4829C2   		subq	%rax, %rdx
 2976 29d2 4889D0   		movq	%rdx, %rax
 2977 29d5 4889C7   		movq	%rax, %rdi
 2978 29d8 E8DDD7FF 		call	spaces
 2978      FF
 2979 29dd 4889C1   		movq	%rax, %rcx
 2980 29e0 488B95A0 		movq	-3680(%rbp), %rdx
 2980      F1FFFF
 2981 29e7 488B8588 		movq	-3704(%rbp), %rax
 2981      F1FFFF
 2982 29ee 488D3500 		leaq	.LC25(%rip), %rsi
 2982      000000
 2983 29f5 4889C7   		movq	%rax, %rdi
 2984 29f8 B8000000 		movl	$0, %eax
 2984      00
 2985 29fd E8000000 		call	errRender@PLT
 2985      00
 2986 2a02 C785BCF1 		movl	$11, -3652(%rbp)
 2986      FFFF0B00 
 2986      0000
 2987 2a0c E95A1100 		jmp	.L155
 2987      00
 2988              	.L159:
 2989 2a11 0FB685B3 		movzbl	-3661(%rbp), %eax
 2989      F1FFFF
 2990 2a18 83E841   		subl	$65, %eax
 2991 2a1b 8885B4F1 		movb	%al, -3660(%rbp)
 2991      FFFF
 2992 2a21 488B85C8 		movq	-3640(%rbp), %rax
 2992      F1FFFF
 2993 2a28 4883C001 		addq	$1, %rax
 2994 2a2c 488985C8 		movq	%rax, -3640(%rbp)
 2994      F1FFFF
 2995 2a33 488B85C8 		movq	-3640(%rbp), %rax
 2995      F1FFFF
 2996 2a3a 0FB600   		movzbl	(%rax), %eax
 2997 2a3d 8885B3F1 		movb	%al, -3661(%rbp)
 2997      FFFF
 2998 2a43 80BDB3F1 		cmpb	$0, -3661(%rbp)
 2998      FFFF00
 2999 2a4a 7553     		jne	.L160
 3000 2a4c 488B85C8 		movq	-3640(%rbp), %rax
 3000      F1FFFF
 3001 2a53 4889C2   		movq	%rax, %rdx
 3002 2a56 488B85A0 		movq	-3680(%rbp), %rax
 3002      F1FFFF
 3003 2a5d 4829C2   		subq	%rax, %rdx
 3004 2a60 4889D0   		movq	%rdx, %rax
 3005 2a63 4889C7   		movq	%rax, %rdi
 3006 2a66 E84FD7FF 		call	spaces
 3006      FF
 3007 2a6b 4889C1   		movq	%rax, %rcx
 3008 2a6e 488B95A0 		movq	-3680(%rbp), %rdx
 3008      F1FFFF
 3009 2a75 488B8588 		movq	-3704(%rbp), %rax
 3009      F1FFFF
 3010 2a7c 488D3500 		leaq	.LC23(%rip), %rsi
 3010      000000
 3011 2a83 4889C7   		movq	%rax, %rdi
 3012 2a86 B8000000 		movl	$0, %eax
 3012      00
 3013 2a8b E8000000 		call	errRender@PLT
 3013      00
 3014 2a90 C785BCF1 		movl	$11, -3652(%rbp)
 3014      FFFF0B00 
 3014      0000
 3015 2a9a E9CC1000 		jmp	.L155
 3015      00
 3016              	.L160:
 3017              		.loc 2 480 0 discriminator 2
 3018 2a9f 80BDB3F1 		cmpb	$47, -3661(%rbp)
 3018      FFFF2F
 3019 2aa6 7E09     		jle	.L161
 3020 2aa8 80BDB3F1 		cmpb	$57, -3661(%rbp)
 3020      FFFF39
 3021 2aaf 7E53     		jle	.L162
 3022              	.L161:
 3023              		.loc 2 480 0 discriminator 1
 3024 2ab1 488B85C8 		movq	-3640(%rbp), %rax
 3024      F1FFFF
 3025 2ab8 4889C2   		movq	%rax, %rdx
 3026 2abb 488B85A0 		movq	-3680(%rbp), %rax
 3026      F1FFFF
 3027 2ac2 4829C2   		subq	%rax, %rdx
 3028 2ac5 4889D0   		movq	%rdx, %rax
 3029 2ac8 4889C7   		movq	%rax, %rdi
 3030 2acb E8EAD6FF 		call	spaces
 3030      FF
 3031 2ad0 4889C1   		movq	%rax, %rcx
 3032 2ad3 488B95A0 		movq	-3680(%rbp), %rdx
 3032      F1FFFF
 3033 2ada 488B8588 		movq	-3704(%rbp), %rax
 3033      F1FFFF
 3034 2ae1 488D3500 		leaq	.LC26(%rip), %rsi
 3034      000000
 3035 2ae8 4889C7   		movq	%rax, %rdi
 3036 2aeb B8000000 		movl	$0, %eax
 3036      00
 3037 2af0 E8000000 		call	errRender@PLT
 3037      00
 3038 2af5 C785BCF1 		movl	$11, -3652(%rbp)
 3038      FFFF0B00 
 3038      0000
 3039 2aff E9671000 		jmp	.L155
 3039      00
 3040              	.L162:
 3041 2b04 488B85C8 		movq	-3640(%rbp), %rax
 3041      F1FFFF
 3042 2b0b 488D8DC8 		leaq	-3640(%rbp), %rcx
 3042      F1FFFF
 3043 2b12 BA0A0000 		movl	$10, %edx
 3043      00
 3044 2b17 4889CE   		movq	%rcx, %rsi
 3045 2b1a 4889C7   		movq	%rax, %rdi
 3046 2b1d E8000000 		call	strtoul@PLT
 3046      00
 3047 2b22 8885B5F1 		movb	%al, -3659(%rbp)
 3047      FFFF
 481:prog.c        **** 	SET_BIT(ncfgPort, ncfgBit, PIN_LOW, "aProgram");
 3048              		.loc 2 481 0 is_stmt 1 discriminator 1
 3049 2b28 0FB695B4 		movzbl	-3660(%rbp), %edx
 3049      F1FFFF
 3050 2b2f 0FB685B5 		movzbl	-3659(%rbp), %eax
 3050      F1FFFF
 3051 2b36 4898     		cltq
 3052 2b38 4863D2   		movslq	%edx, %rdx
 3053 2b3b 48C1E205 		salq	$5, %rdx
 3054 2b3f 4801D0   		addq	%rdx, %rax
 3055 2b42 8B8485D0 		movl	-3632(%rbp,%rax,4), %eax
 3055      F1FFFF
 3056 2b49 85C0     		testl	%eax, %eax
 3057 2b4b 7472     		je	.L163
 3058 2b4d 488B85C8 		movq	-3640(%rbp), %rax
 3058      F1FFFF
 3059 2b54 4889C2   		movq	%rax, %rdx
 3060 2b57 488B85A0 		movq	-3680(%rbp), %rax
 3060      F1FFFF
 3061 2b5e 4829C2   		subq	%rax, %rdx
 3062 2b61 4889D0   		movq	%rdx, %rax
 3063 2b64 4883E801 		subq	$1, %rax
 3064 2b68 4889C7   		movq	%rax, %rdi
 3065 2b6b E84AD6FF 		call	spaces
 3065      FF
 3066 2b70 4889C1   		movq	%rax, %rcx
 3067 2b73 0FB695B5 		movzbl	-3659(%rbp), %edx
 3067      F1FFFF
 3068 2b7a 0FB685B4 		movzbl	-3660(%rbp), %eax
 3068      F1FFFF
 3069 2b81 8D7041   		leal	65(%rax), %esi
 3070 2b84 488BBDA0 		movq	-3680(%rbp), %rdi
 3070      F1FFFF
 3071 2b8b 488B8588 		movq	-3704(%rbp), %rax
 3071      F1FFFF
 3072 2b92 4989C9   		movq	%rcx, %r9
 3073 2b95 4989F8   		movq	%rdi, %r8
 3074 2b98 89D1     		movl	%edx, %ecx
 3075 2b9a 89F2     		movl	%esi, %edx
 3076 2b9c 488D3500 		leaq	.LC27(%rip), %rsi
 3076      000000
 3077 2ba3 4889C7   		movq	%rax, %rdi
 3078 2ba6 B8000000 		movl	$0, %eax
 3078      00
 3079 2bab E8000000 		call	errRender@PLT
 3079      00
 3080 2bb0 C785BCF1 		movl	$11, -3652(%rbp)
 3080      FFFF0B00 
 3080      0000
 3081 2bba E9AC0F00 		jmp	.L155
 3081      00
 3082              	.L163:
 3083              		.loc 2 481 0 is_stmt 0 discriminator 2
 3084 2bbf 0FB695B4 		movzbl	-3660(%rbp), %edx
 3084      F1FFFF
 3085 2bc6 0FB685B5 		movzbl	-3659(%rbp), %eax
 3085      F1FFFF
 3086 2bcd 4898     		cltq
 3087 2bcf 4863D2   		movslq	%edx, %rdx
 3088 2bd2 48C1E205 		salq	$5, %rdx
 3089 2bd6 4801D0   		addq	%rdx, %rax
 3090 2bd9 C78485D0 		movl	$2, -3632(%rbp,%rax,4)
 3090      F1FFFF02 
 3090      000000
 482:prog.c        **** 
 483:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ncfgPort, ncfgBit, PIN_LOW, NULL, error); // nCONFIG is lo
 3091              		.loc 2 483 0 is_stmt 1 discriminator 2
 3092 2be4 0FB695B5 		movzbl	-3659(%rbp), %edx
 3092      F1FFFF
 3093 2beb 0FB6B5B4 		movzbl	-3660(%rbp), %esi
 3093      F1FFFF
 3094 2bf2 488B8D88 		movq	-3704(%rbp), %rcx
 3094      F1FFFF
 3095 2bf9 488B85A8 		movq	-3672(%rbp), %rax
 3095      F1FFFF
 3096 2c00 4989C9   		movq	%rcx, %r9
 3097 2c03 41B80000 		movl	$0, %r8d
 3097      0000
 3098 2c09 B9020000 		movl	$2, %ecx
 3098      00
 3099 2c0e 4889C7   		movq	%rax, %rdi
 3100 2c11 E8000000 		call	flSingleBitPortAccess@PLT
 3100      00
 3101 2c16 8985C0F1 		movl	%eax, -3648(%rbp)
 3101      FFFF
 484:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3102              		.loc 2 484 0 discriminator 2
 3103 2c1c 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3103      FFFF00
 3104 2c23 7427     		je	.L164
 3105              		.loc 2 484 0 is_stmt 0 discriminator 1
 3106 2c25 488B8588 		movq	-3704(%rbp), %rax
 3106      F1FFFF
 3107 2c2c 488D3500 		leaq	.LC28(%rip), %rsi
 3107      000000
 3108 2c33 4889C7   		movq	%rax, %rdi
 3109 2c36 E8000000 		call	errPrefix@PLT
 3109      00
 3110 2c3b 8B85C0F1 		movl	-3648(%rbp), %eax
 3110      FFFF
 3111 2c41 8985BCF1 		movl	%eax, -3652(%rbp)
 3111      FFFF
 3112 2c47 E91F0F00 		jmp	.L155
 3112      00
 3113              	.L164:
 485:prog.c        **** 
 486:prog.c        **** 	GET_PAIR(donePort, doneBit, "aProgram");
 3114              		.loc 2 486 0 is_stmt 1
 3115 2c4c 488B85C8 		movq	-3640(%rbp), %rax
 3115      F1FFFF
 3116 2c53 0FB600   		movzbl	(%rax), %eax
 3117 2c56 8885B3F1 		movb	%al, -3661(%rbp)
 3117      FFFF
 3118 2c5c 80BDB3F1 		cmpb	$0, -3661(%rbp)
 3118      FFFF00
 3119 2c63 7553     		jne	.L165
 3120              		.loc 2 486 0 is_stmt 0 discriminator 1
 3121 2c65 488B85C8 		movq	-3640(%rbp), %rax
 3121      F1FFFF
 3122 2c6c 4889C2   		movq	%rax, %rdx
 3123 2c6f 488B85A0 		movq	-3680(%rbp), %rax
 3123      F1FFFF
 3124 2c76 4829C2   		subq	%rax, %rdx
 3125 2c79 4889D0   		movq	%rdx, %rax
 3126 2c7c 4889C7   		movq	%rax, %rdi
 3127 2c7f E836D5FF 		call	spaces
 3127      FF
 3128 2c84 4889C1   		movq	%rax, %rcx
 3129 2c87 488B95A0 		movq	-3680(%rbp), %rdx
 3129      F1FFFF
 3130 2c8e 488B8588 		movq	-3704(%rbp), %rax
 3130      F1FFFF
 3131 2c95 488D3500 		leaq	.LC23(%rip), %rsi
 3131      000000
 3132 2c9c 4889C7   		movq	%rax, %rdi
 3133 2c9f B8000000 		movl	$0, %eax
 3133      00
 3134 2ca4 E8000000 		call	errRender@PLT
 3134      00
 3135 2ca9 C785BCF1 		movl	$11, -3652(%rbp)
 3135      FFFF0B00 
 3135      0000
 3136 2cb3 E9B30E00 		jmp	.L155
 3136      00
 3137              	.L165:
 3138              		.loc 2 486 0 discriminator 2
 3139 2cb8 80BDB3F1 		cmpb	$64, -3661(%rbp)
 3139      FFFF40
 3140 2cbf 7E09     		jle	.L166
 3141 2cc1 80BDB3F1 		cmpb	$90, -3661(%rbp)
 3141      FFFF5A
 3142 2cc8 7E53     		jle	.L167
 3143              	.L166:
 3144              		.loc 2 486 0 discriminator 1
 3145 2cca 488B85C8 		movq	-3640(%rbp), %rax
 3145      F1FFFF
 3146 2cd1 4889C2   		movq	%rax, %rdx
 3147 2cd4 488B85A0 		movq	-3680(%rbp), %rax
 3147      F1FFFF
 3148 2cdb 4829C2   		subq	%rax, %rdx
 3149 2cde 4889D0   		movq	%rdx, %rax
 3150 2ce1 4889C7   		movq	%rax, %rdi
 3151 2ce4 E8D1D4FF 		call	spaces
 3151      FF
 3152 2ce9 4889C1   		movq	%rax, %rcx
 3153 2cec 488B95A0 		movq	-3680(%rbp), %rdx
 3153      F1FFFF
 3154 2cf3 488B8588 		movq	-3704(%rbp), %rax
 3154      F1FFFF
 3155 2cfa 488D3500 		leaq	.LC25(%rip), %rsi
 3155      000000
 3156 2d01 4889C7   		movq	%rax, %rdi
 3157 2d04 B8000000 		movl	$0, %eax
 3157      00
 3158 2d09 E8000000 		call	errRender@PLT
 3158      00
 3159 2d0e C785BCF1 		movl	$11, -3652(%rbp)
 3159      FFFF0B00 
 3159      0000
 3160 2d18 E94E0E00 		jmp	.L155
 3160      00
 3161              	.L167:
 3162 2d1d 0FB685B3 		movzbl	-3661(%rbp), %eax
 3162      F1FFFF
 3163 2d24 83E841   		subl	$65, %eax
 3164 2d27 8885B6F1 		movb	%al, -3658(%rbp)
 3164      FFFF
 3165 2d2d 488B85C8 		movq	-3640(%rbp), %rax
 3165      F1FFFF
 3166 2d34 4883C001 		addq	$1, %rax
 3167 2d38 488985C8 		movq	%rax, -3640(%rbp)
 3167      F1FFFF
 3168 2d3f 488B85C8 		movq	-3640(%rbp), %rax
 3168      F1FFFF
 3169 2d46 0FB600   		movzbl	(%rax), %eax
 3170 2d49 8885B3F1 		movb	%al, -3661(%rbp)
 3170      FFFF
 3171 2d4f 80BDB3F1 		cmpb	$0, -3661(%rbp)
 3171      FFFF00
 3172 2d56 7553     		jne	.L168
 3173 2d58 488B85C8 		movq	-3640(%rbp), %rax
 3173      F1FFFF
 3174 2d5f 4889C2   		movq	%rax, %rdx
 3175 2d62 488B85A0 		movq	-3680(%rbp), %rax
 3175      F1FFFF
 3176 2d69 4829C2   		subq	%rax, %rdx
 3177 2d6c 4889D0   		movq	%rdx, %rax
 3178 2d6f 4889C7   		movq	%rax, %rdi
 3179 2d72 E843D4FF 		call	spaces
 3179      FF
 3180 2d77 4889C1   		movq	%rax, %rcx
 3181 2d7a 488B95A0 		movq	-3680(%rbp), %rdx
 3181      F1FFFF
 3182 2d81 488B8588 		movq	-3704(%rbp), %rax
 3182      F1FFFF
 3183 2d88 488D3500 		leaq	.LC23(%rip), %rsi
 3183      000000
 3184 2d8f 4889C7   		movq	%rax, %rdi
 3185 2d92 B8000000 		movl	$0, %eax
 3185      00
 3186 2d97 E8000000 		call	errRender@PLT
 3186      00
 3187 2d9c C785BCF1 		movl	$11, -3652(%rbp)
 3187      FFFF0B00 
 3187      0000
 3188 2da6 E9C00D00 		jmp	.L155
 3188      00
 3189              	.L168:
 3190              		.loc 2 486 0 discriminator 2
 3191 2dab 80BDB3F1 		cmpb	$47, -3661(%rbp)
 3191      FFFF2F
 3192 2db2 7E09     		jle	.L169
 3193 2db4 80BDB3F1 		cmpb	$57, -3661(%rbp)
 3193      FFFF39
 3194 2dbb 7E53     		jle	.L170
 3195              	.L169:
 3196              		.loc 2 486 0 discriminator 1
 3197 2dbd 488B85C8 		movq	-3640(%rbp), %rax
 3197      F1FFFF
 3198 2dc4 4889C2   		movq	%rax, %rdx
 3199 2dc7 488B85A0 		movq	-3680(%rbp), %rax
 3199      F1FFFF
 3200 2dce 4829C2   		subq	%rax, %rdx
 3201 2dd1 4889D0   		movq	%rdx, %rax
 3202 2dd4 4889C7   		movq	%rax, %rdi
 3203 2dd7 E8DED3FF 		call	spaces
 3203      FF
 3204 2ddc 4889C1   		movq	%rax, %rcx
 3205 2ddf 488B95A0 		movq	-3680(%rbp), %rdx
 3205      F1FFFF
 3206 2de6 488B8588 		movq	-3704(%rbp), %rax
 3206      F1FFFF
 3207 2ded 488D3500 		leaq	.LC26(%rip), %rsi
 3207      000000
 3208 2df4 4889C7   		movq	%rax, %rdi
 3209 2df7 B8000000 		movl	$0, %eax
 3209      00
 3210 2dfc E8000000 		call	errRender@PLT
 3210      00
 3211 2e01 C785BCF1 		movl	$11, -3652(%rbp)
 3211      FFFF0B00 
 3211      0000
 3212 2e0b E95B0D00 		jmp	.L155
 3212      00
 3213              	.L170:
 3214 2e10 488B85C8 		movq	-3640(%rbp), %rax
 3214      F1FFFF
 3215 2e17 488D8DC8 		leaq	-3640(%rbp), %rcx
 3215      F1FFFF
 3216 2e1e BA0A0000 		movl	$10, %edx
 3216      00
 3217 2e23 4889CE   		movq	%rcx, %rsi
 3218 2e26 4889C7   		movq	%rax, %rdi
 3219 2e29 E8000000 		call	strtoul@PLT
 3219      00
 3220 2e2e 8885B7F1 		movb	%al, -3657(%rbp)
 3220      FFFF
 487:prog.c        **** 	SET_BIT(donePort, doneBit, PIN_INPUT, "aProgram");
 3221              		.loc 2 487 0 is_stmt 1 discriminator 1
 3222 2e34 0FB695B6 		movzbl	-3658(%rbp), %edx
 3222      F1FFFF
 3223 2e3b 0FB685B7 		movzbl	-3657(%rbp), %eax
 3223      F1FFFF
 3224 2e42 4898     		cltq
 3225 2e44 4863D2   		movslq	%edx, %rdx
 3226 2e47 48C1E205 		salq	$5, %rdx
 3227 2e4b 4801D0   		addq	%rdx, %rax
 3228 2e4e 8B8485D0 		movl	-3632(%rbp,%rax,4), %eax
 3228      F1FFFF
 3229 2e55 85C0     		testl	%eax, %eax
 3230 2e57 7472     		je	.L171
 3231 2e59 488B85C8 		movq	-3640(%rbp), %rax
 3231      F1FFFF
 3232 2e60 4889C2   		movq	%rax, %rdx
 3233 2e63 488B85A0 		movq	-3680(%rbp), %rax
 3233      F1FFFF
 3234 2e6a 4829C2   		subq	%rax, %rdx
 3235 2e6d 4889D0   		movq	%rdx, %rax
 3236 2e70 4883E801 		subq	$1, %rax
 3237 2e74 4889C7   		movq	%rax, %rdi
 3238 2e77 E83ED3FF 		call	spaces
 3238      FF
 3239 2e7c 4889C1   		movq	%rax, %rcx
 3240 2e7f 0FB695B7 		movzbl	-3657(%rbp), %edx
 3240      F1FFFF
 3241 2e86 0FB685B6 		movzbl	-3658(%rbp), %eax
 3241      F1FFFF
 3242 2e8d 8D7041   		leal	65(%rax), %esi
 3243 2e90 488BBDA0 		movq	-3680(%rbp), %rdi
 3243      F1FFFF
 3244 2e97 488B8588 		movq	-3704(%rbp), %rax
 3244      F1FFFF
 3245 2e9e 4989C9   		movq	%rcx, %r9
 3246 2ea1 4989F8   		movq	%rdi, %r8
 3247 2ea4 89D1     		movl	%edx, %ecx
 3248 2ea6 89F2     		movl	%esi, %edx
 3249 2ea8 488D3500 		leaq	.LC27(%rip), %rsi
 3249      000000
 3250 2eaf 4889C7   		movq	%rax, %rdi
 3251 2eb2 B8000000 		movl	$0, %eax
 3251      00
 3252 2eb7 E8000000 		call	errRender@PLT
 3252      00
 3253 2ebc C785BCF1 		movl	$11, -3652(%rbp)
 3253      FFFF0B00 
 3253      0000
 3254 2ec6 E9A00C00 		jmp	.L155
 3254      00
 3255              	.L171:
 3256              		.loc 2 487 0 is_stmt 0 discriminator 2
 3257 2ecb 0FB695B6 		movzbl	-3658(%rbp), %edx
 3257      F1FFFF
 3258 2ed2 0FB685B7 		movzbl	-3657(%rbp), %eax
 3258      F1FFFF
 3259 2ed9 4898     		cltq
 3260 2edb 4863D2   		movslq	%edx, %rdx
 3261 2ede 48C1E205 		salq	$5, %rdx
 3262 2ee2 4801D0   		addq	%rdx, %rax
 3263 2ee5 C78485D0 		movl	$3, -3632(%rbp,%rax,4)
 3263      F1FFFF03 
 3263      000000
 488:prog.c        **** 
 489:prog.c        **** 	GET_PAIR(dclkPort, dclkBit, "aProgram");
 3264              		.loc 2 489 0 is_stmt 1 discriminator 2
 3265 2ef0 488B85C8 		movq	-3640(%rbp), %rax
 3265      F1FFFF
 3266 2ef7 0FB600   		movzbl	(%rax), %eax
 3267 2efa 8885B3F1 		movb	%al, -3661(%rbp)
 3267      FFFF
 3268 2f00 80BDB3F1 		cmpb	$0, -3661(%rbp)
 3268      FFFF00
 3269 2f07 7553     		jne	.L172
 3270              		.loc 2 489 0 is_stmt 0 discriminator 1
 3271 2f09 488B85C8 		movq	-3640(%rbp), %rax
 3271      F1FFFF
 3272 2f10 4889C2   		movq	%rax, %rdx
 3273 2f13 488B85A0 		movq	-3680(%rbp), %rax
 3273      F1FFFF
 3274 2f1a 4829C2   		subq	%rax, %rdx
 3275 2f1d 4889D0   		movq	%rdx, %rax
 3276 2f20 4889C7   		movq	%rax, %rdi
 3277 2f23 E892D2FF 		call	spaces
 3277      FF
 3278 2f28 4889C1   		movq	%rax, %rcx
 3279 2f2b 488B95A0 		movq	-3680(%rbp), %rdx
 3279      F1FFFF
 3280 2f32 488B8588 		movq	-3704(%rbp), %rax
 3280      F1FFFF
 3281 2f39 488D3500 		leaq	.LC23(%rip), %rsi
 3281      000000
 3282 2f40 4889C7   		movq	%rax, %rdi
 3283 2f43 B8000000 		movl	$0, %eax
 3283      00
 3284 2f48 E8000000 		call	errRender@PLT
 3284      00
 3285 2f4d C785BCF1 		movl	$11, -3652(%rbp)
 3285      FFFF0B00 
 3285      0000
 3286 2f57 E90F0C00 		jmp	.L155
 3286      00
 3287              	.L172:
 3288              		.loc 2 489 0 discriminator 2
 3289 2f5c 80BDB3F1 		cmpb	$64, -3661(%rbp)
 3289      FFFF40
 3290 2f63 7E09     		jle	.L173
 3291 2f65 80BDB3F1 		cmpb	$90, -3661(%rbp)
 3291      FFFF5A
 3292 2f6c 7E53     		jle	.L174
 3293              	.L173:
 3294              		.loc 2 489 0 discriminator 1
 3295 2f6e 488B85C8 		movq	-3640(%rbp), %rax
 3295      F1FFFF
 3296 2f75 4889C2   		movq	%rax, %rdx
 3297 2f78 488B85A0 		movq	-3680(%rbp), %rax
 3297      F1FFFF
 3298 2f7f 4829C2   		subq	%rax, %rdx
 3299 2f82 4889D0   		movq	%rdx, %rax
 3300 2f85 4889C7   		movq	%rax, %rdi
 3301 2f88 E82DD2FF 		call	spaces
 3301      FF
 3302 2f8d 4889C1   		movq	%rax, %rcx
 3303 2f90 488B95A0 		movq	-3680(%rbp), %rdx
 3303      F1FFFF
 3304 2f97 488B8588 		movq	-3704(%rbp), %rax
 3304      F1FFFF
 3305 2f9e 488D3500 		leaq	.LC25(%rip), %rsi
 3305      000000
 3306 2fa5 4889C7   		movq	%rax, %rdi
 3307 2fa8 B8000000 		movl	$0, %eax
 3307      00
 3308 2fad E8000000 		call	errRender@PLT
 3308      00
 3309 2fb2 C785BCF1 		movl	$11, -3652(%rbp)
 3309      FFFF0B00 
 3309      0000
 3310 2fbc E9AA0B00 		jmp	.L155
 3310      00
 3311              	.L174:
 3312 2fc1 0FB685B3 		movzbl	-3661(%rbp), %eax
 3312      F1FFFF
 3313 2fc8 83E841   		subl	$65, %eax
 3314 2fcb 8885B8F1 		movb	%al, -3656(%rbp)
 3314      FFFF
 3315 2fd1 488B85C8 		movq	-3640(%rbp), %rax
 3315      F1FFFF
 3316 2fd8 4883C001 		addq	$1, %rax
 3317 2fdc 488985C8 		movq	%rax, -3640(%rbp)
 3317      F1FFFF
 3318 2fe3 488B85C8 		movq	-3640(%rbp), %rax
 3318      F1FFFF
 3319 2fea 0FB600   		movzbl	(%rax), %eax
 3320 2fed 8885B3F1 		movb	%al, -3661(%rbp)
 3320      FFFF
 3321 2ff3 80BDB3F1 		cmpb	$0, -3661(%rbp)
 3321      FFFF00
 3322 2ffa 7553     		jne	.L175
 3323 2ffc 488B85C8 		movq	-3640(%rbp), %rax
 3323      F1FFFF
 3324 3003 4889C2   		movq	%rax, %rdx
 3325 3006 488B85A0 		movq	-3680(%rbp), %rax
 3325      F1FFFF
 3326 300d 4829C2   		subq	%rax, %rdx
 3327 3010 4889D0   		movq	%rdx, %rax
 3328 3013 4889C7   		movq	%rax, %rdi
 3329 3016 E89FD1FF 		call	spaces
 3329      FF
 3330 301b 4889C1   		movq	%rax, %rcx
 3331 301e 488B95A0 		movq	-3680(%rbp), %rdx
 3331      F1FFFF
 3332 3025 488B8588 		movq	-3704(%rbp), %rax
 3332      F1FFFF
 3333 302c 488D3500 		leaq	.LC23(%rip), %rsi
 3333      000000
 3334 3033 4889C7   		movq	%rax, %rdi
 3335 3036 B8000000 		movl	$0, %eax
 3335      00
 3336 303b E8000000 		call	errRender@PLT
 3336      00
 3337 3040 C785BCF1 		movl	$11, -3652(%rbp)
 3337      FFFF0B00 
 3337      0000
 3338 304a E91C0B00 		jmp	.L155
 3338      00
 3339              	.L175:
 3340              		.loc 2 489 0 discriminator 2
 3341 304f 80BDB3F1 		cmpb	$47, -3661(%rbp)
 3341      FFFF2F
 3342 3056 7E09     		jle	.L176
 3343 3058 80BDB3F1 		cmpb	$57, -3661(%rbp)
 3343      FFFF39
 3344 305f 7E53     		jle	.L177
 3345              	.L176:
 3346              		.loc 2 489 0 discriminator 1
 3347 3061 488B85C8 		movq	-3640(%rbp), %rax
 3347      F1FFFF
 3348 3068 4889C2   		movq	%rax, %rdx
 3349 306b 488B85A0 		movq	-3680(%rbp), %rax
 3349      F1FFFF
 3350 3072 4829C2   		subq	%rax, %rdx
 3351 3075 4889D0   		movq	%rdx, %rax
 3352 3078 4889C7   		movq	%rax, %rdi
 3353 307b E83AD1FF 		call	spaces
 3353      FF
 3354 3080 4889C1   		movq	%rax, %rcx
 3355 3083 488B95A0 		movq	-3680(%rbp), %rdx
 3355      F1FFFF
 3356 308a 488B8588 		movq	-3704(%rbp), %rax
 3356      F1FFFF
 3357 3091 488D3500 		leaq	.LC26(%rip), %rsi
 3357      000000
 3358 3098 4889C7   		movq	%rax, %rdi
 3359 309b B8000000 		movl	$0, %eax
 3359      00
 3360 30a0 E8000000 		call	errRender@PLT
 3360      00
 3361 30a5 C785BCF1 		movl	$11, -3652(%rbp)
 3361      FFFF0B00 
 3361      0000
 3362 30af E9B70A00 		jmp	.L155
 3362      00
 3363              	.L177:
 3364 30b4 488B85C8 		movq	-3640(%rbp), %rax
 3364      F1FFFF
 3365 30bb 488D8DC8 		leaq	-3640(%rbp), %rcx
 3365      F1FFFF
 3366 30c2 BA0A0000 		movl	$10, %edx
 3366      00
 3367 30c7 4889CE   		movq	%rcx, %rsi
 3368 30ca 4889C7   		movq	%rax, %rdi
 3369 30cd E8000000 		call	strtoul@PLT
 3369      00
 3370 30d2 8885B9F1 		movb	%al, -3655(%rbp)
 3370      FFFF
 490:prog.c        **** 	SET_BIT(dclkPort, dclkBit, PIN_LOW, "aProgram");
 3371              		.loc 2 490 0 is_stmt 1 discriminator 1
 3372 30d8 0FB695B8 		movzbl	-3656(%rbp), %edx
 3372      F1FFFF
 3373 30df 0FB685B9 		movzbl	-3655(%rbp), %eax
 3373      F1FFFF
 3374 30e6 4898     		cltq
 3375 30e8 4863D2   		movslq	%edx, %rdx
 3376 30eb 48C1E205 		salq	$5, %rdx
 3377 30ef 4801D0   		addq	%rdx, %rax
 3378 30f2 8B8485D0 		movl	-3632(%rbp,%rax,4), %eax
 3378      F1FFFF
 3379 30f9 85C0     		testl	%eax, %eax
 3380 30fb 7472     		je	.L178
 3381 30fd 488B85C8 		movq	-3640(%rbp), %rax
 3381      F1FFFF
 3382 3104 4889C2   		movq	%rax, %rdx
 3383 3107 488B85A0 		movq	-3680(%rbp), %rax
 3383      F1FFFF
 3384 310e 4829C2   		subq	%rax, %rdx
 3385 3111 4889D0   		movq	%rdx, %rax
 3386 3114 4883E801 		subq	$1, %rax
 3387 3118 4889C7   		movq	%rax, %rdi
 3388 311b E89AD0FF 		call	spaces
 3388      FF
 3389 3120 4889C1   		movq	%rax, %rcx
 3390 3123 0FB695B9 		movzbl	-3655(%rbp), %edx
 3390      F1FFFF
 3391 312a 0FB685B8 		movzbl	-3656(%rbp), %eax
 3391      F1FFFF
 3392 3131 8D7041   		leal	65(%rax), %esi
 3393 3134 488BBDA0 		movq	-3680(%rbp), %rdi
 3393      F1FFFF
 3394 313b 488B8588 		movq	-3704(%rbp), %rax
 3394      F1FFFF
 3395 3142 4989C9   		movq	%rcx, %r9
 3396 3145 4989F8   		movq	%rdi, %r8
 3397 3148 89D1     		movl	%edx, %ecx
 3398 314a 89F2     		movl	%esi, %edx
 3399 314c 488D3500 		leaq	.LC27(%rip), %rsi
 3399      000000
 3400 3153 4889C7   		movq	%rax, %rdi
 3401 3156 B8000000 		movl	$0, %eax
 3401      00
 3402 315b E8000000 		call	errRender@PLT
 3402      00
 3403 3160 C785BCF1 		movl	$11, -3652(%rbp)
 3403      FFFF0B00 
 3403      0000
 3404 316a E9FC0900 		jmp	.L155
 3404      00
 3405              	.L178:
 3406              		.loc 2 490 0 is_stmt 0 discriminator 2
 3407 316f 0FB695B8 		movzbl	-3656(%rbp), %edx
 3407      F1FFFF
 3408 3176 0FB685B9 		movzbl	-3655(%rbp), %eax
 3408      F1FFFF
 3409 317d 4898     		cltq
 3410 317f 4863D2   		movslq	%edx, %rdx
 3411 3182 48C1E205 		salq	$5, %rdx
 3412 3186 4801D0   		addq	%rdx, %rax
 3413 3189 C78485D0 		movl	$2, -3632(%rbp,%rax,4)
 3413      F1FFFF02 
 3413      000000
 491:prog.c        **** 
 492:prog.c        **** 	GET_PAIR(dataPort, dataBit, "aProgram");
 3414              		.loc 2 492 0 is_stmt 1 discriminator 2
 3415 3194 488B85C8 		movq	-3640(%rbp), %rax
 3415      F1FFFF
 3416 319b 0FB600   		movzbl	(%rax), %eax
 3417 319e 8885B3F1 		movb	%al, -3661(%rbp)
 3417      FFFF
 3418 31a4 80BDB3F1 		cmpb	$0, -3661(%rbp)
 3418      FFFF00
 3419 31ab 7553     		jne	.L179
 3420              		.loc 2 492 0 is_stmt 0 discriminator 1
 3421 31ad 488B85C8 		movq	-3640(%rbp), %rax
 3421      F1FFFF
 3422 31b4 4889C2   		movq	%rax, %rdx
 3423 31b7 488B85A0 		movq	-3680(%rbp), %rax
 3423      F1FFFF
 3424 31be 4829C2   		subq	%rax, %rdx
 3425 31c1 4889D0   		movq	%rdx, %rax
 3426 31c4 4889C7   		movq	%rax, %rdi
 3427 31c7 E8EECFFF 		call	spaces
 3427      FF
 3428 31cc 4889C1   		movq	%rax, %rcx
 3429 31cf 488B95A0 		movq	-3680(%rbp), %rdx
 3429      F1FFFF
 3430 31d6 488B8588 		movq	-3704(%rbp), %rax
 3430      F1FFFF
 3431 31dd 488D3500 		leaq	.LC23(%rip), %rsi
 3431      000000
 3432 31e4 4889C7   		movq	%rax, %rdi
 3433 31e7 B8000000 		movl	$0, %eax
 3433      00
 3434 31ec E8000000 		call	errRender@PLT
 3434      00
 3435 31f1 C785BCF1 		movl	$11, -3652(%rbp)
 3435      FFFF0B00 
 3435      0000
 3436 31fb E96B0900 		jmp	.L155
 3436      00
 3437              	.L179:
 3438              		.loc 2 492 0 discriminator 2
 3439 3200 80BDB3F1 		cmpb	$64, -3661(%rbp)
 3439      FFFF40
 3440 3207 7E09     		jle	.L180
 3441 3209 80BDB3F1 		cmpb	$90, -3661(%rbp)
 3441      FFFF5A
 3442 3210 7E53     		jle	.L181
 3443              	.L180:
 3444              		.loc 2 492 0 discriminator 1
 3445 3212 488B85C8 		movq	-3640(%rbp), %rax
 3445      F1FFFF
 3446 3219 4889C2   		movq	%rax, %rdx
 3447 321c 488B85A0 		movq	-3680(%rbp), %rax
 3447      F1FFFF
 3448 3223 4829C2   		subq	%rax, %rdx
 3449 3226 4889D0   		movq	%rdx, %rax
 3450 3229 4889C7   		movq	%rax, %rdi
 3451 322c E889CFFF 		call	spaces
 3451      FF
 3452 3231 4889C1   		movq	%rax, %rcx
 3453 3234 488B95A0 		movq	-3680(%rbp), %rdx
 3453      F1FFFF
 3454 323b 488B8588 		movq	-3704(%rbp), %rax
 3454      F1FFFF
 3455 3242 488D3500 		leaq	.LC25(%rip), %rsi
 3455      000000
 3456 3249 4889C7   		movq	%rax, %rdi
 3457 324c B8000000 		movl	$0, %eax
 3457      00
 3458 3251 E8000000 		call	errRender@PLT
 3458      00
 3459 3256 C785BCF1 		movl	$11, -3652(%rbp)
 3459      FFFF0B00 
 3459      0000
 3460 3260 E9060900 		jmp	.L155
 3460      00
 3461              	.L181:
 3462 3265 0FB685B3 		movzbl	-3661(%rbp), %eax
 3462      F1FFFF
 3463 326c 83E841   		subl	$65, %eax
 3464 326f 8885BAF1 		movb	%al, -3654(%rbp)
 3464      FFFF
 3465 3275 488B85C8 		movq	-3640(%rbp), %rax
 3465      F1FFFF
 3466 327c 4883C001 		addq	$1, %rax
 3467 3280 488985C8 		movq	%rax, -3640(%rbp)
 3467      F1FFFF
 3468 3287 488B85C8 		movq	-3640(%rbp), %rax
 3468      F1FFFF
 3469 328e 0FB600   		movzbl	(%rax), %eax
 3470 3291 8885B3F1 		movb	%al, -3661(%rbp)
 3470      FFFF
 3471 3297 80BDB3F1 		cmpb	$0, -3661(%rbp)
 3471      FFFF00
 3472 329e 7553     		jne	.L182
 3473 32a0 488B85C8 		movq	-3640(%rbp), %rax
 3473      F1FFFF
 3474 32a7 4889C2   		movq	%rax, %rdx
 3475 32aa 488B85A0 		movq	-3680(%rbp), %rax
 3475      F1FFFF
 3476 32b1 4829C2   		subq	%rax, %rdx
 3477 32b4 4889D0   		movq	%rdx, %rax
 3478 32b7 4889C7   		movq	%rax, %rdi
 3479 32ba E8FBCEFF 		call	spaces
 3479      FF
 3480 32bf 4889C1   		movq	%rax, %rcx
 3481 32c2 488B95A0 		movq	-3680(%rbp), %rdx
 3481      F1FFFF
 3482 32c9 488B8588 		movq	-3704(%rbp), %rax
 3482      F1FFFF
 3483 32d0 488D3500 		leaq	.LC23(%rip), %rsi
 3483      000000
 3484 32d7 4889C7   		movq	%rax, %rdi
 3485 32da B8000000 		movl	$0, %eax
 3485      00
 3486 32df E8000000 		call	errRender@PLT
 3486      00
 3487 32e4 C785BCF1 		movl	$11, -3652(%rbp)
 3487      FFFF0B00 
 3487      0000
 3488 32ee E9780800 		jmp	.L155
 3488      00
 3489              	.L182:
 3490              		.loc 2 492 0 discriminator 2
 3491 32f3 80BDB3F1 		cmpb	$47, -3661(%rbp)
 3491      FFFF2F
 3492 32fa 7E09     		jle	.L183
 3493 32fc 80BDB3F1 		cmpb	$57, -3661(%rbp)
 3493      FFFF39
 3494 3303 7E53     		jle	.L184
 3495              	.L183:
 3496              		.loc 2 492 0 discriminator 1
 3497 3305 488B85C8 		movq	-3640(%rbp), %rax
 3497      F1FFFF
 3498 330c 4889C2   		movq	%rax, %rdx
 3499 330f 488B85A0 		movq	-3680(%rbp), %rax
 3499      F1FFFF
 3500 3316 4829C2   		subq	%rax, %rdx
 3501 3319 4889D0   		movq	%rdx, %rax
 3502 331c 4889C7   		movq	%rax, %rdi
 3503 331f E896CEFF 		call	spaces
 3503      FF
 3504 3324 4889C1   		movq	%rax, %rcx
 3505 3327 488B95A0 		movq	-3680(%rbp), %rdx
 3505      F1FFFF
 3506 332e 488B8588 		movq	-3704(%rbp), %rax
 3506      F1FFFF
 3507 3335 488D3500 		leaq	.LC26(%rip), %rsi
 3507      000000
 3508 333c 4889C7   		movq	%rax, %rdi
 3509 333f B8000000 		movl	$0, %eax
 3509      00
 3510 3344 E8000000 		call	errRender@PLT
 3510      00
 3511 3349 C785BCF1 		movl	$11, -3652(%rbp)
 3511      FFFF0B00 
 3511      0000
 3512 3353 E9130800 		jmp	.L155
 3512      00
 3513              	.L184:
 3514 3358 488B85C8 		movq	-3640(%rbp), %rax
 3514      F1FFFF
 3515 335f 488D8DC8 		leaq	-3640(%rbp), %rcx
 3515      F1FFFF
 3516 3366 BA0A0000 		movl	$10, %edx
 3516      00
 3517 336b 4889CE   		movq	%rcx, %rsi
 3518 336e 4889C7   		movq	%rax, %rdi
 3519 3371 E8000000 		call	strtoul@PLT
 3519      00
 3520 3376 8885BBF1 		movb	%al, -3653(%rbp)
 3520      FFFF
 493:prog.c        **** 	SET_BIT(dataPort, dataBit, PIN_LOW, "aProgram");
 3521              		.loc 2 493 0 is_stmt 1 discriminator 1
 3522 337c 0FB695BA 		movzbl	-3654(%rbp), %edx
 3522      F1FFFF
 3523 3383 0FB685BB 		movzbl	-3653(%rbp), %eax
 3523      F1FFFF
 3524 338a 4898     		cltq
 3525 338c 4863D2   		movslq	%edx, %rdx
 3526 338f 48C1E205 		salq	$5, %rdx
 3527 3393 4801D0   		addq	%rdx, %rax
 3528 3396 8B8485D0 		movl	-3632(%rbp,%rax,4), %eax
 3528      F1FFFF
 3529 339d 85C0     		testl	%eax, %eax
 3530 339f 7472     		je	.L185
 3531 33a1 488B85C8 		movq	-3640(%rbp), %rax
 3531      F1FFFF
 3532 33a8 4889C2   		movq	%rax, %rdx
 3533 33ab 488B85A0 		movq	-3680(%rbp), %rax
 3533      F1FFFF
 3534 33b2 4829C2   		subq	%rax, %rdx
 3535 33b5 4889D0   		movq	%rdx, %rax
 3536 33b8 4883E801 		subq	$1, %rax
 3537 33bc 4889C7   		movq	%rax, %rdi
 3538 33bf E8F6CDFF 		call	spaces
 3538      FF
 3539 33c4 4889C1   		movq	%rax, %rcx
 3540 33c7 0FB695BB 		movzbl	-3653(%rbp), %edx
 3540      F1FFFF
 3541 33ce 0FB685BA 		movzbl	-3654(%rbp), %eax
 3541      F1FFFF
 3542 33d5 8D7041   		leal	65(%rax), %esi
 3543 33d8 488BBDA0 		movq	-3680(%rbp), %rdi
 3543      F1FFFF
 3544 33df 488B8588 		movq	-3704(%rbp), %rax
 3544      F1FFFF
 3545 33e6 4989C9   		movq	%rcx, %r9
 3546 33e9 4989F8   		movq	%rdi, %r8
 3547 33ec 89D1     		movl	%edx, %ecx
 3548 33ee 89F2     		movl	%esi, %edx
 3549 33f0 488D3500 		leaq	.LC27(%rip), %rsi
 3549      000000
 3550 33f7 4889C7   		movq	%rax, %rdi
 3551 33fa B8000000 		movl	$0, %eax
 3551      00
 3552 33ff E8000000 		call	errRender@PLT
 3552      00
 3553 3404 C785BCF1 		movl	$11, -3652(%rbp)
 3553      FFFF0B00 
 3553      0000
 3554 340e E9580700 		jmp	.L155
 3554      00
 3555              	.L185:
 3556              		.loc 2 493 0 is_stmt 0 discriminator 2
 3557 3413 0FB695BA 		movzbl	-3654(%rbp), %edx
 3557      F1FFFF
 3558 341a 0FB685BB 		movzbl	-3653(%rbp), %eax
 3558      F1FFFF
 3559 3421 4898     		cltq
 3560 3423 4863D2   		movslq	%edx, %rdx
 3561 3426 48C1E205 		salq	$5, %rdx
 3562 342a 4801D0   		addq	%rdx, %rax
 3563 342d C78485D0 		movl	$2, -3632(%rbp,%rax,4)
 3563      F1FFFF02 
 3563      000000
 494:prog.c        **** 
 495:prog.c        **** 	GET_CHAR("aProgram");
 3564              		.loc 2 495 0 is_stmt 1 discriminator 2
 3565 3438 488B85C8 		movq	-3640(%rbp), %rax
 3565      F1FFFF
 3566 343f 0FB600   		movzbl	(%rax), %eax
 3567 3442 8885B3F1 		movb	%al, -3661(%rbp)
 3567      FFFF
 3568 3448 80BDB3F1 		cmpb	$0, -3661(%rbp)
 3568      FFFF00
 3569 344f 7553     		jne	.L186
 3570              		.loc 2 495 0 is_stmt 0 discriminator 1
 3571 3451 488B85C8 		movq	-3640(%rbp), %rax
 3571      F1FFFF
 3572 3458 4889C2   		movq	%rax, %rdx
 3573 345b 488B85A0 		movq	-3680(%rbp), %rax
 3573      F1FFFF
 3574 3462 4829C2   		subq	%rax, %rdx
 3575 3465 4889D0   		movq	%rdx, %rax
 3576 3468 4889C7   		movq	%rax, %rdi
 3577 346b E84ACDFF 		call	spaces
 3577      FF
 3578 3470 4889C1   		movq	%rax, %rcx
 3579 3473 488B95A0 		movq	-3680(%rbp), %rdx
 3579      F1FFFF
 3580 347a 488B8588 		movq	-3704(%rbp), %rax
 3580      F1FFFF
 3581 3481 488D3500 		leaq	.LC23(%rip), %rsi
 3581      000000
 3582 3488 4889C7   		movq	%rax, %rdi
 3583 348b B8000000 		movl	$0, %eax
 3583      00
 3584 3490 E8000000 		call	errRender@PLT
 3584      00
 3585 3495 C785BCF1 		movl	$11, -3652(%rbp)
 3585      FFFF0B00 
 3585      0000
 3586 349f E9C70600 		jmp	.L155
 3586      00
 3587              	.L186:
 496:prog.c        **** 	if ( ch == '[' ) {
 3588              		.loc 2 496 0 is_stmt 1
 3589 34a4 80BDB3F1 		cmpb	$91, -3661(%rbp)
 3589      FFFF5B
 3590 34ab 0F855001 		jne	.L187
 3590      0000
 497:prog.c        **** 		ptr++;
 3591              		.loc 2 497 0
 3592 34b1 488B85C8 		movq	-3640(%rbp), %rax
 3592      F1FFFF
 3593 34b8 4883C001 		addq	$1, %rax
 3594 34bc 488985C8 		movq	%rax, -3640(%rbp)
 3594      F1FFFF
 498:prog.c        **** 		fStatus = populateMap(portConfig, ptr, &ptr, pinMap, error);
 3595              		.loc 2 498 0
 3596 34c3 488BB5C8 		movq	-3640(%rbp), %rsi
 3596      F1FFFF
 3597 34ca 488BBD88 		movq	-3704(%rbp), %rdi
 3597      F1FFFF
 3598 34d1 488D8DD0 		leaq	-3632(%rbp), %rcx
 3598      F1FFFF
 3599 34d8 488D95C8 		leaq	-3640(%rbp), %rdx
 3599      F1FFFF
 3600 34df 488B85A0 		movq	-3680(%rbp), %rax
 3600      F1FFFF
 3601 34e6 4989F8   		movq	%rdi, %r8
 3602 34e9 4889C7   		movq	%rax, %rdi
 3603 34ec E8F1CCFF 		call	populateMap
 3603      FF
 3604 34f1 8985C0F1 		movl	%eax, -3648(%rbp)
 3604      FFFF
 499:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3605              		.loc 2 499 0
 3606 34f7 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3606      FFFF00
 3607 34fe 7427     		je	.L188
 3608              		.loc 2 499 0 is_stmt 0 discriminator 1
 3609 3500 488B8588 		movq	-3704(%rbp), %rax
 3609      F1FFFF
 3610 3507 488D3500 		leaq	.LC28(%rip), %rsi
 3610      000000
 3611 350e 4889C7   		movq	%rax, %rdi
 3612 3511 E8000000 		call	errPrefix@PLT
 3612      00
 3613 3516 8B85C0F1 		movl	-3648(%rbp), %eax
 3613      FFFF
 3614 351c 8985BCF1 		movl	%eax, -3652(%rbp)
 3614      FFFF
 3615 3522 E9440600 		jmp	.L155
 3615      00
 3616              	.L188:
 500:prog.c        **** 		EXPECT_CHAR(']', "aProgram");
 3617              		.loc 2 500 0 is_stmt 1
 3618 3527 488B85C8 		movq	-3640(%rbp), %rax
 3618      F1FFFF
 3619 352e 0FB600   		movzbl	(%rax), %eax
 3620 3531 8885B3F1 		movb	%al, -3661(%rbp)
 3620      FFFF
 3621 3537 80BDB3F1 		cmpb	$0, -3661(%rbp)
 3621      FFFF00
 3622 353e 7553     		jne	.L189
 3623              		.loc 2 500 0 is_stmt 0 discriminator 1
 3624 3540 488B85C8 		movq	-3640(%rbp), %rax
 3624      F1FFFF
 3625 3547 4889C2   		movq	%rax, %rdx
 3626 354a 488B85A0 		movq	-3680(%rbp), %rax
 3626      F1FFFF
 3627 3551 4829C2   		subq	%rax, %rdx
 3628 3554 4889D0   		movq	%rdx, %rax
 3629 3557 4889C7   		movq	%rax, %rdi
 3630 355a E85BCCFF 		call	spaces
 3630      FF
 3631 355f 4889C1   		movq	%rax, %rcx
 3632 3562 488B95A0 		movq	-3680(%rbp), %rdx
 3632      F1FFFF
 3633 3569 488B8588 		movq	-3704(%rbp), %rax
 3633      F1FFFF
 3634 3570 488D3500 		leaq	.LC23(%rip), %rsi
 3634      000000
 3635 3577 4889C7   		movq	%rax, %rdi
 3636 357a B8000000 		movl	$0, %eax
 3636      00
 3637 357f E8000000 		call	errRender@PLT
 3637      00
 3638 3584 C785BCF1 		movl	$11, -3652(%rbp)
 3638      FFFF0B00 
 3638      0000
 3639 358e E9D80500 		jmp	.L155
 3639      00
 3640              	.L189:
 3641              		.loc 2 500 0 discriminator 2
 3642 3593 80BDB3F1 		cmpb	$93, -3661(%rbp)
 3642      FFFF5D
 3643 359a 7453     		je	.L190
 3644              		.loc 2 500 0 discriminator 1
 3645 359c 488B85C8 		movq	-3640(%rbp), %rax
 3645      F1FFFF
 3646 35a3 4889C2   		movq	%rax, %rdx
 3647 35a6 488B85A0 		movq	-3680(%rbp), %rax
 3647      F1FFFF
 3648 35ad 4829C2   		subq	%rax, %rdx
 3649 35b0 4889D0   		movq	%rdx, %rax
 3650 35b3 4889C7   		movq	%rax, %rdi
 3651 35b6 E8FFCBFF 		call	spaces
 3651      FF
 3652 35bb 4889C1   		movq	%rax, %rcx
 3653 35be 488B95A0 		movq	-3680(%rbp), %rdx
 3653      F1FFFF
 3654 35c5 488B8588 		movq	-3704(%rbp), %rax
 3654      F1FFFF
 3655 35cc 488D3500 		leaq	.LC29(%rip), %rsi
 3655      000000
 3656 35d3 4889C7   		movq	%rax, %rdi
 3657 35d6 B8000000 		movl	$0, %eax
 3657      00
 3658 35db E8000000 		call	errRender@PLT
 3658      00
 3659 35e0 C785BCF1 		movl	$11, -3652(%rbp)
 3659      FFFF0B00 
 3659      0000
 3660 35ea E97C0500 		jmp	.L155
 3660      00
 3661              	.L190:
 3662              		.loc 2 500 0 discriminator 2
 3663 35ef 488B85C8 		movq	-3640(%rbp), %rax
 3663      F1FFFF
 3664 35f6 4883C001 		addq	$1, %rax
 3665 35fa 488985C8 		movq	%rax, -3640(%rbp)
 3665      F1FFFF
 3666              	.L187:
 501:prog.c        **** 	}
 502:prog.c        **** 	ch = *ptr;
 3667              		.loc 2 502 0 is_stmt 1
 3668 3601 488B85C8 		movq	-3640(%rbp), %rax
 3668      F1FFFF
 3669 3608 0FB600   		movzbl	(%rax), %eax
 3670 360b 8885B3F1 		movb	%al, -3661(%rbp)
 3670      FFFF
 503:prog.c        **** 	CHECK_STATUS(
 3671              		.loc 2 503 0
 3672 3611 80BDB3F1 		cmpb	$0, -3661(%rbp)
 3672      FFFF00
 3673 3618 745C     		je	.L191
 3674              		.loc 2 503 0 is_stmt 0 discriminator 1
 3675 361a 80BDB3F1 		cmpb	$58, -3661(%rbp)
 3675      FFFF3A
 3676 3621 7453     		je	.L191
 3677 3623 488B85C8 		movq	-3640(%rbp), %rax
 3677      F1FFFF
 3678 362a 4889C2   		movq	%rax, %rdx
 3679 362d 488B85A0 		movq	-3680(%rbp), %rax
 3679      F1FFFF
 3680 3634 4829C2   		subq	%rax, %rdx
 3681 3637 4889D0   		movq	%rdx, %rax
 3682 363a 4889C7   		movq	%rax, %rdi
 3683 363d E878CBFF 		call	spaces
 3683      FF
 3684 3642 4889C1   		movq	%rax, %rcx
 3685 3645 488B95A0 		movq	-3680(%rbp), %rdx
 3685      F1FFFF
 3686 364c 488B8588 		movq	-3704(%rbp), %rax
 3686      F1FFFF
 3687 3653 488D3500 		leaq	.LC30(%rip), %rsi
 3687      000000
 3688 365a 4889C7   		movq	%rax, %rdi
 3689 365d B8000000 		movl	$0, %eax
 3689      00
 3690 3662 E8000000 		call	errRender@PLT
 3690      00
 3691 3667 C785BCF1 		movl	$11, -3652(%rbp)
 3691      FFFF0B00 
 3691      0000
 3692 3671 E9F50400 		jmp	.L155
 3692      00
 3693              	.L191:
 504:prog.c        **** 		ch != '\0' && ch != ':', FL_CONF_FORMAT, cleanup,
 505:prog.c        **** 		"aProgram(): Expecting ':' or end-of-string:\n  %s\n  %s^", portConfig, spaces(ptr-portConfig));
 506:prog.c        **** 
 507:prog.c        **** 	// Make a lookup table to swap the bits
 508:prog.c        **** 	makeLookup(bitOrder, lookupTable);
 3694              		.loc 2 508 0 is_stmt 1
 3695 3676 488D95E0 		leaq	-288(%rbp), %rdx
 3695      FEFFFF
 3696 367d 488D85D0 		leaq	-304(%rbp), %rax
 3696      FEFFFF
 3697 3684 4889D6   		movq	%rdx, %rsi
 3698 3687 4889C7   		movq	%rax, %rdi
 3699 368a E84DD0FF 		call	makeLookup
 3699      FF
 509:prog.c        **** 
 510:prog.c        **** 	// Map DCLK & DATA0
 511:prog.c        **** 	fStatus = portMap(handle, LP_SCK, dclkPort, dclkBit, error);
 3700              		.loc 2 511 0
 3701 368f 0FB68DB9 		movzbl	-3655(%rbp), %ecx
 3701      F1FFFF
 3702 3696 0FB695B8 		movzbl	-3656(%rbp), %edx
 3702      F1FFFF
 3703 369d 488BB588 		movq	-3704(%rbp), %rsi
 3703      F1FFFF
 3704 36a4 488B85A8 		movq	-3672(%rbp), %rax
 3704      F1FFFF
 3705 36ab 4989F0   		movq	%rsi, %r8
 3706 36ae BE040000 		movl	$4, %esi
 3706      00
 3707 36b3 4889C7   		movq	%rax, %rdi
 3708 36b6 E884CFFF 		call	portMap
 3708      FF
 3709 36bb 8985C0F1 		movl	%eax, -3648(%rbp)
 3709      FFFF
 512:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3710              		.loc 2 512 0
 3711 36c1 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3711      FFFF00
 3712 36c8 7427     		je	.L192
 3713              		.loc 2 512 0 is_stmt 0 discriminator 1
 3714 36ca 488B8588 		movq	-3704(%rbp), %rax
 3714      F1FFFF
 3715 36d1 488D3500 		leaq	.LC28(%rip), %rsi
 3715      000000
 3716 36d8 4889C7   		movq	%rax, %rdi
 3717 36db E8000000 		call	errPrefix@PLT
 3717      00
 3718 36e0 8B85C0F1 		movl	-3648(%rbp), %eax
 3718      FFFF
 3719 36e6 8985BCF1 		movl	%eax, -3652(%rbp)
 3719      FFFF
 3720 36ec E97A0400 		jmp	.L155
 3720      00
 3721              	.L192:
 513:prog.c        **** 	fStatus = portMap(handle, LP_MOSI, dataPort, dataBit, error);
 3722              		.loc 2 513 0 is_stmt 1
 3723 36f1 0FB68DBB 		movzbl	-3653(%rbp), %ecx
 3723      F1FFFF
 3724 36f8 0FB695BA 		movzbl	-3654(%rbp), %edx
 3724      F1FFFF
 3725 36ff 488BB588 		movq	-3704(%rbp), %rsi
 3725      F1FFFF
 3726 3706 488B85A8 		movq	-3672(%rbp), %rax
 3726      F1FFFF
 3727 370d 4989F0   		movq	%rsi, %r8
 3728 3710 BE020000 		movl	$2, %esi
 3728      00
 3729 3715 4889C7   		movq	%rax, %rdi
 3730 3718 E822CFFF 		call	portMap
 3730      FF
 3731 371d 8985C0F1 		movl	%eax, -3648(%rbp)
 3731      FFFF
 514:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3732              		.loc 2 514 0
 3733 3723 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3733      FFFF00
 3734 372a 7427     		je	.L193
 3735              		.loc 2 514 0 is_stmt 0 discriminator 1
 3736 372c 488B8588 		movq	-3704(%rbp), %rax
 3736      F1FFFF
 3737 3733 488D3500 		leaq	.LC28(%rip), %rsi
 3737      000000
 3738 373a 4889C7   		movq	%rax, %rdi
 3739 373d E8000000 		call	errPrefix@PLT
 3739      00
 3740 3742 8B85C0F1 		movl	-3648(%rbp), %eax
 3740      FFFF
 3741 3748 8985BCF1 		movl	%eax, -3652(%rbp)
 3741      FFFF
 3742 374e E9180400 		jmp	.L155
 3742      00
 3743              	.L193:
 515:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 3744              		.loc 2 515 0 is_stmt 1
 3745 3753 488B9588 		movq	-3704(%rbp), %rdx
 3745      F1FFFF
 3746 375a 488B85A8 		movq	-3672(%rbp), %rax
 3746      F1FFFF
 3747 3761 4989D0   		movq	%rdx, %r8
 3748 3764 B9000000 		movl	$0, %ecx
 3748      00
 3749 3769 BA000000 		movl	$0, %edx
 3749      00
 3750 376e BE000000 		movl	$0, %esi
 3750      00
 3751 3773 4889C7   		movq	%rax, %rdi
 3752 3776 E8C4CEFF 		call	portMap
 3752      FF
 3753 377b 8985C0F1 		movl	%eax, -3648(%rbp)
 3753      FFFF
 516:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3754              		.loc 2 516 0
 3755 3781 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3755      FFFF00
 3756 3788 7427     		je	.L194
 3757              		.loc 2 516 0 is_stmt 0 discriminator 1
 3758 378a 488B8588 		movq	-3704(%rbp), %rax
 3758      F1FFFF
 3759 3791 488D3500 		leaq	.LC28(%rip), %rsi
 3759      000000
 3760 3798 4889C7   		movq	%rax, %rdi
 3761 379b E8000000 		call	errPrefix@PLT
 3761      00
 3762 37a0 8B85C0F1 		movl	-3648(%rbp), %eax
 3762      FFFF
 3763 37a6 8985BCF1 		movl	%eax, -3652(%rbp)
 3763      FFFF
 3764 37ac E9BA0300 		jmp	.L155
 3764      00
 3765              	.L194:
 517:prog.c        **** 
 518:prog.c        **** 	// Switch to conduit mode zero (=JTAG, etc)
 519:prog.c        **** 	fStatus = flSelectConduit(handle, 0x00, error);
 3766              		.loc 2 519 0 is_stmt 1
 3767 37b1 488B9588 		movq	-3704(%rbp), %rdx
 3767      F1FFFF
 3768 37b8 488B85A8 		movq	-3672(%rbp), %rax
 3768      F1FFFF
 3769 37bf BE000000 		movl	$0, %esi
 3769      00
 3770 37c4 4889C7   		movq	%rax, %rdi
 3771 37c7 E8000000 		call	flSelectConduit@PLT
 3771      00
 3772 37cc 8985C0F1 		movl	%eax, -3648(%rbp)
 3772      FFFF
 520:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3773              		.loc 2 520 0
 3774 37d2 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3774      FFFF00
 3775 37d9 7427     		je	.L195
 3776              		.loc 2 520 0 is_stmt 0 discriminator 1
 3777 37db 488B8588 		movq	-3704(%rbp), %rax
 3777      F1FFFF
 3778 37e2 488D3500 		leaq	.LC28(%rip), %rsi
 3778      000000
 3779 37e9 4889C7   		movq	%rax, %rdi
 3780 37ec E8000000 		call	errPrefix@PLT
 3780      00
 3781 37f1 8B85C0F1 		movl	-3648(%rbp), %eax
 3781      FFFF
 3782 37f7 8985BCF1 		movl	%eax, -3652(%rbp)
 3782      FFFF
 3783 37fd E9690300 		jmp	.L155
 3783      00
 3784              	.L195:
 521:prog.c        **** 
 522:prog.c        **** 	// Apply requested configuration to each specified pin
 523:prog.c        **** 	pinMap[ncfgPort][ncfgBit] = PIN_UNUSED;
 3785              		.loc 2 523 0 is_stmt 1
 3786 3802 0FB695B4 		movzbl	-3660(%rbp), %edx
 3786      F1FFFF
 3787 3809 0FB685B5 		movzbl	-3659(%rbp), %eax
 3787      F1FFFF
 3788 3810 4898     		cltq
 3789 3812 4863D2   		movslq	%edx, %rdx
 3790 3815 48C1E205 		salq	$5, %rdx
 3791 3819 4801D0   		addq	%rdx, %rax
 3792 381c C78485D0 		movl	$0, -3632(%rbp,%rax,4)
 3792      F1FFFF00 
 3792      000000
 524:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 3793              		.loc 2 524 0
 3794 3827 C685B1F1 		movb	$0, -3663(%rbp)
 3794      FFFF00
 3795 382e E9D50000 		jmp	.L196
 3795      00
 3796              	.L200:
 525:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3797              		.loc 2 525 0
 3798 3833 C685B2F1 		movb	$0, -3662(%rbp)
 3798      FFFF00
 3799 383a E9AC0000 		jmp	.L197
 3799      00
 3800              	.L199:
 526:prog.c        **** 			thisPin = pinMap[port][bit];
 3801              		.loc 2 526 0
 3802 383f 0FB695B1 		movzbl	-3663(%rbp), %edx
 3802      F1FFFF
 3803 3846 0FB685B2 		movzbl	-3662(%rbp), %eax
 3803      F1FFFF
 3804 384d 4898     		cltq
 3805 384f 4863D2   		movslq	%edx, %rdx
 3806 3852 48C1E205 		salq	$5, %rdx
 3807 3856 4801D0   		addq	%rdx, %rax
 3808 3859 8B8485D0 		movl	-3632(%rbp,%rax,4), %eax
 3808      F1FFFF
 3809 3860 8985C4F1 		movl	%eax, -3644(%rbp)
 3809      FFFF
 527:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 3810              		.loc 2 527 0
 3811 3866 83BDC4F1 		cmpl	$0, -3644(%rbp)
 3811      FFFF00
 3812 386d 746C     		je	.L198
 528:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, thisPin, NULL, error);
 3813              		.loc 2 528 0
 3814 386f 8B85C4F1 		movl	-3644(%rbp), %eax
 3814      FFFF
 3815 3875 0FB6C8   		movzbl	%al, %ecx
 3816 3878 0FB695B2 		movzbl	-3662(%rbp), %edx
 3816      F1FFFF
 3817 387f 0FB6B5B1 		movzbl	-3663(%rbp), %esi
 3817      F1FFFF
 3818 3886 488BBD88 		movq	-3704(%rbp), %rdi
 3818      F1FFFF
 3819 388d 488B85A8 		movq	-3672(%rbp), %rax
 3819      F1FFFF
 3820 3894 4989F9   		movq	%rdi, %r9
 3821 3897 41B80000 		movl	$0, %r8d
 3821      0000
 3822 389d 4889C7   		movq	%rax, %rdi
 3823 38a0 E8000000 		call	flSingleBitPortAccess@PLT
 3823      00
 3824 38a5 8985C0F1 		movl	%eax, -3648(%rbp)
 3824      FFFF
 529:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3825              		.loc 2 529 0
 3826 38ab 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3826      FFFF00
 3827 38b2 7427     		je	.L198
 3828              		.loc 2 529 0 is_stmt 0 discriminator 1
 3829 38b4 488B8588 		movq	-3704(%rbp), %rax
 3829      F1FFFF
 3830 38bb 488D3500 		leaq	.LC28(%rip), %rsi
 3830      000000
 3831 38c2 4889C7   		movq	%rax, %rdi
 3832 38c5 E8000000 		call	errPrefix@PLT
 3832      00
 3833 38ca 8B85C0F1 		movl	-3648(%rbp), %eax
 3833      FFFF
 3834 38d0 8985BCF1 		movl	%eax, -3652(%rbp)
 3834      FFFF
 3835 38d6 E9900200 		jmp	.L155
 3835      00
 3836              	.L198:
 525:prog.c        **** 			thisPin = pinMap[port][bit];
 3837              		.loc 2 525 0 is_stmt 1
 3838 38db 0FB685B2 		movzbl	-3662(%rbp), %eax
 3838      F1FFFF
 3839 38e2 83C001   		addl	$1, %eax
 3840 38e5 8885B2F1 		movb	%al, -3662(%rbp)
 3840      FFFF
 3841              	.L197:
 525:prog.c        **** 			thisPin = pinMap[port][bit];
 3842              		.loc 2 525 0 is_stmt 0 discriminator 1
 3843 38eb 80BDB2F1 		cmpb	$31, -3662(%rbp)
 3843      FFFF1F
 3844 38f2 0F8647FF 		jbe	.L199
 3844      FFFF
 524:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3845              		.loc 2 524 0 is_stmt 1
 3846 38f8 0FB685B1 		movzbl	-3663(%rbp), %eax
 3846      F1FFFF
 3847 38ff 83C001   		addl	$1, %eax
 3848 3902 8885B1F1 		movb	%al, -3663(%rbp)
 3848      FFFF
 3849              	.L196:
 524:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3850              		.loc 2 524 0 is_stmt 0 discriminator 1
 3851 3908 80BDB1F1 		cmpb	$25, -3663(%rbp)
 3851      FFFF19
 3852 390f 0F861EFF 		jbe	.L200
 3852      FFFF
 530:prog.c        **** 			}
 531:prog.c        **** 		}
 532:prog.c        **** 	}
 533:prog.c        **** 
 534:prog.c        **** 	// Deassert nCONFIG
 535:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ncfgPort, ncfgBit, PIN_INPUT, NULL, error); // nCONFIG pul
 3853              		.loc 2 535 0 is_stmt 1
 3854 3915 0FB695B5 		movzbl	-3659(%rbp), %edx
 3854      F1FFFF
 3855 391c 0FB6B5B4 		movzbl	-3660(%rbp), %esi
 3855      F1FFFF
 3856 3923 488B8D88 		movq	-3704(%rbp), %rcx
 3856      F1FFFF
 3857 392a 488B85A8 		movq	-3672(%rbp), %rax
 3857      F1FFFF
 3858 3931 4989C9   		movq	%rcx, %r9
 3859 3934 41B80000 		movl	$0, %r8d
 3859      0000
 3860 393a B9030000 		movl	$3, %ecx
 3860      00
 3861 393f 4889C7   		movq	%rax, %rdi
 3862 3942 E8000000 		call	flSingleBitPortAccess@PLT
 3862      00
 3863 3947 8985C0F1 		movl	%eax, -3648(%rbp)
 3863      FFFF
 536:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3864              		.loc 2 536 0
 3865 394d 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3865      FFFF00
 3866 3954 7427     		je	.L201
 3867              		.loc 2 536 0 is_stmt 0 discriminator 1
 3868 3956 488B8588 		movq	-3704(%rbp), %rax
 3868      F1FFFF
 3869 395d 488D3500 		leaq	.LC28(%rip), %rsi
 3869      000000
 3870 3964 4889C7   		movq	%rax, %rdi
 3871 3967 E8000000 		call	errPrefix@PLT
 3871      00
 3872 396c 8B85C0F1 		movl	-3648(%rbp), %eax
 3872      FFFF
 3873 3972 8985BCF1 		movl	%eax, -3652(%rbp)
 3873      FFFF
 3874 3978 E9EE0100 		jmp	.L155
 3874      00
 3875              	.L201:
 537:prog.c        **** 
 538:prog.c        **** 	// Write the programming file into the FPGA
 539:prog.c        **** 	fStatus = dataWrite(handle, PROG_SPI_SEND, data, len, lookupTable, error);
 3876              		.loc 2 539 0 is_stmt 1
 3877 397d 488BBD88 		movq	-3704(%rbp), %rdi
 3877      F1FFFF
 3878 3984 488DB5E0 		leaq	-288(%rbp), %rsi
 3878      FEFFFF
 3879 398b 8B8D94F1 		movl	-3692(%rbp), %ecx
 3879      FFFF
 3880 3991 488B9598 		movq	-3688(%rbp), %rdx
 3880      F1FFFF
 3881 3998 488B85A8 		movq	-3672(%rbp), %rax
 3881      F1FFFF
 3882 399f 4989F9   		movq	%rdi, %r9
 3883 39a2 4989F0   		movq	%rsi, %r8
 3884 39a5 BE060000 		movl	$6, %esi
 3884      00
 3885 39aa 4889C7   		movq	%rax, %rdi
 3886 39ad E8E5CEFF 		call	dataWrite
 3886      FF
 3887 39b2 8985C0F1 		movl	%eax, -3648(%rbp)
 3887      FFFF
 540:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3888              		.loc 2 540 0
 3889 39b8 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3889      FFFF00
 3890 39bf 7427     		je	.L202
 3891              		.loc 2 540 0 is_stmt 0 discriminator 1
 3892 39c1 488B8588 		movq	-3704(%rbp), %rax
 3892      F1FFFF
 3893 39c8 488D3500 		leaq	.LC28(%rip), %rsi
 3893      000000
 3894 39cf 4889C7   		movq	%rax, %rdi
 3895 39d2 E8000000 		call	errPrefix@PLT
 3895      00
 3896 39d7 8B85C0F1 		movl	-3648(%rbp), %eax
 3896      FFFF
 3897 39dd 8985BCF1 		movl	%eax, -3652(%rbp)
 3897      FFFF
 3898 39e3 E9830100 		jmp	.L155
 3898      00
 3899              	.L202:
 541:prog.c        **** 
 542:prog.c        **** 	// Verify that CONF_DONE went high
 543:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, donePort, doneBit, PIN_INPUT, &doneStatus, error);
 3900              		.loc 2 543 0 is_stmt 1
 3901 39e8 0FB695B7 		movzbl	-3657(%rbp), %edx
 3901      F1FFFF
 3902 39ef 0FB6B5B6 		movzbl	-3658(%rbp), %esi
 3902      F1FFFF
 3903 39f6 488BBD88 		movq	-3704(%rbp), %rdi
 3903      F1FFFF
 3904 39fd 488D8DB0 		leaq	-3664(%rbp), %rcx
 3904      F1FFFF
 3905 3a04 488B85A8 		movq	-3672(%rbp), %rax
 3905      F1FFFF
 3906 3a0b 4989F9   		movq	%rdi, %r9
 3907 3a0e 4989C8   		movq	%rcx, %r8
 3908 3a11 B9030000 		movl	$3, %ecx
 3908      00
 3909 3a16 4889C7   		movq	%rax, %rdi
 3910 3a19 E8000000 		call	flSingleBitPortAccess@PLT
 3910      00
 3911 3a1e 8985C0F1 		movl	%eax, -3648(%rbp)
 3911      FFFF
 544:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3912              		.loc 2 544 0
 3913 3a24 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3913      FFFF00
 3914 3a2b 7427     		je	.L203
 3915              		.loc 2 544 0 is_stmt 0 discriminator 1
 3916 3a2d 488B8588 		movq	-3704(%rbp), %rax
 3916      F1FFFF
 3917 3a34 488D3500 		leaq	.LC28(%rip), %rsi
 3917      000000
 3918 3a3b 4889C7   		movq	%rax, %rdi
 3919 3a3e E8000000 		call	errPrefix@PLT
 3919      00
 3920 3a43 8B85C0F1 		movl	-3648(%rbp), %eax
 3920      FFFF
 3921 3a49 8985BCF1 		movl	%eax, -3652(%rbp)
 3921      FFFF
 3922 3a4f E9170100 		jmp	.L155
 3922      00
 3923              	.L203:
 545:prog.c        **** 	CHECK_STATUS(
 3924              		.loc 2 545 0 is_stmt 1
 3925 3a54 0FB685B0 		movzbl	-3664(%rbp), %eax
 3925      F1FFFF
 3926 3a5b 84C0     		testb	%al, %al
 3927 3a5d 7525     		jne	.L204
 3928              		.loc 2 545 0 is_stmt 0 discriminator 1
 3929 3a5f 488B8588 		movq	-3704(%rbp), %rax
 3929      F1FFFF
 3930 3a66 488D3500 		leaq	.LC31(%rip), %rsi
 3930      000000
 3931 3a6d 4889C7   		movq	%rax, %rdi
 3932 3a70 E8000000 		call	errPrefix@PLT
 3932      00
 3933 3a75 C785BCF1 		movl	$20, -3652(%rbp)
 3933      FFFF1400 
 3933      0000
 3934 3a7f E9E70000 		jmp	.L155
 3934      00
 3935              	.L204:
 546:prog.c        **** 		!doneStatus, FL_PROG_ERR, cleanup,
 547:prog.c        **** 		"aProgram(): CONF_DONE remained low (CRC error during config)");
 548:prog.c        **** 
 549:prog.c        **** 	// Make all specified pins inputs; leave CONF_DONE as input and leave nCONFIG driven high
 550:prog.c        **** 	for ( port = 0; port < 26; port++ ) {
 3936              		.loc 2 550 0 is_stmt 1
 3937 3a84 C685B1F1 		movb	$0, -3663(%rbp)
 3937      FFFF00
 3938 3a8b E9CE0000 		jmp	.L205
 3938      00
 3939              	.L209:
 551:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3940              		.loc 2 551 0
 3941 3a90 C685B2F1 		movb	$0, -3662(%rbp)
 3941      FFFF00
 3942 3a97 E9A50000 		jmp	.L206
 3942      00
 3943              	.L208:
 552:prog.c        **** 			thisPin = pinMap[port][bit];
 3944              		.loc 2 552 0
 3945 3a9c 0FB695B1 		movzbl	-3663(%rbp), %edx
 3945      F1FFFF
 3946 3aa3 0FB685B2 		movzbl	-3662(%rbp), %eax
 3946      F1FFFF
 3947 3aaa 4898     		cltq
 3948 3aac 4863D2   		movslq	%edx, %rdx
 3949 3aaf 48C1E205 		salq	$5, %rdx
 3950 3ab3 4801D0   		addq	%rdx, %rax
 3951 3ab6 8B8485D0 		movl	-3632(%rbp,%rax,4), %eax
 3951      F1FFFF
 3952 3abd 8985C4F1 		movl	%eax, -3644(%rbp)
 3952      FFFF
 553:prog.c        **** 			if ( thisPin != PIN_UNUSED ) {
 3953              		.loc 2 553 0
 3954 3ac3 83BDC4F1 		cmpl	$0, -3644(%rbp)
 3954      FFFF00
 3955 3aca 7465     		je	.L207
 554:prog.c        **** 				fStatus = flSingleBitPortAccess(handle, port, bit, PIN_INPUT, NULL, error);
 3956              		.loc 2 554 0
 3957 3acc 0FB695B2 		movzbl	-3662(%rbp), %edx
 3957      F1FFFF
 3958 3ad3 0FB6B5B1 		movzbl	-3663(%rbp), %esi
 3958      F1FFFF
 3959 3ada 488B8D88 		movq	-3704(%rbp), %rcx
 3959      F1FFFF
 3960 3ae1 488B85A8 		movq	-3672(%rbp), %rax
 3960      F1FFFF
 3961 3ae8 4989C9   		movq	%rcx, %r9
 3962 3aeb 41B80000 		movl	$0, %r8d
 3962      0000
 3963 3af1 B9030000 		movl	$3, %ecx
 3963      00
 3964 3af6 4889C7   		movq	%rax, %rdi
 3965 3af9 E8000000 		call	flSingleBitPortAccess@PLT
 3965      00
 3966 3afe 8985C0F1 		movl	%eax, -3648(%rbp)
 3966      FFFF
 555:prog.c        **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "aProgram()");
 3967              		.loc 2 555 0
 3968 3b04 83BDC0F1 		cmpl	$0, -3648(%rbp)
 3968      FFFF00
 3969 3b0b 7424     		je	.L207
 3970              		.loc 2 555 0 is_stmt 0 discriminator 1
 3971 3b0d 488B8588 		movq	-3704(%rbp), %rax
 3971      F1FFFF
 3972 3b14 488D3500 		leaq	.LC28(%rip), %rsi
 3972      000000
 3973 3b1b 4889C7   		movq	%rax, %rdi
 3974 3b1e E8000000 		call	errPrefix@PLT
 3974      00
 3975 3b23 8B85C0F1 		movl	-3648(%rbp), %eax
 3975      FFFF
 3976 3b29 8985BCF1 		movl	%eax, -3652(%rbp)
 3976      FFFF
 3977 3b2f EB3A     		jmp	.L155
 3978              	.L207:
 551:prog.c        **** 			thisPin = pinMap[port][bit];
 3979              		.loc 2 551 0 is_stmt 1
 3980 3b31 0FB685B2 		movzbl	-3662(%rbp), %eax
 3980      F1FFFF
 3981 3b38 83C001   		addl	$1, %eax
 3982 3b3b 8885B2F1 		movb	%al, -3662(%rbp)
 3982      FFFF
 3983              	.L206:
 551:prog.c        **** 			thisPin = pinMap[port][bit];
 3984              		.loc 2 551 0 is_stmt 0 discriminator 1
 3985 3b41 80BDB2F1 		cmpb	$31, -3662(%rbp)
 3985      FFFF1F
 3986 3b48 0F864EFF 		jbe	.L208
 3986      FFFF
 550:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3987              		.loc 2 550 0 is_stmt 1
 3988 3b4e 0FB685B1 		movzbl	-3663(%rbp), %eax
 3988      F1FFFF
 3989 3b55 83C001   		addl	$1, %eax
 3990 3b58 8885B1F1 		movb	%al, -3663(%rbp)
 3990      FFFF
 3991              	.L205:
 550:prog.c        **** 		for ( bit = 0; bit < 32; bit++ ) {
 3992              		.loc 2 550 0 is_stmt 0 discriminator 1
 3993 3b5e 80BDB1F1 		cmpb	$25, -3663(%rbp)
 3993      FFFF19
 3994 3b65 0F8625FF 		jbe	.L209
 3994      FFFF
 3995              	.L155:
 556:prog.c        **** 			}
 557:prog.c        **** 		}
 558:prog.c        **** 	}
 559:prog.c        **** cleanup:
 560:prog.c        **** 	return retVal;
 3996              		.loc 2 560 0 is_stmt 1
 3997 3b6b 8B85BCF1 		movl	-3652(%rbp), %eax
 3997      FFFF
 561:prog.c        **** }
 3998              		.loc 2 561 0
 3999 3b71 488B5DE8 		movq	-24(%rbp), %rbx
 4000 3b75 6448331C 		xorq	%fs:40, %rbx
 4000      25280000 
 4000      00
 4001 3b7e 7405     		je	.L211
 4002 3b80 E8000000 		call	__stack_chk_fail@PLT
 4002      00
 4003              	.L211:
 4004 3b85 4881C478 		addq	$3704, %rsp
 4004      0E0000
 4005 3b8c 5B       		popq	%rbx
 4006 3b8d 5D       		popq	%rbp
 4007              		.cfi_def_cfa 7, 8
 4008 3b8e C3       		ret
 4009              		.cfi_endproc
 4010              	.LFE13:
 4012              		.section	.rodata
 4013 0655 000000   		.align 8
 4014              	.LC32:
 4015 0658 70726F67 		.string	"progOpen(): Unexpected end of config string:\n  %s\n  %s^"
 4015      4F70656E 
 4015      28293A20 
 4015      556E6578 
 4015      70656374 
 4016              		.align 8
 4017              	.LC33:
 4018 0690 70726F67 		.string	"progOpen(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 4018      4F70656E 
 4018      28293A20 
 4018      506F7274 
 4018      20697320 
 4019 06d3 00000000 		.align 8
 4019      00
 4020              	.LC34:
 4021 06d8 70726F67 		.string	"progOpen(): Bit number is not valid:\n  %s\n  %s^"
 4021      4F70656E 
 4021      28293A20 
 4021      42697420 
 4021      6E756D62 
 4022              		.align 8
 4023              	.LC35:
 4024 0708 70726F67 		.string	"progOpen(): port '%c%d' is already used:\n  %s\n  %s^"
 4024      4F70656E 
 4024      28293A20 
 4024      706F7274 
 4024      20272563 
 4025              	.LC36:
 4026 073c 70726F67 		.string	"progOpen()"
 4026      4F70656E 
 4026      282900
 4027              		.text
 4029              	progOpenInternal:
 4030              	.LFB14:
 562:prog.c        **** 
 563:prog.c        **** static FLStatus progOpenInternal(struct FLContext *handle, const char *portConfig, const char *ptr,
 4031              		.loc 2 563 0
 4032              		.cfi_startproc
 4033 3b8f 55       		pushq	%rbp
 4034              		.cfi_def_cfa_offset 16
 4035              		.cfi_offset 6, -16
 4036 3b90 4889E5   		movq	%rsp, %rbp
 4037              		.cfi_def_cfa_register 6
 4038 3b93 4881EC40 		subq	$3392, %rsp
 4038      0D0000
 4039 3b9a 4889BDD8 		movq	%rdi, -3368(%rbp)
 4039      F2FFFF
 4040 3ba1 4889B5D0 		movq	%rsi, -3376(%rbp)
 4040      F2FFFF
 4041 3ba8 488995C8 		movq	%rdx, -3384(%rbp)
 4041      F2FFFF
 4042 3baf 48898DC0 		movq	%rcx, -3392(%rbp)
 4042      F2FFFF
 564:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 4043              		.loc 2 564 0
 4044 3bb6 C785F8F2 		movl	$0, -3336(%rbp)
 4044      FFFF0000 
 4044      0000
 565:prog.c        **** 	FLStatus fStatus;
 566:prog.c        **** 	uint8 misoPort, misoBit;
 567:prog.c        **** 	uint8 mosiPort, mosiBit;
 568:prog.c        **** 	uint8 ssPort, ssBit;
 569:prog.c        **** 	uint8 sckPort, sckBit;
 570:prog.c        **** 	PinConfig pinMap[26][32] = {{0,},};
 4045              		.loc 2 570 0
 4046 3bc0 488DB500 		leaq	-3328(%rbp), %rsi
 4046      F3FFFF
 4047 3bc7 B8000000 		movl	$0, %eax
 4047      00
 4048 3bcc BAA00100 		movl	$416, %edx
 4048      00
 4049 3bd1 4889F7   		movq	%rsi, %rdi
 4050 3bd4 4889D1   		movq	%rdx, %rcx
 4051 3bd7 F348AB   		rep stosq
 571:prog.c        **** 	char ch;
 572:prog.c        **** 
 573:prog.c        **** 	// Get all four JTAG bits and tell the micro which ones to use
 574:prog.c        **** 	GET_PAIR(misoPort, misoBit, "progOpen");        // MISO/TDO
 4052              		.loc 2 574 0
 4053 3bda 488B85C8 		movq	-3384(%rbp), %rax
 4053      F2FFFF
 4054 3be1 0FB600   		movzbl	(%rax), %eax
 4055 3be4 8885EFF2 		movb	%al, -3345(%rbp)
 4055      FFFF
 4056 3bea 80BDEFF2 		cmpb	$0, -3345(%rbp)
 4056      FFFF00
 4057 3bf1 7553     		jne	.L213
 4058              		.loc 2 574 0 is_stmt 0 discriminator 1
 4059 3bf3 488B85C8 		movq	-3384(%rbp), %rax
 4059      F2FFFF
 4060 3bfa 4889C2   		movq	%rax, %rdx
 4061 3bfd 488B85D0 		movq	-3376(%rbp), %rax
 4061      F2FFFF
 4062 3c04 4829C2   		subq	%rax, %rdx
 4063 3c07 4889D0   		movq	%rdx, %rax
 4064 3c0a 4889C7   		movq	%rax, %rdi
 4065 3c0d E8A8C5FF 		call	spaces
 4065      FF
 4066 3c12 4889C1   		movq	%rax, %rcx
 4067 3c15 488B95D0 		movq	-3376(%rbp), %rdx
 4067      F2FFFF
 4068 3c1c 488B85C0 		movq	-3392(%rbp), %rax
 4068      F2FFFF
 4069 3c23 488D3500 		leaq	.LC32(%rip), %rsi
 4069      000000
 4070 3c2a 4889C7   		movq	%rax, %rdi
 4071 3c2d B8000000 		movl	$0, %eax
 4071      00
 4072 3c32 E8000000 		call	errRender@PLT
 4072      00
 4073 3c37 C785F8F2 		movl	$11, -3336(%rbp)
 4073      FFFF0B00 
 4073      0000
 4074 3c41 E9320E00 		jmp	.L214
 4074      00
 4075              	.L213:
 4076              		.loc 2 574 0 discriminator 2
 4077 3c46 80BDEFF2 		cmpb	$64, -3345(%rbp)
 4077      FFFF40
 4078 3c4d 7E09     		jle	.L215
 4079 3c4f 80BDEFF2 		cmpb	$90, -3345(%rbp)
 4079      FFFF5A
 4080 3c56 7E53     		jle	.L216
 4081              	.L215:
 4082              		.loc 2 574 0 discriminator 1
 4083 3c58 488B85C8 		movq	-3384(%rbp), %rax
 4083      F2FFFF
 4084 3c5f 4889C2   		movq	%rax, %rdx
 4085 3c62 488B85D0 		movq	-3376(%rbp), %rax
 4085      F2FFFF
 4086 3c69 4829C2   		subq	%rax, %rdx
 4087 3c6c 4889D0   		movq	%rdx, %rax
 4088 3c6f 4889C7   		movq	%rax, %rdi
 4089 3c72 E843C5FF 		call	spaces
 4089      FF
 4090 3c77 4889C1   		movq	%rax, %rcx
 4091 3c7a 488B95D0 		movq	-3376(%rbp), %rdx
 4091      F2FFFF
 4092 3c81 488B85C0 		movq	-3392(%rbp), %rax
 4092      F2FFFF
 4093 3c88 488D3500 		leaq	.LC33(%rip), %rsi
 4093      000000
 4094 3c8f 4889C7   		movq	%rax, %rdi
 4095 3c92 B8000000 		movl	$0, %eax
 4095      00
 4096 3c97 E8000000 		call	errRender@PLT
 4096      00
 4097 3c9c C785F8F2 		movl	$11, -3336(%rbp)
 4097      FFFF0B00 
 4097      0000
 4098 3ca6 E9CD0D00 		jmp	.L214
 4098      00
 4099              	.L216:
 4100 3cab 0FB685EF 		movzbl	-3345(%rbp), %eax
 4100      F2FFFF
 4101 3cb2 83E841   		subl	$65, %eax
 4102 3cb5 8885F0F2 		movb	%al, -3344(%rbp)
 4102      FFFF
 4103 3cbb 488B85C8 		movq	-3384(%rbp), %rax
 4103      F2FFFF
 4104 3cc2 4883C001 		addq	$1, %rax
 4105 3cc6 488985C8 		movq	%rax, -3384(%rbp)
 4105      F2FFFF
 4106 3ccd 488B85C8 		movq	-3384(%rbp), %rax
 4106      F2FFFF
 4107 3cd4 0FB600   		movzbl	(%rax), %eax
 4108 3cd7 8885EFF2 		movb	%al, -3345(%rbp)
 4108      FFFF
 4109 3cdd 80BDEFF2 		cmpb	$0, -3345(%rbp)
 4109      FFFF00
 4110 3ce4 7553     		jne	.L217
 4111 3ce6 488B85C8 		movq	-3384(%rbp), %rax
 4111      F2FFFF
 4112 3ced 4889C2   		movq	%rax, %rdx
 4113 3cf0 488B85D0 		movq	-3376(%rbp), %rax
 4113      F2FFFF
 4114 3cf7 4829C2   		subq	%rax, %rdx
 4115 3cfa 4889D0   		movq	%rdx, %rax
 4116 3cfd 4889C7   		movq	%rax, %rdi
 4117 3d00 E8B5C4FF 		call	spaces
 4117      FF
 4118 3d05 4889C1   		movq	%rax, %rcx
 4119 3d08 488B95D0 		movq	-3376(%rbp), %rdx
 4119      F2FFFF
 4120 3d0f 488B85C0 		movq	-3392(%rbp), %rax
 4120      F2FFFF
 4121 3d16 488D3500 		leaq	.LC32(%rip), %rsi
 4121      000000
 4122 3d1d 4889C7   		movq	%rax, %rdi
 4123 3d20 B8000000 		movl	$0, %eax
 4123      00
 4124 3d25 E8000000 		call	errRender@PLT
 4124      00
 4125 3d2a C785F8F2 		movl	$11, -3336(%rbp)
 4125      FFFF0B00 
 4125      0000
 4126 3d34 E93F0D00 		jmp	.L214
 4126      00
 4127              	.L217:
 4128              		.loc 2 574 0 discriminator 2
 4129 3d39 80BDEFF2 		cmpb	$47, -3345(%rbp)
 4129      FFFF2F
 4130 3d40 7E09     		jle	.L218
 4131 3d42 80BDEFF2 		cmpb	$57, -3345(%rbp)
 4131      FFFF39
 4132 3d49 7E53     		jle	.L219
 4133              	.L218:
 4134              		.loc 2 574 0 discriminator 1
 4135 3d4b 488B85C8 		movq	-3384(%rbp), %rax
 4135      F2FFFF
 4136 3d52 4889C2   		movq	%rax, %rdx
 4137 3d55 488B85D0 		movq	-3376(%rbp), %rax
 4137      F2FFFF
 4138 3d5c 4829C2   		subq	%rax, %rdx
 4139 3d5f 4889D0   		movq	%rdx, %rax
 4140 3d62 4889C7   		movq	%rax, %rdi
 4141 3d65 E850C4FF 		call	spaces
 4141      FF
 4142 3d6a 4889C1   		movq	%rax, %rcx
 4143 3d6d 488B95D0 		movq	-3376(%rbp), %rdx
 4143      F2FFFF
 4144 3d74 488B85C0 		movq	-3392(%rbp), %rax
 4144      F2FFFF
 4145 3d7b 488D3500 		leaq	.LC34(%rip), %rsi
 4145      000000
 4146 3d82 4889C7   		movq	%rax, %rdi
 4147 3d85 B8000000 		movl	$0, %eax
 4147      00
 4148 3d8a E8000000 		call	errRender@PLT
 4148      00
 4149 3d8f C785F8F2 		movl	$11, -3336(%rbp)
 4149      FFFF0B00 
 4149      0000
 4150 3d99 E9DA0C00 		jmp	.L214
 4150      00
 4151              	.L219:
 4152 3d9e 488B85C8 		movq	-3384(%rbp), %rax
 4152      F2FFFF
 4153 3da5 488D8DC8 		leaq	-3384(%rbp), %rcx
 4153      F2FFFF
 4154 3dac BA0A0000 		movl	$10, %edx
 4154      00
 4155 3db1 4889CE   		movq	%rcx, %rsi
 4156 3db4 4889C7   		movq	%rax, %rdi
 4157 3db7 E8000000 		call	strtoul@PLT
 4157      00
 4158 3dbc 8885F1F2 		movb	%al, -3343(%rbp)
 4158      FFFF
 575:prog.c        **** 	SET_BIT(misoPort, misoBit, PIN_INPUT, "progOpen");
 4159              		.loc 2 575 0 is_stmt 1 discriminator 1
 4160 3dc2 0FB695F0 		movzbl	-3344(%rbp), %edx
 4160      F2FFFF
 4161 3dc9 0FB685F1 		movzbl	-3343(%rbp), %eax
 4161      F2FFFF
 4162 3dd0 4898     		cltq
 4163 3dd2 4863D2   		movslq	%edx, %rdx
 4164 3dd5 48C1E205 		salq	$5, %rdx
 4165 3dd9 4801D0   		addq	%rdx, %rax
 4166 3ddc 8B848500 		movl	-3328(%rbp,%rax,4), %eax
 4166      F3FFFF
 4167 3de3 85C0     		testl	%eax, %eax
 4168 3de5 7472     		je	.L220
 4169 3de7 488B85C8 		movq	-3384(%rbp), %rax
 4169      F2FFFF
 4170 3dee 4889C2   		movq	%rax, %rdx
 4171 3df1 488B85D0 		movq	-3376(%rbp), %rax
 4171      F2FFFF
 4172 3df8 4829C2   		subq	%rax, %rdx
 4173 3dfb 4889D0   		movq	%rdx, %rax
 4174 3dfe 4883E801 		subq	$1, %rax
 4175 3e02 4889C7   		movq	%rax, %rdi
 4176 3e05 E8B0C3FF 		call	spaces
 4176      FF
 4177 3e0a 4889C1   		movq	%rax, %rcx
 4178 3e0d 0FB695F1 		movzbl	-3343(%rbp), %edx
 4178      F2FFFF
 4179 3e14 0FB685F0 		movzbl	-3344(%rbp), %eax
 4179      F2FFFF
 4180 3e1b 8D7041   		leal	65(%rax), %esi
 4181 3e1e 488BBDD0 		movq	-3376(%rbp), %rdi
 4181      F2FFFF
 4182 3e25 488B85C0 		movq	-3392(%rbp), %rax
 4182      F2FFFF
 4183 3e2c 4989C9   		movq	%rcx, %r9
 4184 3e2f 4989F8   		movq	%rdi, %r8
 4185 3e32 89D1     		movl	%edx, %ecx
 4186 3e34 89F2     		movl	%esi, %edx
 4187 3e36 488D3500 		leaq	.LC35(%rip), %rsi
 4187      000000
 4188 3e3d 4889C7   		movq	%rax, %rdi
 4189 3e40 B8000000 		movl	$0, %eax
 4189      00
 4190 3e45 E8000000 		call	errRender@PLT
 4190      00
 4191 3e4a C785F8F2 		movl	$11, -3336(%rbp)
 4191      FFFF0B00 
 4191      0000
 4192 3e54 E91F0C00 		jmp	.L214
 4192      00
 4193              	.L220:
 4194              		.loc 2 575 0 is_stmt 0 discriminator 2
 4195 3e59 0FB695F0 		movzbl	-3344(%rbp), %edx
 4195      F2FFFF
 4196 3e60 0FB685F1 		movzbl	-3343(%rbp), %eax
 4196      F2FFFF
 4197 3e67 4898     		cltq
 4198 3e69 4863D2   		movslq	%edx, %rdx
 4199 3e6c 48C1E205 		salq	$5, %rdx
 4200 3e70 4801D0   		addq	%rdx, %rax
 4201 3e73 C7848500 		movl	$3, -3328(%rbp,%rax,4)
 4201      F3FFFF03 
 4201      000000
 576:prog.c        **** 	fStatus = portMap(handle, LP_MISO, misoPort, misoBit, error);
 4202              		.loc 2 576 0 is_stmt 1 discriminator 2
 4203 3e7e 0FB68DF1 		movzbl	-3343(%rbp), %ecx
 4203      F2FFFF
 4204 3e85 0FB695F0 		movzbl	-3344(%rbp), %edx
 4204      F2FFFF
 4205 3e8c 488BB5C0 		movq	-3392(%rbp), %rsi
 4205      F2FFFF
 4206 3e93 488B85D8 		movq	-3368(%rbp), %rax
 4206      F2FFFF
 4207 3e9a 4989F0   		movq	%rsi, %r8
 4208 3e9d BE010000 		movl	$1, %esi
 4208      00
 4209 3ea2 4889C7   		movq	%rax, %rdi
 4210 3ea5 E895C7FF 		call	portMap
 4210      FF
 4211 3eaa 8985FCF2 		movl	%eax, -3332(%rbp)
 4211      FFFF
 577:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4212              		.loc 2 577 0 discriminator 2
 4213 3eb0 83BDFCF2 		cmpl	$0, -3332(%rbp)
 4213      FFFF00
 4214 3eb7 7427     		je	.L221
 4215              		.loc 2 577 0 is_stmt 0 discriminator 1
 4216 3eb9 488B85C0 		movq	-3392(%rbp), %rax
 4216      F2FFFF
 4217 3ec0 488D3500 		leaq	.LC36(%rip), %rsi
 4217      000000
 4218 3ec7 4889C7   		movq	%rax, %rdi
 4219 3eca E8000000 		call	errPrefix@PLT
 4219      00
 4220 3ecf 8B85FCF2 		movl	-3332(%rbp), %eax
 4220      FFFF
 4221 3ed5 8985F8F2 		movl	%eax, -3336(%rbp)
 4221      FFFF
 4222 3edb E9980B00 		jmp	.L214
 4222      00
 4223              	.L221:
 578:prog.c        **** 
 579:prog.c        **** 	GET_PAIR(mosiPort, mosiBit, "progOpen");        // MOSI/TDI
 4224              		.loc 2 579 0 is_stmt 1
 4225 3ee0 488B85C8 		movq	-3384(%rbp), %rax
 4225      F2FFFF
 4226 3ee7 0FB600   		movzbl	(%rax), %eax
 4227 3eea 8885EFF2 		movb	%al, -3345(%rbp)
 4227      FFFF
 4228 3ef0 80BDEFF2 		cmpb	$0, -3345(%rbp)
 4228      FFFF00
 4229 3ef7 7553     		jne	.L222
 4230              		.loc 2 579 0 is_stmt 0 discriminator 1
 4231 3ef9 488B85C8 		movq	-3384(%rbp), %rax
 4231      F2FFFF
 4232 3f00 4889C2   		movq	%rax, %rdx
 4233 3f03 488B85D0 		movq	-3376(%rbp), %rax
 4233      F2FFFF
 4234 3f0a 4829C2   		subq	%rax, %rdx
 4235 3f0d 4889D0   		movq	%rdx, %rax
 4236 3f10 4889C7   		movq	%rax, %rdi
 4237 3f13 E8A2C2FF 		call	spaces
 4237      FF
 4238 3f18 4889C1   		movq	%rax, %rcx
 4239 3f1b 488B95D0 		movq	-3376(%rbp), %rdx
 4239      F2FFFF
 4240 3f22 488B85C0 		movq	-3392(%rbp), %rax
 4240      F2FFFF
 4241 3f29 488D3500 		leaq	.LC32(%rip), %rsi
 4241      000000
 4242 3f30 4889C7   		movq	%rax, %rdi
 4243 3f33 B8000000 		movl	$0, %eax
 4243      00
 4244 3f38 E8000000 		call	errRender@PLT
 4244      00
 4245 3f3d C785F8F2 		movl	$11, -3336(%rbp)
 4245      FFFF0B00 
 4245      0000
 4246 3f47 E92C0B00 		jmp	.L214
 4246      00
 4247              	.L222:
 4248              		.loc 2 579 0 discriminator 2
 4249 3f4c 80BDEFF2 		cmpb	$64, -3345(%rbp)
 4249      FFFF40
 4250 3f53 7E09     		jle	.L223
 4251 3f55 80BDEFF2 		cmpb	$90, -3345(%rbp)
 4251      FFFF5A
 4252 3f5c 7E53     		jle	.L224
 4253              	.L223:
 4254              		.loc 2 579 0 discriminator 1
 4255 3f5e 488B85C8 		movq	-3384(%rbp), %rax
 4255      F2FFFF
 4256 3f65 4889C2   		movq	%rax, %rdx
 4257 3f68 488B85D0 		movq	-3376(%rbp), %rax
 4257      F2FFFF
 4258 3f6f 4829C2   		subq	%rax, %rdx
 4259 3f72 4889D0   		movq	%rdx, %rax
 4260 3f75 4889C7   		movq	%rax, %rdi
 4261 3f78 E83DC2FF 		call	spaces
 4261      FF
 4262 3f7d 4889C1   		movq	%rax, %rcx
 4263 3f80 488B95D0 		movq	-3376(%rbp), %rdx
 4263      F2FFFF
 4264 3f87 488B85C0 		movq	-3392(%rbp), %rax
 4264      F2FFFF
 4265 3f8e 488D3500 		leaq	.LC33(%rip), %rsi
 4265      000000
 4266 3f95 4889C7   		movq	%rax, %rdi
 4267 3f98 B8000000 		movl	$0, %eax
 4267      00
 4268 3f9d E8000000 		call	errRender@PLT
 4268      00
 4269 3fa2 C785F8F2 		movl	$11, -3336(%rbp)
 4269      FFFF0B00 
 4269      0000
 4270 3fac E9C70A00 		jmp	.L214
 4270      00
 4271              	.L224:
 4272 3fb1 0FB685EF 		movzbl	-3345(%rbp), %eax
 4272      F2FFFF
 4273 3fb8 83E841   		subl	$65, %eax
 4274 3fbb 8885F2F2 		movb	%al, -3342(%rbp)
 4274      FFFF
 4275 3fc1 488B85C8 		movq	-3384(%rbp), %rax
 4275      F2FFFF
 4276 3fc8 4883C001 		addq	$1, %rax
 4277 3fcc 488985C8 		movq	%rax, -3384(%rbp)
 4277      F2FFFF
 4278 3fd3 488B85C8 		movq	-3384(%rbp), %rax
 4278      F2FFFF
 4279 3fda 0FB600   		movzbl	(%rax), %eax
 4280 3fdd 8885EFF2 		movb	%al, -3345(%rbp)
 4280      FFFF
 4281 3fe3 80BDEFF2 		cmpb	$0, -3345(%rbp)
 4281      FFFF00
 4282 3fea 7553     		jne	.L225
 4283 3fec 488B85C8 		movq	-3384(%rbp), %rax
 4283      F2FFFF
 4284 3ff3 4889C2   		movq	%rax, %rdx
 4285 3ff6 488B85D0 		movq	-3376(%rbp), %rax
 4285      F2FFFF
 4286 3ffd 4829C2   		subq	%rax, %rdx
 4287 4000 4889D0   		movq	%rdx, %rax
 4288 4003 4889C7   		movq	%rax, %rdi
 4289 4006 E8AFC1FF 		call	spaces
 4289      FF
 4290 400b 4889C1   		movq	%rax, %rcx
 4291 400e 488B95D0 		movq	-3376(%rbp), %rdx
 4291      F2FFFF
 4292 4015 488B85C0 		movq	-3392(%rbp), %rax
 4292      F2FFFF
 4293 401c 488D3500 		leaq	.LC32(%rip), %rsi
 4293      000000
 4294 4023 4889C7   		movq	%rax, %rdi
 4295 4026 B8000000 		movl	$0, %eax
 4295      00
 4296 402b E8000000 		call	errRender@PLT
 4296      00
 4297 4030 C785F8F2 		movl	$11, -3336(%rbp)
 4297      FFFF0B00 
 4297      0000
 4298 403a E9390A00 		jmp	.L214
 4298      00
 4299              	.L225:
 4300              		.loc 2 579 0 discriminator 2
 4301 403f 80BDEFF2 		cmpb	$47, -3345(%rbp)
 4301      FFFF2F
 4302 4046 7E09     		jle	.L226
 4303 4048 80BDEFF2 		cmpb	$57, -3345(%rbp)
 4303      FFFF39
 4304 404f 7E53     		jle	.L227
 4305              	.L226:
 4306              		.loc 2 579 0 discriminator 1
 4307 4051 488B85C8 		movq	-3384(%rbp), %rax
 4307      F2FFFF
 4308 4058 4889C2   		movq	%rax, %rdx
 4309 405b 488B85D0 		movq	-3376(%rbp), %rax
 4309      F2FFFF
 4310 4062 4829C2   		subq	%rax, %rdx
 4311 4065 4889D0   		movq	%rdx, %rax
 4312 4068 4889C7   		movq	%rax, %rdi
 4313 406b E84AC1FF 		call	spaces
 4313      FF
 4314 4070 4889C1   		movq	%rax, %rcx
 4315 4073 488B95D0 		movq	-3376(%rbp), %rdx
 4315      F2FFFF
 4316 407a 488B85C0 		movq	-3392(%rbp), %rax
 4316      F2FFFF
 4317 4081 488D3500 		leaq	.LC34(%rip), %rsi
 4317      000000
 4318 4088 4889C7   		movq	%rax, %rdi
 4319 408b B8000000 		movl	$0, %eax
 4319      00
 4320 4090 E8000000 		call	errRender@PLT
 4320      00
 4321 4095 C785F8F2 		movl	$11, -3336(%rbp)
 4321      FFFF0B00 
 4321      0000
 4322 409f E9D40900 		jmp	.L214
 4322      00
 4323              	.L227:
 4324 40a4 488B85C8 		movq	-3384(%rbp), %rax
 4324      F2FFFF
 4325 40ab 488D8DC8 		leaq	-3384(%rbp), %rcx
 4325      F2FFFF
 4326 40b2 BA0A0000 		movl	$10, %edx
 4326      00
 4327 40b7 4889CE   		movq	%rcx, %rsi
 4328 40ba 4889C7   		movq	%rax, %rdi
 4329 40bd E8000000 		call	strtoul@PLT
 4329      00
 4330 40c2 8885F3F2 		movb	%al, -3341(%rbp)
 4330      FFFF
 580:prog.c        **** 	SET_BIT(mosiPort, mosiBit, PIN_LOW, "progOpen");
 4331              		.loc 2 580 0 is_stmt 1 discriminator 1
 4332 40c8 0FB695F2 		movzbl	-3342(%rbp), %edx
 4332      F2FFFF
 4333 40cf 0FB685F3 		movzbl	-3341(%rbp), %eax
 4333      F2FFFF
 4334 40d6 4898     		cltq
 4335 40d8 4863D2   		movslq	%edx, %rdx
 4336 40db 48C1E205 		salq	$5, %rdx
 4337 40df 4801D0   		addq	%rdx, %rax
 4338 40e2 8B848500 		movl	-3328(%rbp,%rax,4), %eax
 4338      F3FFFF
 4339 40e9 85C0     		testl	%eax, %eax
 4340 40eb 7472     		je	.L228
 4341 40ed 488B85C8 		movq	-3384(%rbp), %rax
 4341      F2FFFF
 4342 40f4 4889C2   		movq	%rax, %rdx
 4343 40f7 488B85D0 		movq	-3376(%rbp), %rax
 4343      F2FFFF
 4344 40fe 4829C2   		subq	%rax, %rdx
 4345 4101 4889D0   		movq	%rdx, %rax
 4346 4104 4883E801 		subq	$1, %rax
 4347 4108 4889C7   		movq	%rax, %rdi
 4348 410b E8AAC0FF 		call	spaces
 4348      FF
 4349 4110 4889C1   		movq	%rax, %rcx
 4350 4113 0FB695F3 		movzbl	-3341(%rbp), %edx
 4350      F2FFFF
 4351 411a 0FB685F2 		movzbl	-3342(%rbp), %eax
 4351      F2FFFF
 4352 4121 8D7041   		leal	65(%rax), %esi
 4353 4124 488BBDD0 		movq	-3376(%rbp), %rdi
 4353      F2FFFF
 4354 412b 488B85C0 		movq	-3392(%rbp), %rax
 4354      F2FFFF
 4355 4132 4989C9   		movq	%rcx, %r9
 4356 4135 4989F8   		movq	%rdi, %r8
 4357 4138 89D1     		movl	%edx, %ecx
 4358 413a 89F2     		movl	%esi, %edx
 4359 413c 488D3500 		leaq	.LC35(%rip), %rsi
 4359      000000
 4360 4143 4889C7   		movq	%rax, %rdi
 4361 4146 B8000000 		movl	$0, %eax
 4361      00
 4362 414b E8000000 		call	errRender@PLT
 4362      00
 4363 4150 C785F8F2 		movl	$11, -3336(%rbp)
 4363      FFFF0B00 
 4363      0000
 4364 415a E9190900 		jmp	.L214
 4364      00
 4365              	.L228:
 4366              		.loc 2 580 0 is_stmt 0 discriminator 2
 4367 415f 0FB695F2 		movzbl	-3342(%rbp), %edx
 4367      F2FFFF
 4368 4166 0FB685F3 		movzbl	-3341(%rbp), %eax
 4368      F2FFFF
 4369 416d 4898     		cltq
 4370 416f 4863D2   		movslq	%edx, %rdx
 4371 4172 48C1E205 		salq	$5, %rdx
 4372 4176 4801D0   		addq	%rdx, %rax
 4373 4179 C7848500 		movl	$2, -3328(%rbp,%rax,4)
 4373      F3FFFF02 
 4373      000000
 581:prog.c        **** 	fStatus = portMap(handle, LP_MOSI, mosiPort, mosiBit, error);
 4374              		.loc 2 581 0 is_stmt 1 discriminator 2
 4375 4184 0FB68DF3 		movzbl	-3341(%rbp), %ecx
 4375      F2FFFF
 4376 418b 0FB695F2 		movzbl	-3342(%rbp), %edx
 4376      F2FFFF
 4377 4192 488BB5C0 		movq	-3392(%rbp), %rsi
 4377      F2FFFF
 4378 4199 488B85D8 		movq	-3368(%rbp), %rax
 4378      F2FFFF
 4379 41a0 4989F0   		movq	%rsi, %r8
 4380 41a3 BE020000 		movl	$2, %esi
 4380      00
 4381 41a8 4889C7   		movq	%rax, %rdi
 4382 41ab E88FC4FF 		call	portMap
 4382      FF
 4383 41b0 8985FCF2 		movl	%eax, -3332(%rbp)
 4383      FFFF
 582:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4384              		.loc 2 582 0 discriminator 2
 4385 41b6 83BDFCF2 		cmpl	$0, -3332(%rbp)
 4385      FFFF00
 4386 41bd 7427     		je	.L229
 4387              		.loc 2 582 0 is_stmt 0 discriminator 1
 4388 41bf 488B85C0 		movq	-3392(%rbp), %rax
 4388      F2FFFF
 4389 41c6 488D3500 		leaq	.LC36(%rip), %rsi
 4389      000000
 4390 41cd 4889C7   		movq	%rax, %rdi
 4391 41d0 E8000000 		call	errPrefix@PLT
 4391      00
 4392 41d5 8B85FCF2 		movl	-3332(%rbp), %eax
 4392      FFFF
 4393 41db 8985F8F2 		movl	%eax, -3336(%rbp)
 4393      FFFF
 4394 41e1 E9920800 		jmp	.L214
 4394      00
 4395              	.L229:
 583:prog.c        **** 
 584:prog.c        **** 	GET_PAIR(ssPort, ssBit, "progOpen");        // SS/TMS
 4396              		.loc 2 584 0 is_stmt 1
 4397 41e6 488B85C8 		movq	-3384(%rbp), %rax
 4397      F2FFFF
 4398 41ed 0FB600   		movzbl	(%rax), %eax
 4399 41f0 8885EFF2 		movb	%al, -3345(%rbp)
 4399      FFFF
 4400 41f6 80BDEFF2 		cmpb	$0, -3345(%rbp)
 4400      FFFF00
 4401 41fd 7553     		jne	.L230
 4402              		.loc 2 584 0 is_stmt 0 discriminator 1
 4403 41ff 488B85C8 		movq	-3384(%rbp), %rax
 4403      F2FFFF
 4404 4206 4889C2   		movq	%rax, %rdx
 4405 4209 488B85D0 		movq	-3376(%rbp), %rax
 4405      F2FFFF
 4406 4210 4829C2   		subq	%rax, %rdx
 4407 4213 4889D0   		movq	%rdx, %rax
 4408 4216 4889C7   		movq	%rax, %rdi
 4409 4219 E89CBFFF 		call	spaces
 4409      FF
 4410 421e 4889C1   		movq	%rax, %rcx
 4411 4221 488B95D0 		movq	-3376(%rbp), %rdx
 4411      F2FFFF
 4412 4228 488B85C0 		movq	-3392(%rbp), %rax
 4412      F2FFFF
 4413 422f 488D3500 		leaq	.LC32(%rip), %rsi
 4413      000000
 4414 4236 4889C7   		movq	%rax, %rdi
 4415 4239 B8000000 		movl	$0, %eax
 4415      00
 4416 423e E8000000 		call	errRender@PLT
 4416      00
 4417 4243 C785F8F2 		movl	$11, -3336(%rbp)
 4417      FFFF0B00 
 4417      0000
 4418 424d E9260800 		jmp	.L214
 4418      00
 4419              	.L230:
 4420              		.loc 2 584 0 discriminator 2
 4421 4252 80BDEFF2 		cmpb	$64, -3345(%rbp)
 4421      FFFF40
 4422 4259 7E09     		jle	.L231
 4423 425b 80BDEFF2 		cmpb	$90, -3345(%rbp)
 4423      FFFF5A
 4424 4262 7E53     		jle	.L232
 4425              	.L231:
 4426              		.loc 2 584 0 discriminator 1
 4427 4264 488B85C8 		movq	-3384(%rbp), %rax
 4427      F2FFFF
 4428 426b 4889C2   		movq	%rax, %rdx
 4429 426e 488B85D0 		movq	-3376(%rbp), %rax
 4429      F2FFFF
 4430 4275 4829C2   		subq	%rax, %rdx
 4431 4278 4889D0   		movq	%rdx, %rax
 4432 427b 4889C7   		movq	%rax, %rdi
 4433 427e E837BFFF 		call	spaces
 4433      FF
 4434 4283 4889C1   		movq	%rax, %rcx
 4435 4286 488B95D0 		movq	-3376(%rbp), %rdx
 4435      F2FFFF
 4436 428d 488B85C0 		movq	-3392(%rbp), %rax
 4436      F2FFFF
 4437 4294 488D3500 		leaq	.LC33(%rip), %rsi
 4437      000000
 4438 429b 4889C7   		movq	%rax, %rdi
 4439 429e B8000000 		movl	$0, %eax
 4439      00
 4440 42a3 E8000000 		call	errRender@PLT
 4440      00
 4441 42a8 C785F8F2 		movl	$11, -3336(%rbp)
 4441      FFFF0B00 
 4441      0000
 4442 42b2 E9C10700 		jmp	.L214
 4442      00
 4443              	.L232:
 4444 42b7 0FB685EF 		movzbl	-3345(%rbp), %eax
 4444      F2FFFF
 4445 42be 83E841   		subl	$65, %eax
 4446 42c1 8885F4F2 		movb	%al, -3340(%rbp)
 4446      FFFF
 4447 42c7 488B85C8 		movq	-3384(%rbp), %rax
 4447      F2FFFF
 4448 42ce 4883C001 		addq	$1, %rax
 4449 42d2 488985C8 		movq	%rax, -3384(%rbp)
 4449      F2FFFF
 4450 42d9 488B85C8 		movq	-3384(%rbp), %rax
 4450      F2FFFF
 4451 42e0 0FB600   		movzbl	(%rax), %eax
 4452 42e3 8885EFF2 		movb	%al, -3345(%rbp)
 4452      FFFF
 4453 42e9 80BDEFF2 		cmpb	$0, -3345(%rbp)
 4453      FFFF00
 4454 42f0 7553     		jne	.L233
 4455 42f2 488B85C8 		movq	-3384(%rbp), %rax
 4455      F2FFFF
 4456 42f9 4889C2   		movq	%rax, %rdx
 4457 42fc 488B85D0 		movq	-3376(%rbp), %rax
 4457      F2FFFF
 4458 4303 4829C2   		subq	%rax, %rdx
 4459 4306 4889D0   		movq	%rdx, %rax
 4460 4309 4889C7   		movq	%rax, %rdi
 4461 430c E8A9BEFF 		call	spaces
 4461      FF
 4462 4311 4889C1   		movq	%rax, %rcx
 4463 4314 488B95D0 		movq	-3376(%rbp), %rdx
 4463      F2FFFF
 4464 431b 488B85C0 		movq	-3392(%rbp), %rax
 4464      F2FFFF
 4465 4322 488D3500 		leaq	.LC32(%rip), %rsi
 4465      000000
 4466 4329 4889C7   		movq	%rax, %rdi
 4467 432c B8000000 		movl	$0, %eax
 4467      00
 4468 4331 E8000000 		call	errRender@PLT
 4468      00
 4469 4336 C785F8F2 		movl	$11, -3336(%rbp)
 4469      FFFF0B00 
 4469      0000
 4470 4340 E9330700 		jmp	.L214
 4470      00
 4471              	.L233:
 4472              		.loc 2 584 0 discriminator 2
 4473 4345 80BDEFF2 		cmpb	$47, -3345(%rbp)
 4473      FFFF2F
 4474 434c 7E09     		jle	.L234
 4475 434e 80BDEFF2 		cmpb	$57, -3345(%rbp)
 4475      FFFF39
 4476 4355 7E53     		jle	.L235
 4477              	.L234:
 4478              		.loc 2 584 0 discriminator 1
 4479 4357 488B85C8 		movq	-3384(%rbp), %rax
 4479      F2FFFF
 4480 435e 4889C2   		movq	%rax, %rdx
 4481 4361 488B85D0 		movq	-3376(%rbp), %rax
 4481      F2FFFF
 4482 4368 4829C2   		subq	%rax, %rdx
 4483 436b 4889D0   		movq	%rdx, %rax
 4484 436e 4889C7   		movq	%rax, %rdi
 4485 4371 E844BEFF 		call	spaces
 4485      FF
 4486 4376 4889C1   		movq	%rax, %rcx
 4487 4379 488B95D0 		movq	-3376(%rbp), %rdx
 4487      F2FFFF
 4488 4380 488B85C0 		movq	-3392(%rbp), %rax
 4488      F2FFFF
 4489 4387 488D3500 		leaq	.LC34(%rip), %rsi
 4489      000000
 4490 438e 4889C7   		movq	%rax, %rdi
 4491 4391 B8000000 		movl	$0, %eax
 4491      00
 4492 4396 E8000000 		call	errRender@PLT
 4492      00
 4493 439b C785F8F2 		movl	$11, -3336(%rbp)
 4493      FFFF0B00 
 4493      0000
 4494 43a5 E9CE0600 		jmp	.L214
 4494      00
 4495              	.L235:
 4496 43aa 488B85C8 		movq	-3384(%rbp), %rax
 4496      F2FFFF
 4497 43b1 488D8DC8 		leaq	-3384(%rbp), %rcx
 4497      F2FFFF
 4498 43b8 BA0A0000 		movl	$10, %edx
 4498      00
 4499 43bd 4889CE   		movq	%rcx, %rsi
 4500 43c0 4889C7   		movq	%rax, %rdi
 4501 43c3 E8000000 		call	strtoul@PLT
 4501      00
 4502 43c8 8885F5F2 		movb	%al, -3339(%rbp)
 4502      FFFF
 585:prog.c        **** 	SET_BIT(ssPort, ssBit, PIN_LOW, "progOpen");
 4503              		.loc 2 585 0 is_stmt 1 discriminator 1
 4504 43ce 0FB695F4 		movzbl	-3340(%rbp), %edx
 4504      F2FFFF
 4505 43d5 0FB685F5 		movzbl	-3339(%rbp), %eax
 4505      F2FFFF
 4506 43dc 4898     		cltq
 4507 43de 4863D2   		movslq	%edx, %rdx
 4508 43e1 48C1E205 		salq	$5, %rdx
 4509 43e5 4801D0   		addq	%rdx, %rax
 4510 43e8 8B848500 		movl	-3328(%rbp,%rax,4), %eax
 4510      F3FFFF
 4511 43ef 85C0     		testl	%eax, %eax
 4512 43f1 7472     		je	.L236
 4513 43f3 488B85C8 		movq	-3384(%rbp), %rax
 4513      F2FFFF
 4514 43fa 4889C2   		movq	%rax, %rdx
 4515 43fd 488B85D0 		movq	-3376(%rbp), %rax
 4515      F2FFFF
 4516 4404 4829C2   		subq	%rax, %rdx
 4517 4407 4889D0   		movq	%rdx, %rax
 4518 440a 4883E801 		subq	$1, %rax
 4519 440e 4889C7   		movq	%rax, %rdi
 4520 4411 E8A4BDFF 		call	spaces
 4520      FF
 4521 4416 4889C1   		movq	%rax, %rcx
 4522 4419 0FB695F5 		movzbl	-3339(%rbp), %edx
 4522      F2FFFF
 4523 4420 0FB685F4 		movzbl	-3340(%rbp), %eax
 4523      F2FFFF
 4524 4427 8D7041   		leal	65(%rax), %esi
 4525 442a 488BBDD0 		movq	-3376(%rbp), %rdi
 4525      F2FFFF
 4526 4431 488B85C0 		movq	-3392(%rbp), %rax
 4526      F2FFFF
 4527 4438 4989C9   		movq	%rcx, %r9
 4528 443b 4989F8   		movq	%rdi, %r8
 4529 443e 89D1     		movl	%edx, %ecx
 4530 4440 89F2     		movl	%esi, %edx
 4531 4442 488D3500 		leaq	.LC35(%rip), %rsi
 4531      000000
 4532 4449 4889C7   		movq	%rax, %rdi
 4533 444c B8000000 		movl	$0, %eax
 4533      00
 4534 4451 E8000000 		call	errRender@PLT
 4534      00
 4535 4456 C785F8F2 		movl	$11, -3336(%rbp)
 4535      FFFF0B00 
 4535      0000
 4536 4460 E9130600 		jmp	.L214
 4536      00
 4537              	.L236:
 4538              		.loc 2 585 0 is_stmt 0 discriminator 2
 4539 4465 0FB695F4 		movzbl	-3340(%rbp), %edx
 4539      F2FFFF
 4540 446c 0FB685F5 		movzbl	-3339(%rbp), %eax
 4540      F2FFFF
 4541 4473 4898     		cltq
 4542 4475 4863D2   		movslq	%edx, %rdx
 4543 4478 48C1E205 		salq	$5, %rdx
 4544 447c 4801D0   		addq	%rdx, %rax
 4545 447f C7848500 		movl	$2, -3328(%rbp,%rax,4)
 4545      F3FFFF02 
 4545      000000
 586:prog.c        **** 	fStatus = portMap(handle, LP_SS, ssPort, ssBit, error);
 4546              		.loc 2 586 0 is_stmt 1 discriminator 2
 4547 448a 0FB68DF5 		movzbl	-3339(%rbp), %ecx
 4547      F2FFFF
 4548 4491 0FB695F4 		movzbl	-3340(%rbp), %edx
 4548      F2FFFF
 4549 4498 488BB5C0 		movq	-3392(%rbp), %rsi
 4549      F2FFFF
 4550 449f 488B85D8 		movq	-3368(%rbp), %rax
 4550      F2FFFF
 4551 44a6 4989F0   		movq	%rsi, %r8
 4552 44a9 BE030000 		movl	$3, %esi
 4552      00
 4553 44ae 4889C7   		movq	%rax, %rdi
 4554 44b1 E889C1FF 		call	portMap
 4554      FF
 4555 44b6 8985FCF2 		movl	%eax, -3332(%rbp)
 4555      FFFF
 587:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4556              		.loc 2 587 0 discriminator 2
 4557 44bc 83BDFCF2 		cmpl	$0, -3332(%rbp)
 4557      FFFF00
 4558 44c3 7427     		je	.L237
 4559              		.loc 2 587 0 is_stmt 0 discriminator 1
 4560 44c5 488B85C0 		movq	-3392(%rbp), %rax
 4560      F2FFFF
 4561 44cc 488D3500 		leaq	.LC36(%rip), %rsi
 4561      000000
 4562 44d3 4889C7   		movq	%rax, %rdi
 4563 44d6 E8000000 		call	errPrefix@PLT
 4563      00
 4564 44db 8B85FCF2 		movl	-3332(%rbp), %eax
 4564      FFFF
 4565 44e1 8985F8F2 		movl	%eax, -3336(%rbp)
 4565      FFFF
 4566 44e7 E98C0500 		jmp	.L214
 4566      00
 4567              	.L237:
 588:prog.c        **** 
 589:prog.c        **** 	GET_PAIR(sckPort, sckBit, "progOpen");        // SCK/TCK
 4568              		.loc 2 589 0 is_stmt 1
 4569 44ec 488B85C8 		movq	-3384(%rbp), %rax
 4569      F2FFFF
 4570 44f3 0FB600   		movzbl	(%rax), %eax
 4571 44f6 8885EFF2 		movb	%al, -3345(%rbp)
 4571      FFFF
 4572 44fc 80BDEFF2 		cmpb	$0, -3345(%rbp)
 4572      FFFF00
 4573 4503 7553     		jne	.L238
 4574              		.loc 2 589 0 is_stmt 0 discriminator 1
 4575 4505 488B85C8 		movq	-3384(%rbp), %rax
 4575      F2FFFF
 4576 450c 4889C2   		movq	%rax, %rdx
 4577 450f 488B85D0 		movq	-3376(%rbp), %rax
 4577      F2FFFF
 4578 4516 4829C2   		subq	%rax, %rdx
 4579 4519 4889D0   		movq	%rdx, %rax
 4580 451c 4889C7   		movq	%rax, %rdi
 4581 451f E896BCFF 		call	spaces
 4581      FF
 4582 4524 4889C1   		movq	%rax, %rcx
 4583 4527 488B95D0 		movq	-3376(%rbp), %rdx
 4583      F2FFFF
 4584 452e 488B85C0 		movq	-3392(%rbp), %rax
 4584      F2FFFF
 4585 4535 488D3500 		leaq	.LC32(%rip), %rsi
 4585      000000
 4586 453c 4889C7   		movq	%rax, %rdi
 4587 453f B8000000 		movl	$0, %eax
 4587      00
 4588 4544 E8000000 		call	errRender@PLT
 4588      00
 4589 4549 C785F8F2 		movl	$11, -3336(%rbp)
 4589      FFFF0B00 
 4589      0000
 4590 4553 E9200500 		jmp	.L214
 4590      00
 4591              	.L238:
 4592              		.loc 2 589 0 discriminator 2
 4593 4558 80BDEFF2 		cmpb	$64, -3345(%rbp)
 4593      FFFF40
 4594 455f 7E09     		jle	.L239
 4595 4561 80BDEFF2 		cmpb	$90, -3345(%rbp)
 4595      FFFF5A
 4596 4568 7E53     		jle	.L240
 4597              	.L239:
 4598              		.loc 2 589 0 discriminator 1
 4599 456a 488B85C8 		movq	-3384(%rbp), %rax
 4599      F2FFFF
 4600 4571 4889C2   		movq	%rax, %rdx
 4601 4574 488B85D0 		movq	-3376(%rbp), %rax
 4601      F2FFFF
 4602 457b 4829C2   		subq	%rax, %rdx
 4603 457e 4889D0   		movq	%rdx, %rax
 4604 4581 4889C7   		movq	%rax, %rdi
 4605 4584 E831BCFF 		call	spaces
 4605      FF
 4606 4589 4889C1   		movq	%rax, %rcx
 4607 458c 488B95D0 		movq	-3376(%rbp), %rdx
 4607      F2FFFF
 4608 4593 488B85C0 		movq	-3392(%rbp), %rax
 4608      F2FFFF
 4609 459a 488D3500 		leaq	.LC33(%rip), %rsi
 4609      000000
 4610 45a1 4889C7   		movq	%rax, %rdi
 4611 45a4 B8000000 		movl	$0, %eax
 4611      00
 4612 45a9 E8000000 		call	errRender@PLT
 4612      00
 4613 45ae C785F8F2 		movl	$11, -3336(%rbp)
 4613      FFFF0B00 
 4613      0000
 4614 45b8 E9BB0400 		jmp	.L214
 4614      00
 4615              	.L240:
 4616 45bd 0FB685EF 		movzbl	-3345(%rbp), %eax
 4616      F2FFFF
 4617 45c4 83E841   		subl	$65, %eax
 4618 45c7 8885F6F2 		movb	%al, -3338(%rbp)
 4618      FFFF
 4619 45cd 488B85C8 		movq	-3384(%rbp), %rax
 4619      F2FFFF
 4620 45d4 4883C001 		addq	$1, %rax
 4621 45d8 488985C8 		movq	%rax, -3384(%rbp)
 4621      F2FFFF
 4622 45df 488B85C8 		movq	-3384(%rbp), %rax
 4622      F2FFFF
 4623 45e6 0FB600   		movzbl	(%rax), %eax
 4624 45e9 8885EFF2 		movb	%al, -3345(%rbp)
 4624      FFFF
 4625 45ef 80BDEFF2 		cmpb	$0, -3345(%rbp)
 4625      FFFF00
 4626 45f6 7553     		jne	.L241
 4627 45f8 488B85C8 		movq	-3384(%rbp), %rax
 4627      F2FFFF
 4628 45ff 4889C2   		movq	%rax, %rdx
 4629 4602 488B85D0 		movq	-3376(%rbp), %rax
 4629      F2FFFF
 4630 4609 4829C2   		subq	%rax, %rdx
 4631 460c 4889D0   		movq	%rdx, %rax
 4632 460f 4889C7   		movq	%rax, %rdi
 4633 4612 E8A3BBFF 		call	spaces
 4633      FF
 4634 4617 4889C1   		movq	%rax, %rcx
 4635 461a 488B95D0 		movq	-3376(%rbp), %rdx
 4635      F2FFFF
 4636 4621 488B85C0 		movq	-3392(%rbp), %rax
 4636      F2FFFF
 4637 4628 488D3500 		leaq	.LC32(%rip), %rsi
 4637      000000
 4638 462f 4889C7   		movq	%rax, %rdi
 4639 4632 B8000000 		movl	$0, %eax
 4639      00
 4640 4637 E8000000 		call	errRender@PLT
 4640      00
 4641 463c C785F8F2 		movl	$11, -3336(%rbp)
 4641      FFFF0B00 
 4641      0000
 4642 4646 E92D0400 		jmp	.L214
 4642      00
 4643              	.L241:
 4644              		.loc 2 589 0 discriminator 2
 4645 464b 80BDEFF2 		cmpb	$47, -3345(%rbp)
 4645      FFFF2F
 4646 4652 7E09     		jle	.L242
 4647 4654 80BDEFF2 		cmpb	$57, -3345(%rbp)
 4647      FFFF39
 4648 465b 7E53     		jle	.L243
 4649              	.L242:
 4650              		.loc 2 589 0 discriminator 1
 4651 465d 488B85C8 		movq	-3384(%rbp), %rax
 4651      F2FFFF
 4652 4664 4889C2   		movq	%rax, %rdx
 4653 4667 488B85D0 		movq	-3376(%rbp), %rax
 4653      F2FFFF
 4654 466e 4829C2   		subq	%rax, %rdx
 4655 4671 4889D0   		movq	%rdx, %rax
 4656 4674 4889C7   		movq	%rax, %rdi
 4657 4677 E83EBBFF 		call	spaces
 4657      FF
 4658 467c 4889C1   		movq	%rax, %rcx
 4659 467f 488B95D0 		movq	-3376(%rbp), %rdx
 4659      F2FFFF
 4660 4686 488B85C0 		movq	-3392(%rbp), %rax
 4660      F2FFFF
 4661 468d 488D3500 		leaq	.LC34(%rip), %rsi
 4661      000000
 4662 4694 4889C7   		movq	%rax, %rdi
 4663 4697 B8000000 		movl	$0, %eax
 4663      00
 4664 469c E8000000 		call	errRender@PLT
 4664      00
 4665 46a1 C785F8F2 		movl	$11, -3336(%rbp)
 4665      FFFF0B00 
 4665      0000
 4666 46ab E9C80300 		jmp	.L214
 4666      00
 4667              	.L243:
 4668 46b0 488B85C8 		movq	-3384(%rbp), %rax
 4668      F2FFFF
 4669 46b7 488D8DC8 		leaq	-3384(%rbp), %rcx
 4669      F2FFFF
 4670 46be BA0A0000 		movl	$10, %edx
 4670      00
 4671 46c3 4889CE   		movq	%rcx, %rsi
 4672 46c6 4889C7   		movq	%rax, %rdi
 4673 46c9 E8000000 		call	strtoul@PLT
 4673      00
 4674 46ce 8885F7F2 		movb	%al, -3337(%rbp)
 4674      FFFF
 590:prog.c        **** 	SET_BIT(sckPort, sckBit, PIN_LOW, "progOpen");
 4675              		.loc 2 590 0 is_stmt 1 discriminator 1
 4676 46d4 0FB695F6 		movzbl	-3338(%rbp), %edx
 4676      F2FFFF
 4677 46db 0FB685F7 		movzbl	-3337(%rbp), %eax
 4677      F2FFFF
 4678 46e2 4898     		cltq
 4679 46e4 4863D2   		movslq	%edx, %rdx
 4680 46e7 48C1E205 		salq	$5, %rdx
 4681 46eb 4801D0   		addq	%rdx, %rax
 4682 46ee 8B848500 		movl	-3328(%rbp,%rax,4), %eax
 4682      F3FFFF
 4683 46f5 85C0     		testl	%eax, %eax
 4684 46f7 7472     		je	.L244
 4685 46f9 488B85C8 		movq	-3384(%rbp), %rax
 4685      F2FFFF
 4686 4700 4889C2   		movq	%rax, %rdx
 4687 4703 488B85D0 		movq	-3376(%rbp), %rax
 4687      F2FFFF
 4688 470a 4829C2   		subq	%rax, %rdx
 4689 470d 4889D0   		movq	%rdx, %rax
 4690 4710 4883E801 		subq	$1, %rax
 4691 4714 4889C7   		movq	%rax, %rdi
 4692 4717 E89EBAFF 		call	spaces
 4692      FF
 4693 471c 4889C1   		movq	%rax, %rcx
 4694 471f 0FB695F7 		movzbl	-3337(%rbp), %edx
 4694      F2FFFF
 4695 4726 0FB685F6 		movzbl	-3338(%rbp), %eax
 4695      F2FFFF
 4696 472d 8D7041   		leal	65(%rax), %esi
 4697 4730 488BBDD0 		movq	-3376(%rbp), %rdi
 4697      F2FFFF
 4698 4737 488B85C0 		movq	-3392(%rbp), %rax
 4698      F2FFFF
 4699 473e 4989C9   		movq	%rcx, %r9
 4700 4741 4989F8   		movq	%rdi, %r8
 4701 4744 89D1     		movl	%edx, %ecx
 4702 4746 89F2     		movl	%esi, %edx
 4703 4748 488D3500 		leaq	.LC35(%rip), %rsi
 4703      000000
 4704 474f 4889C7   		movq	%rax, %rdi
 4705 4752 B8000000 		movl	$0, %eax
 4705      00
 4706 4757 E8000000 		call	errRender@PLT
 4706      00
 4707 475c C785F8F2 		movl	$11, -3336(%rbp)
 4707      FFFF0B00 
 4707      0000
 4708 4766 E90D0300 		jmp	.L214
 4708      00
 4709              	.L244:
 4710              		.loc 2 590 0 is_stmt 0 discriminator 2
 4711 476b 0FB695F6 		movzbl	-3338(%rbp), %edx
 4711      F2FFFF
 4712 4772 0FB685F7 		movzbl	-3337(%rbp), %eax
 4712      F2FFFF
 4713 4779 4898     		cltq
 4714 477b 4863D2   		movslq	%edx, %rdx
 4715 477e 48C1E205 		salq	$5, %rdx
 4716 4782 4801D0   		addq	%rdx, %rax
 4717 4785 C7848500 		movl	$2, -3328(%rbp,%rax,4)
 4717      F3FFFF02 
 4717      000000
 591:prog.c        **** 	fStatus = portMap(handle, LP_SCK, sckPort, sckBit, error);
 4718              		.loc 2 591 0 is_stmt 1 discriminator 2
 4719 4790 0FB68DF7 		movzbl	-3337(%rbp), %ecx
 4719      F2FFFF
 4720 4797 0FB695F6 		movzbl	-3338(%rbp), %edx
 4720      F2FFFF
 4721 479e 488BB5C0 		movq	-3392(%rbp), %rsi
 4721      F2FFFF
 4722 47a5 488B85D8 		movq	-3368(%rbp), %rax
 4722      F2FFFF
 4723 47ac 4989F0   		movq	%rsi, %r8
 4724 47af BE040000 		movl	$4, %esi
 4724      00
 4725 47b4 4889C7   		movq	%rax, %rdi
 4726 47b7 E883BEFF 		call	portMap
 4726      FF
 4727 47bc 8985FCF2 		movl	%eax, -3332(%rbp)
 4727      FFFF
 592:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4728              		.loc 2 592 0 discriminator 2
 4729 47c2 83BDFCF2 		cmpl	$0, -3332(%rbp)
 4729      FFFF00
 4730 47c9 7427     		je	.L245
 4731              		.loc 2 592 0 is_stmt 0 discriminator 1
 4732 47cb 488B85C0 		movq	-3392(%rbp), %rax
 4732      F2FFFF
 4733 47d2 488D3500 		leaq	.LC36(%rip), %rsi
 4733      000000
 4734 47d9 4889C7   		movq	%rax, %rdi
 4735 47dc E8000000 		call	errPrefix@PLT
 4735      00
 4736 47e1 8B85FCF2 		movl	-3332(%rbp), %eax
 4736      FFFF
 4737 47e7 8985F8F2 		movl	%eax, -3336(%rbp)
 4737      FFFF
 4738 47ed E9860200 		jmp	.L214
 4738      00
 4739              	.L245:
 593:prog.c        **** 
 594:prog.c        **** 	fStatus = portMap(handle, LP_CHOOSE, 0x00, 0x00, error);
 4740              		.loc 2 594 0 is_stmt 1
 4741 47f2 488B95C0 		movq	-3392(%rbp), %rdx
 4741      F2FFFF
 4742 47f9 488B85D8 		movq	-3368(%rbp), %rax
 4742      F2FFFF
 4743 4800 4989D0   		movq	%rdx, %r8
 4744 4803 B9000000 		movl	$0, %ecx
 4744      00
 4745 4808 BA000000 		movl	$0, %edx
 4745      00
 4746 480d BE000000 		movl	$0, %esi
 4746      00
 4747 4812 4889C7   		movq	%rax, %rdi
 4748 4815 E825BEFF 		call	portMap
 4748      FF
 4749 481a 8985FCF2 		movl	%eax, -3332(%rbp)
 4749      FFFF
 595:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4750              		.loc 2 595 0
 4751 4820 83BDFCF2 		cmpl	$0, -3332(%rbp)
 4751      FFFF00
 4752 4827 7427     		je	.L246
 4753              		.loc 2 595 0 is_stmt 0 discriminator 1
 4754 4829 488B85C0 		movq	-3392(%rbp), %rax
 4754      F2FFFF
 4755 4830 488D3500 		leaq	.LC36(%rip), %rsi
 4755      000000
 4756 4837 4889C7   		movq	%rax, %rdi
 4757 483a E8000000 		call	errPrefix@PLT
 4757      00
 4758 483f 8B85FCF2 		movl	-3332(%rbp), %eax
 4758      FFFF
 4759 4845 8985F8F2 		movl	%eax, -3336(%rbp)
 4759      FFFF
 4760 484b E9280200 		jmp	.L214
 4760      00
 4761              	.L246:
 596:prog.c        **** 
 597:prog.c        **** 	// Set MISO/TDO as an input and the other three as outputs
 598:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, misoPort, misoBit, PIN_INPUT, NULL, error);
 4762              		.loc 2 598 0 is_stmt 1
 4763 4850 0FB695F1 		movzbl	-3343(%rbp), %edx
 4763      F2FFFF
 4764 4857 0FB6B5F0 		movzbl	-3344(%rbp), %esi
 4764      F2FFFF
 4765 485e 488B8DC0 		movq	-3392(%rbp), %rcx
 4765      F2FFFF
 4766 4865 488B85D8 		movq	-3368(%rbp), %rax
 4766      F2FFFF
 4767 486c 4989C9   		movq	%rcx, %r9
 4768 486f 41B80000 		movl	$0, %r8d
 4768      0000
 4769 4875 B9030000 		movl	$3, %ecx
 4769      00
 4770 487a 4889C7   		movq	%rax, %rdi
 4771 487d E8000000 		call	flSingleBitPortAccess@PLT
 4771      00
 4772 4882 8985FCF2 		movl	%eax, -3332(%rbp)
 4772      FFFF
 599:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4773              		.loc 2 599 0
 4774 4888 83BDFCF2 		cmpl	$0, -3332(%rbp)
 4774      FFFF00
 4775 488f 7427     		je	.L247
 4776              		.loc 2 599 0 is_stmt 0 discriminator 1
 4777 4891 488B85C0 		movq	-3392(%rbp), %rax
 4777      F2FFFF
 4778 4898 488D3500 		leaq	.LC36(%rip), %rsi
 4778      000000
 4779 489f 4889C7   		movq	%rax, %rdi
 4780 48a2 E8000000 		call	errPrefix@PLT
 4780      00
 4781 48a7 8B85FCF2 		movl	-3332(%rbp), %eax
 4781      FFFF
 4782 48ad 8985F8F2 		movl	%eax, -3336(%rbp)
 4782      FFFF
 4783 48b3 E9C00100 		jmp	.L214
 4783      00
 4784              	.L247:
 600:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, mosiPort, mosiBit, PIN_LOW, NULL, error);
 4785              		.loc 2 600 0 is_stmt 1
 4786 48b8 0FB695F3 		movzbl	-3341(%rbp), %edx
 4786      F2FFFF
 4787 48bf 0FB6B5F2 		movzbl	-3342(%rbp), %esi
 4787      F2FFFF
 4788 48c6 488B8DC0 		movq	-3392(%rbp), %rcx
 4788      F2FFFF
 4789 48cd 488B85D8 		movq	-3368(%rbp), %rax
 4789      F2FFFF
 4790 48d4 4989C9   		movq	%rcx, %r9
 4791 48d7 41B80000 		movl	$0, %r8d
 4791      0000
 4792 48dd B9020000 		movl	$2, %ecx
 4792      00
 4793 48e2 4889C7   		movq	%rax, %rdi
 4794 48e5 E8000000 		call	flSingleBitPortAccess@PLT
 4794      00
 4795 48ea 8985FCF2 		movl	%eax, -3332(%rbp)
 4795      FFFF
 601:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4796              		.loc 2 601 0
 4797 48f0 83BDFCF2 		cmpl	$0, -3332(%rbp)
 4797      FFFF00
 4798 48f7 7427     		je	.L248
 4799              		.loc 2 601 0 is_stmt 0 discriminator 1
 4800 48f9 488B85C0 		movq	-3392(%rbp), %rax
 4800      F2FFFF
 4801 4900 488D3500 		leaq	.LC36(%rip), %rsi
 4801      000000
 4802 4907 4889C7   		movq	%rax, %rdi
 4803 490a E8000000 		call	errPrefix@PLT
 4803      00
 4804 490f 8B85FCF2 		movl	-3332(%rbp), %eax
 4804      FFFF
 4805 4915 8985F8F2 		movl	%eax, -3336(%rbp)
 4805      FFFF
 4806 491b E9580100 		jmp	.L214
 4806      00
 4807              	.L248:
 602:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, ssPort, ssBit, PIN_LOW, NULL, error);
 4808              		.loc 2 602 0 is_stmt 1
 4809 4920 0FB695F5 		movzbl	-3339(%rbp), %edx
 4809      F2FFFF
 4810 4927 0FB6B5F4 		movzbl	-3340(%rbp), %esi
 4810      F2FFFF
 4811 492e 488B8DC0 		movq	-3392(%rbp), %rcx
 4811      F2FFFF
 4812 4935 488B85D8 		movq	-3368(%rbp), %rax
 4812      F2FFFF
 4813 493c 4989C9   		movq	%rcx, %r9
 4814 493f 41B80000 		movl	$0, %r8d
 4814      0000
 4815 4945 B9020000 		movl	$2, %ecx
 4815      00
 4816 494a 4889C7   		movq	%rax, %rdi
 4817 494d E8000000 		call	flSingleBitPortAccess@PLT
 4817      00
 4818 4952 8985FCF2 		movl	%eax, -3332(%rbp)
 4818      FFFF
 603:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4819              		.loc 2 603 0
 4820 4958 83BDFCF2 		cmpl	$0, -3332(%rbp)
 4820      FFFF00
 4821 495f 7427     		je	.L249
 4822              		.loc 2 603 0 is_stmt 0 discriminator 1
 4823 4961 488B85C0 		movq	-3392(%rbp), %rax
 4823      F2FFFF
 4824 4968 488D3500 		leaq	.LC36(%rip), %rsi
 4824      000000
 4825 496f 4889C7   		movq	%rax, %rdi
 4826 4972 E8000000 		call	errPrefix@PLT
 4826      00
 4827 4977 8B85FCF2 		movl	-3332(%rbp), %eax
 4827      FFFF
 4828 497d 8985F8F2 		movl	%eax, -3336(%rbp)
 4828      FFFF
 4829 4983 E9F00000 		jmp	.L214
 4829      00
 4830              	.L249:
 604:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, sckPort, sckBit, PIN_LOW, NULL, error);
 4831              		.loc 2 604 0 is_stmt 1
 4832 4988 0FB695F7 		movzbl	-3337(%rbp), %edx
 4832      F2FFFF
 4833 498f 0FB6B5F6 		movzbl	-3338(%rbp), %esi
 4833      F2FFFF
 4834 4996 488B8DC0 		movq	-3392(%rbp), %rcx
 4834      F2FFFF
 4835 499d 488B85D8 		movq	-3368(%rbp), %rax
 4835      F2FFFF
 4836 49a4 4989C9   		movq	%rcx, %r9
 4837 49a7 41B80000 		movl	$0, %r8d
 4837      0000
 4838 49ad B9020000 		movl	$2, %ecx
 4838      00
 4839 49b2 4889C7   		movq	%rax, %rdi
 4840 49b5 E8000000 		call	flSingleBitPortAccess@PLT
 4840      00
 4841 49ba 8985FCF2 		movl	%eax, -3332(%rbp)
 4841      FFFF
 605:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progOpen()");
 4842              		.loc 2 605 0
 4843 49c0 83BDFCF2 		cmpl	$0, -3332(%rbp)
 4843      FFFF00
 4844 49c7 7427     		je	.L250
 4845              		.loc 2 605 0 is_stmt 0 discriminator 1
 4846 49c9 488B85C0 		movq	-3392(%rbp), %rax
 4846      F2FFFF
 4847 49d0 488D3500 		leaq	.LC36(%rip), %rsi
 4847      000000
 4848 49d7 4889C7   		movq	%rax, %rdi
 4849 49da E8000000 		call	errPrefix@PLT
 4849      00
 4850 49df 8B85FCF2 		movl	-3332(%rbp), %eax
 4850      FFFF
 4851 49e5 8985F8F2 		movl	%eax, -3336(%rbp)
 4851      FFFF
 4852 49eb E9880000 		jmp	.L214
 4852      00
 4853              	.L250:
 606:prog.c        **** 
 607:prog.c        **** 	// Remember the ports and bits for the benefit of progClose()
 608:prog.c        **** 	handle->misoPort = misoPort;
 4854              		.loc 2 608 0 is_stmt 1
 4855 49f0 488B85D8 		movq	-3368(%rbp), %rax
 4855      F2FFFF
 4856 49f7 0FB695F0 		movzbl	-3344(%rbp), %edx
 4856      F2FFFF
 4857 49fe 885017   		movb	%dl, 23(%rax)
 609:prog.c        **** 	handle->misoBit = misoBit;
 4858              		.loc 2 609 0
 4859 4a01 488B85D8 		movq	-3368(%rbp), %rax
 4859      F2FFFF
 4860 4a08 0FB695F1 		movzbl	-3343(%rbp), %edx
 4860      F2FFFF
 4861 4a0f 885018   		movb	%dl, 24(%rax)
 610:prog.c        **** 	handle->mosiPort = mosiPort;
 4862              		.loc 2 610 0
 4863 4a12 488B85D8 		movq	-3368(%rbp), %rax
 4863      F2FFFF
 4864 4a19 0FB695F2 		movzbl	-3342(%rbp), %edx
 4864      F2FFFF
 4865 4a20 885019   		movb	%dl, 25(%rax)
 611:prog.c        **** 	handle->mosiBit = mosiBit;
 4866              		.loc 2 611 0
 4867 4a23 488B85D8 		movq	-3368(%rbp), %rax
 4867      F2FFFF
 4868 4a2a 0FB695F3 		movzbl	-3341(%rbp), %edx
 4868      F2FFFF
 4869 4a31 88501A   		movb	%dl, 26(%rax)
 612:prog.c        **** 	handle->ssPort = ssPort;
 4870              		.loc 2 612 0
 4871 4a34 488B85D8 		movq	-3368(%rbp), %rax
 4871      F2FFFF
 4872 4a3b 0FB695F4 		movzbl	-3340(%rbp), %edx
 4872      F2FFFF
 4873 4a42 88501B   		movb	%dl, 27(%rax)
 613:prog.c        **** 	handle->ssBit = ssBit;
 4874              		.loc 2 613 0
 4875 4a45 488B85D8 		movq	-3368(%rbp), %rax
 4875      F2FFFF
 4876 4a4c 0FB695F5 		movzbl	-3339(%rbp), %edx
 4876      F2FFFF
 4877 4a53 88501C   		movb	%dl, 28(%rax)
 614:prog.c        **** 	handle->sckPort = sckPort;
 4878              		.loc 2 614 0
 4879 4a56 488B85D8 		movq	-3368(%rbp), %rax
 4879      F2FFFF
 4880 4a5d 0FB695F6 		movzbl	-3338(%rbp), %edx
 4880      F2FFFF
 4881 4a64 88501D   		movb	%dl, 29(%rax)
 615:prog.c        **** 	handle->sckBit = sckBit;
 4882              		.loc 2 615 0
 4883 4a67 488B85D8 		movq	-3368(%rbp), %rax
 4883      F2FFFF
 4884 4a6e 0FB695F7 		movzbl	-3337(%rbp), %edx
 4884      F2FFFF
 4885 4a75 88501E   		movb	%dl, 30(%rax)
 4886              	.L214:
 616:prog.c        **** cleanup:
 617:prog.c        **** 	return retVal;
 4887              		.loc 2 617 0
 4888 4a78 8B85F8F2 		movl	-3336(%rbp), %eax
 4888      FFFF
 618:prog.c        **** }
 4889              		.loc 2 618 0
 4890 4a7e C9       		leave
 4891              		.cfi_def_cfa 7, 8
 4892 4a7f C3       		ret
 4893              		.cfi_endproc
 4894              	.LFE14:
 4896              		.section	.rodata
 4897 0747 00       		.align 8
 4898              	.LC37:
 4899 0748 6A50726F 		.string	"jProgram(): Unexpected end of config string:\n  %s\n  %s^"
 4899      6772616D 
 4899      28293A20 
 4899      556E6578 
 4899      70656374 
 4900              		.align 8
 4901              	.LC38:
 4902 0780 6A50726F 		.string	"jProgram(): Expecting ':':\n  %s\n  %s^"
 4902      6772616D 
 4902      28293A20 
 4902      45787065 
 4902      6374696E 
 4903              	.LC39:
 4904 07a6 6A50726F 		.string	"jProgram()"
 4904      6772616D 
 4904      282900
 4905              		.text
 4907              	jProgram:
 4908              	.LFB15:
 619:prog.c        **** 
 620:prog.c        **** // Program a device over JTAG.
 621:prog.c        **** //
 622:prog.c        **** // Called by:
 623:prog.c        **** //   flProgram() -> jProgram()
 624:prog.c        **** //
 625:prog.c        **** static FLStatus jProgram(struct FLContext *handle, const char *portConfig, const uint8 *csvfData, c
 4909              		.loc 2 625 0
 4910              		.cfi_startproc
 4911 4a80 55       		pushq	%rbp
 4912              		.cfi_def_cfa_offset 16
 4913              		.cfi_offset 6, -16
 4914 4a81 4889E5   		movq	%rsp, %rbp
 4915              		.cfi_def_cfa_register 6
 4916 4a84 4883EC40 		subq	$64, %rsp
 4917 4a88 48897DD8 		movq	%rdi, -40(%rbp)
 4918 4a8c 488975D0 		movq	%rsi, -48(%rbp)
 4919 4a90 488955C8 		movq	%rdx, -56(%rbp)
 4920 4a94 48894DC0 		movq	%rcx, -64(%rbp)
 626:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 4921              		.loc 2 626 0
 4922 4a98 C745F000 		movl	$0, -16(%rbp)
 4922      000000
 627:prog.c        **** 	FLStatus fStatus;
 628:prog.c        **** 	const char *ptr = portConfig + 1;
 4923              		.loc 2 628 0
 4924 4a9f 488B45D0 		movq	-48(%rbp), %rax
 4925 4aa3 4883C001 		addq	$1, %rax
 4926 4aa7 488945F8 		movq	%rax, -8(%rbp)
 629:prog.c        **** 	char ch;
 630:prog.c        **** 	EXPECT_CHAR(':', "jProgram");
 4927              		.loc 2 630 0
 4928 4aab 488B45F8 		movq	-8(%rbp), %rax
 4929 4aaf 0FB600   		movzbl	(%rax), %eax
 4930 4ab2 8845EF   		movb	%al, -17(%rbp)
 4931 4ab5 807DEF00 		cmpb	$0, -17(%rbp)
 4932 4ab9 7541     		jne	.L253
 4933              		.loc 2 630 0 is_stmt 0 discriminator 1
 4934 4abb 488B55F8 		movq	-8(%rbp), %rdx
 4935 4abf 488B45D0 		movq	-48(%rbp), %rax
 4936 4ac3 4829C2   		subq	%rax, %rdx
 4937 4ac6 4889D0   		movq	%rdx, %rax
 4938 4ac9 4889C7   		movq	%rax, %rdi
 4939 4acc E8E9B6FF 		call	spaces
 4939      FF
 4940 4ad1 4889C1   		movq	%rax, %rcx
 4941 4ad4 488B55D0 		movq	-48(%rbp), %rdx
 4942 4ad8 488B45C0 		movq	-64(%rbp), %rax
 4943 4adc 488D3500 		leaq	.LC37(%rip), %rsi
 4943      000000
 4944 4ae3 4889C7   		movq	%rax, %rdi
 4945 4ae6 B8000000 		movl	$0, %eax
 4945      00
 4946 4aeb E8000000 		call	errRender@PLT
 4946      00
 4947 4af0 C745F00B 		movl	$11, -16(%rbp)
 4947      000000
 4948 4af7 E9F90000 		jmp	.L254
 4948      00
 4949              	.L253:
 4950              		.loc 2 630 0 discriminator 2
 4951 4afc 807DEF3A 		cmpb	$58, -17(%rbp)
 4952 4b00 7441     		je	.L255
 4953              		.loc 2 630 0 discriminator 1
 4954 4b02 488B55F8 		movq	-8(%rbp), %rdx
 4955 4b06 488B45D0 		movq	-48(%rbp), %rax
 4956 4b0a 4829C2   		subq	%rax, %rdx
 4957 4b0d 4889D0   		movq	%rdx, %rax
 4958 4b10 4889C7   		movq	%rax, %rdi
 4959 4b13 E8A2B6FF 		call	spaces
 4959      FF
 4960 4b18 4889C1   		movq	%rax, %rcx
 4961 4b1b 488B55D0 		movq	-48(%rbp), %rdx
 4962 4b1f 488B45C0 		movq	-64(%rbp), %rax
 4963 4b23 488D3500 		leaq	.LC38(%rip), %rsi
 4963      000000
 4964 4b2a 4889C7   		movq	%rax, %rdi
 4965 4b2d B8000000 		movl	$0, %eax
 4965      00
 4966 4b32 E8000000 		call	errRender@PLT
 4966      00
 4967 4b37 C745F00B 		movl	$11, -16(%rbp)
 4967      000000
 4968 4b3e E9B20000 		jmp	.L254
 4968      00
 4969              	.L255:
 4970              		.loc 2 630 0 discriminator 2
 4971 4b43 488345F8 		addq	$1, -8(%rbp)
 4971      01
 631:prog.c        **** 	fStatus = progOpenInternal(handle, portConfig, ptr, error);
 4972              		.loc 2 631 0 is_stmt 1 discriminator 2
 4973 4b48 488B4DC0 		movq	-64(%rbp), %rcx
 4974 4b4c 488B55F8 		movq	-8(%rbp), %rdx
 4975 4b50 488B75D0 		movq	-48(%rbp), %rsi
 4976 4b54 488B45D8 		movq	-40(%rbp), %rax
 4977 4b58 4889C7   		movq	%rax, %rdi
 4978 4b5b E82FF0FF 		call	progOpenInternal
 4978      FF
 4979 4b60 8945F4   		movl	%eax, -12(%rbp)
 632:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 4980              		.loc 2 632 0 discriminator 2
 4981 4b63 837DF400 		cmpl	$0, -12(%rbp)
 4982 4b67 741B     		je	.L256
 4983              		.loc 2 632 0 is_stmt 0 discriminator 1
 4984 4b69 488B45C0 		movq	-64(%rbp), %rax
 4985 4b6d 488D3500 		leaq	.LC39(%rip), %rsi
 4985      000000
 4986 4b74 4889C7   		movq	%rax, %rdi
 4987 4b77 E8000000 		call	errPrefix@PLT
 4987      00
 4988 4b7c 8B45F4   		movl	-12(%rbp), %eax
 4989 4b7f 8945F0   		movl	%eax, -16(%rbp)
 4990 4b82 EB71     		jmp	.L254
 4991              	.L256:
 633:prog.c        **** 	fStatus = csvfPlay(handle, csvfData, error);
 4992              		.loc 2 633 0 is_stmt 1
 4993 4b84 488B55C0 		movq	-64(%rbp), %rdx
 4994 4b88 488B4DC8 		movq	-56(%rbp), %rcx
 4995 4b8c 488B45D8 		movq	-40(%rbp), %rax
 4996 4b90 4889CE   		movq	%rcx, %rsi
 4997 4b93 4889C7   		movq	%rax, %rdi
 4998 4b96 E8000000 		call	csvfPlay@PLT
 4998      00
 4999 4b9b 8945F4   		movl	%eax, -12(%rbp)
 634:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 5000              		.loc 2 634 0
 5001 4b9e 837DF400 		cmpl	$0, -12(%rbp)
 5002 4ba2 741B     		je	.L257
 5003              		.loc 2 634 0 is_stmt 0 discriminator 1
 5004 4ba4 488B45C0 		movq	-64(%rbp), %rax
 5005 4ba8 488D3500 		leaq	.LC39(%rip), %rsi
 5005      000000
 5006 4baf 4889C7   		movq	%rax, %rdi
 5007 4bb2 E8000000 		call	errPrefix@PLT
 5007      00
 5008 4bb7 8B45F4   		movl	-12(%rbp), %eax
 5009 4bba 8945F0   		movl	%eax, -16(%rbp)
 5010 4bbd EB36     		jmp	.L254
 5011              	.L257:
 635:prog.c        **** 	fStatus = progClose(handle, error);
 5012              		.loc 2 635 0 is_stmt 1
 5013 4bbf 488B55C0 		movq	-64(%rbp), %rdx
 5014 4bc3 488B45D8 		movq	-40(%rbp), %rax
 5015 4bc7 4889D6   		movq	%rdx, %rsi
 5016 4bca 4889C7   		movq	%rax, %rdi
 5017 4bcd E8000000 		call	progClose@PLT
 5017      00
 5018 4bd2 8945F4   		movl	%eax, -12(%rbp)
 636:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jProgram()");
 5019              		.loc 2 636 0
 5020 4bd5 837DF400 		cmpl	$0, -12(%rbp)
 5021 4bd9 741A     		je	.L254
 5022              		.loc 2 636 0 is_stmt 0 discriminator 1
 5023 4bdb 488B45C0 		movq	-64(%rbp), %rax
 5024 4bdf 488D3500 		leaq	.LC39(%rip), %rsi
 5024      000000
 5025 4be6 4889C7   		movq	%rax, %rdi
 5026 4be9 E8000000 		call	errPrefix@PLT
 5026      00
 5027 4bee 8B45F4   		movl	-12(%rbp), %eax
 5028 4bf1 8945F0   		movl	%eax, -16(%rbp)
 5029 4bf4 90       		nop
 5030              	.L254:
 637:prog.c        **** cleanup:
 638:prog.c        **** 	return retVal;
 5031              		.loc 2 638 0 is_stmt 1
 5032 4bf5 8B45F0   		movl	-16(%rbp), %eax
 639:prog.c        **** }
 5033              		.loc 2 639 0
 5034 4bf8 C9       		leave
 5035              		.cfi_def_cfa 7, 8
 5036 4bf9 C3       		ret
 5037              		.cfi_endproc
 5038              	.LFE15:
 5041              	swap:
 5042              	.LFB16:
 640:prog.c        **** 
 641:prog.c        **** // Reverse the array in-place by swapping the outer items and progressing inward until we meet in
 642:prog.c        **** // the middle.
 643:prog.c        **** //
 644:prog.c        **** // Called by:
 645:prog.c        **** //   jtagScanChain()
 646:prog.c        **** //
 647:prog.c        **** static void swap(uint32 *array, uint32 numWritten) {
 5043              		.loc 2 647 0
 5044              		.cfi_startproc
 5045 4bfa 55       		pushq	%rbp
 5046              		.cfi_def_cfa_offset 16
 5047              		.cfi_offset 6, -16
 5048 4bfb 4889E5   		movq	%rsp, %rbp
 5049              		.cfi_def_cfa_register 6
 5050 4bfe 48897DD8 		movq	%rdi, -40(%rbp)
 5051 4c02 8975D4   		movl	%esi, -44(%rbp)
 648:prog.c        **** 	uint32 *hiPtr = array + numWritten - 1;  // last one
 5052              		.loc 2 648 0
 5053 4c05 8B45D4   		movl	-44(%rbp), %eax
 5054 4c08 48C1E002 		salq	$2, %rax
 5055 4c0c 488D50FC 		leaq	-4(%rax), %rdx
 5056 4c10 488B45D8 		movq	-40(%rbp), %rax
 5057 4c14 4801D0   		addq	%rdx, %rax
 5058 4c17 488945F0 		movq	%rax, -16(%rbp)
 649:prog.c        **** 	uint32 *loPtr = array; // first one
 5059              		.loc 2 649 0
 5060 4c1b 488B45D8 		movq	-40(%rbp), %rax
 5061 4c1f 488945F8 		movq	%rax, -8(%rbp)
 650:prog.c        **** 	uint32 temp;
 651:prog.c        **** 	while ( loPtr < hiPtr ) {
 5062              		.loc 2 651 0
 5063 4c23 EB2E     		jmp	.L260
 5064              	.L261:
 652:prog.c        **** 		temp = *loPtr;
 5065              		.loc 2 652 0
 5066 4c25 488B45F8 		movq	-8(%rbp), %rax
 5067 4c29 8B00     		movl	(%rax), %eax
 5068 4c2b 8945EC   		movl	%eax, -20(%rbp)
 653:prog.c        **** 		*loPtr++ = *hiPtr;
 5069              		.loc 2 653 0
 5070 4c2e 488B45F8 		movq	-8(%rbp), %rax
 5071 4c32 488D5004 		leaq	4(%rax), %rdx
 5072 4c36 488955F8 		movq	%rdx, -8(%rbp)
 5073 4c3a 488B55F0 		movq	-16(%rbp), %rdx
 5074 4c3e 8B12     		movl	(%rdx), %edx
 5075 4c40 8910     		movl	%edx, (%rax)
 654:prog.c        **** 		*hiPtr-- = temp;
 5076              		.loc 2 654 0
 5077 4c42 488B45F0 		movq	-16(%rbp), %rax
 5078 4c46 488D50FC 		leaq	-4(%rax), %rdx
 5079 4c4a 488955F0 		movq	%rdx, -16(%rbp)
 5080 4c4e 8B55EC   		movl	-20(%rbp), %edx
 5081 4c51 8910     		movl	%edx, (%rax)
 5082              	.L260:
 651:prog.c        **** 		temp = *loPtr;
 5083              		.loc 2 651 0 discriminator 1
 5084 4c53 488B45F8 		movq	-8(%rbp), %rax
 5085 4c57 483B45F0 		cmpq	-16(%rbp), %rax
 5086 4c5b 72C8     		jb	.L261
 655:prog.c        **** 	}
 656:prog.c        **** }	
 5087              		.loc 2 656 0
 5088 4c5d 5D       		popq	%rbp
 5089              		.cfi_def_cfa 7, 8
 5090 4c5e C3       		ret
 5091              		.cfi_endproc
 5092              	.LFE16:
 5094              		.globl	progOpen
 5096              	progOpen:
 5097              	.LFB17:
 657:prog.c        **** 
 658:prog.c        **** // ------------------------------------------------------------------------------------------------
 659:prog.c        **** // Implementation of public functions
 660:prog.c        **** // ------------------------------------------------------------------------------------------------
 661:prog.c        **** 
 662:prog.c        **** DLLEXPORT(FLStatus) progOpen(struct FLContext *handle, const char *portConfig, const char **error) 
 5098              		.loc 2 662 0
 5099              		.cfi_startproc
 5100 4c5f 55       		pushq	%rbp
 5101              		.cfi_def_cfa_offset 16
 5102              		.cfi_offset 6, -16
 5103 4c60 4889E5   		movq	%rsp, %rbp
 5104              		.cfi_def_cfa_register 6
 5105 4c63 4883EC20 		subq	$32, %rsp
 5106 4c67 48897DF8 		movq	%rdi, -8(%rbp)
 5107 4c6b 488975F0 		movq	%rsi, -16(%rbp)
 5108 4c6f 488955E8 		movq	%rdx, -24(%rbp)
 663:prog.c        **** 	return progOpenInternal(handle, portConfig, portConfig, error);
 5109              		.loc 2 663 0
 5110 4c73 488B4DE8 		movq	-24(%rbp), %rcx
 5111 4c77 488B55F0 		movq	-16(%rbp), %rdx
 5112 4c7b 488B75F0 		movq	-16(%rbp), %rsi
 5113 4c7f 488B45F8 		movq	-8(%rbp), %rax
 5114 4c83 4889C7   		movq	%rax, %rdi
 5115 4c86 E804EFFF 		call	progOpenInternal
 5115      FF
 664:prog.c        **** }
 5116              		.loc 2 664 0
 5117 4c8b C9       		leave
 5118              		.cfi_def_cfa 7, 8
 5119 4c8c C3       		ret
 5120              		.cfi_endproc
 5121              	.LFE17:
 5123              		.section	.rodata
 5124              	.LC40:
 5125 07b1 70726F67 		.string	"progClose()"
 5125      436C6F73 
 5125      65282900 
 5126              		.text
 5127              		.globl	progClose
 5129              	progClose:
 5130              	.LFB18:
 665:prog.c        **** 
 666:prog.c        **** DLLEXPORT(FLStatus) progClose(struct FLContext *handle, const char **error) {
 5131              		.loc 2 666 0
 5132              		.cfi_startproc
 5133 4c8d 55       		pushq	%rbp
 5134              		.cfi_def_cfa_offset 16
 5135              		.cfi_offset 6, -16
 5136 4c8e 4889E5   		movq	%rsp, %rbp
 5137              		.cfi_def_cfa_register 6
 5138 4c91 4883EC20 		subq	$32, %rsp
 5139 4c95 48897DE8 		movq	%rdi, -24(%rbp)
 5140 4c99 488975E0 		movq	%rsi, -32(%rbp)
 667:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5141              		.loc 2 667 0
 5142 4c9d C745F800 		movl	$0, -8(%rbp)
 5142      000000
 668:prog.c        **** 	FLStatus fStatus;
 669:prog.c        **** 
 670:prog.c        **** 	// Set MISO/TDO, MOSI/TDI, SS/TMS & SCK/TCK as inputs
 671:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->misoPort, handle->misoBit, PIN_INPUT, NULL, error)
 5143              		.loc 2 671 0
 5144 4ca4 488B45E8 		movq	-24(%rbp), %rax
 5145 4ca8 0FB64018 		movzbl	24(%rax), %eax
 5146 4cac 0FB6D0   		movzbl	%al, %edx
 5147 4caf 488B45E8 		movq	-24(%rbp), %rax
 5148 4cb3 0FB64017 		movzbl	23(%rax), %eax
 5149 4cb7 0FB6F0   		movzbl	%al, %esi
 5150 4cba 488B4DE0 		movq	-32(%rbp), %rcx
 5151 4cbe 488B45E8 		movq	-24(%rbp), %rax
 5152 4cc2 4989C9   		movq	%rcx, %r9
 5153 4cc5 41B80000 		movl	$0, %r8d
 5153      0000
 5154 4ccb B9030000 		movl	$3, %ecx
 5154      00
 5155 4cd0 4889C7   		movq	%rax, %rdi
 5156 4cd3 E8000000 		call	flSingleBitPortAccess@PLT
 5156      00
 5157 4cd8 8945FC   		movl	%eax, -4(%rbp)
 672:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5158              		.loc 2 672 0
 5159 4cdb 837DFC00 		cmpl	$0, -4(%rbp)
 5160 4cdf 741E     		je	.L265
 5161              		.loc 2 672 0 is_stmt 0 discriminator 1
 5162 4ce1 488B45E0 		movq	-32(%rbp), %rax
 5163 4ce5 488D3500 		leaq	.LC40(%rip), %rsi
 5163      000000
 5164 4cec 4889C7   		movq	%rax, %rdi
 5165 4cef E8000000 		call	errPrefix@PLT
 5165      00
 5166 4cf4 8B45FC   		movl	-4(%rbp), %eax
 5167 4cf7 8945F8   		movl	%eax, -8(%rbp)
 5168 4cfa E90A0100 		jmp	.L266
 5168      00
 5169              	.L265:
 673:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->mosiPort, handle->mosiBit, PIN_INPUT, NULL, error)
 5170              		.loc 2 673 0 is_stmt 1
 5171 4cff 488B45E8 		movq	-24(%rbp), %rax
 5172 4d03 0FB6401A 		movzbl	26(%rax), %eax
 5173 4d07 0FB6D0   		movzbl	%al, %edx
 5174 4d0a 488B45E8 		movq	-24(%rbp), %rax
 5175 4d0e 0FB64019 		movzbl	25(%rax), %eax
 5176 4d12 0FB6F0   		movzbl	%al, %esi
 5177 4d15 488B4DE0 		movq	-32(%rbp), %rcx
 5178 4d19 488B45E8 		movq	-24(%rbp), %rax
 5179 4d1d 4989C9   		movq	%rcx, %r9
 5180 4d20 41B80000 		movl	$0, %r8d
 5180      0000
 5181 4d26 B9030000 		movl	$3, %ecx
 5181      00
 5182 4d2b 4889C7   		movq	%rax, %rdi
 5183 4d2e E8000000 		call	flSingleBitPortAccess@PLT
 5183      00
 5184 4d33 8945FC   		movl	%eax, -4(%rbp)
 674:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5185              		.loc 2 674 0
 5186 4d36 837DFC00 		cmpl	$0, -4(%rbp)
 5187 4d3a 741E     		je	.L267
 5188              		.loc 2 674 0 is_stmt 0 discriminator 1
 5189 4d3c 488B45E0 		movq	-32(%rbp), %rax
 5190 4d40 488D3500 		leaq	.LC40(%rip), %rsi
 5190      000000
 5191 4d47 4889C7   		movq	%rax, %rdi
 5192 4d4a E8000000 		call	errPrefix@PLT
 5192      00
 5193 4d4f 8B45FC   		movl	-4(%rbp), %eax
 5194 4d52 8945F8   		movl	%eax, -8(%rbp)
 5195 4d55 E9AF0000 		jmp	.L266
 5195      00
 5196              	.L267:
 675:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->ssPort, handle->ssBit, PIN_INPUT, NULL, error);
 5197              		.loc 2 675 0 is_stmt 1
 5198 4d5a 488B45E8 		movq	-24(%rbp), %rax
 5199 4d5e 0FB6401C 		movzbl	28(%rax), %eax
 5200 4d62 0FB6D0   		movzbl	%al, %edx
 5201 4d65 488B45E8 		movq	-24(%rbp), %rax
 5202 4d69 0FB6401B 		movzbl	27(%rax), %eax
 5203 4d6d 0FB6F0   		movzbl	%al, %esi
 5204 4d70 488B4DE0 		movq	-32(%rbp), %rcx
 5205 4d74 488B45E8 		movq	-24(%rbp), %rax
 5206 4d78 4989C9   		movq	%rcx, %r9
 5207 4d7b 41B80000 		movl	$0, %r8d
 5207      0000
 5208 4d81 B9030000 		movl	$3, %ecx
 5208      00
 5209 4d86 4889C7   		movq	%rax, %rdi
 5210 4d89 E8000000 		call	flSingleBitPortAccess@PLT
 5210      00
 5211 4d8e 8945FC   		movl	%eax, -4(%rbp)
 676:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5212              		.loc 2 676 0
 5213 4d91 837DFC00 		cmpl	$0, -4(%rbp)
 5214 4d95 741B     		je	.L268
 5215              		.loc 2 676 0 is_stmt 0 discriminator 1
 5216 4d97 488B45E0 		movq	-32(%rbp), %rax
 5217 4d9b 488D3500 		leaq	.LC40(%rip), %rsi
 5217      000000
 5218 4da2 4889C7   		movq	%rax, %rdi
 5219 4da5 E8000000 		call	errPrefix@PLT
 5219      00
 5220 4daa 8B45FC   		movl	-4(%rbp), %eax
 5221 4dad 8945F8   		movl	%eax, -8(%rbp)
 5222 4db0 EB57     		jmp	.L266
 5223              	.L268:
 677:prog.c        **** 	fStatus = flSingleBitPortAccess(handle, handle->sckPort, handle->sckBit, PIN_INPUT, NULL, error);
 5224              		.loc 2 677 0 is_stmt 1
 5225 4db2 488B45E8 		movq	-24(%rbp), %rax
 5226 4db6 0FB6401E 		movzbl	30(%rax), %eax
 5227 4dba 0FB6D0   		movzbl	%al, %edx
 5228 4dbd 488B45E8 		movq	-24(%rbp), %rax
 5229 4dc1 0FB6401D 		movzbl	29(%rax), %eax
 5230 4dc5 0FB6F0   		movzbl	%al, %esi
 5231 4dc8 488B4DE0 		movq	-32(%rbp), %rcx
 5232 4dcc 488B45E8 		movq	-24(%rbp), %rax
 5233 4dd0 4989C9   		movq	%rcx, %r9
 5234 4dd3 41B80000 		movl	$0, %r8d
 5234      0000
 5235 4dd9 B9030000 		movl	$3, %ecx
 5235      00
 5236 4dde 4889C7   		movq	%rax, %rdi
 5237 4de1 E8000000 		call	flSingleBitPortAccess@PLT
 5237      00
 5238 4de6 8945FC   		movl	%eax, -4(%rbp)
 678:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "progClose()");
 5239              		.loc 2 678 0
 5240 4de9 837DFC00 		cmpl	$0, -4(%rbp)
 5241 4ded 741A     		je	.L266
 5242              		.loc 2 678 0 is_stmt 0 discriminator 1
 5243 4def 488B45E0 		movq	-32(%rbp), %rax
 5244 4df3 488D3500 		leaq	.LC40(%rip), %rsi
 5244      000000
 5245 4dfa 4889C7   		movq	%rax, %rdi
 5246 4dfd E8000000 		call	errPrefix@PLT
 5246      00
 5247 4e02 8B45FC   		movl	-4(%rbp), %eax
 5248 4e05 8945F8   		movl	%eax, -8(%rbp)
 5249 4e08 90       		nop
 5250              	.L266:
 679:prog.c        **** cleanup:
 680:prog.c        **** 	return retVal;
 5251              		.loc 2 680 0 is_stmt 1
 5252 4e09 8B45F8   		movl	-8(%rbp), %eax
 681:prog.c        **** }
 5253              		.loc 2 681 0
 5254 4e0c C9       		leave
 5255              		.cfi_def_cfa 7, 8
 5256 4e0d C3       		ret
 5257              		.cfi_endproc
 5258              	.LFE18:
 5260              		.section	.rodata
 5261              	.LC41:
 5262 07bd 6A746167 		.string	"jtagShiftInOut()"
 5262      53686966 
 5262      74496E4F 
 5262      75742829 
 5262      00
 5263              		.text
 5264              		.globl	jtagShiftInOut
 5266              	jtagShiftInOut:
 5267              	.LFB19:
 682:prog.c        **** 
 683:prog.c        **** // Shift data into and out of JTAG chain.
 684:prog.c        **** //   In pointer may be SHIFT_ZEROS (shift in zeros) or SHIFT_ONES (shift in ones).
 685:prog.c        **** //   Out pointer may be NULL (not interested in data shifted out of the chain).
 686:prog.c        **** //
 687:prog.c        **** DLLEXPORT(FLStatus) jtagShiftInOut(
 688:prog.c        **** 	struct FLContext *handle, uint32 numBits, const uint8 *inData, uint8 *outData, uint8 isLast,
 689:prog.c        **** 	const char **error)
 690:prog.c        **** {
 5268              		.loc 2 690 0
 5269              		.cfi_startproc
 5270 4e0e 55       		pushq	%rbp
 5271              		.cfi_def_cfa_offset 16
 5272              		.cfi_offset 6, -16
 5273 4e0f 4889E5   		movq	%rsp, %rbp
 5274              		.cfi_def_cfa_register 6
 5275 4e12 4883EC40 		subq	$64, %rsp
 5276 4e16 48897DE8 		movq	%rdi, -24(%rbp)
 5277 4e1a 8975E4   		movl	%esi, -28(%rbp)
 5278 4e1d 488955D8 		movq	%rdx, -40(%rbp)
 5279 4e21 48894DD0 		movq	%rcx, -48(%rbp)
 5280 4e25 4489C0   		movl	%r8d, %eax
 5281 4e28 4C894DC8 		movq	%r9, -56(%rbp)
 5282 4e2c 8845E0   		movb	%al, -32(%rbp)
 691:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 5283              		.loc 2 691 0
 5284 4e2f C745F400 		movl	$0, -12(%rbp)
 5284      000000
 692:prog.c        **** 	uint32 numBytes = bitsToBytes(numBits);
 5285              		.loc 2 692 0
 5286 4e36 8B45E4   		movl	-28(%rbp), %eax
 5287 4e39 C1E803   		shrl	$3, %eax
 5288 4e3c 89C2     		movl	%eax, %edx
 5289 4e3e 8B45E4   		movl	-28(%rbp), %eax
 5290 4e41 83E007   		andl	$7, %eax
 5291 4e44 85C0     		testl	%eax, %eax
 5292 4e46 7407     		je	.L271
 5293              		.loc 2 692 0 is_stmt 0 discriminator 1
 5294 4e48 B8010000 		movl	$1, %eax
 5294      00
 5295 4e4d EB05     		jmp	.L272
 5296              	.L271:
 5297              		.loc 2 692 0 discriminator 2
 5298 4e4f B8000000 		movl	$0, %eax
 5298      00
 5299              	.L272:
 5300              		.loc 2 692 0 discriminator 3
 5301 4e54 01D0     		addl	%edx, %eax
 5302 4e56 8945F8   		movl	%eax, -8(%rbp)
 693:prog.c        **** 	uint16 chunkSize;
 694:prog.c        **** 	uint8 mode = 0x00;
 5303              		.loc 2 694 0 is_stmt 1 discriminator 3
 5304 4e59 C645F000 		movb	$0, -16(%rbp)
 695:prog.c        **** 	bool isSending = false;
 5305              		.loc 2 695 0 discriminator 3
 5306 4e5d C645F100 		movb	$0, -15(%rbp)
 696:prog.c        **** 
 697:prog.c        **** 	if ( inData == SHIFT_ONES ) {
 5307              		.loc 2 697 0 discriminator 3
 5308 4e61 48837DD8 		cmpq	$-1, -40(%rbp)
 5308      FF
 5309 4e66 7506     		jne	.L273
 698:prog.c        **** 		mode |= bmSENDONES;
 5310              		.loc 2 698 0
 5311 4e68 804DF002 		orb	$2, -16(%rbp)
 5312 4e6c EB0B     		jmp	.L274
 5313              	.L273:
 699:prog.c        **** 	} else if ( inData != SHIFT_ZEROS ) {
 5314              		.loc 2 699 0
 5315 4e6e 48837DD8 		cmpq	$0, -40(%rbp)
 5315      00
 5316 4e73 7404     		je	.L274
 700:prog.c        **** 		isSending = true;
 5317              		.loc 2 700 0
 5318 4e75 C645F101 		movb	$1, -15(%rbp)
 5319              	.L274:
 701:prog.c        **** 	}
 702:prog.c        **** 	if ( isLast ) {
 5320              		.loc 2 702 0
 5321 4e79 807DE000 		cmpb	$0, -32(%rbp)
 5322 4e7d 7404     		je	.L275
 703:prog.c        **** 		mode |= bmISLAST;
 5323              		.loc 2 703 0
 5324 4e7f 804DF001 		orb	$1, -16(%rbp)
 5325              	.L275:
 704:prog.c        **** 	}
 705:prog.c        **** 	if ( isSending ) {
 5326              		.loc 2 705 0
 5327 4e83 807DF100 		cmpb	$0, -15(%rbp)
 5328 4e87 0F840501 		je	.L276
 5328      0000
 706:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_ISSENDING_ISRECEIVING, mode, error);
 5329              		.loc 2 706 0
 5330 4e8d 0FB655F0 		movzbl	-16(%rbp), %edx
 5331 4e91 488B4DC8 		movq	-56(%rbp), %rcx
 5332 4e95 8B75E4   		movl	-28(%rbp), %esi
 5333 4e98 488B45E8 		movq	-24(%rbp), %rax
 5334 4e9c 4989C8   		movq	%rcx, %r8
 5335 4e9f 89D1     		movl	%edx, %ecx
 5336 4ea1 BA010000 		movl	$1, %edx
 5336      00
 5337 4ea6 4889C7   		movq	%rax, %rdi
 5338 4ea9 E85EB1FF 		call	beginShift
 5338      FF
 5339 4eae 8945FC   		movl	%eax, -4(%rbp)
 707:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5340              		.loc 2 707 0
 5341 4eb1 837DFC00 		cmpl	$0, -4(%rbp)
 5342 4eb5 741E     		je	.L277
 5343              		.loc 2 707 0 is_stmt 0 discriminator 1
 5344 4eb7 488B45C8 		movq	-56(%rbp), %rax
 5345 4ebb 488D3500 		leaq	.LC41(%rip), %rsi
 5345      000000
 5346 4ec2 4889C7   		movq	%rax, %rdi
 5347 4ec5 E8000000 		call	errPrefix@PLT
 5347      00
 5348 4eca 8B45FC   		movl	-4(%rbp), %eax
 5349 4ecd 8945F4   		movl	%eax, -12(%rbp)
 5350 4ed0 E9690100 		jmp	.L278
 5350      00
 5351              	.L277:
 708:prog.c        **** 		while ( numBytes ) {
 5352              		.loc 2 708 0 is_stmt 1
 5353 4ed5 E9A90000 		jmp	.L279
 5353      00
 5354              	.L284:
 709:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5355              		.loc 2 709 0
 5356 4eda 837DF83F 		cmpl	$63, -8(%rbp)
 5357 4ede 7705     		ja	.L280
 5358              		.loc 2 709 0 is_stmt 0 discriminator 1
 5359 4ee0 8B45F8   		movl	-8(%rbp), %eax
 5360 4ee3 EB05     		jmp	.L281
 5361              	.L280:
 5362              		.loc 2 709 0 discriminator 2
 5363 4ee5 B8400000 		movl	$64, %eax
 5363      00
 5364              	.L281:
 5365              		.loc 2 709 0 discriminator 3
 5366 4eea 668945F2 		movw	%ax, -14(%rbp)
 710:prog.c        **** 			fStatus = doSend(handle, inData, chunkSize, error);
 5367              		.loc 2 710 0 is_stmt 1 discriminator 3
 5368 4eee 0FB755F2 		movzwl	-14(%rbp), %edx
 5369 4ef2 488B4DC8 		movq	-56(%rbp), %rcx
 5370 4ef6 488B75D8 		movq	-40(%rbp), %rsi
 5371 4efa 488B45E8 		movq	-24(%rbp), %rax
 5372 4efe 4889C7   		movq	%rax, %rdi
 5373 4f01 E8C2B1FF 		call	doSend
 5373      FF
 5374 4f06 8945FC   		movl	%eax, -4(%rbp)
 711:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5375              		.loc 2 711 0 discriminator 3
 5376 4f09 837DFC00 		cmpl	$0, -4(%rbp)
 5377 4f0d 741E     		je	.L282
 5378              		.loc 2 711 0 is_stmt 0 discriminator 1
 5379 4f0f 488B45C8 		movq	-56(%rbp), %rax
 5380 4f13 488D3500 		leaq	.LC41(%rip), %rsi
 5380      000000
 5381 4f1a 4889C7   		movq	%rax, %rdi
 5382 4f1d E8000000 		call	errPrefix@PLT
 5382      00
 5383 4f22 8B45FC   		movl	-4(%rbp), %eax
 5384 4f25 8945F4   		movl	%eax, -12(%rbp)
 5385 4f28 E9110100 		jmp	.L278
 5385      00
 5386              	.L282:
 712:prog.c        **** 			inData += chunkSize;
 5387              		.loc 2 712 0 is_stmt 1
 5388 4f2d 0FB745F2 		movzwl	-14(%rbp), %eax
 5389 4f31 480145D8 		addq	%rax, -40(%rbp)
 713:prog.c        **** 			fStatus = doReceive(handle, outData, chunkSize, error);
 5390              		.loc 2 713 0
 5391 4f35 0FB755F2 		movzwl	-14(%rbp), %edx
 5392 4f39 488B4DC8 		movq	-56(%rbp), %rcx
 5393 4f3d 488B75D0 		movq	-48(%rbp), %rsi
 5394 4f41 488B45E8 		movq	-24(%rbp), %rax
 5395 4f45 4889C7   		movq	%rax, %rdi
 5396 4f48 E8F4B1FF 		call	doReceive
 5396      FF
 5397 4f4d 8945FC   		movl	%eax, -4(%rbp)
 714:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5398              		.loc 2 714 0
 5399 4f50 837DFC00 		cmpl	$0, -4(%rbp)
 5400 4f54 741E     		je	.L283
 5401              		.loc 2 714 0 is_stmt 0 discriminator 1
 5402 4f56 488B45C8 		movq	-56(%rbp), %rax
 5403 4f5a 488D3500 		leaq	.LC41(%rip), %rsi
 5403      000000
 5404 4f61 4889C7   		movq	%rax, %rdi
 5405 4f64 E8000000 		call	errPrefix@PLT
 5405      00
 5406 4f69 8B45FC   		movl	-4(%rbp), %eax
 5407 4f6c 8945F4   		movl	%eax, -12(%rbp)
 5408 4f6f E9CA0000 		jmp	.L278
 5408      00
 5409              	.L283:
 715:prog.c        **** 			outData += chunkSize;
 5410              		.loc 2 715 0 is_stmt 1
 5411 4f74 0FB745F2 		movzwl	-14(%rbp), %eax
 5412 4f78 480145D0 		addq	%rax, -48(%rbp)
 716:prog.c        **** 			numBytes -= chunkSize;
 5413              		.loc 2 716 0
 5414 4f7c 0FB745F2 		movzwl	-14(%rbp), %eax
 5415 4f80 2945F8   		subl	%eax, -8(%rbp)
 5416              	.L279:
 708:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5417              		.loc 2 708 0 discriminator 1
 5418 4f83 837DF800 		cmpl	$0, -8(%rbp)
 5419 4f87 0F854DFF 		jne	.L284
 5419      FFFF
 5420 4f8d E9AC0000 		jmp	.L278
 5420      00
 5421              	.L276:
 717:prog.c        **** 		}
 718:prog.c        **** 	} else {
 719:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_NOTSENDING_ISRECEIVING, mode, error);
 5422              		.loc 2 719 0
 5423 4f92 0FB655F0 		movzbl	-16(%rbp), %edx
 5424 4f96 488B4DC8 		movq	-56(%rbp), %rcx
 5425 4f9a 8B75E4   		movl	-28(%rbp), %esi
 5426 4f9d 488B45E8 		movq	-24(%rbp), %rax
 5427 4fa1 4989C8   		movq	%rcx, %r8
 5428 4fa4 89D1     		movl	%edx, %ecx
 5429 4fa6 BA030000 		movl	$3, %edx
 5429      00
 5430 4fab 4889C7   		movq	%rax, %rdi
 5431 4fae E859B0FF 		call	beginShift
 5431      FF
 5432 4fb3 8945FC   		movl	%eax, -4(%rbp)
 720:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5433              		.loc 2 720 0
 5434 4fb6 837DFC00 		cmpl	$0, -4(%rbp)
 5435 4fba 741B     		je	.L285
 5436              		.loc 2 720 0 is_stmt 0 discriminator 1
 5437 4fbc 488B45C8 		movq	-56(%rbp), %rax
 5438 4fc0 488D3500 		leaq	.LC41(%rip), %rsi
 5438      000000
 5439 4fc7 4889C7   		movq	%rax, %rdi
 5440 4fca E8000000 		call	errPrefix@PLT
 5440      00
 5441 4fcf 8B45FC   		movl	-4(%rbp), %eax
 5442 4fd2 8945F4   		movl	%eax, -12(%rbp)
 5443 4fd5 EB67     		jmp	.L278
 5444              	.L285:
 721:prog.c        **** 		while ( numBytes ) {
 5445              		.loc 2 721 0 is_stmt 1
 5446 4fd7 EB5F     		jmp	.L286
 5447              	.L290:
 722:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5448              		.loc 2 722 0
 5449 4fd9 837DF83F 		cmpl	$63, -8(%rbp)
 5450 4fdd 7705     		ja	.L287
 5451              		.loc 2 722 0 is_stmt 0 discriminator 1
 5452 4fdf 8B45F8   		movl	-8(%rbp), %eax
 5453 4fe2 EB05     		jmp	.L288
 5454              	.L287:
 5455              		.loc 2 722 0 discriminator 2
 5456 4fe4 B8400000 		movl	$64, %eax
 5456      00
 5457              	.L288:
 5458              		.loc 2 722 0 discriminator 3
 5459 4fe9 668945F2 		movw	%ax, -14(%rbp)
 723:prog.c        **** 			fStatus = doReceive(handle, outData, chunkSize, error);
 5460              		.loc 2 723 0 is_stmt 1 discriminator 3
 5461 4fed 0FB755F2 		movzwl	-14(%rbp), %edx
 5462 4ff1 488B4DC8 		movq	-56(%rbp), %rcx
 5463 4ff5 488B75D0 		movq	-48(%rbp), %rsi
 5464 4ff9 488B45E8 		movq	-24(%rbp), %rax
 5465 4ffd 4889C7   		movq	%rax, %rdi
 5466 5000 E83CB1FF 		call	doReceive
 5466      FF
 5467 5005 8945FC   		movl	%eax, -4(%rbp)
 724:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5468              		.loc 2 724 0 discriminator 3
 5469 5008 837DFC00 		cmpl	$0, -4(%rbp)
 5470 500c 741B     		je	.L289
 5471              		.loc 2 724 0 is_stmt 0 discriminator 1
 5472 500e 488B45C8 		movq	-56(%rbp), %rax
 5473 5012 488D3500 		leaq	.LC41(%rip), %rsi
 5473      000000
 5474 5019 4889C7   		movq	%rax, %rdi
 5475 501c E8000000 		call	errPrefix@PLT
 5475      00
 5476 5021 8B45FC   		movl	-4(%rbp), %eax
 5477 5024 8945F4   		movl	%eax, -12(%rbp)
 5478 5027 EB15     		jmp	.L278
 5479              	.L289:
 725:prog.c        **** 			outData += chunkSize;
 5480              		.loc 2 725 0 is_stmt 1
 5481 5029 0FB745F2 		movzwl	-14(%rbp), %eax
 5482 502d 480145D0 		addq	%rax, -48(%rbp)
 726:prog.c        **** 			numBytes -= chunkSize;
 5483              		.loc 2 726 0
 5484 5031 0FB745F2 		movzwl	-14(%rbp), %eax
 5485 5035 2945F8   		subl	%eax, -8(%rbp)
 5486              	.L286:
 721:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5487              		.loc 2 721 0 discriminator 1
 5488 5038 837DF800 		cmpl	$0, -8(%rbp)
 5489 503c 759B     		jne	.L290
 5490              	.L278:
 727:prog.c        **** 		}
 728:prog.c        **** 	}
 729:prog.c        **** cleanup:
 730:prog.c        **** 	return retVal;
 5491              		.loc 2 730 0
 5492 503e 8B45F4   		movl	-12(%rbp), %eax
 731:prog.c        **** }
 5493              		.loc 2 731 0
 5494 5041 C9       		leave
 5495              		.cfi_def_cfa 7, 8
 5496 5042 C3       		ret
 5497              		.cfi_endproc
 5498              	.LFE19:
 5500              		.globl	jtagShiftInOnly
 5502              	jtagShiftInOnly:
 5503              	.LFB20:
 732:prog.c        **** 
 733:prog.c        **** DLLEXPORT(FLStatus) jtagShiftInOnly(
 734:prog.c        **** 	struct FLContext *handle, uint32 numBits, const uint8 *inData, uint8 isLast,
 735:prog.c        **** 	const char **error)
 736:prog.c        **** {
 5504              		.loc 2 736 0
 5505              		.cfi_startproc
 5506 5043 55       		pushq	%rbp
 5507              		.cfi_def_cfa_offset 16
 5508              		.cfi_offset 6, -16
 5509 5044 4889E5   		movq	%rsp, %rbp
 5510              		.cfi_def_cfa_register 6
 5511 5047 4883EC30 		subq	$48, %rsp
 5512 504b 48897DE8 		movq	%rdi, -24(%rbp)
 5513 504f 8975E4   		movl	%esi, -28(%rbp)
 5514 5052 488955D8 		movq	%rdx, -40(%rbp)
 5515 5056 89C8     		movl	%ecx, %eax
 5516 5058 4C8945D0 		movq	%r8, -48(%rbp)
 5517 505c 8845E0   		movb	%al, -32(%rbp)
 737:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 5518              		.loc 2 737 0
 5519 505f C745F400 		movl	$0, -12(%rbp)
 5519      000000
 738:prog.c        **** 	uint32 numBytes = bitsToBytes(numBits);
 5520              		.loc 2 738 0
 5521 5066 8B45E4   		movl	-28(%rbp), %eax
 5522 5069 C1E803   		shrl	$3, %eax
 5523 506c 89C2     		movl	%eax, %edx
 5524 506e 8B45E4   		movl	-28(%rbp), %eax
 5525 5071 83E007   		andl	$7, %eax
 5526 5074 85C0     		testl	%eax, %eax
 5527 5076 7407     		je	.L293
 5528              		.loc 2 738 0 is_stmt 0 discriminator 1
 5529 5078 B8010000 		movl	$1, %eax
 5529      00
 5530 507d EB05     		jmp	.L294
 5531              	.L293:
 5532              		.loc 2 738 0 discriminator 2
 5533 507f B8000000 		movl	$0, %eax
 5533      00
 5534              	.L294:
 5535              		.loc 2 738 0 discriminator 3
 5536 5084 01D0     		addl	%edx, %eax
 5537 5086 8945F8   		movl	%eax, -8(%rbp)
 739:prog.c        **** 	uint16 chunkSize;
 740:prog.c        **** 	uint8 mode = 0x00;
 5538              		.loc 2 740 0 is_stmt 1 discriminator 3
 5539 5089 C645F000 		movb	$0, -16(%rbp)
 741:prog.c        **** 	bool isSending = false;
 5540              		.loc 2 741 0 discriminator 3
 5541 508d C645F100 		movb	$0, -15(%rbp)
 742:prog.c        **** 	if ( inData == SHIFT_ONES ) {
 5542              		.loc 2 742 0 discriminator 3
 5543 5091 48837DD8 		cmpq	$-1, -40(%rbp)
 5543      FF
 5544 5096 7506     		jne	.L295
 743:prog.c        **** 		mode |= bmSENDONES;
 5545              		.loc 2 743 0
 5546 5098 804DF002 		orb	$2, -16(%rbp)
 5547 509c EB0B     		jmp	.L296
 5548              	.L295:
 744:prog.c        **** 	} else if ( inData != SHIFT_ZEROS ) {
 5549              		.loc 2 744 0
 5550 509e 48837DD8 		cmpq	$0, -40(%rbp)
 5550      00
 5551 50a3 7404     		je	.L296
 745:prog.c        **** 		isSending = true;
 5552              		.loc 2 745 0
 5553 50a5 C645F101 		movb	$1, -15(%rbp)
 5554              	.L296:
 746:prog.c        **** 	}
 747:prog.c        **** 	if ( isLast ) {
 5555              		.loc 2 747 0
 5556 50a9 807DE000 		cmpb	$0, -32(%rbp)
 5557 50ad 7404     		je	.L297
 748:prog.c        **** 		mode |= bmISLAST;
 5558              		.loc 2 748 0
 5559 50af 804DF001 		orb	$1, -16(%rbp)
 5560              	.L297:
 749:prog.c        **** 	}
 750:prog.c        **** 	if ( isSending ) {
 5561              		.loc 2 750 0
 5562 50b3 807DF100 		cmpb	$0, -15(%rbp)
 5563 50b7 0F84B100 		je	.L298
 5563      0000
 751:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_ISSENDING_NOTRECEIVING, mode, error);
 5564              		.loc 2 751 0
 5565 50bd 0FB655F0 		movzbl	-16(%rbp), %edx
 5566 50c1 488B4DD0 		movq	-48(%rbp), %rcx
 5567 50c5 8B75E4   		movl	-28(%rbp), %esi
 5568 50c8 488B45E8 		movq	-24(%rbp), %rax
 5569 50cc 4989C8   		movq	%rcx, %r8
 5570 50cf 89D1     		movl	%edx, %ecx
 5571 50d1 BA020000 		movl	$2, %edx
 5571      00
 5572 50d6 4889C7   		movq	%rax, %rdi
 5573 50d9 E82EAFFF 		call	beginShift
 5573      FF
 5574 50de 8945FC   		movl	%eax, -4(%rbp)
 752:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5575              		.loc 2 752 0
 5576 50e1 837DFC00 		cmpl	$0, -4(%rbp)
 5577 50e5 741E     		je	.L299
 5578              		.loc 2 752 0 is_stmt 0 discriminator 1
 5579 50e7 488B45D0 		movq	-48(%rbp), %rax
 5580 50eb 488D3500 		leaq	.LC41(%rip), %rsi
 5580      000000
 5581 50f2 4889C7   		movq	%rax, %rdi
 5582 50f5 E8000000 		call	errPrefix@PLT
 5582      00
 5583 50fa 8B45FC   		movl	-4(%rbp), %eax
 5584 50fd 8945F4   		movl	%eax, -12(%rbp)
 5585 5100 E9AD0000 		jmp	.L300
 5585      00
 5586              	.L299:
 753:prog.c        **** 		while ( numBytes ) {
 5587              		.loc 2 753 0 is_stmt 1
 5588 5105 EB5F     		jmp	.L301
 5589              	.L305:
 754:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5590              		.loc 2 754 0
 5591 5107 837DF83F 		cmpl	$63, -8(%rbp)
 5592 510b 7705     		ja	.L302
 5593              		.loc 2 754 0 is_stmt 0 discriminator 1
 5594 510d 8B45F8   		movl	-8(%rbp), %eax
 5595 5110 EB05     		jmp	.L303
 5596              	.L302:
 5597              		.loc 2 754 0 discriminator 2
 5598 5112 B8400000 		movl	$64, %eax
 5598      00
 5599              	.L303:
 5600              		.loc 2 754 0 discriminator 3
 5601 5117 668945F2 		movw	%ax, -14(%rbp)
 755:prog.c        **** 			fStatus = doSend(handle, inData, chunkSize, error);
 5602              		.loc 2 755 0 is_stmt 1 discriminator 3
 5603 511b 0FB755F2 		movzwl	-14(%rbp), %edx
 5604 511f 488B4DD0 		movq	-48(%rbp), %rcx
 5605 5123 488B75D8 		movq	-40(%rbp), %rsi
 5606 5127 488B45E8 		movq	-24(%rbp), %rax
 5607 512b 4889C7   		movq	%rax, %rdi
 5608 512e E895AFFF 		call	doSend
 5608      FF
 5609 5133 8945FC   		movl	%eax, -4(%rbp)
 756:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5610              		.loc 2 756 0 discriminator 3
 5611 5136 837DFC00 		cmpl	$0, -4(%rbp)
 5612 513a 741B     		je	.L304
 5613              		.loc 2 756 0 is_stmt 0 discriminator 1
 5614 513c 488B45D0 		movq	-48(%rbp), %rax
 5615 5140 488D3500 		leaq	.LC41(%rip), %rsi
 5615      000000
 5616 5147 4889C7   		movq	%rax, %rdi
 5617 514a E8000000 		call	errPrefix@PLT
 5617      00
 5618 514f 8B45FC   		movl	-4(%rbp), %eax
 5619 5152 8945F4   		movl	%eax, -12(%rbp)
 5620 5155 EB5B     		jmp	.L300
 5621              	.L304:
 757:prog.c        **** 			inData += chunkSize;
 5622              		.loc 2 757 0 is_stmt 1
 5623 5157 0FB745F2 		movzwl	-14(%rbp), %eax
 5624 515b 480145D8 		addq	%rax, -40(%rbp)
 758:prog.c        **** 			numBytes -= chunkSize;
 5625              		.loc 2 758 0
 5626 515f 0FB745F2 		movzwl	-14(%rbp), %eax
 5627 5163 2945F8   		subl	%eax, -8(%rbp)
 5628              	.L301:
 753:prog.c        **** 			chunkSize = (uint16)((numBytes >= 64) ? 64 : numBytes);
 5629              		.loc 2 753 0 discriminator 1
 5630 5166 837DF800 		cmpl	$0, -8(%rbp)
 5631 516a 759B     		jne	.L305
 5632 516c EB44     		jmp	.L300
 5633              	.L298:
 759:prog.c        **** 		}
 760:prog.c        **** 	} else {
 761:prog.c        **** 		fStatus = beginShift(handle, numBits, PROG_JTAG_NOTSENDING_NOTRECEIVING, mode, error);
 5634              		.loc 2 761 0
 5635 516e 0FB655F0 		movzbl	-16(%rbp), %edx
 5636 5172 488B4DD0 		movq	-48(%rbp), %rcx
 5637 5176 8B75E4   		movl	-28(%rbp), %esi
 5638 5179 488B45E8 		movq	-24(%rbp), %rax
 5639 517d 4989C8   		movq	%rcx, %r8
 5640 5180 89D1     		movl	%edx, %ecx
 5641 5182 BA040000 		movl	$4, %edx
 5641      00
 5642 5187 4889C7   		movq	%rax, %rdi
 5643 518a E87DAEFF 		call	beginShift
 5643      FF
 5644 518f 8945FC   		movl	%eax, -4(%rbp)
 762:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagShiftInOut()");
 5645              		.loc 2 762 0
 5646 5192 837DFC00 		cmpl	$0, -4(%rbp)
 5647 5196 741A     		je	.L300
 5648              		.loc 2 762 0 is_stmt 0 discriminator 1
 5649 5198 488B45D0 		movq	-48(%rbp), %rax
 5650 519c 488D3500 		leaq	.LC41(%rip), %rsi
 5650      000000
 5651 51a3 4889C7   		movq	%rax, %rdi
 5652 51a6 E8000000 		call	errPrefix@PLT
 5652      00
 5653 51ab 8B45FC   		movl	-4(%rbp), %eax
 5654 51ae 8945F4   		movl	%eax, -12(%rbp)
 5655 51b1 90       		nop
 5656              	.L300:
 763:prog.c        **** 	}
 764:prog.c        **** cleanup:
 765:prog.c        **** 	return retVal;
 5657              		.loc 2 765 0 is_stmt 1
 5658 51b2 8B45F4   		movl	-12(%rbp), %eax
 766:prog.c        **** }
 5659              		.loc 2 766 0
 5660 51b5 C9       		leave
 5661              		.cfi_def_cfa 7, 8
 5662 51b6 C3       		ret
 5663              		.cfi_endproc
 5664              	.LFE20:
 5666              		.section	.rodata
 5667              	.LC42:
 5668 07ce 6A746167 		.string	"jtagClockFSM()"
 5668      436C6F63 
 5668      6B46534D 
 5668      282900
 5669              		.text
 5670              		.globl	jtagClockFSM
 5672              	jtagClockFSM:
 5673              	.LFB21:
 767:prog.c        **** 
 768:prog.c        **** // Apply the supplied bit pattern to SS/TMS, to move the TAP to a specific state.
 769:prog.c        **** //
 770:prog.c        **** DLLEXPORT(FLStatus) jtagClockFSM(
 771:prog.c        **** 	struct FLContext *handle, uint32 bitPattern, uint8 transitionCount, const char **error)
 772:prog.c        **** {
 5674              		.loc 2 772 0
 5675              		.cfi_startproc
 5676 51b7 55       		pushq	%rbp
 5677              		.cfi_def_cfa_offset 16
 5678              		.cfi_offset 6, -16
 5679 51b8 4889E5   		movq	%rsp, %rbp
 5680              		.cfi_def_cfa_register 6
 5681 51bb 53       		pushq	%rbx
 5682 51bc 4883EC58 		subq	$88, %rsp
 5683              		.cfi_offset 3, -24
 5684 51c0 48897DC8 		movq	%rdi, -56(%rbp)
 5685 51c4 8975C4   		movl	%esi, -60(%rbp)
 5686 51c7 89D0     		movl	%edx, %eax
 5687 51c9 48894DB8 		movq	%rcx, -72(%rbp)
 5688 51cd 8845C0   		movb	%al, -64(%rbp)
 5689              		.loc 2 772 0
 5690 51d0 64488B04 		movq	%fs:40, %rax
 5690      25280000 
 5690      00
 5691 51d9 488945E8 		movq	%rax, -24(%rbp)
 5692 51dd 31C0     		xorl	%eax, %eax
 773:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5693              		.loc 2 773 0
 5694 51df C745D800 		movl	$0, -40(%rbp)
 5694      000000
 774:prog.c        **** 	USBStatus uStatus;
 775:prog.c        **** 	union {
 776:prog.c        **** 		uint32 u32;
 777:prog.c        **** 		uint8 bytes[4];
 778:prog.c        **** 	} lePattern;
 779:prog.c        **** 	lePattern.u32 = littleEndian32(bitPattern);
 5695              		.loc 2 779 0
 5696 51e6 8B45C4   		movl	-60(%rbp), %eax
 5697 51e9 89C7     		movl	%eax, %edi
 5698 51eb E810AEFF 		call	littleEndian32
 5698      FF
 5699 51f0 8945E0   		movl	%eax, -32(%rbp)
 780:prog.c        **** 	uStatus = usbControlWrite(
 5700              		.loc 2 780 0
 5701 51f3 0FB655C0 		movzbl	-64(%rbp), %edx
 5702 51f7 488B45C8 		movq	-56(%rbp), %rax
 5703 51fb 488B00   		movq	(%rax), %rax
 5704 51fe 488D75E0 		leaq	-32(%rbp), %rsi
 5705 5202 488B4DB8 		movq	-72(%rbp), %rcx
 5706 5206 48894C24 		movq	%rcx, 8(%rsp)
 5706      08
 5707 520b C7042488 		movl	$5000, (%rsp)
 5707      130000
 5708 5212 41B90400 		movl	$4, %r9d
 5708      0000
 5709 5218 4989F0   		movq	%rsi, %r8
 5710 521b B9000000 		movl	$0, %ecx
 5710      00
 5711 5220 BE820000 		movl	$130, %esi
 5711      00
 5712 5225 4889C7   		movq	%rax, %rdi
 5713 5228 E8000000 		call	usbControlWrite@PLT
 5713      00
 5714 522d 8945DC   		movl	%eax, -36(%rbp)
 781:prog.c        **** 		handle->device,
 782:prog.c        **** 		CMD_JTAG_CLOCK_FSM,       // bRequest
 783:prog.c        **** 		(uint16)transitionCount,  // wValue
 784:prog.c        **** 		0x0000,                   // wIndex
 785:prog.c        **** 		lePattern.bytes,          // bit pattern
 786:prog.c        **** 		4,                        // wLength
 787:prog.c        **** 		5000,                     // timeout (ms)
 788:prog.c        **** 		error
 789:prog.c        **** 	);
 790:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_JTAG_FSM, cleanup, "jtagClockFSM()");
 5715              		.loc 2 790 0
 5716 5230 837DDC00 		cmpl	$0, -36(%rbp)
 5717 5234 741B     		je	.L308
 5718              		.loc 2 790 0 is_stmt 0 discriminator 1
 5719 5236 488B45B8 		movq	-72(%rbp), %rax
 5720 523a 488D3500 		leaq	.LC42(%rip), %rsi
 5720      000000
 5721 5241 4889C7   		movq	%rax, %rdi
 5722 5244 E8000000 		call	errPrefix@PLT
 5722      00
 5723 5249 C745D810 		movl	$16, -40(%rbp)
 5723      000000
 5724 5250 90       		nop
 5725              	.L308:
 791:prog.c        **** cleanup:
 792:prog.c        **** 	return retVal;
 5726              		.loc 2 792 0 is_stmt 1
 5727 5251 8B45D8   		movl	-40(%rbp), %eax
 793:prog.c        **** }
 5728              		.loc 2 793 0
 5729 5254 488B5DE8 		movq	-24(%rbp), %rbx
 5730 5258 6448331C 		xorq	%fs:40, %rbx
 5730      25280000 
 5730      00
 5731 5261 7405     		je	.L310
 5732 5263 E8000000 		call	__stack_chk_fail@PLT
 5732      00
 5733              	.L310:
 5734 5268 4883C458 		addq	$88, %rsp
 5735 526c 5B       		popq	%rbx
 5736 526d 5D       		popq	%rbp
 5737              		.cfi_def_cfa 7, 8
 5738 526e C3       		ret
 5739              		.cfi_endproc
 5740              	.LFE21:
 5742              		.section	.rodata
 5743              	.LC43:
 5744 07dd 6A746167 		.string	"jtagClocks()"
 5744      436C6F63 
 5744      6B732829 
 5744      00
 5745              		.text
 5746              		.globl	jtagClocks
 5748              	jtagClocks:
 5749              	.LFB22:
 794:prog.c        **** 
 795:prog.c        **** // Cycle the SCK/TCK line for the given number of times.
 796:prog.c        **** //
 797:prog.c        **** DLLEXPORT(FLStatus) jtagClocks(struct FLContext *handle, uint32 numClocks, const char **error) {
 5750              		.loc 2 797 0
 5751              		.cfi_startproc
 5752 526f 55       		pushq	%rbp
 5753              		.cfi_def_cfa_offset 16
 5754              		.cfi_offset 6, -16
 5755 5270 4889E5   		movq	%rsp, %rbp
 5756              		.cfi_def_cfa_register 6
 5757 5273 4883EC40 		subq	$64, %rsp
 5758 5277 48897DE8 		movq	%rdi, -24(%rbp)
 5759 527b 8975E4   		movl	%esi, -28(%rbp)
 5760 527e 488955D8 		movq	%rdx, -40(%rbp)
 798:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5761              		.loc 2 798 0
 5762 5282 C745F800 		movl	$0, -8(%rbp)
 5762      000000
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 800:prog.c        **** 		handle->device,
 801:prog.c        **** 		CMD_JTAG_CLOCK,                // bRequest
 802:prog.c        **** 		(uint16)(numClocks & 0xFFFF),  // wValue
 803:prog.c        **** 		(uint16)(numClocks >> 16),     // wIndex
 5763              		.loc 2 803 0
 5764 5289 8B45E4   		movl	-28(%rbp), %eax
 5765 528c C1E810   		shrl	$16, %eax
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 5766              		.loc 2 799 0
 5767 528f 0FB7C8   		movzwl	%ax, %ecx
 802:prog.c        **** 		(uint16)(numClocks >> 16),     // wIndex
 5768              		.loc 2 802 0
 5769 5292 8B45E4   		movl	-28(%rbp), %eax
 799:prog.c        **** 	USBStatus uStatus = usbControlWrite(
 5770              		.loc 2 799 0
 5771 5295 0FB7D0   		movzwl	%ax, %edx
 5772 5298 488B45E8 		movq	-24(%rbp), %rax
 5773 529c 488B00   		movq	(%rax), %rax
 5774 529f 488B75D8 		movq	-40(%rbp), %rsi
 5775 52a3 48897424 		movq	%rsi, 8(%rsp)
 5775      08
 5776 52a8 C7042460 		movl	$60000, (%rsp)
 5776      EA0000
 5777 52af 41B90000 		movl	$0, %r9d
 5777      0000
 5778 52b5 41B80000 		movl	$0, %r8d
 5778      0000
 5779 52bb BE830000 		movl	$131, %esi
 5779      00
 5780 52c0 4889C7   		movq	%rax, %rdi
 5781 52c3 E8000000 		call	usbControlWrite@PLT
 5781      00
 5782 52c8 8945FC   		movl	%eax, -4(%rbp)
 804:prog.c        **** 		NULL,                          // no data
 805:prog.c        **** 		0,                             // wLength
 806:prog.c        **** 		60000,                         // timeout (ms)
 807:prog.c        **** 		error
 808:prog.c        **** 	);
 809:prog.c        **** 	CHECK_STATUS(uStatus, FL_PROG_JTAG_CLOCKS, cleanup, "jtagClocks()");
 5783              		.loc 2 809 0
 5784 52cb 837DFC00 		cmpl	$0, -4(%rbp)
 5785 52cf 741B     		je	.L312
 5786              		.loc 2 809 0 is_stmt 0 discriminator 1
 5787 52d1 488B45D8 		movq	-40(%rbp), %rax
 5788 52d5 488D3500 		leaq	.LC43(%rip), %rsi
 5788      000000
 5789 52dc 4889C7   		movq	%rax, %rdi
 5790 52df E8000000 		call	errPrefix@PLT
 5790      00
 5791 52e4 C745F811 		movl	$17, -8(%rbp)
 5791      000000
 5792 52eb 90       		nop
 5793              	.L312:
 810:prog.c        **** cleanup:
 811:prog.c        **** 	return retVal;
 5794              		.loc 2 811 0 is_stmt 1
 5795 52ec 8B45F8   		movl	-8(%rbp), %eax
 812:prog.c        **** }
 5796              		.loc 2 812 0
 5797 52ef C9       		leave
 5798              		.cfi_def_cfa 7, 8
 5799 52f0 C3       		ret
 5800              		.cfi_endproc
 5801              	.LFE22:
 5803              		.section	.rodata
 5804              	.LC44:
 5805 07ea 6A746167 		.string	"jtagScanChain()"
 5805      5363616E 
 5805      43686169 
 5805      6E282900 
 5806              		.text
 5807              		.globl	jtagScanChain
 5809              	jtagScanChain:
 5810              	.LFB23:
 813:prog.c        **** 
 814:prog.c        **** // Scan the JTAG chain and return an array of IDCODEs
 815:prog.c        **** //
 816:prog.c        **** DLLEXPORT(FLStatus) jtagScanChain(
 817:prog.c        **** 	struct FLContext *handle, const char *portConfig,
 818:prog.c        **** 	uint32 *numDevices, uint32 *deviceArray, uint32 arraySize,
 819:prog.c        **** 	const char **error)
 820:prog.c        **** {
 5811              		.loc 2 820 0
 5812              		.cfi_startproc
 5813 52f1 55       		pushq	%rbp
 5814              		.cfi_def_cfa_offset 16
 5815              		.cfi_offset 6, -16
 5816 52f2 4889E5   		movq	%rsp, %rbp
 5817              		.cfi_def_cfa_register 6
 5818 52f5 53       		pushq	%rbx
 5819 52f6 4883EC58 		subq	$88, %rsp
 5820              		.cfi_offset 3, -24
 5821 52fa 48897DC8 		movq	%rdi, -56(%rbp)
 5822 52fe 488975C0 		movq	%rsi, -64(%rbp)
 5823 5302 488955B8 		movq	%rdx, -72(%rbp)
 5824 5306 48894DB0 		movq	%rcx, -80(%rbp)
 5825 530a 448945AC 		movl	%r8d, -84(%rbp)
 5826 530e 4C894DA0 		movq	%r9, -96(%rbp)
 5827              		.loc 2 820 0
 5828 5312 64488B04 		movq	%fs:40, %rax
 5828      25280000 
 5828      00
 5829 531b 488945E8 		movq	%rax, -24(%rbp)
 5830 531f 31C0     		xorl	%eax, %eax
 821:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 5831              		.loc 2 821 0
 5832 5321 C745D400 		movl	$0, -44(%rbp)
 5832      000000
 822:prog.c        **** 	FLStatus fStatus;
 823:prog.c        **** 	uint32 i = 0;
 5833              		.loc 2 823 0
 5834 5328 C745D800 		movl	$0, -40(%rbp)
 5834      000000
 824:prog.c        **** 	union {
 825:prog.c        **** 		uint32 idCode;
 826:prog.c        **** 		uint8 bytes[4];
 827:prog.c        **** 	} u;
 828:prog.c        **** 	fStatus = progOpenInternal(handle, portConfig, portConfig, error);
 5835              		.loc 2 828 0
 5836 532f 488B4DA0 		movq	-96(%rbp), %rcx
 5837 5333 488B55C0 		movq	-64(%rbp), %rdx
 5838 5337 488B75C0 		movq	-64(%rbp), %rsi
 5839 533b 488B45C8 		movq	-56(%rbp), %rax
 5840 533f 4889C7   		movq	%rax, %rdi
 5841 5342 E848E8FF 		call	progOpenInternal
 5841      FF
 5842 5347 8945DC   		movl	%eax, -36(%rbp)
 829:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5843              		.loc 2 829 0
 5844 534a 837DDC00 		cmpl	$0, -36(%rbp)
 5845 534e 741E     		je	.L315
 5846              		.loc 2 829 0 is_stmt 0 discriminator 1
 5847 5350 488B45A0 		movq	-96(%rbp), %rax
 5848 5354 488D3500 		leaq	.LC44(%rip), %rsi
 5848      000000
 5849 535b 4889C7   		movq	%rax, %rdi
 5850 535e E8000000 		call	errPrefix@PLT
 5850      00
 5851 5363 8B45DC   		movl	-36(%rbp), %eax
 5852 5366 8945D4   		movl	%eax, -44(%rbp)
 5853 5369 E94F0100 		jmp	.L316
 5853      00
 5854              	.L315:
 830:prog.c        **** 
 831:prog.c        **** 	i = 0;
 5855              		.loc 2 831 0 is_stmt 1
 5856 536e C745D800 		movl	$0, -40(%rbp)
 5856      000000
 832:prog.c        **** 	fStatus = jtagClockFSM(handle, 0x0000005F, 9, error);  // Reset TAP, goto Shift-DR
 5857              		.loc 2 832 0
 5858 5375 488B55A0 		movq	-96(%rbp), %rdx
 5859 5379 488B45C8 		movq	-56(%rbp), %rax
 5860 537d 4889D1   		movq	%rdx, %rcx
 5861 5380 BA090000 		movl	$9, %edx
 5861      00
 5862 5385 BE5F0000 		movl	$95, %esi
 5862      00
 5863 538a 4889C7   		movq	%rax, %rdi
 5864 538d E8000000 		call	jtagClockFSM@PLT
 5864      00
 5865 5392 8945DC   		movl	%eax, -36(%rbp)
 833:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5866              		.loc 2 833 0
 5867 5395 837DDC00 		cmpl	$0, -36(%rbp)
 5868 5399 741E     		je	.L317
 5869              		.loc 2 833 0 is_stmt 0 discriminator 1
 5870 539b 488B45A0 		movq	-96(%rbp), %rax
 5871 539f 488D3500 		leaq	.LC44(%rip), %rsi
 5871      000000
 5872 53a6 4889C7   		movq	%rax, %rdi
 5873 53a9 E8000000 		call	errPrefix@PLT
 5873      00
 5874 53ae 8B45DC   		movl	-36(%rbp), %eax
 5875 53b1 8945D4   		movl	%eax, -44(%rbp)
 5876 53b4 E9040100 		jmp	.L316
 5876      00
 5877              	.L317:
 834:prog.c        **** 	for ( ; ; ) {
 835:prog.c        **** 		fStatus = jtagShiftInOut(handle, 32, SHIFT_ZEROS, u.bytes, false, error);
 5878              		.loc 2 835 0 is_stmt 1
 5879 53b9 488B4DA0 		movq	-96(%rbp), %rcx
 5880 53bd 488D55E0 		leaq	-32(%rbp), %rdx
 5881 53c1 488B45C8 		movq	-56(%rbp), %rax
 5882 53c5 4989C9   		movq	%rcx, %r9
 5883 53c8 41B80000 		movl	$0, %r8d
 5883      0000
 5884 53ce 4889D1   		movq	%rdx, %rcx
 5885 53d1 BA000000 		movl	$0, %edx
 5885      00
 5886 53d6 BE200000 		movl	$32, %esi
 5886      00
 5887 53db 4889C7   		movq	%rax, %rdi
 5888 53de E8000000 		call	jtagShiftInOut@PLT
 5888      00
 5889 53e3 8945DC   		movl	%eax, -36(%rbp)
 836:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5890              		.loc 2 836 0
 5891 53e6 837DDC00 		cmpl	$0, -36(%rbp)
 5892 53ea 741E     		je	.L318
 5893              		.loc 2 836 0 is_stmt 0 discriminator 1
 5894 53ec 488B45A0 		movq	-96(%rbp), %rax
 5895 53f0 488D3500 		leaq	.LC44(%rip), %rsi
 5895      000000
 5896 53f7 4889C7   		movq	%rax, %rdi
 5897 53fa E8000000 		call	errPrefix@PLT
 5897      00
 5898 53ff 8B45DC   		movl	-36(%rbp), %eax
 5899 5402 8945D4   		movl	%eax, -44(%rbp)
 5900 5405 E9B30000 		jmp	.L316
 5900      00
 5901              	.L318:
 837:prog.c        **** 		if ( u.idCode == 0x00000000 || u.idCode == U32MAX ) {
 5902              		.loc 2 837 0 is_stmt 1
 5903 540a 8B45E0   		movl	-32(%rbp), %eax
 5904 540d 85C0     		testl	%eax, %eax
 5905 540f 743F     		je	.L319
 5906              		.loc 2 837 0 is_stmt 0 discriminator 1
 5907 5411 8B45E0   		movl	-32(%rbp), %eax
 5908 5414 83F8FF   		cmpl	$-1, %eax
 5909 5417 7437     		je	.L319
 838:prog.c        **** 			break;
 839:prog.c        **** 		}
 840:prog.c        **** 		if ( deviceArray && i < arraySize ) {
 5910              		.loc 2 840 0 is_stmt 1
 5911 5419 48837DB0 		cmpq	$0, -80(%rbp)
 5911      00
 5912 541e 7427     		je	.L320
 5913              		.loc 2 840 0 is_stmt 0 discriminator 1
 5914 5420 8B45D8   		movl	-40(%rbp), %eax
 5915 5423 3B45AC   		cmpl	-84(%rbp), %eax
 5916 5426 731F     		jnb	.L320
 841:prog.c        **** 			deviceArray[i] = littleEndian32(u.idCode);
 5917              		.loc 2 841 0 is_stmt 1
 5918 5428 8B45D8   		movl	-40(%rbp), %eax
 5919 542b 488D1485 		leaq	0(,%rax,4), %rdx
 5919      00000000 
 5920 5433 488B45B0 		movq	-80(%rbp), %rax
 5921 5437 488D1C02 		leaq	(%rdx,%rax), %rbx
 5922 543b 8B45E0   		movl	-32(%rbp), %eax
 5923 543e 89C7     		movl	%eax, %edi
 5924 5440 E8BBABFF 		call	littleEndian32
 5924      FF
 5925 5445 8903     		movl	%eax, (%rbx)
 5926              	.L320:
 842:prog.c        **** 		}
 843:prog.c        **** 		i++;
 5927              		.loc 2 843 0
 5928 5447 8345D801 		addl	$1, -40(%rbp)
 844:prog.c        **** 	}
 5929              		.loc 2 844 0
 5930 544b E969FFFF 		jmp	.L317
 5930      FF
 5931              	.L319:
 845:prog.c        **** 	if ( deviceArray && i ) {
 5932              		.loc 2 845 0
 5933 5450 48837DB0 		cmpq	$0, -80(%rbp)
 5933      00
 5934 5455 7420     		je	.L321
 5935              		.loc 2 845 0 is_stmt 0 discriminator 1
 5936 5457 837DD800 		cmpl	$0, -40(%rbp)
 5937 545b 741A     		je	.L321
 846:prog.c        **** 		// The IDCODEs we have are in reverse order, so swap them to get the correct chain order.
 847:prog.c        **** 		swap(deviceArray, (i > arraySize) ? arraySize : i);
 5938              		.loc 2 847 0 is_stmt 1
 5939 545d 8B45AC   		movl	-84(%rbp), %eax
 5940 5460 3945D8   		cmpl	%eax, -40(%rbp)
 5941 5463 0F4645D8 		cmovbe	-40(%rbp), %eax
 5942 5467 89C2     		movl	%eax, %edx
 5943 5469 488B45B0 		movq	-80(%rbp), %rax
 5944 546d 89D6     		movl	%edx, %esi
 5945 546f 4889C7   		movq	%rax, %rdi
 5946 5472 E883F7FF 		call	swap
 5946      FF
 5947              	.L321:
 848:prog.c        **** 	}
 849:prog.c        **** 	if ( numDevices ) {
 5948              		.loc 2 849 0
 5949 5477 48837DB8 		cmpq	$0, -72(%rbp)
 5949      00
 5950 547c 7409     		je	.L322
 850:prog.c        **** 		*numDevices = i;
 5951              		.loc 2 850 0
 5952 547e 488B45B8 		movq	-72(%rbp), %rax
 5953 5482 8B55D8   		movl	-40(%rbp), %edx
 5954 5485 8910     		movl	%edx, (%rax)
 5955              	.L322:
 851:prog.c        **** 	}
 852:prog.c        **** 
 853:prog.c        **** 	fStatus = progClose(handle, error);
 5956              		.loc 2 853 0
 5957 5487 488B55A0 		movq	-96(%rbp), %rdx
 5958 548b 488B45C8 		movq	-56(%rbp), %rax
 5959 548f 4889D6   		movq	%rdx, %rsi
 5960 5492 4889C7   		movq	%rax, %rdi
 5961 5495 E8000000 		call	progClose@PLT
 5961      00
 5962 549a 8945DC   		movl	%eax, -36(%rbp)
 854:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "jtagScanChain()");
 5963              		.loc 2 854 0
 5964 549d 837DDC00 		cmpl	$0, -36(%rbp)
 5965 54a1 741A     		je	.L316
 5966              		.loc 2 854 0 is_stmt 0 discriminator 1
 5967 54a3 488B45A0 		movq	-96(%rbp), %rax
 5968 54a7 488D3500 		leaq	.LC44(%rip), %rsi
 5968      000000
 5969 54ae 4889C7   		movq	%rax, %rdi
 5970 54b1 E8000000 		call	errPrefix@PLT
 5970      00
 5971 54b6 8B45DC   		movl	-36(%rbp), %eax
 5972 54b9 8945D4   		movl	%eax, -44(%rbp)
 5973 54bc 90       		nop
 5974              	.L316:
 855:prog.c        **** 
 856:prog.c        **** cleanup:
 857:prog.c        **** 	return retVal;
 5975              		.loc 2 857 0 is_stmt 1
 5976 54bd 8B45D4   		movl	-44(%rbp), %eax
 858:prog.c        **** }
 5977              		.loc 2 858 0
 5978 54c0 488B5DE8 		movq	-24(%rbp), %rbx
 5979 54c4 6448331C 		xorq	%fs:40, %rbx
 5979      25280000 
 5979      00
 5980 54cd 7405     		je	.L324
 5981 54cf E8000000 		call	__stack_chk_fail@PLT
 5981      00
 5982              	.L324:
 5983 54d4 4883C458 		addq	$88, %rsp
 5984 54d8 5B       		popq	%rbx
 5985 54d9 5D       		popq	%rbp
 5986              		.cfi_def_cfa 7, 8
 5987 54da C3       		ret
 5988              		.cfi_endproc
 5989              	.LFE23:
 5991              		.section	.rodata
 5992 07fa 00000000 		.align 8
 5992      0000
 5993              	.LC45:
 5994 0800 666C5072 		.string	"flProgram(): Missing Xilinx algorithm code"
 5994      6F677261 
 5994      6D28293A 
 5994      204D6973 
 5994      73696E67 
 5995 082b 00000000 		.align 8
 5995      00
 5996              	.LC46:
 5997 0830 666C5072 		.string	"flProgram(): '%c' is not a valid Xilinx algorithm code"
 5997      6F677261 
 5997      6D28293A 
 5997      20272563 
 5997      27206973 
 5998 0867 00       		.align 8
 5999              	.LC47:
 6000 0868 666C5072 		.string	"flProgram(): Missing Altera algorithm code"
 6000      6F677261 
 6000      6D28293A 
 6000      204D6973 
 6000      73696E67 
 6001 0893 00000000 		.align 8
 6001      00
 6002              	.LC48:
 6003 0898 666C5072 		.string	"flProgram(): '%c' is not a valid Altera algorithm code"
 6003      6F677261 
 6003      6D28293A 
 6003      20272563 
 6003      27206973 
 6004 08cf 00       		.align 8
 6005              	.LC49:
 6006 08d0 666C5072 		.string	"flProgram(): Missing algorithm vendor code"
 6006      6F677261 
 6006      6D28293A 
 6006      204D6973 
 6006      73696E67 
 6007 08fb 00000000 		.align 8
 6007      00
 6008              	.LC50:
 6009 0900 666C5072 		.string	"flProgram(): '%c' is not a valid algorithm vendor code"
 6009      6F677261 
 6009      6D28293A 
 6009      20272563 
 6009      27206973 
 6010              		.text
 6011              		.globl	flProgramBlob
 6013              	flProgramBlob:
 6014              	.LFB24:
 859:prog.c        **** 
 860:prog.c        **** // Programs a device using in-memory configuration information
 861:prog.c        **** //
 862:prog.c        **** DLLEXPORT(FLStatus) flProgramBlob(
 863:prog.c        **** 	struct FLContext *handle, const char *portConfig, uint32 blobLength, const uint8 *blobData,
 864:prog.c        **** 	const char **error)
 865:prog.c        **** {
 6015              		.loc 2 865 0
 6016              		.cfi_startproc
 6017 54db 55       		pushq	%rbp
 6018              		.cfi_def_cfa_offset 16
 6019              		.cfi_offset 6, -16
 6020 54dc 4889E5   		movq	%rsp, %rbp
 6021              		.cfi_def_cfa_register 6
 6022 54df 4883EC40 		subq	$64, %rsp
 6023 54e3 48897DE8 		movq	%rdi, -24(%rbp)
 6024 54e7 488975E0 		movq	%rsi, -32(%rbp)
 6025 54eb 8955DC   		movl	%edx, -36(%rbp)
 6026 54ee 48894DD0 		movq	%rcx, -48(%rbp)
 6027 54f2 4C8945C8 		movq	%r8, -56(%rbp)
 866:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 6028              		.loc 2 866 0
 6029 54f6 C745FC00 		movl	$0, -4(%rbp)
 6029      000000
 867:prog.c        **** 	const char algoVendor = portConfig[0];
 6030              		.loc 2 867 0
 6031 54fd 488B45E0 		movq	-32(%rbp), %rax
 6032 5501 0FB600   		movzbl	(%rax), %eax
 6033 5504 8845F9   		movb	%al, -7(%rbp)
 868:prog.c        **** 	if ( algoVendor == 'X' ) {
 6034              		.loc 2 868 0
 6035 5507 807DF958 		cmpb	$88, -7(%rbp)
 6036 550b 0F85BA00 		jne	.L326
 6036      0000
 6037              	.LBB4:
 869:prog.c        **** 		// This is a Xilinx algorithm
 870:prog.c        **** 		const char algoType = portConfig[1];
 6038              		.loc 2 870 0
 6039 5511 488B45E0 		movq	-32(%rbp), %rax
 6040 5515 0FB64001 		movzbl	1(%rax), %eax
 6041 5519 8845FA   		movb	%al, -6(%rbp)
 871:prog.c        **** 		if ( algoType == 'P' ) {
 6042              		.loc 2 871 0
 6043 551c 807DFA50 		cmpb	$80, -6(%rbp)
 6044 5520 752B     		jne	.L327
 872:prog.c        **** 			// This is Xilinx Slave Parallel ("SelectMAP")
 873:prog.c        **** 			return xProgram(handle, PROG_PARALLEL, portConfig, blobData, blobLength, error);
 6045              		.loc 2 873 0
 6046 5522 488B7DC8 		movq	-56(%rbp), %rdi
 6047 5526 8B75DC   		movl	-36(%rbp), %esi
 6048 5529 488B4DD0 		movq	-48(%rbp), %rcx
 6049 552d 488B55E0 		movq	-32(%rbp), %rdx
 6050 5531 488B45E8 		movq	-24(%rbp), %rax
 6051 5535 4989F9   		movq	%rdi, %r9
 6052 5538 4189F0   		movl	%esi, %r8d
 6053 553b BE050000 		movl	$5, %esi
 6053      00
 6054 5540 4889C7   		movq	%rax, %rdi
 6055 5543 E841B5FF 		call	xProgram
 6055      FF
 6056 5548 E96B0100 		jmp	.L328
 6056      00
 6057              	.L327:
 874:prog.c        **** 		} else if ( algoType == 'S' ) {
 6058              		.loc 2 874 0
 6059 554d 807DFA53 		cmpb	$83, -6(%rbp)
 6060 5551 752B     		jne	.L329
 875:prog.c        **** 			// This is Xilinx Slave Serial
 876:prog.c        **** 			return xProgram(handle, PROG_SPI_SEND, portConfig, blobData, blobLength, error);
 6061              		.loc 2 876 0
 6062 5553 488B7DC8 		movq	-56(%rbp), %rdi
 6063 5557 8B75DC   		movl	-36(%rbp), %esi
 6064 555a 488B4DD0 		movq	-48(%rbp), %rcx
 6065 555e 488B55E0 		movq	-32(%rbp), %rdx
 6066 5562 488B45E8 		movq	-24(%rbp), %rax
 6067 5566 4989F9   		movq	%rdi, %r9
 6068 5569 4189F0   		movl	%esi, %r8d
 6069 556c BE060000 		movl	$6, %esi
 6069      00
 6070 5571 4889C7   		movq	%rax, %rdi
 6071 5574 E810B5FF 		call	xProgram
 6071      FF
 6072 5579 E93A0100 		jmp	.L328
 6072      00
 6073              	.L329:
 877:prog.c        **** 		} else if ( algoType == '\0' ) {
 6074              		.loc 2 877 0
 6075 557e 807DFA00 		cmpb	$0, -6(%rbp)
 6076 5582 751F     		jne	.L330
 878:prog.c        **** 			CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing Xilinx algorithm code");
 6077              		.loc 2 878 0 discriminator 1
 6078 5584 488B45C8 		movq	-56(%rbp), %rax
 6079 5588 488D3500 		leaq	.LC45(%rip), %rsi
 6079      000000
 6080 558f 4889C7   		movq	%rax, %rdi
 6081 5592 E8000000 		call	errPrefix@PLT
 6081      00
 6082 5597 C745FC0B 		movl	$11, -4(%rbp)
 6082      000000
 6083 559e E9120100 		jmp	.L331
 6083      00
 6084              	.L330:
 879:prog.c        **** 		} else {
 880:prog.c        **** 			CHECK_STATUS(
 6085              		.loc 2 880 0 discriminator 1
 6086 55a3 0FBE55FA 		movsbl	-6(%rbp), %edx
 6087 55a7 488B45C8 		movq	-56(%rbp), %rax
 6088 55ab 488D3500 		leaq	.LC46(%rip), %rsi
 6088      000000
 6089 55b2 4889C7   		movq	%rax, %rdi
 6090 55b5 B8000000 		movl	$0, %eax
 6090      00
 6091 55ba E8000000 		call	errRender@PLT
 6091      00
 6092 55bf C745FC0B 		movl	$11, -4(%rbp)
 6092      000000
 6093 55c6 E9EA0000 		jmp	.L331
 6093      00
 6094              	.L326:
 6095              	.LBE4:
 881:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 882:prog.c        **** 				"flProgram(): '%c' is not a valid Xilinx algorithm code", algoType);
 883:prog.c        **** 		}
 884:prog.c        **** 	} else if ( algoVendor == 'A' ) {
 6096              		.loc 2 884 0
 6097 55cb 807DF941 		cmpb	$65, -7(%rbp)
 6098 55cf 757E     		jne	.L332
 6099              	.LBB5:
 885:prog.c        **** 		// This is an Altera algorithm
 886:prog.c        **** 		const char algoType = portConfig[1];
 6100              		.loc 2 886 0
 6101 55d1 488B45E0 		movq	-32(%rbp), %rax
 6102 55d5 0FB64001 		movzbl	1(%rax), %eax
 6103 55d9 8845FB   		movb	%al, -5(%rbp)
 887:prog.c        **** 		if ( algoType == 'S' ) {
 6104              		.loc 2 887 0
 6105 55dc 807DFB53 		cmpb	$83, -5(%rbp)
 6106 55e0 7523     		jne	.L333
 888:prog.c        **** 			// This is Altera Passive Serial
 889:prog.c        **** 			return aProgram(handle, portConfig, blobData, blobLength, error);
 6107              		.loc 2 889 0
 6108 55e2 488B7DC8 		movq	-56(%rbp), %rdi
 6109 55e6 8B4DDC   		movl	-36(%rbp), %ecx
 6110 55e9 488B55D0 		movq	-48(%rbp), %rdx
 6111 55ed 488B75E0 		movq	-32(%rbp), %rsi
 6112 55f1 488B45E8 		movq	-24(%rbp), %rax
 6113 55f5 4989F8   		movq	%rdi, %r8
 6114 55f8 4889C7   		movq	%rax, %rdi
 6115 55fb E8BBD1FF 		call	aProgram
 6115      FF
 6116 5600 E9B30000 		jmp	.L328
 6116      00
 6117              	.L333:
 890:prog.c        **** 		} else if ( algoType == '\0' ) {
 6118              		.loc 2 890 0
 6119 5605 807DFB00 		cmpb	$0, -5(%rbp)
 6120 5609 751F     		jne	.L334
 891:prog.c        **** 			CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing Altera algorithm code");
 6121              		.loc 2 891 0 discriminator 1
 6122 560b 488B45C8 		movq	-56(%rbp), %rax
 6123 560f 488D3500 		leaq	.LC47(%rip), %rsi
 6123      000000
 6124 5616 4889C7   		movq	%rax, %rdi
 6125 5619 E8000000 		call	errPrefix@PLT
 6125      00
 6126 561e C745FC0B 		movl	$11, -4(%rbp)
 6126      000000
 6127 5625 E98B0000 		jmp	.L331
 6127      00
 6128              	.L334:
 892:prog.c        **** 		} else {
 893:prog.c        **** 			CHECK_STATUS(
 6129              		.loc 2 893 0 discriminator 1
 6130 562a 0FBE55FB 		movsbl	-5(%rbp), %edx
 6131 562e 488B45C8 		movq	-56(%rbp), %rax
 6132 5632 488D3500 		leaq	.LC48(%rip), %rsi
 6132      000000
 6133 5639 4889C7   		movq	%rax, %rdi
 6134 563c B8000000 		movl	$0, %eax
 6134      00
 6135 5641 E8000000 		call	errRender@PLT
 6135      00
 6136 5646 C745FC0B 		movl	$11, -4(%rbp)
 6136      000000
 6137 564d EB66     		jmp	.L331
 6138              	.L332:
 6139              	.LBE5:
 894:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
 895:prog.c        **** 				"flProgram(): '%c' is not a valid Altera algorithm code", algoType);
 896:prog.c        **** 		}
 897:prog.c        **** 	} else if ( algoVendor == 'J' ) {
 6140              		.loc 2 897 0
 6141 564f 807DF94A 		cmpb	$74, -7(%rbp)
 6142 5653 751A     		jne	.L335
 898:prog.c        **** 		// This is a JTAG algorithm
 899:prog.c        **** 		return jProgram(handle, portConfig, blobData, error);
 6143              		.loc 2 899 0
 6144 5655 488B4DC8 		movq	-56(%rbp), %rcx
 6145 5659 488B55D0 		movq	-48(%rbp), %rdx
 6146 565d 488B75E0 		movq	-32(%rbp), %rsi
 6147 5661 488B45E8 		movq	-24(%rbp), %rax
 6148 5665 4889C7   		movq	%rax, %rdi
 6149 5668 E813F4FF 		call	jProgram
 6149      FF
 6150 566d EB49     		jmp	.L328
 6151              	.L335:
 900:prog.c        **** 	} else if ( algoVendor == '\0' ) {
 6152              		.loc 2 900 0
 6153 566f 807DF900 		cmpb	$0, -7(%rbp)
 6154 5673 751C     		jne	.L336
 901:prog.c        **** 		CHECK_STATUS(true, FL_CONF_FORMAT, cleanup, "flProgram(): Missing algorithm vendor code");
 6155              		.loc 2 901 0 discriminator 1
 6156 5675 488B45C8 		movq	-56(%rbp), %rax
 6157 5679 488D3500 		leaq	.LC49(%rip), %rsi
 6157      000000
 6158 5680 4889C7   		movq	%rax, %rdi
 6159 5683 E8000000 		call	errPrefix@PLT
 6159      00
 6160 5688 C745FC0B 		movl	$11, -4(%rbp)
 6160      000000
 6161 568f EB24     		jmp	.L331
 6162              	.L336:
 902:prog.c        **** 	} else {
 903:prog.c        **** 		CHECK_STATUS(
 6163              		.loc 2 903 0 discriminator 1
 6164 5691 0FBE55F9 		movsbl	-7(%rbp), %edx
 6165 5695 488B45C8 		movq	-56(%rbp), %rax
 6166 5699 488D3500 		leaq	.LC50(%rip), %rsi
 6166      000000
 6167 56a0 4889C7   		movq	%rax, %rdi
 6168 56a3 B8000000 		movl	$0, %eax
 6168      00
 6169 56a8 E8000000 		call	errRender@PLT
 6169      00
 6170 56ad C745FC0B 		movl	$11, -4(%rbp)
 6170      000000
 6171 56b4 90       		nop
 6172              	.L331:
 904:prog.c        **** 			true, FL_CONF_FORMAT, cleanup,
 905:prog.c        **** 			"flProgram(): '%c' is not a valid algorithm vendor code", algoVendor);
 906:prog.c        **** 	}
 907:prog.c        **** cleanup:
 908:prog.c        **** 	return retVal;
 6173              		.loc 2 908 0
 6174 56b5 8B45FC   		movl	-4(%rbp), %eax
 6175              	.L328:
 909:prog.c        **** }
 6176              		.loc 2 909 0
 6177 56b8 C9       		leave
 6178              		.cfi_def_cfa 7, 8
 6179 56b9 C3       		ret
 6180              		.cfi_endproc
 6181              	.LFE24:
 6183              		.section	.rodata
 6184              	.LC51:
 6185 0937 706C6179 		.string	"playSVF()"
 6185      53564628 
 6185      2900
 6186 0941 00000000 		.align 8
 6186      000000
 6187              	.LC52:
 6188 0948 666C5072 		.string	"flProgram(): portConfig terminated before first ':'"
 6188      6F677261 
 6188      6D28293A 
 6188      20706F72 
 6188      74436F6E 
 6189 097c 00000000 		.align 8
 6190              	.LC53:
 6191 0980 666C5072 		.string	"flProgram(): progFile was NULL, and portConfig didn't specify a file"
 6191      6F677261 
 6191      6D28293A 
 6191      2070726F 
 6191      6746696C 
 6192              	.LC54:
 6193 09c5 2E737666 		.string	".svf"
 6193      00
 6194              	.LC55:
 6195 09ca 666C5072 		.string	"flProgram()"
 6195      6F677261 
 6195      6D282900 
 6196              	.LC56:
 6197 09d6 2E787376 		.string	".xsvf"
 6197      6600
 6198              	.LC57:
 6199 09dc 2E637376 		.string	".csvf"
 6199      6600
 6200 09e2 00000000 		.align 8
 6200      0000
 6201              	.LC58:
 6202 09e8 666C5072 		.string	"flProgram(): JTAG files should have .svf, .xsvf or .csvf extension"
 6202      6F677261 
 6202      6D28293A 
 6202      204A5441 
 6202      47206669 
 6203              		.text
 6204              		.globl	flProgram
 6206              	flProgram:
 6207              	.LFB25:
 910:prog.c        **** 	
 911:prog.c        **** // Programs a device using configuration information loaded from a file. If progFile is NULL,
 912:prog.c        **** // it expects to find a filename at the end of portConfig.
 913:prog.c        **** //
 914:prog.c        **** DLLEXPORT(FLStatus) flProgram(
 915:prog.c        **** 	struct FLContext *handle, const char *portConfig, const char *progFile, const char **error) {
 6208              		.loc 2 915 0
 6209              		.cfi_startproc
 6210 56ba 55       		pushq	%rbp
 6211              		.cfi_def_cfa_offset 16
 6212              		.cfi_offset 6, -16
 6213 56bb 4889E5   		movq	%rsp, %rbp
 6214              		.cfi_def_cfa_register 6
 6215 56be 4883EC60 		subq	$96, %rsp
 6216 56c2 48897DB8 		movq	%rdi, -72(%rbp)
 6217 56c6 488975B0 		movq	%rsi, -80(%rbp)
 6218 56ca 488955A8 		movq	%rdx, -88(%rbp)
 6219 56ce 48894DA0 		movq	%rcx, -96(%rbp)
 916:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 6220              		.loc 2 916 0
 6221 56d2 C745CC00 		movl	$0, -52(%rbp)
 6221      000000
 917:prog.c        **** 	const char algoVendor = portConfig[0];
 6222              		.loc 2 917 0
 6223 56d9 488B45B0 		movq	-80(%rbp), %rax
 6224 56dd 0FB600   		movzbl	(%rax), %eax
 6225 56e0 8845CB   		movb	%al, -53(%rbp)
 918:prog.c        **** 	struct Buffer fileBuf = {0,};
 6226              		.loc 2 918 0
 6227 56e3 48C745E0 		movq	$0, -32(%rbp)
 6227      00000000 
 6228 56eb 48C745E8 		movq	$0, -24(%rbp)
 6228      00000000 
 6229 56f3 48C745F0 		movq	$0, -16(%rbp)
 6229      00000000 
 6230 56fb 48C745F8 		movq	$0, -8(%rbp)
 6230      00000000 
 919:prog.c        **** 	BufferStatus bStatus = bufInitialise(&fileBuf, 0x20000, 0, error);
 6231              		.loc 2 919 0
 6232 5703 488B55A0 		movq	-96(%rbp), %rdx
 6233 5707 488D45E0 		leaq	-32(%rbp), %rax
 6234 570b 4889D1   		movq	%rdx, %rcx
 6235 570e BA000000 		movl	$0, %edx
 6235      00
 6236 5713 BE000002 		movl	$131072, %esi
 6236      00
 6237 5718 4889C7   		movq	%rax, %rdi
 6238 571b E8000000 		call	bufInitialise@PLT
 6238      00
 6239 5720 8945D0   		movl	%eax, -48(%rbp)
 920:prog.c        **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "playSVF()");
 6240              		.loc 2 920 0
 6241 5723 837DD000 		cmpl	$0, -48(%rbp)
 6242 5727 741F     		je	.L338
 6243              		.loc 2 920 0 is_stmt 0 discriminator 1
 6244 5729 488B45A0 		movq	-96(%rbp), %rax
 6245 572d 488D3500 		leaq	.LC51(%rip), %rsi
 6245      000000
 6246 5734 4889C7   		movq	%rax, %rdi
 6247 5737 E8000000 		call	errPrefix@PLT
 6247      00
 6248 573c C745CC01 		movl	$1, -52(%rbp)
 6248      000000
 6249 5743 E9870200 		jmp	.L339
 6249      00
 6250              	.L338:
 921:prog.c        **** 	if ( progFile == NULL ) {
 6251              		.loc 2 921 0 is_stmt 1
 6252 5748 48837DA8 		cmpq	$0, -88(%rbp)
 6252      00
 6253 574d 0F85A000 		jne	.L340
 6253      0000
 922:prog.c        **** 		// Expect to find prog file at the end of portConfig
 923:prog.c        **** 		progFile = portConfig;
 6254              		.loc 2 923 0
 6255 5753 488B45B0 		movq	-80(%rbp), %rax
 6256 5757 488945A8 		movq	%rax, -88(%rbp)
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6257              		.loc 2 924 0
 6258 575b EB05     		jmp	.L341
 6259              	.L343:
 925:prog.c        **** 			progFile++;
 6260              		.loc 2 925 0
 6261 575d 488345A8 		addq	$1, -88(%rbp)
 6261      01
 6262              	.L341:
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6263              		.loc 2 924 0 discriminator 1
 6264 5762 488B45A8 		movq	-88(%rbp), %rax
 6265 5766 0FB600   		movzbl	(%rax), %eax
 6266 5769 84C0     		testb	%al, %al
 6267 576b 740B     		je	.L342
 924:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6268              		.loc 2 924 0 is_stmt 0 discriminator 2
 6269 576d 488B45A8 		movq	-88(%rbp), %rax
 6270 5771 0FB600   		movzbl	(%rax), %eax
 6271 5774 3C3A     		cmpb	$58, %al
 6272 5776 75E5     		jne	.L343
 6273              	.L342:
 926:prog.c        **** 		}
 927:prog.c        **** 		CHECK_STATUS(
 6274              		.loc 2 927 0 is_stmt 1
 6275 5778 488B45A8 		movq	-88(%rbp), %rax
 6276 577c 0FB600   		movzbl	(%rax), %eax
 6277 577f 84C0     		testb	%al, %al
 6278 5781 751F     		jne	.L344
 6279              		.loc 2 927 0 is_stmt 0 discriminator 1
 6280 5783 488B45A0 		movq	-96(%rbp), %rax
 6281 5787 488D3500 		leaq	.LC52(%rip), %rsi
 6281      000000
 6282 578e 4889C7   		movq	%rax, %rdi
 6283 5791 E8000000 		call	errPrefix@PLT
 6283      00
 6284 5796 C745CC0B 		movl	$11, -52(%rbp)
 6284      000000
 6285 579d E92D0200 		jmp	.L339
 6285      00
 6286              	.L344:
 928:prog.c        **** 			*progFile == '\0', FL_CONF_FORMAT, cleanup,
 929:prog.c        **** 			"flProgram(): portConfig terminated before first ':'");
 930:prog.c        **** 		progFile++;
 6287              		.loc 2 930 0 is_stmt 1
 6288 57a2 488345A8 		addq	$1, -88(%rbp)
 6288      01
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6289              		.loc 2 931 0
 6290 57a7 EB05     		jmp	.L345
 6291              	.L347:
 932:prog.c        **** 			progFile++;
 6292              		.loc 2 932 0
 6293 57a9 488345A8 		addq	$1, -88(%rbp)
 6293      01
 6294              	.L345:
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6295              		.loc 2 931 0 discriminator 1
 6296 57ae 488B45A8 		movq	-88(%rbp), %rax
 6297 57b2 0FB600   		movzbl	(%rax), %eax
 6298 57b5 84C0     		testb	%al, %al
 6299 57b7 740B     		je	.L346
 931:prog.c        **** 		while ( *progFile && *progFile != ':' ) {
 6300              		.loc 2 931 0 is_stmt 0 discriminator 2
 6301 57b9 488B45A8 		movq	-88(%rbp), %rax
 6302 57bd 0FB600   		movzbl	(%rax), %eax
 6303 57c0 3C3A     		cmpb	$58, %al
 6304 57c2 75E5     		jne	.L347
 6305              	.L346:
 933:prog.c        **** 		}
 934:prog.c        **** 		CHECK_STATUS(
 6306              		.loc 2 934 0 is_stmt 1
 6307 57c4 488B45A8 		movq	-88(%rbp), %rax
 6308 57c8 0FB600   		movzbl	(%rax), %eax
 6309 57cb 84C0     		testb	%al, %al
 6310 57cd 751F     		jne	.L348
 6311              		.loc 2 934 0 is_stmt 0 discriminator 1
 6312 57cf 488B45A0 		movq	-96(%rbp), %rax
 6313 57d3 488D3500 		leaq	.LC53(%rip), %rsi
 6313      000000
 6314 57da 4889C7   		movq	%rax, %rdi
 6315 57dd E8000000 		call	errPrefix@PLT
 6315      00
 6316 57e2 C745CC0B 		movl	$11, -52(%rbp)
 6316      000000
 6317 57e9 E9E10100 		jmp	.L339
 6317      00
 6318              	.L348:
 935:prog.c        **** 			*progFile == '\0', FL_CONF_FORMAT, cleanup,
 936:prog.c        **** 			"flProgram(): progFile was NULL, and portConfig didn't specify a file");
 937:prog.c        **** 		progFile++;
 6319              		.loc 2 937 0 is_stmt 1
 6320 57ee 488345A8 		addq	$1, -88(%rbp)
 6320      01
 6321              	.L340:
 938:prog.c        **** 	}
 939:prog.c        **** 	if ( algoVendor == 'J' ) {
 6322              		.loc 2 939 0
 6323 57f3 807DCB4A 		cmpb	$74, -53(%rbp)
 6324 57f7 0F855201 		jne	.L349
 6324      0000
 6325              	.LBB6:
 940:prog.c        **** 		// JTAG file
 941:prog.c        **** 		const char *const ext = progFile + strlen(progFile) - 5;
 6326              		.loc 2 941 0
 6327 57fd 488B45A8 		movq	-88(%rbp), %rax
 6328 5801 4889C7   		movq	%rax, %rdi
 6329 5804 E8000000 		call	strlen@PLT
 6329      00
 6330 5809 488D50FB 		leaq	-5(%rax), %rdx
 6331 580d 488B45A8 		movq	-88(%rbp), %rax
 6332 5811 4801D0   		addq	%rdx, %rax
 6333 5814 488945D8 		movq	%rax, -40(%rbp)
 942:prog.c        **** 		if ( strcmp(".svf", ext+1) == 0 ) {
 6334              		.loc 2 942 0
 6335 5818 488B45D8 		movq	-40(%rbp), %rax
 6336 581c 4883C001 		addq	$1, %rax
 6337 5820 4889C6   		movq	%rax, %rsi
 6338 5823 488D3D00 		leaq	.LC54(%rip), %rdi
 6338      000000
 6339 582a E8000000 		call	strcmp@PLT
 6339      00
 6340 582f 85C0     		testl	%eax, %eax
 6341 5831 7547     		jne	.L350
 943:prog.c        **** 			fStatus = flLoadSvfAndConvertToCsvf(progFile, &fileBuf, NULL, error);
 6342              		.loc 2 943 0
 6343 5833 488B55A0 		movq	-96(%rbp), %rdx
 6344 5837 488D75E0 		leaq	-32(%rbp), %rsi
 6345 583b 488B45A8 		movq	-88(%rbp), %rax
 6346 583f 4889D1   		movq	%rdx, %rcx
 6347 5842 BA000000 		movl	$0, %edx
 6347      00
 6348 5847 4889C7   		movq	%rax, %rdi
 6349 584a E8000000 		call	flLoadSvfAndConvertToCsvf@PLT
 6349      00
 6350 584f 8945D4   		movl	%eax, -44(%rbp)
 944:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6351              		.loc 2 944 0
 6352 5852 837DD400 		cmpl	$0, -44(%rbp)
 6353 5856 0F84F100 		je	.L351
 6353      0000
 6354              		.loc 2 944 0 is_stmt 0 discriminator 1
 6355 585c 488B45A0 		movq	-96(%rbp), %rax
 6356 5860 488D3500 		leaq	.LC55(%rip), %rsi
 6356      000000
 6357 5867 4889C7   		movq	%rax, %rdi
 6358 586a E8000000 		call	errPrefix@PLT
 6358      00
 6359 586f 8B45D4   		movl	-44(%rbp), %eax
 6360 5872 8945CC   		movl	%eax, -52(%rbp)
 6361 5875 E9550100 		jmp	.L339
 6361      00
 6362              	.L350:
 945:prog.c        **** 		} else if ( strcmp(".xsvf", ext) == 0 ) {
 6363              		.loc 2 945 0 is_stmt 1
 6364 587a 488B45D8 		movq	-40(%rbp), %rax
 6365 587e 4889C6   		movq	%rax, %rsi
 6366 5881 488D3D00 		leaq	.LC56(%rip), %rdi
 6366      000000
 6367 5888 E8000000 		call	strcmp@PLT
 6367      00
 6368 588d 85C0     		testl	%eax, %eax
 6369 588f 7547     		jne	.L352
 946:prog.c        **** 			fStatus = flLoadXsvfAndConvertToCsvf(progFile, &fileBuf, NULL, error);
 6370              		.loc 2 946 0
 6371 5891 488B55A0 		movq	-96(%rbp), %rdx
 6372 5895 488D75E0 		leaq	-32(%rbp), %rsi
 6373 5899 488B45A8 		movq	-88(%rbp), %rax
 6374 589d 4889D1   		movq	%rdx, %rcx
 6375 58a0 BA000000 		movl	$0, %edx
 6375      00
 6376 58a5 4889C7   		movq	%rax, %rdi
 6377 58a8 E8000000 		call	flLoadXsvfAndConvertToCsvf@PLT
 6377      00
 6378 58ad 8945D4   		movl	%eax, -44(%rbp)
 947:prog.c        **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6379              		.loc 2 947 0
 6380 58b0 837DD400 		cmpl	$0, -44(%rbp)
 6381 58b4 0F849300 		je	.L351
 6381      0000
 6382              		.loc 2 947 0 is_stmt 0 discriminator 1
 6383 58ba 488B45A0 		movq	-96(%rbp), %rax
 6384 58be 488D3500 		leaq	.LC55(%rip), %rsi
 6384      000000
 6385 58c5 4889C7   		movq	%rax, %rdi
 6386 58c8 E8000000 		call	errPrefix@PLT
 6386      00
 6387 58cd 8B45D4   		movl	-44(%rbp), %eax
 6388 58d0 8945CC   		movl	%eax, -52(%rbp)
 6389 58d3 E9F70000 		jmp	.L339
 6389      00
 6390              	.L352:
 948:prog.c        **** 		} else if ( strcmp(".csvf", ext) == 0 ) {
 6391              		.loc 2 948 0 is_stmt 1
 6392 58d8 488B45D8 		movq	-40(%rbp), %rax
 6393 58dc 4889C6   		movq	%rax, %rsi
 6394 58df 488D3D00 		leaq	.LC57(%rip), %rdi
 6394      000000
 6395 58e6 E8000000 		call	strcmp@PLT
 6395      00
 6396 58eb 85C0     		testl	%eax, %eax
 6397 58ed 753F     		jne	.L353
 949:prog.c        **** 			bStatus = bufAppendFromBinaryFile(&fileBuf, progFile, error);
 6398              		.loc 2 949 0
 6399 58ef 488B55A0 		movq	-96(%rbp), %rdx
 6400 58f3 488B4DA8 		movq	-88(%rbp), %rcx
 6401 58f7 488D45E0 		leaq	-32(%rbp), %rax
 6402 58fb 4889CE   		movq	%rcx, %rsi
 6403 58fe 4889C7   		movq	%rax, %rdi
 6404 5901 E8000000 		call	bufAppendFromBinaryFile@PLT
 6404      00
 6405 5906 8945D0   		movl	%eax, -48(%rbp)
 950:prog.c        **** 			CHECK_STATUS(bStatus, FL_FILE_ERR, cleanup, "flProgram()");
 6406              		.loc 2 950 0
 6407 5909 837DD000 		cmpl	$0, -48(%rbp)
 6408 590d 743E     		je	.L351
 6409              		.loc 2 950 0 is_stmt 0 discriminator 1
 6410 590f 488B45A0 		movq	-96(%rbp), %rax
 6411 5913 488D3500 		leaq	.LC55(%rip), %rsi
 6411      000000
 6412 591a 4889C7   		movq	%rax, %rdi
 6413 591d E8000000 		call	errPrefix@PLT
 6413      00
 6414 5922 C745CC06 		movl	$6, -52(%rbp)
 6414      000000
 6415 5929 E9A10000 		jmp	.L339
 6415      00
 6416              	.L353:
 951:prog.c        **** 		} else {
 952:prog.c        **** 			CHECK_STATUS(
 6417              		.loc 2 952 0 is_stmt 1 discriminator 1
 6418 592e 488B45A0 		movq	-96(%rbp), %rax
 6419 5932 488D3500 		leaq	.LC58(%rip), %rsi
 6419      000000
 6420 5939 4889C7   		movq	%rax, %rdi
 6421 593c E8000000 		call	errPrefix@PLT
 6421      00
 6422 5941 C745CC06 		movl	$6, -52(%rbp)
 6422      000000
 6423 5948 E9820000 		jmp	.L339
 6423      00
 6424              	.L351:
 6425              	.LBE6:
 6426 594d EB3C     		jmp	.L354
 6427              	.L349:
 953:prog.c        **** 				true, FL_FILE_ERR, cleanup,
 954:prog.c        **** 				"flProgram(): JTAG files should have .svf, .xsvf or .csvf extension");
 955:prog.c        **** 		}
 956:prog.c        **** 	} else {
 957:prog.c        **** 		// Just load it
 958:prog.c        **** 		bStatus = bufAppendFromBinaryFile(&fileBuf, progFile, error);
 6428              		.loc 2 958 0
 6429 594f 488B55A0 		movq	-96(%rbp), %rdx
 6430 5953 488B4DA8 		movq	-88(%rbp), %rcx
 6431 5957 488D45E0 		leaq	-32(%rbp), %rax
 6432 595b 4889CE   		movq	%rcx, %rsi
 6433 595e 4889C7   		movq	%rax, %rdi
 6434 5961 E8000000 		call	bufAppendFromBinaryFile@PLT
 6434      00
 6435 5966 8945D0   		movl	%eax, -48(%rbp)
 959:prog.c        **** 		CHECK_STATUS(bStatus, FL_FILE_ERR, cleanup, "flProgram()");
 6436              		.loc 2 959 0
 6437 5969 837DD000 		cmpl	$0, -48(%rbp)
 6438 596d 741C     		je	.L354
 6439              		.loc 2 959 0 is_stmt 0 discriminator 1
 6440 596f 488B45A0 		movq	-96(%rbp), %rax
 6441 5973 488D3500 		leaq	.LC55(%rip), %rsi
 6441      000000
 6442 597a 4889C7   		movq	%rax, %rdi
 6443 597d E8000000 		call	errPrefix@PLT
 6443      00
 6444 5982 C745CC06 		movl	$6, -52(%rbp)
 6444      000000
 6445 5989 EB44     		jmp	.L339
 6446              	.L354:
 960:prog.c        **** 	}
 961:prog.c        **** 	fStatus = flProgramBlob(handle, portConfig, (uint32)fileBuf.length, fileBuf.data, error);
 6447              		.loc 2 961 0 is_stmt 1
 6448 598b 488B4DE0 		movq	-32(%rbp), %rcx
 6449 598f 488B45E8 		movq	-24(%rbp), %rax
 6450 5993 89C2     		movl	%eax, %edx
 6451 5995 488B7DA0 		movq	-96(%rbp), %rdi
 6452 5999 488B75B0 		movq	-80(%rbp), %rsi
 6453 599d 488B45B8 		movq	-72(%rbp), %rax
 6454 59a1 4989F8   		movq	%rdi, %r8
 6455 59a4 4889C7   		movq	%rax, %rdi
 6456 59a7 E8000000 		call	flProgramBlob@PLT
 6456      00
 6457 59ac 8945D4   		movl	%eax, -44(%rbp)
 962:prog.c        **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flProgram()");
 6458              		.loc 2 962 0
 6459 59af 837DD400 		cmpl	$0, -44(%rbp)
 6460 59b3 741A     		je	.L339
 6461              		.loc 2 962 0 is_stmt 0 discriminator 1
 6462 59b5 488B45A0 		movq	-96(%rbp), %rax
 6463 59b9 488D3500 		leaq	.LC55(%rip), %rsi
 6463      000000
 6464 59c0 4889C7   		movq	%rax, %rdi
 6465 59c3 E8000000 		call	errPrefix@PLT
 6465      00
 6466 59c8 8B45D4   		movl	-44(%rbp), %eax
 6467 59cb 8945CC   		movl	%eax, -52(%rbp)
 6468 59ce 90       		nop
 6469              	.L339:
 963:prog.c        **** cleanup:
 964:prog.c        **** 	bufDestroy(&fileBuf);
 6470              		.loc 2 964 0 is_stmt 1
 6471 59cf 488D45E0 		leaq	-32(%rbp), %rax
 6472 59d3 4889C7   		movq	%rax, %rdi
 6473 59d6 E8000000 		call	bufDestroy@PLT
 6473      00
 965:prog.c        **** 	return retVal;
 6474              		.loc 2 965 0
 6475 59db 8B45CC   		movl	-52(%rbp), %eax
 966:prog.c        **** }
 6476              		.loc 2 966 0
 6477 59de C9       		leave
 6478              		.cfi_def_cfa 7, 8
 6479 59df C3       		ret
 6480              		.cfi_endproc
 6481              	.LFE25:
 6483              		.section	.rodata
 6484 0a2b 00       		.align 2
 6487              	indexValues:
 6492              	.LC59:
 6493 0a34 666C5369 		.string	"flSingleBitPortAccess()"
 6493      6E676C65 
 6493      42697450 
 6493      6F727441 
 6493      63636573 
 6494              		.text
 6495              		.globl	flSingleBitPortAccess
 6497              	flSingleBitPortAccess:
 6498              	.LFB26:
 967:prog.c        **** 
 968:prog.c        **** // Actual values to send to microcontroller for PIN_UNUSED, PIN_HIGH, PIN_LOW and PIN_INPUT:
 969:prog.c        **** static const uint16 indexValues[] = {0xFFFF, 0x0101, 0x0001, 0x0000};
 970:prog.c        **** 
 971:prog.c        **** DLLEXPORT(FLStatus) flSingleBitPortAccess(
 972:prog.c        **** 	struct FLContext *handle, uint8 portNumber, uint8 bitNumber,
 973:prog.c        ****    uint8 pinConfig, uint8 *pinRead, const char **error)
 974:prog.c        **** {
 6499              		.loc 2 974 0
 6500              		.cfi_startproc
 6501 59e0 55       		pushq	%rbp
 6502              		.cfi_def_cfa_offset 16
 6503              		.cfi_offset 6, -16
 6504 59e1 4889E5   		movq	%rsp, %rbp
 6505              		.cfi_def_cfa_register 6
 6506 59e4 4883EC50 		subq	$80, %rsp
 6507 59e8 48897DE8 		movq	%rdi, -24(%rbp)
 6508 59ec 89C8     		movl	%ecx, %eax
 6509 59ee 4C8945D0 		movq	%r8, -48(%rbp)
 6510 59f2 4C894DC8 		movq	%r9, -56(%rbp)
 6511 59f6 408875E4 		movb	%sil, -28(%rbp)
 6512 59fa 8855E0   		movb	%dl, -32(%rbp)
 6513 59fd 8845DC   		movb	%al, -36(%rbp)
 975:prog.c        **** 	FLStatus retVal = FL_SUCCESS;
 6514              		.loc 2 975 0
 6515 5a00 C745F800 		movl	$0, -8(%rbp)
 6515      000000
 976:prog.c        **** 	USBStatus uStatus;
 977:prog.c        **** 	uint8 byte;
 978:prog.c        **** 	const uint16 value = (uint16)((bitNumber << 8) | portNumber);
 6516              		.loc 2 978 0
 6517 5a07 0FB645E0 		movzbl	-32(%rbp), %eax
 6518 5a0b C1E008   		sall	$8, %eax
 6519 5a0e 89C2     		movl	%eax, %edx
 6520 5a10 0FB645E4 		movzbl	-28(%rbp), %eax
 6521 5a14 09D0     		orl	%edx, %eax
 6522 5a16 668945F4 		movw	%ax, -12(%rbp)
 979:prog.c        **** 	const uint16 index = indexValues[pinConfig];
 6523              		.loc 2 979 0
 6524 5a1a 0FB645DC 		movzbl	-36(%rbp), %eax
 6525 5a1e 4898     		cltq
 6526 5a20 488D1400 		leaq	(%rax,%rax), %rdx
 6527 5a24 488D0500 		leaq	indexValues(%rip), %rax
 6527      000000
 6528 5a2b 0FB70402 		movzwl	(%rdx,%rax), %eax
 6529 5a2f 668945F6 		movw	%ax, -10(%rbp)
 980:prog.c        **** 	uStatus = usbControlRead(
 6530              		.loc 2 980 0
 6531 5a33 0FB74DF6 		movzwl	-10(%rbp), %ecx
 6532 5a37 0FB755F4 		movzwl	-12(%rbp), %edx
 6533 5a3b 488B45E8 		movq	-24(%rbp), %rax
 6534 5a3f 488B00   		movq	(%rax), %rax
 6535 5a42 488D7DF3 		leaq	-13(%rbp), %rdi
 6536 5a46 488B75C8 		movq	-56(%rbp), %rsi
 6537 5a4a 48897424 		movq	%rsi, 8(%rsp)
 6537      08
 6538 5a4f C70424E8 		movl	$1000, (%rsp)
 6538      030000
 6539 5a56 41B90100 		movl	$1, %r9d
 6539      0000
 6540 5a5c 4989F8   		movq	%rdi, %r8
 6541 5a5f BE850000 		movl	$133, %esi
 6541      00
 6542 5a64 4889C7   		movq	%rax, %rdi
 6543 5a67 E8000000 		call	usbControlRead@PLT
 6543      00
 6544 5a6c 8945FC   		movl	%eax, -4(%rbp)
 981:prog.c        **** 		handle->device,
 982:prog.c        **** 		CMD_PORT_BIT_IO, // bRequest
 983:prog.c        **** 		value,           // wValue
 984:prog.c        **** 		index,           // wIndex
 985:prog.c        **** 		&byte,           // buffer to receive current state of ports
 986:prog.c        **** 		1,               // wLength
 987:prog.c        **** 		1000,            // timeout (ms)
 988:prog.c        **** 		error
 989:prog.c        **** 	);
 990:prog.c        **** 	CHECK_STATUS(uStatus, FL_PORT_IO, cleanup, "flSingleBitPortAccess()");
 6545              		.loc 2 990 0
 6546 5a6f 837DFC00 		cmpl	$0, -4(%rbp)
 6547 5a73 741C     		je	.L357
 6548              		.loc 2 990 0 is_stmt 0 discriminator 1
 6549 5a75 488B45C8 		movq	-56(%rbp), %rax
 6550 5a79 488D3500 		leaq	.LC59(%rip), %rsi
 6550      000000
 6551 5a80 4889C7   		movq	%rax, %rdi
 6552 5a83 E8000000 		call	errPrefix@PLT
 6552      00
 6553 5a88 C745F815 		movl	$21, -8(%rbp)
 6553      000000
 6554 5a8f EB11     		jmp	.L358
 6555              	.L357:
 991:prog.c        **** 	if ( pinRead ) {
 6556              		.loc 2 991 0 is_stmt 1
 6557 5a91 48837DD0 		cmpq	$0, -48(%rbp)
 6557      00
 6558 5a96 740A     		je	.L358
 992:prog.c        **** 		*pinRead = byte;
 6559              		.loc 2 992 0
 6560 5a98 0FB655F3 		movzbl	-13(%rbp), %edx
 6561 5a9c 488B45D0 		movq	-48(%rbp), %rax
 6562 5aa0 8810     		movb	%dl, (%rax)
 6563              	.L358:
 993:prog.c        **** 	}
 994:prog.c        **** cleanup:
 995:prog.c        **** 	return retVal;
 6564              		.loc 2 995 0
 6565 5aa2 8B45F8   		movl	-8(%rbp), %eax
 996:prog.c        **** }
 6566              		.loc 2 996 0
 6567 5aa5 C9       		leave
 6568              		.cfi_def_cfa 7, 8
 6569 5aa6 C3       		ret
 6570              		.cfi_endproc
 6571              	.LFE26:
 6573              		.section	.rodata
 6574 0a4c 00000000 		.align 8
 6575              	.LC60:
 6576 0a50 666C4D75 		.string	"flMultiBitPortAccess(): Unexpected end of config string:\n  %s\n  %s^"
 6576      6C746942 
 6576      6974506F 
 6576      72744163 
 6576      63657373 
 6577 0a94 00000000 		.align 8
 6578              	.LC61:
 6579 0a98 666C4D75 		.string	"flMultiBitPortAccess(): Port is not valid (try 'A', 'B', 'C', etc):\n  %s\n  %s^"
 6579      6C746942 
 6579      6974506F 
 6579      72744163 
 6579      63657373 
 6580 0ae7 00       		.align 8
 6581              	.LC62:
 6582 0ae8 666C4D75 		.string	"flMultiBitPortAccess(): Bit number is not valid:\n  %s\n  %s^"
 6582      6C746942 
 6582      6974506F 
 6582      72744163 
 6582      63657373 
 6583 0b24 00000000 		.align 8
 6584              	.LC63:
 6585 0b28 666C4D75 		.string	"flMultiBitPortAccess(): Expecting '+', '-' or '?':\n  %s\n  %s^"
 6585      6C746942 
 6585      6974506F 
 6585      72744163 
 6585      63657373 
 6586 0b66 0000     		.align 8
 6587              	.LC64:
 6588 0b68 666C4D75 		.string	"flMultiBitPortAccess(): Expecting ',' or '\\0' here:\n  %s\n  %s^"
 6588      6C746942 
 6588      6974506F 
 6588      72744163 
 6588      63657373 
 6589              		.text
 6590              		.globl	flMultiBitPortAccess
 6592              	flMultiBitPortAccess:
 6593              	.LFB27:
 997:prog.c        **** 
 998:prog.c        **** DLLEXPORT(FLStatus) flMultiBitPortAccess(
 999:prog.c        **** 	struct FLContext *handle, const char *portConfig, uint32 *readState, const char **error)
1000:prog.c        **** {
 6594              		.loc 2 1000 0
 6595              		.cfi_startproc
 6596 5aa7 55       		pushq	%rbp
 6597              		.cfi_def_cfa_offset 16
 6598              		.cfi_offset 6, -16
 6599 5aa8 4889E5   		movq	%rsp, %rbp
 6600              		.cfi_def_cfa_register 6
 6601 5aab 4883EC40 		subq	$64, %rsp
 6602 5aaf 48897DD8 		movq	%rdi, -40(%rbp)
 6603 5ab3 488975D0 		movq	%rsi, -48(%rbp)
 6604 5ab7 488955C8 		movq	%rdx, -56(%rbp)
 6605 5abb 48894DC0 		movq	%rcx, -64(%rbp)
1001:prog.c        **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 6606              		.loc 2 1001 0
 6607 5abf C745E800 		movl	$0, -24(%rbp)
 6607      000000
1002:prog.c        **** 	const char *ptr = portConfig;
 6608              		.loc 2 1002 0
 6609 5ac6 488B45D0 		movq	-48(%rbp), %rax
 6610 5aca 488945F8 		movq	%rax, -8(%rbp)
1003:prog.c        **** 	uint32 result = 0;
 6611              		.loc 2 1003 0
 6612 5ace C745EC00 		movl	$0, -20(%rbp)
 6612      000000
 6613              	.L375:
1004:prog.c        **** 	uint8 thisPort, thisBit;
1005:prog.c        **** 	char ch;
1006:prog.c        **** 	PinConfig pinConfig;
1007:prog.c        **** 	uint8 bitState;
1008:prog.c        **** 	do {
1009:prog.c        **** 		GET_PAIR(thisPort, thisBit, "flMultiBitPortAccess");
 6614              		.loc 2 1009 0
 6615 5ad5 488B45F8 		movq	-8(%rbp), %rax
 6616 5ad9 0FB600   		movzbl	(%rax), %eax
 6617 5adc 8845E5   		movb	%al, -27(%rbp)
 6618 5adf 807DE500 		cmpb	$0, -27(%rbp)
 6619 5ae3 7544     		jne	.L361
 6620              		.loc 2 1009 0 is_stmt 0 discriminator 1
 6621 5ae5 488B45F8 		movq	-8(%rbp), %rax
 6622 5ae9 4889C2   		movq	%rax, %rdx
 6623 5aec 488B45D0 		movq	-48(%rbp), %rax
 6624 5af0 4829C2   		subq	%rax, %rdx
 6625 5af3 4889D0   		movq	%rdx, %rax
 6626 5af6 4889C7   		movq	%rax, %rdi
 6627 5af9 E8BCA6FF 		call	spaces
 6627      FF
 6628 5afe 4889C1   		movq	%rax, %rcx
 6629 5b01 488B55D0 		movq	-48(%rbp), %rdx
 6630 5b05 488B45C0 		movq	-64(%rbp), %rax
 6631 5b09 488D3500 		leaq	.LC60(%rip), %rsi
 6631      000000
 6632 5b10 4889C7   		movq	%rax, %rdi
 6633 5b13 B8000000 		movl	$0, %eax
 6633      00
 6634 5b18 E8000000 		call	errRender@PLT
 6634      00
 6635 5b1d C745E80B 		movl	$11, -24(%rbp)
 6635      000000
 6636 5b24 E9B80200 		jmp	.L362
 6636      00
 6637              	.L361:
 6638              		.loc 2 1009 0 discriminator 2
 6639 5b29 807DE540 		cmpb	$64, -27(%rbp)
 6640 5b2d 7E06     		jle	.L363
 6641 5b2f 807DE55A 		cmpb	$90, -27(%rbp)
 6642 5b33 7E44     		jle	.L364
 6643              	.L363:
 6644              		.loc 2 1009 0 discriminator 1
 6645 5b35 488B45F8 		movq	-8(%rbp), %rax
 6646 5b39 4889C2   		movq	%rax, %rdx
 6647 5b3c 488B45D0 		movq	-48(%rbp), %rax
 6648 5b40 4829C2   		subq	%rax, %rdx
 6649 5b43 4889D0   		movq	%rdx, %rax
 6650 5b46 4889C7   		movq	%rax, %rdi
 6651 5b49 E86CA6FF 		call	spaces
 6651      FF
 6652 5b4e 4889C1   		movq	%rax, %rcx
 6653 5b51 488B55D0 		movq	-48(%rbp), %rdx
 6654 5b55 488B45C0 		movq	-64(%rbp), %rax
 6655 5b59 488D3500 		leaq	.LC61(%rip), %rsi
 6655      000000
 6656 5b60 4889C7   		movq	%rax, %rdi
 6657 5b63 B8000000 		movl	$0, %eax
 6657      00
 6658 5b68 E8000000 		call	errRender@PLT
 6658      00
 6659 5b6d C745E80B 		movl	$11, -24(%rbp)
 6659      000000
 6660 5b74 E9680200 		jmp	.L362
 6660      00
 6661              	.L364:
 6662 5b79 0FB645E5 		movzbl	-27(%rbp), %eax
 6663 5b7d 83E841   		subl	$65, %eax
 6664 5b80 8845E6   		movb	%al, -26(%rbp)
 6665 5b83 488B45F8 		movq	-8(%rbp), %rax
 6666 5b87 4883C001 		addq	$1, %rax
 6667 5b8b 488945F8 		movq	%rax, -8(%rbp)
 6668 5b8f 488B45F8 		movq	-8(%rbp), %rax
 6669 5b93 0FB600   		movzbl	(%rax), %eax
 6670 5b96 8845E5   		movb	%al, -27(%rbp)
 6671 5b99 807DE500 		cmpb	$0, -27(%rbp)
 6672 5b9d 7544     		jne	.L365
 6673 5b9f 488B45F8 		movq	-8(%rbp), %rax
 6674 5ba3 4889C2   		movq	%rax, %rdx
 6675 5ba6 488B45D0 		movq	-48(%rbp), %rax
 6676 5baa 4829C2   		subq	%rax, %rdx
 6677 5bad 4889D0   		movq	%rdx, %rax
 6678 5bb0 4889C7   		movq	%rax, %rdi
 6679 5bb3 E802A6FF 		call	spaces
 6679      FF
 6680 5bb8 4889C1   		movq	%rax, %rcx
 6681 5bbb 488B55D0 		movq	-48(%rbp), %rdx
 6682 5bbf 488B45C0 		movq	-64(%rbp), %rax
 6683 5bc3 488D3500 		leaq	.LC60(%rip), %rsi
 6683      000000
 6684 5bca 4889C7   		movq	%rax, %rdi
 6685 5bcd B8000000 		movl	$0, %eax
 6685      00
 6686 5bd2 E8000000 		call	errRender@PLT
 6686      00
 6687 5bd7 C745E80B 		movl	$11, -24(%rbp)
 6687      000000
 6688 5bde E9FE0100 		jmp	.L362
 6688      00
 6689              	.L365:
 6690              		.loc 2 1009 0 discriminator 2
 6691 5be3 807DE52F 		cmpb	$47, -27(%rbp)
 6692 5be7 7E06     		jle	.L366
 6693 5be9 807DE539 		cmpb	$57, -27(%rbp)
 6694 5bed 7E44     		jle	.L367
 6695              	.L366:
 6696              		.loc 2 1009 0 discriminator 1
 6697 5bef 488B45F8 		movq	-8(%rbp), %rax
 6698 5bf3 4889C2   		movq	%rax, %rdx
 6699 5bf6 488B45D0 		movq	-48(%rbp), %rax
 6700 5bfa 4829C2   		subq	%rax, %rdx
 6701 5bfd 4889D0   		movq	%rdx, %rax
 6702 5c00 4889C7   		movq	%rax, %rdi
 6703 5c03 E8B2A5FF 		call	spaces
 6703      FF
 6704 5c08 4889C1   		movq	%rax, %rcx
 6705 5c0b 488B55D0 		movq	-48(%rbp), %rdx
 6706 5c0f 488B45C0 		movq	-64(%rbp), %rax
 6707 5c13 488D3500 		leaq	.LC62(%rip), %rsi
 6707      000000
 6708 5c1a 4889C7   		movq	%rax, %rdi
 6709 5c1d B8000000 		movl	$0, %eax
 6709      00
 6710 5c22 E8000000 		call	errRender@PLT
 6710      00
 6711 5c27 C745E80B 		movl	$11, -24(%rbp)
 6711      000000
 6712 5c2e E9AE0100 		jmp	.L362
 6712      00
 6713              	.L367:
 6714 5c33 488B45F8 		movq	-8(%rbp), %rax
 6715 5c37 488D4DF8 		leaq	-8(%rbp), %rcx
 6716 5c3b BA0A0000 		movl	$10, %edx
 6716      00
 6717 5c40 4889CE   		movq	%rcx, %rsi
 6718 5c43 4889C7   		movq	%rax, %rdi
 6719 5c46 E8000000 		call	strtoul@PLT
 6719      00
 6720 5c4b 8845E7   		movb	%al, -25(%rbp)
1010:prog.c        **** 		GET_CHAR("flMultiBitPortAccess");
 6721              		.loc 2 1010 0 is_stmt 1 discriminator 1
 6722 5c4e 488B45F8 		movq	-8(%rbp), %rax
 6723 5c52 0FB600   		movzbl	(%rax), %eax
 6724 5c55 8845E5   		movb	%al, -27(%rbp)
 6725 5c58 807DE500 		cmpb	$0, -27(%rbp)
 6726 5c5c 7544     		jne	.L368
 6727 5c5e 488B45F8 		movq	-8(%rbp), %rax
 6728 5c62 4889C2   		movq	%rax, %rdx
 6729 5c65 488B45D0 		movq	-48(%rbp), %rax
 6730 5c69 4829C2   		subq	%rax, %rdx
 6731 5c6c 4889D0   		movq	%rdx, %rax
 6732 5c6f 4889C7   		movq	%rax, %rdi
 6733 5c72 E843A5FF 		call	spaces
 6733      FF
 6734 5c77 4889C1   		movq	%rax, %rcx
 6735 5c7a 488B55D0 		movq	-48(%rbp), %rdx
 6736 5c7e 488B45C0 		movq	-64(%rbp), %rax
 6737 5c82 488D3500 		leaq	.LC60(%rip), %rsi
 6737      000000
 6738 5c89 4889C7   		movq	%rax, %rdi
 6739 5c8c B8000000 		movl	$0, %eax
 6739      00
 6740 5c91 E8000000 		call	errRender@PLT
 6740      00
 6741 5c96 C745E80B 		movl	$11, -24(%rbp)
 6741      000000
 6742 5c9d E93F0100 		jmp	.L362
 6742      00
 6743              	.L368:
1011:prog.c        **** 		if ( ch == '+' ) {
 6744              		.loc 2 1011 0
 6745 5ca2 807DE52B 		cmpb	$43, -27(%rbp)
 6746 5ca6 7509     		jne	.L369
1012:prog.c        **** 			pinConfig = PIN_HIGH;
 6747              		.loc 2 1012 0
 6748 5ca8 C745F001 		movl	$1, -16(%rbp)
 6748      000000
 6749 5caf EB62     		jmp	.L370
 6750              	.L369:
1013:prog.c        **** 		} else if ( ch == '-' ) {
 6751              		.loc 2 1013 0
 6752 5cb1 807DE52D 		cmpb	$45, -27(%rbp)
 6753 5cb5 7509     		jne	.L371
1014:prog.c        **** 			pinConfig = PIN_LOW;
 6754              		.loc 2 1014 0
 6755 5cb7 C745F002 		movl	$2, -16(%rbp)
 6755      000000
 6756 5cbe EB53     		jmp	.L370
 6757              	.L371:
1015:prog.c        **** 		} else if ( ch == '?' ) {
 6758              		.loc 2 1015 0
 6759 5cc0 807DE53F 		cmpb	$63, -27(%rbp)
 6760 5cc4 7509     		jne	.L372
1016:prog.c        **** 			pinConfig = PIN_INPUT;
 6761              		.loc 2 1016 0
 6762 5cc6 C745F003 		movl	$3, -16(%rbp)
 6762      000000
 6763 5ccd EB44     		jmp	.L370
 6764              	.L372:
1017:prog.c        **** 		} else {
1018:prog.c        **** 			CHECK_STATUS(
 6765              		.loc 2 1018 0 discriminator 1
 6766 5ccf 488B45F8 		movq	-8(%rbp), %rax
 6767 5cd3 4889C2   		movq	%rax, %rdx
 6768 5cd6 488B45D0 		movq	-48(%rbp), %rax
 6769 5cda 4829C2   		subq	%rax, %rdx
 6770 5cdd 4889D0   		movq	%rdx, %rax
 6771 5ce0 4889C7   		movq	%rax, %rdi
 6772 5ce3 E8D2A4FF 		call	spaces
 6772      FF
 6773 5ce8 4889C1   		movq	%rax, %rcx
 6774 5ceb 488B55D0 		movq	-48(%rbp), %rdx
 6775 5cef 488B45C0 		movq	-64(%rbp), %rax
 6776 5cf3 488D3500 		leaq	.LC63(%rip), %rsi
 6776      000000
 6777 5cfa 4889C7   		movq	%rax, %rdi
 6778 5cfd B8000000 		movl	$0, %eax
 6778      00
 6779 5d02 E8000000 		call	errRender@PLT
 6779      00
 6780 5d07 C745E80B 		movl	$11, -24(%rbp)
 6780      000000
 6781 5d0e E9CE0000 		jmp	.L362
 6781      00
 6782              	.L370:
1019:prog.c        **** 				true, FL_CONF_FORMAT, cleanup,
1020:prog.c        **** 				"flMultiBitPortAccess(): Expecting '+', '-' or '?':\n  %s\n  %s^", portConfig, spaces(ptr-portC
1021:prog.c        **** 		}
1022:prog.c        **** 		fStatus = flSingleBitPortAccess(handle, thisPort, thisBit, pinConfig, &bitState, error);
 6783              		.loc 2 1022 0
 6784 5d13 8B45F0   		movl	-16(%rbp), %eax
 6785 5d16 0FB6C8   		movzbl	%al, %ecx
 6786 5d19 0FB655E7 		movzbl	-25(%rbp), %edx
 6787 5d1d 0FB675E6 		movzbl	-26(%rbp), %esi
 6788 5d21 4C8B45C0 		movq	-64(%rbp), %r8
 6789 5d25 488D7DE4 		leaq	-28(%rbp), %rdi
 6790 5d29 488B45D8 		movq	-40(%rbp), %rax
 6791 5d2d 4D89C1   		movq	%r8, %r9
 6792 5d30 4989F8   		movq	%rdi, %r8
 6793 5d33 4889C7   		movq	%rax, %rdi
 6794 5d36 E8000000 		call	flSingleBitPortAccess@PLT
 6794      00
 6795 5d3b 8945F4   		movl	%eax, -12(%rbp)
1023:prog.c        **** 		CHECK_STATUS(fStatus, fStatus, cleanup);
 6796              		.loc 2 1023 0
 6797 5d3e 837DF400 		cmpl	$0, -12(%rbp)
 6798 5d42 740B     		je	.L373
 6799              		.loc 2 1023 0 is_stmt 0 discriminator 1
 6800 5d44 8B45F4   		movl	-12(%rbp), %eax
 6801 5d47 8945E8   		movl	%eax, -24(%rbp)
 6802 5d4a E9920000 		jmp	.L362
 6802      00
 6803              	.L373:
1024:prog.c        **** 		result <<= 1;
 6804              		.loc 2 1024 0 is_stmt 1
 6805 5d4f D165EC   		sall	-20(%rbp)
1025:prog.c        **** 		if ( bitState ) {
 6806              		.loc 2 1025 0
 6807 5d52 0FB645E4 		movzbl	-28(%rbp), %eax
 6808 5d56 84C0     		testb	%al, %al
 6809 5d58 7404     		je	.L374
1026:prog.c        **** 			result |= 1;
 6810              		.loc 2 1026 0
 6811 5d5a 834DEC01 		orl	$1, -20(%rbp)
 6812              	.L374:
1027:prog.c        **** 		}
1028:prog.c        **** 		ptr++;
 6813              		.loc 2 1028 0
 6814 5d5e 488B45F8 		movq	-8(%rbp), %rax
 6815 5d62 4883C001 		addq	$1, %rax
 6816 5d66 488945F8 		movq	%rax, -8(%rbp)
1029:prog.c        **** 		ch = *ptr++;
 6817              		.loc 2 1029 0
 6818 5d6a 488B45F8 		movq	-8(%rbp), %rax
 6819 5d6e 488D5001 		leaq	1(%rax), %rdx
 6820 5d72 488955F8 		movq	%rdx, -8(%rbp)
 6821 5d76 0FB600   		movzbl	(%rax), %eax
 6822 5d79 8845E5   		movb	%al, -27(%rbp)
1030:prog.c        **** 	} while ( ch == ',' );
 6823              		.loc 2 1030 0
 6824 5d7c 807DE52C 		cmpb	$44, -27(%rbp)
 6825 5d80 0F844FFD 		je	.L375
 6825      FFFF
1031:prog.c        **** 	CHECK_STATUS(
 6826              		.loc 2 1031 0
 6827 5d86 807DE500 		cmpb	$0, -27(%rbp)
 6828 5d8a 7445     		je	.L376
 6829              		.loc 2 1031 0 is_stmt 0 discriminator 1
 6830 5d8c 488B45F8 		movq	-8(%rbp), %rax
 6831 5d90 4889C2   		movq	%rax, %rdx
 6832 5d93 488B45D0 		movq	-48(%rbp), %rax
 6833 5d97 4829C2   		subq	%rax, %rdx
 6834 5d9a 4889D0   		movq	%rdx, %rax
 6835 5d9d 4883E801 		subq	$1, %rax
 6836 5da1 4889C7   		movq	%rax, %rdi
 6837 5da4 E811A4FF 		call	spaces
 6837      FF
 6838 5da9 4889C1   		movq	%rax, %rcx
 6839 5dac 488B55D0 		movq	-48(%rbp), %rdx
 6840 5db0 488B45C0 		movq	-64(%rbp), %rax
 6841 5db4 488D3500 		leaq	.LC64(%rip), %rsi
 6841      000000
 6842 5dbb 4889C7   		movq	%rax, %rdi
 6843 5dbe B8000000 		movl	$0, %eax
 6843      00
 6844 5dc3 E8000000 		call	errRender@PLT
 6844      00
 6845 5dc8 C745E80B 		movl	$11, -24(%rbp)
 6845      000000
 6846 5dcf EB10     		jmp	.L362
 6847              	.L376:
1032:prog.c        **** 		ch != '\0', FL_CONF_FORMAT, cleanup,
1033:prog.c        **** 		"flMultiBitPortAccess(): Expecting ',' or '\\0' here:\n  %s\n  %s^", portConfig, spaces(ptr-portC
1034:prog.c        **** 	if ( readState ) {
 6848              		.loc 2 1034 0 is_stmt 1
 6849 5dd1 48837DC8 		cmpq	$0, -56(%rbp)
 6849      00
 6850 5dd6 7409     		je	.L362
1035:prog.c        **** 		*readState = result;
 6851              		.loc 2 1035 0
 6852 5dd8 488B45C8 		movq	-56(%rbp), %rax
 6853 5ddc 8B55EC   		movl	-20(%rbp), %edx
 6854 5ddf 8910     		movl	%edx, (%rax)
 6855              	.L362:
1036:prog.c        **** 	}
1037:prog.c        **** cleanup:
1038:prog.c        **** 	return retVal;
 6856              		.loc 2 1038 0
 6857 5de1 8B45E8   		movl	-24(%rbp), %eax
1039:prog.c        **** }
 6858              		.loc 2 1039 0
 6859 5de4 C9       		leave
 6860              		.cfi_def_cfa 7, 8
 6861 5de5 C3       		ret
 6862              		.cfi_endproc
 6863              	.LFE27:
 6865              	.Letext0:
 6866              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 6867              		.file 4 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/libs/libusbwrap/libusbwrap.h"
 6868              		.file 5 "libfpgalink.h"
 6869              		.file 6 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-/makestuff/libs/libbuffer/libbuffer.h"
 6870              		.file 7 "private.h"
 6871              		.file 8 "vendorCommands.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 prog.c
     /tmp/cc48k4OX.s:5      .text:0000000000000000 littleEndian32
     /tmp/cc48k4OX.s:30     .text:000000000000000c beginShift
     /tmp/cc48k4OX.s:109    .text:00000000000000c8 doSend
     /tmp/cc48k4OX.s:167    .text:0000000000000141 doReceive
     /tmp/cc48k4OX.s:226    .text:00000000000001ba spaces
     /tmp/cc48k4OX.s:270    .text:00000000000001e2 populateMap
     /tmp/cc48k4OX.s:620    .text:000000000000063f portMap
     /tmp/cc48k4OX.s:683    .text:00000000000006dc makeLookup
     /tmp/cc48k4OX.s:877    .text:0000000000000897 dataWrite
     /tmp/cc48k4OX.s:1100   .text:0000000000000a89 xProgram
     /tmp/cc48k4OX.s:6497   .text:00000000000059e0 flSingleBitPortAccess
     /tmp/cc48k4OX.s:2849   .text:00000000000027bb aProgram
     /tmp/cc48k4OX.s:4029   .text:0000000000003b8f progOpenInternal
     /tmp/cc48k4OX.s:4907   .text:0000000000004a80 jProgram
     /tmp/cc48k4OX.s:5129   .text:0000000000004c8d progClose
     /tmp/cc48k4OX.s:5041   .text:0000000000004bfa swap
     /tmp/cc48k4OX.s:5096   .text:0000000000004c5f progOpen
     /tmp/cc48k4OX.s:5266   .text:0000000000004e0e jtagShiftInOut
     /tmp/cc48k4OX.s:5502   .text:0000000000005043 jtagShiftInOnly
     /tmp/cc48k4OX.s:5672   .text:00000000000051b7 jtagClockFSM
     /tmp/cc48k4OX.s:5748   .text:000000000000526f jtagClocks
     /tmp/cc48k4OX.s:5809   .text:00000000000052f1 jtagScanChain
     /tmp/cc48k4OX.s:6013   .text:00000000000054db flProgramBlob
     /tmp/cc48k4OX.s:6206   .text:00000000000056ba flProgram
     /tmp/cc48k4OX.s:6487   .rodata:0000000000000a2c indexValues
     /tmp/cc48k4OX.s:6592   .text:0000000000005aa7 flMultiBitPortAccess

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
usbControlWrite
errPrefix
__stack_chk_fail
usbBulkWrite
usbBulkRead
errRender
strtoul
flSelectConduit
csvfPlay
bufInitialise
strlen
strcmp
flLoadSvfAndConvertToCsvf
flLoadXsvfAndConvertToCsvf
bufAppendFromBinaryFile
bufDestroy
usbControlRead
