   1              		.file	"svf2csvf.c"
   2              		.text
   3              	.Ltext0:
   5              	getHexNibble:
   6              	.LFB4:
   7              		.file 1 "svf2csvf.c"
   1:svf2csvf.c    **** /*
   2:svf2csvf.c    ****  * Copyright (C) 2009-2012 Chris McClelland
   3:svf2csvf.c    ****  *
   4:svf2csvf.c    ****  * This program is free software: you can redistribute it and/or modify
   5:svf2csvf.c    ****  * it under the terms of the GNU Lesser General Public License as published by
   6:svf2csvf.c    ****  * the Free Software Foundation, either version 3 of the License, or
   7:svf2csvf.c    ****  * (at your option) any later version.
   8:svf2csvf.c    ****  *
   9:svf2csvf.c    ****  * This program is distributed in the hope that it will be useful,
  10:svf2csvf.c    ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:svf2csvf.c    ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:svf2csvf.c    ****  * GNU Lesser General Public License for more details.
  13:svf2csvf.c    ****  *
  14:svf2csvf.c    ****  * You should have received a copy of the GNU Lesser General Public License
  15:svf2csvf.c    ****  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:svf2csvf.c    ****  */
  17:svf2csvf.c    **** #include <stdlib.h>
  18:svf2csvf.c    **** #include <string.h>
  19:svf2csvf.c    **** #include <makestuff.h>
  20:svf2csvf.c    **** #include <libbuffer.h>
  21:svf2csvf.c    **** #include <liberror.h>
  22:svf2csvf.c    **** #include "svf2csvf.h"
  23:svf2csvf.c    **** #include "xsvf.h"
  24:svf2csvf.c    **** #include "private.h"
  25:svf2csvf.c    **** 
  26:svf2csvf.c    **** static FLStatus shiftLeft(
  27:svf2csvf.c    **** 	struct Buffer *buffer, uint32 numBits, uint32 shiftCount, const char **error
  28:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  29:svf2csvf.c    **** 
  30:svf2csvf.c    **** static FLStatus initBitStore(
  31:svf2csvf.c    **** 	struct BitStore *store, const char **error
  32:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  33:svf2csvf.c    **** 
  34:svf2csvf.c    **** static FLStatus processLine(
  35:svf2csvf.c    **** 	struct BitStore *store,
  36:svf2csvf.c    **** 	uint32 newLength, const char *tdi, const char *tdo, const char *mask,
  37:svf2csvf.c    **** 	const char **error
  38:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  39:svf2csvf.c    **** 
  40:svf2csvf.c    **** static FLStatus appendSwapped(
  41:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *src, uint32 count, const char **error
  42:svf2csvf.c    **** ) WARN_UNUSED_RESULT;
  43:svf2csvf.c    **** 
  44:svf2csvf.c    **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
   8              		.loc 1 44 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 89F8     		movl	%edi, %eax
  16 0006 488975F0 		movq	%rsi, -16(%rbp)
  17 000a 8845FC   		movb	%al, -4(%rbp)
  45:svf2csvf.c    **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
  18              		.loc 1 45 0
  19 000d 807DFC2F 		cmpb	$47, -4(%rbp)
  20 0011 7E1A     		jle	.L2
  21              		.loc 1 45 0 is_stmt 0 discriminator 1
  22 0013 807DFC39 		cmpb	$57, -4(%rbp)
  23 0017 7F14     		jg	.L2
  46:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - '0');
  24              		.loc 1 46 0 is_stmt 1
  25 0019 0FB645FC 		movzbl	-4(%rbp), %eax
  26 001d 8D50D0   		leal	-48(%rax), %edx
  27 0020 488B45F0 		movq	-16(%rbp), %rax
  28 0024 8810     		movb	%dl, (%rax)
  47:svf2csvf.c    **** 		return false;
  29              		.loc 1 47 0
  30 0026 B8000000 		movl	$0, %eax
  30      00
  31 002b EB45     		jmp	.L3
  32              	.L2:
  48:svf2csvf.c    **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
  33              		.loc 1 48 0
  34 002d 807DFC60 		cmpb	$96, -4(%rbp)
  35 0031 7E1A     		jle	.L4
  36              		.loc 1 48 0 is_stmt 0 discriminator 1
  37 0033 807DFC66 		cmpb	$102, -4(%rbp)
  38 0037 7F14     		jg	.L4
  49:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
  39              		.loc 1 49 0 is_stmt 1
  40 0039 0FB645FC 		movzbl	-4(%rbp), %eax
  41 003d 8D50A9   		leal	-87(%rax), %edx
  42 0040 488B45F0 		movq	-16(%rbp), %rax
  43 0044 8810     		movb	%dl, (%rax)
  50:svf2csvf.c    **** 		return false;
  44              		.loc 1 50 0
  45 0046 B8000000 		movl	$0, %eax
  45      00
  46 004b EB25     		jmp	.L3
  47              	.L4:
  51:svf2csvf.c    **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
  48              		.loc 1 51 0
  49 004d 807DFC40 		cmpb	$64, -4(%rbp)
  50 0051 7E1A     		jle	.L5
  51              		.loc 1 51 0 is_stmt 0 discriminator 1
  52 0053 807DFC46 		cmpb	$70, -4(%rbp)
  53 0057 7F14     		jg	.L5
  52:svf2csvf.c    **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
  54              		.loc 1 52 0 is_stmt 1
  55 0059 0FB645FC 		movzbl	-4(%rbp), %eax
  56 005d 8D50C9   		leal	-55(%rax), %edx
  57 0060 488B45F0 		movq	-16(%rbp), %rax
  58 0064 8810     		movb	%dl, (%rax)
  53:svf2csvf.c    **** 		return false;
  59              		.loc 1 53 0
  60 0066 B8000000 		movl	$0, %eax
  60      00
  61 006b EB05     		jmp	.L3
  62              	.L5:
  54:svf2csvf.c    **** 	} else {
  55:svf2csvf.c    **** 		return true;
  63              		.loc 1 55 0
  64 006d B8010000 		movl	$1, %eax
  64      00
  65              	.L3:
  56:svf2csvf.c    **** 	}
  57:svf2csvf.c    **** }
  66              		.loc 1 57 0
  67 0072 5D       		popq	%rbp
  68              		.cfi_def_cfa 7, 8
  69 0073 C3       		ret
  70              		.cfi_endproc
  71              	.LFE4:
  74              	getHexByte:
  75              	.LFB5:
  58:svf2csvf.c    **** 
  59:svf2csvf.c    **** static int getHexByte(const char *p, uint8 *byte) {
  76              		.loc 1 59 0
  77              		.cfi_startproc
  78 0074 55       		pushq	%rbp
  79              		.cfi_def_cfa_offset 16
  80              		.cfi_offset 6, -16
  81 0075 4889E5   		movq	%rsp, %rbp
  82              		.cfi_def_cfa_register 6
  83 0078 4883EC20 		subq	$32, %rsp
  84 007c 48897DE8 		movq	%rdi, -24(%rbp)
  85 0080 488975E0 		movq	%rsi, -32(%rbp)
  60:svf2csvf.c    **** 	uint8 upperNibble;
  61:svf2csvf.c    **** 	uint8 lowerNibble;
  62:svf2csvf.c    **** 	if ( !getHexNibble(p[0], &upperNibble) && !getHexNibble(p[1], &lowerNibble) ) {
  86              		.loc 1 62 0
  87 0084 488B45E8 		movq	-24(%rbp), %rax
  88 0088 0FB600   		movzbl	(%rax), %eax
  89 008b 0FBEC0   		movsbl	%al, %eax
  90 008e 488D55FE 		leaq	-2(%rbp), %rdx
  91 0092 4889D6   		movq	%rdx, %rsi
  92 0095 89C7     		movl	%eax, %edi
  93 0097 E864FFFF 		call	getHexNibble
  93      FF
  94 009c 83F001   		xorl	$1, %eax
  95 009f 84C0     		testb	%al, %al
  96 00a1 7449     		je	.L7
  97              		.loc 1 62 0 is_stmt 0 discriminator 1
  98 00a3 488B45E8 		movq	-24(%rbp), %rax
  99 00a7 4883C001 		addq	$1, %rax
 100 00ab 0FB600   		movzbl	(%rax), %eax
 101 00ae 0FBEC0   		movsbl	%al, %eax
 102 00b1 488D55FF 		leaq	-1(%rbp), %rdx
 103 00b5 4889D6   		movq	%rdx, %rsi
 104 00b8 89C7     		movl	%eax, %edi
 105 00ba E841FFFF 		call	getHexNibble
 105      FF
 106 00bf 83F001   		xorl	$1, %eax
 107 00c2 84C0     		testb	%al, %al
 108 00c4 7426     		je	.L7
  63:svf2csvf.c    **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 109              		.loc 1 63 0 is_stmt 1
 110 00c6 0FB645FE 		movzbl	-2(%rbp), %eax
 111 00ca 0FB6C0   		movzbl	%al, %eax
 112 00cd C1E004   		sall	$4, %eax
 113 00d0 89C2     		movl	%eax, %edx
 114 00d2 0FB645FF 		movzbl	-1(%rbp), %eax
 115 00d6 09D0     		orl	%edx, %eax
 116 00d8 89C2     		movl	%eax, %edx
 117 00da 488B45E0 		movq	-32(%rbp), %rax
 118 00de 8810     		movb	%dl, (%rax)
  64:svf2csvf.c    **** 		byte += 2;
 119              		.loc 1 64 0
 120 00e0 488345E0 		addq	$2, -32(%rbp)
 120      02
  65:svf2csvf.c    **** 		return 0;
 121              		.loc 1 65 0
 122 00e5 B8000000 		movl	$0, %eax
 122      00
 123 00ea EB05     		jmp	.L9
 124              	.L7:
  66:svf2csvf.c    **** 	} else {
  67:svf2csvf.c    **** 		return 1;
 125              		.loc 1 67 0
 126 00ec B8010000 		movl	$1, %eax
 126      00
 127              	.L9:
  68:svf2csvf.c    **** 	}
  69:svf2csvf.c    **** }
 128              		.loc 1 69 0
 129 00f1 C9       		leave
 130              		.cfi_def_cfa 7, 8
 131 00f2 C3       		ret
 132              		.cfi_endproc
 133              	.LFE5:
 135              		.globl	readLongBE
 137              	readLongBE:
 138              	.LFB6:
  70:svf2csvf.c    **** 
  71:svf2csvf.c    **** uint32 readLongBE(const uint8 *p) {
 139              		.loc 1 71 0
 140              		.cfi_startproc
 141 00f3 55       		pushq	%rbp
 142              		.cfi_def_cfa_offset 16
 143              		.cfi_offset 6, -16
 144 00f4 4889E5   		movq	%rsp, %rbp
 145              		.cfi_def_cfa_register 6
 146 00f7 48897DE8 		movq	%rdi, -24(%rbp)
  72:svf2csvf.c    **** 	uint32 result;
  73:svf2csvf.c    **** 	result = p[0];
 147              		.loc 1 73 0
 148 00fb 488B45E8 		movq	-24(%rbp), %rax
 149 00ff 0FB600   		movzbl	(%rax), %eax
 150 0102 0FB6C0   		movzbl	%al, %eax
 151 0105 8945FC   		movl	%eax, -4(%rbp)
  74:svf2csvf.c    **** 	result <<= 8;
 152              		.loc 1 74 0
 153 0108 C165FC08 		sall	$8, -4(%rbp)
  75:svf2csvf.c    **** 	result |= p[1];
 154              		.loc 1 75 0
 155 010c 488B45E8 		movq	-24(%rbp), %rax
 156 0110 4883C001 		addq	$1, %rax
 157 0114 0FB600   		movzbl	(%rax), %eax
 158 0117 0FB6C0   		movzbl	%al, %eax
 159 011a 0945FC   		orl	%eax, -4(%rbp)
  76:svf2csvf.c    **** 	result <<= 8;
 160              		.loc 1 76 0
 161 011d C165FC08 		sall	$8, -4(%rbp)
  77:svf2csvf.c    **** 	result |= p[2];
 162              		.loc 1 77 0
 163 0121 488B45E8 		movq	-24(%rbp), %rax
 164 0125 4883C002 		addq	$2, %rax
 165 0129 0FB600   		movzbl	(%rax), %eax
 166 012c 0FB6C0   		movzbl	%al, %eax
 167 012f 0945FC   		orl	%eax, -4(%rbp)
  78:svf2csvf.c    **** 	result <<= 8;
 168              		.loc 1 78 0
 169 0132 C165FC08 		sall	$8, -4(%rbp)
  79:svf2csvf.c    **** 	result |= p[3];
 170              		.loc 1 79 0
 171 0136 488B45E8 		movq	-24(%rbp), %rax
 172 013a 4883C003 		addq	$3, %rax
 173 013e 0FB600   		movzbl	(%rax), %eax
 174 0141 0FB6C0   		movzbl	%al, %eax
 175 0144 0945FC   		orl	%eax, -4(%rbp)
  80:svf2csvf.c    **** 	return result;
 176              		.loc 1 80 0
 177 0147 8B45FC   		movl	-4(%rbp), %eax
  81:svf2csvf.c    **** }
 178              		.loc 1 81 0
 179 014a 5D       		popq	%rbp
 180              		.cfi_def_cfa 7, 8
 181 014b C3       		ret
 182              		.cfi_endproc
 183              	.LFE6:
 185              		.section	.rodata
 186              		.align 8
 187              	.LC0:
 188 0000 72656164 		.string	"readBytes(): I need an even number of hex digits"
 188      42797465 
 188      7328293A 
 188      2049206E 
 188      65656420 
 189              	.LC1:
 190 0031 72656164 		.string	"readBytes()"
 190      42797465 
 190      73282900 
 191              		.text
 192              		.globl	readBytes
 194              	readBytes:
 195              	.LFB7:
  82:svf2csvf.c    **** 
  83:svf2csvf.c    **** FLStatus readBytes(
  84:svf2csvf.c    **** 	struct Buffer *buffer, const char *hexDigits, const char **error)
  85:svf2csvf.c    **** {
 196              		.loc 1 85 0
 197              		.cfi_startproc
 198 014c 55       		pushq	%rbp
 199              		.cfi_def_cfa_offset 16
 200              		.cfi_offset 6, -16
 201 014d 4889E5   		movq	%rsp, %rbp
 202              		.cfi_def_cfa_register 6
 203 0150 4883EC40 		subq	$64, %rsp
 204 0154 48897DD8 		movq	%rdi, -40(%rbp)
 205 0158 488975D0 		movq	%rsi, -48(%rbp)
 206 015c 488955C8 		movq	%rdx, -56(%rbp)
  86:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 207              		.loc 1 86 0
 208 0160 C745EC00 		movl	$0, -20(%rbp)
 208      000000
  87:svf2csvf.c    **** 	uint32 length = (uint32)strlen(hexDigits);
 209              		.loc 1 87 0
 210 0167 488B45D0 		movq	-48(%rbp), %rax
 211 016b 4889C7   		movq	%rax, %rdi
 212 016e E8000000 		call	strlen@PLT
 212      00
 213 0173 8945F0   		movl	%eax, -16(%rbp)
  88:svf2csvf.c    **** 	uint8 *p = buffer->data;
 214              		.loc 1 88 0
 215 0176 488B45D8 		movq	-40(%rbp), %rax
 216 017a 488B00   		movq	(%rax), %rax
 217 017d 488945F8 		movq	%rax, -8(%rbp)
  89:svf2csvf.c    **** 	BufferStatus bStatus;
  90:svf2csvf.c    **** 	CHECK_STATUS(
 218              		.loc 1 90 0
 219 0181 8B45F0   		movl	-16(%rbp), %eax
 220 0184 83E001   		andl	$1, %eax
 221 0187 85C0     		testl	%eax, %eax
 222 0189 741F     		je	.L13
 223              		.loc 1 90 0 is_stmt 0 discriminator 1
 224 018b 488B45C8 		movq	-56(%rbp), %rax
 225 018f 488D3500 		leaq	.LC0(%rip), %rsi
 225      000000
 226 0196 4889C7   		movq	%rax, %rdi
 227 0199 E8000000 		call	errPrefix@PLT
 227      00
 228 019e C745EC0A 		movl	$10, -20(%rbp)
 228      000000
 229 01a5 E99B0000 		jmp	.L14
 229      00
 230              	.L13:
  91:svf2csvf.c    **** 		length & 1, FL_SVF_PARSE_ERR, cleanup,
  92:svf2csvf.c    **** 		"readBytes(): I need an even number of hex digits");
  93:svf2csvf.c    **** 	bufZeroLength(buffer);
 231              		.loc 1 93 0 is_stmt 1
 232 01aa 488B45D8 		movq	-40(%rbp), %rax
 233 01ae 4889C7   		movq	%rax, %rdi
 234 01b1 E8000000 		call	bufZeroLength@PLT
 234      00
  94:svf2csvf.c    **** 	length >>= 1;  // Number of bytes
 235              		.loc 1 94 0
 236 01b6 D16DF0   		shrl	-16(%rbp)
  95:svf2csvf.c    **** 	bStatus = bufAppendConst(buffer, 0x00, length, error);
 237              		.loc 1 95 0
 238 01b9 8B55F0   		movl	-16(%rbp), %edx
 239 01bc 488B4DC8 		movq	-56(%rbp), %rcx
 240 01c0 488B45D8 		movq	-40(%rbp), %rax
 241 01c4 BE000000 		movl	$0, %esi
 241      00
 242 01c9 4889C7   		movq	%rax, %rdi
 243 01cc E8000000 		call	bufAppendConst@PLT
 243      00
 244 01d1 8945F4   		movl	%eax, -12(%rbp)
  96:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "readBytes()");
 245              		.loc 1 96 0
 246 01d4 837DF400 		cmpl	$0, -12(%rbp)
 247 01d8 741C     		je	.L15
 248              		.loc 1 96 0 is_stmt 0 discriminator 1
 249 01da 488B45C8 		movq	-56(%rbp), %rax
 250 01de 488D3500 		leaq	.LC1(%rip), %rsi
 250      000000
 251 01e5 4889C7   		movq	%rax, %rdi
 252 01e8 E8000000 		call	errPrefix@PLT
 252      00
 253 01ed C745EC01 		movl	$1, -20(%rbp)
 253      000000
 254 01f4 EB4F     		jmp	.L14
 255              	.L15:
  97:svf2csvf.c    **** 	while ( length-- ) {
 256              		.loc 1 97 0 is_stmt 1
 257 01f6 EB40     		jmp	.L16
 258              	.L18:
  98:svf2csvf.c    **** 		CHECK_STATUS(getHexByte(hexDigits, p++), FL_SVF_PARSE_ERR, cleanup, "readBytes()");
 259              		.loc 1 98 0
 260 01f8 488B45F8 		movq	-8(%rbp), %rax
 261 01fc 488D5001 		leaq	1(%rax), %rdx
 262 0200 488955F8 		movq	%rdx, -8(%rbp)
 263 0204 488B55D0 		movq	-48(%rbp), %rdx
 264 0208 4889C6   		movq	%rax, %rsi
 265 020b 4889D7   		movq	%rdx, %rdi
 266 020e E861FEFF 		call	getHexByte
 266      FF
 267 0213 85C0     		testl	%eax, %eax
 268 0215 741C     		je	.L17
 269              		.loc 1 98 0 is_stmt 0 discriminator 1
 270 0217 488B45C8 		movq	-56(%rbp), %rax
 271 021b 488D3500 		leaq	.LC1(%rip), %rsi
 271      000000
 272 0222 4889C7   		movq	%rax, %rdi
 273 0225 E8000000 		call	errPrefix@PLT
 273      00
 274 022a C745EC0A 		movl	$10, -20(%rbp)
 274      000000
 275 0231 EB12     		jmp	.L14
 276              	.L17:
  99:svf2csvf.c    **** 		hexDigits += 2;
 277              		.loc 1 99 0 is_stmt 1
 278 0233 488345D0 		addq	$2, -48(%rbp)
 278      02
 279              	.L16:
  97:svf2csvf.c    **** 	while ( length-- ) {
 280              		.loc 1 97 0 discriminator 1
 281 0238 8B45F0   		movl	-16(%rbp), %eax
 282 023b 8D50FF   		leal	-1(%rax), %edx
 283 023e 8955F0   		movl	%edx, -16(%rbp)
 284 0241 85C0     		testl	%eax, %eax
 285 0243 75B3     		jne	.L18
 286              	.L14:
 100:svf2csvf.c    **** 	}
 101:svf2csvf.c    **** cleanup:
 102:svf2csvf.c    **** 	return retVal;
 287              		.loc 1 102 0
 288 0245 8B45EC   		movl	-20(%rbp), %eax
 103:svf2csvf.c    **** }
 289              		.loc 1 103 0
 290 0248 C9       		leave
 291              		.cfi_def_cfa 7, 8
 292 0249 C3       		ret
 293              		.cfi_endproc
 294              	.LFE7:
 296              		.section	.rodata
 297              	.LC2:
 298 003d 73686966 		.string	"shiftLeft()"
 298      744C6566 
 298      74282900 
 299              		.text
 301              	shiftLeft:
 302              	.LFB8:
 104:svf2csvf.c    **** 
 105:svf2csvf.c    **** static FLStatus shiftLeft(
 106:svf2csvf.c    **** 	struct Buffer *buffer, uint32 numBits, uint32 shiftCount, const char **error)
 107:svf2csvf.c    **** {
 303              		.loc 1 107 0
 304              		.cfi_startproc
 305 024a 55       		pushq	%rbp
 306              		.cfi_def_cfa_offset 16
 307              		.cfi_offset 6, -16
 308 024b 4889E5   		movq	%rsp, %rbp
 309              		.cfi_def_cfa_register 6
 310 024e 4883EC70 		subq	$112, %rsp
 311 0252 48897DA8 		movq	%rdi, -88(%rbp)
 312 0256 8975A4   		movl	%esi, -92(%rbp)
 313 0259 8955A0   		movl	%edx, -96(%rbp)
 314 025c 48894D98 		movq	%rcx, -104(%rbp)
 108:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 315              		.loc 1 108 0
 316 0260 C745C000 		movl	$0, -64(%rbp)
 316      000000
 109:svf2csvf.c    **** 	uint32 shiftBytes = shiftCount>>3;
 317              		.loc 1 109 0
 318 0267 8B45A0   		movl	-96(%rbp), %eax
 319 026a C1E803   		shrl	$3, %eax
 320 026d 8945C4   		movl	%eax, -60(%rbp)
 110:svf2csvf.c    **** 	uint32 shiftBits = shiftCount&7;
 321              		.loc 1 110 0
 322 0270 8B45A0   		movl	-96(%rbp), %eax
 323 0273 83E007   		andl	$7, %eax
 324 0276 8945C8   		movl	%eax, -56(%rbp)
 111:svf2csvf.c    **** 	uint16 accum;
 112:svf2csvf.c    **** 	const uint8 *p = buffer->data;
 325              		.loc 1 112 0
 326 0279 488B45A8 		movq	-88(%rbp), %rax
 327 027d 488B00   		movq	(%rax), %rax
 328 0280 488945D0 		movq	%rax, -48(%rbp)
 113:svf2csvf.c    **** 	const uint8 *const end = buffer->data + buffer->length;
 329              		.loc 1 113 0
 330 0284 488B45A8 		movq	-88(%rbp), %rax
 331 0288 488B10   		movq	(%rax), %rdx
 332 028b 488B45A8 		movq	-88(%rbp), %rax
 333 028f 488B4008 		movq	8(%rax), %rax
 334 0293 4801D0   		addq	%rdx, %rax
 335 0296 488945D8 		movq	%rax, -40(%rbp)
 114:svf2csvf.c    **** 	struct Buffer newBuffer = {0,};
 336              		.loc 1 114 0
 337 029a 48C745E0 		movq	$0, -32(%rbp)
 337      00000000 
 338 02a2 48C745E8 		movq	$0, -24(%rbp)
 338      00000000 
 339 02aa 48C745F0 		movq	$0, -16(%rbp)
 339      00000000 
 340 02b2 48C745F8 		movq	$0, -8(%rbp)
 340      00000000 
 115:svf2csvf.c    **** 	BufferStatus bStatus;
 116:svf2csvf.c    **** 	if ( shiftBits ) {
 341              		.loc 1 116 0
 342 02ba 837DC800 		cmpl	$0, -56(%rbp)
 343 02be 0F84F901 		je	.L21
 343      0000
 117:svf2csvf.c    **** 		bStatus = bufInitialise(&newBuffer, 1024, 0x00, error);
 344              		.loc 1 117 0
 345 02c4 488B5598 		movq	-104(%rbp), %rdx
 346 02c8 488D45E0 		leaq	-32(%rbp), %rax
 347 02cc 4889D1   		movq	%rdx, %rcx
 348 02cf BA000000 		movl	$0, %edx
 348      00
 349 02d4 BE000400 		movl	$1024, %esi
 349      00
 350 02d9 4889C7   		movq	%rax, %rdi
 351 02dc E8000000 		call	bufInitialise@PLT
 351      00
 352 02e1 8945CC   		movl	%eax, -52(%rbp)
 118:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 353              		.loc 1 118 0
 354 02e4 837DCC00 		cmpl	$0, -52(%rbp)
 355 02e8 741F     		je	.L22
 356              		.loc 1 118 0 is_stmt 0 discriminator 1
 357 02ea 488B4598 		movq	-104(%rbp), %rax
 358 02ee 488D3500 		leaq	.LC2(%rip), %rsi
 358      000000
 359 02f5 4889C7   		movq	%rax, %rdi
 360 02f8 E8000000 		call	errPrefix@PLT
 360      00
 361 02fd C745C001 		movl	$1, -64(%rbp)
 361      000000
 362 0304 E9F60100 		jmp	.L23
 362      00
 363              	.L22:
 119:svf2csvf.c    **** 		numBits &= 7;  // Now the number of significant bits in first byte.
 364              		.loc 1 119 0 is_stmt 1
 365 0309 8365A407 		andl	$7, -92(%rbp)
 120:svf2csvf.c    **** 		if ( numBits ) {
 366              		.loc 1 120 0
 367 030d 837DA400 		cmpl	$0, -92(%rbp)
 368 0311 740B     		je	.L24
 121:svf2csvf.c    **** 			numBits = 8 - numBits; // Now the number of insignificant bits in first byte.
 369              		.loc 1 121 0
 370 0313 B8080000 		movl	$8, %eax
 370      00
 371 0318 2B45A4   		subl	-92(%rbp), %eax
 372 031b 8945A4   		movl	%eax, -92(%rbp)
 373              	.L24:
 122:svf2csvf.c    **** 		}
 123:svf2csvf.c    **** 		accum = p[0];
 374              		.loc 1 123 0
 375 031e 488B45D0 		movq	-48(%rbp), %rax
 376 0322 0FB600   		movzbl	(%rax), %eax
 377 0325 0FB6C0   		movzbl	%al, %eax
 378 0328 668945BE 		movw	%ax, -66(%rbp)
 124:svf2csvf.c    **** 		if ( p < end ) {
 379              		.loc 1 124 0
 380 032c 488B45D0 		movq	-48(%rbp), %rax
 381 0330 483B45D8 		cmpq	-40(%rbp), %rax
 382 0334 0F831601 		jnb	.L25
 382      0000
 125:svf2csvf.c    **** 			accum = (uint16)(accum >> (8-shiftBits));
 383              		.loc 1 125 0
 384 033a 0FB755BE 		movzwl	-66(%rbp), %edx
 385 033e B8080000 		movl	$8, %eax
 385      00
 386 0343 2B45C8   		subl	-56(%rbp), %eax
 387 0346 89C1     		movl	%eax, %ecx
 388 0348 D3FA     		sarl	%cl, %edx
 389 034a 89D0     		movl	%edx, %eax
 390 034c 668945BE 		movw	%ax, -66(%rbp)
 126:svf2csvf.c    **** 			if ( shiftBits > numBits ) {
 391              		.loc 1 126 0
 392 0350 8B45C8   		movl	-56(%rbp), %eax
 393 0353 3B45A4   		cmpl	-92(%rbp), %eax
 394 0356 7641     		jbe	.L26
 127:svf2csvf.c    **** 				// We're shifting by more than the number of insignificant bits
 128:svf2csvf.c    **** 				bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 395              		.loc 1 128 0
 396 0358 0FB745BE 		movzwl	-66(%rbp), %eax
 397 035c 0FB6C8   		movzbl	%al, %ecx
 398 035f 488B5598 		movq	-104(%rbp), %rdx
 399 0363 488D45E0 		leaq	-32(%rbp), %rax
 400 0367 89CE     		movl	%ecx, %esi
 401 0369 4889C7   		movq	%rax, %rdi
 402 036c E8000000 		call	bufAppendByte@PLT
 402      00
 403 0371 8945CC   		movl	%eax, -52(%rbp)
 129:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 404              		.loc 1 129 0
 405 0374 837DCC00 		cmpl	$0, -52(%rbp)
 406 0378 741F     		je	.L26
 407              		.loc 1 129 0 is_stmt 0 discriminator 1
 408 037a 488B4598 		movq	-104(%rbp), %rax
 409 037e 488D3500 		leaq	.LC2(%rip), %rsi
 409      000000
 410 0385 4889C7   		movq	%rax, %rdi
 411 0388 E8000000 		call	errPrefix@PLT
 411      00
 412 038d C745C001 		movl	$1, -64(%rbp)
 412      000000
 413 0394 E9660100 		jmp	.L23
 413      00
 414              	.L26:
 130:svf2csvf.c    **** 			}
 131:svf2csvf.c    **** 			accum = (uint16)((p[0]<<8) + p[1]);
 415              		.loc 1 131 0 is_stmt 1
 416 0399 488B45D0 		movq	-48(%rbp), %rax
 417 039d 0FB600   		movzbl	(%rax), %eax
 418 03a0 0FB6C0   		movzbl	%al, %eax
 419 03a3 C1E008   		sall	$8, %eax
 420 03a6 89C2     		movl	%eax, %edx
 421 03a8 488B45D0 		movq	-48(%rbp), %rax
 422 03ac 4883C001 		addq	$1, %rax
 423 03b0 0FB600   		movzbl	(%rax), %eax
 424 03b3 0FB6C0   		movzbl	%al, %eax
 425 03b6 01D0     		addl	%edx, %eax
 426 03b8 668945BE 		movw	%ax, -66(%rbp)
 132:svf2csvf.c    **** 			p++;
 427              		.loc 1 132 0
 428 03bc 488345D0 		addq	$1, -48(%rbp)
 428      01
 133:svf2csvf.c    **** 			while ( p < end ) {
 429              		.loc 1 133 0
 430 03c1 EB7F     		jmp	.L27
 431              	.L29:
 134:svf2csvf.c    **** 				accum = (uint16)(accum >> (8-shiftBits));
 432              		.loc 1 134 0
 433 03c3 0FB755BE 		movzwl	-66(%rbp), %edx
 434 03c7 B8080000 		movl	$8, %eax
 434      00
 435 03cc 2B45C8   		subl	-56(%rbp), %eax
 436 03cf 89C1     		movl	%eax, %ecx
 437 03d1 D3FA     		sarl	%cl, %edx
 438 03d3 89D0     		movl	%edx, %eax
 439 03d5 668945BE 		movw	%ax, -66(%rbp)
 135:svf2csvf.c    **** 				bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 440              		.loc 1 135 0
 441 03d9 0FB745BE 		movzwl	-66(%rbp), %eax
 442 03dd 0FB6C8   		movzbl	%al, %ecx
 443 03e0 488B5598 		movq	-104(%rbp), %rdx
 444 03e4 488D45E0 		leaq	-32(%rbp), %rax
 445 03e8 89CE     		movl	%ecx, %esi
 446 03ea 4889C7   		movq	%rax, %rdi
 447 03ed E8000000 		call	bufAppendByte@PLT
 447      00
 448 03f2 8945CC   		movl	%eax, -52(%rbp)
 136:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 449              		.loc 1 136 0
 450 03f5 837DCC00 		cmpl	$0, -52(%rbp)
 451 03f9 741F     		je	.L28
 452              		.loc 1 136 0 is_stmt 0 discriminator 1
 453 03fb 488B4598 		movq	-104(%rbp), %rax
 454 03ff 488D3500 		leaq	.LC2(%rip), %rsi
 454      000000
 455 0406 4889C7   		movq	%rax, %rdi
 456 0409 E8000000 		call	errPrefix@PLT
 456      00
 457 040e C745C001 		movl	$1, -64(%rbp)
 457      000000
 458 0415 E9E50000 		jmp	.L23
 458      00
 459              	.L28:
 137:svf2csvf.c    **** 				accum = (uint16)((p[0]<<8) + p[1]);
 460              		.loc 1 137 0 is_stmt 1
 461 041a 488B45D0 		movq	-48(%rbp), %rax
 462 041e 0FB600   		movzbl	(%rax), %eax
 463 0421 0FB6C0   		movzbl	%al, %eax
 464 0424 C1E008   		sall	$8, %eax
 465 0427 89C2     		movl	%eax, %edx
 466 0429 488B45D0 		movq	-48(%rbp), %rax
 467 042d 4883C001 		addq	$1, %rax
 468 0431 0FB600   		movzbl	(%rax), %eax
 469 0434 0FB6C0   		movzbl	%al, %eax
 470 0437 01D0     		addl	%edx, %eax
 471 0439 668945BE 		movw	%ax, -66(%rbp)
 138:svf2csvf.c    **** 				p++;
 472              		.loc 1 138 0
 473 043d 488345D0 		addq	$1, -48(%rbp)
 473      01
 474              	.L27:
 133:svf2csvf.c    **** 				accum = (uint16)(accum >> (8-shiftBits));
 475              		.loc 1 133 0 discriminator 1
 476 0442 488B45D0 		movq	-48(%rbp), %rax
 477 0446 483B45D8 		cmpq	-40(%rbp), %rax
 478 044a 0F8273FF 		jb	.L29
 478      FFFF
 479              	.L25:
 139:svf2csvf.c    **** 			}
 140:svf2csvf.c    **** 		}
 141:svf2csvf.c    **** 		accum &= 0xFF00;
 480              		.loc 1 141 0
 481 0450 668165BE 		andw	$-256, -66(%rbp)
 481      00FF
 142:svf2csvf.c    **** 		accum = (uint16)(accum >> (8-shiftBits));
 482              		.loc 1 142 0
 483 0456 0FB755BE 		movzwl	-66(%rbp), %edx
 484 045a B8080000 		movl	$8, %eax
 484      00
 485 045f 2B45C8   		subl	-56(%rbp), %eax
 486 0462 89C1     		movl	%eax, %ecx
 487 0464 D3FA     		sarl	%cl, %edx
 488 0466 89D0     		movl	%edx, %eax
 489 0468 668945BE 		movw	%ax, -66(%rbp)
 143:svf2csvf.c    **** 		bStatus = bufAppendByte(&newBuffer, (uint8)(accum&0xFF), error);
 490              		.loc 1 143 0
 491 046c 0FB745BE 		movzwl	-66(%rbp), %eax
 492 0470 0FB6C8   		movzbl	%al, %ecx
 493 0473 488B5598 		movq	-104(%rbp), %rdx
 494 0477 488D45E0 		leaq	-32(%rbp), %rax
 495 047b 89CE     		movl	%ecx, %esi
 496 047d 4889C7   		movq	%rax, %rdi
 497 0480 E8000000 		call	bufAppendByte@PLT
 497      00
 498 0485 8945CC   		movl	%eax, -52(%rbp)
 144:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 499              		.loc 1 144 0
 500 0488 837DCC00 		cmpl	$0, -52(%rbp)
 501 048c 741C     		je	.L30
 502              		.loc 1 144 0 is_stmt 0 discriminator 1
 503 048e 488B4598 		movq	-104(%rbp), %rax
 504 0492 488D3500 		leaq	.LC2(%rip), %rsi
 504      000000
 505 0499 4889C7   		movq	%rax, %rdi
 506 049c E8000000 		call	errPrefix@PLT
 506      00
 507 04a1 C745C001 		movl	$1, -64(%rbp)
 507      000000
 508 04a8 EB55     		jmp	.L23
 509              	.L30:
 145:svf2csvf.c    **** 		bufSwap(&newBuffer, buffer);
 510              		.loc 1 145 0 is_stmt 1
 511 04aa 488B55A8 		movq	-88(%rbp), %rdx
 512 04ae 488D45E0 		leaq	-32(%rbp), %rax
 513 04b2 4889D6   		movq	%rdx, %rsi
 514 04b5 4889C7   		movq	%rax, %rdi
 515 04b8 E8000000 		call	bufSwap@PLT
 515      00
 516              	.L21:
 146:svf2csvf.c    **** 	}
 147:svf2csvf.c    **** 	if ( shiftBytes ) {
 517              		.loc 1 147 0
 518 04bd 837DC400 		cmpl	$0, -60(%rbp)
 519 04c1 743C     		je	.L23
 148:svf2csvf.c    **** 		bStatus = bufAppendConst(buffer, 0x00, shiftBytes, error);
 520              		.loc 1 148 0
 521 04c3 8B55C4   		movl	-60(%rbp), %edx
 522 04c6 488B4D98 		movq	-104(%rbp), %rcx
 523 04ca 488B45A8 		movq	-88(%rbp), %rax
 524 04ce BE000000 		movl	$0, %esi
 524      00
 525 04d3 4889C7   		movq	%rax, %rdi
 526 04d6 E8000000 		call	bufAppendConst@PLT
 526      00
 527 04db 8945CC   		movl	%eax, -52(%rbp)
 149:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "shiftLeft()");
 528              		.loc 1 149 0
 529 04de 837DCC00 		cmpl	$0, -52(%rbp)
 530 04e2 741B     		je	.L23
 531              		.loc 1 149 0 is_stmt 0 discriminator 1
 532 04e4 488B4598 		movq	-104(%rbp), %rax
 533 04e8 488D3500 		leaq	.LC2(%rip), %rsi
 533      000000
 534 04ef 4889C7   		movq	%rax, %rdi
 535 04f2 E8000000 		call	errPrefix@PLT
 535      00
 536 04f7 C745C001 		movl	$1, -64(%rbp)
 536      000000
 537 04fe 90       		nop
 538              	.L23:
 150:svf2csvf.c    **** 	}
 151:svf2csvf.c    **** cleanup:
 152:svf2csvf.c    **** 	bufDestroy(&newBuffer);
 539              		.loc 1 152 0 is_stmt 1
 540 04ff 488D45E0 		leaq	-32(%rbp), %rax
 541 0503 4889C7   		movq	%rax, %rdi
 542 0506 E8000000 		call	bufDestroy@PLT
 542      00
 153:svf2csvf.c    **** 	return retVal;
 543              		.loc 1 153 0
 544 050b 8B45C0   		movl	-64(%rbp), %eax
 154:svf2csvf.c    **** }
 545              		.loc 1 154 0
 546 050e C9       		leave
 547              		.cfi_def_cfa 7, 8
 548 050f C3       		ret
 549              		.cfi_endproc
 550              	.LFE8:
 552              		.section	.rodata
 553              	.LC3:
 554 0049 68656164 		.string	"headTail()"
 554      5461696C 
 554      282900
 555              	.LC4:
 556 0054 68656164 		.string	"headTail(): Internal error"
 556      5461696C 
 556      28293A20 
 556      496E7465 
 556      726E616C 
 557              		.text
 558              		.globl	headTail
 560              	headTail:
 561              	.LFB9:
 155:svf2csvf.c    **** 
 156:svf2csvf.c    **** FLStatus headTail(
 157:svf2csvf.c    **** 	struct Buffer *dataBuf, struct Buffer *headBuf, struct Buffer *tailBuf,
 158:svf2csvf.c    **** 	uint32 dataBits, uint32 headBits, uint32 tailBits, const char **error)
 159:svf2csvf.c    **** {
 562              		.loc 1 159 0
 563              		.cfi_startproc
 564 0510 55       		pushq	%rbp
 565              		.cfi_def_cfa_offset 16
 566              		.cfi_offset 6, -16
 567 0511 4889E5   		movq	%rsp, %rbp
 568              		.cfi_def_cfa_register 6
 569 0514 4883C480 		addq	$-128, %rsp
 570 0518 48897DA8 		movq	%rdi, -88(%rbp)
 571 051c 488975A0 		movq	%rsi, -96(%rbp)
 572 0520 48895598 		movq	%rdx, -104(%rbp)
 573 0524 894D94   		movl	%ecx, -108(%rbp)
 574 0527 44894590 		movl	%r8d, -112(%rbp)
 575 052b 44894D8C 		movl	%r9d, -116(%rbp)
 160:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 576              		.loc 1 160 0
 577 052f C745B400 		movl	$0, -76(%rbp)
 577      000000
 161:svf2csvf.c    **** 	const uint8 *src = headBuf->data;
 578              		.loc 1 161 0
 579 0536 488B45A0 		movq	-96(%rbp), %rax
 580 053a 488B00   		movq	(%rax), %rax
 581 053d 488945C8 		movq	%rax, -56(%rbp)
 162:svf2csvf.c    **** 	const uint8 *dstEnd;
 163:svf2csvf.c    **** 	uint8 *dst;
 164:svf2csvf.c    **** 	struct Buffer newBuffer = {0,};
 582              		.loc 1 164 0
 583 0541 48C745E0 		movq	$0, -32(%rbp)
 583      00000000 
 584 0549 48C745E8 		movq	$0, -24(%rbp)
 584      00000000 
 585 0551 48C745F0 		movq	$0, -16(%rbp)
 585      00000000 
 586 0559 48C745F8 		movq	$0, -8(%rbp)
 586      00000000 
 165:svf2csvf.c    **** 	BufferStatus bStatus;
 166:svf2csvf.c    **** 
 167:svf2csvf.c    **** 	// Shift data left by headBits
 168:svf2csvf.c    **** 	fStatus = shiftLeft(dataBuf, dataBits, headBits, error);
 587              		.loc 1 168 0
 588 0561 8B5590   		movl	-112(%rbp), %edx
 589 0564 8B7594   		movl	-108(%rbp), %esi
 590 0567 488B45A8 		movq	-88(%rbp), %rax
 591 056b 488B4D10 		movq	16(%rbp), %rcx
 592 056f 4889C7   		movq	%rax, %rdi
 593 0572 E8D3FCFF 		call	shiftLeft
 593      FF
 594 0577 8945B8   		movl	%eax, -72(%rbp)
 169:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "headTail()");
 595              		.loc 1 169 0
 596 057a 837DB800 		cmpl	$0, -72(%rbp)
 597 057e 741B     		je	.L33
 598              		.loc 1 169 0 is_stmt 0 discriminator 1
 599 0580 488D3500 		leaq	.LC3(%rip), %rsi
 599      000000
 600 0587 488B7D10 		movq	16(%rbp), %rdi
 601 058b E8000000 		call	errPrefix@PLT
 601      00
 602 0590 8B45B8   		movl	-72(%rbp), %eax
 603 0593 8945B4   		movl	%eax, -76(%rbp)
 604 0596 E90F0300 		jmp	.L34
 604      00
 605              	.L33:
 170:svf2csvf.c    **** 
 171:svf2csvf.c    **** 	//dumpSimple(dataBuf->data, dataBuf->length);
 172:svf2csvf.c    **** 
 173:svf2csvf.c    **** 	// Add headBits to dataBits to get the new total
 174:svf2csvf.c    **** 	dataBits += headBits;
 606              		.loc 1 174 0 is_stmt 1
 607 059b 8B4590   		movl	-112(%rbp), %eax
 608 059e 014594   		addl	%eax, -108(%rbp)
 175:svf2csvf.c    **** 
 176:svf2csvf.c    **** 	// Add header
 177:svf2csvf.c    **** 	dstEnd = dst = dataBuf->data + dataBuf->length;
 609              		.loc 1 177 0
 610 05a1 488B45A8 		movq	-88(%rbp), %rax
 611 05a5 488B10   		movq	(%rax), %rdx
 612 05a8 488B45A8 		movq	-88(%rbp), %rax
 613 05ac 488B4008 		movq	8(%rax), %rax
 614 05b0 4801D0   		addq	%rdx, %rax
 615 05b3 488945D0 		movq	%rax, -48(%rbp)
 616 05b7 488B45D0 		movq	-48(%rbp), %rax
 617 05bb 488945D8 		movq	%rax, -40(%rbp)
 178:svf2csvf.c    **** 	dst -= headBuf->length;
 618              		.loc 1 178 0
 619 05bf 488B45A0 		movq	-96(%rbp), %rax
 620 05c3 488B4008 		movq	8(%rax), %rax
 621 05c7 48F7D8   		negq	%rax
 622 05ca 480145D0 		addq	%rax, -48(%rbp)
 179:svf2csvf.c    **** 	while ( dst < dstEnd ) {
 623              		.loc 1 179 0
 624 05ce EB22     		jmp	.L35
 625              	.L36:
 180:svf2csvf.c    **** 		*dst++ |= *src++;
 626              		.loc 1 180 0
 627 05d0 488B45D0 		movq	-48(%rbp), %rax
 628 05d4 488D5001 		leaq	1(%rax), %rdx
 629 05d8 488955D0 		movq	%rdx, -48(%rbp)
 630 05dc 0FB630   		movzbl	(%rax), %esi
 631 05df 488B55C8 		movq	-56(%rbp), %rdx
 632 05e3 488D4A01 		leaq	1(%rdx), %rcx
 633 05e7 48894DC8 		movq	%rcx, -56(%rbp)
 634 05eb 0FB612   		movzbl	(%rdx), %edx
 635 05ee 09F2     		orl	%esi, %edx
 636 05f0 8810     		movb	%dl, (%rax)
 637              	.L35:
 179:svf2csvf.c    **** 	while ( dst < dstEnd ) {
 638              		.loc 1 179 0 discriminator 1
 639 05f2 488B45D0 		movq	-48(%rbp), %rax
 640 05f6 483B45D8 		cmpq	-40(%rbp), %rax
 641 05fa 72D4     		jb	.L36
 181:svf2csvf.c    **** 	}
 182:svf2csvf.c    **** 
 183:svf2csvf.c    **** 	if ( tailBits ) {
 642              		.loc 1 183 0
 643 05fc 837D8C00 		cmpl	$0, -116(%rbp)
 644 0600 0F84A402 		je	.L34
 644      0000
 645              	.LBB2:
 184:svf2csvf.c    **** 		uint32 tailShift = dataBits & 7;
 646              		.loc 1 184 0
 647 0606 8B4594   		movl	-108(%rbp), %eax
 648 0609 83E007   		andl	$7, %eax
 649 060c 8945BC   		movl	%eax, -68(%rbp)
 185:svf2csvf.c    **** 		uint32 bytesFromTail;
 186:svf2csvf.c    **** 		// Shift the tail to align with the MSB of the data
 187:svf2csvf.c    **** 		if ( tailShift ) {
 650              		.loc 1 187 0
 651 060f 837DBC00 		cmpl	$0, -68(%rbp)
 652 0613 743A     		je	.L37
 188:svf2csvf.c    **** 			fStatus = shiftLeft(tailBuf, tailBits, tailShift, error);
 653              		.loc 1 188 0
 654 0615 8B55BC   		movl	-68(%rbp), %edx
 655 0618 8B758C   		movl	-116(%rbp), %esi
 656 061b 488B4598 		movq	-104(%rbp), %rax
 657 061f 488B4D10 		movq	16(%rbp), %rcx
 658 0623 4889C7   		movq	%rax, %rdi
 659 0626 E81FFCFF 		call	shiftLeft
 659      FF
 660 062b 8945B8   		movl	%eax, -72(%rbp)
 189:svf2csvf.c    **** 			CHECK_STATUS(fStatus, fStatus, cleanup, "headTail()");
 661              		.loc 1 189 0
 662 062e 837DB800 		cmpl	$0, -72(%rbp)
 663 0632 741B     		je	.L37
 664              		.loc 1 189 0 is_stmt 0 discriminator 1
 665 0634 488D3500 		leaq	.LC3(%rip), %rsi
 665      000000
 666 063b 488B7D10 		movq	16(%rbp), %rdi
 667 063f E8000000 		call	errPrefix@PLT
 667      00
 668 0644 8B45B8   		movl	-72(%rbp), %eax
 669 0647 8945B4   		movl	%eax, -76(%rbp)
 670 064a E95B0200 		jmp	.L34
 670      00
 671              	.L37:
 190:svf2csvf.c    **** 		}
 191:svf2csvf.c    **** 
 192:svf2csvf.c    **** 		// How much data do we need to copy from the tail?
 193:svf2csvf.c    **** 		bytesFromTail = (uint32)tailBuf->length;
 672              		.loc 1 193 0 is_stmt 1
 673 064f 488B4598 		movq	-104(%rbp), %rax
 674 0653 488B4008 		movq	8(%rax), %rax
 675 0657 8945C0   		movl	%eax, -64(%rbp)
 194:svf2csvf.c    **** 		src = tailBuf->data;
 676              		.loc 1 194 0
 677 065a 488B4598 		movq	-104(%rbp), %rax
 678 065e 488B00   		movq	(%rax), %rax
 679 0661 488945C8 		movq	%rax, -56(%rbp)
 195:svf2csvf.c    **** 
 196:svf2csvf.c    **** 		// Init new buffer
 197:svf2csvf.c    **** 		bStatus = bufInitialise(&newBuffer, 1024, 0x00, error);
 680              		.loc 1 197 0
 681 0665 488D45E0 		leaq	-32(%rbp), %rax
 682 0669 488B4D10 		movq	16(%rbp), %rcx
 683 066d BA000000 		movl	$0, %edx
 683      00
 684 0672 BE000400 		movl	$1024, %esi
 684      00
 685 0677 4889C7   		movq	%rax, %rdi
 686 067a E8000000 		call	bufInitialise@PLT
 686      00
 687 067f 8945C4   		movl	%eax, -60(%rbp)
 198:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 688              		.loc 1 198 0
 689 0682 837DC400 		cmpl	$0, -60(%rbp)
 690 0686 741C     		je	.L38
 691              		.loc 1 198 0 is_stmt 0 discriminator 1
 692 0688 488D3500 		leaq	.LC3(%rip), %rsi
 692      000000
 693 068f 488B7D10 		movq	16(%rbp), %rdi
 694 0693 E8000000 		call	errPrefix@PLT
 694      00
 695 0698 C745B401 		movl	$1, -76(%rbp)
 695      000000
 696 069f E9060200 		jmp	.L34
 696      00
 697              	.L38:
 199:svf2csvf.c    **** 
 200:svf2csvf.c    **** 		dataBits += tailBits;
 698              		.loc 1 200 0 is_stmt 1
 699 06a4 8B458C   		movl	-116(%rbp), %eax
 700 06a7 014594   		addl	%eax, -108(%rbp)
 201:svf2csvf.c    **** 		if ( bitsToBytes(dataBits) == dataBuf->length + bytesFromTail ) {
 701              		.loc 1 201 0
 702 06aa 8B4594   		movl	-108(%rbp), %eax
 703 06ad C1E803   		shrl	$3, %eax
 704 06b0 89C2     		movl	%eax, %edx
 705 06b2 8B4594   		movl	-108(%rbp), %eax
 706 06b5 83E007   		andl	$7, %eax
 707 06b8 85C0     		testl	%eax, %eax
 708 06ba 7407     		je	.L39
 709              		.loc 1 201 0 is_stmt 0 discriminator 1
 710 06bc B8010000 		movl	$1, %eax
 710      00
 711 06c1 EB05     		jmp	.L40
 712              	.L39:
 713              		.loc 1 201 0 discriminator 2
 714 06c3 B8000000 		movl	$0, %eax
 714      00
 715              	.L40:
 716              		.loc 1 201 0 discriminator 3
 717 06c8 01D0     		addl	%edx, %eax
 718 06ca 89C2     		movl	%eax, %edx
 719 06cc 488B45A8 		movq	-88(%rbp), %rax
 720 06d0 488B4808 		movq	8(%rax), %rcx
 721 06d4 8B45C0   		movl	-64(%rbp), %eax
 722 06d7 4801C8   		addq	%rcx, %rax
 723 06da 4839C2   		cmpq	%rax, %rdx
 724 06dd 0F858400 		jne	.L41
 724      0000
 202:svf2csvf.c    **** 			// There's no overlap, so copy back-to-back
 203:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuffer, src, bytesFromTail, error);
 725              		.loc 1 203 0 is_stmt 1
 726 06e3 8B55C0   		movl	-64(%rbp), %edx
 727 06e6 488B75C8 		movq	-56(%rbp), %rsi
 728 06ea 488D45E0 		leaq	-32(%rbp), %rax
 729 06ee 488B4D10 		movq	16(%rbp), %rcx
 730 06f2 4889C7   		movq	%rax, %rdi
 731 06f5 E8000000 		call	bufAppendBlock@PLT
 731      00
 732 06fa 8945C4   		movl	%eax, -60(%rbp)
 204:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 733              		.loc 1 204 0
 734 06fd 837DC400 		cmpl	$0, -60(%rbp)
 735 0701 741C     		je	.L42
 736              		.loc 1 204 0 is_stmt 0 discriminator 1
 737 0703 488D3500 		leaq	.LC3(%rip), %rsi
 737      000000
 738 070a 488B7D10 		movq	16(%rbp), %rdi
 739 070e E8000000 		call	errPrefix@PLT
 739      00
 740 0713 C745B401 		movl	$1, -76(%rbp)
 740      000000
 741 071a E98B0100 		jmp	.L34
 741      00
 742              	.L42:
 205:svf2csvf.c    **** 			bStatus = bufAppendByte(&newBuffer, *dataBuf->data, error);
 743              		.loc 1 205 0 is_stmt 1
 744 071f 488B45A8 		movq	-88(%rbp), %rax
 745 0723 488B00   		movq	(%rax), %rax
 746 0726 0FB600   		movzbl	(%rax), %eax
 747 0729 0FB6C8   		movzbl	%al, %ecx
 748 072c 488D45E0 		leaq	-32(%rbp), %rax
 749 0730 488B5510 		movq	16(%rbp), %rdx
 750 0734 89CE     		movl	%ecx, %esi
 751 0736 4889C7   		movq	%rax, %rdi
 752 0739 E8000000 		call	bufAppendByte@PLT
 752      00
 753 073e 8945C4   		movl	%eax, -60(%rbp)
 206:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 754              		.loc 1 206 0
 755 0741 837DC400 		cmpl	$0, -60(%rbp)
 756 0745 0F840301 		je	.L43
 756      0000
 757              		.loc 1 206 0 is_stmt 0 discriminator 1
 758 074b 488D3500 		leaq	.LC3(%rip), %rsi
 758      000000
 759 0752 488B7D10 		movq	16(%rbp), %rdi
 760 0756 E8000000 		call	errPrefix@PLT
 760      00
 761 075b C745B401 		movl	$1, -76(%rbp)
 761      000000
 762 0762 E9430100 		jmp	.L34
 762      00
 763              	.L41:
 207:svf2csvf.c    **** 		} else if ( bitsToBytes(dataBits) == dataBuf->length + bytesFromTail - 1 ) {
 764              		.loc 1 207 0 is_stmt 1
 765 0767 8B4594   		movl	-108(%rbp), %eax
 766 076a C1E803   		shrl	$3, %eax
 767 076d 89C2     		movl	%eax, %edx
 768 076f 8B4594   		movl	-108(%rbp), %eax
 769 0772 83E007   		andl	$7, %eax
 770 0775 85C0     		testl	%eax, %eax
 771 0777 7407     		je	.L44
 772              		.loc 1 207 0 is_stmt 0 discriminator 1
 773 0779 B8010000 		movl	$1, %eax
 773      00
 774 077e EB05     		jmp	.L45
 775              	.L44:
 776              		.loc 1 207 0 discriminator 2
 777 0780 B8000000 		movl	$0, %eax
 777      00
 778              	.L45:
 779              		.loc 1 207 0 discriminator 3
 780 0785 01D0     		addl	%edx, %eax
 781 0787 89C2     		movl	%eax, %edx
 782 0789 488B45A8 		movq	-88(%rbp), %rax
 783 078d 488B4808 		movq	8(%rax), %rcx
 784 0791 8B45C0   		movl	-64(%rbp), %eax
 785 0794 4801C8   		addq	%rcx, %rax
 786 0797 4883E801 		subq	$1, %rax
 787 079b 4839C2   		cmpq	%rax, %rdx
 788 079e 0F859100 		jne	.L46
 788      0000
 208:svf2csvf.c    **** 			// There's a single byte overlap, so OR the overlap byte
 209:svf2csvf.c    **** 			bytesFromTail--;
 789              		.loc 1 209 0 is_stmt 1
 790 07a4 836DC001 		subl	$1, -64(%rbp)
 210:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuffer, src, bytesFromTail, error);
 791              		.loc 1 210 0
 792 07a8 8B55C0   		movl	-64(%rbp), %edx
 793 07ab 488B75C8 		movq	-56(%rbp), %rsi
 794 07af 488D45E0 		leaq	-32(%rbp), %rax
 795 07b3 488B4D10 		movq	16(%rbp), %rcx
 796 07b7 4889C7   		movq	%rax, %rdi
 797 07ba E8000000 		call	bufAppendBlock@PLT
 797      00
 798 07bf 8945C4   		movl	%eax, -60(%rbp)
 211:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 799              		.loc 1 211 0
 800 07c2 837DC400 		cmpl	$0, -60(%rbp)
 801 07c6 741C     		je	.L47
 802              		.loc 1 211 0 is_stmt 0 discriminator 1
 803 07c8 488D3500 		leaq	.LC3(%rip), %rsi
 803      000000
 804 07cf 488B7D10 		movq	16(%rbp), %rdi
 805 07d3 E8000000 		call	errPrefix@PLT
 805      00
 806 07d8 C745B401 		movl	$1, -76(%rbp)
 806      000000
 807 07df E9C60000 		jmp	.L34
 807      00
 808              	.L47:
 212:svf2csvf.c    **** 			src += bytesFromTail;
 809              		.loc 1 212 0 is_stmt 1
 810 07e4 8B45C0   		movl	-64(%rbp), %eax
 811 07e7 480145C8 		addq	%rax, -56(%rbp)
 213:svf2csvf.c    **** 			bStatus = bufAppendByte(&newBuffer, *src | *dataBuf->data, error);
 812              		.loc 1 213 0
 813 07eb 488B45C8 		movq	-56(%rbp), %rax
 814 07ef 0FB610   		movzbl	(%rax), %edx
 815 07f2 488B45A8 		movq	-88(%rbp), %rax
 816 07f6 488B00   		movq	(%rax), %rax
 817 07f9 0FB600   		movzbl	(%rax), %eax
 818 07fc 09D0     		orl	%edx, %eax
 819 07fe 0FB6C8   		movzbl	%al, %ecx
 820 0801 488D45E0 		leaq	-32(%rbp), %rax
 821 0805 488B5510 		movq	16(%rbp), %rdx
 822 0809 89CE     		movl	%ecx, %esi
 823 080b 4889C7   		movq	%rax, %rdi
 824 080e E8000000 		call	bufAppendByte@PLT
 824      00
 825 0813 8945C4   		movl	%eax, -60(%rbp)
 214:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 826              		.loc 1 214 0
 827 0816 837DC400 		cmpl	$0, -60(%rbp)
 828 081a 7432     		je	.L43
 829              		.loc 1 214 0 is_stmt 0 discriminator 1
 830 081c 488D3500 		leaq	.LC3(%rip), %rsi
 830      000000
 831 0823 488B7D10 		movq	16(%rbp), %rdi
 832 0827 E8000000 		call	errPrefix@PLT
 832      00
 833 082c C745B401 		movl	$1, -76(%rbp)
 833      000000
 834 0833 EB75     		jmp	.L34
 835              	.L46:
 215:svf2csvf.c    **** 		} else {
 216:svf2csvf.c    **** 			// Ooops, this should never happen!
 217:svf2csvf.c    **** 			CHECK_STATUS(true, FL_INTERNAL_ERR, cleanup, "headTail(): Internal error");
 836              		.loc 1 217 0 is_stmt 1 discriminator 1
 837 0835 488D3500 		leaq	.LC4(%rip), %rsi
 837      000000
 838 083c 488B7D10 		movq	16(%rbp), %rdi
 839 0840 E8000000 		call	errPrefix@PLT
 839      00
 840 0845 C745B417 		movl	$23, -76(%rbp)
 840      000000
 841 084c EB5C     		jmp	.L34
 842              	.L43:
 218:svf2csvf.c    **** 		}
 219:svf2csvf.c    **** 		bStatus = bufAppendBlock(&newBuffer, dataBuf->data+1, dataBuf->length-1, error);
 843              		.loc 1 219 0
 844 084e 488B45A8 		movq	-88(%rbp), %rax
 845 0852 488B4008 		movq	8(%rax), %rax
 846 0856 488D50FF 		leaq	-1(%rax), %rdx
 847 085a 488B45A8 		movq	-88(%rbp), %rax
 848 085e 488B00   		movq	(%rax), %rax
 849 0861 488D7001 		leaq	1(%rax), %rsi
 850 0865 488D45E0 		leaq	-32(%rbp), %rax
 851 0869 488B4D10 		movq	16(%rbp), %rcx
 852 086d 4889C7   		movq	%rax, %rdi
 853 0870 E8000000 		call	bufAppendBlock@PLT
 853      00
 854 0875 8945C4   		movl	%eax, -60(%rbp)
 220:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "headTail()");
 855              		.loc 1 220 0
 856 0878 837DC400 		cmpl	$0, -60(%rbp)
 857 087c 7419     		je	.L48
 858              		.loc 1 220 0 is_stmt 0 discriminator 1
 859 087e 488D3500 		leaq	.LC3(%rip), %rsi
 859      000000
 860 0885 488B7D10 		movq	16(%rbp), %rdi
 861 0889 E8000000 		call	errPrefix@PLT
 861      00
 862 088e C745B401 		movl	$1, -76(%rbp)
 862      000000
 863 0895 EB13     		jmp	.L34
 864              	.L48:
 221:svf2csvf.c    **** 		bufSwap(&newBuffer, dataBuf);
 865              		.loc 1 221 0 is_stmt 1
 866 0897 488B55A8 		movq	-88(%rbp), %rdx
 867 089b 488D45E0 		leaq	-32(%rbp), %rax
 868 089f 4889D6   		movq	%rdx, %rsi
 869 08a2 4889C7   		movq	%rax, %rdi
 870 08a5 E8000000 		call	bufSwap@PLT
 870      00
 871              	.L34:
 872              	.LBE2:
 222:svf2csvf.c    **** 	}
 223:svf2csvf.c    **** 	
 224:svf2csvf.c    **** cleanup:
 225:svf2csvf.c    **** 	bufDestroy(&newBuffer);
 873              		.loc 1 225 0
 874 08aa 488D45E0 		leaq	-32(%rbp), %rax
 875 08ae 4889C7   		movq	%rax, %rdi
 876 08b1 E8000000 		call	bufDestroy@PLT
 876      00
 226:svf2csvf.c    **** 	return retVal;
 877              		.loc 1 226 0
 878 08b6 8B45B4   		movl	-76(%rbp), %eax
 227:svf2csvf.c    **** }
 879              		.loc 1 227 0
 880 08b9 C9       		leave
 881              		.cfi_def_cfa 7, 8
 882 08ba C3       		ret
 883              		.cfi_endproc
 884              	.LFE9:
 886              		.section	.rodata
 887              	.LC5:
 888 006f 696E6974 		.string	"initBitStore()"
 888      42697453 
 888      746F7265 
 888      282900
 889              		.text
 891              	initBitStore:
 892              	.LFB10:
 228:svf2csvf.c    **** 
 229:svf2csvf.c    **** static FLStatus initBitStore(struct BitStore *store, const char **error) {
 893              		.loc 1 229 0
 894              		.cfi_startproc
 895 08bb 55       		pushq	%rbp
 896              		.cfi_def_cfa_offset 16
 897              		.cfi_offset 6, -16
 898 08bc 4889E5   		movq	%rsp, %rbp
 899              		.cfi_def_cfa_register 6
 900 08bf 4883EC20 		subq	$32, %rsp
 901 08c3 48897DE8 		movq	%rdi, -24(%rbp)
 902 08c7 488975E0 		movq	%rsi, -32(%rbp)
 230:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 903              		.loc 1 230 0
 904 08cb C745F800 		movl	$0, -8(%rbp)
 904      000000
 231:svf2csvf.c    **** 	BufferStatus bStatus;
 232:svf2csvf.c    **** 	store->numBits = 0;
 905              		.loc 1 232 0
 906 08d2 488B45E8 		movq	-24(%rbp), %rax
 907 08d6 C7000000 		movl	$0, (%rax)
 907      0000
 233:svf2csvf.c    **** 	bStatus = bufInitialise(&store->tdi, 1024, 0x00, error);
 908              		.loc 1 233 0
 909 08dc 488B45E8 		movq	-24(%rbp), %rax
 910 08e0 488D7808 		leaq	8(%rax), %rdi
 911 08e4 488B45E0 		movq	-32(%rbp), %rax
 912 08e8 4889C1   		movq	%rax, %rcx
 913 08eb BA000000 		movl	$0, %edx
 913      00
 914 08f0 BE000400 		movl	$1024, %esi
 914      00
 915 08f5 E8000000 		call	bufInitialise@PLT
 915      00
 916 08fa 8945FC   		movl	%eax, -4(%rbp)
 234:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 917              		.loc 1 234 0
 918 08fd 837DFC00 		cmpl	$0, -4(%rbp)
 919 0901 741F     		je	.L51
 920              		.loc 1 234 0 is_stmt 0 discriminator 1
 921 0903 488B45E0 		movq	-32(%rbp), %rax
 922 0907 488D3500 		leaq	.LC5(%rip), %rsi
 922      000000
 923 090e 4889C7   		movq	%rax, %rdi
 924 0911 E8000000 		call	errPrefix@PLT
 924      00
 925 0916 C745F801 		movl	$1, -8(%rbp)
 925      000000
 926 091d E9850000 		jmp	.L52
 926      00
 927              	.L51:
 235:svf2csvf.c    **** 	bStatus = bufInitialise(&store->tdo, 1024, 0x00, error);
 928              		.loc 1 235 0 is_stmt 1
 929 0922 488B45E8 		movq	-24(%rbp), %rax
 930 0926 488D7828 		leaq	40(%rax), %rdi
 931 092a 488B45E0 		movq	-32(%rbp), %rax
 932 092e 4889C1   		movq	%rax, %rcx
 933 0931 BA000000 		movl	$0, %edx
 933      00
 934 0936 BE000400 		movl	$1024, %esi
 934      00
 935 093b E8000000 		call	bufInitialise@PLT
 935      00
 936 0940 8945FC   		movl	%eax, -4(%rbp)
 236:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 937              		.loc 1 236 0
 938 0943 837DFC00 		cmpl	$0, -4(%rbp)
 939 0947 741C     		je	.L53
 940              		.loc 1 236 0 is_stmt 0 discriminator 1
 941 0949 488B45E0 		movq	-32(%rbp), %rax
 942 094d 488D3500 		leaq	.LC5(%rip), %rsi
 942      000000
 943 0954 4889C7   		movq	%rax, %rdi
 944 0957 E8000000 		call	errPrefix@PLT
 944      00
 945 095c C745F801 		movl	$1, -8(%rbp)
 945      000000
 946 0963 EB42     		jmp	.L52
 947              	.L53:
 237:svf2csvf.c    **** 	bStatus = bufInitialise(&store->mask, 1024, 0x00, error);
 948              		.loc 1 237 0 is_stmt 1
 949 0965 488B45E8 		movq	-24(%rbp), %rax
 950 0969 488D7848 		leaq	72(%rax), %rdi
 951 096d 488B45E0 		movq	-32(%rbp), %rax
 952 0971 4889C1   		movq	%rax, %rcx
 953 0974 BA000000 		movl	$0, %edx
 953      00
 954 0979 BE000400 		movl	$1024, %esi
 954      00
 955 097e E8000000 		call	bufInitialise@PLT
 955      00
 956 0983 8945FC   		movl	%eax, -4(%rbp)
 238:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "initBitStore()");
 957              		.loc 1 238 0
 958 0986 837DFC00 		cmpl	$0, -4(%rbp)
 959 098a 741B     		je	.L52
 960              		.loc 1 238 0 is_stmt 0 discriminator 1
 961 098c 488B45E0 		movq	-32(%rbp), %rax
 962 0990 488D3500 		leaq	.LC5(%rip), %rsi
 962      000000
 963 0997 4889C7   		movq	%rax, %rdi
 964 099a E8000000 		call	errPrefix@PLT
 964      00
 965 099f C745F801 		movl	$1, -8(%rbp)
 965      000000
 966 09a6 90       		nop
 967              	.L52:
 239:svf2csvf.c    **** cleanup:
 240:svf2csvf.c    **** 	return retVal;
 968              		.loc 1 240 0 is_stmt 1
 969 09a7 8B45F8   		movl	-8(%rbp), %eax
 241:svf2csvf.c    **** }
 970              		.loc 1 241 0
 971 09aa C9       		leave
 972              		.cfi_def_cfa 7, 8
 973 09ab C3       		ret
 974              		.cfi_endproc
 975              	.LFE10:
 978              	destroyBitStore:
 979              	.LFB11:
 242:svf2csvf.c    **** 
 243:svf2csvf.c    **** static void destroyBitStore(struct BitStore *store) {
 980              		.loc 1 243 0
 981              		.cfi_startproc
 982 09ac 55       		pushq	%rbp
 983              		.cfi_def_cfa_offset 16
 984              		.cfi_offset 6, -16
 985 09ad 4889E5   		movq	%rsp, %rbp
 986              		.cfi_def_cfa_register 6
 987 09b0 4883EC10 		subq	$16, %rsp
 988 09b4 48897DF8 		movq	%rdi, -8(%rbp)
 244:svf2csvf.c    **** 	store->numBits = 0;
 989              		.loc 1 244 0
 990 09b8 488B45F8 		movq	-8(%rbp), %rax
 991 09bc C7000000 		movl	$0, (%rax)
 991      0000
 245:svf2csvf.c    **** 	bufDestroy(&store->tdi);
 992              		.loc 1 245 0
 993 09c2 488B45F8 		movq	-8(%rbp), %rax
 994 09c6 4883C008 		addq	$8, %rax
 995 09ca 4889C7   		movq	%rax, %rdi
 996 09cd E8000000 		call	bufDestroy@PLT
 996      00
 246:svf2csvf.c    **** 	bufDestroy(&store->tdo);
 997              		.loc 1 246 0
 998 09d2 488B45F8 		movq	-8(%rbp), %rax
 999 09d6 4883C028 		addq	$40, %rax
 1000 09da 4889C7   		movq	%rax, %rdi
 1001 09dd E8000000 		call	bufDestroy@PLT
 1001      00
 247:svf2csvf.c    **** 	bufDestroy(&store->mask);
 1002              		.loc 1 247 0
 1003 09e2 488B45F8 		movq	-8(%rbp), %rax
 1004 09e6 4883C048 		addq	$72, %rax
 1005 09ea 4889C7   		movq	%rax, %rdi
 1006 09ed E8000000 		call	bufDestroy@PLT
 1006      00
 248:svf2csvf.c    **** }
 1007              		.loc 1 248 0
 1008 09f2 C9       		leave
 1009              		.cfi_def_cfa 7, 8
 1010 09f3 C3       		ret
 1011              		.cfi_endproc
 1012              	.LFE11:
 1014              		.section	.rodata
 1015              	.LC6:
 1016 007e 63787449 		.string	"cxtInitialise()"
 1016      6E697469 
 1016      616C6973 
 1016      65282900 
 1017              		.text
 1018              		.globl	cxtInitialise
 1020              	cxtInitialise:
 1021              	.LFB12:
 249:svf2csvf.c    **** 
 250:svf2csvf.c    **** FLStatus cxtInitialise(struct ParseContext *cxt, const char **error) {
 1022              		.loc 1 250 0
 1023              		.cfi_startproc
 1024 09f4 55       		pushq	%rbp
 1025              		.cfi_def_cfa_offset 16
 1026              		.cfi_offset 6, -16
 1027 09f5 4889E5   		movq	%rsp, %rbp
 1028              		.cfi_def_cfa_register 6
 1029 09f8 4883EC20 		subq	$32, %rsp
 1030 09fc 48897DE8 		movq	%rdi, -24(%rbp)
 1031 0a00 488975E0 		movq	%rsi, -32(%rbp)
 251:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1032              		.loc 1 251 0
 1033 0a04 C745F400 		movl	$0, -12(%rbp)
 1033      000000
 252:svf2csvf.c    **** 	BufferStatus bStatus;
 253:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataHead, error);
 1034              		.loc 1 253 0
 1035 0a0b 488B45E8 		movq	-24(%rbp), %rax
 1036 0a0f 488B55E0 		movq	-32(%rbp), %rdx
 1037 0a13 4889D6   		movq	%rdx, %rsi
 1038 0a16 4889C7   		movq	%rax, %rdi
 1039 0a19 E89DFEFF 		call	initBitStore
 1039      FF
 1040 0a1e 8945F8   		movl	%eax, -8(%rbp)
 254:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1041              		.loc 1 254 0
 1042 0a21 837DF800 		cmpl	$0, -8(%rbp)
 1043 0a25 741E     		je	.L57
 1044              		.loc 1 254 0 is_stmt 0 discriminator 1
 1045 0a27 488B45E0 		movq	-32(%rbp), %rax
 1046 0a2b 488D3500 		leaq	.LC6(%rip), %rsi
 1046      000000
 1047 0a32 4889C7   		movq	%rax, %rdi
 1048 0a35 E8000000 		call	errPrefix@PLT
 1048      00
 1049 0a3a 8B45F8   		movl	-8(%rbp), %eax
 1050 0a3d 8945F4   		movl	%eax, -12(%rbp)
 1051 0a40 E9BA0100 		jmp	.L58
 1051      00
 1052              	.L57:
 255:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataBody, error);
 1053              		.loc 1 255 0 is_stmt 1
 1054 0a45 488B45E8 		movq	-24(%rbp), %rax
 1055 0a49 488D90D0 		leaq	208(%rax), %rdx
 1055      000000
 1056 0a50 488B45E0 		movq	-32(%rbp), %rax
 1057 0a54 4889C6   		movq	%rax, %rsi
 1058 0a57 4889D7   		movq	%rdx, %rdi
 1059 0a5a E85CFEFF 		call	initBitStore
 1059      FF
 1060 0a5f 8945F8   		movl	%eax, -8(%rbp)
 256:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1061              		.loc 1 256 0
 1062 0a62 837DF800 		cmpl	$0, -8(%rbp)
 1063 0a66 741E     		je	.L59
 1064              		.loc 1 256 0 is_stmt 0 discriminator 1
 1065 0a68 488B45E0 		movq	-32(%rbp), %rax
 1066 0a6c 488D3500 		leaq	.LC6(%rip), %rsi
 1066      000000
 1067 0a73 4889C7   		movq	%rax, %rdi
 1068 0a76 E8000000 		call	errPrefix@PLT
 1068      00
 1069 0a7b 8B45F8   		movl	-8(%rbp), %eax
 1070 0a7e 8945F4   		movl	%eax, -12(%rbp)
 1071 0a81 E9790100 		jmp	.L58
 1071      00
 1072              	.L59:
 257:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->dataTail, error);
 1073              		.loc 1 257 0 is_stmt 1
 1074 0a86 488B45E8 		movq	-24(%rbp), %rax
 1075 0a8a 488D90A0 		leaq	416(%rax), %rdx
 1075      010000
 1076 0a91 488B45E0 		movq	-32(%rbp), %rax
 1077 0a95 4889C6   		movq	%rax, %rsi
 1078 0a98 4889D7   		movq	%rdx, %rdi
 1079 0a9b E81BFEFF 		call	initBitStore
 1079      FF
 1080 0aa0 8945F8   		movl	%eax, -8(%rbp)
 258:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1081              		.loc 1 258 0
 1082 0aa3 837DF800 		cmpl	$0, -8(%rbp)
 1083 0aa7 741E     		je	.L60
 1084              		.loc 1 258 0 is_stmt 0 discriminator 1
 1085 0aa9 488B45E0 		movq	-32(%rbp), %rax
 1086 0aad 488D3500 		leaq	.LC6(%rip), %rsi
 1086      000000
 1087 0ab4 4889C7   		movq	%rax, %rdi
 1088 0ab7 E8000000 		call	errPrefix@PLT
 1088      00
 1089 0abc 8B45F8   		movl	-8(%rbp), %eax
 1090 0abf 8945F4   		movl	%eax, -12(%rbp)
 1091 0ac2 E9380100 		jmp	.L58
 1091      00
 1092              	.L60:
 259:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnHead, error);
 1093              		.loc 1 259 0 is_stmt 1
 1094 0ac7 488B45E8 		movq	-24(%rbp), %rax
 1095 0acb 488D5068 		leaq	104(%rax), %rdx
 1096 0acf 488B45E0 		movq	-32(%rbp), %rax
 1097 0ad3 4889C6   		movq	%rax, %rsi
 1098 0ad6 4889D7   		movq	%rdx, %rdi
 1099 0ad9 E8DDFDFF 		call	initBitStore
 1099      FF
 1100 0ade 8945F8   		movl	%eax, -8(%rbp)
 260:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1101              		.loc 1 260 0
 1102 0ae1 837DF800 		cmpl	$0, -8(%rbp)
 1103 0ae5 741E     		je	.L61
 1104              		.loc 1 260 0 is_stmt 0 discriminator 1
 1105 0ae7 488B45E0 		movq	-32(%rbp), %rax
 1106 0aeb 488D3500 		leaq	.LC6(%rip), %rsi
 1106      000000
 1107 0af2 4889C7   		movq	%rax, %rdi
 1108 0af5 E8000000 		call	errPrefix@PLT
 1108      00
 1109 0afa 8B45F8   		movl	-8(%rbp), %eax
 1110 0afd 8945F4   		movl	%eax, -12(%rbp)
 1111 0b00 E9FA0000 		jmp	.L58
 1111      00
 1112              	.L61:
 261:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnBody, error);
 1113              		.loc 1 261 0 is_stmt 1
 1114 0b05 488B45E8 		movq	-24(%rbp), %rax
 1115 0b09 488D9038 		leaq	312(%rax), %rdx
 1115      010000
 1116 0b10 488B45E0 		movq	-32(%rbp), %rax
 1117 0b14 4889C6   		movq	%rax, %rsi
 1118 0b17 4889D7   		movq	%rdx, %rdi
 1119 0b1a E89CFDFF 		call	initBitStore
 1119      FF
 1120 0b1f 8945F8   		movl	%eax, -8(%rbp)
 262:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1121              		.loc 1 262 0
 1122 0b22 837DF800 		cmpl	$0, -8(%rbp)
 1123 0b26 741E     		je	.L62
 1124              		.loc 1 262 0 is_stmt 0 discriminator 1
 1125 0b28 488B45E0 		movq	-32(%rbp), %rax
 1126 0b2c 488D3500 		leaq	.LC6(%rip), %rsi
 1126      000000
 1127 0b33 4889C7   		movq	%rax, %rdi
 1128 0b36 E8000000 		call	errPrefix@PLT
 1128      00
 1129 0b3b 8B45F8   		movl	-8(%rbp), %eax
 1130 0b3e 8945F4   		movl	%eax, -12(%rbp)
 1131 0b41 E9B90000 		jmp	.L58
 1131      00
 1132              	.L62:
 263:svf2csvf.c    **** 	fStatus = initBitStore(&cxt->insnTail, error);
 1133              		.loc 1 263 0 is_stmt 1
 1134 0b46 488B45E8 		movq	-24(%rbp), %rax
 1135 0b4a 488D9008 		leaq	520(%rax), %rdx
 1135      020000
 1136 0b51 488B45E0 		movq	-32(%rbp), %rax
 1137 0b55 4889C6   		movq	%rax, %rsi
 1138 0b58 4889D7   		movq	%rdx, %rdi
 1139 0b5b E85BFDFF 		call	initBitStore
 1139      FF
 1140 0b60 8945F8   		movl	%eax, -8(%rbp)
 264:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "cxtInitialise()");
 1141              		.loc 1 264 0
 1142 0b63 837DF800 		cmpl	$0, -8(%rbp)
 1143 0b67 741B     		je	.L63
 1144              		.loc 1 264 0 is_stmt 0 discriminator 1
 1145 0b69 488B45E0 		movq	-32(%rbp), %rax
 1146 0b6d 488D3500 		leaq	.LC6(%rip), %rsi
 1146      000000
 1147 0b74 4889C7   		movq	%rax, %rdi
 1148 0b77 E8000000 		call	errPrefix@PLT
 1148      00
 1149 0b7c 8B45F8   		movl	-8(%rbp), %eax
 1150 0b7f 8945F4   		movl	%eax, -12(%rbp)
 1151 0b82 EB7B     		jmp	.L58
 1152              	.L63:
 265:svf2csvf.c    **** 	cxt->curLength = 0;
 1153              		.loc 1 265 0 is_stmt 1
 1154 0b84 488B45E8 		movq	-24(%rbp), %rax
 1155 0b88 C7807002 		movl	$0, 624(%rax)
 1155      00000000 
 1155      0000
 266:svf2csvf.c    **** 	bStatus = bufInitialise(&cxt->curMaskBuf, 1024, 0x00, error);
 1156              		.loc 1 266 0
 1157 0b92 488B45E8 		movq	-24(%rbp), %rax
 1158 0b96 488DB878 		leaq	632(%rax), %rdi
 1158      020000
 1159 0b9d 488B45E0 		movq	-32(%rbp), %rax
 1160 0ba1 4889C1   		movq	%rax, %rcx
 1161 0ba4 BA000000 		movl	$0, %edx
 1161      00
 1162 0ba9 BE000400 		movl	$1024, %esi
 1162      00
 1163 0bae E8000000 		call	bufInitialise@PLT
 1163      00
 1164 0bb3 8945FC   		movl	%eax, -4(%rbp)
 267:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "cxtInitialise()");
 1165              		.loc 1 267 0
 1166 0bb6 837DFC00 		cmpl	$0, -4(%rbp)
 1167 0bba 741C     		je	.L64
 1168              		.loc 1 267 0 is_stmt 0 discriminator 1
 1169 0bbc 488B45E0 		movq	-32(%rbp), %rax
 1170 0bc0 488D3500 		leaq	.LC6(%rip), %rsi
 1170      000000
 1171 0bc7 4889C7   		movq	%rax, %rdi
 1172 0bca E8000000 		call	errPrefix@PLT
 1172      00
 1173 0bcf C745F401 		movl	$1, -12(%rbp)
 1173      000000
 1174 0bd6 EB27     		jmp	.L58
 1175              	.L64:
 268:svf2csvf.c    **** 	cxt->curMaskBits = 0;
 1176              		.loc 1 268 0 is_stmt 1
 1177 0bd8 488B45E8 		movq	-24(%rbp), %rax
 1178 0bdc C7809802 		movl	$0, 664(%rax)
 1178      00000000 
 1178      0000
 269:svf2csvf.c    **** 	cxt->numCommands = 0;
 1179              		.loc 1 269 0
 1180 0be6 488B45E8 		movq	-24(%rbp), %rax
 1181 0bea C7809C02 		movl	$0, 668(%rax)
 1181      00000000 
 1181      0000
 270:svf2csvf.c    **** 	cxt->newMaskWritten = false;
 1182              		.loc 1 270 0
 1183 0bf4 488B45E8 		movq	-24(%rbp), %rax
 1184 0bf8 C680A002 		movb	$0, 672(%rax)
 1184      000000
 1185              	.L58:
 271:svf2csvf.c    **** cleanup:
 272:svf2csvf.c    **** 	return retVal;
 1186              		.loc 1 272 0
 1187 0bff 8B45F4   		movl	-12(%rbp), %eax
 273:svf2csvf.c    **** }
 1188              		.loc 1 273 0
 1189 0c02 C9       		leave
 1190              		.cfi_def_cfa 7, 8
 1191 0c03 C3       		ret
 1192              		.cfi_endproc
 1193              	.LFE12:
 1195              		.globl	cxtDestroy
 1197              	cxtDestroy:
 1198              	.LFB13:
 274:svf2csvf.c    **** 
 275:svf2csvf.c    **** void cxtDestroy(struct ParseContext *cxt) {
 1199              		.loc 1 275 0
 1200              		.cfi_startproc
 1201 0c04 55       		pushq	%rbp
 1202              		.cfi_def_cfa_offset 16
 1203              		.cfi_offset 6, -16
 1204 0c05 4889E5   		movq	%rsp, %rbp
 1205              		.cfi_def_cfa_register 6
 1206 0c08 4883EC10 		subq	$16, %rsp
 1207 0c0c 48897DF8 		movq	%rdi, -8(%rbp)
 276:svf2csvf.c    **** 	destroyBitStore(&cxt->dataHead);
 1208              		.loc 1 276 0
 1209 0c10 488B45F8 		movq	-8(%rbp), %rax
 1210 0c14 4889C7   		movq	%rax, %rdi
 1211 0c17 E890FDFF 		call	destroyBitStore
 1211      FF
 277:svf2csvf.c    **** 	destroyBitStore(&cxt->dataBody);
 1212              		.loc 1 277 0
 1213 0c1c 488B45F8 		movq	-8(%rbp), %rax
 1214 0c20 4805D000 		addq	$208, %rax
 1214      0000
 1215 0c26 4889C7   		movq	%rax, %rdi
 1216 0c29 E87EFDFF 		call	destroyBitStore
 1216      FF
 278:svf2csvf.c    **** 	destroyBitStore(&cxt->dataTail);
 1217              		.loc 1 278 0
 1218 0c2e 488B45F8 		movq	-8(%rbp), %rax
 1219 0c32 4805A001 		addq	$416, %rax
 1219      0000
 1220 0c38 4889C7   		movq	%rax, %rdi
 1221 0c3b E86CFDFF 		call	destroyBitStore
 1221      FF
 279:svf2csvf.c    **** 	destroyBitStore(&cxt->insnHead);
 1222              		.loc 1 279 0
 1223 0c40 488B45F8 		movq	-8(%rbp), %rax
 1224 0c44 4883C068 		addq	$104, %rax
 1225 0c48 4889C7   		movq	%rax, %rdi
 1226 0c4b E85CFDFF 		call	destroyBitStore
 1226      FF
 280:svf2csvf.c    **** 	destroyBitStore(&cxt->insnBody);
 1227              		.loc 1 280 0
 1228 0c50 488B45F8 		movq	-8(%rbp), %rax
 1229 0c54 48053801 		addq	$312, %rax
 1229      0000
 1230 0c5a 4889C7   		movq	%rax, %rdi
 1231 0c5d E84AFDFF 		call	destroyBitStore
 1231      FF
 281:svf2csvf.c    **** 	destroyBitStore(&cxt->insnTail);
 1232              		.loc 1 281 0
 1233 0c62 488B45F8 		movq	-8(%rbp), %rax
 1234 0c66 48050802 		addq	$520, %rax
 1234      0000
 1235 0c6c 4889C7   		movq	%rax, %rdi
 1236 0c6f E838FDFF 		call	destroyBitStore
 1236      FF
 282:svf2csvf.c    **** 	bufDestroy(&cxt->curMaskBuf);
 1237              		.loc 1 282 0
 1238 0c74 488B45F8 		movq	-8(%rbp), %rax
 1239 0c78 48057802 		addq	$632, %rax
 1239      0000
 1240 0c7e 4889C7   		movq	%rax, %rdi
 1241 0c81 E8000000 		call	bufDestroy@PLT
 1241      00
 283:svf2csvf.c    **** }
 1242              		.loc 1 283 0
 1243 0c86 C9       		leave
 1244              		.cfi_def_cfa 7, 8
 1245 0c87 C3       		ret
 1246              		.cfi_endproc
 1247              	.LFE13:
 1249              		.section	.rodata
 1250              	.LC7:
 1251 008e 70726F63 		.string	"processLine()"
 1251      6573734C 
 1251      696E6528 
 1251      2900
 1252              		.text
 1254              	processLine:
 1255              	.LFB14:
 284:svf2csvf.c    **** 
 285:svf2csvf.c    **** typedef enum {
 286:svf2csvf.c    **** 	HEAD = 'H',
 287:svf2csvf.c    **** 	TAIL = 'T',
 288:svf2csvf.c    **** 	BODY = 'S'
 289:svf2csvf.c    **** } ShiftOperation;
 290:svf2csvf.c    **** 
 291:svf2csvf.c    **** /**
 292:svf2csvf.c    ****  * Read the data from the tdi, tdo and mask ASCII hex byte sequences into the supplied BitStore as
 293:svf2csvf.c    ****  * binary data.
 294:svf2csvf.c    ****  */
 295:svf2csvf.c    **** static FLStatus processLine(
 296:svf2csvf.c    **** 	struct BitStore *store,
 297:svf2csvf.c    **** 	uint32 newLength, const char *tdi, const char *tdo, const char *mask,
 298:svf2csvf.c    **** 	const char **error)
 299:svf2csvf.c    **** {
 1256              		.loc 1 299 0
 1257              		.cfi_startproc
 1258 0c88 55       		pushq	%rbp
 1259              		.cfi_def_cfa_offset 16
 1260              		.cfi_offset 6, -16
 1261 0c89 4889E5   		movq	%rsp, %rbp
 1262              		.cfi_def_cfa_register 6
 1263 0c8c 4883EC40 		subq	$64, %rsp
 1264 0c90 48897DE8 		movq	%rdi, -24(%rbp)
 1265 0c94 8975E4   		movl	%esi, -28(%rbp)
 1266 0c97 488955D8 		movq	%rdx, -40(%rbp)
 1267 0c9b 48894DD0 		movq	%rcx, -48(%rbp)
 1268 0c9f 4C8945C8 		movq	%r8, -56(%rbp)
 1269 0ca3 4C894DC0 		movq	%r9, -64(%rbp)
 300:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1270              		.loc 1 300 0
 1271 0ca7 C745F400 		movl	$0, -12(%rbp)
 1271      000000
 301:svf2csvf.c    **** 	BufferStatus bStatus;
 302:svf2csvf.c    **** 
 303:svf2csvf.c    **** 	// The TDI & MASK values are remembered; the TDO value defaults to all zeros. If the length
 304:svf2csvf.c    **** 	// changes, all remembered values are forgotten.
 305:svf2csvf.c    **** 	bufZeroLength(&store->tdo);
 1272              		.loc 1 305 0
 1273 0cae 488B45E8 		movq	-24(%rbp), %rax
 1274 0cb2 4883C028 		addq	$40, %rax
 1275 0cb6 4889C7   		movq	%rax, %rdi
 1276 0cb9 E8000000 		call	bufZeroLength@PLT
 1276      00
 306:svf2csvf.c    **** 	if ( newLength ) {
 1277              		.loc 1 306 0
 1278 0cbe 837DE400 		cmpl	$0, -28(%rbp)
 1279 0cc2 7466     		je	.L68
 307:svf2csvf.c    **** 		bStatus = bufAppendConst(&store->tdo, 0x00, bitsToBytes(newLength), error);
 1280              		.loc 1 307 0
 1281 0cc4 8B45E4   		movl	-28(%rbp), %eax
 1282 0cc7 C1E803   		shrl	$3, %eax
 1283 0cca 89C2     		movl	%eax, %edx
 1284 0ccc 8B45E4   		movl	-28(%rbp), %eax
 1285 0ccf 83E007   		andl	$7, %eax
 1286 0cd2 85C0     		testl	%eax, %eax
 1287 0cd4 7407     		je	.L69
 1288              		.loc 1 307 0 is_stmt 0 discriminator 1
 1289 0cd6 B8010000 		movl	$1, %eax
 1289      00
 1290 0cdb EB05     		jmp	.L70
 1291              	.L69:
 1292              		.loc 1 307 0 discriminator 2
 1293 0cdd B8000000 		movl	$0, %eax
 1293      00
 1294              	.L70:
 1295              		.loc 1 307 0 discriminator 3
 1296 0ce2 01D0     		addl	%edx, %eax
 1297 0ce4 89C0     		movl	%eax, %eax
 1298 0ce6 488B55E8 		movq	-24(%rbp), %rdx
 1299 0cea 488D7A28 		leaq	40(%rdx), %rdi
 1300 0cee 488B55C0 		movq	-64(%rbp), %rdx
 1301 0cf2 4889D1   		movq	%rdx, %rcx
 1302 0cf5 4889C2   		movq	%rax, %rdx
 1303 0cf8 BE000000 		movl	$0, %esi
 1303      00
 1304 0cfd E8000000 		call	bufAppendConst@PLT
 1304      00
 1305 0d02 8945F8   		movl	%eax, -8(%rbp)
 308:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1306              		.loc 1 308 0 is_stmt 1 discriminator 3
 1307 0d05 837DF800 		cmpl	$0, -8(%rbp)
 1308 0d09 741F     		je	.L68
 1309              		.loc 1 308 0 is_stmt 0 discriminator 1
 1310 0d0b 488B45C0 		movq	-64(%rbp), %rax
 1311 0d0f 488D3500 		leaq	.LC7(%rip), %rsi
 1311      000000
 1312 0d16 4889C7   		movq	%rax, %rdi
 1313 0d19 E8000000 		call	errPrefix@PLT
 1313      00
 1314 0d1e C745F401 		movl	$1, -12(%rbp)
 1314      000000
 1315 0d25 E9E20100 		jmp	.L71
 1315      00
 1316              	.L68:
 309:svf2csvf.c    **** 	}
 310:svf2csvf.c    **** 	if ( store->numBits != newLength ) {
 1317              		.loc 1 310 0 is_stmt 1
 1318 0d2a 488B45E8 		movq	-24(%rbp), %rax
 1319 0d2e 8B00     		movl	(%rax), %eax
 1320 0d30 3B45E4   		cmpl	-28(%rbp), %eax
 1321 0d33 0F84F600 		je	.L72
 1321      0000
 311:svf2csvf.c    **** 		// The length changed, so we can't reuse previous values, and new TDI data is required:
 312:svf2csvf.c    **** 		// "The TDI parameter must be explicitly specified for the first command or when the
 313:svf2csvf.c    **** 		// length changes."
 314:svf2csvf.c    **** 		bufZeroLength(&store->tdi);
 1322              		.loc 1 314 0
 1323 0d39 488B45E8 		movq	-24(%rbp), %rax
 1324 0d3d 4883C008 		addq	$8, %rax
 1325 0d41 4889C7   		movq	%rax, %rdi
 1326 0d44 E8000000 		call	bufZeroLength@PLT
 1326      00
 315:svf2csvf.c    **** 		bufZeroLength(&store->mask);
 1327              		.loc 1 315 0
 1328 0d49 488B45E8 		movq	-24(%rbp), %rax
 1329 0d4d 4883C048 		addq	$72, %rax
 1330 0d51 4889C7   		movq	%rax, %rdi
 1331 0d54 E8000000 		call	bufZeroLength@PLT
 1331      00
 316:svf2csvf.c    **** 		if ( newLength ) {
 1332              		.loc 1 316 0
 1333 0d59 837DE400 		cmpl	$0, -28(%rbp)
 1334 0d5d 0F84CC00 		je	.L72
 1334      0000
 317:svf2csvf.c    **** 			bStatus = bufAppendConst(&store->tdi, 0x00, bitsToBytes(newLength), error);
 1335              		.loc 1 317 0
 1336 0d63 8B45E4   		movl	-28(%rbp), %eax
 1337 0d66 C1E803   		shrl	$3, %eax
 1338 0d69 89C2     		movl	%eax, %edx
 1339 0d6b 8B45E4   		movl	-28(%rbp), %eax
 1340 0d6e 83E007   		andl	$7, %eax
 1341 0d71 85C0     		testl	%eax, %eax
 1342 0d73 7407     		je	.L73
 1343              		.loc 1 317 0 is_stmt 0 discriminator 1
 1344 0d75 B8010000 		movl	$1, %eax
 1344      00
 1345 0d7a EB05     		jmp	.L74
 1346              	.L73:
 1347              		.loc 1 317 0 discriminator 2
 1348 0d7c B8000000 		movl	$0, %eax
 1348      00
 1349              	.L74:
 1350              		.loc 1 317 0 discriminator 3
 1351 0d81 01D0     		addl	%edx, %eax
 1352 0d83 89C0     		movl	%eax, %eax
 1353 0d85 488B55E8 		movq	-24(%rbp), %rdx
 1354 0d89 488D7A08 		leaq	8(%rdx), %rdi
 1355 0d8d 488B55C0 		movq	-64(%rbp), %rdx
 1356 0d91 4889D1   		movq	%rdx, %rcx
 1357 0d94 4889C2   		movq	%rax, %rdx
 1358 0d97 BE000000 		movl	$0, %esi
 1358      00
 1359 0d9c E8000000 		call	bufAppendConst@PLT
 1359      00
 1360 0da1 8945F8   		movl	%eax, -8(%rbp)
 318:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1361              		.loc 1 318 0 is_stmt 1 discriminator 3
 1362 0da4 837DF800 		cmpl	$0, -8(%rbp)
 1363 0da8 741F     		je	.L75
 1364              		.loc 1 318 0 is_stmt 0 discriminator 1
 1365 0daa 488B45C0 		movq	-64(%rbp), %rax
 1366 0dae 488D3500 		leaq	.LC7(%rip), %rsi
 1366      000000
 1367 0db5 4889C7   		movq	%rax, %rdi
 1368 0db8 E8000000 		call	errPrefix@PLT
 1368      00
 1369 0dbd C745F401 		movl	$1, -12(%rbp)
 1369      000000
 1370 0dc4 E9430100 		jmp	.L71
 1370      00
 1371              	.L75:
 319:svf2csvf.c    **** 			bStatus = bufAppendConst(&store->mask, 0xFF, bitsToBytes(newLength), error);
 1372              		.loc 1 319 0 is_stmt 1
 1373 0dc9 8B45E4   		movl	-28(%rbp), %eax
 1374 0dcc C1E803   		shrl	$3, %eax
 1375 0dcf 89C2     		movl	%eax, %edx
 1376 0dd1 8B45E4   		movl	-28(%rbp), %eax
 1377 0dd4 83E007   		andl	$7, %eax
 1378 0dd7 85C0     		testl	%eax, %eax
 1379 0dd9 7407     		je	.L76
 1380              		.loc 1 319 0 is_stmt 0 discriminator 1
 1381 0ddb B8010000 		movl	$1, %eax
 1381      00
 1382 0de0 EB05     		jmp	.L77
 1383              	.L76:
 1384              		.loc 1 319 0 discriminator 2
 1385 0de2 B8000000 		movl	$0, %eax
 1385      00
 1386              	.L77:
 1387              		.loc 1 319 0 discriminator 3
 1388 0de7 01D0     		addl	%edx, %eax
 1389 0de9 89C0     		movl	%eax, %eax
 1390 0deb 488B55E8 		movq	-24(%rbp), %rdx
 1391 0def 488D7A48 		leaq	72(%rdx), %rdi
 1392 0df3 488B55C0 		movq	-64(%rbp), %rdx
 1393 0df7 4889D1   		movq	%rdx, %rcx
 1394 0dfa 4889C2   		movq	%rax, %rdx
 1395 0dfd BEFF0000 		movl	$255, %esi
 1395      00
 1396 0e02 E8000000 		call	bufAppendConst@PLT
 1396      00
 1397 0e07 8945F8   		movl	%eax, -8(%rbp)
 320:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "processLine()");
 1398              		.loc 1 320 0 is_stmt 1 discriminator 3
 1399 0e0a 837DF800 		cmpl	$0, -8(%rbp)
 1400 0e0e 741F     		je	.L72
 1401              		.loc 1 320 0 is_stmt 0 discriminator 1
 1402 0e10 488B45C0 		movq	-64(%rbp), %rax
 1403 0e14 488D3500 		leaq	.LC7(%rip), %rsi
 1403      000000
 1404 0e1b 4889C7   		movq	%rax, %rdi
 1405 0e1e E8000000 		call	errPrefix@PLT
 1405      00
 1406 0e23 C745F401 		movl	$1, -12(%rbp)
 1406      000000
 1407 0e2a E9DD0000 		jmp	.L71
 1407      00
 1408              	.L72:
 321:svf2csvf.c    **** 		}
 322:svf2csvf.c    **** 	}
 323:svf2csvf.c    **** 	store->numBits = newLength;
 1409              		.loc 1 323 0 is_stmt 1
 1410 0e2f 488B45E8 		movq	-24(%rbp), %rax
 1411 0e33 8B55E4   		movl	-28(%rbp), %edx
 1412 0e36 8910     		movl	%edx, (%rax)
 324:svf2csvf.c    **** 	if ( tdi ) {
 1413              		.loc 1 324 0
 1414 0e38 48837DD8 		cmpq	$0, -40(%rbp)
 1414      00
 1415 0e3d 7442     		je	.L78
 325:svf2csvf.c    **** 		fStatus = readBytes(&store->tdi, tdi, error);
 1416              		.loc 1 325 0
 1417 0e3f 488B45E8 		movq	-24(%rbp), %rax
 1418 0e43 488D4808 		leaq	8(%rax), %rcx
 1419 0e47 488B55C0 		movq	-64(%rbp), %rdx
 1420 0e4b 488B45D8 		movq	-40(%rbp), %rax
 1421 0e4f 4889C6   		movq	%rax, %rsi
 1422 0e52 4889CF   		movq	%rcx, %rdi
 1423 0e55 E8000000 		call	readBytes@PLT
 1423      00
 1424 0e5a 8945FC   		movl	%eax, -4(%rbp)
 326:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1425              		.loc 1 326 0
 1426 0e5d 837DFC00 		cmpl	$0, -4(%rbp)
 1427 0e61 741E     		je	.L78
 1428              		.loc 1 326 0 is_stmt 0 discriminator 1
 1429 0e63 488B45C0 		movq	-64(%rbp), %rax
 1430 0e67 488D3500 		leaq	.LC7(%rip), %rsi
 1430      000000
 1431 0e6e 4889C7   		movq	%rax, %rdi
 1432 0e71 E8000000 		call	errPrefix@PLT
 1432      00
 1433 0e76 8B45FC   		movl	-4(%rbp), %eax
 1434 0e79 8945F4   		movl	%eax, -12(%rbp)
 1435 0e7c E98B0000 		jmp	.L71
 1435      00
 1436              	.L78:
 327:svf2csvf.c    **** 	}
 328:svf2csvf.c    **** 	if ( tdo ) {
 1437              		.loc 1 328 0 is_stmt 1
 1438 0e81 48837DD0 		cmpq	$0, -48(%rbp)
 1438      00
 1439 0e86 743F     		je	.L79
 329:svf2csvf.c    **** 		fStatus = readBytes(&store->tdo, tdo, error);
 1440              		.loc 1 329 0
 1441 0e88 488B45E8 		movq	-24(%rbp), %rax
 1442 0e8c 488D4828 		leaq	40(%rax), %rcx
 1443 0e90 488B55C0 		movq	-64(%rbp), %rdx
 1444 0e94 488B45D0 		movq	-48(%rbp), %rax
 1445 0e98 4889C6   		movq	%rax, %rsi
 1446 0e9b 4889CF   		movq	%rcx, %rdi
 1447 0e9e E8000000 		call	readBytes@PLT
 1447      00
 1448 0ea3 8945FC   		movl	%eax, -4(%rbp)
 330:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1449              		.loc 1 330 0
 1450 0ea6 837DFC00 		cmpl	$0, -4(%rbp)
 1451 0eaa 741B     		je	.L79
 1452              		.loc 1 330 0 is_stmt 0 discriminator 1
 1453 0eac 488B45C0 		movq	-64(%rbp), %rax
 1454 0eb0 488D3500 		leaq	.LC7(%rip), %rsi
 1454      000000
 1455 0eb7 4889C7   		movq	%rax, %rdi
 1456 0eba E8000000 		call	errPrefix@PLT
 1456      00
 1457 0ebf 8B45FC   		movl	-4(%rbp), %eax
 1458 0ec2 8945F4   		movl	%eax, -12(%rbp)
 1459 0ec5 EB45     		jmp	.L71
 1460              	.L79:
 331:svf2csvf.c    **** 	}
 332:svf2csvf.c    **** 	if ( mask ) {
 1461              		.loc 1 332 0 is_stmt 1
 1462 0ec7 48837DC8 		cmpq	$0, -56(%rbp)
 1462      00
 1463 0ecc 743E     		je	.L71
 333:svf2csvf.c    **** 		fStatus = readBytes(&store->mask, mask, error);
 1464              		.loc 1 333 0
 1465 0ece 488B45E8 		movq	-24(%rbp), %rax
 1466 0ed2 488D4848 		leaq	72(%rax), %rcx
 1467 0ed6 488B55C0 		movq	-64(%rbp), %rdx
 1468 0eda 488B45C8 		movq	-56(%rbp), %rax
 1469 0ede 4889C6   		movq	%rax, %rsi
 1470 0ee1 4889CF   		movq	%rcx, %rdi
 1471 0ee4 E8000000 		call	readBytes@PLT
 1471      00
 1472 0ee9 8945FC   		movl	%eax, -4(%rbp)
 334:svf2csvf.c    **** 		CHECK_STATUS(fStatus, fStatus, cleanup, "processLine()");
 1473              		.loc 1 334 0
 1474 0eec 837DFC00 		cmpl	$0, -4(%rbp)
 1475 0ef0 741A     		je	.L71
 1476              		.loc 1 334 0 is_stmt 0 discriminator 1
 1477 0ef2 488B45C0 		movq	-64(%rbp), %rax
 1478 0ef6 488D3500 		leaq	.LC7(%rip), %rsi
 1478      000000
 1479 0efd 4889C7   		movq	%rax, %rdi
 1480 0f00 E8000000 		call	errPrefix@PLT
 1480      00
 1481 0f05 8B45FC   		movl	-4(%rbp), %eax
 1482 0f08 8945F4   		movl	%eax, -12(%rbp)
 1483 0f0b 90       		nop
 1484              	.L71:
 335:svf2csvf.c    **** 	}
 336:svf2csvf.c    **** 
 337:svf2csvf.c    **** cleanup:
 338:svf2csvf.c    **** 	return retVal;
 1485              		.loc 1 338 0 is_stmt 1
 1486 0f0c 8B45F4   		movl	-12(%rbp), %eax
 339:svf2csvf.c    **** }
 1487              		.loc 1 339 0
 1488 0f0f C9       		leave
 1489              		.cfi_def_cfa 7, 8
 1490 0f10 C3       		ret
 1491              		.cfi_endproc
 1492              	.LFE14:
 1495              	isAllZero:
 1496              	.LFB15:
 340:svf2csvf.c    **** 
 341:svf2csvf.c    **** /**
 342:svf2csvf.c    ****  * Return true if the buffer is all zeros
 343:svf2csvf.c    ****  */
 344:svf2csvf.c    **** static bool isAllZero(struct Buffer *buf) {
 1497              		.loc 1 344 0
 1498              		.cfi_startproc
 1499 0f11 55       		pushq	%rbp
 1500              		.cfi_def_cfa_offset 16
 1501              		.cfi_offset 6, -16
 1502 0f12 4889E5   		movq	%rsp, %rbp
 1503              		.cfi_def_cfa_register 6
 1504 0f15 48897DE8 		movq	%rdi, -24(%rbp)
 345:svf2csvf.c    **** 	const uint8 *p = buf->data;
 1505              		.loc 1 345 0
 1506 0f19 488B45E8 		movq	-24(%rbp), %rax
 1507 0f1d 488B00   		movq	(%rax), %rax
 1508 0f20 488945F8 		movq	%rax, -8(%rbp)
 346:svf2csvf.c    **** 	uint32 length = (uint32)buf->length;
 1509              		.loc 1 346 0
 1510 0f24 488B45E8 		movq	-24(%rbp), %rax
 1511 0f28 488B4008 		movq	8(%rax), %rax
 1512 0f2c 8945F4   		movl	%eax, -12(%rbp)
 347:svf2csvf.c    **** 	while ( length-- ) {
 1513              		.loc 1 347 0
 1514 0f2f EB1A     		jmp	.L82
 1515              	.L84:
 348:svf2csvf.c    **** 		if ( *p++ ) {
 1516              		.loc 1 348 0
 1517 0f31 488B45F8 		movq	-8(%rbp), %rax
 1518 0f35 488D5001 		leaq	1(%rax), %rdx
 1519 0f39 488955F8 		movq	%rdx, -8(%rbp)
 1520 0f3d 0FB600   		movzbl	(%rax), %eax
 1521 0f40 84C0     		testb	%al, %al
 1522 0f42 7407     		je	.L82
 349:svf2csvf.c    **** 			return false;
 1523              		.loc 1 349 0
 1524 0f44 B8000000 		movl	$0, %eax
 1524      00
 1525 0f49 EB12     		jmp	.L83
 1526              	.L82:
 347:svf2csvf.c    **** 	while ( length-- ) {
 1527              		.loc 1 347 0 discriminator 1
 1528 0f4b 8B45F4   		movl	-12(%rbp), %eax
 1529 0f4e 8D50FF   		leal	-1(%rax), %edx
 1530 0f51 8955F4   		movl	%edx, -12(%rbp)
 1531 0f54 85C0     		testl	%eax, %eax
 1532 0f56 75D9     		jne	.L84
 350:svf2csvf.c    **** 		}
 351:svf2csvf.c    **** 	}
 352:svf2csvf.c    **** 	return true;
 1533              		.loc 1 352 0
 1534 0f58 B8010000 		movl	$1, %eax
 1534      00
 1535              	.L83:
 353:svf2csvf.c    **** }
 1536              		.loc 1 353 0
 1537 0f5d 5D       		popq	%rbp
 1538              		.cfi_def_cfa 7, 8
 1539 0f5e C3       		ret
 1540              		.cfi_endproc
 1541              	.LFE15:
 1543              		.section	.rodata
 1544              	.LC8:
 1545 009c 61707065 		.string	"appendSwapped()"
 1545      6E645377 
 1545      61707065 
 1545      64282900 
 1546              		.text
 1548              	appendSwappedAndInterleaved:
 1549              	.LFB16:
 354:svf2csvf.c    **** 
 355:svf2csvf.c    **** // Reverse and interleave the incoming tdi, tdoExpected arrays:
 356:svf2csvf.c    **** // 0123456789ABCDEFGHIJ -> 9J8I7H6G5F4E3D2C1B0A
 357:svf2csvf.c    **** //
 358:svf2csvf.c    **** static FLStatus appendSwappedAndInterleaved(
 359:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *tdi, const uint8 *exp, uint32 count, const char **error)
 360:svf2csvf.c    **** {
 1550              		.loc 1 360 0
 1551              		.cfi_startproc
 1552 0f5f 55       		pushq	%rbp
 1553              		.cfi_def_cfa_offset 16
 1554              		.cfi_offset 6, -16
 1555 0f60 4889E5   		movq	%rsp, %rbp
 1556              		.cfi_def_cfa_register 6
 1557 0f63 4883EC50 		subq	$80, %rsp
 1558 0f67 48897DD8 		movq	%rdi, -40(%rbp)
 1559 0f6b 488975D0 		movq	%rsi, -48(%rbp)
 1560 0f6f 488955C8 		movq	%rdx, -56(%rbp)
 1561 0f73 894DC4   		movl	%ecx, -60(%rbp)
 1562 0f76 4C8945B8 		movq	%r8, -72(%rbp)
 361:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 1563              		.loc 1 361 0
 1564 0f7a C745E800 		movl	$0, -24(%rbp)
 1564      000000
 362:svf2csvf.c    **** 	BufferStatus bStatus;
 363:svf2csvf.c    **** 	const uint8 *tdiPtr = tdi + count - 1;
 1565              		.loc 1 363 0
 1566 0f81 8B45C4   		movl	-60(%rbp), %eax
 1567 0f84 488D50FF 		leaq	-1(%rax), %rdx
 1568 0f88 488B45D0 		movq	-48(%rbp), %rax
 1569 0f8c 4801D0   		addq	%rdx, %rax
 1570 0f8f 488945F0 		movq	%rax, -16(%rbp)
 364:svf2csvf.c    **** 	const uint8 *expPtr = exp + count - 1;
 1571              		.loc 1 364 0
 1572 0f93 8B45C4   		movl	-60(%rbp), %eax
 1573 0f96 488D50FF 		leaq	-1(%rax), %rdx
 1574 0f9a 488B45C8 		movq	-56(%rbp), %rax
 1575 0f9e 4801D0   		addq	%rdx, %rax
 1576 0fa1 488945F8 		movq	%rax, -8(%rbp)
 365:svf2csvf.c    **** 	while ( count-- ) {
 1577              		.loc 1 365 0
 1578 0fa5 E9920000 		jmp	.L86
 1578      00
 1579              	.L89:
 366:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *tdiPtr--, error);
 1580              		.loc 1 366 0
 1581 0faa 488B45F0 		movq	-16(%rbp), %rax
 1582 0fae 488D50FF 		leaq	-1(%rax), %rdx
 1583 0fb2 488955F0 		movq	%rdx, -16(%rbp)
 1584 0fb6 0FB600   		movzbl	(%rax), %eax
 1585 0fb9 0FB6C8   		movzbl	%al, %ecx
 1586 0fbc 488B55B8 		movq	-72(%rbp), %rdx
 1587 0fc0 488B45D8 		movq	-40(%rbp), %rax
 1588 0fc4 89CE     		movl	%ecx, %esi
 1589 0fc6 4889C7   		movq	%rax, %rdi
 1590 0fc9 E8000000 		call	bufAppendByte@PLT
 1590      00
 1591 0fce 8945EC   		movl	%eax, -20(%rbp)
 367:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1592              		.loc 1 367 0
 1593 0fd1 837DEC00 		cmpl	$0, -20(%rbp)
 1594 0fd5 741C     		je	.L87
 1595              		.loc 1 367 0 is_stmt 0 discriminator 1
 1596 0fd7 488B45B8 		movq	-72(%rbp), %rax
 1597 0fdb 488D3500 		leaq	.LC8(%rip), %rsi
 1597      000000
 1598 0fe2 4889C7   		movq	%rax, %rdi
 1599 0fe5 E8000000 		call	errPrefix@PLT
 1599      00
 1600 0fea C745E801 		movl	$1, -24(%rbp)
 1600      000000
 1601 0ff1 EB5A     		jmp	.L88
 1602              	.L87:
 368:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *expPtr--, error);
 1603              		.loc 1 368 0 is_stmt 1
 1604 0ff3 488B45F8 		movq	-8(%rbp), %rax
 1605 0ff7 488D50FF 		leaq	-1(%rax), %rdx
 1606 0ffb 488955F8 		movq	%rdx, -8(%rbp)
 1607 0fff 0FB600   		movzbl	(%rax), %eax
 1608 1002 0FB6C8   		movzbl	%al, %ecx
 1609 1005 488B55B8 		movq	-72(%rbp), %rdx
 1610 1009 488B45D8 		movq	-40(%rbp), %rax
 1611 100d 89CE     		movl	%ecx, %esi
 1612 100f 4889C7   		movq	%rax, %rdi
 1613 1012 E8000000 		call	bufAppendByte@PLT
 1613      00
 1614 1017 8945EC   		movl	%eax, -20(%rbp)
 369:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1615              		.loc 1 369 0
 1616 101a 837DEC00 		cmpl	$0, -20(%rbp)
 1617 101e 741C     		je	.L86
 1618              		.loc 1 369 0 is_stmt 0 discriminator 1
 1619 1020 488B45B8 		movq	-72(%rbp), %rax
 1620 1024 488D3500 		leaq	.LC8(%rip), %rsi
 1620      000000
 1621 102b 4889C7   		movq	%rax, %rdi
 1622 102e E8000000 		call	errPrefix@PLT
 1622      00
 1623 1033 C745E801 		movl	$1, -24(%rbp)
 1623      000000
 1624 103a EB11     		jmp	.L88
 1625              	.L86:
 365:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *tdiPtr--, error);
 1626              		.loc 1 365 0 is_stmt 1 discriminator 1
 1627 103c 8B45C4   		movl	-60(%rbp), %eax
 1628 103f 8D50FF   		leal	-1(%rax), %edx
 1629 1042 8955C4   		movl	%edx, -60(%rbp)
 1630 1045 85C0     		testl	%eax, %eax
 1631 1047 0F855DFF 		jne	.L89
 1631      FFFF
 1632              	.L88:
 370:svf2csvf.c    **** 	}
 371:svf2csvf.c    **** cleanup:
 372:svf2csvf.c    **** 	return retVal;
 1633              		.loc 1 372 0
 1634 104d 8B45E8   		movl	-24(%rbp), %eax
 373:svf2csvf.c    **** }
 1635              		.loc 1 373 0
 1636 1050 C9       		leave
 1637              		.cfi_def_cfa 7, 8
 1638 1051 C3       		ret
 1639              		.cfi_endproc
 1640              	.LFE16:
 1643              	appendSwapped:
 1644              	.LFB17:
 374:svf2csvf.c    **** 
 375:svf2csvf.c    **** static FLStatus appendSwapped(
 376:svf2csvf.c    **** 	struct Buffer *buf, const uint8 *src, uint32 count, const char **error)
 377:svf2csvf.c    **** {
 1645              		.loc 1 377 0
 1646              		.cfi_startproc
 1647 1052 55       		pushq	%rbp
 1648              		.cfi_def_cfa_offset 16
 1649              		.cfi_offset 6, -16
 1650 1053 4889E5   		movq	%rsp, %rbp
 1651              		.cfi_def_cfa_register 6
 1652 1056 4883EC30 		subq	$48, %rsp
 1653 105a 48897DE8 		movq	%rdi, -24(%rbp)
 1654 105e 488975E0 		movq	%rsi, -32(%rbp)
 1655 1062 8955DC   		movl	%edx, -36(%rbp)
 1656 1065 48894DD0 		movq	%rcx, -48(%rbp)
 378:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 1657              		.loc 1 378 0
 1658 1069 C745F800 		movl	$0, -8(%rbp)
 1658      000000
 379:svf2csvf.c    **** 	BufferStatus bStatus;
 380:svf2csvf.c    **** 	src += count - 1;
 1659              		.loc 1 380 0
 1660 1070 8B45DC   		movl	-36(%rbp), %eax
 1661 1073 83E801   		subl	$1, %eax
 1662 1076 89C0     		movl	%eax, %eax
 1663 1078 480145E0 		addq	%rax, -32(%rbp)
 381:svf2csvf.c    **** 	while ( count-- ) {
 1664              		.loc 1 381 0
 1665 107c EB49     		jmp	.L92
 1666              	.L94:
 382:svf2csvf.c    **** 		bStatus = bufAppendByte(buf, *src--, error);
 1667              		.loc 1 382 0
 1668 107e 488B45E0 		movq	-32(%rbp), %rax
 1669 1082 488D50FF 		leaq	-1(%rax), %rdx
 1670 1086 488955E0 		movq	%rdx, -32(%rbp)
 1671 108a 0FB600   		movzbl	(%rax), %eax
 1672 108d 0FB6C8   		movzbl	%al, %ecx
 1673 1090 488B55D0 		movq	-48(%rbp), %rdx
 1674 1094 488B45E8 		movq	-24(%rbp), %rax
 1675 1098 89CE     		movl	%ecx, %esi
 1676 109a 4889C7   		movq	%rax, %rdi
 1677 109d E8000000 		call	bufAppendByte@PLT
 1677      00
 1678 10a2 8945FC   		movl	%eax, -4(%rbp)
 383:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "appendSwapped()");
 1679              		.loc 1 383 0
 1680 10a5 837DFC00 		cmpl	$0, -4(%rbp)
 1681 10a9 741C     		je	.L92
 1682              		.loc 1 383 0 is_stmt 0 discriminator 1
 1683 10ab 488B45D0 		movq	-48(%rbp), %rax
 1684 10af 488D3500 		leaq	.LC8(%rip), %rsi
 1684      000000
 1685 10b6 4889C7   		movq	%rax, %rdi
 1686 10b9 E8000000 		call	errPrefix@PLT
 1686      00
 1687 10be C745F801 		movl	$1, -8(%rbp)
 1687      000000
 1688 10c5 EB0D     		jmp	.L93
 1689              	.L92:
 381:svf2csvf.c    **** 	while ( count-- ) {
 1690              		.loc 1 381 0 is_stmt 1 discriminator 1
 1691 10c7 8B45DC   		movl	-36(%rbp), %eax
 1692 10ca 8D50FF   		leal	-1(%rax), %edx
 1693 10cd 8955DC   		movl	%edx, -36(%rbp)
 1694 10d0 85C0     		testl	%eax, %eax
 1695 10d2 75AA     		jne	.L94
 1696              	.L93:
 384:svf2csvf.c    **** 	}
 385:svf2csvf.c    **** cleanup:
 386:svf2csvf.c    **** 	return retVal;
 1697              		.loc 1 386 0
 1698 10d4 8B45F8   		movl	-8(%rbp), %eax
 387:svf2csvf.c    **** }
 1699              		.loc 1 387 0
 1700 10d7 C9       		leave
 1701              		.cfi_def_cfa 7, 8
 1702 10d8 C3       		ret
 1703              		.cfi_endproc
 1704              	.LFE17:
 1706              		.section	.rodata
 1707              	.LC9:
 1708 00ac 52554E54 		.string	"RUNTEST"
 1708      45535400 
 1709              	.LC10:
 1710 00b4 49444C45 		.string	"IDLE"
 1710      00
 1711              	.LC11:
 1712 00b9 54434B00 		.string	"TCK"
 1713              	.LC12:
 1714 00bd 53454300 		.string	"SEC"
 1715 00c1 00000000 		.align 8
 1715      000000
 1716              	.LC14:
 1717 00c8 70617273 		.string	"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|
 1717      654C696E 
 1717      6528293A 
 1717      2052554E 
 1717      54455354 
 1718              	.LC15:
 1719 0136 454E4453 		.string	"ENDSTATE IDLE"
 1719      54415445 
 1719      2049444C 
 1719      4500
 1720              	.LC16:
 1721 0144 70617273 		.string	"parseLine()"
 1721      654C696E 
 1721      65282900 
 1722              	.LC17:
 1723 0150 54444900 		.string	"TDI"
 1724 0154 00000000 		.align 8
 1725              	.LC18:
 1726 0158 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... TDI (<tdi>)\""
 1726      654C696E 
 1726      6528293A 
 1726      20257352 
 1726      206D7573 
 1727              	.LC19:
 1728 0193 534D4153 		.string	"SMASK"
 1728      4B00
 1729 0199 00000000 		.align 8
 1729      000000
 1730              	.LC20:
 1731 01a0 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... SMASK (<smask>)\""
 1731      654C696E 
 1731      6528293A 
 1731      20257352 
 1731      206D7573 
 1732              	.LC21:
 1733 01df 54444F00 		.string	"TDO"
 1734 01e3 00000000 		.align 8
 1734      00
 1735              	.LC22:
 1736 01e8 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... TDO (<tdo>)\""
 1736      654C696E 
 1736      6528293A 
 1736      20257352 
 1736      206D7573 
 1737              	.LC23:
 1738 0223 4D41534B 		.string	"MASK"
 1738      00
 1739              		.align 8
 1740              	.LC24:
 1741 0228 70617273 		.string	"parseLine(): %sR must be of the form \"%sR ... MASK (<mask>)\""
 1741      654C696E 
 1741      6528293A 
 1741      20257352 
 1741      206D7573 
 1742 0265 000000   		.align 8
 1743              	.LC25:
 1744 0268 70617273 		.string	"parseLine(): Junk in [HTS][IR]R line at column %d"
 1744      654C696E 
 1744      6528293A 
 1744      204A756E 
 1744      6B20696E 
 1745 029a 00000000 		.align 8
 1745      0000
 1746              	.LC26:
 1747 02a0 70617273 		.string	"parseLine(): Unrecognised command \"%s\"\n"
 1747      654C696E 
 1747      6528293A 
 1747      20556E72 
 1747      65636F67 
 1748              		.text
 1749              		.globl	parseLine
 1751              	parseLine:
 1752              	.LFB18:
 388:svf2csvf.c    **** 
 389:svf2csvf.c    **** /**
 390:svf2csvf.c    ****  * Parse the supplied SVF line, calling processLine() for shift operations as necessary.
 391:svf2csvf.c    ****  */
 392:svf2csvf.c    **** FLStatus parseLine(
 393:svf2csvf.c    **** 	struct ParseContext *cxt, const struct Buffer *lineBuf, struct Buffer *csvfBuf,
 394:svf2csvf.c    **** 	uint32 *maxBufSize, const char **error)
 395:svf2csvf.c    **** {
 1753              		.loc 1 395 0
 1754              		.cfi_startproc
 1755 10d9 55       		pushq	%rbp
 1756              		.cfi_def_cfa_offset 16
 1757              		.cfi_offset 6, -16
 1758 10da 4889E5   		movq	%rsp, %rbp
 1759              		.cfi_def_cfa_register 6
 1760 10dd 4881EC30 		subq	$304, %rsp
 1760      010000
 1761 10e4 4889BD08 		movq	%rdi, -248(%rbp)
 1761      FFFFFF
 1762 10eb 4889B500 		movq	%rsi, -256(%rbp)
 1762      FFFFFF
 1763 10f2 488995F8 		movq	%rdx, -264(%rbp)
 1763      FEFFFF
 1764 10f9 48898DF0 		movq	%rcx, -272(%rbp)
 1764      FEFFFF
 1765 1100 4C8985E8 		movq	%r8, -280(%rbp)
 1765      FEFFFF
 396:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS, fStatus;
 1766              		.loc 1 396 0
 1767 1107 C78514FF 		movl	$0, -236(%rbp)
 1767      FFFF0000 
 1767      0000
 397:svf2csvf.c    **** 	BufferStatus bStatus;
 398:svf2csvf.c    **** 	char *const line = (char *)lineBuf->data;
 1768              		.loc 1 398 0
 1769 1111 488B8500 		movq	-256(%rbp), %rax
 1769      FFFFFF
 1770 1118 488B00   		movq	(%rax), %rax
 1771 111b 48898568 		movq	%rax, -152(%rbp)
 1771      FFFFFF
 399:svf2csvf.c    **** 	char *const lineEnd = (char *)lineBuf->data + lineBuf->length - 1;  // Space for NUL-terminator
 1772              		.loc 1 399 0
 1773 1122 488B8500 		movq	-256(%rbp), %rax
 1773      FFFFFF
 1774 1129 488B10   		movq	(%rax), %rdx
 1775 112c 488B8500 		movq	-256(%rbp), %rax
 1775      FFFFFF
 1776 1133 488B4008 		movq	8(%rax), %rax
 1777 1137 4883E801 		subq	$1, %rax
 1778 113b 4801D0   		addq	%rdx, %rax
 1779 113e 48898570 		movq	%rax, -144(%rbp)
 1779      FFFFFF
 400:svf2csvf.c    **** 	struct Buffer tmpHead = {0,};
 1780              		.loc 1 400 0
 1781 1145 48C74580 		movq	$0, -128(%rbp)
 1781      00000000 
 1782 114d 48C74588 		movq	$0, -120(%rbp)
 1782      00000000 
 1783 1155 48C74590 		movq	$0, -112(%rbp)
 1783      00000000 
 1784 115d 48C74598 		movq	$0, -104(%rbp)
 1784      00000000 
 401:svf2csvf.c    **** 	struct Buffer tmpBody1 = {0,};
 1785              		.loc 1 401 0
 1786 1165 48C745A0 		movq	$0, -96(%rbp)
 1786      00000000 
 1787 116d 48C745A8 		movq	$0, -88(%rbp)
 1787      00000000 
 1788 1175 48C745B0 		movq	$0, -80(%rbp)
 1788      00000000 
 1789 117d 48C745B8 		movq	$0, -72(%rbp)
 1789      00000000 
 402:svf2csvf.c    **** 	struct Buffer tmpBody2 = {0,};
 1790              		.loc 1 402 0
 1791 1185 48C745C0 		movq	$0, -64(%rbp)
 1791      00000000 
 1792 118d 48C745C8 		movq	$0, -56(%rbp)
 1792      00000000 
 1793 1195 48C745D0 		movq	$0, -48(%rbp)
 1793      00000000 
 1794 119d 48C745D8 		movq	$0, -40(%rbp)
 1794      00000000 
 403:svf2csvf.c    **** 	struct Buffer tmpTail = {0,};
 1795              		.loc 1 403 0
 1796 11a5 48C745E0 		movq	$0, -32(%rbp)
 1796      00000000 
 1797 11ad 48C745E8 		movq	$0, -24(%rbp)
 1797      00000000 
 1798 11b5 48C745F0 		movq	$0, -16(%rbp)
 1798      00000000 
 1799 11bd 48C745F8 		movq	$0, -8(%rbp)
 1799      00000000 
 404:svf2csvf.c    **** 	if ( !strncmp(line, "RUNTEST", 7) ) {
 1800              		.loc 1 404 0
 1801 11c5 488B8568 		movq	-152(%rbp), %rax
 1801      FFFFFF
 1802 11cc BA070000 		movl	$7, %edx
 1802      00
 1803 11d1 488D3500 		leaq	.LC9(%rip), %rsi
 1803      000000
 1804 11d8 4889C7   		movq	%rax, %rdi
 1805 11db E8000000 		call	strncmp@PLT
 1805      00
 1806 11e0 85C0     		testl	%eax, %eax
 1807 11e2 0F856A04 		jne	.L97
 1807      0000
 1808              	.LBB3:
 405:svf2csvf.c    **** 		// RUNTEST line is of the form "RUNTEST [IDLE] <count> TCK [ENDSTATE IDLE]"
 406:svf2csvf.c    **** 		const char *p = line + 7;
 1809              		.loc 1 406 0
 1810 11e8 488B8568 		movq	-152(%rbp), %rax
 1810      FFFFFF
 1811 11ef 4883C007 		addq	$7, %rax
 1812 11f3 48898530 		movq	%rax, -208(%rbp)
 1812      FFFFFF
 407:svf2csvf.c    **** 		char *end;
 408:svf2csvf.c    **** 		double count1, count2;
 409:svf2csvf.c    **** 		CHOMP();
 1813              		.loc 1 409 0
 1814 11fa EB08     		jmp	.L98
 1815              	.L99:
 1816              		.loc 1 409 0 is_stmt 0 discriminator 2
 1817 11fc 48838530 		addq	$1, -208(%rbp)
 1817      FFFFFF01 
 1818              	.L98:
 1819              		.loc 1 409 0 discriminator 1
 1820 1204 488B8530 		movq	-208(%rbp), %rax
 1820      FFFFFF
 1821 120b 0FB600   		movzbl	(%rax), %eax
 1822 120e 3C20     		cmpb	$32, %al
 1823 1210 74EA     		je	.L99
 1824              		.loc 1 409 0 discriminator 3
 1825 1212 488B8530 		movq	-208(%rbp), %rax
 1825      FFFFFF
 1826 1219 0FB600   		movzbl	(%rax), %eax
 1827 121c 3C09     		cmpb	$9, %al
 1828 121e 74DC     		je	.L99
 410:svf2csvf.c    **** 		if ( !strncmp(p, "IDLE", 4) ) {
 1829              		.loc 1 410 0 is_stmt 1
 1830 1220 488B8530 		movq	-208(%rbp), %rax
 1830      FFFFFF
 1831 1227 BA040000 		movl	$4, %edx
 1831      00
 1832 122c 488D3500 		leaq	.LC10(%rip), %rsi
 1832      000000
 1833 1233 4889C7   		movq	%rax, %rdi
 1834 1236 E8000000 		call	strncmp@PLT
 1834      00
 1835 123b 85C0     		testl	%eax, %eax
 1836 123d 752E     		jne	.L100
 411:svf2csvf.c    **** 			p += 4;
 1837              		.loc 1 411 0
 1838 123f 48838530 		addq	$4, -208(%rbp)
 1838      FFFFFF04 
 412:svf2csvf.c    **** 			CHOMP();
 1839              		.loc 1 412 0
 1840 1247 EB08     		jmp	.L101
 1841              	.L102:
 1842              		.loc 1 412 0 is_stmt 0 discriminator 2
 1843 1249 48838530 		addq	$1, -208(%rbp)
 1843      FFFFFF01 
 1844              	.L101:
 1845              		.loc 1 412 0 discriminator 1
 1846 1251 488B8530 		movq	-208(%rbp), %rax
 1846      FFFFFF
 1847 1258 0FB600   		movzbl	(%rax), %eax
 1848 125b 3C20     		cmpb	$32, %al
 1849 125d 74EA     		je	.L102
 1850              		.loc 1 412 0 discriminator 3
 1851 125f 488B8530 		movq	-208(%rbp), %rax
 1851      FFFFFF
 1852 1266 0FB600   		movzbl	(%rax), %eax
 1853 1269 3C09     		cmpb	$9, %al
 1854 126b 74DC     		je	.L102
 1855              	.L100:
 413:svf2csvf.c    **** 		}
 414:svf2csvf.c    **** 		count1 = strtod(p, &end);
 1856              		.loc 1 414 0 is_stmt 1
 1857 126d 488D9528 		leaq	-216(%rbp), %rdx
 1857      FFFFFF
 1858 1274 488B8530 		movq	-208(%rbp), %rax
 1858      FFFFFF
 1859 127b 4889D6   		movq	%rdx, %rsi
 1860 127e 4889C7   		movq	%rax, %rdi
 1861 1281 E8000000 		call	strtod@PLT
 1861      00
 1862 1286 F20F1185 		movsd	%xmm0, -288(%rbp)
 1862      E0FEFFFF 
 1863 128e 488B85E0 		movq	-288(%rbp), %rax
 1863      FEFFFF
 1864 1295 48898538 		movq	%rax, -200(%rbp)
 1864      FFFFFF
 415:svf2csvf.c    **** 		p = end;
 1865              		.loc 1 415 0
 1866 129c 488B8528 		movq	-216(%rbp), %rax
 1866      FFFFFF
 1867 12a3 48898530 		movq	%rax, -208(%rbp)
 1867      FFFFFF
 416:svf2csvf.c    **** 		CHOMP();
 1868              		.loc 1 416 0
 1869 12aa EB08     		jmp	.L103
 1870              	.L104:
 1871              		.loc 1 416 0 is_stmt 0 discriminator 2
 1872 12ac 48838530 		addq	$1, -208(%rbp)
 1872      FFFFFF01 
 1873              	.L103:
 1874              		.loc 1 416 0 discriminator 1
 1875 12b4 488B8530 		movq	-208(%rbp), %rax
 1875      FFFFFF
 1876 12bb 0FB600   		movzbl	(%rax), %eax
 1877 12be 3C20     		cmpb	$32, %al
 1878 12c0 74EA     		je	.L104
 1879              		.loc 1 416 0 discriminator 3
 1880 12c2 488B8530 		movq	-208(%rbp), %rax
 1880      FFFFFF
 1881 12c9 0FB600   		movzbl	(%rax), %eax
 1882 12cc 3C09     		cmpb	$9, %al
 1883 12ce 74DC     		je	.L104
 417:svf2csvf.c    **** 		if ( !strncmp(p, "TCK", 3) ) {
 1884              		.loc 1 417 0 is_stmt 1
 1885 12d0 488B8530 		movq	-208(%rbp), %rax
 1885      FFFFFF
 1886 12d7 BA030000 		movl	$3, %edx
 1886      00
 1887 12dc 488D3500 		leaq	.LC11(%rip), %rsi
 1887      000000
 1888 12e3 4889C7   		movq	%rax, %rdi
 1889 12e6 E8000000 		call	strncmp@PLT
 1889      00
 1890 12eb 85C0     		testl	%eax, %eax
 1891 12ed 7533     		jne	.L105
 418:svf2csvf.c    **** 			p += 3;
 1892              		.loc 1 418 0
 1893 12ef 48838530 		addq	$3, -208(%rbp)
 1893      FFFFFF03 
 419:svf2csvf.c    **** 			CHOMP();
 1894              		.loc 1 419 0
 1895 12f7 EB08     		jmp	.L106
 1896              	.L107:
 1897              		.loc 1 419 0 is_stmt 0 discriminator 2
 1898 12f9 48838530 		addq	$1, -208(%rbp)
 1898      FFFFFF01 
 1899              	.L106:
 1900              		.loc 1 419 0 discriminator 1
 1901 1301 488B8530 		movq	-208(%rbp), %rax
 1901      FFFFFF
 1902 1308 0FB600   		movzbl	(%rax), %eax
 1903 130b 3C20     		cmpb	$32, %al
 1904 130d 74EA     		je	.L107
 1905              		.loc 1 419 0 discriminator 3
 1906 130f 488B8530 		movq	-208(%rbp), %rax
 1906      FFFFFF
 1907 1316 0FB600   		movzbl	(%rax), %eax
 1908 1319 3C09     		cmpb	$9, %al
 1909 131b 74DC     		je	.L107
 1910 131d E9900000 		jmp	.L108
 1910      00
 1911              	.L105:
 420:svf2csvf.c    **** 		} else if ( !strncmp(p, "SEC", 3) ) {
 1912              		.loc 1 420 0 is_stmt 1
 1913 1322 488B8530 		movq	-208(%rbp), %rax
 1913      FFFFFF
 1914 1329 BA030000 		movl	$3, %edx
 1914      00
 1915 132e 488D3500 		leaq	.LC12(%rip), %rsi
 1915      000000
 1916 1335 4889C7   		movq	%rax, %rdi
 1917 1338 E8000000 		call	strncmp@PLT
 1917      00
 1918 133d 85C0     		testl	%eax, %eax
 1919 133f 754C     		jne	.L109
 421:svf2csvf.c    **** 			count1 *= 1000000.0;
 1920              		.loc 1 421 0
 1921 1341 F20F108D 		movsd	-200(%rbp), %xmm1
 1921      38FFFFFF 
 1922 1349 F20F1005 		movsd	.LC13(%rip), %xmm0
 1922      00000000 
 1923 1351 F20F59C1 		mulsd	%xmm1, %xmm0
 1924 1355 F20F1185 		movsd	%xmm0, -200(%rbp)
 1924      38FFFFFF 
 422:svf2csvf.c    **** 			p += 3;
 1925              		.loc 1 422 0
 1926 135d 48838530 		addq	$3, -208(%rbp)
 1926      FFFFFF03 
 423:svf2csvf.c    **** 			CHOMP();
 1927              		.loc 1 423 0
 1928 1365 EB08     		jmp	.L110
 1929              	.L111:
 1930              		.loc 1 423 0 is_stmt 0 discriminator 2
 1931 1367 48838530 		addq	$1, -208(%rbp)
 1931      FFFFFF01 
 1932              	.L110:
 1933              		.loc 1 423 0 discriminator 1
 1934 136f 488B8530 		movq	-208(%rbp), %rax
 1934      FFFFFF
 1935 1376 0FB600   		movzbl	(%rax), %eax
 1936 1379 3C20     		cmpb	$32, %al
 1937 137b 74EA     		je	.L111
 1938              		.loc 1 423 0 discriminator 3
 1939 137d 488B8530 		movq	-208(%rbp), %rax
 1939      FFFFFF
 1940 1384 0FB600   		movzbl	(%rax), %eax
 1941 1387 3C09     		cmpb	$9, %al
 1942 1389 74DC     		je	.L111
 1943 138b EB25     		jmp	.L108
 1944              	.L109:
 424:svf2csvf.c    **** 		} else {
 425:svf2csvf.c    **** 			CHECK_STATUS(
 1945              		.loc 1 425 0 is_stmt 1 discriminator 1
 1946 138d 488B85E8 		movq	-280(%rbp), %rax
 1946      FEFFFF
 1947 1394 488D3500 		leaq	.LC14(%rip), %rsi
 1947      000000
 1948 139b 4889C7   		movq	%rax, %rdi
 1949 139e E8000000 		call	errPrefix@PLT
 1949      00
 1950 13a3 C78514FF 		movl	$10, -236(%rbp)
 1950      FFFF0A00 
 1950      0000
 1951 13ad E9D51800 		jmp	.L129
 1951      00
 1952              	.L108:
 426:svf2csvf.c    **** 				true, FL_SVF_PARSE_ERR, cleanup,
 427:svf2csvf.c    **** 				"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|SEC] 
 428:svf2csvf.c    **** 		}
 429:svf2csvf.c    **** 		count2 = strtod(p, &end);
 1953              		.loc 1 429 0
 1954 13b2 488D9528 		leaq	-216(%rbp), %rdx
 1954      FFFFFF
 1955 13b9 488B8530 		movq	-208(%rbp), %rax
 1955      FFFFFF
 1956 13c0 4889D6   		movq	%rdx, %rsi
 1957 13c3 4889C7   		movq	%rax, %rdi
 1958 13c6 E8000000 		call	strtod@PLT
 1958      00
 1959 13cb F20F1185 		movsd	%xmm0, -288(%rbp)
 1959      E0FEFFFF 
 1960 13d3 488B85E0 		movq	-288(%rbp), %rax
 1960      FEFFFF
 1961 13da 48898540 		movq	%rax, -192(%rbp)
 1961      FFFFFF
 430:svf2csvf.c    **** 		if ( end != p ) {
 1962              		.loc 1 430 0
 1963 13e1 488B8528 		movq	-216(%rbp), %rax
 1963      FFFFFF
 1964 13e8 483B8530 		cmpq	-208(%rbp), %rax
 1964      FFFFFF
 1965 13ef 0F84EC00 		je	.L113
 1965      0000
 431:svf2csvf.c    **** 			p = end;
 1966              		.loc 1 431 0
 1967 13f5 488B8528 		movq	-216(%rbp), %rax
 1967      FFFFFF
 1968 13fc 48898530 		movq	%rax, -208(%rbp)
 1968      FFFFFF
 432:svf2csvf.c    **** 			CHOMP();
 1969              		.loc 1 432 0
 1970 1403 EB08     		jmp	.L114
 1971              	.L115:
 1972              		.loc 1 432 0 is_stmt 0 discriminator 2
 1973 1405 48838530 		addq	$1, -208(%rbp)
 1973      FFFFFF01 
 1974              	.L114:
 1975              		.loc 1 432 0 discriminator 1
 1976 140d 488B8530 		movq	-208(%rbp), %rax
 1976      FFFFFF
 1977 1414 0FB600   		movzbl	(%rax), %eax
 1978 1417 3C20     		cmpb	$32, %al
 1979 1419 74EA     		je	.L115
 1980              		.loc 1 432 0 discriminator 3
 1981 141b 488B8530 		movq	-208(%rbp), %rax
 1981      FFFFFF
 1982 1422 0FB600   		movzbl	(%rax), %eax
 1983 1425 3C09     		cmpb	$9, %al
 1984 1427 74DC     		je	.L115
 433:svf2csvf.c    **** 			if ( !strncmp(p, "TCK", 3) ) {
 1985              		.loc 1 433 0 is_stmt 1
 1986 1429 488B8530 		movq	-208(%rbp), %rax
 1986      FFFFFF
 1987 1430 BA030000 		movl	$3, %edx
 1987      00
 1988 1435 488D3500 		leaq	.LC11(%rip), %rsi
 1988      000000
 1989 143c 4889C7   		movq	%rax, %rdi
 1990 143f E8000000 		call	strncmp@PLT
 1990      00
 1991 1444 85C0     		testl	%eax, %eax
 1992 1446 7530     		jne	.L116
 434:svf2csvf.c    **** 				p += 3;
 1993              		.loc 1 434 0
 1994 1448 48838530 		addq	$3, -208(%rbp)
 1994      FFFFFF03 
 435:svf2csvf.c    **** 				CHOMP();
 1995              		.loc 1 435 0
 1996 1450 EB08     		jmp	.L117
 1997              	.L118:
 1998              		.loc 1 435 0 is_stmt 0 discriminator 2
 1999 1452 48838530 		addq	$1, -208(%rbp)
 1999      FFFFFF01 
 2000              	.L117:
 2001              		.loc 1 435 0 discriminator 1
 2002 145a 488B8530 		movq	-208(%rbp), %rax
 2002      FFFFFF
 2003 1461 0FB600   		movzbl	(%rax), %eax
 2004 1464 3C20     		cmpb	$32, %al
 2005 1466 74EA     		je	.L118
 2006              		.loc 1 435 0 discriminator 3
 2007 1468 488B8530 		movq	-208(%rbp), %rax
 2007      FFFFFF
 2008 146f 0FB600   		movzbl	(%rax), %eax
 2009 1472 3C09     		cmpb	$9, %al
 2010 1474 74DC     		je	.L118
 2011 1476 EB69     		jmp	.L113
 2012              	.L116:
 436:svf2csvf.c    **** 			} else if ( !strncmp(p, "SEC", 3) ) {
 2013              		.loc 1 436 0 is_stmt 1
 2014 1478 488B8530 		movq	-208(%rbp), %rax
 2014      FFFFFF
 2015 147f BA030000 		movl	$3, %edx
 2015      00
 2016 1484 488D3500 		leaq	.LC12(%rip), %rsi
 2016      000000
 2017 148b 4889C7   		movq	%rax, %rdi
 2018 148e E8000000 		call	strncmp@PLT
 2018      00
 2019 1493 85C0     		testl	%eax, %eax
 2020 1495 754A     		jne	.L113
 437:svf2csvf.c    **** 				count2 *= 1000000.0;
 2021              		.loc 1 437 0
 2022 1497 F20F108D 		movsd	-192(%rbp), %xmm1
 2022      40FFFFFF 
 2023 149f F20F1005 		movsd	.LC13(%rip), %xmm0
 2023      00000000 
 2024 14a7 F20F59C1 		mulsd	%xmm1, %xmm0
 2025 14ab F20F1185 		movsd	%xmm0, -192(%rbp)
 2025      40FFFFFF 
 438:svf2csvf.c    **** 				p += 3;
 2026              		.loc 1 438 0
 2027 14b3 48838530 		addq	$3, -208(%rbp)
 2027      FFFFFF03 
 439:svf2csvf.c    **** 				CHOMP();
 2028              		.loc 1 439 0
 2029 14bb EB08     		jmp	.L119
 2030              	.L120:
 2031              		.loc 1 439 0 is_stmt 0 discriminator 2
 2032 14bd 48838530 		addq	$1, -208(%rbp)
 2032      FFFFFF01 
 2033              	.L119:
 2034              		.loc 1 439 0 discriminator 1
 2035 14c5 488B8530 		movq	-208(%rbp), %rax
 2035      FFFFFF
 2036 14cc 0FB600   		movzbl	(%rax), %eax
 2037 14cf 3C20     		cmpb	$32, %al
 2038 14d1 74EA     		je	.L120
 2039              		.loc 1 439 0 discriminator 3
 2040 14d3 488B8530 		movq	-208(%rbp), %rax
 2040      FFFFFF
 2041 14da 0FB600   		movzbl	(%rax), %eax
 2042 14dd 3C09     		cmpb	$9, %al
 2043 14df 74DC     		je	.L120
 2044              	.L113:
 440:svf2csvf.c    **** 			}
 441:svf2csvf.c    **** 		}
 442:svf2csvf.c    **** 		if ( !strncmp(p, "ENDSTATE IDLE", 13) ) {
 2045              		.loc 1 442 0 is_stmt 1
 2046 14e1 488B8530 		movq	-208(%rbp), %rax
 2046      FFFFFF
 2047 14e8 BA0D0000 		movl	$13, %edx
 2047      00
 2048 14ed 488D3500 		leaq	.LC15(%rip), %rsi
 2048      000000
 2049 14f4 4889C7   		movq	%rax, %rdi
 2050 14f7 E8000000 		call	strncmp@PLT
 2050      00
 2051 14fc 85C0     		testl	%eax, %eax
 2052 14fe 750A     		jne	.L121
 443:svf2csvf.c    **** 			p += 13;
 2053              		.loc 1 443 0
 2054 1500 48838530 		addq	$13, -208(%rbp)
 2054      FFFFFF0D 
 444:svf2csvf.c    **** 		}
 445:svf2csvf.c    **** 		CHOMP();
 2055              		.loc 1 445 0
 2056 1508 EB0A     		jmp	.L122
 2057              	.L121:
 2058 150a EB08     		jmp	.L122
 2059              	.L123:
 2060              		.loc 1 445 0 is_stmt 0 discriminator 2
 2061 150c 48838530 		addq	$1, -208(%rbp)
 2061      FFFFFF01 
 2062              	.L122:
 2063              		.loc 1 445 0 discriminator 1
 2064 1514 488B8530 		movq	-208(%rbp), %rax
 2064      FFFFFF
 2065 151b 0FB600   		movzbl	(%rax), %eax
 2066 151e 3C20     		cmpb	$32, %al
 2067 1520 74EA     		je	.L123
 2068              		.loc 1 445 0 discriminator 3
 2069 1522 488B8530 		movq	-208(%rbp), %rax
 2069      FFFFFF
 2070 1529 0FB600   		movzbl	(%rax), %eax
 2071 152c 3C09     		cmpb	$9, %al
 2072 152e 74DC     		je	.L123
 446:svf2csvf.c    **** 		if ( count2 > count1 ) {
 2073              		.loc 1 446 0 is_stmt 1
 2074 1530 F20F1085 		movsd	-192(%rbp), %xmm0
 2074      40FFFFFF 
 2075 1538 660F2E85 		ucomisd	-200(%rbp), %xmm0
 2075      38FFFFFF 
 2076 1540 760E     		jbe	.L124
 447:svf2csvf.c    **** 			count1 = count2;
 2077              		.loc 1 447 0
 2078 1542 488B8540 		movq	-192(%rbp), %rax
 2078      FFFFFF
 2079 1549 48898538 		movq	%rax, -200(%rbp)
 2079      FFFFFF
 2080              	.L124:
 448:svf2csvf.c    **** 		}
 449:svf2csvf.c    **** 		CHECK_STATUS(
 2081              		.loc 1 449 0
 2082 1550 488B8530 		movq	-208(%rbp), %rax
 2082      FFFFFF
 2083 1557 483B8570 		cmpq	-144(%rbp), %rax
 2083      FFFFFF
 2084 155e 7425     		je	.L126
 2085              		.loc 1 449 0 is_stmt 0 discriminator 1
 2086 1560 488B85E8 		movq	-280(%rbp), %rax
 2086      FEFFFF
 2087 1567 488D3500 		leaq	.LC14(%rip), %rsi
 2087      000000
 2088 156e 4889C7   		movq	%rax, %rdi
 2089 1571 E8000000 		call	errPrefix@PLT
 2089      00
 2090 1576 C78514FF 		movl	$10, -236(%rbp)
 2090      FFFF0A00 
 2090      0000
 2091 1580 E9021700 		jmp	.L129
 2091      00
 2092              	.L126:
 450:svf2csvf.c    **** 			p != lineEnd, FL_SVF_PARSE_ERR, cleanup,
 451:svf2csvf.c    **** 			"parseLine(): RUNTEST must be of the form \"RUNTEST [IDLE] <number> TCK|SEC [<number> TCK|SEC] [
 452:svf2csvf.c    **** 		cxt->numCommands++;
 2093              		.loc 1 452 0 is_stmt 1
 2094 1585 488B8508 		movq	-248(%rbp), %rax
 2094      FFFFFF
 2095 158c 8B809C02 		movl	668(%rax), %eax
 2095      0000
 2096 1592 8D5001   		leal	1(%rax), %edx
 2097 1595 488B8508 		movq	-248(%rbp), %rax
 2097      FFFFFF
 2098 159c 89909C02 		movl	%edx, 668(%rax)
 2098      0000
 453:svf2csvf.c    **** 		bStatus = bufAppendByte(csvfBuf, XRUNTEST, error);
 2099              		.loc 1 453 0
 2100 15a2 488B95E8 		movq	-280(%rbp), %rdx
 2100      FEFFFF
 2101 15a9 488B85F8 		movq	-264(%rbp), %rax
 2101      FEFFFF
 2102 15b0 BE040000 		movl	$4, %esi
 2102      00
 2103 15b5 4889C7   		movq	%rax, %rdi
 2104 15b8 E8000000 		call	bufAppendByte@PLT
 2104      00
 2105 15bd 89851CFF 		movl	%eax, -228(%rbp)
 2105      FFFF
 454:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2106              		.loc 1 454 0
 2107 15c3 83BD1CFF 		cmpl	$0, -228(%rbp)
 2107      FFFF00
 2108 15ca 7425     		je	.L127
 2109              		.loc 1 454 0 is_stmt 0 discriminator 1
 2110 15cc 488B85E8 		movq	-280(%rbp), %rax
 2110      FEFFFF
 2111 15d3 488D3500 		leaq	.LC16(%rip), %rsi
 2111      000000
 2112 15da 4889C7   		movq	%rax, %rdi
 2113 15dd E8000000 		call	errPrefix@PLT
 2113      00
 2114 15e2 C78514FF 		movl	$1, -236(%rbp)
 2114      FFFF0100 
 2114      0000
 2115 15ec E9961600 		jmp	.L129
 2115      00
 2116              	.L127:
 455:svf2csvf.c    **** 		bStatus = bufAppendLongBE(csvfBuf, (uint32)count1, error);
 2117              		.loc 1 455 0 is_stmt 1
 2118 15f1 F20F1085 		movsd	-200(%rbp), %xmm0
 2118      38FFFFFF 
 2119 15f9 F2480F2C 		cvttsd2siq	%xmm0, %rax
 2119      C0
 2120 15fe 89C1     		movl	%eax, %ecx
 2121 1600 488B95E8 		movq	-280(%rbp), %rdx
 2121      FEFFFF
 2122 1607 488B85F8 		movq	-264(%rbp), %rax
 2122      FEFFFF
 2123 160e 89CE     		movl	%ecx, %esi
 2124 1610 4889C7   		movq	%rax, %rdi
 2125 1613 E8000000 		call	bufAppendLongBE@PLT
 2125      00
 2126 1618 89851CFF 		movl	%eax, -228(%rbp)
 2126      FFFF
 456:svf2csvf.c    **** 		CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2127              		.loc 1 456 0
 2128 161e 83BD1CFF 		cmpl	$0, -228(%rbp)
 2128      FFFF00
 2129 1625 7426     		je	.L128
 2130              		.loc 1 456 0 is_stmt 0 discriminator 1
 2131 1627 488B85E8 		movq	-280(%rbp), %rax
 2131      FEFFFF
 2132 162e 488D3500 		leaq	.LC16(%rip), %rsi
 2132      000000
 2133 1635 4889C7   		movq	%rax, %rdi
 2134 1638 E8000000 		call	errPrefix@PLT
 2134      00
 2135 163d C78514FF 		movl	$1, -236(%rbp)
 2135      FFFF0100 
 2135      0000
 2136 1647 90       		nop
 2137 1648 E93A1600 		jmp	.L129
 2137      00
 2138              	.L128:
 2139              	.LBE3:
 2140 164d E9351600 		jmp	.L129
 2140      00
 2141              	.L97:
 457:svf2csvf.c    **** 	} else if (
 458:svf2csvf.c    **** 		(line[0] == 'H' || line[0] == 'S' || line[0] == 'T') &&
 2142              		.loc 1 458 0 is_stmt 1
 2143 1652 488B8568 		movq	-152(%rbp), %rax
 2143      FFFFFF
 2144 1659 0FB600   		movzbl	(%rax), %eax
 457:svf2csvf.c    **** 	} else if (
 2145              		.loc 1 457 0
 2146 165c 3C48     		cmpb	$72, %al
 2147 165e 7420     		je	.L130
 2148              		.loc 1 458 0
 2149 1660 488B8568 		movq	-152(%rbp), %rax
 2149      FFFFFF
 2150 1667 0FB600   		movzbl	(%rax), %eax
 2151 166a 3C53     		cmpb	$83, %al
 2152 166c 7412     		je	.L130
 2153              		.loc 1 458 0 is_stmt 0 discriminator 2
 2154 166e 488B8568 		movq	-152(%rbp), %rax
 2154      FFFFFF
 2155 1675 0FB600   		movzbl	(%rax), %eax
 2156 1678 3C54     		cmpb	$84, %al
 2157 167a 0F85DA15 		jne	.L131
 2157      0000
 2158              	.L130:
 459:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2159              		.loc 1 459 0 is_stmt 1 discriminator 1
 2160 1680 488B8568 		movq	-152(%rbp), %rax
 2160      FFFFFF
 2161 1687 4883C001 		addq	$1, %rax
 2162 168b 0FB600   		movzbl	(%rax), %eax
 458:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2163              		.loc 1 458 0 discriminator 1
 2164 168e 3C49     		cmpb	$73, %al
 2165 1690 7416     		je	.L132
 2166              		.loc 1 459 0
 2167 1692 488B8568 		movq	-152(%rbp), %rax
 2167      FFFFFF
 2168 1699 4883C001 		addq	$1, %rax
 2169 169d 0FB600   		movzbl	(%rax), %eax
 2170 16a0 3C44     		cmpb	$68, %al
 2171 16a2 0F85B215 		jne	.L131
 2171      0000
 2172              	.L132:
 460:svf2csvf.c    **** 		line[2] == 'R' && (line[3] == ' ' || line[3] == '\t')
 2173              		.loc 1 460 0 discriminator 1
 2174 16a8 488B8568 		movq	-152(%rbp), %rax
 2174      FFFFFF
 2175 16af 4883C002 		addq	$2, %rax
 2176 16b3 0FB600   		movzbl	(%rax), %eax
 459:svf2csvf.c    **** 		(line[1] == 'I' || line[1] == 'D') &&
 2177              		.loc 1 459 0 discriminator 1
 2178 16b6 3C52     		cmpb	$82, %al
 2179 16b8 0F859C15 		jne	.L131
 2179      0000
 2180              		.loc 1 460 0
 2181 16be 488B8568 		movq	-152(%rbp), %rax
 2181      FFFFFF
 2182 16c5 4883C003 		addq	$3, %rax
 2183 16c9 0FB600   		movzbl	(%rax), %eax
 2184 16cc 3C20     		cmpb	$32, %al
 2185 16ce 7416     		je	.L133
 2186              		.loc 1 460 0 is_stmt 0 discriminator 1
 2187 16d0 488B8568 		movq	-152(%rbp), %rax
 2187      FFFFFF
 2188 16d7 4883C003 		addq	$3, %rax
 2189 16db 0FB600   		movzbl	(%rax), %eax
 2190 16de 3C09     		cmpb	$9, %al
 2191 16e0 0F857415 		jne	.L131
 2191      0000
 2192              	.L133:
 2193              	.LBB4:
 461:svf2csvf.c    **** 	) {
 462:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 463:svf2csvf.c    **** 		char *p = line + 3;
 2194              		.loc 1 463 0 is_stmt 1
 2195 16e6 488B8568 		movq	-152(%rbp), %rax
 2195      FFFFFF
 2196 16ed 4883C003 		addq	$3, %rax
 2197 16f1 48898548 		movq	%rax, -184(%rbp)
 2197      FFFFFF
 464:svf2csvf.c    **** 		char *tmp;
 465:svf2csvf.c    **** 		const char *tdi = NULL, *tdo =  NULL, *mask = NULL, *smask = NULL;
 2198              		.loc 1 465 0
 2199 16f8 48C78550 		movq	$0, -176(%rbp)
 2199      FFFFFF00 
 2199      000000
 2200 1703 48C78558 		movq	$0, -168(%rbp)
 2200      FFFFFF00 
 2200      000000
 2201 170e 48C78560 		movq	$0, -160(%rbp)
 2201      FFFFFF00 
 2201      000000
 2202 1719 48C78578 		movq	$0, -136(%rbp)
 2202      FFFFFF00 
 2202      000000
 466:svf2csvf.c    **** 		uint32 length;
 467:svf2csvf.c    **** 		const bool isDataReg = (line[1] == 'D');
 2203              		.loc 1 467 0
 2204 1724 488B8568 		movq	-152(%rbp), %rax
 2204      FFFFFF
 2205 172b 4883C001 		addq	$1, %rax
 2206 172f 0FB600   		movzbl	(%rax), %eax
 2207 1732 3C44     		cmpb	$68, %al
 2208 1734 0F94C0   		sete	%al
 2209 1737 888512FF 		movb	%al, -238(%rbp)
 2209      FFFF
 468:svf2csvf.c    **** 		ShiftOperation op;
 469:svf2csvf.c    **** 		line[2] = '\0';
 2210              		.loc 1 469 0
 2211 173d 488B8568 		movq	-152(%rbp), %rax
 2211      FFFFFF
 2212 1744 4883C002 		addq	$2, %rax
 2213 1748 C60000   		movb	$0, (%rax)
 470:svf2csvf.c    **** 		switch ( line[0] ) {
 2214              		.loc 1 470 0
 2215 174b 488B8568 		movq	-152(%rbp), %rax
 2215      FFFFFF
 2216 1752 0FB600   		movzbl	(%rax), %eax
 2217 1755 0FBEC0   		movsbl	%al, %eax
 2218 1758 83F848   		cmpl	$72, %eax
 2219 175b 7407     		je	.L135
 2220 175d 83F854   		cmpl	$84, %eax
 2221 1760 740E     		je	.L136
 2222 1762 EB18     		jmp	.L230
 2223              	.L135:
 471:svf2csvf.c    **** 		case 'H':
 472:svf2csvf.c    **** 			op = HEAD;
 2224              		.loc 1 472 0
 2225 1764 C78518FF 		movl	$72, -232(%rbp)
 2225      FFFF4800 
 2225      0000
 473:svf2csvf.c    **** 			break;
 2226              		.loc 1 473 0
 2227 176e EB17     		jmp	.L137
 2228              	.L136:
 474:svf2csvf.c    **** 		case 'T':
 475:svf2csvf.c    **** 			op = TAIL;
 2229              		.loc 1 475 0
 2230 1770 C78518FF 		movl	$84, -232(%rbp)
 2230      FFFF5400 
 2230      0000
 476:svf2csvf.c    **** 			break;
 2231              		.loc 1 476 0
 2232 177a EB0B     		jmp	.L137
 2233              	.L230:
 477:svf2csvf.c    **** 		default:
 478:svf2csvf.c    **** 			op = BODY;
 2234              		.loc 1 478 0
 2235 177c C78518FF 		movl	$83, -232(%rbp)
 2235      FFFF5300 
 2235      0000
 479:svf2csvf.c    **** 			break;
 2236              		.loc 1 479 0
 2237 1786 90       		nop
 2238              	.L137:
 480:svf2csvf.c    **** 		}
 481:svf2csvf.c    **** 		CHOMP();
 2239              		.loc 1 481 0
 2240 1787 EB08     		jmp	.L138
 2241              	.L139:
 2242              		.loc 1 481 0 is_stmt 0 discriminator 2
 2243 1789 48838548 		addq	$1, -184(%rbp)
 2243      FFFFFF01 
 2244              	.L138:
 2245              		.loc 1 481 0 discriminator 1
 2246 1791 488B8548 		movq	-184(%rbp), %rax
 2246      FFFFFF
 2247 1798 0FB600   		movzbl	(%rax), %eax
 2248 179b 3C20     		cmpb	$32, %al
 2249 179d 74EA     		je	.L139
 2250              		.loc 1 481 0 discriminator 3
 2251 179f 488B8548 		movq	-184(%rbp), %rax
 2251      FFFFFF
 2252 17a6 0FB600   		movzbl	(%rax), %eax
 2253 17a9 3C09     		cmpb	$9, %al
 2254 17ab 74DC     		je	.L139
 482:svf2csvf.c    **** 		length = (uint32)strtoul(p, &tmp, 10);
 2255              		.loc 1 482 0 is_stmt 1
 2256 17ad 488D8D28 		leaq	-216(%rbp), %rcx
 2256      FFFFFF
 2257 17b4 488B8548 		movq	-184(%rbp), %rax
 2257      FFFFFF
 2258 17bb BA0A0000 		movl	$10, %edx
 2258      00
 2259 17c0 4889CE   		movq	%rcx, %rsi
 2260 17c3 4889C7   		movq	%rax, %rdi
 2261 17c6 E8000000 		call	strtoul@PLT
 2261      00
 2262 17cb 898520FF 		movl	%eax, -224(%rbp)
 2262      FFFF
 483:svf2csvf.c    **** 		p = tmp;
 2263              		.loc 1 483 0
 2264 17d1 488B8528 		movq	-216(%rbp), %rax
 2264      FFFFFF
 2265 17d8 48898548 		movq	%rax, -184(%rbp)
 2265      FFFFFF
 484:svf2csvf.c    **** 		CHOMP();
 2266              		.loc 1 484 0
 2267 17df EB08     		jmp	.L140
 2268              	.L141:
 2269              		.loc 1 484 0 is_stmt 0 discriminator 2
 2270 17e1 48838548 		addq	$1, -184(%rbp)
 2270      FFFFFF01 
 2271              	.L140:
 2272              		.loc 1 484 0 discriminator 1
 2273 17e9 488B8548 		movq	-184(%rbp), %rax
 2273      FFFFFF
 2274 17f0 0FB600   		movzbl	(%rax), %eax
 2275 17f3 3C20     		cmpb	$32, %al
 2276 17f5 74EA     		je	.L141
 2277              		.loc 1 484 0 discriminator 3
 2278 17f7 488B8548 		movq	-184(%rbp), %rax
 2278      FFFFFF
 2279 17fe 0FB600   		movzbl	(%rax), %eax
 2280 1801 3C09     		cmpb	$9, %al
 2281 1803 74DC     		je	.L141
 485:svf2csvf.c    **** 		while ( *p ) {
 2282              		.loc 1 485 0 is_stmt 1
 2283 1805 E91A0600 		jmp	.L142
 2283      00
 2284              	.L183:
 486:svf2csvf.c    **** 			if ( !strncmp(p, "TDI", 3) ) {
 2285              		.loc 1 486 0
 2286 180a 488B8548 		movq	-184(%rbp), %rax
 2286      FFFFFF
 2287 1811 BA030000 		movl	$3, %edx
 2287      00
 2288 1816 488D3500 		leaq	.LC17(%rip), %rsi
 2288      000000
 2289 181d 4889C7   		movq	%rax, %rdi
 2290 1820 E8000000 		call	strncmp@PLT
 2290      00
 2291 1825 85C0     		testl	%eax, %eax
 2292 1827 0F854D01 		jne	.L143
 2292      0000
 487:svf2csvf.c    **** 				p += 3;
 2293              		.loc 1 487 0
 2294 182d 48838548 		addq	$3, -184(%rbp)
 2294      FFFFFF03 
 488:svf2csvf.c    **** 				CHOMP();
 2295              		.loc 1 488 0
 2296 1835 EB08     		jmp	.L144
 2297              	.L145:
 2298              		.loc 1 488 0 is_stmt 0 discriminator 2
 2299 1837 48838548 		addq	$1, -184(%rbp)
 2299      FFFFFF01 
 2300              	.L144:
 2301              		.loc 1 488 0 discriminator 1
 2302 183f 488B8548 		movq	-184(%rbp), %rax
 2302      FFFFFF
 2303 1846 0FB600   		movzbl	(%rax), %eax
 2304 1849 3C20     		cmpb	$32, %al
 2305 184b 74EA     		je	.L145
 2306              		.loc 1 488 0 discriminator 3
 2307 184d 488B8548 		movq	-184(%rbp), %rax
 2307      FFFFFF
 2308 1854 0FB600   		movzbl	(%rax), %eax
 2309 1857 3C09     		cmpb	$9, %al
 2310 1859 74DC     		je	.L145
 489:svf2csvf.c    **** 				#define EXPECT_CHAR(x, y) \
 490:svf2csvf.c    **** 					CHECK_STATUS( \
 491:svf2csvf.c    **** 						*p != x, FL_SVF_PARSE_ERR, cleanup, \
 492:svf2csvf.c    **** 						"parseLine(): %sR must be of the form \"%sR ... " y "\"", line, line);
 493:svf2csvf.c    **** 				#define FIX_ODD(x) \
 494:svf2csvf.c    **** 					if ( strlen(x) & 1 ) { \
 495:svf2csvf.c    **** 						x--; \
 496:svf2csvf.c    **** 					}
 497:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDI (<tdi>)");
 2311              		.loc 1 497 0 is_stmt 1
 2312 185b 488B8548 		movq	-184(%rbp), %rax
 2312      FFFFFF
 2313 1862 0FB600   		movzbl	(%rax), %eax
 2314 1865 3C28     		cmpb	$40, %al
 2315 1867 7438     		je	.L146
 2316              		.loc 1 497 0 is_stmt 0 discriminator 1
 2317 1869 488B8D68 		movq	-152(%rbp), %rcx
 2317      FFFFFF
 2318 1870 488B9568 		movq	-152(%rbp), %rdx
 2318      FFFFFF
 2319 1877 488B85E8 		movq	-280(%rbp), %rax
 2319      FEFFFF
 2320 187e 488D3500 		leaq	.LC18(%rip), %rsi
 2320      000000
 2321 1885 4889C7   		movq	%rax, %rdi
 2322 1888 B8000000 		movl	$0, %eax
 2322      00
 2323 188d E8000000 		call	errRender@PLT
 2323      00
 2324 1892 C78514FF 		movl	$10, -236(%rbp)
 2324      FFFF0A00 
 2324      0000
 2325 189c E9E61300 		jmp	.L129
 2325      00
 2326              	.L146:
 498:svf2csvf.c    **** 				*p++ = '0';
 2327              		.loc 1 498 0 is_stmt 1
 2328 18a1 488B8548 		movq	-184(%rbp), %rax
 2328      FFFFFF
 2329 18a8 488D5001 		leaq	1(%rax), %rdx
 2330 18ac 48899548 		movq	%rdx, -184(%rbp)
 2330      FFFFFF
 2331 18b3 C60030   		movb	$48, (%rax)
 499:svf2csvf.c    **** 				tdi = p++;
 2332              		.loc 1 499 0
 2333 18b6 488B8548 		movq	-184(%rbp), %rax
 2333      FFFFFF
 2334 18bd 488D5001 		leaq	1(%rax), %rdx
 2335 18c1 48899548 		movq	%rdx, -184(%rbp)
 2335      FFFFFF
 2336 18c8 48898550 		movq	%rax, -176(%rbp)
 2336      FFFFFF
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2337              		.loc 1 500 0
 2338 18cf EB08     		jmp	.L148
 2339              	.L150:
 501:svf2csvf.c    **** 					p++;
 2340              		.loc 1 501 0
 2341 18d1 48838548 		addq	$1, -184(%rbp)
 2341      FFFFFF01 
 2342              	.L148:
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2343              		.loc 1 500 0 discriminator 1
 2344 18d9 488B8548 		movq	-184(%rbp), %rax
 2344      FFFFFF
 2345 18e0 483B8570 		cmpq	-144(%rbp), %rax
 2345      FFFFFF
 2346 18e7 730E     		jnb	.L149
 500:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2347              		.loc 1 500 0 is_stmt 0 discriminator 2
 2348 18e9 488B8548 		movq	-184(%rbp), %rax
 2348      FFFFFF
 2349 18f0 0FB600   		movzbl	(%rax), %eax
 2350 18f3 3C29     		cmpb	$41, %al
 2351 18f5 75DA     		jne	.L150
 2352              	.L149:
 502:svf2csvf.c    **** 				}
 503:svf2csvf.c    **** 				EXPECT_CHAR(')', "TDI (<tdi>)");
 2353              		.loc 1 503 0 is_stmt 1
 2354 18f7 488B8548 		movq	-184(%rbp), %rax
 2354      FFFFFF
 2355 18fe 0FB600   		movzbl	(%rax), %eax
 2356 1901 3C29     		cmpb	$41, %al
 2357 1903 7438     		je	.L151
 2358              		.loc 1 503 0 is_stmt 0 discriminator 1
 2359 1905 488B8D68 		movq	-152(%rbp), %rcx
 2359      FFFFFF
 2360 190c 488B9568 		movq	-152(%rbp), %rdx
 2360      FFFFFF
 2361 1913 488B85E8 		movq	-280(%rbp), %rax
 2361      FEFFFF
 2362 191a 488D3500 		leaq	.LC18(%rip), %rsi
 2362      000000
 2363 1921 4889C7   		movq	%rax, %rdi
 2364 1924 B8000000 		movl	$0, %eax
 2364      00
 2365 1929 E8000000 		call	errRender@PLT
 2365      00
 2366 192e C78514FF 		movl	$10, -236(%rbp)
 2366      FFFF0A00 
 2366      0000
 2367 1938 E94A1300 		jmp	.L129
 2367      00
 2368              	.L151:
 504:svf2csvf.c    **** 				*p++ = '\0';
 2369              		.loc 1 504 0 is_stmt 1
 2370 193d 488B8548 		movq	-184(%rbp), %rax
 2370      FFFFFF
 2371 1944 488D5001 		leaq	1(%rax), %rdx
 2372 1948 48899548 		movq	%rdx, -184(%rbp)
 2372      FFFFFF
 2373 194f C60000   		movb	$0, (%rax)
 505:svf2csvf.c    **** 				FIX_ODD(tdi);
 2374              		.loc 1 505 0
 2375 1952 488B8550 		movq	-176(%rbp), %rax
 2375      FFFFFF
 2376 1959 4889C7   		movq	%rax, %rdi
 2377 195c E8000000 		call	strlen@PLT
 2377      00
 2378 1961 83E001   		andl	$1, %eax
 2379 1964 4885C0   		testq	%rax, %rax
 2380 1967 0F849104 		je	.L153
 2380      0000
 2381              		.loc 1 505 0 is_stmt 0 discriminator 1
 2382 196d 4883AD50 		subq	$1, -176(%rbp)
 2382      FFFFFF01 
 506:svf2csvf.c    **** 			} else if ( !strncmp(p, "SMASK", 5) ) {
 507:svf2csvf.c    **** 				p += 5;
 508:svf2csvf.c    **** 				CHOMP();
 509:svf2csvf.c    **** 				EXPECT_CHAR('(', "SMASK (<smask>)");
 510:svf2csvf.c    **** 				*p++ = '0';
 511:svf2csvf.c    **** 				smask = p++;
 512:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 513:svf2csvf.c    **** 					p++;
 514:svf2csvf.c    **** 				}
 515:svf2csvf.c    **** 				EXPECT_CHAR(')', "SMASK (<smask>)");
 516:svf2csvf.c    **** 				*p++ = '\0';
 517:svf2csvf.c    **** 				FIX_ODD(smask);
 518:svf2csvf.c    **** 			} else if ( !strncmp(p, "TDO", 3) ) {
 519:svf2csvf.c    **** 				p += 3;
 520:svf2csvf.c    **** 				CHOMP();
 521:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDO (<tdo>)");
 522:svf2csvf.c    **** 				*p++ = '0';
 523:svf2csvf.c    **** 				tdo = p++;
 524:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 525:svf2csvf.c    **** 					p++;
 526:svf2csvf.c    **** 				}
 527:svf2csvf.c    **** 				EXPECT_CHAR(')', "TDO (<tdo>)");
 528:svf2csvf.c    **** 				*p++ = '\0';
 529:svf2csvf.c    **** 				FIX_ODD(tdo);
 530:svf2csvf.c    **** 			} else if ( !strncmp(p, "MASK", 4) ) {
 531:svf2csvf.c    **** 				p += 4;
 532:svf2csvf.c    **** 				CHOMP();
 533:svf2csvf.c    **** 				EXPECT_CHAR('(', "MASK (<mask>)");
 534:svf2csvf.c    **** 				*p++ = '0';
 535:svf2csvf.c    **** 				mask = p++;
 536:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 537:svf2csvf.c    **** 					p++;
 538:svf2csvf.c    **** 				}
 539:svf2csvf.c    **** 				EXPECT_CHAR(')', "MASK (<mask>)");
 540:svf2csvf.c    **** 				*p++ = '\0';
 541:svf2csvf.c    **** 				FIX_ODD(mask);
 542:svf2csvf.c    **** 			} else {
 543:svf2csvf.c    **** 				CHECK_STATUS(
 544:svf2csvf.c    **** 					true, FL_SVF_PARSE_ERR, cleanup,
 545:svf2csvf.c    **** 					"parseLine(): Junk in [HTS][IR]R line at column %d", p-line);
 546:svf2csvf.c    **** 			}
 547:svf2csvf.c    **** 			CHOMP();
 2383              		.loc 1 547 0 is_stmt 1 discriminator 1
 2384 1975 E98E0400 		jmp	.L181
 2384      00
 2385              	.L143:
 506:svf2csvf.c    **** 			} else if ( !strncmp(p, "SMASK", 5) ) {
 2386              		.loc 1 506 0
 2387 197a 488B8548 		movq	-184(%rbp), %rax
 2387      FFFFFF
 2388 1981 BA050000 		movl	$5, %edx
 2388      00
 2389 1986 488D3500 		leaq	.LC19(%rip), %rsi
 2389      000000
 2390 198d 4889C7   		movq	%rax, %rdi
 2391 1990 E8000000 		call	strncmp@PLT
 2391      00
 2392 1995 85C0     		testl	%eax, %eax
 2393 1997 0F854D01 		jne	.L154
 2393      0000
 507:svf2csvf.c    **** 				CHOMP();
 2394              		.loc 1 507 0
 2395 199d 48838548 		addq	$5, -184(%rbp)
 2395      FFFFFF05 
 508:svf2csvf.c    **** 				EXPECT_CHAR('(', "SMASK (<smask>)");
 2396              		.loc 1 508 0
 2397 19a5 EB08     		jmp	.L155
 2398              	.L156:
 508:svf2csvf.c    **** 				EXPECT_CHAR('(', "SMASK (<smask>)");
 2399              		.loc 1 508 0 is_stmt 0 discriminator 2
 2400 19a7 48838548 		addq	$1, -184(%rbp)
 2400      FFFFFF01 
 2401              	.L155:
 508:svf2csvf.c    **** 				EXPECT_CHAR('(', "SMASK (<smask>)");
 2402              		.loc 1 508 0 discriminator 1
 2403 19af 488B8548 		movq	-184(%rbp), %rax
 2403      FFFFFF
 2404 19b6 0FB600   		movzbl	(%rax), %eax
 2405 19b9 3C20     		cmpb	$32, %al
 2406 19bb 74EA     		je	.L156
 508:svf2csvf.c    **** 				EXPECT_CHAR('(', "SMASK (<smask>)");
 2407              		.loc 1 508 0 discriminator 3
 2408 19bd 488B8548 		movq	-184(%rbp), %rax
 2408      FFFFFF
 2409 19c4 0FB600   		movzbl	(%rax), %eax
 2410 19c7 3C09     		cmpb	$9, %al
 2411 19c9 74DC     		je	.L156
 509:svf2csvf.c    **** 				*p++ = '0';
 2412              		.loc 1 509 0 is_stmt 1
 2413 19cb 488B8548 		movq	-184(%rbp), %rax
 2413      FFFFFF
 2414 19d2 0FB600   		movzbl	(%rax), %eax
 2415 19d5 3C28     		cmpb	$40, %al
 2416 19d7 7438     		je	.L157
 509:svf2csvf.c    **** 				*p++ = '0';
 2417              		.loc 1 509 0 is_stmt 0 discriminator 1
 2418 19d9 488B8D68 		movq	-152(%rbp), %rcx
 2418      FFFFFF
 2419 19e0 488B9568 		movq	-152(%rbp), %rdx
 2419      FFFFFF
 2420 19e7 488B85E8 		movq	-280(%rbp), %rax
 2420      FEFFFF
 2421 19ee 488D3500 		leaq	.LC20(%rip), %rsi
 2421      000000
 2422 19f5 4889C7   		movq	%rax, %rdi
 2423 19f8 B8000000 		movl	$0, %eax
 2423      00
 2424 19fd E8000000 		call	errRender@PLT
 2424      00
 2425 1a02 C78514FF 		movl	$10, -236(%rbp)
 2425      FFFF0A00 
 2425      0000
 2426 1a0c E9761200 		jmp	.L129
 2426      00
 2427              	.L157:
 510:svf2csvf.c    **** 				smask = p++;
 2428              		.loc 1 510 0 is_stmt 1
 2429 1a11 488B8548 		movq	-184(%rbp), %rax
 2429      FFFFFF
 2430 1a18 488D5001 		leaq	1(%rax), %rdx
 2431 1a1c 48899548 		movq	%rdx, -184(%rbp)
 2431      FFFFFF
 2432 1a23 C60030   		movb	$48, (%rax)
 511:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2433              		.loc 1 511 0
 2434 1a26 488B8548 		movq	-184(%rbp), %rax
 2434      FFFFFF
 2435 1a2d 488D5001 		leaq	1(%rax), %rdx
 2436 1a31 48899548 		movq	%rdx, -184(%rbp)
 2436      FFFFFF
 2437 1a38 48898578 		movq	%rax, -136(%rbp)
 2437      FFFFFF
 512:svf2csvf.c    **** 					p++;
 2438              		.loc 1 512 0
 2439 1a3f EB08     		jmp	.L158
 2440              	.L160:
 513:svf2csvf.c    **** 				}
 2441              		.loc 1 513 0
 2442 1a41 48838548 		addq	$1, -184(%rbp)
 2442      FFFFFF01 
 2443              	.L158:
 512:svf2csvf.c    **** 					p++;
 2444              		.loc 1 512 0 discriminator 1
 2445 1a49 488B8548 		movq	-184(%rbp), %rax
 2445      FFFFFF
 2446 1a50 483B8570 		cmpq	-144(%rbp), %rax
 2446      FFFFFF
 2447 1a57 730E     		jnb	.L159
 512:svf2csvf.c    **** 					p++;
 2448              		.loc 1 512 0 is_stmt 0 discriminator 2
 2449 1a59 488B8548 		movq	-184(%rbp), %rax
 2449      FFFFFF
 2450 1a60 0FB600   		movzbl	(%rax), %eax
 2451 1a63 3C29     		cmpb	$41, %al
 2452 1a65 75DA     		jne	.L160
 2453              	.L159:
 515:svf2csvf.c    **** 				*p++ = '\0';
 2454              		.loc 1 515 0 is_stmt 1
 2455 1a67 488B8548 		movq	-184(%rbp), %rax
 2455      FFFFFF
 2456 1a6e 0FB600   		movzbl	(%rax), %eax
 2457 1a71 3C29     		cmpb	$41, %al
 2458 1a73 7438     		je	.L161
 515:svf2csvf.c    **** 				*p++ = '\0';
 2459              		.loc 1 515 0 is_stmt 0 discriminator 1
 2460 1a75 488B8D68 		movq	-152(%rbp), %rcx
 2460      FFFFFF
 2461 1a7c 488B9568 		movq	-152(%rbp), %rdx
 2461      FFFFFF
 2462 1a83 488B85E8 		movq	-280(%rbp), %rax
 2462      FEFFFF
 2463 1a8a 488D3500 		leaq	.LC20(%rip), %rsi
 2463      000000
 2464 1a91 4889C7   		movq	%rax, %rdi
 2465 1a94 B8000000 		movl	$0, %eax
 2465      00
 2466 1a99 E8000000 		call	errRender@PLT
 2466      00
 2467 1a9e C78514FF 		movl	$10, -236(%rbp)
 2467      FFFF0A00 
 2467      0000
 2468 1aa8 E9DA1100 		jmp	.L129
 2468      00
 2469              	.L161:
 516:svf2csvf.c    **** 				FIX_ODD(smask);
 2470              		.loc 1 516 0 is_stmt 1
 2471 1aad 488B8548 		movq	-184(%rbp), %rax
 2471      FFFFFF
 2472 1ab4 488D5001 		leaq	1(%rax), %rdx
 2473 1ab8 48899548 		movq	%rdx, -184(%rbp)
 2473      FFFFFF
 2474 1abf C60000   		movb	$0, (%rax)
 517:svf2csvf.c    **** 			} else if ( !strncmp(p, "TDO", 3) ) {
 2475              		.loc 1 517 0
 2476 1ac2 488B8578 		movq	-136(%rbp), %rax
 2476      FFFFFF
 2477 1ac9 4889C7   		movq	%rax, %rdi
 2478 1acc E8000000 		call	strlen@PLT
 2478      00
 2479 1ad1 83E001   		andl	$1, %eax
 2480 1ad4 4885C0   		testq	%rax, %rax
 2481 1ad7 0F842103 		je	.L153
 2481      0000
 517:svf2csvf.c    **** 			} else if ( !strncmp(p, "TDO", 3) ) {
 2482              		.loc 1 517 0 is_stmt 0 discriminator 1
 2483 1add 4883AD78 		subq	$1, -136(%rbp)
 2483      FFFFFF01 
 2484              		.loc 1 547 0 is_stmt 1 discriminator 1
 2485 1ae5 E91E0300 		jmp	.L181
 2485      00
 2486              	.L154:
 518:svf2csvf.c    **** 				p += 3;
 2487              		.loc 1 518 0
 2488 1aea 488B8548 		movq	-184(%rbp), %rax
 2488      FFFFFF
 2489 1af1 BA030000 		movl	$3, %edx
 2489      00
 2490 1af6 488D3500 		leaq	.LC21(%rip), %rsi
 2490      000000
 2491 1afd 4889C7   		movq	%rax, %rdi
 2492 1b00 E8000000 		call	strncmp@PLT
 2492      00
 2493 1b05 85C0     		testl	%eax, %eax
 2494 1b07 0F854D01 		jne	.L163
 2494      0000
 519:svf2csvf.c    **** 				CHOMP();
 2495              		.loc 1 519 0
 2496 1b0d 48838548 		addq	$3, -184(%rbp)
 2496      FFFFFF03 
 520:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDO (<tdo>)");
 2497              		.loc 1 520 0
 2498 1b15 EB08     		jmp	.L164
 2499              	.L165:
 520:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDO (<tdo>)");
 2500              		.loc 1 520 0 is_stmt 0 discriminator 2
 2501 1b17 48838548 		addq	$1, -184(%rbp)
 2501      FFFFFF01 
 2502              	.L164:
 520:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDO (<tdo>)");
 2503              		.loc 1 520 0 discriminator 1
 2504 1b1f 488B8548 		movq	-184(%rbp), %rax
 2504      FFFFFF
 2505 1b26 0FB600   		movzbl	(%rax), %eax
 2506 1b29 3C20     		cmpb	$32, %al
 2507 1b2b 74EA     		je	.L165
 520:svf2csvf.c    **** 				EXPECT_CHAR('(', "TDO (<tdo>)");
 2508              		.loc 1 520 0 discriminator 3
 2509 1b2d 488B8548 		movq	-184(%rbp), %rax
 2509      FFFFFF
 2510 1b34 0FB600   		movzbl	(%rax), %eax
 2511 1b37 3C09     		cmpb	$9, %al
 2512 1b39 74DC     		je	.L165
 521:svf2csvf.c    **** 				*p++ = '0';
 2513              		.loc 1 521 0 is_stmt 1
 2514 1b3b 488B8548 		movq	-184(%rbp), %rax
 2514      FFFFFF
 2515 1b42 0FB600   		movzbl	(%rax), %eax
 2516 1b45 3C28     		cmpb	$40, %al
 2517 1b47 7438     		je	.L166
 521:svf2csvf.c    **** 				*p++ = '0';
 2518              		.loc 1 521 0 is_stmt 0 discriminator 1
 2519 1b49 488B8D68 		movq	-152(%rbp), %rcx
 2519      FFFFFF
 2520 1b50 488B9568 		movq	-152(%rbp), %rdx
 2520      FFFFFF
 2521 1b57 488B85E8 		movq	-280(%rbp), %rax
 2521      FEFFFF
 2522 1b5e 488D3500 		leaq	.LC22(%rip), %rsi
 2522      000000
 2523 1b65 4889C7   		movq	%rax, %rdi
 2524 1b68 B8000000 		movl	$0, %eax
 2524      00
 2525 1b6d E8000000 		call	errRender@PLT
 2525      00
 2526 1b72 C78514FF 		movl	$10, -236(%rbp)
 2526      FFFF0A00 
 2526      0000
 2527 1b7c E9061100 		jmp	.L129
 2527      00
 2528              	.L166:
 522:svf2csvf.c    **** 				tdo = p++;
 2529              		.loc 1 522 0 is_stmt 1
 2530 1b81 488B8548 		movq	-184(%rbp), %rax
 2530      FFFFFF
 2531 1b88 488D5001 		leaq	1(%rax), %rdx
 2532 1b8c 48899548 		movq	%rdx, -184(%rbp)
 2532      FFFFFF
 2533 1b93 C60030   		movb	$48, (%rax)
 523:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2534              		.loc 1 523 0
 2535 1b96 488B8548 		movq	-184(%rbp), %rax
 2535      FFFFFF
 2536 1b9d 488D5001 		leaq	1(%rax), %rdx
 2537 1ba1 48899548 		movq	%rdx, -184(%rbp)
 2537      FFFFFF
 2538 1ba8 48898558 		movq	%rax, -168(%rbp)
 2538      FFFFFF
 524:svf2csvf.c    **** 					p++;
 2539              		.loc 1 524 0
 2540 1baf EB08     		jmp	.L167
 2541              	.L169:
 525:svf2csvf.c    **** 				}
 2542              		.loc 1 525 0
 2543 1bb1 48838548 		addq	$1, -184(%rbp)
 2543      FFFFFF01 
 2544              	.L167:
 524:svf2csvf.c    **** 					p++;
 2545              		.loc 1 524 0 discriminator 1
 2546 1bb9 488B8548 		movq	-184(%rbp), %rax
 2546      FFFFFF
 2547 1bc0 483B8570 		cmpq	-144(%rbp), %rax
 2547      FFFFFF
 2548 1bc7 730E     		jnb	.L168
 524:svf2csvf.c    **** 					p++;
 2549              		.loc 1 524 0 is_stmt 0 discriminator 2
 2550 1bc9 488B8548 		movq	-184(%rbp), %rax
 2550      FFFFFF
 2551 1bd0 0FB600   		movzbl	(%rax), %eax
 2552 1bd3 3C29     		cmpb	$41, %al
 2553 1bd5 75DA     		jne	.L169
 2554              	.L168:
 527:svf2csvf.c    **** 				*p++ = '\0';
 2555              		.loc 1 527 0 is_stmt 1
 2556 1bd7 488B8548 		movq	-184(%rbp), %rax
 2556      FFFFFF
 2557 1bde 0FB600   		movzbl	(%rax), %eax
 2558 1be1 3C29     		cmpb	$41, %al
 2559 1be3 7438     		je	.L170
 527:svf2csvf.c    **** 				*p++ = '\0';
 2560              		.loc 1 527 0 is_stmt 0 discriminator 1
 2561 1be5 488B8D68 		movq	-152(%rbp), %rcx
 2561      FFFFFF
 2562 1bec 488B9568 		movq	-152(%rbp), %rdx
 2562      FFFFFF
 2563 1bf3 488B85E8 		movq	-280(%rbp), %rax
 2563      FEFFFF
 2564 1bfa 488D3500 		leaq	.LC22(%rip), %rsi
 2564      000000
 2565 1c01 4889C7   		movq	%rax, %rdi
 2566 1c04 B8000000 		movl	$0, %eax
 2566      00
 2567 1c09 E8000000 		call	errRender@PLT
 2567      00
 2568 1c0e C78514FF 		movl	$10, -236(%rbp)
 2568      FFFF0A00 
 2568      0000
 2569 1c18 E96A1000 		jmp	.L129
 2569      00
 2570              	.L170:
 528:svf2csvf.c    **** 				FIX_ODD(tdo);
 2571              		.loc 1 528 0 is_stmt 1
 2572 1c1d 488B8548 		movq	-184(%rbp), %rax
 2572      FFFFFF
 2573 1c24 488D5001 		leaq	1(%rax), %rdx
 2574 1c28 48899548 		movq	%rdx, -184(%rbp)
 2574      FFFFFF
 2575 1c2f C60000   		movb	$0, (%rax)
 529:svf2csvf.c    **** 			} else if ( !strncmp(p, "MASK", 4) ) {
 2576              		.loc 1 529 0
 2577 1c32 488B8558 		movq	-168(%rbp), %rax
 2577      FFFFFF
 2578 1c39 4889C7   		movq	%rax, %rdi
 2579 1c3c E8000000 		call	strlen@PLT
 2579      00
 2580 1c41 83E001   		andl	$1, %eax
 2581 1c44 4885C0   		testq	%rax, %rax
 2582 1c47 0F84B101 		je	.L153
 2582      0000
 529:svf2csvf.c    **** 			} else if ( !strncmp(p, "MASK", 4) ) {
 2583              		.loc 1 529 0 is_stmt 0 discriminator 1
 2584 1c4d 4883AD58 		subq	$1, -168(%rbp)
 2584      FFFFFF01 
 2585              		.loc 1 547 0 is_stmt 1 discriminator 1
 2586 1c55 E9AE0100 		jmp	.L181
 2586      00
 2587              	.L163:
 530:svf2csvf.c    **** 				p += 4;
 2588              		.loc 1 530 0
 2589 1c5a 488B8548 		movq	-184(%rbp), %rax
 2589      FFFFFF
 2590 1c61 BA040000 		movl	$4, %edx
 2590      00
 2591 1c66 488D3500 		leaq	.LC23(%rip), %rsi
 2591      000000
 2592 1c6d 4889C7   		movq	%rax, %rdi
 2593 1c70 E8000000 		call	strncmp@PLT
 2593      00
 2594 1c75 85C0     		testl	%eax, %eax
 2595 1c77 0F854601 		jne	.L172
 2595      0000
 531:svf2csvf.c    **** 				CHOMP();
 2596              		.loc 1 531 0
 2597 1c7d 48838548 		addq	$4, -184(%rbp)
 2597      FFFFFF04 
 532:svf2csvf.c    **** 				EXPECT_CHAR('(', "MASK (<mask>)");
 2598              		.loc 1 532 0
 2599 1c85 EB08     		jmp	.L173
 2600              	.L174:
 532:svf2csvf.c    **** 				EXPECT_CHAR('(', "MASK (<mask>)");
 2601              		.loc 1 532 0 is_stmt 0 discriminator 2
 2602 1c87 48838548 		addq	$1, -184(%rbp)
 2602      FFFFFF01 
 2603              	.L173:
 532:svf2csvf.c    **** 				EXPECT_CHAR('(', "MASK (<mask>)");
 2604              		.loc 1 532 0 discriminator 1
 2605 1c8f 488B8548 		movq	-184(%rbp), %rax
 2605      FFFFFF
 2606 1c96 0FB600   		movzbl	(%rax), %eax
 2607 1c99 3C20     		cmpb	$32, %al
 2608 1c9b 74EA     		je	.L174
 532:svf2csvf.c    **** 				EXPECT_CHAR('(', "MASK (<mask>)");
 2609              		.loc 1 532 0 discriminator 3
 2610 1c9d 488B8548 		movq	-184(%rbp), %rax
 2610      FFFFFF
 2611 1ca4 0FB600   		movzbl	(%rax), %eax
 2612 1ca7 3C09     		cmpb	$9, %al
 2613 1ca9 74DC     		je	.L174
 533:svf2csvf.c    **** 				*p++ = '0';
 2614              		.loc 1 533 0 is_stmt 1
 2615 1cab 488B8548 		movq	-184(%rbp), %rax
 2615      FFFFFF
 2616 1cb2 0FB600   		movzbl	(%rax), %eax
 2617 1cb5 3C28     		cmpb	$40, %al
 2618 1cb7 7438     		je	.L175
 533:svf2csvf.c    **** 				*p++ = '0';
 2619              		.loc 1 533 0 is_stmt 0 discriminator 1
 2620 1cb9 488B8D68 		movq	-152(%rbp), %rcx
 2620      FFFFFF
 2621 1cc0 488B9568 		movq	-152(%rbp), %rdx
 2621      FFFFFF
 2622 1cc7 488B85E8 		movq	-280(%rbp), %rax
 2622      FEFFFF
 2623 1cce 488D3500 		leaq	.LC24(%rip), %rsi
 2623      000000
 2624 1cd5 4889C7   		movq	%rax, %rdi
 2625 1cd8 B8000000 		movl	$0, %eax
 2625      00
 2626 1cdd E8000000 		call	errRender@PLT
 2626      00
 2627 1ce2 C78514FF 		movl	$10, -236(%rbp)
 2627      FFFF0A00 
 2627      0000
 2628 1cec E9960F00 		jmp	.L129
 2628      00
 2629              	.L175:
 534:svf2csvf.c    **** 				mask = p++;
 2630              		.loc 1 534 0 is_stmt 1
 2631 1cf1 488B8548 		movq	-184(%rbp), %rax
 2631      FFFFFF
 2632 1cf8 488D5001 		leaq	1(%rax), %rdx
 2633 1cfc 48899548 		movq	%rdx, -184(%rbp)
 2633      FFFFFF
 2634 1d03 C60030   		movb	$48, (%rax)
 535:svf2csvf.c    **** 				while ( p < lineEnd && *p != ')' ) {
 2635              		.loc 1 535 0
 2636 1d06 488B8548 		movq	-184(%rbp), %rax
 2636      FFFFFF
 2637 1d0d 488D5001 		leaq	1(%rax), %rdx
 2638 1d11 48899548 		movq	%rdx, -184(%rbp)
 2638      FFFFFF
 2639 1d18 48898560 		movq	%rax, -160(%rbp)
 2639      FFFFFF
 536:svf2csvf.c    **** 					p++;
 2640              		.loc 1 536 0
 2641 1d1f EB08     		jmp	.L176
 2642              	.L178:
 537:svf2csvf.c    **** 				}
 2643              		.loc 1 537 0
 2644 1d21 48838548 		addq	$1, -184(%rbp)
 2644      FFFFFF01 
 2645              	.L176:
 536:svf2csvf.c    **** 					p++;
 2646              		.loc 1 536 0 discriminator 1
 2647 1d29 488B8548 		movq	-184(%rbp), %rax
 2647      FFFFFF
 2648 1d30 483B8570 		cmpq	-144(%rbp), %rax
 2648      FFFFFF
 2649 1d37 730E     		jnb	.L177
 536:svf2csvf.c    **** 					p++;
 2650              		.loc 1 536 0 is_stmt 0 discriminator 2
 2651 1d39 488B8548 		movq	-184(%rbp), %rax
 2651      FFFFFF
 2652 1d40 0FB600   		movzbl	(%rax), %eax
 2653 1d43 3C29     		cmpb	$41, %al
 2654 1d45 75DA     		jne	.L178
 2655              	.L177:
 539:svf2csvf.c    **** 				*p++ = '\0';
 2656              		.loc 1 539 0 is_stmt 1
 2657 1d47 488B8548 		movq	-184(%rbp), %rax
 2657      FFFFFF
 2658 1d4e 0FB600   		movzbl	(%rax), %eax
 2659 1d51 3C29     		cmpb	$41, %al
 2660 1d53 7438     		je	.L179
 539:svf2csvf.c    **** 				*p++ = '\0';
 2661              		.loc 1 539 0 is_stmt 0 discriminator 1
 2662 1d55 488B8D68 		movq	-152(%rbp), %rcx
 2662      FFFFFF
 2663 1d5c 488B9568 		movq	-152(%rbp), %rdx
 2663      FFFFFF
 2664 1d63 488B85E8 		movq	-280(%rbp), %rax
 2664      FEFFFF
 2665 1d6a 488D3500 		leaq	.LC24(%rip), %rsi
 2665      000000
 2666 1d71 4889C7   		movq	%rax, %rdi
 2667 1d74 B8000000 		movl	$0, %eax
 2667      00
 2668 1d79 E8000000 		call	errRender@PLT
 2668      00
 2669 1d7e C78514FF 		movl	$10, -236(%rbp)
 2669      FFFF0A00 
 2669      0000
 2670 1d88 E9FA0E00 		jmp	.L129
 2670      00
 2671              	.L179:
 540:svf2csvf.c    **** 				FIX_ODD(mask);
 2672              		.loc 1 540 0 is_stmt 1
 2673 1d8d 488B8548 		movq	-184(%rbp), %rax
 2673      FFFFFF
 2674 1d94 488D5001 		leaq	1(%rax), %rdx
 2675 1d98 48899548 		movq	%rdx, -184(%rbp)
 2675      FFFFFF
 2676 1d9f C60000   		movb	$0, (%rax)
 541:svf2csvf.c    **** 			} else {
 2677              		.loc 1 541 0
 2678 1da2 488B8560 		movq	-160(%rbp), %rax
 2678      FFFFFF
 2679 1da9 4889C7   		movq	%rax, %rdi
 2680 1dac E8000000 		call	strlen@PLT
 2680      00
 2681 1db1 83E001   		andl	$1, %eax
 2682 1db4 4885C0   		testq	%rax, %rax
 2683 1db7 7445     		je	.L153
 541:svf2csvf.c    **** 			} else {
 2684              		.loc 1 541 0 is_stmt 0 discriminator 1
 2685 1db9 4883AD60 		subq	$1, -160(%rbp)
 2685      FFFFFF01 
 2686              		.loc 1 547 0 is_stmt 1 discriminator 1
 2687 1dc1 EB45     		jmp	.L181
 2688              	.L172:
 543:svf2csvf.c    **** 					true, FL_SVF_PARSE_ERR, cleanup,
 2689              		.loc 1 543 0 discriminator 1
 2690 1dc3 488B9548 		movq	-184(%rbp), %rdx
 2690      FFFFFF
 2691 1dca 488B8568 		movq	-152(%rbp), %rax
 2691      FFFFFF
 2692 1dd1 4829C2   		subq	%rax, %rdx
 2693 1dd4 488B85E8 		movq	-280(%rbp), %rax
 2693      FEFFFF
 2694 1ddb 488D3500 		leaq	.LC25(%rip), %rsi
 2694      000000
 2695 1de2 4889C7   		movq	%rax, %rdi
 2696 1de5 B8000000 		movl	$0, %eax
 2696      00
 2697 1dea E8000000 		call	errRender@PLT
 2697      00
 2698 1def C78514FF 		movl	$10, -236(%rbp)
 2698      FFFF0A00 
 2698      0000
 2699 1df9 E9890E00 		jmp	.L129
 2699      00
 2700              	.L153:
 2701              		.loc 1 547 0
 2702 1dfe EB08     		jmp	.L181
 2703              	.L182:
 2704              		.loc 1 547 0 is_stmt 0 discriminator 2
 2705 1e00 48838548 		addq	$1, -184(%rbp)
 2705      FFFFFF01 
 2706              	.L181:
 2707              		.loc 1 547 0 discriminator 1
 2708 1e08 488B8548 		movq	-184(%rbp), %rax
 2708      FFFFFF
 2709 1e0f 0FB600   		movzbl	(%rax), %eax
 2710 1e12 3C20     		cmpb	$32, %al
 2711 1e14 74EA     		je	.L182
 2712              		.loc 1 547 0 discriminator 3
 2713 1e16 488B8548 		movq	-184(%rbp), %rax
 2713      FFFFFF
 2714 1e1d 0FB600   		movzbl	(%rax), %eax
 2715 1e20 3C09     		cmpb	$9, %al
 2716 1e22 74DC     		je	.L182
 2717              	.L142:
 485:svf2csvf.c    **** 			if ( !strncmp(p, "TDI", 3) ) {
 2718              		.loc 1 485 0 is_stmt 1 discriminator 1
 2719 1e24 488B8548 		movq	-184(%rbp), %rax
 2719      FFFFFF
 2720 1e2b 0FB600   		movzbl	(%rax), %eax
 2721 1e2e 84C0     		testb	%al, %al
 2722 1e30 0F85D4F9 		jne	.L183
 2722      FFFF
 548:svf2csvf.c    **** 		}
 549:svf2csvf.c    **** 		if ( isDataReg ) {
 2723              		.loc 1 549 0
 2724 1e36 80BD12FF 		cmpb	$0, -238(%rbp)
 2724      FFFF00
 2725 1e3d 0F840D0A 		je	.L184
 2725      0000
 2726              	.LBB5:
 550:svf2csvf.c    **** 			bool zeroMask;
 551:svf2csvf.c    **** 			switch ( op ) {
 2727              		.loc 1 551 0
 2728 1e43 8B8518FF 		movl	-232(%rbp), %eax
 2728      FFFF
 2729 1e49 83F853   		cmpl	$83, %eax
 2730 1e4c 0F84F900 		je	.L186
 2730      0000
 2731 1e52 83F854   		cmpl	$84, %eax
 2732 1e55 747C     		je	.L187
 2733 1e57 83F848   		cmpl	$72, %eax
 2734 1e5a 7405     		je	.L188
 2735              	.LBE5:
 2736 1e5c E9F70D00 		jmp	.L215
 2736      00
 2737              	.L188:
 2738              	.LBB6:
 552:svf2csvf.c    **** 			case HEAD:
 553:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataHead, length, tdi, tdo, mask, error);
 2739              		.loc 1 553 0
 2740 1e61 488B8508 		movq	-248(%rbp), %rax
 2740      FFFFFF
 2741 1e68 4C8B85E8 		movq	-280(%rbp), %r8
 2741      FEFFFF
 2742 1e6f 488BBD60 		movq	-160(%rbp), %rdi
 2742      FFFFFF
 2743 1e76 488B8D58 		movq	-168(%rbp), %rcx
 2743      FFFFFF
 2744 1e7d 488B9550 		movq	-176(%rbp), %rdx
 2744      FFFFFF
 2745 1e84 8BB520FF 		movl	-224(%rbp), %esi
 2745      FFFF
 2746 1e8a 4D89C1   		movq	%r8, %r9
 2747 1e8d 4989F8   		movq	%rdi, %r8
 2748 1e90 4889C7   		movq	%rax, %rdi
 2749 1e93 E8F0EDFF 		call	processLine
 2749      FF
 2750 1e98 898524FF 		movl	%eax, -220(%rbp)
 2750      FFFF
 554:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2751              		.loc 1 554 0
 2752 1e9e 83BD24FF 		cmpl	$0, -220(%rbp)
 2752      FFFF00
 2753 1ea5 7427     		je	.L189
 2754              		.loc 1 554 0 is_stmt 0 discriminator 1
 2755 1ea7 488B85E8 		movq	-280(%rbp), %rax
 2755      FEFFFF
 2756 1eae 488D3500 		leaq	.LC16(%rip), %rsi
 2756      000000
 2757 1eb5 4889C7   		movq	%rax, %rdi
 2758 1eb8 E8000000 		call	errPrefix@PLT
 2758      00
 2759 1ebd 8B8524FF 		movl	-220(%rbp), %eax
 2759      FFFF
 2760 1ec3 898514FF 		movl	%eax, -236(%rbp)
 2760      FFFF
 2761 1ec9 E9B90D00 		jmp	.L129
 2761      00
 2762              	.L189:
 555:svf2csvf.c    **** 				break;
 2763              		.loc 1 555 0 is_stmt 1
 2764 1ece E9780900 		jmp	.L185
 2764      00
 2765              	.L187:
 556:svf2csvf.c    **** 			case TAIL:
 557:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataTail, length, tdi, tdo, mask, error);
 2766              		.loc 1 557 0
 2767 1ed3 488B8508 		movq	-248(%rbp), %rax
 2767      FFFFFF
 2768 1eda 488DB8A0 		leaq	416(%rax), %rdi
 2768      010000
 2769 1ee1 4C8B85E8 		movq	-280(%rbp), %r8
 2769      FEFFFF
 2770 1ee8 488BB560 		movq	-160(%rbp), %rsi
 2770      FFFFFF
 2771 1eef 488B8D58 		movq	-168(%rbp), %rcx
 2771      FFFFFF
 2772 1ef6 488B9550 		movq	-176(%rbp), %rdx
 2772      FFFFFF
 2773 1efd 8B8520FF 		movl	-224(%rbp), %eax
 2773      FFFF
 2774 1f03 4D89C1   		movq	%r8, %r9
 2775 1f06 4989F0   		movq	%rsi, %r8
 2776 1f09 89C6     		movl	%eax, %esi
 2777 1f0b E878EDFF 		call	processLine
 2777      FF
 2778 1f10 898524FF 		movl	%eax, -220(%rbp)
 2778      FFFF
 558:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2779              		.loc 1 558 0
 2780 1f16 83BD24FF 		cmpl	$0, -220(%rbp)
 2780      FFFF00
 2781 1f1d 7427     		je	.L190
 2782              		.loc 1 558 0 is_stmt 0 discriminator 1
 2783 1f1f 488B85E8 		movq	-280(%rbp), %rax
 2783      FEFFFF
 2784 1f26 488D3500 		leaq	.LC16(%rip), %rsi
 2784      000000
 2785 1f2d 4889C7   		movq	%rax, %rdi
 2786 1f30 E8000000 		call	errPrefix@PLT
 2786      00
 2787 1f35 8B8524FF 		movl	-220(%rbp), %eax
 2787      FFFF
 2788 1f3b 898514FF 		movl	%eax, -236(%rbp)
 2788      FFFF
 2789 1f41 E9410D00 		jmp	.L129
 2789      00
 2790              	.L190:
 559:svf2csvf.c    **** 				break;
 2791              		.loc 1 559 0 is_stmt 1
 2792 1f46 E9000900 		jmp	.L185
 2792      00
 2793              	.L186:
 560:svf2csvf.c    **** 			case BODY:
 561:svf2csvf.c    **** 				fStatus = processLine(&cxt->dataBody, length, tdi, tdo, mask, error);
 2794              		.loc 1 561 0
 2795 1f4b 488B8508 		movq	-248(%rbp), %rax
 2795      FFFFFF
 2796 1f52 488DB8D0 		leaq	208(%rax), %rdi
 2796      000000
 2797 1f59 4C8B85E8 		movq	-280(%rbp), %r8
 2797      FEFFFF
 2798 1f60 488BB560 		movq	-160(%rbp), %rsi
 2798      FFFFFF
 2799 1f67 488B8D58 		movq	-168(%rbp), %rcx
 2799      FFFFFF
 2800 1f6e 488B9550 		movq	-176(%rbp), %rdx
 2800      FFFFFF
 2801 1f75 8B8520FF 		movl	-224(%rbp), %eax
 2801      FFFF
 2802 1f7b 4D89C1   		movq	%r8, %r9
 2803 1f7e 4989F0   		movq	%rsi, %r8
 2804 1f81 89C6     		movl	%eax, %esi
 2805 1f83 E800EDFF 		call	processLine
 2805      FF
 2806 1f88 898524FF 		movl	%eax, -220(%rbp)
 2806      FFFF
 562:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 2807              		.loc 1 562 0
 2808 1f8e 83BD24FF 		cmpl	$0, -220(%rbp)
 2808      FFFF00
 2809 1f95 7427     		je	.L191
 2810              		.loc 1 562 0 is_stmt 0 discriminator 1
 2811 1f97 488B85E8 		movq	-280(%rbp), %rax
 2811      FEFFFF
 2812 1f9e 488D3500 		leaq	.LC16(%rip), %rsi
 2812      000000
 2813 1fa5 4889C7   		movq	%rax, %rdi
 2814 1fa8 E8000000 		call	errPrefix@PLT
 2814      00
 2815 1fad 8B8524FF 		movl	-220(%rbp), %eax
 2815      FFFF
 2816 1fb3 898514FF 		movl	%eax, -236(%rbp)
 2816      FFFF
 2817 1fb9 E9C90C00 		jmp	.L129
 2817      00
 2818              	.L191:
 563:svf2csvf.c    **** 				if (
 564:svf2csvf.c    **** 					cxt->dataHead.numBits + cxt->dataBody.numBits + cxt->dataTail.numBits
 2819              		.loc 1 564 0 is_stmt 1
 2820 1fbe 488B8508 		movq	-248(%rbp), %rax
 2820      FFFFFF
 2821 1fc5 8B10     		movl	(%rax), %edx
 2822 1fc7 488B8508 		movq	-248(%rbp), %rax
 2822      FFFFFF
 2823 1fce 8B80D000 		movl	208(%rax), %eax
 2823      0000
 2824 1fd4 01C2     		addl	%eax, %edx
 2825 1fd6 488B8508 		movq	-248(%rbp), %rax
 2825      FFFFFF
 2826 1fdd 8B80A001 		movl	416(%rax), %eax
 2826      0000
 2827 1fe3 01C2     		addl	%eax, %edx
 565:svf2csvf.c    **** 					!= cxt->curLength
 2828              		.loc 1 565 0
 2829 1fe5 488B8508 		movq	-248(%rbp), %rax
 2829      FFFFFF
 2830 1fec 8B807002 		movl	624(%rax), %eax
 2830      0000
 563:svf2csvf.c    **** 				if (
 2831              		.loc 1 563 0
 2832 1ff2 39C2     		cmpl	%eax, %edx
 2833 1ff4 0F84F900 		je	.L192
 2833      0000
 566:svf2csvf.c    **** 				) {
 567:svf2csvf.c    **** 					cxt->curLength = cxt->dataHead.numBits + cxt->dataBody.numBits + cxt->dataTail.numBits;
 2834              		.loc 1 567 0
 2835 1ffa 488B8508 		movq	-248(%rbp), %rax
 2835      FFFFFF
 2836 2001 8B10     		movl	(%rax), %edx
 2837 2003 488B8508 		movq	-248(%rbp), %rax
 2837      FFFFFF
 2838 200a 8B80D000 		movl	208(%rax), %eax
 2838      0000
 2839 2010 01C2     		addl	%eax, %edx
 2840 2012 488B8508 		movq	-248(%rbp), %rax
 2840      FFFFFF
 2841 2019 8B80A001 		movl	416(%rax), %eax
 2841      0000
 2842 201f 01C2     		addl	%eax, %edx
 2843 2021 488B8508 		movq	-248(%rbp), %rax
 2843      FFFFFF
 2844 2028 89907002 		movl	%edx, 624(%rax)
 2844      0000
 568:svf2csvf.c    **** 					cxt->numCommands++;
 2845              		.loc 1 568 0
 2846 202e 488B8508 		movq	-248(%rbp), %rax
 2846      FFFFFF
 2847 2035 8B809C02 		movl	668(%rax), %eax
 2847      0000
 2848 203b 8D5001   		leal	1(%rax), %edx
 2849 203e 488B8508 		movq	-248(%rbp), %rax
 2849      FFFFFF
 2850 2045 89909C02 		movl	%edx, 668(%rax)
 2850      0000
 569:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDRSIZE, error);
 2851              		.loc 1 569 0
 2852 204b 488B95E8 		movq	-280(%rbp), %rdx
 2852      FEFFFF
 2853 2052 488B85F8 		movq	-264(%rbp), %rax
 2853      FEFFFF
 2854 2059 BE080000 		movl	$8, %esi
 2854      00
 2855 205e 4889C7   		movq	%rax, %rdi
 2856 2061 E8000000 		call	bufAppendByte@PLT
 2856      00
 2857 2066 89851CFF 		movl	%eax, -228(%rbp)
 2857      FFFF
 570:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2858              		.loc 1 570 0
 2859 206c 83BD1CFF 		cmpl	$0, -228(%rbp)
 2859      FFFF00
 2860 2073 7425     		je	.L193
 2861              		.loc 1 570 0 is_stmt 0 discriminator 1
 2862 2075 488B85E8 		movq	-280(%rbp), %rax
 2862      FEFFFF
 2863 207c 488D3500 		leaq	.LC16(%rip), %rsi
 2863      000000
 2864 2083 4889C7   		movq	%rax, %rdi
 2865 2086 E8000000 		call	errPrefix@PLT
 2865      00
 2866 208b C78514FF 		movl	$1, -236(%rbp)
 2866      FFFF0100 
 2866      0000
 2867 2095 E9ED0B00 		jmp	.L129
 2867      00
 2868              	.L193:
 571:svf2csvf.c    **** 					bStatus = bufAppendLongBE(csvfBuf, cxt->curLength, error);
 2869              		.loc 1 571 0 is_stmt 1
 2870 209a 488B8508 		movq	-248(%rbp), %rax
 2870      FFFFFF
 2871 20a1 8B887002 		movl	624(%rax), %ecx
 2871      0000
 2872 20a7 488B95E8 		movq	-280(%rbp), %rdx
 2872      FEFFFF
 2873 20ae 488B85F8 		movq	-264(%rbp), %rax
 2873      FEFFFF
 2874 20b5 89CE     		movl	%ecx, %esi
 2875 20b7 4889C7   		movq	%rax, %rdi
 2876 20ba E8000000 		call	bufAppendLongBE@PLT
 2876      00
 2877 20bf 89851CFF 		movl	%eax, -228(%rbp)
 2877      FFFF
 572:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2878              		.loc 1 572 0
 2879 20c5 83BD1CFF 		cmpl	$0, -228(%rbp)
 2879      FFFF00
 2880 20cc 7425     		je	.L192
 2881              		.loc 1 572 0 is_stmt 0 discriminator 1
 2882 20ce 488B85E8 		movq	-280(%rbp), %rax
 2882      FEFFFF
 2883 20d5 488D3500 		leaq	.LC16(%rip), %rsi
 2883      000000
 2884 20dc 4889C7   		movq	%rax, %rdi
 2885 20df E8000000 		call	errPrefix@PLT
 2885      00
 2886 20e4 C78514FF 		movl	$1, -236(%rbp)
 2886      FFFF0100 
 2886      0000
 2887 20ee E9940B00 		jmp	.L129
 2887      00
 2888              	.L192:
 573:svf2csvf.c    **** 				}
 574:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.mask, error);
 2889              		.loc 1 574 0 is_stmt 1
 2890 20f3 488B8508 		movq	-248(%rbp), %rax
 2890      FFFFFF
 2891 20fa 488D4848 		leaq	72(%rax), %rcx
 2892 20fe 488B95E8 		movq	-280(%rbp), %rdx
 2892      FEFFFF
 2893 2105 488D4580 		leaq	-128(%rbp), %rax
 2894 2109 4889CE   		movq	%rcx, %rsi
 2895 210c 4889C7   		movq	%rax, %rdi
 2896 210f E8000000 		call	bufDeepCopy@PLT
 2896      00
 2897 2114 89851CFF 		movl	%eax, -228(%rbp)
 2897      FFFF
 575:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2898              		.loc 1 575 0
 2899 211a 83BD1CFF 		cmpl	$0, -228(%rbp)
 2899      FFFF00
 2900 2121 7425     		je	.L194
 2901              		.loc 1 575 0 is_stmt 0 discriminator 1
 2902 2123 488B85E8 		movq	-280(%rbp), %rax
 2902      FEFFFF
 2903 212a 488D3500 		leaq	.LC16(%rip), %rsi
 2903      000000
 2904 2131 4889C7   		movq	%rax, %rdi
 2905 2134 E8000000 		call	errPrefix@PLT
 2905      00
 2906 2139 C78514FF 		movl	$1, -236(%rbp)
 2906      FFFF0100 
 2906      0000
 2907 2143 E93F0B00 		jmp	.L129
 2907      00
 2908              	.L194:
 576:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->dataBody.mask, error);
 2909              		.loc 1 576 0 is_stmt 1
 2910 2148 488B8508 		movq	-248(%rbp), %rax
 2910      FFFFFF
 2911 214f 488D8818 		leaq	280(%rax), %rcx
 2911      010000
 2912 2156 488B95E8 		movq	-280(%rbp), %rdx
 2912      FEFFFF
 2913 215d 488D45A0 		leaq	-96(%rbp), %rax
 2914 2161 4889CE   		movq	%rcx, %rsi
 2915 2164 4889C7   		movq	%rax, %rdi
 2916 2167 E8000000 		call	bufDeepCopy@PLT
 2916      00
 2917 216c 89851CFF 		movl	%eax, -228(%rbp)
 2917      FFFF
 577:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2918              		.loc 1 577 0
 2919 2172 83BD1CFF 		cmpl	$0, -228(%rbp)
 2919      FFFF00
 2920 2179 7425     		je	.L195
 2921              		.loc 1 577 0 is_stmt 0 discriminator 1
 2922 217b 488B85E8 		movq	-280(%rbp), %rax
 2922      FEFFFF
 2923 2182 488D3500 		leaq	.LC16(%rip), %rsi
 2923      000000
 2924 2189 4889C7   		movq	%rax, %rdi
 2925 218c E8000000 		call	errPrefix@PLT
 2925      00
 2926 2191 C78514FF 		movl	$1, -236(%rbp)
 2926      FFFF0100 
 2926      0000
 2927 219b E9E70A00 		jmp	.L129
 2927      00
 2928              	.L195:
 578:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.mask, error);
 2929              		.loc 1 578 0 is_stmt 1
 2930 21a0 488B8508 		movq	-248(%rbp), %rax
 2930      FFFFFF
 2931 21a7 488D88E8 		leaq	488(%rax), %rcx
 2931      010000
 2932 21ae 488B95E8 		movq	-280(%rbp), %rdx
 2932      FEFFFF
 2933 21b5 488D45E0 		leaq	-32(%rbp), %rax
 2934 21b9 4889CE   		movq	%rcx, %rsi
 2935 21bc 4889C7   		movq	%rax, %rdi
 2936 21bf E8000000 		call	bufDeepCopy@PLT
 2936      00
 2937 21c4 89851CFF 		movl	%eax, -228(%rbp)
 2937      FFFF
 579:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 2938              		.loc 1 579 0
 2939 21ca 83BD1CFF 		cmpl	$0, -228(%rbp)
 2939      FFFF00
 2940 21d1 7425     		je	.L196
 2941              		.loc 1 579 0 is_stmt 0 discriminator 1
 2942 21d3 488B85E8 		movq	-280(%rbp), %rax
 2942      FEFFFF
 2943 21da 488D3500 		leaq	.LC16(%rip), %rsi
 2943      000000
 2944 21e1 4889C7   		movq	%rax, %rdi
 2945 21e4 E8000000 		call	errPrefix@PLT
 2945      00
 2946 21e9 C78514FF 		movl	$1, -236(%rbp)
 2946      FFFF0100 
 2946      0000
 2947 21f3 E98F0A00 		jmp	.L129
 2947      00
 2948              	.L196:
 580:svf2csvf.c    **** 				fStatus = headTail(
 2949              		.loc 1 580 0 is_stmt 1
 2950 21f8 488B8508 		movq	-248(%rbp), %rax
 2950      FFFFFF
 2951 21ff 448B88A0 		movl	416(%rax), %r9d
 2951      010000
 2952 2206 488B8508 		movq	-248(%rbp), %rax
 2952      FFFFFF
 2953 220d 448B00   		movl	(%rax), %r8d
 2954 2210 488B8508 		movq	-248(%rbp), %rax
 2954      FFFFFF
 2955 2217 8B88D000 		movl	208(%rax), %ecx
 2955      0000
 2956 221d 488D55E0 		leaq	-32(%rbp), %rdx
 2957 2221 488D7580 		leaq	-128(%rbp), %rsi
 2958 2225 488D45A0 		leaq	-96(%rbp), %rax
 2959 2229 488BBDE8 		movq	-280(%rbp), %rdi
 2959      FEFFFF
 2960 2230 48893C24 		movq	%rdi, (%rsp)
 2961 2234 4889C7   		movq	%rax, %rdi
 2962 2237 E8000000 		call	headTail@PLT
 2962      00
 2963 223c 898524FF 		movl	%eax, -220(%rbp)
 2963      FFFF
 581:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 582:svf2csvf.c    **** 					cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 583:svf2csvf.c    **** 					error);
 584:svf2csvf.c    **** 				zeroMask = isAllZero(&tmpBody1);
 2964              		.loc 1 584 0
 2965 2242 488D45A0 		leaq	-96(%rbp), %rax
 2966 2246 4889C7   		movq	%rax, %rdi
 2967 2249 E8C3ECFF 		call	isAllZero
 2967      FF
 2968 224e 888513FF 		movb	%al, -237(%rbp)
 2968      FFFF
 585:svf2csvf.c    **** 				if (
 586:svf2csvf.c    **** 					tmpBody1.length != cxt->curMaskBuf.length ||
 2969              		.loc 1 586 0
 2970 2254 488B55A8 		movq	-88(%rbp), %rdx
 2971 2258 488B8508 		movq	-248(%rbp), %rax
 2971      FFFFFF
 2972 225f 488B8080 		movq	640(%rax), %rax
 2972      020000
 585:svf2csvf.c    **** 				if (
 2973              		.loc 1 585 0
 2974 2266 4839C2   		cmpq	%rax, %rdx
 2975 2269 7525     		jne	.L197
 587:svf2csvf.c    **** 					memcmp(tmpBody1.data, cxt->curMaskBuf.data, tmpBody1.length)
 2976              		.loc 1 587 0
 2977 226b 488B55A8 		movq	-88(%rbp), %rdx
 2978 226f 488B8508 		movq	-248(%rbp), %rax
 2978      FFFFFF
 2979 2276 488B8878 		movq	632(%rax), %rcx
 2979      020000
 2980 227d 488B45A0 		movq	-96(%rbp), %rax
 2981 2281 4889CE   		movq	%rcx, %rsi
 2982 2284 4889C7   		movq	%rax, %rdi
 2983 2287 E8000000 		call	memcmp@PLT
 2983      00
 586:svf2csvf.c    **** 					memcmp(tmpBody1.data, cxt->curMaskBuf.data, tmpBody1.length)
 2984              		.loc 1 586 0
 2985 228c 85C0     		testl	%eax, %eax
 2986 228e 742B     		je	.L198
 2987              	.L197:
 588:svf2csvf.c    **** 				) {
 589:svf2csvf.c    **** 					bufSwap(&cxt->curMaskBuf, &tmpBody1);
 2988              		.loc 1 589 0
 2989 2290 488B8508 		movq	-248(%rbp), %rax
 2989      FFFFFF
 2990 2297 488D9078 		leaq	632(%rax), %rdx
 2990      020000
 2991 229e 488D45A0 		leaq	-96(%rbp), %rax
 2992 22a2 4889C6   		movq	%rax, %rsi
 2993 22a5 4889D7   		movq	%rdx, %rdi
 2994 22a8 E8000000 		call	bufSwap@PLT
 2994      00
 590:svf2csvf.c    **** 					cxt->newMaskWritten = false;
 2995              		.loc 1 590 0
 2996 22ad 488B8508 		movq	-248(%rbp), %rax
 2996      FFFFFF
 2997 22b4 C680A002 		movb	$0, 672(%rax)
 2997      000000
 2998              	.L198:
 591:svf2csvf.c    **** 				}
 592:svf2csvf.c    **** 				if ( !zeroMask && tdo && !cxt->newMaskWritten ) {
 2999              		.loc 1 592 0
 3000 22bb 0FB68513 		movzbl	-237(%rbp), %eax
 3000      FFFFFF
 3001 22c2 83F001   		xorl	$1, %eax
 3002 22c5 84C0     		testb	%al, %al
 3003 22c7 0F840B01 		je	.L199
 3003      0000
 3004              		.loc 1 592 0 is_stmt 0 discriminator 1
 3005 22cd 4883BD58 		cmpq	$0, -168(%rbp)
 3005      FFFFFF00 
 3006 22d5 0F84FD00 		je	.L199
 3006      0000
 3007 22db 488B8508 		movq	-248(%rbp), %rax
 3007      FFFFFF
 3008 22e2 0FB680A0 		movzbl	672(%rax), %eax
 3008      020000
 3009 22e9 83F001   		xorl	$1, %eax
 3010 22ec 84C0     		testb	%al, %al
 3011 22ee 0F84E400 		je	.L199
 3011      0000
 593:svf2csvf.c    **** 					// New mask is nonzero and different from the last one sent
 594:svf2csvf.c    **** 					cxt->numCommands++;
 3012              		.loc 1 594 0 is_stmt 1
 3013 22f4 488B8508 		movq	-248(%rbp), %rax
 3013      FFFFFF
 3014 22fb 8B809C02 		movl	668(%rax), %eax
 3014      0000
 3015 2301 8D5001   		leal	1(%rax), %edx
 3016 2304 488B8508 		movq	-248(%rbp), %rax
 3016      FFFFFF
 3017 230b 89909C02 		movl	%edx, 668(%rax)
 3017      0000
 595:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XTDOMASK, error);
 3018              		.loc 1 595 0
 3019 2311 488B95E8 		movq	-280(%rbp), %rdx
 3019      FEFFFF
 3020 2318 488B85F8 		movq	-264(%rbp), %rax
 3020      FEFFFF
 3021 231f BE010000 		movl	$1, %esi
 3021      00
 3022 2324 4889C7   		movq	%rax, %rdi
 3023 2327 E8000000 		call	bufAppendByte@PLT
 3023      00
 3024 232c 89851CFF 		movl	%eax, -228(%rbp)
 3024      FFFF
 596:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3025              		.loc 1 596 0
 3026 2332 83BD1CFF 		cmpl	$0, -228(%rbp)
 3026      FFFF00
 3027 2339 7425     		je	.L200
 3028              		.loc 1 596 0 is_stmt 0 discriminator 1
 3029 233b 488B85E8 		movq	-280(%rbp), %rax
 3029      FEFFFF
 3030 2342 488D3500 		leaq	.LC16(%rip), %rsi
 3030      000000
 3031 2349 4889C7   		movq	%rax, %rdi
 3032 234c E8000000 		call	errPrefix@PLT
 3032      00
 3033 2351 C78514FF 		movl	$1, -236(%rbp)
 3033      FFFF0100 
 3033      0000
 3034 235b E9270900 		jmp	.L129
 3034      00
 3035              	.L200:
 597:svf2csvf.c    **** 					fStatus = appendSwapped(csvfBuf, cxt->curMaskBuf.data, (uint32)cxt->curMaskBuf.length, error);
 3036              		.loc 1 597 0 is_stmt 1
 3037 2360 488B8508 		movq	-248(%rbp), %rax
 3037      FFFFFF
 3038 2367 488B8080 		movq	640(%rax), %rax
 3038      020000
 3039 236e 89C2     		movl	%eax, %edx
 3040 2370 488B8508 		movq	-248(%rbp), %rax
 3040      FFFFFF
 3041 2377 488BB078 		movq	632(%rax), %rsi
 3041      020000
 3042 237e 488B8DE8 		movq	-280(%rbp), %rcx
 3042      FEFFFF
 3043 2385 488B85F8 		movq	-264(%rbp), %rax
 3043      FEFFFF
 3044 238c 4889C7   		movq	%rax, %rdi
 3045 238f E8BEECFF 		call	appendSwapped
 3045      FF
 3046 2394 898524FF 		movl	%eax, -220(%rbp)
 3046      FFFF
 598:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3047              		.loc 1 598 0
 3048 239a 83BD24FF 		cmpl	$0, -220(%rbp)
 3048      FFFF00
 3049 23a1 7427     		je	.L201
 3050              		.loc 1 598 0 is_stmt 0 discriminator 1
 3051 23a3 488B85E8 		movq	-280(%rbp), %rax
 3051      FEFFFF
 3052 23aa 488D3500 		leaq	.LC16(%rip), %rsi
 3052      000000
 3053 23b1 4889C7   		movq	%rax, %rdi
 3054 23b4 E8000000 		call	errPrefix@PLT
 3054      00
 3055 23b9 8B8524FF 		movl	-220(%rbp), %eax
 3055      FFFF
 3056 23bf 898514FF 		movl	%eax, -236(%rbp)
 3056      FFFF
 3057 23c5 E9BD0800 		jmp	.L129
 3057      00
 3058              	.L201:
 599:svf2csvf.c    **** 					cxt->newMaskWritten = true;
 3059              		.loc 1 599 0 is_stmt 1
 3060 23ca 488B8508 		movq	-248(%rbp), %rax
 3060      FFFFFF
 3061 23d1 C680A002 		movb	$1, 672(%rax)
 3061      000001
 3062              	.L199:
 600:svf2csvf.c    **** 				}
 601:svf2csvf.c    **** 
 602:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.tdi, error);
 3063              		.loc 1 602 0
 3064 23d8 488B8508 		movq	-248(%rbp), %rax
 3064      FFFFFF
 3065 23df 488D4808 		leaq	8(%rax), %rcx
 3066 23e3 488B95E8 		movq	-280(%rbp), %rdx
 3066      FEFFFF
 3067 23ea 488D4580 		leaq	-128(%rbp), %rax
 3068 23ee 4889CE   		movq	%rcx, %rsi
 3069 23f1 4889C7   		movq	%rax, %rdi
 3070 23f4 E8000000 		call	bufDeepCopy@PLT
 3070      00
 3071 23f9 89851CFF 		movl	%eax, -228(%rbp)
 3071      FFFF
 603:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3072              		.loc 1 603 0
 3073 23ff 83BD1CFF 		cmpl	$0, -228(%rbp)
 3073      FFFF00
 3074 2406 7425     		je	.L202
 3075              		.loc 1 603 0 is_stmt 0 discriminator 1
 3076 2408 488B85E8 		movq	-280(%rbp), %rax
 3076      FEFFFF
 3077 240f 488D3500 		leaq	.LC16(%rip), %rsi
 3077      000000
 3078 2416 4889C7   		movq	%rax, %rdi
 3079 2419 E8000000 		call	errPrefix@PLT
 3079      00
 3080 241e C78514FF 		movl	$1, -236(%rbp)
 3080      FFFF0100 
 3080      0000
 3081 2428 E95A0800 		jmp	.L129
 3081      00
 3082              	.L202:
 604:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->dataBody.tdi, error);
 3083              		.loc 1 604 0 is_stmt 1
 3084 242d 488B8508 		movq	-248(%rbp), %rax
 3084      FFFFFF
 3085 2434 488D88D8 		leaq	216(%rax), %rcx
 3085      000000
 3086 243b 488B95E8 		movq	-280(%rbp), %rdx
 3086      FEFFFF
 3087 2442 488D45A0 		leaq	-96(%rbp), %rax
 3088 2446 4889CE   		movq	%rcx, %rsi
 3089 2449 4889C7   		movq	%rax, %rdi
 3090 244c E8000000 		call	bufDeepCopy@PLT
 3090      00
 3091 2451 89851CFF 		movl	%eax, -228(%rbp)
 3091      FFFF
 605:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3092              		.loc 1 605 0
 3093 2457 83BD1CFF 		cmpl	$0, -228(%rbp)
 3093      FFFF00
 3094 245e 7425     		je	.L203
 3095              		.loc 1 605 0 is_stmt 0 discriminator 1
 3096 2460 488B85E8 		movq	-280(%rbp), %rax
 3096      FEFFFF
 3097 2467 488D3500 		leaq	.LC16(%rip), %rsi
 3097      000000
 3098 246e 4889C7   		movq	%rax, %rdi
 3099 2471 E8000000 		call	errPrefix@PLT
 3099      00
 3100 2476 C78514FF 		movl	$1, -236(%rbp)
 3100      FFFF0100 
 3100      0000
 3101 2480 E9020800 		jmp	.L129
 3101      00
 3102              	.L203:
 606:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.tdi, error);
 3103              		.loc 1 606 0 is_stmt 1
 3104 2485 488B8508 		movq	-248(%rbp), %rax
 3104      FFFFFF
 3105 248c 488D88A8 		leaq	424(%rax), %rcx
 3105      010000
 3106 2493 488B95E8 		movq	-280(%rbp), %rdx
 3106      FEFFFF
 3107 249a 488D45E0 		leaq	-32(%rbp), %rax
 3108 249e 4889CE   		movq	%rcx, %rsi
 3109 24a1 4889C7   		movq	%rax, %rdi
 3110 24a4 E8000000 		call	bufDeepCopy@PLT
 3110      00
 3111 24a9 89851CFF 		movl	%eax, -228(%rbp)
 3111      FFFF
 607:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3112              		.loc 1 607 0
 3113 24af 83BD1CFF 		cmpl	$0, -228(%rbp)
 3113      FFFF00
 3114 24b6 7425     		je	.L204
 3115              		.loc 1 607 0 is_stmt 0 discriminator 1
 3116 24b8 488B85E8 		movq	-280(%rbp), %rax
 3116      FEFFFF
 3117 24bf 488D3500 		leaq	.LC16(%rip), %rsi
 3117      000000
 3118 24c6 4889C7   		movq	%rax, %rdi
 3119 24c9 E8000000 		call	errPrefix@PLT
 3119      00
 3120 24ce C78514FF 		movl	$1, -236(%rbp)
 3120      FFFF0100 
 3120      0000
 3121 24d8 E9AA0700 		jmp	.L129
 3121      00
 3122              	.L204:
 608:svf2csvf.c    **** 				fStatus = headTail(
 3123              		.loc 1 608 0 is_stmt 1
 3124 24dd 488B8508 		movq	-248(%rbp), %rax
 3124      FFFFFF
 3125 24e4 448B88A0 		movl	416(%rax), %r9d
 3125      010000
 3126 24eb 488B8508 		movq	-248(%rbp), %rax
 3126      FFFFFF
 3127 24f2 448B00   		movl	(%rax), %r8d
 3128 24f5 488B8508 		movq	-248(%rbp), %rax
 3128      FFFFFF
 3129 24fc 8B88D000 		movl	208(%rax), %ecx
 3129      0000
 3130 2502 488D55E0 		leaq	-32(%rbp), %rdx
 3131 2506 488D7580 		leaq	-128(%rbp), %rsi
 3132 250a 488D45A0 		leaq	-96(%rbp), %rax
 3133 250e 488BBDE8 		movq	-280(%rbp), %rdi
 3133      FEFFFF
 3134 2515 48893C24 		movq	%rdi, (%rsp)
 3135 2519 4889C7   		movq	%rax, %rdi
 3136 251c E8000000 		call	headTail@PLT
 3136      00
 3137 2521 898524FF 		movl	%eax, -220(%rbp)
 3137      FFFF
 609:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 610:svf2csvf.c    **** 					cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 611:svf2csvf.c    **** 					error);
 612:svf2csvf.c    **** 				if ( zeroMask || !tdo ) {
 3138              		.loc 1 612 0
 3139 2527 80BD13FF 		cmpb	$0, -237(%rbp)
 3139      FFFF00
 3140 252e 750E     		jne	.L205
 3141              		.loc 1 612 0 is_stmt 0 discriminator 1
 3142 2530 4883BD58 		cmpq	$0, -168(%rbp)
 3142      FFFFFF00 
 3143 2538 0F85C700 		jne	.L206
 3143      0000
 3144              	.L205:
 613:svf2csvf.c    **** 					cxt->numCommands++;
 3145              		.loc 1 613 0 is_stmt 1
 3146 253e 488B8508 		movq	-248(%rbp), %rax
 3146      FFFFFF
 3147 2545 8B809C02 		movl	668(%rax), %eax
 3147      0000
 3148 254b 8D5001   		leal	1(%rax), %edx
 3149 254e 488B8508 		movq	-248(%rbp), %rax
 3149      FFFFFF
 3150 2555 89909C02 		movl	%edx, 668(%rax)
 3150      0000
 614:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDR, error);
 3151              		.loc 1 614 0
 3152 255b 488B95E8 		movq	-280(%rbp), %rdx
 3152      FEFFFF
 3153 2562 488B85F8 		movq	-264(%rbp), %rax
 3153      FEFFFF
 3154 2569 BE030000 		movl	$3, %esi
 3154      00
 3155 256e 4889C7   		movq	%rax, %rdi
 3156 2571 E8000000 		call	bufAppendByte@PLT
 3156      00
 3157 2576 89851CFF 		movl	%eax, -228(%rbp)
 3157      FFFF
 615:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3158              		.loc 1 615 0
 3159 257c 83BD1CFF 		cmpl	$0, -228(%rbp)
 3159      FFFF00
 3160 2583 7425     		je	.L207
 3161              		.loc 1 615 0 is_stmt 0 discriminator 1
 3162 2585 488B85E8 		movq	-280(%rbp), %rax
 3162      FEFFFF
 3163 258c 488D3500 		leaq	.LC16(%rip), %rsi
 3163      000000
 3164 2593 4889C7   		movq	%rax, %rdi
 3165 2596 E8000000 		call	errPrefix@PLT
 3165      00
 3166 259b C78514FF 		movl	$1, -236(%rbp)
 3166      FFFF0100 
 3166      0000
 3167 25a5 E9DD0600 		jmp	.L129
 3167      00
 3168              	.L207:
 616:svf2csvf.c    **** 					fStatus = appendSwapped(csvfBuf, tmpBody1.data, (uint32)tmpBody1.length, error);
 3169              		.loc 1 616 0 is_stmt 1
 3170 25aa 488B45A8 		movq	-88(%rbp), %rax
 3171 25ae 89C2     		movl	%eax, %edx
 3172 25b0 488B75A0 		movq	-96(%rbp), %rsi
 3173 25b4 488B8DE8 		movq	-280(%rbp), %rcx
 3173      FEFFFF
 3174 25bb 488B85F8 		movq	-264(%rbp), %rax
 3174      FEFFFF
 3175 25c2 4889C7   		movq	%rax, %rdi
 3176 25c5 E888EAFF 		call	appendSwapped
 3176      FF
 3177 25ca 898524FF 		movl	%eax, -220(%rbp)
 3177      FFFF
 617:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3178              		.loc 1 617 0
 3179 25d0 83BD24FF 		cmpl	$0, -220(%rbp)
 3179      FFFF00
 3180 25d7 7427     		je	.L208
 3181              		.loc 1 617 0 is_stmt 0 discriminator 1
 3182 25d9 488B85E8 		movq	-280(%rbp), %rax
 3182      FEFFFF
 3183 25e0 488D3500 		leaq	.LC16(%rip), %rsi
 3183      000000
 3184 25e7 4889C7   		movq	%rax, %rdi
 3185 25ea E8000000 		call	errPrefix@PLT
 3185      00
 3186 25ef 8B8524FF 		movl	-220(%rbp), %eax
 3186      FFFF
 3187 25f5 898514FF 		movl	%eax, -236(%rbp)
 3187      FFFF
 3188 25fb E9870600 		jmp	.L129
 3188      00
 3189              	.L208:
 3190              		.loc 1 617 0 discriminator 2
 3191 2600 E9450200 		jmp	.L209
 3191      00
 3192              	.L206:
 618:svf2csvf.c    **** 				} else {
 619:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpHead, &cxt->dataHead.tdo, error);
 3193              		.loc 1 619 0 is_stmt 1
 3194 2605 488B8508 		movq	-248(%rbp), %rax
 3194      FFFFFF
 3195 260c 488D4828 		leaq	40(%rax), %rcx
 3196 2610 488B95E8 		movq	-280(%rbp), %rdx
 3196      FEFFFF
 3197 2617 488D4580 		leaq	-128(%rbp), %rax
 3198 261b 4889CE   		movq	%rcx, %rsi
 3199 261e 4889C7   		movq	%rax, %rdi
 3200 2621 E8000000 		call	bufDeepCopy@PLT
 3200      00
 3201 2626 89851CFF 		movl	%eax, -228(%rbp)
 3201      FFFF
 620:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3202              		.loc 1 620 0
 3203 262c 83BD1CFF 		cmpl	$0, -228(%rbp)
 3203      FFFF00
 3204 2633 7425     		je	.L210
 3205              		.loc 1 620 0 is_stmt 0 discriminator 1
 3206 2635 488B85E8 		movq	-280(%rbp), %rax
 3206      FEFFFF
 3207 263c 488D3500 		leaq	.LC16(%rip), %rsi
 3207      000000
 3208 2643 4889C7   		movq	%rax, %rdi
 3209 2646 E8000000 		call	errPrefix@PLT
 3209      00
 3210 264b C78514FF 		movl	$1, -236(%rbp)
 3210      FFFF0100 
 3210      0000
 3211 2655 E92D0600 		jmp	.L129
 3211      00
 3212              	.L210:
 621:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpBody2, &cxt->dataBody.tdo, error);
 3213              		.loc 1 621 0 is_stmt 1
 3214 265a 488B8508 		movq	-248(%rbp), %rax
 3214      FFFFFF
 3215 2661 488D88F8 		leaq	248(%rax), %rcx
 3215      000000
 3216 2668 488B95E8 		movq	-280(%rbp), %rdx
 3216      FEFFFF
 3217 266f 488D45C0 		leaq	-64(%rbp), %rax
 3218 2673 4889CE   		movq	%rcx, %rsi
 3219 2676 4889C7   		movq	%rax, %rdi
 3220 2679 E8000000 		call	bufDeepCopy@PLT
 3220      00
 3221 267e 89851CFF 		movl	%eax, -228(%rbp)
 3221      FFFF
 622:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3222              		.loc 1 622 0
 3223 2684 83BD1CFF 		cmpl	$0, -228(%rbp)
 3223      FFFF00
 3224 268b 7425     		je	.L211
 3225              		.loc 1 622 0 is_stmt 0 discriminator 1
 3226 268d 488B85E8 		movq	-280(%rbp), %rax
 3226      FEFFFF
 3227 2694 488D3500 		leaq	.LC16(%rip), %rsi
 3227      000000
 3228 269b 4889C7   		movq	%rax, %rdi
 3229 269e E8000000 		call	errPrefix@PLT
 3229      00
 3230 26a3 C78514FF 		movl	$1, -236(%rbp)
 3230      FFFF0100 
 3230      0000
 3231 26ad E9D50500 		jmp	.L129
 3231      00
 3232              	.L211:
 623:svf2csvf.c    **** 					bStatus = bufDeepCopy(&tmpTail, &cxt->dataTail.tdo, error);
 3233              		.loc 1 623 0 is_stmt 1
 3234 26b2 488B8508 		movq	-248(%rbp), %rax
 3234      FFFFFF
 3235 26b9 488D88C8 		leaq	456(%rax), %rcx
 3235      010000
 3236 26c0 488B95E8 		movq	-280(%rbp), %rdx
 3236      FEFFFF
 3237 26c7 488D45E0 		leaq	-32(%rbp), %rax
 3238 26cb 4889CE   		movq	%rcx, %rsi
 3239 26ce 4889C7   		movq	%rax, %rdi
 3240 26d1 E8000000 		call	bufDeepCopy@PLT
 3240      00
 3241 26d6 89851CFF 		movl	%eax, -228(%rbp)
 3241      FFFF
 624:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3242              		.loc 1 624 0
 3243 26dc 83BD1CFF 		cmpl	$0, -228(%rbp)
 3243      FFFF00
 3244 26e3 7425     		je	.L212
 3245              		.loc 1 624 0 is_stmt 0 discriminator 1
 3246 26e5 488B85E8 		movq	-280(%rbp), %rax
 3246      FEFFFF
 3247 26ec 488D3500 		leaq	.LC16(%rip), %rsi
 3247      000000
 3248 26f3 4889C7   		movq	%rax, %rdi
 3249 26f6 E8000000 		call	errPrefix@PLT
 3249      00
 3250 26fb C78514FF 		movl	$1, -236(%rbp)
 3250      FFFF0100 
 3250      0000
 3251 2705 E97D0500 		jmp	.L129
 3251      00
 3252              	.L212:
 625:svf2csvf.c    **** 					fStatus = headTail(
 3253              		.loc 1 625 0 is_stmt 1
 3254 270a 488B8508 		movq	-248(%rbp), %rax
 3254      FFFFFF
 3255 2711 448B88A0 		movl	416(%rax), %r9d
 3255      010000
 3256 2718 488B8508 		movq	-248(%rbp), %rax
 3256      FFFFFF
 3257 271f 448B00   		movl	(%rax), %r8d
 3258 2722 488B8508 		movq	-248(%rbp), %rax
 3258      FFFFFF
 3259 2729 8B88D000 		movl	208(%rax), %ecx
 3259      0000
 3260 272f 488D55E0 		leaq	-32(%rbp), %rdx
 3261 2733 488D7580 		leaq	-128(%rbp), %rsi
 3262 2737 488D45C0 		leaq	-64(%rbp), %rax
 3263 273b 488BBDE8 		movq	-280(%rbp), %rdi
 3263      FEFFFF
 3264 2742 48893C24 		movq	%rdi, (%rsp)
 3265 2746 4889C7   		movq	%rax, %rdi
 3266 2749 E8000000 		call	headTail@PLT
 3266      00
 3267 274e 898524FF 		movl	%eax, -220(%rbp)
 3267      FFFF
 626:svf2csvf.c    **** 						&tmpBody2, &tmpHead, &tmpTail,
 627:svf2csvf.c    **** 						cxt->dataBody.numBits, cxt->dataHead.numBits, cxt->dataTail.numBits,
 628:svf2csvf.c    **** 						error);
 629:svf2csvf.c    **** 					if ( maxBufSize && tmpBody2.length > *maxBufSize ) {
 3268              		.loc 1 629 0
 3269 2754 4883BDF0 		cmpq	$0, -272(%rbp)
 3269      FEFFFF00 
 3270 275c 7423     		je	.L213
 3271              		.loc 1 629 0 is_stmt 0 discriminator 1
 3272 275e 488B55C8 		movq	-56(%rbp), %rdx
 3273 2762 488B85F0 		movq	-272(%rbp), %rax
 3273      FEFFFF
 3274 2769 8B00     		movl	(%rax), %eax
 3275 276b 89C0     		movl	%eax, %eax
 3276 276d 4839C2   		cmpq	%rax, %rdx
 3277 2770 760F     		jbe	.L213
 630:svf2csvf.c    **** 						*maxBufSize = (uint32)tmpBody2.length;
 3278              		.loc 1 630 0 is_stmt 1
 3279 2772 488B45C8 		movq	-56(%rbp), %rax
 3280 2776 89C2     		movl	%eax, %edx
 3281 2778 488B85F0 		movq	-272(%rbp), %rax
 3281      FEFFFF
 3282 277f 8910     		movl	%edx, (%rax)
 3283              	.L213:
 631:svf2csvf.c    **** 					}
 632:svf2csvf.c    **** 					cxt->numCommands++;
 3284              		.loc 1 632 0
 3285 2781 488B8508 		movq	-248(%rbp), %rax
 3285      FFFFFF
 3286 2788 8B809C02 		movl	668(%rax), %eax
 3286      0000
 3287 278e 8D5001   		leal	1(%rax), %edx
 3288 2791 488B8508 		movq	-248(%rbp), %rax
 3288      FFFFFF
 3289 2798 89909C02 		movl	%edx, 668(%rax)
 3289      0000
 633:svf2csvf.c    **** 					bStatus = bufAppendByte(csvfBuf, XSDRTDO, error);
 3290              		.loc 1 633 0
 3291 279e 488B95E8 		movq	-280(%rbp), %rdx
 3291      FEFFFF
 3292 27a5 488B85F8 		movq	-264(%rbp), %rax
 3292      FEFFFF
 3293 27ac BE090000 		movl	$9, %esi
 3293      00
 3294 27b1 4889C7   		movq	%rax, %rdi
 3295 27b4 E8000000 		call	bufAppendByte@PLT
 3295      00
 3296 27b9 89851CFF 		movl	%eax, -228(%rbp)
 3296      FFFF
 634:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3297              		.loc 1 634 0
 3298 27bf 83BD1CFF 		cmpl	$0, -228(%rbp)
 3298      FFFF00
 3299 27c6 7425     		je	.L214
 3300              		.loc 1 634 0 is_stmt 0 discriminator 1
 3301 27c8 488B85E8 		movq	-280(%rbp), %rax
 3301      FEFFFF
 3302 27cf 488D3500 		leaq	.LC16(%rip), %rsi
 3302      000000
 3303 27d6 4889C7   		movq	%rax, %rdi
 3304 27d9 E8000000 		call	errPrefix@PLT
 3304      00
 3305 27de C78514FF 		movl	$1, -236(%rbp)
 3305      FFFF0100 
 3305      0000
 3306 27e8 E99A0400 		jmp	.L129
 3306      00
 3307              	.L214:
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 636:svf2csvf.c    **** 						csvfBuf, tmpBody1.data, tmpBody2.data, (uint32)tmpBody2.length, error);
 3308              		.loc 1 636 0 is_stmt 1
 3309 27ed 488B45C8 		movq	-56(%rbp), %rax
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 3310              		.loc 1 635 0
 3311 27f1 89C1     		movl	%eax, %ecx
 3312              		.loc 1 636 0
 3313 27f3 488B55C0 		movq	-64(%rbp), %rdx
 3314 27f7 488B75A0 		movq	-96(%rbp), %rsi
 635:svf2csvf.c    **** 					fStatus = appendSwappedAndInterleaved(
 3315              		.loc 1 635 0
 3316 27fb 488BBDE8 		movq	-280(%rbp), %rdi
 3316      FEFFFF
 3317 2802 488B85F8 		movq	-264(%rbp), %rax
 3317      FEFFFF
 3318 2809 4989F8   		movq	%rdi, %r8
 3319 280c 4889C7   		movq	%rax, %rdi
 3320 280f E84BE7FF 		call	appendSwappedAndInterleaved
 3320      FF
 3321 2814 898524FF 		movl	%eax, -220(%rbp)
 3321      FFFF
 637:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3322              		.loc 1 637 0
 3323 281a 83BD24FF 		cmpl	$0, -220(%rbp)
 3323      FFFF00
 3324 2821 7427     		je	.L209
 3325              		.loc 1 637 0 is_stmt 0 discriminator 1
 3326 2823 488B85E8 		movq	-280(%rbp), %rax
 3326      FEFFFF
 3327 282a 488D3500 		leaq	.LC16(%rip), %rsi
 3327      000000
 3328 2831 4889C7   		movq	%rax, %rdi
 3329 2834 E8000000 		call	errPrefix@PLT
 3329      00
 3330 2839 8B8524FF 		movl	-220(%rbp), %eax
 3330      FFFF
 3331 283f 898514FF 		movl	%eax, -236(%rbp)
 3331      FFFF
 3332 2845 E93D0400 		jmp	.L129
 3332      00
 3333              	.L209:
 638:svf2csvf.c    **** 				}
 639:svf2csvf.c    **** 				break;
 3334              		.loc 1 639 0 is_stmt 1
 3335 284a 90       		nop
 3336              	.L185:
 3337              	.LBE6:
 3338 284b E9080400 		jmp	.L215
 3338      00
 3339              	.L184:
 640:svf2csvf.c    **** 			}
 641:svf2csvf.c    **** 		} else {
 642:svf2csvf.c    **** 			switch ( op ) {
 3340              		.loc 1 642 0
 3341 2850 8B8518FF 		movl	-232(%rbp), %eax
 3341      FFFF
 3342 2856 83F853   		cmpl	$83, %eax
 3343 2859 0F84FC00 		je	.L216
 3343      0000
 3344 285f 83F854   		cmpl	$84, %eax
 3345 2862 747F     		je	.L217
 3346 2864 83F848   		cmpl	$72, %eax
 3347 2867 7405     		je	.L218
 3348              	.LBE4:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 3349              		.loc 1 461 0
 3350 2869 E9190400 		jmp	.L129
 3350      00
 3351              	.L218:
 3352              	.LBB7:
 643:svf2csvf.c    **** 			case HEAD:
 644:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnHead, length, tdi, tdo, mask, error);
 3353              		.loc 1 644 0
 3354 286e 488B8508 		movq	-248(%rbp), %rax
 3354      FFFFFF
 3355 2875 488D7868 		leaq	104(%rax), %rdi
 3356 2879 4C8B85E8 		movq	-280(%rbp), %r8
 3356      FEFFFF
 3357 2880 488BB560 		movq	-160(%rbp), %rsi
 3357      FFFFFF
 3358 2887 488B8D58 		movq	-168(%rbp), %rcx
 3358      FFFFFF
 3359 288e 488B9550 		movq	-176(%rbp), %rdx
 3359      FFFFFF
 3360 2895 8B8520FF 		movl	-224(%rbp), %eax
 3360      FFFF
 3361 289b 4D89C1   		movq	%r8, %r9
 3362 289e 4989F0   		movq	%rsi, %r8
 3363 28a1 89C6     		movl	%eax, %esi
 3364 28a3 E8E0E3FF 		call	processLine
 3364      FF
 3365 28a8 898524FF 		movl	%eax, -220(%rbp)
 3365      FFFF
 645:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3366              		.loc 1 645 0
 3367 28ae 83BD24FF 		cmpl	$0, -220(%rbp)
 3367      FFFF00
 3368 28b5 7427     		je	.L219
 3369              		.loc 1 645 0 is_stmt 0 discriminator 1
 3370 28b7 488B85E8 		movq	-280(%rbp), %rax
 3370      FEFFFF
 3371 28be 488D3500 		leaq	.LC16(%rip), %rsi
 3371      000000
 3372 28c5 4889C7   		movq	%rax, %rdi
 3373 28c8 E8000000 		call	errPrefix@PLT
 3373      00
 3374 28cd 8B8524FF 		movl	-220(%rbp), %eax
 3374      FFFF
 3375 28d3 898514FF 		movl	%eax, -236(%rbp)
 3375      FFFF
 3376 28d9 E9A90300 		jmp	.L129
 3376      00
 3377              	.L219:
 646:svf2csvf.c    **** 				break;
 3378              		.loc 1 646 0 is_stmt 1
 3379 28de E9750300 		jmp	.L215
 3379      00
 3380              	.L217:
 647:svf2csvf.c    **** 			case TAIL:
 648:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnTail, length, tdi, tdo, mask, error);
 3381              		.loc 1 648 0
 3382 28e3 488B8508 		movq	-248(%rbp), %rax
 3382      FFFFFF
 3383 28ea 488DB808 		leaq	520(%rax), %rdi
 3383      020000
 3384 28f1 4C8B85E8 		movq	-280(%rbp), %r8
 3384      FEFFFF
 3385 28f8 488BB560 		movq	-160(%rbp), %rsi
 3385      FFFFFF
 3386 28ff 488B8D58 		movq	-168(%rbp), %rcx
 3386      FFFFFF
 3387 2906 488B9550 		movq	-176(%rbp), %rdx
 3387      FFFFFF
 3388 290d 8B8520FF 		movl	-224(%rbp), %eax
 3388      FFFF
 3389 2913 4D89C1   		movq	%r8, %r9
 3390 2916 4989F0   		movq	%rsi, %r8
 3391 2919 89C6     		movl	%eax, %esi
 3392 291b E868E3FF 		call	processLine
 3392      FF
 3393 2920 898524FF 		movl	%eax, -220(%rbp)
 3393      FFFF
 649:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3394              		.loc 1 649 0
 3395 2926 83BD24FF 		cmpl	$0, -220(%rbp)
 3395      FFFF00
 3396 292d 7427     		je	.L220
 3397              		.loc 1 649 0 is_stmt 0 discriminator 1
 3398 292f 488B85E8 		movq	-280(%rbp), %rax
 3398      FEFFFF
 3399 2936 488D3500 		leaq	.LC16(%rip), %rsi
 3399      000000
 3400 293d 4889C7   		movq	%rax, %rdi
 3401 2940 E8000000 		call	errPrefix@PLT
 3401      00
 3402 2945 8B8524FF 		movl	-220(%rbp), %eax
 3402      FFFF
 3403 294b 898514FF 		movl	%eax, -236(%rbp)
 3403      FFFF
 3404 2951 E9310300 		jmp	.L129
 3404      00
 3405              	.L220:
 650:svf2csvf.c    **** 				break;
 3406              		.loc 1 650 0 is_stmt 1
 3407 2956 E9FD0200 		jmp	.L215
 3407      00
 3408              	.L216:
 651:svf2csvf.c    **** 			case BODY:
 652:svf2csvf.c    **** 				fStatus = processLine(&cxt->insnBody, length, tdi, tdo, mask, error);
 3409              		.loc 1 652 0
 3410 295b 488B8508 		movq	-248(%rbp), %rax
 3410      FFFFFF
 3411 2962 488DB838 		leaq	312(%rax), %rdi
 3411      010000
 3412 2969 4C8B85E8 		movq	-280(%rbp), %r8
 3412      FEFFFF
 3413 2970 488BB560 		movq	-160(%rbp), %rsi
 3413      FFFFFF
 3414 2977 488B8D58 		movq	-168(%rbp), %rcx
 3414      FFFFFF
 3415 297e 488B9550 		movq	-176(%rbp), %rdx
 3415      FFFFFF
 3416 2985 8B8520FF 		movl	-224(%rbp), %eax
 3416      FFFF
 3417 298b 4D89C1   		movq	%r8, %r9
 3418 298e 4989F0   		movq	%rsi, %r8
 3419 2991 89C6     		movl	%eax, %esi
 3420 2993 E8F0E2FF 		call	processLine
 3420      FF
 3421 2998 898524FF 		movl	%eax, -220(%rbp)
 3421      FFFF
 653:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3422              		.loc 1 653 0
 3423 299e 83BD24FF 		cmpl	$0, -220(%rbp)
 3423      FFFF00
 3424 29a5 7427     		je	.L221
 3425              		.loc 1 653 0 is_stmt 0 discriminator 1
 3426 29a7 488B85E8 		movq	-280(%rbp), %rax
 3426      FEFFFF
 3427 29ae 488D3500 		leaq	.LC16(%rip), %rsi
 3427      000000
 3428 29b5 4889C7   		movq	%rax, %rdi
 3429 29b8 E8000000 		call	errPrefix@PLT
 3429      00
 3430 29bd 8B8524FF 		movl	-220(%rbp), %eax
 3430      FFFF
 3431 29c3 898514FF 		movl	%eax, -236(%rbp)
 3431      FFFF
 3432 29c9 E9B90200 		jmp	.L129
 3432      00
 3433              	.L221:
 654:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpHead, &cxt->insnHead.tdi, error);
 3434              		.loc 1 654 0 is_stmt 1
 3435 29ce 488B8508 		movq	-248(%rbp), %rax
 3435      FFFFFF
 3436 29d5 488D4870 		leaq	112(%rax), %rcx
 3437 29d9 488B95E8 		movq	-280(%rbp), %rdx
 3437      FEFFFF
 3438 29e0 488D4580 		leaq	-128(%rbp), %rax
 3439 29e4 4889CE   		movq	%rcx, %rsi
 3440 29e7 4889C7   		movq	%rax, %rdi
 3441 29ea E8000000 		call	bufDeepCopy@PLT
 3441      00
 3442 29ef 89851CFF 		movl	%eax, -228(%rbp)
 3442      FFFF
 655:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3443              		.loc 1 655 0
 3444 29f5 83BD1CFF 		cmpl	$0, -228(%rbp)
 3444      FFFF00
 3445 29fc 7425     		je	.L222
 3446              		.loc 1 655 0 is_stmt 0 discriminator 1
 3447 29fe 488B85E8 		movq	-280(%rbp), %rax
 3447      FEFFFF
 3448 2a05 488D3500 		leaq	.LC16(%rip), %rsi
 3448      000000
 3449 2a0c 4889C7   		movq	%rax, %rdi
 3450 2a0f E8000000 		call	errPrefix@PLT
 3450      00
 3451 2a14 C78514FF 		movl	$1, -236(%rbp)
 3451      FFFF0100 
 3451      0000
 3452 2a1e E9640200 		jmp	.L129
 3452      00
 3453              	.L222:
 656:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpBody1, &cxt->insnBody.tdi, error);
 3454              		.loc 1 656 0 is_stmt 1
 3455 2a23 488B8508 		movq	-248(%rbp), %rax
 3455      FFFFFF
 3456 2a2a 488D8840 		leaq	320(%rax), %rcx
 3456      010000
 3457 2a31 488B95E8 		movq	-280(%rbp), %rdx
 3457      FEFFFF
 3458 2a38 488D45A0 		leaq	-96(%rbp), %rax
 3459 2a3c 4889CE   		movq	%rcx, %rsi
 3460 2a3f 4889C7   		movq	%rax, %rdi
 3461 2a42 E8000000 		call	bufDeepCopy@PLT
 3461      00
 3462 2a47 89851CFF 		movl	%eax, -228(%rbp)
 3462      FFFF
 657:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3463              		.loc 1 657 0
 3464 2a4d 83BD1CFF 		cmpl	$0, -228(%rbp)
 3464      FFFF00
 3465 2a54 7425     		je	.L223
 3466              		.loc 1 657 0 is_stmt 0 discriminator 1
 3467 2a56 488B85E8 		movq	-280(%rbp), %rax
 3467      FEFFFF
 3468 2a5d 488D3500 		leaq	.LC16(%rip), %rsi
 3468      000000
 3469 2a64 4889C7   		movq	%rax, %rdi
 3470 2a67 E8000000 		call	errPrefix@PLT
 3470      00
 3471 2a6c C78514FF 		movl	$1, -236(%rbp)
 3471      FFFF0100 
 3471      0000
 3472 2a76 E90C0200 		jmp	.L129
 3472      00
 3473              	.L223:
 658:svf2csvf.c    **** 				bStatus = bufDeepCopy(&tmpTail, &cxt->insnTail.tdi, error);
 3474              		.loc 1 658 0 is_stmt 1
 3475 2a7b 488B8508 		movq	-248(%rbp), %rax
 3475      FFFFFF
 3476 2a82 488D8810 		leaq	528(%rax), %rcx
 3476      020000
 3477 2a89 488B95E8 		movq	-280(%rbp), %rdx
 3477      FEFFFF
 3478 2a90 488D45E0 		leaq	-32(%rbp), %rax
 3479 2a94 4889CE   		movq	%rcx, %rsi
 3480 2a97 4889C7   		movq	%rax, %rdi
 3481 2a9a E8000000 		call	bufDeepCopy@PLT
 3481      00
 3482 2a9f 89851CFF 		movl	%eax, -228(%rbp)
 3482      FFFF
 659:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3483              		.loc 1 659 0
 3484 2aa5 83BD1CFF 		cmpl	$0, -228(%rbp)
 3484      FFFF00
 3485 2aac 7425     		je	.L224
 3486              		.loc 1 659 0 is_stmt 0 discriminator 1
 3487 2aae 488B85E8 		movq	-280(%rbp), %rax
 3487      FEFFFF
 3488 2ab5 488D3500 		leaq	.LC16(%rip), %rsi
 3488      000000
 3489 2abc 4889C7   		movq	%rax, %rdi
 3490 2abf E8000000 		call	errPrefix@PLT
 3490      00
 3491 2ac4 C78514FF 		movl	$1, -236(%rbp)
 3491      FFFF0100 
 3491      0000
 3492 2ace E9B40100 		jmp	.L129
 3492      00
 3493              	.L224:
 660:svf2csvf.c    **** 				fStatus = headTail(
 3494              		.loc 1 660 0 is_stmt 1
 3495 2ad3 488B8508 		movq	-248(%rbp), %rax
 3495      FFFFFF
 3496 2ada 448B8808 		movl	520(%rax), %r9d
 3496      020000
 3497 2ae1 488B8508 		movq	-248(%rbp), %rax
 3497      FFFFFF
 3498 2ae8 448B4068 		movl	104(%rax), %r8d
 3499 2aec 488B8508 		movq	-248(%rbp), %rax
 3499      FFFFFF
 3500 2af3 8B883801 		movl	312(%rax), %ecx
 3500      0000
 3501 2af9 488D55E0 		leaq	-32(%rbp), %rdx
 3502 2afd 488D7580 		leaq	-128(%rbp), %rsi
 3503 2b01 488D45A0 		leaq	-96(%rbp), %rax
 3504 2b05 488BBDE8 		movq	-280(%rbp), %rdi
 3504      FEFFFF
 3505 2b0c 48893C24 		movq	%rdi, (%rsp)
 3506 2b10 4889C7   		movq	%rax, %rdi
 3507 2b13 E8000000 		call	headTail@PLT
 3507      00
 3508 2b18 898524FF 		movl	%eax, -220(%rbp)
 3508      FFFF
 661:svf2csvf.c    **** 					&tmpBody1, &tmpHead, &tmpTail,
 662:svf2csvf.c    **** 					cxt->insnBody.numBits, cxt->insnHead.numBits, cxt->insnTail.numBits,
 663:svf2csvf.c    **** 					error);
 664:svf2csvf.c    **** 				cxt->numCommands++;
 3509              		.loc 1 664 0
 3510 2b1e 488B8508 		movq	-248(%rbp), %rax
 3510      FFFFFF
 3511 2b25 8B809C02 		movl	668(%rax), %eax
 3511      0000
 3512 2b2b 8D5001   		leal	1(%rax), %edx
 3513 2b2e 488B8508 		movq	-248(%rbp), %rax
 3513      FFFFFF
 3514 2b35 89909C02 		movl	%edx, 668(%rax)
 3514      0000
 665:svf2csvf.c    **** 				bStatus = bufAppendByte(csvfBuf, XSIR, error);
 3515              		.loc 1 665 0
 3516 2b3b 488B95E8 		movq	-280(%rbp), %rdx
 3516      FEFFFF
 3517 2b42 488B85F8 		movq	-264(%rbp), %rax
 3517      FEFFFF
 3518 2b49 BE020000 		movl	$2, %esi
 3518      00
 3519 2b4e 4889C7   		movq	%rax, %rdi
 3520 2b51 E8000000 		call	bufAppendByte@PLT
 3520      00
 3521 2b56 89851CFF 		movl	%eax, -228(%rbp)
 3521      FFFF
 666:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3522              		.loc 1 666 0
 3523 2b5c 83BD1CFF 		cmpl	$0, -228(%rbp)
 3523      FFFF00
 3524 2b63 7425     		je	.L225
 3525              		.loc 1 666 0 is_stmt 0 discriminator 1
 3526 2b65 488B85E8 		movq	-280(%rbp), %rax
 3526      FEFFFF
 3527 2b6c 488D3500 		leaq	.LC16(%rip), %rsi
 3527      000000
 3528 2b73 4889C7   		movq	%rax, %rdi
 3529 2b76 E8000000 		call	errPrefix@PLT
 3529      00
 3530 2b7b C78514FF 		movl	$1, -236(%rbp)
 3530      FFFF0100 
 3530      0000
 3531 2b85 E9FD0000 		jmp	.L129
 3531      00
 3532              	.L225:
 667:svf2csvf.c    **** 				bStatus = bufAppendByte(csvfBuf, (uint8)(cxt->insnBody.numBits + cxt->insnHead.numBits + cxt->i
 3533              		.loc 1 667 0 is_stmt 1
 3534 2b8a 488B8508 		movq	-248(%rbp), %rax
 3534      FFFFFF
 3535 2b91 8B803801 		movl	312(%rax), %eax
 3535      0000
 3536 2b97 89C2     		movl	%eax, %edx
 3537 2b99 488B8508 		movq	-248(%rbp), %rax
 3537      FFFFFF
 3538 2ba0 8B4068   		movl	104(%rax), %eax
 3539 2ba3 01C2     		addl	%eax, %edx
 3540 2ba5 488B8508 		movq	-248(%rbp), %rax
 3540      FFFFFF
 3541 2bac 8B800802 		movl	520(%rax), %eax
 3541      0000
 3542 2bb2 01D0     		addl	%edx, %eax
 3543 2bb4 0FB6C8   		movzbl	%al, %ecx
 3544 2bb7 488B95E8 		movq	-280(%rbp), %rdx
 3544      FEFFFF
 3545 2bbe 488B85F8 		movq	-264(%rbp), %rax
 3545      FEFFFF
 3546 2bc5 89CE     		movl	%ecx, %esi
 3547 2bc7 4889C7   		movq	%rax, %rdi
 3548 2bca E8000000 		call	bufAppendByte@PLT
 3548      00
 3549 2bcf 89851CFF 		movl	%eax, -228(%rbp)
 3549      FFFF
 668:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "parseLine()");
 3550              		.loc 1 668 0
 3551 2bd5 83BD1CFF 		cmpl	$0, -228(%rbp)
 3551      FFFF00
 3552 2bdc 7425     		je	.L226
 3553              		.loc 1 668 0 is_stmt 0 discriminator 1
 3554 2bde 488B85E8 		movq	-280(%rbp), %rax
 3554      FEFFFF
 3555 2be5 488D3500 		leaq	.LC16(%rip), %rsi
 3555      000000
 3556 2bec 4889C7   		movq	%rax, %rdi
 3557 2bef E8000000 		call	errPrefix@PLT
 3557      00
 3558 2bf4 C78514FF 		movl	$1, -236(%rbp)
 3558      FFFF0100 
 3558      0000
 3559 2bfe E9840000 		jmp	.L129
 3559      00
 3560              	.L226:
 669:svf2csvf.c    **** 				fStatus = appendSwapped(csvfBuf, tmpBody1.data, (uint32)tmpBody1.length, error);
 3561              		.loc 1 669 0 is_stmt 1
 3562 2c03 488B45A8 		movq	-88(%rbp), %rax
 3563 2c07 89C2     		movl	%eax, %edx
 3564 2c09 488B75A0 		movq	-96(%rbp), %rsi
 3565 2c0d 488B8DE8 		movq	-280(%rbp), %rcx
 3565      FEFFFF
 3566 2c14 488B85F8 		movq	-264(%rbp), %rax
 3566      FEFFFF
 3567 2c1b 4889C7   		movq	%rax, %rdi
 3568 2c1e E82FE4FF 		call	appendSwapped
 3568      FF
 3569 2c23 898524FF 		movl	%eax, -220(%rbp)
 3569      FFFF
 670:svf2csvf.c    **** 				CHECK_STATUS(fStatus, fStatus, cleanup, "parseLine()");
 3570              		.loc 1 670 0
 3571 2c29 83BD24FF 		cmpl	$0, -220(%rbp)
 3571      FFFF00
 3572 2c30 7425     		je	.L227
 3573              		.loc 1 670 0 is_stmt 0 discriminator 1
 3574 2c32 488B85E8 		movq	-280(%rbp), %rax
 3574      FEFFFF
 3575 2c39 488D3500 		leaq	.LC16(%rip), %rsi
 3575      000000
 3576 2c40 4889C7   		movq	%rax, %rdi
 3577 2c43 E8000000 		call	errPrefix@PLT
 3577      00
 3578 2c48 8B8524FF 		movl	-220(%rbp), %eax
 3578      FFFF
 3579 2c4e 898514FF 		movl	%eax, -236(%rbp)
 3579      FFFF
 3580 2c54 90       		nop
 3581 2c55 EB30     		jmp	.L129
 3582              	.L227:
 671:svf2csvf.c    **** 				break;
 3583              		.loc 1 671 0 is_stmt 1
 3584 2c57 90       		nop
 3585              	.L215:
 3586              	.LBE7:
 461:svf2csvf.c    **** 		// HIR/HDR, TIR/TDR, SIR/SDR are of the form "**R <length> [TDI (<tdi>)] [TDO (<tdo>)] [MASK (<ma
 3587              		.loc 1 461 0 discriminator 1
 3588 2c58 EB2D     		jmp	.L129
 3589              	.L131:
 672:svf2csvf.c    **** 			}
 673:svf2csvf.c    **** 		}
 674:svf2csvf.c    **** 	} else {
 675:svf2csvf.c    **** 		CHECK_STATUS(
 3590              		.loc 1 675 0 discriminator 1
 3591 2c5a 488B9568 		movq	-152(%rbp), %rdx
 3591      FFFFFF
 3592 2c61 488B85E8 		movq	-280(%rbp), %rax
 3592      FEFFFF
 3593 2c68 488D3500 		leaq	.LC26(%rip), %rsi
 3593      000000
 3594 2c6f 4889C7   		movq	%rax, %rdi
 3595 2c72 B8000000 		movl	$0, %eax
 3595      00
 3596 2c77 E8000000 		call	errRender@PLT
 3596      00
 3597 2c7c C78514FF 		movl	$10, -236(%rbp)
 3597      FFFF0A00 
 3597      0000
 3598 2c86 90       		nop
 3599              	.L129:
 676:svf2csvf.c    **** 			true, FL_SVF_PARSE_ERR, cleanup,
 677:svf2csvf.c    **** 			"parseLine(): Unrecognised command \"%s\"\n", line);
 678:svf2csvf.c    **** 	}
 679:svf2csvf.c    **** cleanup:
 680:svf2csvf.c    **** 	bufDestroy(&tmpHead);
 3600              		.loc 1 680 0
 3601 2c87 488D4580 		leaq	-128(%rbp), %rax
 3602 2c8b 4889C7   		movq	%rax, %rdi
 3603 2c8e E8000000 		call	bufDestroy@PLT
 3603      00
 681:svf2csvf.c    **** 	bufDestroy(&tmpBody1);
 3604              		.loc 1 681 0
 3605 2c93 488D45A0 		leaq	-96(%rbp), %rax
 3606 2c97 4889C7   		movq	%rax, %rdi
 3607 2c9a E8000000 		call	bufDestroy@PLT
 3607      00
 682:svf2csvf.c    **** 	bufDestroy(&tmpBody2);
 3608              		.loc 1 682 0
 3609 2c9f 488D45C0 		leaq	-64(%rbp), %rax
 3610 2ca3 4889C7   		movq	%rax, %rdi
 3611 2ca6 E8000000 		call	bufDestroy@PLT
 3611      00
 683:svf2csvf.c    **** 	bufDestroy(&tmpTail);
 3612              		.loc 1 683 0
 3613 2cab 488D45E0 		leaq	-32(%rbp), %rax
 3614 2caf 4889C7   		movq	%rax, %rdi
 3615 2cb2 E8000000 		call	bufDestroy@PLT
 3615      00
 684:svf2csvf.c    **** 	return retVal;
 3616              		.loc 1 684 0
 3617 2cb7 8B8514FF 		movl	-236(%rbp), %eax
 3617      FFFF
 685:svf2csvf.c    **** }
 3618              		.loc 1 685 0
 3619 2cbd C9       		leave
 3620              		.cfi_def_cfa 7, 8
 3621 2cbe C3       		ret
 3622              		.cfi_endproc
 3623              	.LFE18:
 3625              		.section	.rodata
 3626              	.LC27:
 3627 02c8 58434F4D 		.string	"XCOMPLETE"
 3627      504C4554 
 3627      4500
 3628              	.LC28:
 3629 02d2 5854444F 		.string	"XTDOMASK"
 3629      4D41534B 
 3629      00
 3630              	.LC29:
 3631 02db 58534952 		.string	"XSIR"
 3631      00
 3632              	.LC30:
 3633 02e0 58534452 		.string	"XSDR"
 3633      00
 3634              	.LC31:
 3635 02e5 5852554E 		.string	"XRUNTEST"
 3635      54455354 
 3635      00
 3636              	.LC32:
 3637 02ee 494C4C45 		.string	"ILLEGAL"
 3637      47414C00 
 3638              	.LC33:
 3639 02f6 58524550 		.string	"XREPEAT"
 3639      45415400 
 3640              	.LC34:
 3641 02fe 58534452 		.string	"XSDRSIZE"
 3641      53495A45 
 3641      00
 3642              	.LC35:
 3643 0307 58534452 		.string	"XSDRTDO"
 3643      54444F00 
 3644              	.LC36:
 3645 030f 58534554 		.string	"XSETSDRMASKS"
 3645      5344524D 
 3645      41534B53 
 3645      00
 3646              	.LC37:
 3647 031c 58534452 		.string	"XSDRINC"
 3647      494E4300 
 3648              	.LC38:
 3649 0324 58534452 		.string	"XSDRB"
 3649      4200
 3650              	.LC39:
 3651 032a 58534452 		.string	"XSDRC"
 3651      4300
 3652              	.LC40:
 3653 0330 58534452 		.string	"XSDRE"
 3653      4500
 3654              	.LC41:
 3655 0336 58534452 		.string	"XSDRTDOB"
 3655      54444F42 
 3655      00
 3656              	.LC42:
 3657 033f 58534452 		.string	"XSDRTDOC"
 3657      54444F43 
 3657      00
 3658              	.LC43:
 3659 0348 58534452 		.string	"XSDRTDOE"
 3659      54444F45 
 3659      00
 3660              	.LC44:
 3661 0351 58535441 		.string	"XSTATE"
 3661      544500
 3662              	.LC45:
 3663 0358 58454E44 		.string	"XENDIR"
 3663      495200
 3664              	.LC46:
 3665 035f 58454E44 		.string	"XENDDR"
 3665      445200
 3666              	.LC47:
 3667 0366 58534952 		.string	"XSIR2"
 3667      3200
 3668              	.LC48:
 3669 036c 58434F4D 		.string	"XCOMMENT"
 3669      4D454E54 
 3669      00
 3670              	.LC49:
 3671 0375 58574149 		.string	"XWAIT"
 3671      5400
 3672              		.section	.data.rel.ro.local,"aw",@progbits
 3673              		.align 32
 3676              	cmdNames:
 3677 0000 00000000 		.quad	.LC27
 3677      00000000 
 3678 0008 00000000 		.quad	.LC28
 3678      00000000 
 3679 0010 00000000 		.quad	.LC29
 3679      00000000 
 3680 0018 00000000 		.quad	.LC30
 3680      00000000 
 3681 0020 00000000 		.quad	.LC31
 3681      00000000 
 3682 0028 00000000 		.quad	.LC32
 3682      00000000 
 3683 0030 00000000 		.quad	.LC32
 3683      00000000 
 3684 0038 00000000 		.quad	.LC33
 3684      00000000 
 3685 0040 00000000 		.quad	.LC34
 3685      00000000 
 3686 0048 00000000 		.quad	.LC35
 3686      00000000 
 3687 0050 00000000 		.quad	.LC36
 3687      00000000 
 3688 0058 00000000 		.quad	.LC37
 3688      00000000 
 3689 0060 00000000 		.quad	.LC38
 3689      00000000 
 3690 0068 00000000 		.quad	.LC39
 3690      00000000 
 3691 0070 00000000 		.quad	.LC40
 3691      00000000 
 3692 0078 00000000 		.quad	.LC41
 3692      00000000 
 3693 0080 00000000 		.quad	.LC42
 3693      00000000 
 3694 0088 00000000 		.quad	.LC43
 3694      00000000 
 3695 0090 00000000 		.quad	.LC44
 3695      00000000 
 3696 0098 00000000 		.quad	.LC45
 3696      00000000 
 3697 00a0 00000000 		.quad	.LC46
 3697      00000000 
 3698 00a8 00000000 		.quad	.LC47
 3698      00000000 
 3699 00b0 00000000 		.quad	.LC48
 3699      00000000 
 3700 00b8 00000000 		.quad	.LC49
 3700      00000000 
 3701              		.text
 3702              		.globl	getCmdName
 3704              	getCmdName:
 3705              	.LFB19:
 686:svf2csvf.c    **** 
 687:svf2csvf.c    **** static const char *const cmdNames[] = {
 688:svf2csvf.c    **** 	"XCOMPLETE",    // 0
 689:svf2csvf.c    **** 	"XTDOMASK",     // 1
 690:svf2csvf.c    **** 	"XSIR",         // 2
 691:svf2csvf.c    **** 	"XSDR",         // 3
 692:svf2csvf.c    **** 	"XRUNTEST",     // 4
 693:svf2csvf.c    **** 	"ILLEGAL",      // 5
 694:svf2csvf.c    **** 	"ILLEGAL",      // 6
 695:svf2csvf.c    **** 	"XREPEAT",      // 7
 696:svf2csvf.c    **** 	"XSDRSIZE",     // 8
 697:svf2csvf.c    **** 	"XSDRTDO",      // 9
 698:svf2csvf.c    **** 	"XSETSDRMASKS", // A
 699:svf2csvf.c    **** 	"XSDRINC",      // B
 700:svf2csvf.c    **** 	"XSDRB",        // C
 701:svf2csvf.c    **** 	"XSDRC",        // D
 702:svf2csvf.c    **** 	"XSDRE",        // E
 703:svf2csvf.c    **** 	"XSDRTDOB",     // F
 704:svf2csvf.c    **** 	"XSDRTDOC",     // 10
 705:svf2csvf.c    **** 	"XSDRTDOE",     // 11
 706:svf2csvf.c    **** 	"XSTATE",       // 12
 707:svf2csvf.c    **** 	"XENDIR",       // 13
 708:svf2csvf.c    **** 	"XENDDR",       // 14
 709:svf2csvf.c    **** 	"XSIR2",        // 15
 710:svf2csvf.c    **** 	"XCOMMENT",     // 16
 711:svf2csvf.c    **** 	"XWAIT"         // 17
 712:svf2csvf.c    **** };
 713:svf2csvf.c    **** 
 714:svf2csvf.c    **** const char *getCmdName(CmdPtr cmd) {
 3706              		.loc 1 714 0
 3707              		.cfi_startproc
 3708 2cbf 55       		pushq	%rbp
 3709              		.cfi_def_cfa_offset 16
 3710              		.cfi_offset 6, -16
 3711 2cc0 4889E5   		movq	%rsp, %rbp
 3712              		.cfi_def_cfa_register 6
 3713 2cc3 48897DE8 		movq	%rdi, -24(%rbp)
 715:svf2csvf.c    **** 	const uint8 op = *cmd;
 3714              		.loc 1 715 0
 3715 2cc7 488B45E8 		movq	-24(%rbp), %rax
 3716 2ccb 0FB600   		movzbl	(%rax), %eax
 3717 2cce 8845FF   		movb	%al, -1(%rbp)
 716:svf2csvf.c    **** 	return cmdNames[op];
 3718              		.loc 1 716 0
 3719 2cd1 0FB645FF 		movzbl	-1(%rbp), %eax
 3720 2cd5 4898     		cltq
 3721 2cd7 488D14C5 		leaq	0(,%rax,8), %rdx
 3721      00000000 
 3722 2cdf 488D0500 		leaq	cmdNames(%rip), %rax
 3722      000000
 3723 2ce6 488B0402 		movq	(%rdx,%rax), %rax
 717:svf2csvf.c    **** }
 3724              		.loc 1 717 0
 3725 2cea 5D       		popq	%rbp
 3726              		.cfi_def_cfa 7, 8
 3727 2ceb C3       		ret
 3728              		.cfi_endproc
 3729              	.LFE19:
 3731              		.section	.rodata
 3734              	xrtZero:
 3735 037b 04       		.byte	4
 3736 037c 00       		.byte	0
 3737 037d 00       		.byte	0
 3738 037e 00       		.byte	0
 3739 037f 00       		.byte	0
 3740              		.align 4
 3743              	illegal32:
 3744 0380 FFFFFFFF 		.long	-1
 3745              		.text
 3746              		.globl	processIndex
 3748              	processIndex:
 3749              	.LFB20:
 718:svf2csvf.c    **** 
 719:svf2csvf.c    **** #define SET_BYTES(rt) rt.b[0] = (*ptr)[1]; rt.b[1] = (*ptr)[2]; rt.b[2] = (*ptr)[3]; rt.b[3] = (*pt
 720:svf2csvf.c    **** static const uint8 xrtZero[] = {XRUNTEST, 0, 0, 0, 0};
 721:svf2csvf.c    **** static const uint32 illegal32 = U32MAX;
 722:svf2csvf.c    **** 
 723:svf2csvf.c    **** void processIndex(const CmdPtr *srcIndex, CmdPtr *dstIndex) {
 3750              		.loc 1 723 0
 3751              		.cfi_startproc
 3752 2cec 55       		pushq	%rbp
 3753              		.cfi_def_cfa_offset 16
 3754              		.cfi_offset 6, -16
 3755 2ced 4889E5   		movq	%rsp, %rbp
 3756              		.cfi_def_cfa_register 6
 3757 2cf0 4883EC40 		subq	$64, %rsp
 3758 2cf4 48897DC8 		movq	%rdi, -56(%rbp)
 3759 2cf8 488975C0 		movq	%rsi, -64(%rbp)
 3760              		.loc 1 723 0
 3761 2cfc 64488B04 		movq	%fs:40, %rax
 3761      25280000 
 3761      00
 3762 2d05 488945F8 		movq	%rax, -8(%rbp)
 3763 2d09 31C0     		xorl	%eax, %eax
 724:svf2csvf.c    **** 	union {
 725:svf2csvf.c    **** 		uint32 i;
 726:svf2csvf.c    **** 		uint8 b[4];
 727:svf2csvf.c    **** 	} oldrt, newrt;
 728:svf2csvf.c    **** 	const CmdPtr *ptr = srcIndex;
 3764              		.loc 1 728 0
 3765 2d0b 488B45C8 		movq	-56(%rbp), %rax
 3766 2d0f 488945D8 		movq	%rax, -40(%rbp)
 729:svf2csvf.c    **** 	uint8 thisCmd = **ptr;
 3767              		.loc 1 729 0
 3768 2d13 488B45D8 		movq	-40(%rbp), %rax
 3769 2d17 488B00   		movq	(%rax), %rax
 3770 2d1a 0FB600   		movzbl	(%rax), %eax
 3771 2d1d 8845D7   		movb	%al, -41(%rbp)
 730:svf2csvf.c    **** 	oldrt.i = illegal32;
 3772              		.loc 1 730 0
 3773 2d20 B8FFFFFF 		movl	$-1, %eax
 3773      FF
 3774 2d25 8945E0   		movl	%eax, -32(%rbp)
 731:svf2csvf.c    **** 	newrt.i = 0;
 3775              		.loc 1 731 0
 3776 2d28 C745F000 		movl	$0, -16(%rbp)
 3776      000000
 732:svf2csvf.c    **** 	while ( thisCmd != XCOMPLETE ) {
 3777              		.loc 1 732 0
 3778 2d2f E9550100 		jmp	.L234
 3778      00
 3779              	.L246:
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3780              		.loc 1 733 0
 3781 2d34 EB12     		jmp	.L235
 3782              	.L237:
 734:svf2csvf.c    **** 			thisCmd = **++ptr;
 3783              		.loc 1 734 0
 3784 2d36 488345D8 		addq	$8, -40(%rbp)
 3784      08
 3785 2d3b 488B45D8 		movq	-40(%rbp), %rax
 3786 2d3f 488B00   		movq	(%rax), %rax
 3787 2d42 0FB600   		movzbl	(%rax), %eax
 3788 2d45 8845D7   		movb	%al, -41(%rbp)
 3789              	.L235:
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3790              		.loc 1 733 0 discriminator 1
 3791 2d48 807DD700 		cmpb	$0, -41(%rbp)
 3792 2d4c 7412     		je	.L236
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3793              		.loc 1 733 0 is_stmt 0 discriminator 2
 3794 2d4e 807DD703 		cmpb	$3, -41(%rbp)
 3795 2d52 740C     		je	.L236
 733:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3796              		.loc 1 733 0 discriminator 1
 3797 2d54 807DD709 		cmpb	$9, -41(%rbp)
 3798 2d58 7406     		je	.L236
 3799 2d5a 807DD702 		cmpb	$2, -41(%rbp)
 3800 2d5e 75D6     		jne	.L237
 3801              	.L236:
 735:svf2csvf.c    **** 		}
 736:svf2csvf.c    **** 		if ( thisCmd != XCOMPLETE ) {
 3802              		.loc 1 736 0 is_stmt 1
 3803 2d60 807DD700 		cmpb	$0, -41(%rbp)
 3804 2d64 7412     		je	.L238
 737:svf2csvf.c    **** 			thisCmd = **++ptr;  // now points at command AFTER shift command
 3805              		.loc 1 737 0
 3806 2d66 488345D8 		addq	$8, -40(%rbp)
 3806      08
 3807 2d6b 488B45D8 		movq	-40(%rbp), %rax
 3808 2d6f 488B00   		movq	(%rax), %rax
 3809 2d72 0FB600   		movzbl	(%rax), %eax
 3810 2d75 8845D7   		movb	%al, -41(%rbp)
 3811              	.L238:
 738:svf2csvf.c    **** 		}
 739:svf2csvf.c    **** 		if ( thisCmd == XRUNTEST ) {
 3812              		.loc 1 739 0
 3813 2d78 807DD704 		cmpb	$4, -41(%rbp)
 3814 2d7c 0F85A600 		jne	.L239
 3814      0000
 740:svf2csvf.c    **** 			// There is an explicit XRUNTEST, so hoist it to the top, maybe...
 741:svf2csvf.c    **** 			SET_BYTES(newrt);
 3815              		.loc 1 741 0
 3816 2d82 488B45D8 		movq	-40(%rbp), %rax
 3817 2d86 488B00   		movq	(%rax), %rax
 3818 2d89 0FB64001 		movzbl	1(%rax), %eax
 3819 2d8d 8845F0   		movb	%al, -16(%rbp)
 3820 2d90 488B45D8 		movq	-40(%rbp), %rax
 3821 2d94 488B00   		movq	(%rax), %rax
 3822 2d97 0FB64002 		movzbl	2(%rax), %eax
 3823 2d9b 8845F1   		movb	%al, -15(%rbp)
 3824 2d9e 488B45D8 		movq	-40(%rbp), %rax
 3825 2da2 488B00   		movq	(%rax), %rax
 3826 2da5 0FB64003 		movzbl	3(%rax), %eax
 3827 2da9 8845F2   		movb	%al, -14(%rbp)
 3828 2dac 488B45D8 		movq	-40(%rbp), %rax
 3829 2db0 488B00   		movq	(%rax), %rax
 3830 2db3 0FB64004 		movzbl	4(%rax), %eax
 3831 2db7 8845F3   		movb	%al, -13(%rbp)
 742:svf2csvf.c    **** 			if ( newrt.i != oldrt.i ) {
 3832              		.loc 1 742 0
 3833 2dba 8B55F0   		movl	-16(%rbp), %edx
 3834 2dbd 8B45E0   		movl	-32(%rbp), %eax
 3835 2dc0 39C2     		cmpl	%eax, %edx
 3836 2dc2 741E     		je	.L240
 743:svf2csvf.c    **** 				*dstIndex++ = *ptr;
 3837              		.loc 1 743 0
 3838 2dc4 488B45C0 		movq	-64(%rbp), %rax
 3839 2dc8 488D5008 		leaq	8(%rax), %rdx
 3840 2dcc 488955C0 		movq	%rdx, -64(%rbp)
 3841 2dd0 488B55D8 		movq	-40(%rbp), %rdx
 3842 2dd4 488B12   		movq	(%rdx), %rdx
 3843 2dd7 488910   		movq	%rdx, (%rax)
 744:svf2csvf.c    **** 				oldrt = newrt;
 3844              		.loc 1 744 0
 3845 2dda 8B45F0   		movl	-16(%rbp), %eax
 3846 2ddd 8945E0   		movl	%eax, -32(%rbp)
 745:svf2csvf.c    **** 			}
 746:svf2csvf.c    **** 
 747:svf2csvf.c    **** 			// ...then copy the commands...
 748:svf2csvf.c    **** 			while ( srcIndex < ptr ) {
 3847              		.loc 1 748 0
 3848 2de0 EB20     		jmp	.L241
 3849              	.L240:
 3850 2de2 EB1E     		jmp	.L241
 3851              	.L242:
 749:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3852              		.loc 1 749 0
 3853 2de4 488B45C0 		movq	-64(%rbp), %rax
 3854 2de8 488D5008 		leaq	8(%rax), %rdx
 3855 2dec 488955C0 		movq	%rdx, -64(%rbp)
 3856 2df0 488B55C8 		movq	-56(%rbp), %rdx
 3857 2df4 488D4A08 		leaq	8(%rdx), %rcx
 3858 2df8 48894DC8 		movq	%rcx, -56(%rbp)
 3859 2dfc 488B12   		movq	(%rdx), %rdx
 3860 2dff 488910   		movq	%rdx, (%rax)
 3861              	.L241:
 748:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3862              		.loc 1 748 0 discriminator 1
 3863 2e02 488B45C8 		movq	-56(%rbp), %rax
 3864 2e06 483B45D8 		cmpq	-40(%rbp), %rax
 3865 2e0a 72D8     		jb	.L242
 750:svf2csvf.c    **** 			}
 751:svf2csvf.c    **** 
 752:svf2csvf.c    **** 			// ...and finally get the next command
 753:svf2csvf.c    **** 			ptr++;  // now points at command after XRUNTEST, ready for next loop
 3866              		.loc 1 753 0
 3867 2e0c 488345D8 		addq	$8, -40(%rbp)
 3867      08
 754:svf2csvf.c    **** 			srcIndex = ptr;
 3868              		.loc 1 754 0
 3869 2e11 488B45D8 		movq	-40(%rbp), %rax
 3870 2e15 488945C8 		movq	%rax, -56(%rbp)
 755:svf2csvf.c    **** 			thisCmd = **ptr;
 3871              		.loc 1 755 0
 3872 2e19 488B45D8 		movq	-40(%rbp), %rax
 3873 2e1d 488B00   		movq	(%rax), %rax
 3874 2e20 0FB600   		movzbl	(%rax), %eax
 3875 2e23 8845D7   		movb	%al, -41(%rbp)
 3876 2e26 EB61     		jmp	.L234
 3877              	.L239:
 756:svf2csvf.c    **** 		} else {
 757:svf2csvf.c    **** 			// There is not an explicit XRUNTEST, meaning it's implicitly zero:
 758:svf2csvf.c    **** 			newrt.i = 0;
 3878              		.loc 1 758 0
 3879 2e28 C745F000 		movl	$0, -16(%rbp)
 3879      000000
 759:svf2csvf.c    **** 			if ( newrt.i != oldrt.i ) {
 3880              		.loc 1 759 0
 3881 2e2f 8B55F0   		movl	-16(%rbp), %edx
 3882 2e32 8B45E0   		movl	-32(%rbp), %eax
 3883 2e35 39C2     		cmpl	%eax, %edx
 3884 2e37 741E     		je	.L243
 760:svf2csvf.c    **** 				*dstIndex++ = xrtZero;
 3885              		.loc 1 760 0
 3886 2e39 488B45C0 		movq	-64(%rbp), %rax
 3887 2e3d 488D5008 		leaq	8(%rax), %rdx
 3888 2e41 488955C0 		movq	%rdx, -64(%rbp)
 3889 2e45 488D1500 		leaq	xrtZero(%rip), %rdx
 3889      000000
 3890 2e4c 488910   		movq	%rdx, (%rax)
 761:svf2csvf.c    **** 				oldrt = newrt;
 3891              		.loc 1 761 0
 3892 2e4f 8B45F0   		movl	-16(%rbp), %eax
 3893 2e52 8945E0   		movl	%eax, -32(%rbp)
 762:svf2csvf.c    **** 			}
 763:svf2csvf.c    **** 
 764:svf2csvf.c    **** 			// Copy the backlog
 765:svf2csvf.c    **** 			while ( srcIndex < ptr ) {
 3894              		.loc 1 765 0
 3895 2e55 EB20     		jmp	.L244
 3896              	.L243:
 3897 2e57 EB1E     		jmp	.L244
 3898              	.L245:
 766:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3899              		.loc 1 766 0
 3900 2e59 488B45C0 		movq	-64(%rbp), %rax
 3901 2e5d 488D5008 		leaq	8(%rax), %rdx
 3902 2e61 488955C0 		movq	%rdx, -64(%rbp)
 3903 2e65 488B55C8 		movq	-56(%rbp), %rdx
 3904 2e69 488D4A08 		leaq	8(%rdx), %rcx
 3905 2e6d 48894DC8 		movq	%rcx, -56(%rbp)
 3906 2e71 488B12   		movq	(%rdx), %rdx
 3907 2e74 488910   		movq	%rdx, (%rax)
 3908              	.L244:
 765:svf2csvf.c    **** 				*dstIndex++ = *srcIndex++;
 3909              		.loc 1 765 0 discriminator 1
 3910 2e77 488B45C8 		movq	-56(%rbp), %rax
 3911 2e7b 483B45D8 		cmpq	-40(%rbp), %rax
 3912 2e7f 72D8     		jb	.L245
 767:svf2csvf.c    **** 			}
 768:svf2csvf.c    **** 			srcIndex = ptr;
 3913              		.loc 1 768 0
 3914 2e81 488B45D8 		movq	-40(%rbp), %rax
 3915 2e85 488945C8 		movq	%rax, -56(%rbp)
 3916              	.L234:
 732:svf2csvf.c    **** 		while ( thisCmd != XCOMPLETE && thisCmd != XSDR && thisCmd != XSDRTDO && thisCmd != XSIR ) {
 3917              		.loc 1 732 0 discriminator 1
 3918 2e89 807DD700 		cmpb	$0, -41(%rbp)
 3919 2e8d 0F85A1FE 		jne	.L246
 3919      FFFF
 769:svf2csvf.c    **** 		}
 770:svf2csvf.c    **** 	}
 771:svf2csvf.c    **** 	*dstIndex = *ptr;
 3920              		.loc 1 771 0
 3921 2e93 488B45D8 		movq	-40(%rbp), %rax
 3922 2e97 488B10   		movq	(%rax), %rdx
 3923 2e9a 488B45C0 		movq	-64(%rbp), %rax
 3924 2e9e 488910   		movq	%rdx, (%rax)
 772:svf2csvf.c    **** }
 3925              		.loc 1 772 0
 3926 2ea1 488B45F8 		movq	-8(%rbp), %rax
 3927 2ea5 64483304 		xorq	%fs:40, %rax
 3927      25280000 
 3927      00
 3928 2eae 7405     		je	.L247
 3929 2eb0 E8000000 		call	__stack_chk_fail@PLT
 3929      00
 3930              	.L247:
 3931 2eb5 C9       		leave
 3932              		.cfi_def_cfa 7, 8
 3933 2eb6 C3       		ret
 3934              		.cfi_endproc
 3935              	.LFE20:
 3937              		.section	.rodata
 3938              	.LC50:
 3939 0384 6275696C 		.string	"buildIndex()"
 3939      64496E64 
 3939      65782829 
 3939      00
 3940 0391 00000000 		.align 8
 3940      000000
 3941              	.LC51:
 3942 0398 6275696C 		.string	"buildIndex(): No XSDRSIZE before shift operation!"
 3942      64496E64 
 3942      65782829 
 3942      3A204E6F 
 3942      20585344 
 3943 03ca 00000000 		.align 8
 3943      0000
 3944              	.LC52:
 3945 03d0 6275696C 		.string	"buildIndex(): Unrecognised CSVF command (cmd=0x%02X, srcOffset=%d)!"
 3945      64496E64 
 3945      65782829 
 3945      3A20556E 
 3945      7265636F 
 3946 0414 00000000 		.align 8
 3947              	.LC53:
 3948 0418 6275696C 		.string	"buildIndex(): Unrecognised CSVF command (cmd=0x%02X)!"
 3948      64496E64 
 3948      65782829 
 3948      3A20556E 
 3948      7265636F 
 3949              		.text
 3950              		.globl	buildIndex
 3952              	buildIndex:
 3953              	.LFB21:
 773:svf2csvf.c    **** 
 774:svf2csvf.c    **** FLStatus buildIndex(struct ParseContext *cxt, struct Buffer *csvfBuf, const char **error) {
 3954              		.loc 1 774 0
 3955              		.cfi_startproc
 3956 2eb7 55       		pushq	%rbp
 3957              		.cfi_def_cfa_offset 16
 3958              		.cfi_offset 6, -16
 3959 2eb8 4889E5   		movq	%rsp, %rbp
 3960              		.cfi_def_cfa_register 6
 3961 2ebb 53       		pushq	%rbx
 3962 2ebc 4881EC88 		subq	$136, %rsp
 3962      000000
 3963              		.cfi_offset 3, -24
 3964 2ec3 48897D88 		movq	%rdi, -120(%rbp)
 3965 2ec7 48897580 		movq	%rsi, -128(%rbp)
 3966 2ecb 48899578 		movq	%rdx, -136(%rbp)
 3966      FFFFFF
 775:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 3967              		.loc 1 775 0
 3968 2ed2 C7459400 		movl	$0, -108(%rbp)
 3968      000000
 776:svf2csvf.c    **** 	const uint8 *const start = csvfBuf->data;
 3969              		.loc 1 776 0
 3970 2ed9 488B4580 		movq	-128(%rbp), %rax
 3971 2edd 488B00   		movq	(%rax), %rax
 3972 2ee0 488945B8 		movq	%rax, -72(%rbp)
 777:svf2csvf.c    **** 	const uint8 *ptr = start;
 3973              		.loc 1 777 0
 3974 2ee4 488B45B8 		movq	-72(%rbp), %rax
 3975 2ee8 488945A8 		movq	%rax, -88(%rbp)
 778:svf2csvf.c    **** 	struct Buffer newBuf = {0,};
 3976              		.loc 1 778 0
 3977 2eec 48C745D0 		movq	$0, -48(%rbp)
 3977      00000000 
 3978 2ef4 48C745D8 		movq	$0, -40(%rbp)
 3978      00000000 
 3979 2efc 48C745E0 		movq	$0, -32(%rbp)
 3979      00000000 
 3980 2f04 48C745E8 		movq	$0, -24(%rbp)
 3980      00000000 
 779:svf2csvf.c    **** 	uint32 numBytes;
 780:svf2csvf.c    **** 	uint8 thisByte = *ptr;
 3981              		.loc 1 780 0
 3982 2f0c 488B45A8 		movq	-88(%rbp), %rax
 3983 2f10 0FB600   		movzbl	(%rax), %eax
 3984 2f13 884593   		movb	%al, -109(%rbp)
 781:svf2csvf.c    **** 	int i = 0;
 3985              		.loc 1 781 0
 3986 2f16 C7459C00 		movl	$0, -100(%rbp)
 3986      000000
 782:svf2csvf.c    **** 	int offset;
 783:svf2csvf.c    **** 	const CmdPtr *cmdPtr;
 784:svf2csvf.c    **** 	BufferStatus bStatus;
 785:svf2csvf.c    **** 	const uint8 **const srcIndex = malloc(sizeof(const uint8*) * cxt->numCommands);
 3987              		.loc 1 785 0
 3988 2f1d 488B4588 		movq	-120(%rbp), %rax
 3989 2f21 8B809C02 		movl	668(%rax), %eax
 3989      0000
 3990 2f27 89C0     		movl	%eax, %eax
 3991 2f29 48C1E003 		salq	$3, %rax
 3992 2f2d 4889C7   		movq	%rax, %rdi
 3993 2f30 E8000000 		call	malloc@PLT
 3993      00
 3994 2f35 488945C0 		movq	%rax, -64(%rbp)
 786:svf2csvf.c    **** 	const uint8 **const dstIndex = malloc(sizeof(const uint8*) * cxt->numCommands * 3 / 2); // abs wor
 3995              		.loc 1 786 0
 3996 2f39 488B4588 		movq	-120(%rbp), %rax
 3997 2f3d 8B809C02 		movl	668(%rax), %eax
 3997      0000
 3998 2f43 89C2     		movl	%eax, %edx
 3999 2f45 4889D0   		movq	%rdx, %rax
 4000 2f48 4801C0   		addq	%rax, %rax
 4001 2f4b 4801D0   		addq	%rdx, %rax
 4002 2f4e 48C1E003 		salq	$3, %rax
 4003 2f52 48D1E8   		shrq	%rax
 4004 2f55 4889C7   		movq	%rax, %rdi
 4005 2f58 E8000000 		call	malloc@PLT
 4005      00
 4006 2f5d 488945C8 		movq	%rax, -56(%rbp)
 787:svf2csvf.c    **** 	CHECK_STATUS(srcIndex == NULL, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4007              		.loc 1 787 0
 4008 2f61 48837DC0 		cmpq	$0, -64(%rbp)
 4008      00
 4009 2f66 7522     		jne	.L249
 4010              		.loc 1 787 0 is_stmt 0 discriminator 1
 4011 2f68 488B8578 		movq	-136(%rbp), %rax
 4011      FFFFFF
 4012 2f6f 488D3500 		leaq	.LC50(%rip), %rsi
 4012      000000
 4013 2f76 4889C7   		movq	%rax, %rdi
 4014 2f79 E8000000 		call	errPrefix@PLT
 4014      00
 4015 2f7e C7459401 		movl	$1, -108(%rbp)
 4015      000000
 4016 2f85 E9510500 		jmp	.L250
 4016      00
 4017              	.L249:
 788:svf2csvf.c    **** 	CHECK_STATUS(dstIndex == NULL, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4018              		.loc 1 788 0 is_stmt 1
 4019 2f8a 48837DC8 		cmpq	$0, -56(%rbp)
 4019      00
 4020 2f8f 7522     		jne	.L251
 4021              		.loc 1 788 0 is_stmt 0 discriminator 1
 4022 2f91 488B8578 		movq	-136(%rbp), %rax
 4022      FFFFFF
 4023 2f98 488D3500 		leaq	.LC50(%rip), %rsi
 4023      000000
 4024 2f9f 4889C7   		movq	%rax, %rdi
 4025 2fa2 E8000000 		call	errPrefix@PLT
 4025      00
 4026 2fa7 C7459401 		movl	$1, -108(%rbp)
 4026      000000
 4027 2fae E9280500 		jmp	.L250
 4027      00
 4028              	.L251:
 789:svf2csvf.c    **** 	bStatus = bufInitialise(&newBuf, csvfBuf->length * 4 / 3, 0x00, error);  // common worst case
 4029              		.loc 1 789 0 is_stmt 1
 4030 2fb3 488B4580 		movq	-128(%rbp), %rax
 4031 2fb7 488B4008 		movq	8(%rax), %rax
 4032 2fbb 48C1E002 		salq	$2, %rax
 4033 2fbf 48BAABAA 		movabsq	$-6148914691236517205, %rdx
 4033      AAAAAAAA 
 4033      AAAA
 4034 2fc9 48F7E2   		mulq	%rdx
 4035 2fcc 4889D6   		movq	%rdx, %rsi
 4036 2fcf 48D1EE   		shrq	%rsi
 4037 2fd2 488B9578 		movq	-136(%rbp), %rdx
 4037      FFFFFF
 4038 2fd9 488D45D0 		leaq	-48(%rbp), %rax
 4039 2fdd 4889D1   		movq	%rdx, %rcx
 4040 2fe0 BA000000 		movl	$0, %edx
 4040      00
 4041 2fe5 4889C7   		movq	%rax, %rdi
 4042 2fe8 E8000000 		call	bufInitialise@PLT
 4042      00
 4043 2fed 8945A0   		movl	%eax, -96(%rbp)
 790:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4044              		.loc 1 790 0
 4045 2ff0 837DA000 		cmpl	$0, -96(%rbp)
 4046 2ff4 7422     		je	.L252
 4047              		.loc 1 790 0 is_stmt 0 discriminator 1
 4048 2ff6 488B8578 		movq	-136(%rbp), %rax
 4048      FFFFFF
 4049 2ffd 488D3500 		leaq	.LC50(%rip), %rsi
 4049      000000
 4050 3004 4889C7   		movq	%rax, %rdi
 4051 3007 E8000000 		call	errPrefix@PLT
 4051      00
 4052 300c C7459401 		movl	$1, -108(%rbp)
 4052      000000
 4053 3013 E9C30400 		jmp	.L250
 4053      00
 4054              	.L252:
 791:svf2csvf.c    **** 	numBytes = illegal32;
 4055              		.loc 1 791 0 is_stmt 1
 4056 3018 C74598FF 		movl	$-1, -104(%rbp)
 4056      FFFFFF
 792:svf2csvf.c    **** 	while ( thisByte != XCOMPLETE ) {
 4057              		.loc 1 792 0
 4058 301f E9820100 		jmp	.L253
 4058      00
 4059              	.L266:
 793:svf2csvf.c    **** 		srcIndex[i++] = ptr++;
 4060              		.loc 1 793 0
 4061 3024 8B459C   		movl	-100(%rbp), %eax
 4062 3027 8D5001   		leal	1(%rax), %edx
 4063 302a 89559C   		movl	%edx, -100(%rbp)
 4064 302d 4898     		cltq
 4065 302f 488D14C5 		leaq	0(,%rax,8), %rdx
 4065      00000000 
 4066 3037 488B45C0 		movq	-64(%rbp), %rax
 4067 303b 488D0C02 		leaq	(%rdx,%rax), %rcx
 4068 303f 488B45A8 		movq	-88(%rbp), %rax
 4069 3043 488D5001 		leaq	1(%rax), %rdx
 4070 3047 488955A8 		movq	%rdx, -88(%rbp)
 4071 304b 488901   		movq	%rax, (%rcx)
 794:svf2csvf.c    **** 		switch ( thisByte ) {
 4072              		.loc 1 794 0
 4073 304e 0FB64593 		movzbl	-109(%rbp), %eax
 4074 3052 83F809   		cmpl	$9, %eax
 4075 3055 0F870801 		ja	.L254
 4075      0000
 4076 305b 89C0     		movl	%eax, %eax
 4077 305d 488D1485 		leaq	0(,%rax,4), %rdx
 4077      00000000 
 4078 3065 488D0500 		leaq	.L256(%rip), %rax
 4078      000000
 4079 306c 8B0402   		movl	(%rdx,%rax), %eax
 4080 306f 4863D0   		movslq	%eax, %rdx
 4081 3072 488D0500 		leaq	.L256(%rip), %rax
 4081      000000
 4082 3079 4801D0   		addq	%rdx, %rax
 4083 307c FFE0     		jmp	*%rax
 4084              		.section	.rodata
 4085 044e 0000     		.align 4
 4086              		.align 4
 4087              	.L256:
 4088 0450 00000000 		.long	.L254-.L256
 4089 0454 00000000 		.long	.L255-.L256
 4090 0458 00000000 		.long	.L257-.L256
 4091 045c 00000000 		.long	.L255-.L256
 4092 0460 00000000 		.long	.L258-.L256
 4093 0464 00000000 		.long	.L254-.L256
 4094 0468 00000000 		.long	.L254-.L256
 4095 046c 00000000 		.long	.L254-.L256
 4096 0470 00000000 		.long	.L259-.L256
 4097 0474 00000000 		.long	.L260-.L256
 4098              		.text
 4099              	.L259:
 795:svf2csvf.c    **** 		case XSDRSIZE:
 796:svf2csvf.c    **** 			numBytes = bitsToBytes(readLongBE(ptr));
 4100              		.loc 1 796 0
 4101 307e 488B45A8 		movq	-88(%rbp), %rax
 4102 3082 4889C7   		movq	%rax, %rdi
 4103 3085 E8000000 		call	readLongBE@PLT
 4103      00
 4104 308a C1E803   		shrl	$3, %eax
 4105 308d 89C3     		movl	%eax, %ebx
 4106 308f 488B45A8 		movq	-88(%rbp), %rax
 4107 3093 4889C7   		movq	%rax, %rdi
 4108 3096 E8000000 		call	readLongBE@PLT
 4108      00
 4109 309b 83E007   		andl	$7, %eax
 4110 309e 85C0     		testl	%eax, %eax
 4111 30a0 7407     		je	.L261
 4112              		.loc 1 796 0 is_stmt 0 discriminator 1
 4113 30a2 B8010000 		movl	$1, %eax
 4113      00
 4114 30a7 EB05     		jmp	.L262
 4115              	.L261:
 4116              		.loc 1 796 0 discriminator 2
 4117 30a9 B8000000 		movl	$0, %eax
 4117      00
 4118              	.L262:
 4119              		.loc 1 796 0 discriminator 3
 4120 30ae 01D8     		addl	%ebx, %eax
 4121 30b0 894598   		movl	%eax, -104(%rbp)
 4122              	.L258:
 797:svf2csvf.c    **** 		case XRUNTEST:
 798:svf2csvf.c    **** 			ptr += 4;
 4123              		.loc 1 798 0 is_stmt 1
 4124 30b3 488345A8 		addq	$4, -88(%rbp)
 4124      04
 799:svf2csvf.c    **** 			break;
 4125              		.loc 1 799 0
 4126 30b8 E9DF0000 		jmp	.L263
 4126      00
 4127              	.L255:
 800:svf2csvf.c    **** 		case XTDOMASK:
 801:svf2csvf.c    **** 		case XSDR:
 802:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4128              		.loc 1 802 0
 4129 30bd B8FFFFFF 		movl	$-1, %eax
 4129      FF
 4130 30c2 394598   		cmpl	%eax, -104(%rbp)
 4131 30c5 7522     		jne	.L264
 4132              		.loc 1 802 0 is_stmt 0 discriminator 1
 4133 30c7 488B8578 		movq	-136(%rbp), %rax
 4133      FFFFFF
 4134 30ce 488D3500 		leaq	.LC51(%rip), %rsi
 4134      000000
 4135 30d5 4889C7   		movq	%rax, %rdi
 4136 30d8 E8000000 		call	errPrefix@PLT
 4136      00
 4137 30dd C7459417 		movl	$23, -108(%rbp)
 4137      000000
 4138 30e4 E9F20300 		jmp	.L250
 4138      00
 4139              	.L264:
 803:svf2csvf.c    **** 			ptr += numBytes;
 4140              		.loc 1 803 0 is_stmt 1
 4141 30e9 8B4598   		movl	-104(%rbp), %eax
 4142 30ec 480145A8 		addq	%rax, -88(%rbp)
 804:svf2csvf.c    **** 			break;
 4143              		.loc 1 804 0
 4144 30f0 E9A70000 		jmp	.L263
 4144      00
 4145              	.L260:
 805:svf2csvf.c    **** 		case XSDRTDO:
 806:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4146              		.loc 1 806 0
 4147 30f5 B8FFFFFF 		movl	$-1, %eax
 4147      FF
 4148 30fa 394598   		cmpl	%eax, -104(%rbp)
 4149 30fd 7522     		jne	.L265
 4150              		.loc 1 806 0 is_stmt 0 discriminator 1
 4151 30ff 488B8578 		movq	-136(%rbp), %rax
 4151      FFFFFF
 4152 3106 488D3500 		leaq	.LC51(%rip), %rsi
 4152      000000
 4153 310d 4889C7   		movq	%rax, %rdi
 4154 3110 E8000000 		call	errPrefix@PLT
 4154      00
 4155 3115 C7459417 		movl	$23, -108(%rbp)
 4155      000000
 4156 311c E9BA0300 		jmp	.L250
 4156      00
 4157              	.L265:
 807:svf2csvf.c    **** 			ptr += 2*numBytes;
 4158              		.loc 1 807 0 is_stmt 1
 4159 3121 8B4598   		movl	-104(%rbp), %eax
 4160 3124 01C0     		addl	%eax, %eax
 4161 3126 89C0     		movl	%eax, %eax
 4162 3128 480145A8 		addq	%rax, -88(%rbp)
 808:svf2csvf.c    **** 			break;
 4163              		.loc 1 808 0
 4164 312c EB6E     		jmp	.L263
 4165              	.L257:
 809:svf2csvf.c    **** 		case XSIR:
 810:svf2csvf.c    **** 			offset = *ptr++;
 4166              		.loc 1 810 0
 4167 312e 488B45A8 		movq	-88(%rbp), %rax
 4168 3132 488D5001 		leaq	1(%rax), %rdx
 4169 3136 488955A8 		movq	%rdx, -88(%rbp)
 4170 313a 0FB600   		movzbl	(%rax), %eax
 4171 313d 0FB6C0   		movzbl	%al, %eax
 4172 3140 8945A4   		movl	%eax, -92(%rbp)
 811:svf2csvf.c    **** 			ptr += bitsToBytes(offset);
 4173              		.loc 1 811 0
 4174 3143 8B45A4   		movl	-92(%rbp), %eax
 4175 3146 C1F803   		sarl	$3, %eax
 4176 3149 89C2     		movl	%eax, %edx
 4177 314b 8B45A4   		movl	-92(%rbp), %eax
 4178 314e 83E007   		andl	$7, %eax
 4179 3151 85C0     		testl	%eax, %eax
 4180 3153 0F95C0   		setne	%al
 4181 3156 0FB6C0   		movzbl	%al, %eax
 4182 3159 01D0     		addl	%edx, %eax
 4183 315b 4898     		cltq
 4184 315d 480145A8 		addq	%rax, -88(%rbp)
 812:svf2csvf.c    **** 			break;
 4185              		.loc 1 812 0
 4186 3161 EB39     		jmp	.L263
 4187              	.L254:
 813:svf2csvf.c    **** 		default:
 814:svf2csvf.c    **** 			CHECK_STATUS(
 4188              		.loc 1 814 0
 4189 3163 488B55A8 		movq	-88(%rbp), %rdx
 4190 3167 488B45B8 		movq	-72(%rbp), %rax
 4191 316b 4889D1   		movq	%rdx, %rcx
 4192 316e 4829C1   		subq	%rax, %rcx
 4193 3171 0FB65593 		movzbl	-109(%rbp), %edx
 4194 3175 488B8578 		movq	-136(%rbp), %rax
 4194      FFFFFF
 4195 317c 488D3500 		leaq	.LC52(%rip), %rsi
 4195      000000
 4196 3183 4889C7   		movq	%rax, %rdi
 4197 3186 B8000000 		movl	$0, %eax
 4197      00
 4198 318b E8000000 		call	errRender@PLT
 4198      00
 4199 3190 C7459417 		movl	$23, -108(%rbp)
 4199      000000
 4200 3197 E93F0300 		jmp	.L250
 4200      00
 4201              	.L263:
 815:svf2csvf.c    **** 				true, FL_INTERNAL_ERR, cleanup,
 816:svf2csvf.c    **** 				"buildIndex(): Unrecognised CSVF command (cmd=0x%02X, srcOffset=%d)!", thisByte, ptr - start);
 817:svf2csvf.c    **** 		}
 818:svf2csvf.c    **** 		thisByte = *ptr;
 4202              		.loc 1 818 0
 4203 319c 488B45A8 		movq	-88(%rbp), %rax
 4204 31a0 0FB600   		movzbl	(%rax), %eax
 4205 31a3 884593   		movb	%al, -109(%rbp)
 4206              	.L253:
 792:svf2csvf.c    **** 		srcIndex[i++] = ptr++;
 4207              		.loc 1 792 0 discriminator 1
 4208 31a6 807D9300 		cmpb	$0, -109(%rbp)
 4209 31aa 0F8574FE 		jne	.L266
 4209      FFFF
 819:svf2csvf.c    **** 	}
 820:svf2csvf.c    **** 	srcIndex[i++] = ptr++;
 4210              		.loc 1 820 0
 4211 31b0 8B459C   		movl	-100(%rbp), %eax
 4212 31b3 8D5001   		leal	1(%rax), %edx
 4213 31b6 89559C   		movl	%edx, -100(%rbp)
 4214 31b9 4898     		cltq
 4215 31bb 488D14C5 		leaq	0(,%rax,8), %rdx
 4215      00000000 
 4216 31c3 488B45C0 		movq	-64(%rbp), %rax
 4217 31c7 488D0C02 		leaq	(%rdx,%rax), %rcx
 4218 31cb 488B45A8 		movq	-88(%rbp), %rax
 4219 31cf 488D5001 		leaq	1(%rax), %rdx
 4220 31d3 488955A8 		movq	%rdx, -88(%rbp)
 4221 31d7 488901   		movq	%rax, (%rcx)
 821:svf2csvf.c    **** 	processIndex(srcIndex, dstIndex);
 4222              		.loc 1 821 0
 4223 31da 488B55C8 		movq	-56(%rbp), %rdx
 4224 31de 488B45C0 		movq	-64(%rbp), %rax
 4225 31e2 4889D6   		movq	%rdx, %rsi
 4226 31e5 4889C7   		movq	%rax, %rdi
 4227 31e8 E8000000 		call	processIndex@PLT
 4227      00
 822:svf2csvf.c    **** 	cmdPtr = dstIndex;
 4228              		.loc 1 822 0
 4229 31ed 488B45C8 		movq	-56(%rbp), %rax
 4230 31f1 488945B0 		movq	%rax, -80(%rbp)
 823:svf2csvf.c    **** 	ptr = *cmdPtr;
 4231              		.loc 1 823 0
 4232 31f5 488B45B0 		movq	-80(%rbp), %rax
 4233 31f9 488B00   		movq	(%rax), %rax
 4234 31fc 488945A8 		movq	%rax, -88(%rbp)
 824:svf2csvf.c    **** 	thisByte = *ptr;
 4235              		.loc 1 824 0
 4236 3200 488B45A8 		movq	-88(%rbp), %rax
 4237 3204 0FB600   		movzbl	(%rax), %eax
 4238 3207 884593   		movb	%al, -109(%rbp)
 825:svf2csvf.c    **** 	numBytes = illegal32;
 4239              		.loc 1 825 0
 4240 320a C74598FF 		movl	$-1, -104(%rbp)
 4240      FFFFFF
 826:svf2csvf.c    **** 	while ( thisByte != XCOMPLETE ) {
 4241              		.loc 1 826 0
 4242 3211 E9680200 		jmp	.L267
 4242      00
 4243              	.L284:
 827:svf2csvf.c    **** 		switch ( thisByte ) {
 4244              		.loc 1 827 0
 4245 3216 0FB64593 		movzbl	-109(%rbp), %eax
 4246 321a 83F809   		cmpl	$9, %eax
 4247 321d 0F871902 		ja	.L268
 4247      0000
 4248 3223 89C0     		movl	%eax, %eax
 4249 3225 488D1485 		leaq	0(,%rax,4), %rdx
 4249      00000000 
 4250 322d 488D0500 		leaq	.L270(%rip), %rax
 4250      000000
 4251 3234 8B0402   		movl	(%rdx,%rax), %eax
 4252 3237 4863D0   		movslq	%eax, %rdx
 4253 323a 488D0500 		leaq	.L270(%rip), %rax
 4253      000000
 4254 3241 4801D0   		addq	%rdx, %rax
 4255 3244 FFE0     		jmp	*%rax
 4256              		.section	.rodata
 4257              		.align 4
 4258              		.align 4
 4259              	.L270:
 4260 0478 00000000 		.long	.L268-.L270
 4261 047c 00000000 		.long	.L269-.L270
 4262 0480 00000000 		.long	.L271-.L270
 4263 0484 00000000 		.long	.L269-.L270
 4264 0488 00000000 		.long	.L272-.L270
 4265 048c 00000000 		.long	.L268-.L270
 4266 0490 00000000 		.long	.L268-.L270
 4267 0494 00000000 		.long	.L268-.L270
 4268 0498 00000000 		.long	.L273-.L270
 4269 049c 00000000 		.long	.L274-.L270
 4270              		.text
 4271              	.L273:
 828:svf2csvf.c    **** 		case XSDRSIZE:
 829:svf2csvf.c    **** 			numBytes = bitsToBytes(readLongBE(ptr + 1));
 4272              		.loc 1 829 0
 4273 3246 488B45A8 		movq	-88(%rbp), %rax
 4274 324a 4883C001 		addq	$1, %rax
 4275 324e 4889C7   		movq	%rax, %rdi
 4276 3251 E8000000 		call	readLongBE@PLT
 4276      00
 4277 3256 C1E803   		shrl	$3, %eax
 4278 3259 89C3     		movl	%eax, %ebx
 4279 325b 488B45A8 		movq	-88(%rbp), %rax
 4280 325f 4883C001 		addq	$1, %rax
 4281 3263 4889C7   		movq	%rax, %rdi
 4282 3266 E8000000 		call	readLongBE@PLT
 4282      00
 4283 326b 83E007   		andl	$7, %eax
 4284 326e 85C0     		testl	%eax, %eax
 4285 3270 7407     		je	.L275
 4286              		.loc 1 829 0 is_stmt 0 discriminator 1
 4287 3272 B8010000 		movl	$1, %eax
 4287      00
 4288 3277 EB05     		jmp	.L276
 4289              	.L275:
 4290              		.loc 1 829 0 discriminator 2
 4291 3279 B8000000 		movl	$0, %eax
 4291      00
 4292              	.L276:
 4293              		.loc 1 829 0 discriminator 3
 4294 327e 01D8     		addl	%ebx, %eax
 4295 3280 894598   		movl	%eax, -104(%rbp)
 4296              	.L272:
 830:svf2csvf.c    **** 		case XRUNTEST:
 831:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, 5, error);
 4297              		.loc 1 831 0 is_stmt 1
 4298 3283 488B9578 		movq	-136(%rbp), %rdx
 4298      FFFFFF
 4299 328a 488B75A8 		movq	-88(%rbp), %rsi
 4300 328e 488D45D0 		leaq	-48(%rbp), %rax
 4301 3292 4889D1   		movq	%rdx, %rcx
 4302 3295 BA050000 		movl	$5, %edx
 4302      00
 4303 329a 4889C7   		movq	%rax, %rdi
 4304 329d E8000000 		call	bufAppendBlock@PLT
 4304      00
 4305 32a2 8945A0   		movl	%eax, -96(%rbp)
 832:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4306              		.loc 1 832 0
 4307 32a5 837DA000 		cmpl	$0, -96(%rbp)
 4308 32a9 7422     		je	.L277
 4309              		.loc 1 832 0 is_stmt 0 discriminator 1
 4310 32ab 488B8578 		movq	-136(%rbp), %rax
 4310      FFFFFF
 4311 32b2 488D3500 		leaq	.LC50(%rip), %rsi
 4311      000000
 4312 32b9 4889C7   		movq	%rax, %rdi
 4313 32bc E8000000 		call	errPrefix@PLT
 4313      00
 4314 32c1 C7459401 		movl	$1, -108(%rbp)
 4314      000000
 4315 32c8 E90E0200 		jmp	.L250
 4315      00
 4316              	.L277:
 833:svf2csvf.c    **** 			break;
 4317              		.loc 1 833 0 is_stmt 1
 4318 32cd E9920100 		jmp	.L278
 4318      00
 4319              	.L269:
 834:svf2csvf.c    **** 		case XTDOMASK:
 835:svf2csvf.c    **** 		case XSDR:
 836:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4320              		.loc 1 836 0
 4321 32d2 B8FFFFFF 		movl	$-1, %eax
 4321      FF
 4322 32d7 394598   		cmpl	%eax, -104(%rbp)
 4323 32da 7522     		jne	.L279
 4324              		.loc 1 836 0 is_stmt 0 discriminator 1
 4325 32dc 488B8578 		movq	-136(%rbp), %rax
 4325      FFFFFF
 4326 32e3 488D3500 		leaq	.LC51(%rip), %rsi
 4326      000000
 4327 32ea 4889C7   		movq	%rax, %rdi
 4328 32ed E8000000 		call	errPrefix@PLT
 4328      00
 4329 32f2 C7459417 		movl	$23, -108(%rbp)
 4329      000000
 4330 32f9 E9DD0100 		jmp	.L250
 4330      00
 4331              	.L279:
 837:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, numBytes + 1, error);
 4332              		.loc 1 837 0 is_stmt 1
 4333 32fe 8B4598   		movl	-104(%rbp), %eax
 4334 3301 83C001   		addl	$1, %eax
 4335 3304 89C2     		movl	%eax, %edx
 4336 3306 488B8D78 		movq	-136(%rbp), %rcx
 4336      FFFFFF
 4337 330d 488B75A8 		movq	-88(%rbp), %rsi
 4338 3311 488D45D0 		leaq	-48(%rbp), %rax
 4339 3315 4889C7   		movq	%rax, %rdi
 4340 3318 E8000000 		call	bufAppendBlock@PLT
 4340      00
 4341 331d 8945A0   		movl	%eax, -96(%rbp)
 838:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4342              		.loc 1 838 0
 4343 3320 837DA000 		cmpl	$0, -96(%rbp)
 4344 3324 7422     		je	.L280
 4345              		.loc 1 838 0 is_stmt 0 discriminator 1
 4346 3326 488B8578 		movq	-136(%rbp), %rax
 4346      FFFFFF
 4347 332d 488D3500 		leaq	.LC50(%rip), %rsi
 4347      000000
 4348 3334 4889C7   		movq	%rax, %rdi
 4349 3337 E8000000 		call	errPrefix@PLT
 4349      00
 4350 333c C7459401 		movl	$1, -108(%rbp)
 4350      000000
 4351 3343 E9930100 		jmp	.L250
 4351      00
 4352              	.L280:
 839:svf2csvf.c    **** 			break;
 4353              		.loc 1 839 0 is_stmt 1
 4354 3348 E9170100 		jmp	.L278
 4354      00
 4355              	.L274:
 840:svf2csvf.c    **** 		case XSDRTDO:
 841:svf2csvf.c    **** 			CHECK_STATUS(numBytes == illegal32, FL_INTERNAL_ERR, cleanup, "buildIndex(): No XSDRSIZE before 
 4356              		.loc 1 841 0
 4357 334d B8FFFFFF 		movl	$-1, %eax
 4357      FF
 4358 3352 394598   		cmpl	%eax, -104(%rbp)
 4359 3355 7522     		jne	.L281
 4360              		.loc 1 841 0 is_stmt 0 discriminator 1
 4361 3357 488B8578 		movq	-136(%rbp), %rax
 4361      FFFFFF
 4362 335e 488D3500 		leaq	.LC51(%rip), %rsi
 4362      000000
 4363 3365 4889C7   		movq	%rax, %rdi
 4364 3368 E8000000 		call	errPrefix@PLT
 4364      00
 4365 336d C7459417 		movl	$23, -108(%rbp)
 4365      000000
 4366 3374 E9620100 		jmp	.L250
 4366      00
 4367              	.L281:
 842:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, 2*numBytes + 1, error);
 4368              		.loc 1 842 0 is_stmt 1
 4369 3379 8B4598   		movl	-104(%rbp), %eax
 4370 337c 01C0     		addl	%eax, %eax
 4371 337e 83C001   		addl	$1, %eax
 4372 3381 89C2     		movl	%eax, %edx
 4373 3383 488B8D78 		movq	-136(%rbp), %rcx
 4373      FFFFFF
 4374 338a 488B75A8 		movq	-88(%rbp), %rsi
 4375 338e 488D45D0 		leaq	-48(%rbp), %rax
 4376 3392 4889C7   		movq	%rax, %rdi
 4377 3395 E8000000 		call	bufAppendBlock@PLT
 4377      00
 4378 339a 8945A0   		movl	%eax, -96(%rbp)
 843:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4379              		.loc 1 843 0
 4380 339d 837DA000 		cmpl	$0, -96(%rbp)
 4381 33a1 7422     		je	.L282
 4382              		.loc 1 843 0 is_stmt 0 discriminator 1
 4383 33a3 488B8578 		movq	-136(%rbp), %rax
 4383      FFFFFF
 4384 33aa 488D3500 		leaq	.LC50(%rip), %rsi
 4384      000000
 4385 33b1 4889C7   		movq	%rax, %rdi
 4386 33b4 E8000000 		call	errPrefix@PLT
 4386      00
 4387 33b9 C7459401 		movl	$1, -108(%rbp)
 4387      000000
 4388 33c0 E9160100 		jmp	.L250
 4388      00
 4389              	.L282:
 844:svf2csvf.c    **** 			break;
 4390              		.loc 1 844 0 is_stmt 1
 4391 33c5 E99A0000 		jmp	.L278
 4391      00
 4392              	.L271:
 845:svf2csvf.c    **** 		case XSIR:
 846:svf2csvf.c    **** 			offset = ptr[1];
 4393              		.loc 1 846 0
 4394 33ca 488B45A8 		movq	-88(%rbp), %rax
 4395 33ce 4883C001 		addq	$1, %rax
 4396 33d2 0FB600   		movzbl	(%rax), %eax
 4397 33d5 0FB6C0   		movzbl	%al, %eax
 4398 33d8 8945A4   		movl	%eax, -92(%rbp)
 847:svf2csvf.c    **** 			bStatus = bufAppendBlock(&newBuf, ptr, (uint32)(bitsToBytes(offset) + 2), error);
 4399              		.loc 1 847 0
 4400 33db 8B45A4   		movl	-92(%rbp), %eax
 4401 33de C1F803   		sarl	$3, %eax
 4402 33e1 89C2     		movl	%eax, %edx
 4403 33e3 8B45A4   		movl	-92(%rbp), %eax
 4404 33e6 83E007   		andl	$7, %eax
 4405 33e9 85C0     		testl	%eax, %eax
 4406 33eb 0F95C0   		setne	%al
 4407 33ee 0FB6C0   		movzbl	%al, %eax
 4408 33f1 01D0     		addl	%edx, %eax
 4409 33f3 83C002   		addl	$2, %eax
 4410 33f6 89C2     		movl	%eax, %edx
 4411 33f8 488B8D78 		movq	-136(%rbp), %rcx
 4411      FFFFFF
 4412 33ff 488B75A8 		movq	-88(%rbp), %rsi
 4413 3403 488D45D0 		leaq	-48(%rbp), %rax
 4414 3407 4889C7   		movq	%rax, %rdi
 4415 340a E8000000 		call	bufAppendBlock@PLT
 4415      00
 4416 340f 8945A0   		movl	%eax, -96(%rbp)
 848:svf2csvf.c    **** 			CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4417              		.loc 1 848 0
 4418 3412 837DA000 		cmpl	$0, -96(%rbp)
 4419 3416 7422     		je	.L283
 4420              		.loc 1 848 0 is_stmt 0 discriminator 1
 4421 3418 488B8578 		movq	-136(%rbp), %rax
 4421      FFFFFF
 4422 341f 488D3500 		leaq	.LC50(%rip), %rsi
 4422      000000
 4423 3426 4889C7   		movq	%rax, %rdi
 4424 3429 E8000000 		call	errPrefix@PLT
 4424      00
 4425 342e C7459401 		movl	$1, -108(%rbp)
 4425      000000
 4426 3435 E9A10000 		jmp	.L250
 4426      00
 4427              	.L283:
 849:svf2csvf.c    **** 			break;
 4428              		.loc 1 849 0 is_stmt 1
 4429 343a EB28     		jmp	.L278
 4430              	.L268:
 850:svf2csvf.c    **** 		default:
 851:svf2csvf.c    **** 			CHECK_STATUS(
 4431              		.loc 1 851 0
 4432 343c 0FB65593 		movzbl	-109(%rbp), %edx
 4433 3440 488B8578 		movq	-136(%rbp), %rax
 4433      FFFFFF
 4434 3447 488D3500 		leaq	.LC53(%rip), %rsi
 4434      000000
 4435 344e 4889C7   		movq	%rax, %rdi
 4436 3451 B8000000 		movl	$0, %eax
 4436      00
 4437 3456 E8000000 		call	errRender@PLT
 4437      00
 4438 345b C7459417 		movl	$23, -108(%rbp)
 4438      000000
 4439 3462 EB77     		jmp	.L250
 4440              	.L278:
 852:svf2csvf.c    **** 				true, FL_INTERNAL_ERR, cleanup,
 853:svf2csvf.c    **** 				"buildIndex(): Unrecognised CSVF command (cmd=0x%02X)!", thisByte);
 854:svf2csvf.c    **** 		}
 855:svf2csvf.c    **** 		cmdPtr++;
 4441              		.loc 1 855 0
 4442 3464 488345B0 		addq	$8, -80(%rbp)
 4442      08
 856:svf2csvf.c    **** 		ptr = *cmdPtr;
 4443              		.loc 1 856 0
 4444 3469 488B45B0 		movq	-80(%rbp), %rax
 4445 346d 488B00   		movq	(%rax), %rax
 4446 3470 488945A8 		movq	%rax, -88(%rbp)
 857:svf2csvf.c    **** 		thisByte = *ptr;
 4447              		.loc 1 857 0
 4448 3474 488B45A8 		movq	-88(%rbp), %rax
 4449 3478 0FB600   		movzbl	(%rax), %eax
 4450 347b 884593   		movb	%al, -109(%rbp)
 4451              	.L267:
 826:svf2csvf.c    **** 		switch ( thisByte ) {
 4452              		.loc 1 826 0 discriminator 1
 4453 347e 807D9300 		cmpb	$0, -109(%rbp)
 4454 3482 0F858EFD 		jne	.L284
 4454      FFFF
 858:svf2csvf.c    **** 	}
 859:svf2csvf.c    **** 	bStatus = bufAppendByte(&newBuf, XCOMPLETE, error);
 4455              		.loc 1 859 0
 4456 3488 488B9578 		movq	-136(%rbp), %rdx
 4456      FFFFFF
 4457 348f 488D45D0 		leaq	-48(%rbp), %rax
 4458 3493 BE000000 		movl	$0, %esi
 4458      00
 4459 3498 4889C7   		movq	%rax, %rdi
 4460 349b E8000000 		call	bufAppendByte@PLT
 4460      00
 4461 34a0 8945A0   		movl	%eax, -96(%rbp)
 860:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "buildIndex()");
 4462              		.loc 1 860 0
 4463 34a3 837DA000 		cmpl	$0, -96(%rbp)
 4464 34a7 741F     		je	.L285
 4465              		.loc 1 860 0 is_stmt 0 discriminator 1
 4466 34a9 488B8578 		movq	-136(%rbp), %rax
 4466      FFFFFF
 4467 34b0 488D3500 		leaq	.LC50(%rip), %rsi
 4467      000000
 4468 34b7 4889C7   		movq	%rax, %rdi
 4469 34ba E8000000 		call	errPrefix@PLT
 4469      00
 4470 34bf C7459401 		movl	$1, -108(%rbp)
 4470      000000
 4471 34c6 EB13     		jmp	.L250
 4472              	.L285:
 861:svf2csvf.c    **** 	bufSwap(&newBuf, csvfBuf);
 4473              		.loc 1 861 0 is_stmt 1
 4474 34c8 488B5580 		movq	-128(%rbp), %rdx
 4475 34cc 488D45D0 		leaq	-48(%rbp), %rax
 4476 34d0 4889D6   		movq	%rdx, %rsi
 4477 34d3 4889C7   		movq	%rax, %rdi
 4478 34d6 E8000000 		call	bufSwap@PLT
 4478      00
 4479              	.L250:
 862:svf2csvf.c    **** cleanup:
 863:svf2csvf.c    **** 	if ( dstIndex ) {
 4480              		.loc 1 863 0
 4481 34db 48837DC8 		cmpq	$0, -56(%rbp)
 4481      00
 4482 34e0 740C     		je	.L286
 864:svf2csvf.c    **** 		free((void*)dstIndex);
 4483              		.loc 1 864 0
 4484 34e2 488B45C8 		movq	-56(%rbp), %rax
 4485 34e6 4889C7   		movq	%rax, %rdi
 4486 34e9 E8000000 		call	free@PLT
 4486      00
 4487              	.L286:
 865:svf2csvf.c    **** 	}
 866:svf2csvf.c    **** 	if ( srcIndex ) {
 4488              		.loc 1 866 0
 4489 34ee 48837DC0 		cmpq	$0, -64(%rbp)
 4489      00
 4490 34f3 740C     		je	.L287
 867:svf2csvf.c    **** 		free((void*)srcIndex);
 4491              		.loc 1 867 0
 4492 34f5 488B45C0 		movq	-64(%rbp), %rax
 4493 34f9 4889C7   		movq	%rax, %rdi
 4494 34fc E8000000 		call	free@PLT
 4494      00
 4495              	.L287:
 868:svf2csvf.c    **** 	}
 869:svf2csvf.c    **** 	bufDestroy(&newBuf);
 4496              		.loc 1 869 0
 4497 3501 488D45D0 		leaq	-48(%rbp), %rax
 4498 3505 4889C7   		movq	%rax, %rdi
 4499 3508 E8000000 		call	bufDestroy@PLT
 4499      00
 870:svf2csvf.c    **** 	return retVal;
 4500              		.loc 1 870 0
 4501 350d 8B4594   		movl	-108(%rbp), %eax
 871:svf2csvf.c    **** }
 4502              		.loc 1 871 0
 4503 3510 4881C488 		addq	$136, %rsp
 4503      000000
 4504 3517 5B       		popq	%rbx
 4505 3518 5D       		popq	%rbp
 4506              		.cfi_def_cfa 7, 8
 4507 3519 C3       		ret
 4508              		.cfi_endproc
 4509              	.LFE21:
 4511              		.section	.rodata
 4512              	.LC54:
 4513 04a0 666C4C6F 		.string	"flLoadSvfAndConvertToCsvf()"
 4513      61645376 
 4513      66416E64 
 4513      436F6E76 
 4513      65727454 
 4514              	.LC55:
 4515 04bc 54525354 		.string	"TRST"
 4515      00
 4516              	.LC56:
 4517 04c1 454E4400 		.string	"END"
 4518              	.LC57:
 4519 04c5 53544154 		.string	"STATE"
 4519      4500
 4520              	.LC58:
 4521 04cb 46524551 		.string	"FREQ"
 4521      00
 4522              		.text
 4523              		.globl	flLoadSvfAndConvertToCsvf
 4525              	flLoadSvfAndConvertToCsvf:
 4526              	.LFB22:
 872:svf2csvf.c    **** 
 873:svf2csvf.c    **** DLLEXPORT(FLStatus) flLoadSvfAndConvertToCsvf(
 874:svf2csvf.c    **** 	const char *svfFile, struct Buffer *csvfBuf, uint32 *maxBufSize, const char **error)
 875:svf2csvf.c    **** {
 4527              		.loc 1 875 0
 4528              		.cfi_startproc
 4529 351a 55       		pushq	%rbp
 4530              		.cfi_def_cfa_offset 16
 4531              		.cfi_offset 6, -16
 4532 351b 4889E5   		movq	%rsp, %rbp
 4533              		.cfi_def_cfa_register 6
 4534 351e 4881EC30 		subq	$816, %rsp
 4534      030000
 4535 3525 4889BDE8 		movq	%rdi, -792(%rbp)
 4535      FCFFFF
 4536 352c 4889B5E0 		movq	%rsi, -800(%rbp)
 4536      FCFFFF
 4537 3533 488995D8 		movq	%rdx, -808(%rbp)
 4537      FCFFFF
 4538 353a 48898DD0 		movq	%rcx, -816(%rbp)
 4538      FCFFFF
 876:svf2csvf.c    **** 	FLStatus retVal = FL_SUCCESS;
 4539              		.loc 1 876 0
 4540 3541 C785FCFC 		movl	$0, -772(%rbp)
 4540      FFFF0000 
 4540      0000
 877:svf2csvf.c    **** 	struct Buffer lineBuf = {0,};
 4541              		.loc 1 877 0
 4542 354b 48C78530 		movq	$0, -720(%rbp)
 4542      FDFFFF00 
 4542      000000
 4543 3556 48C78538 		movq	$0, -712(%rbp)
 4543      FDFFFF00 
 4543      000000
 4544 3561 48C78540 		movq	$0, -704(%rbp)
 4544      FDFFFF00 
 4544      000000
 4545 356c 48C78548 		movq	$0, -696(%rbp)
 4545      FDFFFF00 
 4545      000000
 878:svf2csvf.c    **** 	BufferStatus bStatus;
 879:svf2csvf.c    **** 	FLStatus fStatus;
 880:svf2csvf.c    **** 	const uint8 *buffer = NULL, *p, *end, *line;
 4546              		.loc 1 880 0
 4547 3577 48C78510 		movq	$0, -752(%rbp)
 4547      FDFFFF00 
 4547      000000
 881:svf2csvf.c    **** 	size_t fileLength;
 882:svf2csvf.c    **** 	bool gotSemicolon;
 883:svf2csvf.c    **** 	struct ParseContext cxt = {{0,},};
 4548              		.loc 1 883 0
 4549 3582 488DB550 		leaq	-688(%rbp), %rsi
 4549      FDFFFF
 4550 3589 B8000000 		movl	$0, %eax
 4550      00
 4551 358e BA550000 		movl	$85, %edx
 4551      00
 4552 3593 4889F7   		movq	%rsi, %rdi
 4553 3596 4889D1   		movq	%rdx, %rcx
 4554 3599 F348AB   		rep stosq
 884:svf2csvf.c    **** 
 885:svf2csvf.c    **** 	// Initialise context and line buffer
 886:svf2csvf.c    **** 	fStatus = cxtInitialise(&cxt, error);
 4555              		.loc 1 886 0
 4556 359c 488B95D0 		movq	-816(%rbp), %rdx
 4556      FCFFFF
 4557 35a3 488D8550 		leaq	-688(%rbp), %rax
 4557      FDFFFF
 4558 35aa 4889D6   		movq	%rdx, %rsi
 4559 35ad 4889C7   		movq	%rax, %rdi
 4560 35b0 E8000000 		call	cxtInitialise@PLT
 4560      00
 4561 35b5 898500FD 		movl	%eax, -768(%rbp)
 4561      FFFF
 887:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 4562              		.loc 1 887 0
 4563 35bb 83BD00FD 		cmpl	$0, -768(%rbp)
 4563      FFFF00
 4564 35c2 7427     		je	.L290
 4565              		.loc 1 887 0 is_stmt 0 discriminator 1
 4566 35c4 488B85D0 		movq	-816(%rbp), %rax
 4566      FCFFFF
 4567 35cb 488D3500 		leaq	.LC54(%rip), %rsi
 4567      000000
 4568 35d2 4889C7   		movq	%rax, %rdi
 4569 35d5 E8000000 		call	errPrefix@PLT
 4569      00
 4570 35da 8B8500FD 		movl	-768(%rbp), %eax
 4570      FFFF
 4571 35e0 8985FCFC 		movl	%eax, -772(%rbp)
 4571      FFFF
 4572 35e6 E9100500 		jmp	.L291
 4572      00
 4573              	.L290:
 888:svf2csvf.c    **** 	bStatus = bufInitialise(&lineBuf, 1024, 0x00, error);
 4574              		.loc 1 888 0 is_stmt 1
 4575 35eb 488B95D0 		movq	-816(%rbp), %rdx
 4575      FCFFFF
 4576 35f2 488D8530 		leaq	-720(%rbp), %rax
 4576      FDFFFF
 4577 35f9 4889D1   		movq	%rdx, %rcx
 4578 35fc BA000000 		movl	$0, %edx
 4578      00
 4579 3601 BE000400 		movl	$1024, %esi
 4579      00
 4580 3606 4889C7   		movq	%rax, %rdi
 4581 3609 E8000000 		call	bufInitialise@PLT
 4581      00
 4582 360e 898504FD 		movl	%eax, -764(%rbp)
 4582      FFFF
 889:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4583              		.loc 1 889 0
 4584 3614 83BD04FD 		cmpl	$0, -764(%rbp)
 4584      FFFF00
 4585 361b 7425     		je	.L292
 4586              		.loc 1 889 0 is_stmt 0 discriminator 1
 4587 361d 488B85D0 		movq	-816(%rbp), %rax
 4587      FCFFFF
 4588 3624 488D3500 		leaq	.LC54(%rip), %rsi
 4588      000000
 4589 362b 4889C7   		movq	%rax, %rdi
 4590 362e E8000000 		call	errPrefix@PLT
 4590      00
 4591 3633 C785FCFC 		movl	$1, -772(%rbp)
 4591      FFFF0100 
 4591      0000
 4592 363d E9B90400 		jmp	.L291
 4592      00
 4593              	.L292:
 890:svf2csvf.c    **** 
 891:svf2csvf.c    **** 	// Load SVF file
 892:svf2csvf.c    **** 	buffer = flLoadFile(svfFile, &fileLength);
 4594              		.loc 1 892 0 is_stmt 1
 4595 3642 488D9508 		leaq	-760(%rbp), %rdx
 4595      FDFFFF
 4596 3649 488B85E8 		movq	-792(%rbp), %rax
 4596      FCFFFF
 4597 3650 4889D6   		movq	%rdx, %rsi
 4598 3653 4889C7   		movq	%rax, %rdi
 4599 3656 E8000000 		call	flLoadFile@PLT
 4599      00
 4600 365b 48898510 		movq	%rax, -752(%rbp)
 4600      FDFFFF
 893:svf2csvf.c    **** 	if ( !buffer ) {
 4601              		.loc 1 893 0
 4602 3662 4883BD10 		cmpq	$0, -752(%rbp)
 4602      FDFFFF00 
 4603 366a 7534     		jne	.L293
 894:svf2csvf.c    **** 		//errRender(error, "flLoadSvfAndConvertToCsvf(): Unable to load SVF file %s", svfFile);
 895:svf2csvf.c    **** 		errRenderStd(error);
 4604              		.loc 1 895 0
 4605 366c 488B85D0 		movq	-816(%rbp), %rax
 4605      FCFFFF
 4606 3673 4889C7   		movq	%rax, %rdi
 4607 3676 E8000000 		call	errRenderStd@PLT
 4607      00
 896:svf2csvf.c    **** 		errPrefix(error, "flLoadSvfAndConvertToCsvf()");
 4608              		.loc 1 896 0
 4609 367b 488B85D0 		movq	-816(%rbp), %rax
 4609      FCFFFF
 4610 3682 488D3500 		leaq	.LC54(%rip), %rsi
 4610      000000
 4611 3689 4889C7   		movq	%rax, %rdi
 4612 368c E8000000 		call	errPrefix@PLT
 4612      00
 897:svf2csvf.c    **** 		FAIL(FL_FILE_ERR, cleanup);
 4613              		.loc 1 897 0
 4614 3691 C785FCFC 		movl	$6, -772(%rbp)
 4614      FFFF0600 
 4614      0000
 4615 369b E95B0400 		jmp	.L291
 4615      00
 4616              	.L293:
 898:svf2csvf.c    **** 	}
 899:svf2csvf.c    **** 	end = buffer + fileLength;
 4617              		.loc 1 899 0
 4618 36a0 488B9508 		movq	-760(%rbp), %rdx
 4618      FDFFFF
 4619 36a7 488B8510 		movq	-752(%rbp), %rax
 4619      FDFFFF
 4620 36ae 4801D0   		addq	%rdx, %rax
 4621 36b1 48898520 		movq	%rax, -736(%rbp)
 4621      FDFFFF
 900:svf2csvf.c    **** 	p = buffer;
 4622              		.loc 1 900 0
 4623 36b8 488B8510 		movq	-752(%rbp), %rax
 4623      FDFFFF
 4624 36bf 48898518 		movq	%rax, -744(%rbp)
 4624      FDFFFF
 901:svf2csvf.c    **** 	while ( p < end ) {
 4625              		.loc 1 901 0
 4626 36c6 E9750300 		jmp	.L294
 4626      00
 4627              	.L315:
 902:svf2csvf.c    **** 		if ( p[0] == '\n' || p[0] == '\r' ) {
 4628              		.loc 1 902 0
 4629 36cb 488B8518 		movq	-744(%rbp), %rax
 4629      FDFFFF
 4630 36d2 0FB600   		movzbl	(%rax), %eax
 4631 36d5 3C0A     		cmpb	$10, %al
 4632 36d7 740E     		je	.L295
 4633              		.loc 1 902 0 is_stmt 0 discriminator 1
 4634 36d9 488B8518 		movq	-744(%rbp), %rax
 4634      FDFFFF
 4635 36e0 0FB600   		movzbl	(%rax), %eax
 4636 36e3 3C0D     		cmpb	$13, %al
 4637 36e5 750D     		jne	.L296
 4638              	.L295:
 903:svf2csvf.c    **** 			p++;
 4639              		.loc 1 903 0 is_stmt 1
 4640 36e7 48838518 		addq	$1, -744(%rbp)
 4640      FDFFFF01 
 4641 36ef E94C0300 		jmp	.L294
 4641      00
 4642              	.L296:
 904:svf2csvf.c    **** 		} else if (
 905:svf2csvf.c    **** 			p[0] == '!' ||
 4643              		.loc 1 905 0
 4644 36f4 488B8518 		movq	-744(%rbp), %rax
 4644      FDFFFF
 4645 36fb 0FB600   		movzbl	(%rax), %eax
 904:svf2csvf.c    **** 		} else if (
 4646              		.loc 1 904 0
 4647 36fe 3C21     		cmpb	$33, %al
 4648 3700 0F849C00 		je	.L297
 4648      0000
 906:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 4649              		.loc 1 906 0
 4650 3706 488B8518 		movq	-744(%rbp), %rax
 4650      FDFFFF
 4651 370d 0FB600   		movzbl	(%rax), %eax
 905:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 4652              		.loc 1 905 0
 4653 3710 3C2F     		cmpb	$47, %al
 4654 3712 7512     		jne	.L298
 4655              		.loc 1 906 0
 4656 3714 488B8518 		movq	-744(%rbp), %rax
 4656      FDFFFF
 4657 371b 4883C001 		addq	$1, %rax
 4658 371f 0FB600   		movzbl	(%rax), %eax
 4659 3722 3C2F     		cmpb	$47, %al
 4660 3724 747C     		je	.L297
 4661              	.L298:
 907:svf2csvf.c    **** 			!memcmp(p, "TRST", 4) ||
 4662              		.loc 1 907 0 discriminator 1
 4663 3726 488B8518 		movq	-744(%rbp), %rax
 4663      FDFFFF
 4664 372d BA040000 		movl	$4, %edx
 4664      00
 4665 3732 488D3500 		leaq	.LC55(%rip), %rsi
 4665      000000
 4666 3739 4889C7   		movq	%rax, %rdi
 4667 373c E8000000 		call	memcmp@PLT
 4667      00
 906:svf2csvf.c    **** 			(p[0] == '/' && p[1] == '/') ||
 4668              		.loc 1 906 0 discriminator 1
 4669 3741 85C0     		testl	%eax, %eax
 4670 3743 745D     		je	.L297
 908:svf2csvf.c    **** 			!memcmp(p, "END", 3) ||
 4671              		.loc 1 908 0
 4672 3745 488B8518 		movq	-744(%rbp), %rax
 4672      FDFFFF
 4673 374c BA030000 		movl	$3, %edx
 4673      00
 4674 3751 488D3500 		leaq	.LC56(%rip), %rsi
 4674      000000
 4675 3758 4889C7   		movq	%rax, %rdi
 4676 375b E8000000 		call	memcmp@PLT
 4676      00
 907:svf2csvf.c    **** 			!memcmp(p, "TRST", 4) ||
 4677              		.loc 1 907 0
 4678 3760 85C0     		testl	%eax, %eax
 4679 3762 743E     		je	.L297
 909:svf2csvf.c    **** 			!memcmp(p, "STATE", 5) ||
 4680              		.loc 1 909 0
 4681 3764 488B8518 		movq	-744(%rbp), %rax
 4681      FDFFFF
 4682 376b BA050000 		movl	$5, %edx
 4682      00
 4683 3770 488D3500 		leaq	.LC57(%rip), %rsi
 4683      000000
 4684 3777 4889C7   		movq	%rax, %rdi
 4685 377a E8000000 		call	memcmp@PLT
 4685      00
 908:svf2csvf.c    **** 			!memcmp(p, "END", 3) ||
 4686              		.loc 1 908 0
 4687 377f 85C0     		testl	%eax, %eax
 4688 3781 741F     		je	.L297
 910:svf2csvf.c    **** 			!memcmp(p, "FREQ", 4)
 4689              		.loc 1 910 0
 4690 3783 488B8518 		movq	-744(%rbp), %rax
 4690      FDFFFF
 4691 378a BA040000 		movl	$4, %edx
 4691      00
 4692 378f 488D3500 		leaq	.LC58(%rip), %rsi
 4692      000000
 4693 3796 4889C7   		movq	%rax, %rdi
 4694 3799 E8000000 		call	memcmp@PLT
 4694      00
 909:svf2csvf.c    **** 			!memcmp(p, "STATE", 5) ||
 4695              		.loc 1 909 0
 4696 379e 85C0     		testl	%eax, %eax
 4697 37a0 7543     		jne	.L299
 4698              	.L297:
 911:svf2csvf.c    **** 		) {
 912:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' ) {
 4699              		.loc 1 912 0
 4700 37a2 EB08     		jmp	.L300
 4701              	.L302:
 913:svf2csvf.c    **** 				p++;
 4702              		.loc 1 913 0
 4703 37a4 48838518 		addq	$1, -744(%rbp)
 4703      FDFFFF01 
 4704              	.L300:
 912:svf2csvf.c    **** 				p++;
 4705              		.loc 1 912 0 discriminator 1
 4706 37ac 488B8518 		movq	-744(%rbp), %rax
 4706      FDFFFF
 4707 37b3 483B8520 		cmpq	-736(%rbp), %rax
 4707      FDFFFF
 4708 37ba 731C     		jnb	.L301
 912:svf2csvf.c    **** 				p++;
 4709              		.loc 1 912 0 is_stmt 0 discriminator 2
 4710 37bc 488B8518 		movq	-744(%rbp), %rax
 4710      FDFFFF
 4711 37c3 0FB600   		movzbl	(%rax), %eax
 4712 37c6 3C0A     		cmpb	$10, %al
 4713 37c8 740E     		je	.L301
 912:svf2csvf.c    **** 				p++;
 4714              		.loc 1 912 0 discriminator 1
 4715 37ca 488B8518 		movq	-744(%rbp), %rax
 4715      FDFFFF
 4716 37d1 0FB600   		movzbl	(%rax), %eax
 4717 37d4 3C0D     		cmpb	$13, %al
 4718 37d6 75CC     		jne	.L302
 4719              	.L301:
 914:svf2csvf.c    **** 			}
 915:svf2csvf.c    **** 			p++;
 4720              		.loc 1 915 0 is_stmt 1
 4721 37d8 48838518 		addq	$1, -744(%rbp)
 4721      FDFFFF01 
 4722 37e0 E95B0200 		jmp	.L294
 4722      00
 4723              	.L299:
 916:svf2csvf.c    **** 		} else {
 917:svf2csvf.c    **** 			CHOMP();
 4724              		.loc 1 917 0
 4725 37e5 EB08     		jmp	.L303
 4726              	.L304:
 4727              		.loc 1 917 0 is_stmt 0 discriminator 2
 4728 37e7 48838518 		addq	$1, -744(%rbp)
 4728      FDFFFF01 
 4729              	.L303:
 4730              		.loc 1 917 0 discriminator 1
 4731 37ef 488B8518 		movq	-744(%rbp), %rax
 4731      FDFFFF
 4732 37f6 0FB600   		movzbl	(%rax), %eax
 4733 37f9 3C20     		cmpb	$32, %al
 4734 37fb 74EA     		je	.L304
 4735              		.loc 1 917 0 discriminator 3
 4736 37fd 488B8518 		movq	-744(%rbp), %rax
 4736      FDFFFF
 4737 3804 0FB600   		movzbl	(%rax), %eax
 4738 3807 3C09     		cmpb	$9, %al
 4739 3809 74DC     		je	.L304
 918:svf2csvf.c    **** 			line = p;
 4740              		.loc 1 918 0 is_stmt 1
 4741 380b 488B8518 		movq	-744(%rbp), %rax
 4741      FDFFFF
 4742 3812 48898528 		movq	%rax, -728(%rbp)
 4742      FDFFFF
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4743              		.loc 1 919 0
 4744 3819 EB08     		jmp	.L305
 4745              	.L307:
 920:svf2csvf.c    **** 				p++;
 4746              		.loc 1 920 0
 4747 381b 48838518 		addq	$1, -744(%rbp)
 4747      FDFFFF01 
 4748              	.L305:
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4749              		.loc 1 919 0 discriminator 1
 4750 3823 488B8518 		movq	-744(%rbp), %rax
 4750      FDFFFF
 4751 382a 483B8520 		cmpq	-736(%rbp), %rax
 4751      FDFFFF
 4752 3831 732A     		jnb	.L306
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4753              		.loc 1 919 0 is_stmt 0 discriminator 2
 4754 3833 488B8518 		movq	-744(%rbp), %rax
 4754      FDFFFF
 4755 383a 0FB600   		movzbl	(%rax), %eax
 4756 383d 3C0A     		cmpb	$10, %al
 4757 383f 741C     		je	.L306
 919:svf2csvf.c    **** 			while ( p < end && *p != '\n' && *p != '\r' && *p != ';' ) {
 4758              		.loc 1 919 0 discriminator 1
 4759 3841 488B8518 		movq	-744(%rbp), %rax
 4759      FDFFFF
 4760 3848 0FB600   		movzbl	(%rax), %eax
 4761 384b 3C0D     		cmpb	$13, %al
 4762 384d 740E     		je	.L306
 4763 384f 488B8518 		movq	-744(%rbp), %rax
 4763      FDFFFF
 4764 3856 0FB600   		movzbl	(%rax), %eax
 4765 3859 3C3B     		cmpb	$59, %al
 4766 385b 75BE     		jne	.L307
 4767              	.L306:
 921:svf2csvf.c    **** 			}
 922:svf2csvf.c    **** 			gotSemicolon = (*p == ';');
 4768              		.loc 1 922 0 is_stmt 1
 4769 385d 488B8518 		movq	-744(%rbp), %rax
 4769      FDFFFF
 4770 3864 0FB600   		movzbl	(%rax), %eax
 4771 3867 3C3B     		cmpb	$59, %al
 4772 3869 0F94C0   		sete	%al
 4773 386c 8885FBFC 		movb	%al, -773(%rbp)
 4773      FFFF
 923:svf2csvf.c    **** 			if ( *p == '\n' || *p == '\r' || *p == ';' ) {
 4774              		.loc 1 923 0
 4775 3872 488B8518 		movq	-744(%rbp), %rax
 4775      FDFFFF
 4776 3879 0FB600   		movzbl	(%rax), %eax
 4777 387c 3C0A     		cmpb	$10, %al
 4778 387e 7420     		je	.L308
 4779              		.loc 1 923 0 is_stmt 0 discriminator 1
 4780 3880 488B8518 		movq	-744(%rbp), %rax
 4780      FDFFFF
 4781 3887 0FB600   		movzbl	(%rax), %eax
 4782 388a 3C0D     		cmpb	$13, %al
 4783 388c 7412     		je	.L308
 4784 388e 488B8518 		movq	-744(%rbp), %rax
 4784      FDFFFF
 4785 3895 0FB600   		movzbl	(%rax), %eax
 4786 3898 3C3B     		cmpb	$59, %al
 4787 389a 0F85A001 		jne	.L294
 4787      0000
 4788              	.L308:
 924:svf2csvf.c    **** 				do {
 925:svf2csvf.c    **** 					p--;
 4789              		.loc 1 925 0 is_stmt 1 discriminator 1
 4790 38a0 4883AD18 		subq	$1, -744(%rbp)
 4790      FDFFFF01 
 926:svf2csvf.c    **** 				} while ( *p == ' ' || *p == '\t' );
 4791              		.loc 1 926 0 discriminator 1
 4792 38a8 488B8518 		movq	-744(%rbp), %rax
 4792      FDFFFF
 4793 38af 0FB600   		movzbl	(%rax), %eax
 4794 38b2 3C20     		cmpb	$32, %al
 4795 38b4 74EA     		je	.L308
 4796              		.loc 1 926 0 is_stmt 0 discriminator 2
 4797 38b6 488B8518 		movq	-744(%rbp), %rax
 4797      FDFFFF
 4798 38bd 0FB600   		movzbl	(%rax), %eax
 4799 38c0 3C09     		cmpb	$9, %al
 4800 38c2 74DC     		je	.L308
 927:svf2csvf.c    **** 				p++; // go back to first space char
 4801              		.loc 1 927 0 is_stmt 1
 4802 38c4 48838518 		addq	$1, -744(%rbp)
 4802      FDFFFF01 
 928:svf2csvf.c    **** 				bStatus = bufAppendBlock(&lineBuf, line, (uint32)(p - line), error);
 4803              		.loc 1 928 0
 4804 38cc 488B9518 		movq	-744(%rbp), %rdx
 4804      FDFFFF
 4805 38d3 488B8528 		movq	-728(%rbp), %rax
 4805      FDFFFF
 4806 38da 4829C2   		subq	%rax, %rdx
 4807 38dd 4889D0   		movq	%rdx, %rax
 4808 38e0 89C2     		movl	%eax, %edx
 4809 38e2 488B8DD0 		movq	-816(%rbp), %rcx
 4809      FCFFFF
 4810 38e9 488BB528 		movq	-728(%rbp), %rsi
 4810      FDFFFF
 4811 38f0 488D8530 		leaq	-720(%rbp), %rax
 4811      FDFFFF
 4812 38f7 4889C7   		movq	%rax, %rdi
 4813 38fa E8000000 		call	bufAppendBlock@PLT
 4813      00
 4814 38ff 898504FD 		movl	%eax, -764(%rbp)
 4814      FFFF
 929:svf2csvf.c    **** 				CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4815              		.loc 1 929 0
 4816 3905 83BD04FD 		cmpl	$0, -764(%rbp)
 4816      FFFF00
 4817 390c 7425     		je	.L309
 4818              		.loc 1 929 0 is_stmt 0 discriminator 1
 4819 390e 488B85D0 		movq	-816(%rbp), %rax
 4819      FCFFFF
 4820 3915 488D3500 		leaq	.LC54(%rip), %rsi
 4820      000000
 4821 391c 4889C7   		movq	%rax, %rdi
 4822 391f E8000000 		call	errPrefix@PLT
 4822      00
 4823 3924 C785FCFC 		movl	$1, -772(%rbp)
 4823      FFFF0100 
 4823      0000
 4824 392e E9C80100 		jmp	.L291
 4824      00
 4825              	.L309:
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4826              		.loc 1 930 0 is_stmt 1
 4827 3933 EB08     		jmp	.L310
 4828              	.L312:
 931:svf2csvf.c    **** 					p++;
 4829              		.loc 1 931 0
 4830 3935 48838518 		addq	$1, -744(%rbp)
 4830      FDFFFF01 
 4831              	.L310:
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4832              		.loc 1 930 0 discriminator 1
 4833 393d 488B8518 		movq	-744(%rbp), %rax
 4833      FDFFFF
 4834 3944 483B8520 		cmpq	-736(%rbp), %rax
 4834      FDFFFF
 4835 394b 731C     		jnb	.L311
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4836              		.loc 1 930 0 is_stmt 0 discriminator 2
 4837 394d 488B8518 		movq	-744(%rbp), %rax
 4837      FDFFFF
 4838 3954 0FB600   		movzbl	(%rax), %eax
 4839 3957 3C0A     		cmpb	$10, %al
 4840 3959 740E     		je	.L311
 930:svf2csvf.c    **** 				while ( p < end && *p != '\n' && *p != '\r' ) {
 4841              		.loc 1 930 0 discriminator 1
 4842 395b 488B8518 		movq	-744(%rbp), %rax
 4842      FDFFFF
 4843 3962 0FB600   		movzbl	(%rax), %eax
 4844 3965 3C0D     		cmpb	$13, %al
 4845 3967 75CC     		jne	.L312
 4846              	.L311:
 932:svf2csvf.c    **** 				}
 933:svf2csvf.c    **** 				p++; // Skip over CR
 4847              		.loc 1 933 0 is_stmt 1
 4848 3969 48838518 		addq	$1, -744(%rbp)
 4848      FDFFFF01 
 934:svf2csvf.c    **** 				if ( gotSemicolon ) {
 4849              		.loc 1 934 0
 4850 3971 80BDFBFC 		cmpb	$0, -773(%rbp)
 4850      FFFF00
 4851 3978 0F84C200 		je	.L294
 4851      0000
 935:svf2csvf.c    **** 					bStatus = bufAppendByte(&lineBuf, '\0', error);
 4852              		.loc 1 935 0
 4853 397e 488B95D0 		movq	-816(%rbp), %rdx
 4853      FCFFFF
 4854 3985 488D8530 		leaq	-720(%rbp), %rax
 4854      FDFFFF
 4855 398c BE000000 		movl	$0, %esi
 4855      00
 4856 3991 4889C7   		movq	%rax, %rdi
 4857 3994 E8000000 		call	bufAppendByte@PLT
 4857      00
 4858 3999 898504FD 		movl	%eax, -764(%rbp)
 4858      FFFF
 936:svf2csvf.c    **** 					CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4859              		.loc 1 936 0
 4860 399f 83BD04FD 		cmpl	$0, -764(%rbp)
 4860      FFFF00
 4861 39a6 7425     		je	.L313
 4862              		.loc 1 936 0 is_stmt 0 discriminator 1
 4863 39a8 488B85D0 		movq	-816(%rbp), %rax
 4863      FCFFFF
 4864 39af 488D3500 		leaq	.LC54(%rip), %rsi
 4864      000000
 4865 39b6 4889C7   		movq	%rax, %rdi
 4866 39b9 E8000000 		call	errPrefix@PLT
 4866      00
 4867 39be C785FCFC 		movl	$1, -772(%rbp)
 4867      FFFF0100 
 4867      0000
 4868 39c8 E92E0100 		jmp	.L291
 4868      00
 4869              	.L313:
 937:svf2csvf.c    **** 					fStatus = parseLine(&cxt, &lineBuf, csvfBuf, maxBufSize, error);
 4870              		.loc 1 937 0 is_stmt 1
 4871 39cd 488BBDD0 		movq	-816(%rbp), %rdi
 4871      FCFFFF
 4872 39d4 488B8DD8 		movq	-808(%rbp), %rcx
 4872      FCFFFF
 4873 39db 488B95E0 		movq	-800(%rbp), %rdx
 4873      FCFFFF
 4874 39e2 488DB530 		leaq	-720(%rbp), %rsi
 4874      FDFFFF
 4875 39e9 488D8550 		leaq	-688(%rbp), %rax
 4875      FDFFFF
 4876 39f0 4989F8   		movq	%rdi, %r8
 4877 39f3 4889C7   		movq	%rax, %rdi
 4878 39f6 E8000000 		call	parseLine@PLT
 4878      00
 4879 39fb 898500FD 		movl	%eax, -768(%rbp)
 4879      FFFF
 938:svf2csvf.c    **** 					CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 4880              		.loc 1 938 0
 4881 3a01 83BD00FD 		cmpl	$0, -768(%rbp)
 4881      FFFF00
 4882 3a08 7427     		je	.L314
 4883              		.loc 1 938 0 is_stmt 0 discriminator 1
 4884 3a0a 488B85D0 		movq	-816(%rbp), %rax
 4884      FCFFFF
 4885 3a11 488D3500 		leaq	.LC54(%rip), %rsi
 4885      000000
 4886 3a18 4889C7   		movq	%rax, %rdi
 4887 3a1b E8000000 		call	errPrefix@PLT
 4887      00
 4888 3a20 8B8500FD 		movl	-768(%rbp), %eax
 4888      FFFF
 4889 3a26 8985FCFC 		movl	%eax, -772(%rbp)
 4889      FFFF
 4890 3a2c E9CA0000 		jmp	.L291
 4890      00
 4891              	.L314:
 939:svf2csvf.c    **** 					bufZeroLength(&lineBuf);
 4892              		.loc 1 939 0 is_stmt 1
 4893 3a31 488D8530 		leaq	-720(%rbp), %rax
 4893      FDFFFF
 4894 3a38 4889C7   		movq	%rax, %rdi
 4895 3a3b E8000000 		call	bufZeroLength@PLT
 4895      00
 4896              	.L294:
 901:svf2csvf.c    **** 		if ( p[0] == '\n' || p[0] == '\r' ) {
 4897              		.loc 1 901 0 discriminator 1
 4898 3a40 488B8518 		movq	-744(%rbp), %rax
 4898      FDFFFF
 4899 3a47 483B8520 		cmpq	-736(%rbp), %rax
 4899      FDFFFF
 4900 3a4e 0F8277FC 		jb	.L315
 4900      FFFF
 940:svf2csvf.c    **** 				}
 941:svf2csvf.c    **** 			}
 942:svf2csvf.c    **** 		}
 943:svf2csvf.c    **** 	}
 944:svf2csvf.c    **** 	bStatus = bufAppendByte(csvfBuf, XCOMPLETE, error);
 4901              		.loc 1 944 0
 4902 3a54 488B95D0 		movq	-816(%rbp), %rdx
 4902      FCFFFF
 4903 3a5b 488B85E0 		movq	-800(%rbp), %rax
 4903      FCFFFF
 4904 3a62 BE000000 		movl	$0, %esi
 4904      00
 4905 3a67 4889C7   		movq	%rax, %rdi
 4906 3a6a E8000000 		call	bufAppendByte@PLT
 4906      00
 4907 3a6f 898504FD 		movl	%eax, -764(%rbp)
 4907      FFFF
 945:svf2csvf.c    **** 	CHECK_STATUS(bStatus, FL_ALLOC_ERR, cleanup, "flLoadSvfAndConvertToCsvf()");
 4908              		.loc 1 945 0
 4909 3a75 83BD04FD 		cmpl	$0, -764(%rbp)
 4909      FFFF00
 4910 3a7c 7422     		je	.L316
 4911              		.loc 1 945 0 is_stmt 0 discriminator 1
 4912 3a7e 488B85D0 		movq	-816(%rbp), %rax
 4912      FCFFFF
 4913 3a85 488D3500 		leaq	.LC54(%rip), %rsi
 4913      000000
 4914 3a8c 4889C7   		movq	%rax, %rdi
 4915 3a8f E8000000 		call	errPrefix@PLT
 4915      00
 4916 3a94 C785FCFC 		movl	$1, -772(%rbp)
 4916      FFFF0100 
 4916      0000
 4917 3a9e EB5B     		jmp	.L291
 4918              	.L316:
 946:svf2csvf.c    **** 	cxt.numCommands++;
 4919              		.loc 1 946 0 is_stmt 1
 4920 3aa0 8B45EC   		movl	-20(%rbp), %eax
 4921 3aa3 83C001   		addl	$1, %eax
 4922 3aa6 8945EC   		movl	%eax, -20(%rbp)
 947:svf2csvf.c    **** 
 948:svf2csvf.c    **** 	fStatus = buildIndex(&cxt, csvfBuf, error);
 4923              		.loc 1 948 0
 4924 3aa9 488B95D0 		movq	-816(%rbp), %rdx
 4924      FCFFFF
 4925 3ab0 488B8DE0 		movq	-800(%rbp), %rcx
 4925      FCFFFF
 4926 3ab7 488D8550 		leaq	-688(%rbp), %rax
 4926      FDFFFF
 4927 3abe 4889CE   		movq	%rcx, %rsi
 4928 3ac1 4889C7   		movq	%rax, %rdi
 4929 3ac4 E8000000 		call	buildIndex@PLT
 4929      00
 4930 3ac9 898500FD 		movl	%eax, -768(%rbp)
 4930      FFFF
 949:svf2csvf.c    **** 	CHECK_STATUS(fStatus, fStatus, cleanup, "flLoadSvfAndConvertToCsvf()");
 4931              		.loc 1 949 0
 4932 3acf 83BD00FD 		cmpl	$0, -768(%rbp)
 4932      FFFF00
 4933 3ad6 7423     		je	.L291
 4934              		.loc 1 949 0 is_stmt 0 discriminator 1
 4935 3ad8 488B85D0 		movq	-816(%rbp), %rax
 4935      FCFFFF
 4936 3adf 488D3500 		leaq	.LC54(%rip), %rsi
 4936      000000
 4937 3ae6 4889C7   		movq	%rax, %rdi
 4938 3ae9 E8000000 		call	errPrefix@PLT
 4938      00
 4939 3aee 8B8500FD 		movl	-768(%rbp), %eax
 4939      FFFF
 4940 3af4 8985FCFC 		movl	%eax, -772(%rbp)
 4940      FFFF
 4941 3afa 90       		nop
 4942              	.L291:
 950:svf2csvf.c    **** cleanup:
 951:svf2csvf.c    **** 	cxtDestroy(&cxt);
 4943              		.loc 1 951 0 is_stmt 1
 4944 3afb 488D8550 		leaq	-688(%rbp), %rax
 4944      FDFFFF
 4945 3b02 4889C7   		movq	%rax, %rdi
 4946 3b05 E8000000 		call	cxtDestroy@PLT
 4946      00
 952:svf2csvf.c    **** 	bufDestroy(&lineBuf);
 4947              		.loc 1 952 0
 4948 3b0a 488D8530 		leaq	-720(%rbp), %rax
 4948      FDFFFF
 4949 3b11 4889C7   		movq	%rax, %rdi
 4950 3b14 E8000000 		call	bufDestroy@PLT
 4950      00
 953:svf2csvf.c    **** 	flFreeFile((void*)buffer);
 4951              		.loc 1 953 0
 4952 3b19 488B8510 		movq	-752(%rbp), %rax
 4952      FDFFFF
 4953 3b20 4889C7   		movq	%rax, %rdi
 4954 3b23 E8000000 		call	flFreeFile@PLT
 4954      00
 954:svf2csvf.c    **** 	return retVal;
 4955              		.loc 1 954 0
 4956 3b28 8B85FCFC 		movl	-772(%rbp), %eax
 4956      FFFF
 955:svf2csvf.c    **** }	
 4957              		.loc 1 955 0
 4958 3b2e C9       		leave
 4959              		.cfi_def_cfa 7, 8
 4960 3b2f C3       		ret
 4961              		.cfi_endproc
 4962              	.LFE22:
 4964              		.section	.rodata
 4965              		.align 8
 4966              	.LC13:
 4967 04d0 00000000 		.long	0
 4968 04d4 80842E41 		.long	1093567616
 4969              		.text
 4970              	.Letext0:
 4971              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 4972              		.file 3 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/backend/common/makestuff.h"
 4973              		.file 4 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/backend/libs/libbuffer/libbuffe
 4974              		.file 5 "libfpgalink.h"
 4975              		.file 6 "svf2csvf.h"
 4976              		.file 7 "xsvf.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 svf2csvf.c
     /tmp/ccXkA3i5.s:5      .text:0000000000000000 getHexNibble
     /tmp/ccXkA3i5.s:74     .text:0000000000000074 getHexByte
     /tmp/ccXkA3i5.s:137    .text:00000000000000f3 readLongBE
     /tmp/ccXkA3i5.s:194    .text:000000000000014c readBytes
     /tmp/ccXkA3i5.s:301    .text:000000000000024a shiftLeft
     /tmp/ccXkA3i5.s:560    .text:0000000000000510 headTail
     /tmp/ccXkA3i5.s:891    .text:00000000000008bb initBitStore
     /tmp/ccXkA3i5.s:978    .text:00000000000009ac destroyBitStore
     /tmp/ccXkA3i5.s:1020   .text:00000000000009f4 cxtInitialise
     /tmp/ccXkA3i5.s:1197   .text:0000000000000c04 cxtDestroy
     /tmp/ccXkA3i5.s:1254   .text:0000000000000c88 processLine
     /tmp/ccXkA3i5.s:1495   .text:0000000000000f11 isAllZero
     /tmp/ccXkA3i5.s:1548   .text:0000000000000f5f appendSwappedAndInterleaved
     /tmp/ccXkA3i5.s:1643   .text:0000000000001052 appendSwapped
     /tmp/ccXkA3i5.s:1751   .text:00000000000010d9 parseLine
     /tmp/ccXkA3i5.s:3676   .data.rel.ro.local:0000000000000000 cmdNames
     /tmp/ccXkA3i5.s:3704   .text:0000000000002cbf getCmdName
     /tmp/ccXkA3i5.s:3734   .rodata:000000000000037b xrtZero
     /tmp/ccXkA3i5.s:3743   .rodata:0000000000000380 illegal32
     /tmp/ccXkA3i5.s:3748   .text:0000000000002cec processIndex
     /tmp/ccXkA3i5.s:3952   .text:0000000000002eb7 buildIndex
     /tmp/ccXkA3i5.s:4525   .text:000000000000351a flLoadSvfAndConvertToCsvf

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
strlen
errPrefix
bufZeroLength
bufAppendConst
bufInitialise
bufAppendByte
bufSwap
bufDestroy
bufAppendBlock
strncmp
strtod
bufAppendLongBE
strtoul
errRender
bufDeepCopy
memcmp
__stack_chk_fail
malloc
free
flLoadFile
errRenderStd
flFreeFile
