   1              		.file	"arg_date.c"
   2              		.text
   3              	.Ltext0:
   5              	resetfn:
   6              	.LFB0:
   7              		.file 1 "arg_date.c"
   1:arg_date.c    **** /*********************************************************************
   2:arg_date.c    **** This file is part of the argtable2 library.
   3:arg_date.c    **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:arg_date.c    **** sheitmann@users.sourceforge.net
   5:arg_date.c    **** 
   6:arg_date.c    **** The argtable2 library is free software; you can redistribute it and/or
   7:arg_date.c    **** modify it under the terms of the GNU Library General Public License as
   8:arg_date.c    **** published by the Free Software Foundation; either version 2 of the
   9:arg_date.c    **** License, or (at your option) any later version.
  10:arg_date.c    **** 
  11:arg_date.c    **** This software is distributed in the hope that it will be useful,
  12:arg_date.c    **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:arg_date.c    **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:arg_date.c    **** Library General Public License for more details.
  15:arg_date.c    **** 
  16:arg_date.c    **** You should have received a copy of the GNU Library General Public
  17:arg_date.c    **** License along with this library; if not, write to the Free Software
  18:arg_date.c    **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:arg_date.c    **** USA.
  20:arg_date.c    **** **********************************************************************/
  21:arg_date.c    **** /* glibc2 needs this for strptime */
  22:arg_date.c    **** #define _XOPEN_SOURCE 
  23:arg_date.c    **** 
  24:arg_date.c    **** /* SunOS also requires this for strptime */
  25:arg_date.c    **** #define _XOPEN_VERSION 4 
  26:arg_date.c    **** 
  27:arg_date.c    **** /* config.h must be included before anything else */
  28:arg_date.c    **** #ifdef HAVE_CONFIG_H
  29:arg_date.c    **** #include "config.h"
  30:arg_date.c    **** #endif
  31:arg_date.c    **** 
  32:arg_date.c    **** #ifdef HAVE_STDLIB_H
  33:arg_date.c    **** #include <stdlib.h>
  34:arg_date.c    **** #endif
  35:arg_date.c    **** 
  36:arg_date.c    **** #ifdef HAVE_STRINGS_H
  37:arg_date.c    **** #include <strings.h>
  38:arg_date.c    **** #endif
  39:arg_date.c    **** 
  40:arg_date.c    **** #include "argtable2.h"
  41:arg_date.c    **** 
  42:arg_date.c    **** /* local error codes  */
  43:arg_date.c    **** enum {EMINCOUNT=1,EMAXCOUNT,EBADDATE};
  44:arg_date.c    **** 
  45:arg_date.c    **** static void resetfn(struct arg_date *parent)
  46:arg_date.c    ****     {
   8              		.loc 1 46 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 48897DF8 		movq	%rdi, -8(%rbp)
  47:arg_date.c    ****     /*printf("%s:resetfn(%p)\n",__FILE__,parent);*/
  48:arg_date.c    ****     parent->count=0;
  16              		.loc 1 48 0
  17 0008 488B45F8 		movq	-8(%rbp), %rax
  18 000c C7406800 		movl	$0, 104(%rax)
  18      000000
  49:arg_date.c    ****     }
  19              		.loc 1 49 0
  20 0013 5D       		popq	%rbp
  21              		.cfi_def_cfa 7, 8
  22 0014 C3       		ret
  23              		.cfi_endproc
  24              	.LFE0:
  27              	scanfn:
  28              	.LFB1:
  50:arg_date.c    **** 
  51:arg_date.c    **** static int scanfn(struct arg_date *parent, const char *argval)
  52:arg_date.c    ****     {
  29              		.loc 1 52 0
  30              		.cfi_startproc
  31 0015 55       		pushq	%rbp
  32              		.cfi_def_cfa_offset 16
  33              		.cfi_offset 6, -16
  34 0016 4889E5   		movq	%rsp, %rbp
  35              		.cfi_def_cfa_register 6
  36 0019 4883EC60 		subq	$96, %rsp
  37 001d 48897DA8 		movq	%rdi, -88(%rbp)
  38 0021 488975A0 		movq	%rsi, -96(%rbp)
  53:arg_date.c    ****     int errorcode = 0;
  39              		.loc 1 53 0
  40 0025 C745B400 		movl	$0, -76(%rbp)
  40      000000
  54:arg_date.c    **** 
  55:arg_date.c    ****     if (parent->count == parent->hdr.maxcount )
  41              		.loc 1 55 0
  42 002c 488B45A8 		movq	-88(%rbp), %rax
  43 0030 8B5068   		movl	104(%rax), %edx
  44 0033 488B45A8 		movq	-88(%rbp), %rax
  45 0037 8B402C   		movl	44(%rax), %eax
  46 003a 39C2     		cmpl	%eax, %edx
  47 003c 750C     		jne	.L3
  56:arg_date.c    ****         errorcode = EMAXCOUNT;
  48              		.loc 1 56 0
  49 003e C745B402 		movl	$2, -76(%rbp)
  49      000000
  50 0045 E91B0100 		jmp	.L4
  50      00
  51              	.L3:
  57:arg_date.c    ****     else if (!argval)
  52              		.loc 1 57 0
  53 004a 48837DA0 		cmpq	$0, -96(%rbp)
  53      00
  54 004f 7516     		jne	.L5
  58:arg_date.c    ****         {
  59:arg_date.c    ****         /* no argument value was given, leave parent->tmval[] unaltered but still count it */
  60:arg_date.c    ****         parent->count++;
  55              		.loc 1 60 0
  56 0051 488B45A8 		movq	-88(%rbp), %rax
  57 0055 8B4068   		movl	104(%rax), %eax
  58 0058 8D5001   		leal	1(%rax), %edx
  59 005b 488B45A8 		movq	-88(%rbp), %rax
  60 005f 895068   		movl	%edx, 104(%rax)
  61 0062 E9FE0000 		jmp	.L4
  61      00
  62              	.L5:
  63              	.LBB2:
  61:arg_date.c    ****         }
  62:arg_date.c    ****     else 
  63:arg_date.c    ****         {
  64:arg_date.c    ****         const char *pend;
  65:arg_date.c    ****         struct tm tm = parent->tmval[parent->count];
  64              		.loc 1 65 0
  65 0067 488B45A8 		movq	-88(%rbp), %rax
  66 006b 488B5070 		movq	112(%rax), %rdx
  67 006f 488B45A8 		movq	-88(%rbp), %rax
  68 0073 8B4068   		movl	104(%rax), %eax
  69 0076 4898     		cltq
  70 0078 48C1E003 		salq	$3, %rax
  71 007c 488D0CC5 		leaq	0(,%rax,8), %rcx
  71      00000000 
  72 0084 4829C1   		subq	%rax, %rcx
  73 0087 4889C8   		movq	%rcx, %rax
  74 008a 4801D0   		addq	%rdx, %rax
  75 008d 488B10   		movq	(%rax), %rdx
  76 0090 488955C0 		movq	%rdx, -64(%rbp)
  77 0094 488B5008 		movq	8(%rax), %rdx
  78 0098 488955C8 		movq	%rdx, -56(%rbp)
  79 009c 488B5010 		movq	16(%rax), %rdx
  80 00a0 488955D0 		movq	%rdx, -48(%rbp)
  81 00a4 488B5018 		movq	24(%rax), %rdx
  82 00a8 488955D8 		movq	%rdx, -40(%rbp)
  83 00ac 488B5020 		movq	32(%rax), %rdx
  84 00b0 488955E0 		movq	%rdx, -32(%rbp)
  85 00b4 488B5028 		movq	40(%rax), %rdx
  86 00b8 488955E8 		movq	%rdx, -24(%rbp)
  87 00bc 488B4030 		movq	48(%rax), %rax
  88 00c0 488945F0 		movq	%rax, -16(%rbp)
  66:arg_date.c    **** 
  67:arg_date.c    ****         /* parse the given argument value, store result in parent->tmval[] */
  68:arg_date.c    ****         pend = strptime(argval, parent->format, &tm);
  89              		.loc 1 68 0
  90 00c4 488B45A8 		movq	-88(%rbp), %rax
  91 00c8 488B4860 		movq	96(%rax), %rcx
  92 00cc 488D55C0 		leaq	-64(%rbp), %rdx
  93 00d0 488B45A0 		movq	-96(%rbp), %rax
  94 00d4 4889CE   		movq	%rcx, %rsi
  95 00d7 4889C7   		movq	%rax, %rdi
  96 00da E8000000 		call	strptime@PLT
  96      00
  97 00df 488945B8 		movq	%rax, -72(%rbp)
  69:arg_date.c    ****         if (pend && pend[0]=='\0')
  98              		.loc 1 69 0
  99 00e3 48837DB8 		cmpq	$0, -72(%rbp)
  99      00
 100 00e8 7474     		je	.L6
 101              		.loc 1 69 0 is_stmt 0 discriminator 1
 102 00ea 488B45B8 		movq	-72(%rbp), %rax
 103 00ee 0FB600   		movzbl	(%rax), %eax
 104 00f1 84C0     		testb	%al, %al
 105 00f3 7569     		jne	.L6
  70:arg_date.c    ****             parent->tmval[parent->count++] = tm;
 106              		.loc 1 70 0 is_stmt 1
 107 00f5 488B45A8 		movq	-88(%rbp), %rax
 108 00f9 488B7070 		movq	112(%rax), %rsi
 109 00fd 488B45A8 		movq	-88(%rbp), %rax
 110 0101 8B4068   		movl	104(%rax), %eax
 111 0104 8D4801   		leal	1(%rax), %ecx
 112 0107 488B55A8 		movq	-88(%rbp), %rdx
 113 010b 894A68   		movl	%ecx, 104(%rdx)
 114 010e 4898     		cltq
 115 0110 48C1E003 		salq	$3, %rax
 116 0114 488D14C5 		leaq	0(,%rax,8), %rdx
 116      00000000 
 117 011c 4829C2   		subq	%rax, %rdx
 118 011f 4889D0   		movq	%rdx, %rax
 119 0122 4801F0   		addq	%rsi, %rax
 120 0125 488B55C0 		movq	-64(%rbp), %rdx
 121 0129 488910   		movq	%rdx, (%rax)
 122 012c 488B55C8 		movq	-56(%rbp), %rdx
 123 0130 48895008 		movq	%rdx, 8(%rax)
 124 0134 488B55D0 		movq	-48(%rbp), %rdx
 125 0138 48895010 		movq	%rdx, 16(%rax)
 126 013c 488B55D8 		movq	-40(%rbp), %rdx
 127 0140 48895018 		movq	%rdx, 24(%rax)
 128 0144 488B55E0 		movq	-32(%rbp), %rdx
 129 0148 48895020 		movq	%rdx, 32(%rax)
 130 014c 488B55E8 		movq	-24(%rbp), %rdx
 131 0150 48895028 		movq	%rdx, 40(%rax)
 132 0154 488B55F0 		movq	-16(%rbp), %rdx
 133 0158 48895030 		movq	%rdx, 48(%rax)
 134 015c EB07     		jmp	.L4
 135              	.L6:
  71:arg_date.c    ****         else
  72:arg_date.c    ****             errorcode = EBADDATE;
 136              		.loc 1 72 0
 137 015e C745B403 		movl	$3, -76(%rbp)
 137      000000
 138              	.L4:
 139              	.LBE2:
  73:arg_date.c    ****         }
  74:arg_date.c    **** 
  75:arg_date.c    ****     /*printf("%s:scanfn(%p) returns %d\n",__FILE__,parent,errorcode);*/
  76:arg_date.c    ****     return errorcode;
 140              		.loc 1 76 0
 141 0165 8B45B4   		movl	-76(%rbp), %eax
  77:arg_date.c    ****     }
 142              		.loc 1 77 0
 143 0168 C9       		leave
 144              		.cfi_def_cfa 7, 8
 145 0169 C3       		ret
 146              		.cfi_endproc
 147              	.LFE1:
 150              	checkfn:
 151              	.LFB2:
  78:arg_date.c    **** 
  79:arg_date.c    **** static int checkfn(struct arg_date *parent)
  80:arg_date.c    ****     {
 152              		.loc 1 80 0
 153              		.cfi_startproc
 154 016a 55       		pushq	%rbp
 155              		.cfi_def_cfa_offset 16
 156              		.cfi_offset 6, -16
 157 016b 4889E5   		movq	%rsp, %rbp
 158              		.cfi_def_cfa_register 6
 159 016e 48897DE8 		movq	%rdi, -24(%rbp)
  81:arg_date.c    ****     int errorcode = (parent->count < parent->hdr.mincount) ? EMINCOUNT : 0;
 160              		.loc 1 81 0
 161 0172 488B45E8 		movq	-24(%rbp), %rax
 162 0176 8B5068   		movl	104(%rax), %edx
 163 0179 488B45E8 		movq	-24(%rbp), %rax
 164 017d 8B4028   		movl	40(%rax), %eax
 165 0180 39C2     		cmpl	%eax, %edx
 166 0182 0F9CC0   		setl	%al
 167 0185 0FB6C0   		movzbl	%al, %eax
 168 0188 8945FC   		movl	%eax, -4(%rbp)
  82:arg_date.c    ****      
  83:arg_date.c    ****     /*printf("%s:checkfn(%p) returns %d\n",__FILE__,parent,errorcode);*/
  84:arg_date.c    ****     return errorcode;
 169              		.loc 1 84 0
 170 018b 8B45FC   		movl	-4(%rbp), %eax
  85:arg_date.c    ****     }
 171              		.loc 1 85 0
 172 018e 5D       		popq	%rbp
 173              		.cfi_def_cfa 7, 8
 174 018f C3       		ret
 175              		.cfi_endproc
 176              	.LFE2:
 178              		.section	.rodata
 179              	.LC0:
 180 0000 00       		.string	""
 181              	.LC1:
 182 0001 25733A20 		.string	"%s: "
 182      00
 183              	.LC2:
 184 0006 6D697373 		.string	"missing option "
 184      696E6720 
 184      6F707469 
 184      6F6E2000 
 185              	.LC3:
 186 0016 0A00     		.string	"\n"
 187              	.LC4:
 188 0018 65786365 		.string	"excess option "
 188      7373206F 
 188      7074696F 
 188      6E2000
 189 0027 00       		.align 8
 190              	.LC5:
 191 0028 696C6C65 		.string	"illegal timestamp format \"%s\"\n"
 191      67616C20 
 191      74696D65 
 191      7374616D 
 191      7020666F 
 192              	.LC6:
 193 0047 25462025 		.string	"%F %H:%M:%S"
 193      483A254D 
 193      3A255300 
 194              	.LC7:
 195 0053 31393939 		.string	"1999-12-31 23:59:59"
 195      2D31322D 
 195      33312032 
 195      333A3539 
 195      3A353900 
 196              	.LC8:
 197 0067 636F7272 		.string	"correct format is \"%s\"\n"
 197      65637420 
 197      666F726D 
 197      61742069 
 197      73202225 
 198              		.text
 200              	errorfn:
 201              	.LFB3:
  86:arg_date.c    **** 
  87:arg_date.c    **** static void errorfn(struct arg_date *parent, FILE *fp, int errorcode, const char *argval, const cha
  88:arg_date.c    ****     {
 202              		.loc 1 88 0
 203              		.cfi_startproc
 204 0190 55       		pushq	%rbp
 205              		.cfi_def_cfa_offset 16
 206              		.cfi_offset 6, -16
 207 0191 4889E5   		movq	%rsp, %rbp
 208              		.cfi_def_cfa_register 6
 209 0194 4881EC60 		subq	$352, %rsp
 209      010000
 210 019b 4889BDC8 		movq	%rdi, -312(%rbp)
 210      FEFFFF
 211 01a2 4889B5C0 		movq	%rsi, -320(%rbp)
 211      FEFFFF
 212 01a9 8995BCFE 		movl	%edx, -324(%rbp)
 212      FFFF
 213 01af 48898DB0 		movq	%rcx, -336(%rbp)
 213      FEFFFF
 214 01b6 4C8985A8 		movq	%r8, -344(%rbp)
 214      FEFFFF
 215              		.loc 1 88 0
 216 01bd 64488B04 		movq	%fs:40, %rax
 216      25280000 
 216      00
 217 01c6 488945F8 		movq	%rax, -8(%rbp)
 218 01ca 31C0     		xorl	%eax, %eax
  89:arg_date.c    ****     const char *shortopts = parent->hdr.shortopts;
 219              		.loc 1 89 0
 220 01cc 488B85C8 		movq	-312(%rbp), %rax
 220      FEFFFF
 221 01d3 488B4008 		movq	8(%rax), %rax
 222 01d7 488985D8 		movq	%rax, -296(%rbp)
 222      FEFFFF
  90:arg_date.c    ****     const char *longopts  = parent->hdr.longopts;
 223              		.loc 1 90 0
 224 01de 488B85C8 		movq	-312(%rbp), %rax
 224      FEFFFF
 225 01e5 488B4010 		movq	16(%rax), %rax
 226 01e9 488985E0 		movq	%rax, -288(%rbp)
 226      FEFFFF
  91:arg_date.c    ****     const char *datatype  = parent->hdr.datatype;
 227              		.loc 1 91 0
 228 01f0 488B85C8 		movq	-312(%rbp), %rax
 228      FEFFFF
 229 01f7 488B4018 		movq	24(%rax), %rax
 230 01fb 488985E8 		movq	%rax, -280(%rbp)
 230      FEFFFF
  92:arg_date.c    **** 
  93:arg_date.c    ****     /* make argval NULL safe */
  94:arg_date.c    ****     argval = argval ? argval : "";
 231              		.loc 1 94 0
 232 0202 4883BDB0 		cmpq	$0, -336(%rbp)
 232      FEFFFF00 
 233 020a 7409     		je	.L12
 234              		.loc 1 94 0 is_stmt 0 discriminator 1
 235 020c 488B85B0 		movq	-336(%rbp), %rax
 235      FEFFFF
 236 0213 EB07     		jmp	.L13
 237              	.L12:
 238              		.loc 1 94 0 discriminator 2
 239 0215 488D0500 		leaq	.LC0(%rip), %rax
 239      000000
 240              	.L13:
 241              		.loc 1 94 0 discriminator 3
 242 021c 488985B0 		movq	%rax, -336(%rbp)
 242      FEFFFF
  95:arg_date.c    **** 
  96:arg_date.c    ****     fprintf(fp,"%s: ",progname);
 243              		.loc 1 96 0 is_stmt 1 discriminator 3
 244 0223 488B95A8 		movq	-344(%rbp), %rdx
 244      FEFFFF
 245 022a 488B85C0 		movq	-320(%rbp), %rax
 245      FEFFFF
 246 0231 488D3500 		leaq	.LC1(%rip), %rsi
 246      000000
 247 0238 4889C7   		movq	%rax, %rdi
 248 023b B8000000 		movl	$0, %eax
 248      00
 249 0240 E8000000 		call	fprintf@PLT
 249      00
  97:arg_date.c    ****     switch(errorcode)
 250              		.loc 1 97 0 discriminator 3
 251 0245 8B85BCFE 		movl	-324(%rbp), %eax
 251      FFFF
 252 024b 83F802   		cmpl	$2, %eax
 253 024e 7462     		je	.L15
 254 0250 83F803   		cmpl	$3, %eax
 255 0253 0F84A900 		je	.L16
 255      0000
 256 0259 83F801   		cmpl	$1, %eax
 257 025c 0F853501 		jne	.L11
 257      0000
  98:arg_date.c    ****         {
  99:arg_date.c    ****         case EMINCOUNT:
 100:arg_date.c    ****             fputs("missing option ",fp);
 258              		.loc 1 100 0
 259 0262 488B85C0 		movq	-320(%rbp), %rax
 259      FEFFFF
 260 0269 4889C1   		movq	%rax, %rcx
 261 026c BA0F0000 		movl	$15, %edx
 261      00
 262 0271 BE010000 		movl	$1, %esi
 262      00
 263 0276 488D3D00 		leaq	.LC2(%rip), %rdi
 263      000000
 264 027d E8000000 		call	fwrite@PLT
 264      00
 101:arg_date.c    ****             arg_print_option(fp,shortopts,longopts,datatype,"\n");
 265              		.loc 1 101 0
 266 0282 488B8DE8 		movq	-280(%rbp), %rcx
 266      FEFFFF
 267 0289 488B95E0 		movq	-288(%rbp), %rdx
 267      FEFFFF
 268 0290 488BB5D8 		movq	-296(%rbp), %rsi
 268      FEFFFF
 269 0297 488B85C0 		movq	-320(%rbp), %rax
 269      FEFFFF
 270 029e 4C8D0500 		leaq	.LC3(%rip), %r8
 270      000000
 271 02a5 4889C7   		movq	%rax, %rdi
 272 02a8 E8000000 		call	arg_print_option@PLT
 272      00
 102:arg_date.c    ****             break;
 273              		.loc 1 102 0
 274 02ad E9E50000 		jmp	.L11
 274      00
 275              	.L15:
 103:arg_date.c    **** 
 104:arg_date.c    ****         case EMAXCOUNT:
 105:arg_date.c    ****             fputs("excess option ",fp);
 276              		.loc 1 105 0
 277 02b2 488B85C0 		movq	-320(%rbp), %rax
 277      FEFFFF
 278 02b9 4889C1   		movq	%rax, %rcx
 279 02bc BA0E0000 		movl	$14, %edx
 279      00
 280 02c1 BE010000 		movl	$1, %esi
 280      00
 281 02c6 488D3D00 		leaq	.LC4(%rip), %rdi
 281      000000
 282 02cd E8000000 		call	fwrite@PLT
 282      00
 106:arg_date.c    ****             arg_print_option(fp,shortopts,longopts,argval,"\n");
 283              		.loc 1 106 0
 284 02d2 488B8DB0 		movq	-336(%rbp), %rcx
 284      FEFFFF
 285 02d9 488B95E0 		movq	-288(%rbp), %rdx
 285      FEFFFF
 286 02e0 488BB5D8 		movq	-296(%rbp), %rsi
 286      FEFFFF
 287 02e7 488B85C0 		movq	-320(%rbp), %rax
 287      FEFFFF
 288 02ee 4C8D0500 		leaq	.LC3(%rip), %r8
 288      000000
 289 02f5 4889C7   		movq	%rax, %rdi
 290 02f8 E8000000 		call	arg_print_option@PLT
 290      00
 107:arg_date.c    ****             break;
 291              		.loc 1 107 0
 292 02fd E9950000 		jmp	.L11
 292      00
 293              	.L16:
 294              	.LBB3:
 108:arg_date.c    **** 
 109:arg_date.c    ****         case EBADDATE:
 110:arg_date.c    ****             {
 111:arg_date.c    ****             struct tm tm;
 112:arg_date.c    ****             char buff[200];           
 113:arg_date.c    **** 
 114:arg_date.c    ****             fprintf(fp,"illegal timestamp format \"%s\"\n",argval);
 295              		.loc 1 114 0
 296 0302 488B95B0 		movq	-336(%rbp), %rdx
 296      FEFFFF
 297 0309 488B85C0 		movq	-320(%rbp), %rax
 297      FEFFFF
 298 0310 488D3500 		leaq	.LC5(%rip), %rsi
 298      000000
 299 0317 4889C7   		movq	%rax, %rdi
 300 031a B8000000 		movl	$0, %eax
 300      00
 301 031f E8000000 		call	fprintf@PLT
 301      00
 115:arg_date.c    ****             bzero(&tm,sizeof(tm));
 302              		.loc 1 115 0
 303 0324 488D85F0 		leaq	-272(%rbp), %rax
 303      FEFFFF
 304 032b BE380000 		movl	$56, %esi
 304      00
 305 0330 4889C7   		movq	%rax, %rdi
 306 0333 E8000000 		call	bzero@PLT
 306      00
 116:arg_date.c    ****             strptime("1999-12-31 23:59:59","%F %H:%M:%S",&tm);
 307              		.loc 1 116 0
 308 0338 488D85F0 		leaq	-272(%rbp), %rax
 308      FEFFFF
 309 033f 4889C2   		movq	%rax, %rdx
 310 0342 488D3500 		leaq	.LC6(%rip), %rsi
 310      000000
 311 0349 488D3D00 		leaq	.LC7(%rip), %rdi
 311      000000
 312 0350 E8000000 		call	strptime@PLT
 312      00
 117:arg_date.c    ****             strftime(buff, sizeof(buff), parent->format, &tm);
 313              		.loc 1 117 0
 314 0355 488B85C8 		movq	-312(%rbp), %rax
 314      FEFFFF
 315 035c 488B5060 		movq	96(%rax), %rdx
 316 0360 488D8DF0 		leaq	-272(%rbp), %rcx
 316      FEFFFF
 317 0367 488D8530 		leaq	-208(%rbp), %rax
 317      FFFFFF
 318 036e BEC80000 		movl	$200, %esi
 318      00
 319 0373 4889C7   		movq	%rax, %rdi
 320 0376 E8000000 		call	strftime@PLT
 320      00
 118:arg_date.c    ****             printf("correct format is \"%s\"\n", buff);                        
 321              		.loc 1 118 0
 322 037b 488D8530 		leaq	-208(%rbp), %rax
 322      FFFFFF
 323 0382 4889C6   		movq	%rax, %rsi
 324 0385 488D3D00 		leaq	.LC8(%rip), %rdi
 324      000000
 325 038c B8000000 		movl	$0, %eax
 325      00
 326 0391 E8000000 		call	printf@PLT
 326      00
 119:arg_date.c    ****             break;
 327              		.loc 1 119 0
 328 0396 90       		nop
 329              	.L11:
 330              	.LBE3:
 120:arg_date.c    ****             }
 121:arg_date.c    ****         }
 122:arg_date.c    ****     }
 331              		.loc 1 122 0
 332 0397 488B45F8 		movq	-8(%rbp), %rax
 333 039b 64483304 		xorq	%fs:40, %rax
 333      25280000 
 333      00
 334 03a4 7405     		je	.L18
 335 03a6 E8000000 		call	__stack_chk_fail@PLT
 335      00
 336              	.L18:
 337 03ab C9       		leave
 338              		.cfi_def_cfa 7, 8
 339 03ac C3       		ret
 340              		.cfi_endproc
 341              	.LFE3:
 343              		.globl	arg_date0
 345              	arg_date0:
 346              	.LFB4:
 123:arg_date.c    ****  
 124:arg_date.c    **** 
 125:arg_date.c    **** struct arg_date* arg_date0(const char* shortopts,
 126:arg_date.c    ****                            const char* longopts,
 127:arg_date.c    ****                            const char* format,
 128:arg_date.c    ****                            const char *datatype,
 129:arg_date.c    ****                            const char *glossary)
 130:arg_date.c    ****     {
 347              		.loc 1 130 0
 348              		.cfi_startproc
 349 03ad 55       		pushq	%rbp
 350              		.cfi_def_cfa_offset 16
 351              		.cfi_offset 6, -16
 352 03ae 4889E5   		movq	%rsp, %rbp
 353              		.cfi_def_cfa_register 6
 354 03b1 4883EC30 		subq	$48, %rsp
 355 03b5 48897DF8 		movq	%rdi, -8(%rbp)
 356 03b9 488975F0 		movq	%rsi, -16(%rbp)
 357 03bd 488955E8 		movq	%rdx, -24(%rbp)
 358 03c1 48894DE0 		movq	%rcx, -32(%rbp)
 359 03c5 4C8945D8 		movq	%r8, -40(%rbp)
 131:arg_date.c    ****     return arg_daten(shortopts,longopts,format,datatype,0,1,glossary);
 360              		.loc 1 131 0
 361 03c9 488B4DE0 		movq	-32(%rbp), %rcx
 362 03cd 488B55E8 		movq	-24(%rbp), %rdx
 363 03d1 488B75F0 		movq	-16(%rbp), %rsi
 364 03d5 488B45F8 		movq	-8(%rbp), %rax
 365 03d9 488B7DD8 		movq	-40(%rbp), %rdi
 366 03dd 48893C24 		movq	%rdi, (%rsp)
 367 03e1 41B90100 		movl	$1, %r9d
 367      0000
 368 03e7 41B80000 		movl	$0, %r8d
 368      0000
 369 03ed 4889C7   		movq	%rax, %rdi
 370 03f0 E8000000 		call	arg_daten@PLT
 370      00
 132:arg_date.c    ****     }
 371              		.loc 1 132 0
 372 03f5 C9       		leave
 373              		.cfi_def_cfa 7, 8
 374 03f6 C3       		ret
 375              		.cfi_endproc
 376              	.LFE4:
 378              		.globl	arg_date1
 380              	arg_date1:
 381              	.LFB5:
 133:arg_date.c    **** 
 134:arg_date.c    **** struct arg_date* arg_date1(const char* shortopts,
 135:arg_date.c    ****                            const char* longopts,
 136:arg_date.c    ****                            const char* format,
 137:arg_date.c    ****                            const char *datatype,
 138:arg_date.c    ****                            const char *glossary)
 139:arg_date.c    ****     {
 382              		.loc 1 139 0
 383              		.cfi_startproc
 384 03f7 55       		pushq	%rbp
 385              		.cfi_def_cfa_offset 16
 386              		.cfi_offset 6, -16
 387 03f8 4889E5   		movq	%rsp, %rbp
 388              		.cfi_def_cfa_register 6
 389 03fb 4883EC30 		subq	$48, %rsp
 390 03ff 48897DF8 		movq	%rdi, -8(%rbp)
 391 0403 488975F0 		movq	%rsi, -16(%rbp)
 392 0407 488955E8 		movq	%rdx, -24(%rbp)
 393 040b 48894DE0 		movq	%rcx, -32(%rbp)
 394 040f 4C8945D8 		movq	%r8, -40(%rbp)
 140:arg_date.c    ****     return arg_daten(shortopts,longopts,format,datatype,1,1,glossary);
 395              		.loc 1 140 0
 396 0413 488B4DE0 		movq	-32(%rbp), %rcx
 397 0417 488B55E8 		movq	-24(%rbp), %rdx
 398 041b 488B75F0 		movq	-16(%rbp), %rsi
 399 041f 488B45F8 		movq	-8(%rbp), %rax
 400 0423 488B7DD8 		movq	-40(%rbp), %rdi
 401 0427 48893C24 		movq	%rdi, (%rsp)
 402 042b 41B90100 		movl	$1, %r9d
 402      0000
 403 0431 41B80100 		movl	$1, %r8d
 403      0000
 404 0437 4889C7   		movq	%rax, %rdi
 405 043a E8000000 		call	arg_daten@PLT
 405      00
 141:arg_date.c    ****     }
 406              		.loc 1 141 0
 407 043f C9       		leave
 408              		.cfi_def_cfa 7, 8
 409 0440 C3       		ret
 410              		.cfi_endproc
 411              	.LFE5:
 413              		.section	.rodata
 414              	.LC9:
 415 007f 257800   		.string	"%x"
 416              		.text
 417              		.globl	arg_daten
 419              	arg_daten:
 420              	.LFB6:
 142:arg_date.c    **** 
 143:arg_date.c    **** 
 144:arg_date.c    **** struct arg_date* arg_daten(const char* shortopts,
 145:arg_date.c    ****                            const char* longopts,
 146:arg_date.c    ****                            const char* format,
 147:arg_date.c    ****                            const char *datatype,
 148:arg_date.c    ****                            int mincount,
 149:arg_date.c    ****                            int maxcount,
 150:arg_date.c    ****                            const char *glossary)
 151:arg_date.c    ****     {
 421              		.loc 1 151 0
 422              		.cfi_startproc
 423 0441 55       		pushq	%rbp
 424              		.cfi_def_cfa_offset 16
 425              		.cfi_offset 6, -16
 426 0442 4889E5   		movq	%rsp, %rbp
 427              		.cfi_def_cfa_register 6
 428 0445 4883EC40 		subq	$64, %rsp
 429 0449 48897DE8 		movq	%rdi, -24(%rbp)
 430 044d 488975E0 		movq	%rsi, -32(%rbp)
 431 0451 488955D8 		movq	%rdx, -40(%rbp)
 432 0455 48894DD0 		movq	%rcx, -48(%rbp)
 433 0459 448945CC 		movl	%r8d, -52(%rbp)
 434 045d 44894DC8 		movl	%r9d, -56(%rbp)
 152:arg_date.c    ****     size_t nbytes;
 153:arg_date.c    ****     struct arg_date *result;
 154:arg_date.c    **** 
 155:arg_date.c    **** 	/* foolproof things by ensuring maxcount is not less than mincount */
 156:arg_date.c    **** 	maxcount = (maxcount<mincount) ? mincount : maxcount;
 435              		.loc 1 156 0
 436 0461 8B45CC   		movl	-52(%rbp), %eax
 437 0464 3945C8   		cmpl	%eax, -56(%rbp)
 438 0467 0F4D45C8 		cmovge	-56(%rbp), %eax
 439 046b 8945C8   		movl	%eax, -56(%rbp)
 157:arg_date.c    **** 
 158:arg_date.c    ****     /* default time format is the national date format for the locale */
 159:arg_date.c    ****     if (!format)
 440              		.loc 1 159 0
 441 046e 48837DD8 		cmpq	$0, -40(%rbp)
 441      00
 442 0473 750B     		jne	.L24
 160:arg_date.c    ****         format = "%x";
 443              		.loc 1 160 0
 444 0475 488D0500 		leaq	.LC9(%rip), %rax
 444      000000
 445 047c 488945D8 		movq	%rax, -40(%rbp)
 446              	.L24:
 161:arg_date.c    **** 
 162:arg_date.c    ****     nbytes = sizeof(struct arg_date)         /* storage for struct arg_date */
 163:arg_date.c    ****            + maxcount*sizeof(struct tm);     /* storage for tmval[maxcount] array */
 447              		.loc 1 163 0
 448 0480 8B45C8   		movl	-56(%rbp), %eax
 449 0483 4898     		cltq
 450 0485 48C1E003 		salq	$3, %rax
 451 0489 488D14C5 		leaq	0(,%rax,8), %rdx
 451      00000000 
 452 0491 4829C2   		subq	%rax, %rdx
 453 0494 4889D0   		movq	%rdx, %rax
 162:arg_date.c    ****            + maxcount*sizeof(struct tm);     /* storage for tmval[maxcount] array */
 454              		.loc 1 162 0
 455 0497 4883C078 		addq	$120, %rax
 456 049b 488945F0 		movq	%rax, -16(%rbp)
 164:arg_date.c    **** 
 165:arg_date.c    ****     /* allocate storage for the arg_date struct + tmval[] array.    */
 166:arg_date.c    ****     /* we use calloc because we want the tmval[] array zero filled. */
 167:arg_date.c    ****     result = (struct arg_date*)calloc(1,nbytes);
 457              		.loc 1 167 0
 458 049f 488B45F0 		movq	-16(%rbp), %rax
 459 04a3 4889C6   		movq	%rax, %rsi
 460 04a6 BF010000 		movl	$1, %edi
 460      00
 461 04ab E8000000 		call	calloc@PLT
 461      00
 462 04b0 488945F8 		movq	%rax, -8(%rbp)
 168:arg_date.c    ****     if (result)
 463              		.loc 1 168 0
 464 04b4 48837DF8 		cmpq	$0, -8(%rbp)
 464      00
 465 04b9 0F84C700 		je	.L25
 465      0000
 169:arg_date.c    ****         {
 170:arg_date.c    ****         /* init the arg_hdr struct */
 171:arg_date.c    ****         result->hdr.flag      = ARG_HASVALUE;
 466              		.loc 1 171 0
 467 04bf 488B45F8 		movq	-8(%rbp), %rax
 468 04c3 C60002   		movb	$2, (%rax)
 172:arg_date.c    ****         result->hdr.shortopts = shortopts;
 469              		.loc 1 172 0
 470 04c6 488B45F8 		movq	-8(%rbp), %rax
 471 04ca 488B55E8 		movq	-24(%rbp), %rdx
 472 04ce 48895008 		movq	%rdx, 8(%rax)
 173:arg_date.c    ****         result->hdr.longopts  = longopts;
 473              		.loc 1 173 0
 474 04d2 488B45F8 		movq	-8(%rbp), %rax
 475 04d6 488B55E0 		movq	-32(%rbp), %rdx
 476 04da 48895010 		movq	%rdx, 16(%rax)
 174:arg_date.c    ****         result->hdr.datatype  = datatype ? datatype : format;
 477              		.loc 1 174 0
 478 04de 48837DD0 		cmpq	$0, -48(%rbp)
 478      00
 479 04e3 7406     		je	.L26
 480              		.loc 1 174 0 is_stmt 0 discriminator 1
 481 04e5 488B45D0 		movq	-48(%rbp), %rax
 482 04e9 EB04     		jmp	.L27
 483              	.L26:
 484              		.loc 1 174 0 discriminator 2
 485 04eb 488B45D8 		movq	-40(%rbp), %rax
 486              	.L27:
 487              		.loc 1 174 0 discriminator 3
 488 04ef 488B55F8 		movq	-8(%rbp), %rdx
 489 04f3 48894218 		movq	%rax, 24(%rdx)
 175:arg_date.c    ****         result->hdr.glossary  = glossary;
 490              		.loc 1 175 0 is_stmt 1 discriminator 3
 491 04f7 488B45F8 		movq	-8(%rbp), %rax
 492 04fb 488B5510 		movq	16(%rbp), %rdx
 493 04ff 48895020 		movq	%rdx, 32(%rax)
 176:arg_date.c    ****         result->hdr.mincount  = mincount;
 494              		.loc 1 176 0 discriminator 3
 495 0503 488B45F8 		movq	-8(%rbp), %rax
 496 0507 8B55CC   		movl	-52(%rbp), %edx
 497 050a 895028   		movl	%edx, 40(%rax)
 177:arg_date.c    ****         result->hdr.maxcount  = maxcount;
 498              		.loc 1 177 0 discriminator 3
 499 050d 488B45F8 		movq	-8(%rbp), %rax
 500 0511 8B55C8   		movl	-56(%rbp), %edx
 501 0514 89502C   		movl	%edx, 44(%rax)
 178:arg_date.c    ****         result->hdr.parent    = result;
 502              		.loc 1 178 0 discriminator 3
 503 0517 488B45F8 		movq	-8(%rbp), %rax
 504 051b 488B55F8 		movq	-8(%rbp), %rdx
 505 051f 48895030 		movq	%rdx, 48(%rax)
 179:arg_date.c    ****         result->hdr.resetfn   = (arg_resetfn*)resetfn;
 506              		.loc 1 179 0 discriminator 3
 507 0523 488B45F8 		movq	-8(%rbp), %rax
 508 0527 488D15D2 		leaq	resetfn(%rip), %rdx
 508      FAFFFF
 509 052e 48895038 		movq	%rdx, 56(%rax)
 180:arg_date.c    ****         result->hdr.scanfn    = (arg_scanfn*)scanfn;
 510              		.loc 1 180 0 discriminator 3
 511 0532 488B45F8 		movq	-8(%rbp), %rax
 512 0536 488D15D8 		leaq	scanfn(%rip), %rdx
 512      FAFFFF
 513 053d 48895040 		movq	%rdx, 64(%rax)
 181:arg_date.c    ****         result->hdr.checkfn   = (arg_checkfn*)checkfn;
 514              		.loc 1 181 0 discriminator 3
 515 0541 488B45F8 		movq	-8(%rbp), %rax
 516 0545 488D151E 		leaq	checkfn(%rip), %rdx
 516      FCFFFF
 517 054c 48895048 		movq	%rdx, 72(%rax)
 182:arg_date.c    ****         result->hdr.errorfn   = (arg_errorfn*)errorfn;
 518              		.loc 1 182 0 discriminator 3
 519 0550 488B45F8 		movq	-8(%rbp), %rax
 520 0554 488D1535 		leaq	errorfn(%rip), %rdx
 520      FCFFFF
 521 055b 48895050 		movq	%rdx, 80(%rax)
 183:arg_date.c    **** 
 184:arg_date.c    ****         /* store the tmval[maxcount] array immediately after the arg_date struct */
 185:arg_date.c    ****         result->tmval  = (struct tm*)(result+1);
 522              		.loc 1 185 0 discriminator 3
 523 055f 488B45F8 		movq	-8(%rbp), %rax
 524 0563 488D5078 		leaq	120(%rax), %rdx
 525 0567 488B45F8 		movq	-8(%rbp), %rax
 526 056b 48895070 		movq	%rdx, 112(%rax)
 186:arg_date.c    **** 
 187:arg_date.c    ****         /* init the remaining arg_date member variables */
 188:arg_date.c    ****         result->count = 0;
 527              		.loc 1 188 0 discriminator 3
 528 056f 488B45F8 		movq	-8(%rbp), %rax
 529 0573 C7406800 		movl	$0, 104(%rax)
 529      000000
 189:arg_date.c    ****         result->format = format;
 530              		.loc 1 189 0 discriminator 3
 531 057a 488B45F8 		movq	-8(%rbp), %rax
 532 057e 488B55D8 		movq	-40(%rbp), %rdx
 533 0582 48895060 		movq	%rdx, 96(%rax)
 534              	.L25:
 190:arg_date.c    ****         }
 191:arg_date.c    **** 
 192:arg_date.c    ****     /*printf("arg_daten() returns %p\n",result);*/
 193:arg_date.c    ****     return result;
 535              		.loc 1 193 0
 536 0586 488B45F8 		movq	-8(%rbp), %rax
 194:arg_date.c    ****     }
 537              		.loc 1 194 0
 538 058a C9       		leave
 539              		.cfi_def_cfa 7, 8
 540 058b C3       		ret
 541              		.cfi_endproc
 542              	.LFE6:
 544              	.Letext0:
 545              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 546              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 547              		.file 4 "/usr/include/stdio.h"
 548              		.file 5 "/usr/include/libio.h"
 549              		.file 6 "/usr/include/time.h"
 550              		.file 7 "argtable2.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 arg_date.c
     /tmp/ccakbEAM.s:5      .text:0000000000000000 resetfn
     /tmp/ccakbEAM.s:27     .text:0000000000000015 scanfn
     /tmp/ccakbEAM.s:150    .text:000000000000016a checkfn
     /tmp/ccakbEAM.s:200    .text:0000000000000190 errorfn
     /tmp/ccakbEAM.s:345    .text:00000000000003ad arg_date0
     /tmp/ccakbEAM.s:419    .text:0000000000000441 arg_daten
     /tmp/ccakbEAM.s:380    .text:00000000000003f7 arg_date1

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
strptime
fprintf
fwrite
arg_print_option
bzero
strftime
printf
__stack_chk_fail
calloc
