   1              		.file	"argtable2.c"
   2              		.text
   3              	.Ltext0:
   5              	arg_register_error:
   6              	.LFB0:
   7              		.file 1 "argtable2.c"
   1:argtable2.c   **** /*********************************************************************
   2:argtable2.c   **** This file is part of the argtable2 library.
   3:argtable2.c   **** Copyright (C) 1998-2001,2003-2011 Stewart Heitmann
   4:argtable2.c   **** sheitmann@users.sourceforge.net
   5:argtable2.c   **** 
   6:argtable2.c   **** The argtable2 library is free software; you can redistribute it and/or
   7:argtable2.c   **** modify it under the terms of the GNU Library General Public License as
   8:argtable2.c   **** published by the Free Software Foundation; either version 2 of the
   9:argtable2.c   **** License, or (at your option) any later version.
  10:argtable2.c   **** 
  11:argtable2.c   **** This software is distributed in the hope that it will be useful,
  12:argtable2.c   **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:argtable2.c   **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14:argtable2.c   **** Library General Public License for more details.
  15:argtable2.c   **** 
  16:argtable2.c   **** You should have received a copy of the GNU Library General Public
  17:argtable2.c   **** License along with this library; if not, write to the Free Software
  18:argtable2.c   **** Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
  19:argtable2.c   **** USA.
  20:argtable2.c   **** **********************************************************************/
  21:argtable2.c   **** 
  22:argtable2.c   **** /* config.h must be included before anything else */
  23:argtable2.c   **** #ifdef HAVE_CONFIG_H
  24:argtable2.c   **** #include "config.h"
  25:argtable2.c   **** #endif
  26:argtable2.c   **** 
  27:argtable2.c   **** #ifdef STDC_HEADERS
  28:argtable2.c   **** #include <stdlib.h>
  29:argtable2.c   **** #include <string.h>
  30:argtable2.c   **** #include <stdlib.h>
  31:argtable2.c   **** #include <ctype.h>
  32:argtable2.c   **** #endif
  33:argtable2.c   **** 
  34:argtable2.c   **** #ifdef HAVE_STRINGS_H
  35:argtable2.c   **** #include <strings.h>
  36:argtable2.c   **** #endif
  37:argtable2.c   **** 
  38:argtable2.c   **** #ifdef HAVE_GETOPT_H
  39:argtable2.c   **** #include <getopt.h>
  40:argtable2.c   **** #else
  41:argtable2.c   **** #include "./getopt.h"
  42:argtable2.c   **** #endif
  43:argtable2.c   **** 
  44:argtable2.c   **** #ifdef HAVE_UNISTD_H
  45:argtable2.c   **** #include <unistd.h>
  46:argtable2.c   **** #endif
  47:argtable2.c   **** 
  48:argtable2.c   **** #include "argtable2.h"
  49:argtable2.c   **** #include "./getopt.h"
  50:argtable2.c   **** 
  51:argtable2.c   **** static
  52:argtable2.c   **** void arg_register_error(struct arg_end *end, void *parent, int error, const char *argval)
  53:argtable2.c   ****     {
   8              		.loc 1 53 0
   9              		.cfi_startproc
  10 0000 55       		pushq	%rbp
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 6, -16
  13 0001 4889E5   		movq	%rsp, %rbp
  14              		.cfi_def_cfa_register 6
  15 0004 48897DF8 		movq	%rdi, -8(%rbp)
  16 0008 488975F0 		movq	%rsi, -16(%rbp)
  17 000c 8955EC   		movl	%edx, -20(%rbp)
  18 000f 48894DE0 		movq	%rcx, -32(%rbp)
  54:argtable2.c   ****     /* printf("arg_register_error(%p,%p,%d,%s)\n",end,parent,error,argval); */
  55:argtable2.c   ****     if (end->count < end->hdr.maxcount)
  19              		.loc 1 55 0
  20 0013 488B45F8 		movq	-8(%rbp), %rax
  21 0017 8B5060   		movl	96(%rax), %edx
  22 001a 488B45F8 		movq	-8(%rbp), %rax
  23 001e 8B402C   		movl	44(%rax), %eax
  24 0021 39C2     		cmpl	%eax, %edx
  25 0023 7D6E     		jge	.L2
  56:argtable2.c   ****         {
  57:argtable2.c   ****         end->error[end->count] = error;
  26              		.loc 1 57 0
  27 0025 488B45F8 		movq	-8(%rbp), %rax
  28 0029 488B5068 		movq	104(%rax), %rdx
  29 002d 488B45F8 		movq	-8(%rbp), %rax
  30 0031 8B4060   		movl	96(%rax), %eax
  31 0034 4898     		cltq
  32 0036 48C1E002 		salq	$2, %rax
  33 003a 4801C2   		addq	%rax, %rdx
  34 003d 8B45EC   		movl	-20(%rbp), %eax
  35 0040 8902     		movl	%eax, (%rdx)
  58:argtable2.c   ****         end->parent[end->count] = parent;
  36              		.loc 1 58 0
  37 0042 488B45F8 		movq	-8(%rbp), %rax
  38 0046 488B5070 		movq	112(%rax), %rdx
  39 004a 488B45F8 		movq	-8(%rbp), %rax
  40 004e 8B4060   		movl	96(%rax), %eax
  41 0051 4898     		cltq
  42 0053 48C1E003 		salq	$3, %rax
  43 0057 4801C2   		addq	%rax, %rdx
  44 005a 488B45F0 		movq	-16(%rbp), %rax
  45 005e 488902   		movq	%rax, (%rdx)
  59:argtable2.c   ****         end->argval[end->count] = argval;
  46              		.loc 1 59 0
  47 0061 488B45F8 		movq	-8(%rbp), %rax
  48 0065 488B5078 		movq	120(%rax), %rdx
  49 0069 488B45F8 		movq	-8(%rbp), %rax
  50 006d 8B4060   		movl	96(%rax), %eax
  51 0070 4898     		cltq
  52 0072 48C1E003 		salq	$3, %rax
  53 0076 4801C2   		addq	%rax, %rdx
  54 0079 488B45E0 		movq	-32(%rbp), %rax
  55 007d 488902   		movq	%rax, (%rdx)
  60:argtable2.c   ****         end->count++;
  56              		.loc 1 60 0
  57 0080 488B45F8 		movq	-8(%rbp), %rax
  58 0084 8B4060   		movl	96(%rax), %eax
  59 0087 8D5001   		leal	1(%rax), %edx
  60 008a 488B45F8 		movq	-8(%rbp), %rax
  61 008e 895060   		movl	%edx, 96(%rax)
  62 0091 EB68     		jmp	.L1
  63              	.L2:
  61:argtable2.c   ****         }
  62:argtable2.c   ****     else
  63:argtable2.c   ****         {
  64:argtable2.c   ****         end->error[end->hdr.maxcount-1]  = ARG_ELIMIT;
  64              		.loc 1 64 0
  65 0093 488B45F8 		movq	-8(%rbp), %rax
  66 0097 488B5068 		movq	104(%rax), %rdx
  67 009b 488B45F8 		movq	-8(%rbp), %rax
  68 009f 8B402C   		movl	44(%rax), %eax
  69 00a2 4898     		cltq
  70 00a4 48C1E002 		salq	$2, %rax
  71 00a8 4883E804 		subq	$4, %rax
  72 00ac 4801D0   		addq	%rdx, %rax
  73 00af C7000100 		movl	$1, (%rax)
  73      0000
  65:argtable2.c   ****         end->parent[end->hdr.maxcount-1] = end;
  74              		.loc 1 65 0
  75 00b5 488B45F8 		movq	-8(%rbp), %rax
  76 00b9 488B5070 		movq	112(%rax), %rdx
  77 00bd 488B45F8 		movq	-8(%rbp), %rax
  78 00c1 8B402C   		movl	44(%rax), %eax
  79 00c4 4898     		cltq
  80 00c6 48C1E003 		salq	$3, %rax
  81 00ca 4883E808 		subq	$8, %rax
  82 00ce 4801C2   		addq	%rax, %rdx
  83 00d1 488B45F8 		movq	-8(%rbp), %rax
  84 00d5 488902   		movq	%rax, (%rdx)
  66:argtable2.c   ****         end->argval[end->hdr.maxcount-1] = NULL;
  85              		.loc 1 66 0
  86 00d8 488B45F8 		movq	-8(%rbp), %rax
  87 00dc 488B5078 		movq	120(%rax), %rdx
  88 00e0 488B45F8 		movq	-8(%rbp), %rax
  89 00e4 8B402C   		movl	44(%rax), %eax
  90 00e7 4898     		cltq
  91 00e9 48C1E003 		salq	$3, %rax
  92 00ed 4883E808 		subq	$8, %rax
  93 00f1 4801D0   		addq	%rdx, %rax
  94 00f4 48C70000 		movq	$0, (%rax)
  94      000000
  95              	.L1:
  67:argtable2.c   ****         }
  68:argtable2.c   ****     }
  96              		.loc 1 68 0
  97 00fb 5D       		popq	%rbp
  98              		.cfi_def_cfa 7, 8
  99 00fc C3       		ret
 100              		.cfi_endproc
 101              	.LFE0:
 104              	find_shortoption:
 105              	.LFB1:
  69:argtable2.c   **** 
  70:argtable2.c   **** 
  71:argtable2.c   **** /*
  72:argtable2.c   ****  * Return index of first table entry with a matching short option
  73:argtable2.c   ****  * or -1 if no match was found.
  74:argtable2.c   ****  */
  75:argtable2.c   **** static
  76:argtable2.c   **** int find_shortoption(struct arg_hdr **table, char shortopt)
  77:argtable2.c   ****     {
 106              		.loc 1 77 0
 107              		.cfi_startproc
 108 00fd 55       		pushq	%rbp
 109              		.cfi_def_cfa_offset 16
 110              		.cfi_offset 6, -16
 111 00fe 4889E5   		movq	%rsp, %rbp
 112              		.cfi_def_cfa_register 6
 113 0101 4883EC20 		subq	$32, %rsp
 114 0105 48897DE8 		movq	%rdi, -24(%rbp)
 115 0109 89F0     		movl	%esi, %eax
 116 010b 8845E4   		movb	%al, -28(%rbp)
  78:argtable2.c   ****     int tabindex;
  79:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 117              		.loc 1 79 0
 118 010e C745FC00 		movl	$0, -4(%rbp)
 118      000000
 119 0115 EB57     		jmp	.L5
 120              	.L8:
  80:argtable2.c   ****         {
  81:argtable2.c   ****         if (table[tabindex]->shortopts && strchr(table[tabindex]->shortopts,shortopt))
 121              		.loc 1 81 0
 122 0117 8B45FC   		movl	-4(%rbp), %eax
 123 011a 4898     		cltq
 124 011c 488D14C5 		leaq	0(,%rax,8), %rdx
 124      00000000 
 125 0124 488B45E8 		movq	-24(%rbp), %rax
 126 0128 4801D0   		addq	%rdx, %rax
 127 012b 488B00   		movq	(%rax), %rax
 128 012e 488B4008 		movq	8(%rax), %rax
 129 0132 4885C0   		testq	%rax, %rax
 130 0135 7433     		je	.L6
 131              		.loc 1 81 0 is_stmt 0 discriminator 1
 132 0137 0FBE55E4 		movsbl	-28(%rbp), %edx
 133 013b 8B45FC   		movl	-4(%rbp), %eax
 134 013e 4898     		cltq
 135 0140 488D0CC5 		leaq	0(,%rax,8), %rcx
 135      00000000 
 136 0148 488B45E8 		movq	-24(%rbp), %rax
 137 014c 4801C8   		addq	%rcx, %rax
 138 014f 488B00   		movq	(%rax), %rax
 139 0152 488B4008 		movq	8(%rax), %rax
 140 0156 89D6     		movl	%edx, %esi
 141 0158 4889C7   		movq	%rax, %rdi
 142 015b E8000000 		call	strchr@PLT
 142      00
 143 0160 4885C0   		testq	%rax, %rax
 144 0163 7405     		je	.L6
  82:argtable2.c   ****             return tabindex;
 145              		.loc 1 82 0 is_stmt 1
 146 0165 8B45FC   		movl	-4(%rbp), %eax
 147 0168 EB2D     		jmp	.L7
 148              	.L6:
  79:argtable2.c   ****         {
 149              		.loc 1 79 0
 150 016a 8345FC01 		addl	$1, -4(%rbp)
 151              	.L5:
  79:argtable2.c   ****         {
 152              		.loc 1 79 0 is_stmt 0 discriminator 1
 153 016e 8B45FC   		movl	-4(%rbp), %eax
 154 0171 4898     		cltq
 155 0173 488D14C5 		leaq	0(,%rax,8), %rdx
 155      00000000 
 156 017b 488B45E8 		movq	-24(%rbp), %rax
 157 017f 4801D0   		addq	%rdx, %rax
 158 0182 488B00   		movq	(%rax), %rax
 159 0185 0FB600   		movzbl	(%rax), %eax
 160 0188 0FBEC0   		movsbl	%al, %eax
 161 018b 83E001   		andl	$1, %eax
 162 018e 85C0     		testl	%eax, %eax
 163 0190 7485     		je	.L8
  83:argtable2.c   ****         }
  84:argtable2.c   ****     return -1;
 164              		.loc 1 84 0 is_stmt 1
 165 0192 B8FFFFFF 		movl	$-1, %eax
 165      FF
 166              	.L7:
  85:argtable2.c   ****     }
 167              		.loc 1 85 0
 168 0197 C9       		leave
 169              		.cfi_def_cfa 7, 8
 170 0198 C3       		ret
 171              		.cfi_endproc
 172              	.LFE1:
 174              		.section	.rodata
 175              	.LC0:
 176 0000 6765746F 		.string	"getoptval = %d\n"
 176      70747661 
 176      6C203D20 
 176      25640A00 
 177              	.LC1:
 178 0010 6E6F7074 		.string	"noptions  = %d\n"
 178      696F6E73 
 178      20203D20 
 178      25640A00 
 179              	.LC2:
 180 0020 6F707469 		.string	"options[%d].name    = \"%s\"\n"
 180      6F6E735B 
 180      25645D2E 
 180      6E616D65 
 180      20202020 
 181              	.LC3:
 182 003c 6F707469 		.string	"options[%d].has_arg = %d\n"
 182      6F6E735B 
 182      25645D2E 
 182      6861735F 
 182      61726720 
 183              	.LC4:
 184 0056 6F707469 		.string	"options[%d].flag    = %p\n"
 184      6F6E735B 
 184      25645D2E 
 184      666C6167 
 184      20202020 
 185              	.LC5:
 186 0070 6F707469 		.string	"options[%d].val     = %d\n"
 186      6F6E735B 
 186      25645D2E 
 186      76616C20 
 186      20202020 
 187              		.text
 189              	dump_longoptions:
 190              	.LFB2:
  86:argtable2.c   **** 
  87:argtable2.c   **** 
  88:argtable2.c   **** struct longoptions
  89:argtable2.c   ****     {
  90:argtable2.c   ****     int getoptval;
  91:argtable2.c   ****     int noptions;
  92:argtable2.c   ****     struct option *options;
  93:argtable2.c   ****     };
  94:argtable2.c   **** 
  95:argtable2.c   **** #ifndef NDEBUG
  96:argtable2.c   **** static
  97:argtable2.c   **** void dump_longoptions(struct longoptions* longoptions)
  98:argtable2.c   ****     {
 191              		.loc 1 98 0
 192              		.cfi_startproc
 193 0199 55       		pushq	%rbp
 194              		.cfi_def_cfa_offset 16
 195              		.cfi_offset 6, -16
 196 019a 4889E5   		movq	%rsp, %rbp
 197              		.cfi_def_cfa_register 6
 198 019d 4883EC20 		subq	$32, %rsp
 199 01a1 48897DE8 		movq	%rdi, -24(%rbp)
  99:argtable2.c   ****     int i;
 100:argtable2.c   ****     printf("getoptval = %d\n", longoptions->getoptval);
 200              		.loc 1 100 0
 201 01a5 488B45E8 		movq	-24(%rbp), %rax
 202 01a9 8B00     		movl	(%rax), %eax
 203 01ab 89C6     		movl	%eax, %esi
 204 01ad 488D3D00 		leaq	.LC0(%rip), %rdi
 204      000000
 205 01b4 B8000000 		movl	$0, %eax
 205      00
 206 01b9 E8000000 		call	printf@PLT
 206      00
 101:argtable2.c   ****     printf("noptions  = %d\n", longoptions->noptions);
 207              		.loc 1 101 0
 208 01be 488B45E8 		movq	-24(%rbp), %rax
 209 01c2 8B4004   		movl	4(%rax), %eax
 210 01c5 89C6     		movl	%eax, %esi
 211 01c7 488D3D00 		leaq	.LC1(%rip), %rdi
 211      000000
 212 01ce B8000000 		movl	$0, %eax
 212      00
 213 01d3 E8000000 		call	printf@PLT
 213      00
 102:argtable2.c   ****     for (i=0; i<longoptions->noptions; i++)
 214              		.loc 1 102 0
 215 01d8 C745FC00 		movl	$0, -4(%rbp)
 215      000000
 216 01df E9BD0000 		jmp	.L10
 216      00
 217              	.L11:
 103:argtable2.c   ****         {
 104:argtable2.c   ****         printf("options[%d].name    = \"%s\"\n", i, longoptions->options[i].name);
 218              		.loc 1 104 0 discriminator 2
 219 01e4 488B45E8 		movq	-24(%rbp), %rax
 220 01e8 488B4008 		movq	8(%rax), %rax
 221 01ec 8B55FC   		movl	-4(%rbp), %edx
 222 01ef 4863D2   		movslq	%edx, %rdx
 223 01f2 48C1E205 		salq	$5, %rdx
 224 01f6 4801D0   		addq	%rdx, %rax
 225 01f9 488B10   		movq	(%rax), %rdx
 226 01fc 8B45FC   		movl	-4(%rbp), %eax
 227 01ff 89C6     		movl	%eax, %esi
 228 0201 488D3D00 		leaq	.LC2(%rip), %rdi
 228      000000
 229 0208 B8000000 		movl	$0, %eax
 229      00
 230 020d E8000000 		call	printf@PLT
 230      00
 105:argtable2.c   ****         printf("options[%d].has_arg = %d\n", i, longoptions->options[i].has_arg);
 231              		.loc 1 105 0 discriminator 2
 232 0212 488B45E8 		movq	-24(%rbp), %rax
 233 0216 488B4008 		movq	8(%rax), %rax
 234 021a 8B55FC   		movl	-4(%rbp), %edx
 235 021d 4863D2   		movslq	%edx, %rdx
 236 0220 48C1E205 		salq	$5, %rdx
 237 0224 4801D0   		addq	%rdx, %rax
 238 0227 8B5008   		movl	8(%rax), %edx
 239 022a 8B45FC   		movl	-4(%rbp), %eax
 240 022d 89C6     		movl	%eax, %esi
 241 022f 488D3D00 		leaq	.LC3(%rip), %rdi
 241      000000
 242 0236 B8000000 		movl	$0, %eax
 242      00
 243 023b E8000000 		call	printf@PLT
 243      00
 106:argtable2.c   ****         printf("options[%d].flag    = %p\n", i, longoptions->options[i].flag);
 244              		.loc 1 106 0 discriminator 2
 245 0240 488B45E8 		movq	-24(%rbp), %rax
 246 0244 488B4008 		movq	8(%rax), %rax
 247 0248 8B55FC   		movl	-4(%rbp), %edx
 248 024b 4863D2   		movslq	%edx, %rdx
 249 024e 48C1E205 		salq	$5, %rdx
 250 0252 4801D0   		addq	%rdx, %rax
 251 0255 488B5010 		movq	16(%rax), %rdx
 252 0259 8B45FC   		movl	-4(%rbp), %eax
 253 025c 89C6     		movl	%eax, %esi
 254 025e 488D3D00 		leaq	.LC4(%rip), %rdi
 254      000000
 255 0265 B8000000 		movl	$0, %eax
 255      00
 256 026a E8000000 		call	printf@PLT
 256      00
 107:argtable2.c   ****         printf("options[%d].val     = %d\n", i, longoptions->options[i].val);
 257              		.loc 1 107 0 discriminator 2
 258 026f 488B45E8 		movq	-24(%rbp), %rax
 259 0273 488B4008 		movq	8(%rax), %rax
 260 0277 8B55FC   		movl	-4(%rbp), %edx
 261 027a 4863D2   		movslq	%edx, %rdx
 262 027d 48C1E205 		salq	$5, %rdx
 263 0281 4801D0   		addq	%rdx, %rax
 264 0284 8B5018   		movl	24(%rax), %edx
 265 0287 8B45FC   		movl	-4(%rbp), %eax
 266 028a 89C6     		movl	%eax, %esi
 267 028c 488D3D00 		leaq	.LC5(%rip), %rdi
 267      000000
 268 0293 B8000000 		movl	$0, %eax
 268      00
 269 0298 E8000000 		call	printf@PLT
 269      00
 102:argtable2.c   ****         {
 270              		.loc 1 102 0 discriminator 2
 271 029d 8345FC01 		addl	$1, -4(%rbp)
 272              	.L10:
 102:argtable2.c   ****         {
 273              		.loc 1 102 0 is_stmt 0 discriminator 1
 274 02a1 488B45E8 		movq	-24(%rbp), %rax
 275 02a5 8B4004   		movl	4(%rax), %eax
 276 02a8 3B45FC   		cmpl	-4(%rbp), %eax
 277 02ab 0F8F33FF 		jg	.L11
 277      FFFF
 108:argtable2.c   ****         }
 109:argtable2.c   ****     }
 278              		.loc 1 109 0 is_stmt 1
 279 02b1 C9       		leave
 280              		.cfi_def_cfa 7, 8
 281 02b2 C3       		ret
 282              		.cfi_endproc
 283              	.LFE2:
 286              	alloc_longoptions:
 287              	.LFB3:
 110:argtable2.c   **** #endif
 111:argtable2.c   **** 
 112:argtable2.c   **** static
 113:argtable2.c   **** struct longoptions* alloc_longoptions(struct arg_hdr **table)
 114:argtable2.c   ****     {
 288              		.loc 1 114 0
 289              		.cfi_startproc
 290 02b3 55       		pushq	%rbp
 291              		.cfi_def_cfa_offset 16
 292              		.cfi_offset 6, -16
 293 02b4 4889E5   		movq	%rsp, %rbp
 294              		.cfi_def_cfa_register 6
 295 02b7 4883EC60 		subq	$96, %rsp
 296 02bb 48897DA8 		movq	%rdi, -88(%rbp)
 115:argtable2.c   ****     struct longoptions *result;
 116:argtable2.c   ****     size_t nbytes;
 117:argtable2.c   ****     int noptions = 1;
 297              		.loc 1 117 0
 298 02bf C745BC01 		movl	$1, -68(%rbp)
 298      000000
 118:argtable2.c   ****     size_t longoptlen = 0;
 299              		.loc 1 118 0
 300 02c6 48C745C8 		movq	$0, -56(%rbp)
 300      00000000 
 119:argtable2.c   ****     int tabindex;
 120:argtable2.c   **** 
 121:argtable2.c   ****     /*
 122:argtable2.c   ****      * Determine the total number of option structs required
 123:argtable2.c   ****      * by counting the number of comma separated long options
 124:argtable2.c   ****      * in all table entries and return the count in noptions.
 125:argtable2.c   ****      * note: noptions starts at 1 not 0 because we getoptlong
 126:argtable2.c   ****      * requires a NULL option entry to terminate the option array.
 127:argtable2.c   ****      * While we are at it, count the number of chars required
 128:argtable2.c   ****      * to store private copies of all the longoption strings
 129:argtable2.c   ****      * and return that count in logoptlen.
 130:argtable2.c   ****      */
 131:argtable2.c   ****      tabindex=0;
 301              		.loc 1 131 0
 302 02ce C745C000 		movl	$0, -64(%rbp)
 302      000000
 303              	.L17:
 304              	.LBB2:
 132:argtable2.c   ****      do
 133:argtable2.c   ****         {
 134:argtable2.c   ****         const char *longopts = table[tabindex]->longopts;
 305              		.loc 1 134 0
 306 02d5 8B45C0   		movl	-64(%rbp), %eax
 307 02d8 4898     		cltq
 308 02da 488D14C5 		leaq	0(,%rax,8), %rdx
 308      00000000 
 309 02e2 488B45A8 		movq	-88(%rbp), %rax
 310 02e6 4801D0   		addq	%rdx, %rax
 311 02e9 488B00   		movq	(%rax), %rax
 312 02ec 488B4010 		movq	16(%rax), %rax
 313 02f0 488945D0 		movq	%rax, -48(%rbp)
 135:argtable2.c   ****         longoptlen += (longopts?strlen(longopts):0) + 1;
 314              		.loc 1 135 0
 315 02f4 48837DD0 		cmpq	$0, -48(%rbp)
 315      00
 316 02f9 7412     		je	.L13
 317              		.loc 1 135 0 is_stmt 0 discriminator 1
 318 02fb 488B45D0 		movq	-48(%rbp), %rax
 319 02ff 4889C7   		movq	%rax, %rdi
 320 0302 E8000000 		call	strlen@PLT
 320      00
 321 0307 4883C001 		addq	$1, %rax
 322 030b EB05     		jmp	.L14
 323              	.L13:
 324              		.loc 1 135 0 discriminator 2
 325 030d B8010000 		movl	$1, %eax
 325      00
 326              	.L14:
 327              		.loc 1 135 0 discriminator 3
 328 0312 480145C8 		addq	%rax, -56(%rbp)
 136:argtable2.c   ****         while (longopts)
 329              		.loc 1 136 0 is_stmt 1 discriminator 3
 330 0316 EB1D     		jmp	.L15
 331              	.L16:
 137:argtable2.c   ****             {
 138:argtable2.c   ****             noptions++;
 332              		.loc 1 138 0
 333 0318 8345BC01 		addl	$1, -68(%rbp)
 139:argtable2.c   ****             longopts = strchr(longopts+1,',');
 334              		.loc 1 139 0
 335 031c 488B45D0 		movq	-48(%rbp), %rax
 336 0320 4883C001 		addq	$1, %rax
 337 0324 BE2C0000 		movl	$44, %esi
 337      00
 338 0329 4889C7   		movq	%rax, %rdi
 339 032c E8000000 		call	strchr@PLT
 339      00
 340 0331 488945D0 		movq	%rax, -48(%rbp)
 341              	.L15:
 136:argtable2.c   ****         while (longopts)
 342              		.loc 1 136 0 discriminator 1
 343 0335 48837DD0 		cmpq	$0, -48(%rbp)
 343      00
 344 033a 75DC     		jne	.L16
 345              	.LBE2:
 140:argtable2.c   ****             }
 141:argtable2.c   ****         }while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 346              		.loc 1 141 0
 347 033c 8B45C0   		movl	-64(%rbp), %eax
 348 033f 8D5001   		leal	1(%rax), %edx
 349 0342 8955C0   		movl	%edx, -64(%rbp)
 350 0345 4898     		cltq
 351 0347 488D14C5 		leaq	0(,%rax,8), %rdx
 351      00000000 
 352 034f 488B45A8 		movq	-88(%rbp), %rax
 353 0353 4801D0   		addq	%rdx, %rax
 354 0356 488B00   		movq	(%rax), %rax
 355 0359 0FB600   		movzbl	(%rax), %eax
 356 035c 0FBEC0   		movsbl	%al, %eax
 357 035f 83E001   		andl	$1, %eax
 358 0362 85C0     		testl	%eax, %eax
 359 0364 0F846BFF 		je	.L17
 359      FFFF
 142:argtable2.c   ****     /*printf("%d long options consuming %d chars in total\n",noptions,longoptlen);*/
 143:argtable2.c   **** 
 144:argtable2.c   **** 
 145:argtable2.c   ****     /* allocate storage for return data structure as: */
 146:argtable2.c   ****     /* (struct longoptions) + (struct options)[noptions] + char[longoptlen] */
 147:argtable2.c   ****     nbytes = sizeof(struct longoptions)
 148:argtable2.c   ****            + sizeof(struct option)*noptions
 360              		.loc 1 148 0
 361 036a 8B45BC   		movl	-68(%rbp), %eax
 362 036d 4898     		cltq
 363 036f 48C1E005 		salq	$5, %rax
 364 0373 4889C2   		movq	%rax, %rdx
 149:argtable2.c   ****            + longoptlen;
 365              		.loc 1 149 0
 366 0376 488B45C8 		movq	-56(%rbp), %rax
 367 037a 4801D0   		addq	%rdx, %rax
 147:argtable2.c   ****            + sizeof(struct option)*noptions
 368              		.loc 1 147 0
 369 037d 4883C010 		addq	$16, %rax
 370 0381 488945E8 		movq	%rax, -24(%rbp)
 150:argtable2.c   ****     result = (struct longoptions*)malloc(nbytes);
 371              		.loc 1 150 0
 372 0385 488B45E8 		movq	-24(%rbp), %rax
 373 0389 4889C7   		movq	%rax, %rdi
 374 038c E8000000 		call	malloc@PLT
 374      00
 375 0391 488945F0 		movq	%rax, -16(%rbp)
 151:argtable2.c   ****     if (result)
 376              		.loc 1 151 0
 377 0395 48837DF0 		cmpq	$0, -16(%rbp)
 377      00
 378 039a 0F847B02 		je	.L18
 378      0000
 379              	.LBB3:
 152:argtable2.c   ****         {
 153:argtable2.c   ****         int option_index=0;
 380              		.loc 1 153 0
 381 03a0 C745C400 		movl	$0, -60(%rbp)
 381      000000
 154:argtable2.c   ****         char *store;
 155:argtable2.c   **** 
 156:argtable2.c   ****         result->getoptval=0;
 382              		.loc 1 156 0
 383 03a7 488B45F0 		movq	-16(%rbp), %rax
 384 03ab C7000000 		movl	$0, (%rax)
 384      0000
 157:argtable2.c   ****         result->noptions = noptions;
 385              		.loc 1 157 0
 386 03b1 488B45F0 		movq	-16(%rbp), %rax
 387 03b5 8B55BC   		movl	-68(%rbp), %edx
 388 03b8 895004   		movl	%edx, 4(%rax)
 158:argtable2.c   ****         result->options = (struct option*)(result + 1);
 389              		.loc 1 158 0
 390 03bb 488B45F0 		movq	-16(%rbp), %rax
 391 03bf 488D5010 		leaq	16(%rax), %rdx
 392 03c3 488B45F0 		movq	-16(%rbp), %rax
 393 03c7 48895008 		movq	%rdx, 8(%rax)
 159:argtable2.c   ****         store = (char*)(result->options + noptions);
 394              		.loc 1 159 0
 395 03cb 488B45F0 		movq	-16(%rbp), %rax
 396 03cf 488B4008 		movq	8(%rax), %rax
 397 03d3 8B55BC   		movl	-68(%rbp), %edx
 398 03d6 4863D2   		movslq	%edx, %rdx
 399 03d9 48C1E205 		salq	$5, %rdx
 400 03dd 4801D0   		addq	%rdx, %rax
 401 03e0 488945D8 		movq	%rax, -40(%rbp)
 160:argtable2.c   **** 
 161:argtable2.c   ****         for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 402              		.loc 1 161 0
 403 03e4 C745C000 		movl	$0, -64(%rbp)
 403      000000
 404 03eb E9920100 		jmp	.L19
 404      00
 405              	.L30:
 406              	.LBB4:
 162:argtable2.c   ****             {
 163:argtable2.c   ****             const char *longopts = table[tabindex]->longopts;
 407              		.loc 1 163 0
 408 03f0 8B45C0   		movl	-64(%rbp), %eax
 409 03f3 4898     		cltq
 410 03f5 488D14C5 		leaq	0(,%rax,8), %rdx
 410      00000000 
 411 03fd 488B45A8 		movq	-88(%rbp), %rax
 412 0401 4801D0   		addq	%rdx, %rax
 413 0404 488B00   		movq	(%rax), %rax
 414 0407 488B4010 		movq	16(%rax), %rax
 415 040b 488945E0 		movq	%rax, -32(%rbp)
 164:argtable2.c   **** 
 165:argtable2.c   ****             while(longopts && *longopts)
 416              		.loc 1 165 0
 417 040f E9540100 		jmp	.L20
 417      00
 418              	.L29:
 419              	.LBB5:
 166:argtable2.c   ****                 {
 167:argtable2.c   ****                 char *storestart = store;
 420              		.loc 1 167 0
 421 0414 488B45D8 		movq	-40(%rbp), %rax
 422 0418 488945F8 		movq	%rax, -8(%rbp)
 168:argtable2.c   **** 
 169:argtable2.c   ****                 /* copy progressive longopt strings into the store */
 170:argtable2.c   ****                 while (*longopts!=0 && *longopts!=',')
 423              		.loc 1 170 0
 424 041c EB1D     		jmp	.L21
 425              	.L23:
 171:argtable2.c   ****                     *store++ = *longopts++;
 426              		.loc 1 171 0
 427 041e 488B45D8 		movq	-40(%rbp), %rax
 428 0422 488D5001 		leaq	1(%rax), %rdx
 429 0426 488955D8 		movq	%rdx, -40(%rbp)
 430 042a 488B55E0 		movq	-32(%rbp), %rdx
 431 042e 488D4A01 		leaq	1(%rdx), %rcx
 432 0432 48894DE0 		movq	%rcx, -32(%rbp)
 433 0436 0FB612   		movzbl	(%rdx), %edx
 434 0439 8810     		movb	%dl, (%rax)
 435              	.L21:
 170:argtable2.c   ****                     *store++ = *longopts++;
 436              		.loc 1 170 0 discriminator 1
 437 043b 488B45E0 		movq	-32(%rbp), %rax
 438 043f 0FB600   		movzbl	(%rax), %eax
 439 0442 84C0     		testb	%al, %al
 440 0444 740B     		je	.L22
 170:argtable2.c   ****                     *store++ = *longopts++;
 441              		.loc 1 170 0 is_stmt 0 discriminator 2
 442 0446 488B45E0 		movq	-32(%rbp), %rax
 443 044a 0FB600   		movzbl	(%rax), %eax
 444 044d 3C2C     		cmpb	$44, %al
 445 044f 75CD     		jne	.L23
 446              	.L22:
 172:argtable2.c   ****                 *store++ = 0;
 447              		.loc 1 172 0 is_stmt 1
 448 0451 488B45D8 		movq	-40(%rbp), %rax
 449 0455 488D5001 		leaq	1(%rax), %rdx
 450 0459 488955D8 		movq	%rdx, -40(%rbp)
 451 045d C60000   		movb	$0, (%rax)
 173:argtable2.c   ****                 if (*longopts==',')
 452              		.loc 1 173 0
 453 0460 488B45E0 		movq	-32(%rbp), %rax
 454 0464 0FB600   		movzbl	(%rax), %eax
 455 0467 3C2C     		cmpb	$44, %al
 456 0469 7505     		jne	.L24
 174:argtable2.c   ****                     longopts++;
 457              		.loc 1 174 0
 458 046b 488345E0 		addq	$1, -32(%rbp)
 458      01
 459              	.L24:
 175:argtable2.c   ****                 /*fprintf(stderr,"storestart=\"%s\"\n",storestart);*/
 176:argtable2.c   **** 
 177:argtable2.c   ****                 result->options[option_index].name    = storestart;
 460              		.loc 1 177 0
 461 0470 488B45F0 		movq	-16(%rbp), %rax
 462 0474 488B4008 		movq	8(%rax), %rax
 463 0478 8B55C4   		movl	-60(%rbp), %edx
 464 047b 4863D2   		movslq	%edx, %rdx
 465 047e 48C1E205 		salq	$5, %rdx
 466 0482 4801C2   		addq	%rax, %rdx
 467 0485 488B45F8 		movq	-8(%rbp), %rax
 468 0489 488902   		movq	%rax, (%rdx)
 178:argtable2.c   ****                 result->options[option_index].flag    = &(result->getoptval);
 469              		.loc 1 178 0
 470 048c 488B45F0 		movq	-16(%rbp), %rax
 471 0490 488B4008 		movq	8(%rax), %rax
 472 0494 8B55C4   		movl	-60(%rbp), %edx
 473 0497 4863D2   		movslq	%edx, %rdx
 474 049a 48C1E205 		salq	$5, %rdx
 475 049e 4801C2   		addq	%rax, %rdx
 476 04a1 488B45F0 		movq	-16(%rbp), %rax
 477 04a5 48894210 		movq	%rax, 16(%rdx)
 179:argtable2.c   ****                 result->options[option_index].val     = tabindex;
 478              		.loc 1 179 0
 479 04a9 488B45F0 		movq	-16(%rbp), %rax
 480 04ad 488B4008 		movq	8(%rax), %rax
 481 04b1 8B55C4   		movl	-60(%rbp), %edx
 482 04b4 4863D2   		movslq	%edx, %rdx
 483 04b7 48C1E205 		salq	$5, %rdx
 484 04bb 4801C2   		addq	%rax, %rdx
 485 04be 8B45C0   		movl	-64(%rbp), %eax
 486 04c1 894218   		movl	%eax, 24(%rdx)
 180:argtable2.c   ****                 if (table[tabindex]->flag & ARG_HASOPTVALUE)
 487              		.loc 1 180 0
 488 04c4 8B45C0   		movl	-64(%rbp), %eax
 489 04c7 4898     		cltq
 490 04c9 488D14C5 		leaq	0(,%rax,8), %rdx
 490      00000000 
 491 04d1 488B45A8 		movq	-88(%rbp), %rax
 492 04d5 4801D0   		addq	%rdx, %rax
 493 04d8 488B00   		movq	(%rax), %rax
 494 04db 0FB600   		movzbl	(%rax), %eax
 495 04de 0FBEC0   		movsbl	%al, %eax
 496 04e1 83E004   		andl	$4, %eax
 497 04e4 85C0     		testl	%eax, %eax
 498 04e6 741E     		je	.L25
 181:argtable2.c   ****                     result->options[option_index].has_arg = 2;
 499              		.loc 1 181 0
 500 04e8 488B45F0 		movq	-16(%rbp), %rax
 501 04ec 488B4008 		movq	8(%rax), %rax
 502 04f0 8B55C4   		movl	-60(%rbp), %edx
 503 04f3 4863D2   		movslq	%edx, %rdx
 504 04f6 48C1E205 		salq	$5, %rdx
 505 04fa 4801D0   		addq	%rdx, %rax
 506 04fd C7400802 		movl	$2, 8(%rax)
 506      000000
 507 0504 EB5E     		jmp	.L26
 508              	.L25:
 182:argtable2.c   ****                 else if (table[tabindex]->flag & ARG_HASVALUE)
 509              		.loc 1 182 0
 510 0506 8B45C0   		movl	-64(%rbp), %eax
 511 0509 4898     		cltq
 512 050b 488D14C5 		leaq	0(,%rax,8), %rdx
 512      00000000 
 513 0513 488B45A8 		movq	-88(%rbp), %rax
 514 0517 4801D0   		addq	%rdx, %rax
 515 051a 488B00   		movq	(%rax), %rax
 516 051d 0FB600   		movzbl	(%rax), %eax
 517 0520 0FBEC0   		movsbl	%al, %eax
 518 0523 83E002   		andl	$2, %eax
 519 0526 85C0     		testl	%eax, %eax
 520 0528 741E     		je	.L27
 183:argtable2.c   ****                     result->options[option_index].has_arg = 1;
 521              		.loc 1 183 0
 522 052a 488B45F0 		movq	-16(%rbp), %rax
 523 052e 488B4008 		movq	8(%rax), %rax
 524 0532 8B55C4   		movl	-60(%rbp), %edx
 525 0535 4863D2   		movslq	%edx, %rdx
 526 0538 48C1E205 		salq	$5, %rdx
 527 053c 4801D0   		addq	%rdx, %rax
 528 053f C7400801 		movl	$1, 8(%rax)
 528      000000
 529 0546 EB1C     		jmp	.L26
 530              	.L27:
 184:argtable2.c   ****                 else
 185:argtable2.c   ****                     result->options[option_index].has_arg = 0;
 531              		.loc 1 185 0
 532 0548 488B45F0 		movq	-16(%rbp), %rax
 533 054c 488B4008 		movq	8(%rax), %rax
 534 0550 8B55C4   		movl	-60(%rbp), %edx
 535 0553 4863D2   		movslq	%edx, %rdx
 536 0556 48C1E205 		salq	$5, %rdx
 537 055a 4801D0   		addq	%rdx, %rax
 538 055d C7400800 		movl	$0, 8(%rax)
 538      000000
 539              	.L26:
 186:argtable2.c   **** 
 187:argtable2.c   ****                 option_index++;
 540              		.loc 1 187 0
 541 0564 8345C401 		addl	$1, -60(%rbp)
 542              	.L20:
 543              	.LBE5:
 165:argtable2.c   ****                 {
 544              		.loc 1 165 0 discriminator 1
 545 0568 48837DE0 		cmpq	$0, -32(%rbp)
 545      00
 546 056d 740F     		je	.L28
 165:argtable2.c   ****                 {
 547              		.loc 1 165 0 is_stmt 0 discriminator 2
 548 056f 488B45E0 		movq	-32(%rbp), %rax
 549 0573 0FB600   		movzbl	(%rax), %eax
 550 0576 84C0     		testb	%al, %al
 551 0578 0F8596FE 		jne	.L29
 551      FFFF
 552              	.L28:
 553              	.LBE4:
 161:argtable2.c   ****             {
 554              		.loc 1 161 0 is_stmt 1
 555 057e 8345C001 		addl	$1, -64(%rbp)
 556              	.L19:
 161:argtable2.c   ****             {
 557              		.loc 1 161 0 is_stmt 0 discriminator 1
 558 0582 8B45C0   		movl	-64(%rbp), %eax
 559 0585 4898     		cltq
 560 0587 488D14C5 		leaq	0(,%rax,8), %rdx
 560      00000000 
 561 058f 488B45A8 		movq	-88(%rbp), %rax
 562 0593 4801D0   		addq	%rdx, %rax
 563 0596 488B00   		movq	(%rax), %rax
 564 0599 0FB600   		movzbl	(%rax), %eax
 565 059c 0FBEC0   		movsbl	%al, %eax
 566 059f 83E001   		andl	$1, %eax
 567 05a2 85C0     		testl	%eax, %eax
 568 05a4 0F8446FE 		je	.L30
 568      FFFF
 188:argtable2.c   ****                 }
 189:argtable2.c   ****             }
 190:argtable2.c   ****         /* terminate the options array with a zero-filled entry */
 191:argtable2.c   ****         result->options[option_index].name    = 0;
 569              		.loc 1 191 0 is_stmt 1
 570 05aa 488B45F0 		movq	-16(%rbp), %rax
 571 05ae 488B4008 		movq	8(%rax), %rax
 572 05b2 8B55C4   		movl	-60(%rbp), %edx
 573 05b5 4863D2   		movslq	%edx, %rdx
 574 05b8 48C1E205 		salq	$5, %rdx
 575 05bc 4801D0   		addq	%rdx, %rax
 576 05bf 48C70000 		movq	$0, (%rax)
 576      000000
 192:argtable2.c   ****         result->options[option_index].has_arg = 0;
 577              		.loc 1 192 0
 578 05c6 488B45F0 		movq	-16(%rbp), %rax
 579 05ca 488B4008 		movq	8(%rax), %rax
 580 05ce 8B55C4   		movl	-60(%rbp), %edx
 581 05d1 4863D2   		movslq	%edx, %rdx
 582 05d4 48C1E205 		salq	$5, %rdx
 583 05d8 4801D0   		addq	%rdx, %rax
 584 05db C7400800 		movl	$0, 8(%rax)
 584      000000
 193:argtable2.c   ****         result->options[option_index].flag    = 0;
 585              		.loc 1 193 0
 586 05e2 488B45F0 		movq	-16(%rbp), %rax
 587 05e6 488B4008 		movq	8(%rax), %rax
 588 05ea 8B55C4   		movl	-60(%rbp), %edx
 589 05ed 4863D2   		movslq	%edx, %rdx
 590 05f0 48C1E205 		salq	$5, %rdx
 591 05f4 4801D0   		addq	%rdx, %rax
 592 05f7 48C74010 		movq	$0, 16(%rax)
 592      00000000 
 194:argtable2.c   ****         result->options[option_index].val     = 0;
 593              		.loc 1 194 0
 594 05ff 488B45F0 		movq	-16(%rbp), %rax
 595 0603 488B4008 		movq	8(%rax), %rax
 596 0607 8B55C4   		movl	-60(%rbp), %edx
 597 060a 4863D2   		movslq	%edx, %rdx
 598 060d 48C1E205 		salq	$5, %rdx
 599 0611 4801D0   		addq	%rdx, %rax
 600 0614 C7401800 		movl	$0, 24(%rax)
 600      000000
 601              	.L18:
 602              	.LBE3:
 195:argtable2.c   ****         }
 196:argtable2.c   **** 
 197:argtable2.c   ****     /*dump_longoptions(result);*/
 198:argtable2.c   ****     return result;
 603              		.loc 1 198 0
 604 061b 488B45F0 		movq	-16(%rbp), %rax
 199:argtable2.c   ****     }
 605              		.loc 1 199 0
 606 061f C9       		leave
 607              		.cfi_def_cfa 7, 8
 608 0620 C3       		ret
 609              		.cfi_endproc
 610              	.LFE3:
 613              	alloc_shortoptions:
 614              	.LFB4:
 200:argtable2.c   **** 
 201:argtable2.c   **** static
 202:argtable2.c   **** char* alloc_shortoptions(struct arg_hdr **table)
 203:argtable2.c   ****    {
 615              		.loc 1 203 0
 616              		.cfi_startproc
 617 0621 55       		pushq	%rbp
 618              		.cfi_def_cfa_offset 16
 619              		.cfi_offset 6, -16
 620 0622 4889E5   		movq	%rsp, %rbp
 621              		.cfi_def_cfa_register 6
 622 0625 4883EC50 		subq	$80, %rsp
 623 0629 48897DB8 		movq	%rdi, -72(%rbp)
 204:argtable2.c   ****    char *result;
 205:argtable2.c   ****    size_t len = 2;
 624              		.loc 1 205 0
 625 062d 48C745D0 		movq	$2, -48(%rbp)
 625      02000000 
 206:argtable2.c   ****    int tabindex;
 207:argtable2.c   **** 
 208:argtable2.c   ****    /* determine the total number of option chars required */
 209:argtable2.c   ****    for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 626              		.loc 1 209 0
 627 0635 C745CC00 		movl	$0, -52(%rbp)
 627      000000
 628 063c EB53     		jmp	.L33
 629              	.L36:
 630              	.LBB6:
 210:argtable2.c   ****        {
 211:argtable2.c   ****        struct arg_hdr *hdr = table[tabindex];
 631              		.loc 1 211 0
 632 063e 8B45CC   		movl	-52(%rbp), %eax
 633 0641 4898     		cltq
 634 0643 488D14C5 		leaq	0(,%rax,8), %rdx
 634      00000000 
 635 064b 488B45B8 		movq	-72(%rbp), %rax
 636 064f 4801D0   		addq	%rdx, %rax
 637 0652 488B00   		movq	(%rax), %rax
 638 0655 488945E8 		movq	%rax, -24(%rbp)
 212:argtable2.c   ****        len += 3 * (hdr->shortopts?strlen(hdr->shortopts):0);
 639              		.loc 1 212 0
 640 0659 488B45E8 		movq	-24(%rbp), %rax
 641 065d 488B4008 		movq	8(%rax), %rax
 642 0661 4885C0   		testq	%rax, %rax
 643 0664 741E     		je	.L34
 644              		.loc 1 212 0 is_stmt 0 discriminator 1
 645 0666 488B45E8 		movq	-24(%rbp), %rax
 646 066a 488B4008 		movq	8(%rax), %rax
 647 066e 4889C7   		movq	%rax, %rdi
 648 0671 E8000000 		call	strlen@PLT
 648      00
 649 0676 4889C2   		movq	%rax, %rdx
 650 0679 4889D0   		movq	%rdx, %rax
 651 067c 4801C0   		addq	%rax, %rax
 652 067f 4801D0   		addq	%rdx, %rax
 653 0682 EB05     		jmp	.L35
 654              	.L34:
 655              		.loc 1 212 0 discriminator 2
 656 0684 B8000000 		movl	$0, %eax
 656      00
 657              	.L35:
 658              		.loc 1 212 0 discriminator 3
 659 0689 480145D0 		addq	%rax, -48(%rbp)
 660              	.LBE6:
 209:argtable2.c   ****        {
 661              		.loc 1 209 0 is_stmt 1 discriminator 3
 662 068d 8345CC01 		addl	$1, -52(%rbp)
 663              	.L33:
 209:argtable2.c   ****        {
 664              		.loc 1 209 0 is_stmt 0 discriminator 1
 665 0691 8B45CC   		movl	-52(%rbp), %eax
 666 0694 4898     		cltq
 667 0696 488D14C5 		leaq	0(,%rax,8), %rdx
 667      00000000 
 668 069e 488B45B8 		movq	-72(%rbp), %rax
 669 06a2 4801D0   		addq	%rdx, %rax
 670 06a5 488B00   		movq	(%rax), %rax
 671 06a8 0FB600   		movzbl	(%rax), %eax
 672 06ab 0FBEC0   		movsbl	%al, %eax
 673 06ae 83E001   		andl	$1, %eax
 674 06b1 85C0     		testl	%eax, %eax
 675 06b3 7489     		je	.L36
 213:argtable2.c   ****        }
 214:argtable2.c   **** 
 215:argtable2.c   ****    result = malloc(len);
 676              		.loc 1 215 0 is_stmt 1
 677 06b5 488B45D0 		movq	-48(%rbp), %rax
 678 06b9 4889C7   		movq	%rax, %rdi
 679 06bc E8000000 		call	malloc@PLT
 679      00
 680 06c1 488945F0 		movq	%rax, -16(%rbp)
 216:argtable2.c   ****    if (result)
 681              		.loc 1 216 0
 682 06c5 48837DF0 		cmpq	$0, -16(%rbp)
 682      00
 683 06ca 0F84EE00 		je	.L37
 683      0000
 684              	.LBB7:
 217:argtable2.c   ****         {
 218:argtable2.c   ****         char *res = result;
 685              		.loc 1 218 0
 686 06d0 488B45F0 		movq	-16(%rbp), %rax
 687 06d4 488945D8 		movq	%rax, -40(%rbp)
 219:argtable2.c   **** 
 220:argtable2.c   ****         /* add a leading ':' so getopt return codes distinguish    */
 221:argtable2.c   ****         /* unrecognised option and options missing argument values */
 222:argtable2.c   ****         *res++=':';
 688              		.loc 1 222 0
 689 06d8 488B45D8 		movq	-40(%rbp), %rax
 690 06dc 488D5001 		leaq	1(%rax), %rdx
 691 06e0 488955D8 		movq	%rdx, -40(%rbp)
 692 06e4 C6003A   		movb	$58, (%rax)
 223:argtable2.c   **** 
 224:argtable2.c   ****         for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 693              		.loc 1 224 0
 694 06e7 C745CC00 		movl	$0, -52(%rbp)
 694      000000
 695 06ee E99C0000 		jmp	.L38
 695      00
 696              	.L43:
 697              	.LBB8:
 225:argtable2.c   ****             {
 226:argtable2.c   ****             struct arg_hdr *hdr = table[tabindex];
 698              		.loc 1 226 0
 699 06f3 8B45CC   		movl	-52(%rbp), %eax
 700 06f6 4898     		cltq
 701 06f8 488D14C5 		leaq	0(,%rax,8), %rdx
 701      00000000 
 702 0700 488B45B8 		movq	-72(%rbp), %rax
 703 0704 4801D0   		addq	%rdx, %rax
 704 0707 488B00   		movq	(%rax), %rax
 705 070a 488945F8 		movq	%rax, -8(%rbp)
 227:argtable2.c   ****             const char *shortopts = hdr->shortopts;
 706              		.loc 1 227 0
 707 070e 488B45F8 		movq	-8(%rbp), %rax
 708 0712 488B4008 		movq	8(%rax), %rax
 709 0716 488945E0 		movq	%rax, -32(%rbp)
 228:argtable2.c   ****             while(shortopts && *shortopts)
 710              		.loc 1 228 0
 711 071a EB5D     		jmp	.L39
 712              	.L42:
 229:argtable2.c   ****                 {
 230:argtable2.c   ****                 *res++ = *shortopts++;
 713              		.loc 1 230 0
 714 071c 488B45D8 		movq	-40(%rbp), %rax
 715 0720 488D5001 		leaq	1(%rax), %rdx
 716 0724 488955D8 		movq	%rdx, -40(%rbp)
 717 0728 488B55E0 		movq	-32(%rbp), %rdx
 718 072c 488D4A01 		leaq	1(%rdx), %rcx
 719 0730 48894DE0 		movq	%rcx, -32(%rbp)
 720 0734 0FB612   		movzbl	(%rdx), %edx
 721 0737 8810     		movb	%dl, (%rax)
 231:argtable2.c   ****                 if (hdr->flag & ARG_HASVALUE)
 722              		.loc 1 231 0
 723 0739 488B45F8 		movq	-8(%rbp), %rax
 724 073d 0FB600   		movzbl	(%rax), %eax
 725 0740 0FBEC0   		movsbl	%al, %eax
 726 0743 83E002   		andl	$2, %eax
 727 0746 85C0     		testl	%eax, %eax
 728 0748 740F     		je	.L40
 232:argtable2.c   ****                     *res++=':';
 729              		.loc 1 232 0
 730 074a 488B45D8 		movq	-40(%rbp), %rax
 731 074e 488D5001 		leaq	1(%rax), %rdx
 732 0752 488955D8 		movq	%rdx, -40(%rbp)
 733 0756 C6003A   		movb	$58, (%rax)
 734              	.L40:
 233:argtable2.c   ****                 if (hdr->flag & ARG_HASOPTVALUE)
 735              		.loc 1 233 0
 736 0759 488B45F8 		movq	-8(%rbp), %rax
 737 075d 0FB600   		movzbl	(%rax), %eax
 738 0760 0FBEC0   		movsbl	%al, %eax
 739 0763 83E004   		andl	$4, %eax
 740 0766 85C0     		testl	%eax, %eax
 741 0768 740F     		je	.L39
 234:argtable2.c   ****                     *res++=':';
 742              		.loc 1 234 0
 743 076a 488B45D8 		movq	-40(%rbp), %rax
 744 076e 488D5001 		leaq	1(%rax), %rdx
 745 0772 488955D8 		movq	%rdx, -40(%rbp)
 746 0776 C6003A   		movb	$58, (%rax)
 747              	.L39:
 228:argtable2.c   ****                 {
 748              		.loc 1 228 0 discriminator 1
 749 0779 48837DE0 		cmpq	$0, -32(%rbp)
 749      00
 750 077e 740B     		je	.L41
 228:argtable2.c   ****                 {
 751              		.loc 1 228 0 is_stmt 0 discriminator 2
 752 0780 488B45E0 		movq	-32(%rbp), %rax
 753 0784 0FB600   		movzbl	(%rax), %eax
 754 0787 84C0     		testb	%al, %al
 755 0789 7591     		jne	.L42
 756              	.L41:
 757              	.LBE8:
 224:argtable2.c   ****             {
 758              		.loc 1 224 0 is_stmt 1
 759 078b 8345CC01 		addl	$1, -52(%rbp)
 760              	.L38:
 224:argtable2.c   ****             {
 761              		.loc 1 224 0 is_stmt 0 discriminator 1
 762 078f 8B45CC   		movl	-52(%rbp), %eax
 763 0792 4898     		cltq
 764 0794 488D14C5 		leaq	0(,%rax,8), %rdx
 764      00000000 
 765 079c 488B45B8 		movq	-72(%rbp), %rax
 766 07a0 4801D0   		addq	%rdx, %rax
 767 07a3 488B00   		movq	(%rax), %rax
 768 07a6 0FB600   		movzbl	(%rax), %eax
 769 07a9 0FBEC0   		movsbl	%al, %eax
 770 07ac 83E001   		andl	$1, %eax
 771 07af 85C0     		testl	%eax, %eax
 772 07b1 0F843CFF 		je	.L43
 772      FFFF
 235:argtable2.c   ****                 }
 236:argtable2.c   ****             }
 237:argtable2.c   ****         /* null terminate the string */
 238:argtable2.c   ****         *res=0;
 773              		.loc 1 238 0 is_stmt 1
 774 07b7 488B45D8 		movq	-40(%rbp), %rax
 775 07bb C60000   		movb	$0, (%rax)
 776              	.L37:
 777              	.LBE7:
 239:argtable2.c   ****         }
 240:argtable2.c   **** 
 241:argtable2.c   ****    /*printf("alloc_shortoptions() returns \"%s\"\n",(result?result:"NULL"));*/
 242:argtable2.c   ****    return result;
 778              		.loc 1 242 0
 779 07be 488B45F0 		movq	-16(%rbp), %rax
 243:argtable2.c   ****    }
 780              		.loc 1 243 0
 781 07c2 C9       		leave
 782              		.cfi_def_cfa 7, 8
 783 07c3 C3       		ret
 784              		.cfi_endproc
 785              	.LFE4:
 788              	arg_endindex:
 789              	.LFB5:
 244:argtable2.c   **** 
 245:argtable2.c   **** 
 246:argtable2.c   **** /* return index of the table terminator entry */
 247:argtable2.c   **** static
 248:argtable2.c   **** int arg_endindex(struct arg_hdr **table)
 249:argtable2.c   ****     {
 790              		.loc 1 249 0
 791              		.cfi_startproc
 792 07c4 55       		pushq	%rbp
 793              		.cfi_def_cfa_offset 16
 794              		.cfi_offset 6, -16
 795 07c5 4889E5   		movq	%rsp, %rbp
 796              		.cfi_def_cfa_register 6
 797 07c8 48897DE8 		movq	%rdi, -24(%rbp)
 250:argtable2.c   ****     int tabindex=0;
 798              		.loc 1 250 0
 799 07cc C745FC00 		movl	$0, -4(%rbp)
 799      000000
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 800              		.loc 1 251 0
 801 07d3 EB04     		jmp	.L46
 802              	.L47:
 252:argtable2.c   ****         tabindex++;
 803              		.loc 1 252 0
 804 07d5 8345FC01 		addl	$1, -4(%rbp)
 805              	.L46:
 251:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 806              		.loc 1 251 0 discriminator 1
 807 07d9 8B45FC   		movl	-4(%rbp), %eax
 808 07dc 4898     		cltq
 809 07de 488D14C5 		leaq	0(,%rax,8), %rdx
 809      00000000 
 810 07e6 488B45E8 		movq	-24(%rbp), %rax
 811 07ea 4801D0   		addq	%rdx, %rax
 812 07ed 488B00   		movq	(%rax), %rax
 813 07f0 0FB600   		movzbl	(%rax), %eax
 814 07f3 0FBEC0   		movsbl	%al, %eax
 815 07f6 83E001   		andl	$1, %eax
 816 07f9 85C0     		testl	%eax, %eax
 817 07fb 74D8     		je	.L47
 253:argtable2.c   ****     return tabindex;
 818              		.loc 1 253 0
 819 07fd 8B45FC   		movl	-4(%rbp), %eax
 254:argtable2.c   ****     }
 820              		.loc 1 254 0
 821 0800 5D       		popq	%rbp
 822              		.cfi_def_cfa 7, 8
 823 0801 C3       		ret
 824              		.cfi_endproc
 825              	.LFE5:
 828              	arg_parse_tagged:
 829              	.LFB6:
 255:argtable2.c   **** 
 256:argtable2.c   **** 
 257:argtable2.c   **** static
 258:argtable2.c   **** void arg_parse_tagged(int argc, char **argv, struct arg_hdr **table, struct arg_end *endtable)
 259:argtable2.c   ****     {
 830              		.loc 1 259 0
 831              		.cfi_startproc
 832 0802 55       		pushq	%rbp
 833              		.cfi_def_cfa_offset 16
 834              		.cfi_offset 6, -16
 835 0803 4889E5   		movq	%rsp, %rbp
 836              		.cfi_def_cfa_register 6
 837 0806 4883EC60 		subq	$96, %rsp
 838 080a 897DBC   		movl	%edi, -68(%rbp)
 839 080d 488975B0 		movq	%rsi, -80(%rbp)
 840 0811 488955A8 		movq	%rdx, -88(%rbp)
 841 0815 48894DA0 		movq	%rcx, -96(%rbp)
 260:argtable2.c   ****     struct longoptions *longoptions;
 261:argtable2.c   ****     char *shortoptions;
 262:argtable2.c   ****     int copt;
 263:argtable2.c   **** 
 264:argtable2.c   ****     /*printf("arg_parse_tagged(%d,%p,%p,%p)\n",argc,argv,table,endtable);*/
 265:argtable2.c   **** 
 266:argtable2.c   ****     /* allocate short and long option arrays for the given opttable[].   */
 267:argtable2.c   ****     /* if the allocs fail then put an error msg in the last table entry. */
 268:argtable2.c   ****     longoptions  = alloc_longoptions(table);
 842              		.loc 1 268 0
 843 0819 488B45A8 		movq	-88(%rbp), %rax
 844 081d 4889C7   		movq	%rax, %rdi
 845 0820 E88EFAFF 		call	alloc_longoptions
 845      FF
 846 0825 488945E0 		movq	%rax, -32(%rbp)
 269:argtable2.c   ****     shortoptions = alloc_shortoptions(table);
 847              		.loc 1 269 0
 848 0829 488B45A8 		movq	-88(%rbp), %rax
 849 082d 4889C7   		movq	%rax, %rdi
 850 0830 E8ECFDFF 		call	alloc_shortoptions
 850      FF
 851 0835 488945E8 		movq	%rax, -24(%rbp)
 270:argtable2.c   ****     if (!longoptions || !shortoptions)
 852              		.loc 1 270 0
 853 0839 48837DE0 		cmpq	$0, -32(%rbp)
 853      00
 854 083e 7407     		je	.L50
 855              		.loc 1 270 0 is_stmt 0 discriminator 1
 856 0840 48837DE8 		cmpq	$0, -24(%rbp)
 856      00
 857 0845 7537     		jne	.L51
 858              	.L50:
 271:argtable2.c   ****         {
 272:argtable2.c   ****         /* one or both memory allocs failed */
 273:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_EMALLOC,NULL);
 859              		.loc 1 273 0 is_stmt 1
 860 0847 488B75A0 		movq	-96(%rbp), %rsi
 861 084b 488B45A0 		movq	-96(%rbp), %rax
 862 084f B9000000 		movl	$0, %ecx
 862      00
 863 0854 BA020000 		movl	$2, %edx
 863      00
 864 0859 4889C7   		movq	%rax, %rdi
 865 085c E89FF7FF 		call	arg_register_error
 865      FF
 274:argtable2.c   ****         /* free anything that was allocated (this is null safe) */
 275:argtable2.c   ****         free(shortoptions);
 866              		.loc 1 275 0
 867 0861 488B45E8 		movq	-24(%rbp), %rax
 868 0865 4889C7   		movq	%rax, %rdi
 869 0868 E8000000 		call	free@PLT
 869      00
 276:argtable2.c   ****         free(longoptions);
 870              		.loc 1 276 0
 871 086d 488B45E0 		movq	-32(%rbp), %rax
 872 0871 4889C7   		movq	%rax, %rdi
 873 0874 E8000000 		call	free@PLT
 873      00
 277:argtable2.c   ****         return;
 874              		.loc 1 277 0
 875 0879 E9180300 		jmp	.L49
 875      00
 876              	.L51:
 278:argtable2.c   ****         }
 279:argtable2.c   **** 
 280:argtable2.c   ****     /*dump_longoptions(longoptions);*/
 281:argtable2.c   **** 
 282:argtable2.c   ****     /* reset getopts internal option-index to zero, and disable error reporting */
 283:argtable2.c   ****     optind = 0;
 877              		.loc 1 283 0
 878 087e 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 878      000000
 879 0885 C7000000 		movl	$0, (%rax)
 879      0000
 284:argtable2.c   ****     opterr = 0;
 880              		.loc 1 284 0
 881 088b 488B0500 		movq	opterr@GOTPCREL(%rip), %rax
 881      000000
 882 0892 C7000000 		movl	$0, (%rax)
 882      0000
 285:argtable2.c   **** 
 286:argtable2.c   ****     /* fetch and process args using getopt_long */
 287:argtable2.c   ****     while( (copt=getopt_long(argc,argv,shortoptions,longoptions->options,NULL)) != -1)
 883              		.loc 1 287 0
 884 0898 E9B40200 		jmp	.L53
 884      00
 885              	.L65:
 288:argtable2.c   ****         {
 289:argtable2.c   ****         /*
 290:argtable2.c   ****         printf("optarg='%s'\n",optarg);
 291:argtable2.c   ****         printf("optind=%d\n",optind);
 292:argtable2.c   ****         printf("copt=%c\n",(char)copt);
 293:argtable2.c   ****         printf("optopt=%c (%d)\n",optopt, (int)(optopt));
 294:argtable2.c   ****         */
 295:argtable2.c   ****         switch(copt)
 886              		.loc 1 295 0
 887 089d 8B45CC   		movl	-52(%rbp), %eax
 888 08a0 83F83A   		cmpl	$58, %eax
 889 08a3 0F849B01 		je	.L55
 889      0000
 890 08a9 83F83F   		cmpl	$63, %eax
 891 08ac 0F842A01 		je	.L56
 891      0000
 892 08b2 85C0     		testl	%eax, %eax
 893 08b4 0F85C401 		jne	.L66
 893      0000
 894              	.LBB9:
 296:argtable2.c   ****             {
 297:argtable2.c   ****             case 0:
 298:argtable2.c   ****                 {
 299:argtable2.c   ****                 int tabindex = longoptions->getoptval;
 895              		.loc 1 299 0
 896 08ba 488B45E0 		movq	-32(%rbp), %rax
 897 08be 8B00     		movl	(%rax), %eax
 898 08c0 8945D0   		movl	%eax, -48(%rbp)
 300:argtable2.c   ****                 void *parent  = table[tabindex]->parent;
 899              		.loc 1 300 0
 900 08c3 8B45D0   		movl	-48(%rbp), %eax
 901 08c6 4898     		cltq
 902 08c8 488D14C5 		leaq	0(,%rax,8), %rdx
 902      00000000 
 903 08d0 488B45A8 		movq	-88(%rbp), %rax
 904 08d4 4801D0   		addq	%rdx, %rax
 905 08d7 488B00   		movq	(%rax), %rax
 906 08da 488B4030 		movq	48(%rax), %rax
 907 08de 488945F0 		movq	%rax, -16(%rbp)
 301:argtable2.c   ****                 /*printf("long option detected from argtable[%d]\n", tabindex);*/
 302:argtable2.c   ****                 if (optarg && optarg[0]==0 && (table[tabindex]->flag & ARG_HASVALUE))
 908              		.loc 1 302 0
 909 08e2 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 909      000000
 910 08e9 488B00   		movq	(%rax), %rax
 911 08ec 4885C0   		testq	%rax, %rax
 912 08ef 746A     		je	.L58
 913              		.loc 1 302 0 is_stmt 0 discriminator 1
 914 08f1 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 914      000000
 915 08f8 488B00   		movq	(%rax), %rax
 916 08fb 0FB600   		movzbl	(%rax), %eax
 917 08fe 84C0     		testb	%al, %al
 918 0900 7559     		jne	.L58
 919 0902 8B45D0   		movl	-48(%rbp), %eax
 920 0905 4898     		cltq
 921 0907 488D14C5 		leaq	0(,%rax,8), %rdx
 921      00000000 
 922 090f 488B45A8 		movq	-88(%rbp), %rax
 923 0913 4801D0   		addq	%rdx, %rax
 924 0916 488B00   		movq	(%rax), %rax
 925 0919 0FB600   		movzbl	(%rax), %eax
 926 091c 0FBEC0   		movsbl	%al, %eax
 927 091f 83E002   		andl	$2, %eax
 928 0922 85C0     		testl	%eax, %eax
 929 0924 7435     		je	.L58
 303:argtable2.c   ****                     {
 304:argtable2.c   ****                     /* printf(": long option %s requires an argument\n",argv[optind-1]); */
 305:argtable2.c   ****                     arg_register_error(endtable,endtable,ARG_EMISSARG,argv[optind-1]);
 930              		.loc 1 305 0 is_stmt 1
 931 0926 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 931      000000
 932 092d 8B00     		movl	(%rax), %eax
 933 092f 4898     		cltq
 934 0931 48C1E003 		salq	$3, %rax
 935 0935 488D50F8 		leaq	-8(%rax), %rdx
 936 0939 488B45B0 		movq	-80(%rbp), %rax
 937 093d 4801D0   		addq	%rdx, %rax
 938 0940 488B10   		movq	(%rax), %rdx
 939 0943 488B75A0 		movq	-96(%rbp), %rsi
 940 0947 488B45A0 		movq	-96(%rbp), %rax
 941 094b 4889D1   		movq	%rdx, %rcx
 942 094e BA050000 		movl	$5, %edx
 942      00
 943 0953 4889C7   		movq	%rax, %rdi
 944 0956 E8A5F6FF 		call	arg_register_error
 944      FF
 945              	.L58:
 306:argtable2.c   ****                     /* continue to scan the (empty) argument value to enforce argument count checki
 307:argtable2.c   ****                     }
 308:argtable2.c   ****                 if (table[tabindex]->scanfn)
 946              		.loc 1 308 0
 947 095b 8B45D0   		movl	-48(%rbp), %eax
 948 095e 4898     		cltq
 949 0960 488D14C5 		leaq	0(,%rax,8), %rdx
 949      00000000 
 950 0968 488B45A8 		movq	-88(%rbp), %rax
 951 096c 4801D0   		addq	%rdx, %rax
 952 096f 488B00   		movq	(%rax), %rax
 953 0972 488B4040 		movq	64(%rax), %rax
 954 0976 4885C0   		testq	%rax, %rax
 955 0979 745C     		je	.L59
 956              	.LBB10:
 309:argtable2.c   ****                     {
 310:argtable2.c   ****                     int errorcode = table[tabindex]->scanfn(parent,optarg);
 957              		.loc 1 310 0
 958 097b 8B45D0   		movl	-48(%rbp), %eax
 959 097e 4898     		cltq
 960 0980 488D14C5 		leaq	0(,%rax,8), %rdx
 960      00000000 
 961 0988 488B45A8 		movq	-88(%rbp), %rax
 962 098c 4801D0   		addq	%rdx, %rax
 963 098f 488B00   		movq	(%rax), %rax
 964 0992 488B4040 		movq	64(%rax), %rax
 965 0996 488B1500 		movq	optarg@GOTPCREL(%rip), %rdx
 965      000000
 966 099d 488B0A   		movq	(%rdx), %rcx
 967 09a0 488B55F0 		movq	-16(%rbp), %rdx
 968 09a4 4889CE   		movq	%rcx, %rsi
 969 09a7 4889D7   		movq	%rdx, %rdi
 970 09aa FFD0     		call	*%rax
 971 09ac 8945D4   		movl	%eax, -44(%rbp)
 311:argtable2.c   ****                     if (errorcode!=0)
 972              		.loc 1 311 0
 973 09af 837DD400 		cmpl	$0, -44(%rbp)
 974 09b3 7422     		je	.L59
 312:argtable2.c   ****                         arg_register_error(endtable,parent,errorcode,optarg);
 975              		.loc 1 312 0
 976 09b5 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 976      000000
 977 09bc 488B08   		movq	(%rax), %rcx
 978 09bf 8B55D4   		movl	-44(%rbp), %edx
 979 09c2 488B75F0 		movq	-16(%rbp), %rsi
 980 09c6 488B45A0 		movq	-96(%rbp), %rax
 981 09ca 4889C7   		movq	%rax, %rdi
 982 09cd E82EF6FF 		call	arg_register_error
 982      FF
 983              	.LBE10:
 984              	.LBE9:
 313:argtable2.c   ****                     }
 314:argtable2.c   ****                 }
 315:argtable2.c   ****                 break;
 985              		.loc 1 315 0
 986 09d2 E97A0100 		jmp	.L53
 986      00
 987              	.L59:
 988 09d7 E9750100 		jmp	.L53
 988      00
 989              	.L56:
 316:argtable2.c   **** 
 317:argtable2.c   ****             case '?':
 318:argtable2.c   ****                 /*
 319:argtable2.c   ****                 * getopt_long() found an unrecognised short option.
 320:argtable2.c   ****                 * if it was a short option its value is in optopt
 321:argtable2.c   ****                 * if it was a long option then optopt=0
 322:argtable2.c   ****                 */
 323:argtable2.c   ****                 switch (optopt)
 990              		.loc 1 323 0
 991 09dc 488B0500 		movq	optopt@GOTPCREL(%rip), %rax
 991      000000
 992 09e3 8B00     		movl	(%rax), %eax
 993 09e5 85C0     		testl	%eax, %eax
 994 09e7 7537     		jne	.L67
 324:argtable2.c   ****                     {
 325:argtable2.c   ****                     case 0:
 326:argtable2.c   ****                         /*printf("?0 unrecognised long option %s\n",argv[optind-1]);*/
 327:argtable2.c   ****                         arg_register_error(endtable,endtable,ARG_ELONGOPT,argv[optind-1]);
 995              		.loc 1 327 0
 996 09e9 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 996      000000
 997 09f0 8B00     		movl	(%rax), %eax
 998 09f2 4898     		cltq
 999 09f4 48C1E003 		salq	$3, %rax
 1000 09f8 488D50F8 		leaq	-8(%rax), %rdx
 1001 09fc 488B45B0 		movq	-80(%rbp), %rax
 1002 0a00 4801D0   		addq	%rdx, %rax
 1003 0a03 488B10   		movq	(%rax), %rdx
 1004 0a06 488B75A0 		movq	-96(%rbp), %rsi
 1005 0a0a 488B45A0 		movq	-96(%rbp), %rax
 1006 0a0e 4889D1   		movq	%rdx, %rcx
 1007 0a11 BA040000 		movl	$4, %edx
 1007      00
 1008 0a16 4889C7   		movq	%rax, %rdi
 1009 0a19 E8E2F5FF 		call	arg_register_error
 1009      FF
 328:argtable2.c   ****                         break;
 1010              		.loc 1 328 0
 1011 0a1e EB1F     		jmp	.L62
 1012              	.L67:
 329:argtable2.c   ****                     default:
 330:argtable2.c   ****                         /*printf("?* unrecognised short option '%c'\n",optopt);*/
 331:argtable2.c   ****                         arg_register_error(endtable,endtable,optopt,NULL);
 1013              		.loc 1 331 0
 1014 0a20 488B0500 		movq	optopt@GOTPCREL(%rip), %rax
 1014      000000
 1015 0a27 8B10     		movl	(%rax), %edx
 1016 0a29 488B75A0 		movq	-96(%rbp), %rsi
 1017 0a2d 488B45A0 		movq	-96(%rbp), %rax
 1018 0a31 B9000000 		movl	$0, %ecx
 1018      00
 1019 0a36 4889C7   		movq	%rax, %rdi
 1020 0a39 E8C2F5FF 		call	arg_register_error
 1020      FF
 332:argtable2.c   ****                         break;
 1021              		.loc 1 332 0
 1022 0a3e 90       		nop
 1023              	.L62:
 333:argtable2.c   ****                     }
 334:argtable2.c   ****                 break;
 1024              		.loc 1 334 0
 1025 0a3f E90D0100 		jmp	.L53
 1025      00
 1026              	.L55:
 335:argtable2.c   **** 
 336:argtable2.c   ****             case':':
 337:argtable2.c   ****                 /*
 338:argtable2.c   ****                 * getopt_long() found an option with its argument missing.
 339:argtable2.c   ****                 */
 340:argtable2.c   ****                 /*printf(": option %s requires an argument\n",argv[optind-1]); */
 341:argtable2.c   ****                 arg_register_error(endtable,endtable,ARG_EMISSARG,argv[optind-1]); 
 1027              		.loc 1 341 0
 1028 0a44 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1028      000000
 1029 0a4b 8B00     		movl	(%rax), %eax
 1030 0a4d 4898     		cltq
 1031 0a4f 48C1E003 		salq	$3, %rax
 1032 0a53 488D50F8 		leaq	-8(%rax), %rdx
 1033 0a57 488B45B0 		movq	-80(%rbp), %rax
 1034 0a5b 4801D0   		addq	%rdx, %rax
 1035 0a5e 488B10   		movq	(%rax), %rdx
 1036 0a61 488B75A0 		movq	-96(%rbp), %rsi
 1037 0a65 488B45A0 		movq	-96(%rbp), %rax
 1038 0a69 4889D1   		movq	%rdx, %rcx
 1039 0a6c BA050000 		movl	$5, %edx
 1039      00
 1040 0a71 4889C7   		movq	%rax, %rdi
 1041 0a74 E887F5FF 		call	arg_register_error
 1041      FF
 342:argtable2.c   ****                 break;
 1042              		.loc 1 342 0
 1043 0a79 E9D30000 		jmp	.L53
 1043      00
 1044              	.L66:
 1045              	.LBB11:
 343:argtable2.c   **** 
 344:argtable2.c   ****             default:
 345:argtable2.c   ****                 {
 346:argtable2.c   ****                 /* getopt_long() found a valid short option */
 347:argtable2.c   ****                 int tabindex = find_shortoption(table,(char)copt);
 1046              		.loc 1 347 0
 1047 0a7e 8B45CC   		movl	-52(%rbp), %eax
 1048 0a81 0FBED0   		movsbl	%al, %edx
 1049 0a84 488B45A8 		movq	-88(%rbp), %rax
 1050 0a88 89D6     		movl	%edx, %esi
 1051 0a8a 4889C7   		movq	%rax, %rdi
 1052 0a8d E86BF6FF 		call	find_shortoption
 1052      FF
 1053 0a92 8945D8   		movl	%eax, -40(%rbp)
 348:argtable2.c   ****                 /*printf("short option detected from argtable[%d]\n", tabindex);*/
 349:argtable2.c   ****                 if (tabindex==-1)
 1054              		.loc 1 349 0
 1055 0a95 837DD8FF 		cmpl	$-1, -40(%rbp)
 1056 0a99 751D     		jne	.L63
 350:argtable2.c   ****                     {
 351:argtable2.c   ****                     /* should never get here - but handle it just in case */
 352:argtable2.c   ****                     /*printf("unrecognised short option %d\n",copt);*/
 353:argtable2.c   ****                     arg_register_error(endtable,endtable,copt,NULL);
 1057              		.loc 1 353 0
 1058 0a9b 8B55CC   		movl	-52(%rbp), %edx
 1059 0a9e 488B75A0 		movq	-96(%rbp), %rsi
 1060 0aa2 488B45A0 		movq	-96(%rbp), %rax
 1061 0aa6 B9000000 		movl	$0, %ecx
 1061      00
 1062 0aab 4889C7   		movq	%rax, %rdi
 1063 0aae E84DF5FF 		call	arg_register_error
 1063      FF
 1064 0ab3 E9980000 		jmp	.L64
 1064      00
 1065              	.L63:
 354:argtable2.c   ****                     }
 355:argtable2.c   ****                 else
 356:argtable2.c   ****                     {
 357:argtable2.c   ****                     if (table[tabindex]->scanfn)
 1066              		.loc 1 357 0
 1067 0ab8 8B45D8   		movl	-40(%rbp), %eax
 1068 0abb 4898     		cltq
 1069 0abd 488D14C5 		leaq	0(,%rax,8), %rdx
 1069      00000000 
 1070 0ac5 488B45A8 		movq	-88(%rbp), %rax
 1071 0ac9 4801D0   		addq	%rdx, %rax
 1072 0acc 488B00   		movq	(%rax), %rax
 1073 0acf 488B4040 		movq	64(%rax), %rax
 1074 0ad3 4885C0   		testq	%rax, %rax
 1075 0ad6 7478     		je	.L64
 1076              	.LBB12:
 358:argtable2.c   ****                         {
 359:argtable2.c   ****                         void *parent  = table[tabindex]->parent;
 1077              		.loc 1 359 0
 1078 0ad8 8B45D8   		movl	-40(%rbp), %eax
 1079 0adb 4898     		cltq
 1080 0add 488D14C5 		leaq	0(,%rax,8), %rdx
 1080      00000000 
 1081 0ae5 488B45A8 		movq	-88(%rbp), %rax
 1082 0ae9 4801D0   		addq	%rdx, %rax
 1083 0aec 488B00   		movq	(%rax), %rax
 1084 0aef 488B4030 		movq	48(%rax), %rax
 1085 0af3 488945F8 		movq	%rax, -8(%rbp)
 360:argtable2.c   ****                         int errorcode = table[tabindex]->scanfn(parent,optarg);
 1086              		.loc 1 360 0
 1087 0af7 8B45D8   		movl	-40(%rbp), %eax
 1088 0afa 4898     		cltq
 1089 0afc 488D14C5 		leaq	0(,%rax,8), %rdx
 1089      00000000 
 1090 0b04 488B45A8 		movq	-88(%rbp), %rax
 1091 0b08 4801D0   		addq	%rdx, %rax
 1092 0b0b 488B00   		movq	(%rax), %rax
 1093 0b0e 488B4040 		movq	64(%rax), %rax
 1094 0b12 488B1500 		movq	optarg@GOTPCREL(%rip), %rdx
 1094      000000
 1095 0b19 488B0A   		movq	(%rdx), %rcx
 1096 0b1c 488B55F8 		movq	-8(%rbp), %rdx
 1097 0b20 4889CE   		movq	%rcx, %rsi
 1098 0b23 4889D7   		movq	%rdx, %rdi
 1099 0b26 FFD0     		call	*%rax
 1100 0b28 8945DC   		movl	%eax, -36(%rbp)
 361:argtable2.c   ****                         if (errorcode!=0)
 1101              		.loc 1 361 0
 1102 0b2b 837DDC00 		cmpl	$0, -36(%rbp)
 1103 0b2f 741F     		je	.L64
 362:argtable2.c   ****                             arg_register_error(endtable,parent,errorcode,optarg);
 1104              		.loc 1 362 0
 1105 0b31 488B0500 		movq	optarg@GOTPCREL(%rip), %rax
 1105      000000
 1106 0b38 488B08   		movq	(%rax), %rcx
 1107 0b3b 8B55DC   		movl	-36(%rbp), %edx
 1108 0b3e 488B75F8 		movq	-8(%rbp), %rsi
 1109 0b42 488B45A0 		movq	-96(%rbp), %rax
 1110 0b46 4889C7   		movq	%rax, %rdi
 1111 0b49 E8B2F4FF 		call	arg_register_error
 1111      FF
 1112              	.LBE12:
 363:argtable2.c   ****                         }
 364:argtable2.c   ****                     }
 365:argtable2.c   ****                 break;
 1113              		.loc 1 365 0
 1114 0b4e EB00     		jmp	.L68
 1115              	.L64:
 1116              	.L68:
 1117 0b50 90       		nop
 1118              	.L53:
 1119              	.LBE11:
 287:argtable2.c   ****         {
 1120              		.loc 1 287 0 discriminator 1
 1121 0b51 488B45E0 		movq	-32(%rbp), %rax
 1122 0b55 488B4808 		movq	8(%rax), %rcx
 1123 0b59 488B55E8 		movq	-24(%rbp), %rdx
 1124 0b5d 488B75B0 		movq	-80(%rbp), %rsi
 1125 0b61 8B45BC   		movl	-68(%rbp), %eax
 1126 0b64 41B80000 		movl	$0, %r8d
 1126      0000
 1127 0b6a 89C7     		movl	%eax, %edi
 1128 0b6c E8000000 		call	getopt_long@PLT
 1128      00
 1129 0b71 8945CC   		movl	%eax, -52(%rbp)
 1130 0b74 837DCCFF 		cmpl	$-1, -52(%rbp)
 1131 0b78 0F851FFD 		jne	.L65
 1131      FFFF
 366:argtable2.c   ****                 }
 367:argtable2.c   ****             }
 368:argtable2.c   ****         }
 369:argtable2.c   **** 
 370:argtable2.c   ****     free(shortoptions);
 1132              		.loc 1 370 0
 1133 0b7e 488B45E8 		movq	-24(%rbp), %rax
 1134 0b82 4889C7   		movq	%rax, %rdi
 1135 0b85 E8000000 		call	free@PLT
 1135      00
 371:argtable2.c   ****     free(longoptions);
 1136              		.loc 1 371 0
 1137 0b8a 488B45E0 		movq	-32(%rbp), %rax
 1138 0b8e 4889C7   		movq	%rax, %rdi
 1139 0b91 E8000000 		call	free@PLT
 1139      00
 1140              	.L49:
 372:argtable2.c   ****     }
 1141              		.loc 1 372 0
 1142 0b96 C9       		leave
 1143              		.cfi_def_cfa 7, 8
 1144 0b97 C3       		ret
 1145              		.cfi_endproc
 1146              	.LFE6:
 1149              	arg_parse_untagged:
 1150              	.LFB7:
 373:argtable2.c   **** 
 374:argtable2.c   **** 
 375:argtable2.c   **** static
 376:argtable2.c   **** void arg_parse_untagged(int argc, char **argv, struct arg_hdr **table, struct arg_end *endtable)
 377:argtable2.c   ****     {
 1151              		.loc 1 377 0
 1152              		.cfi_startproc
 1153 0b98 55       		pushq	%rbp
 1154              		.cfi_def_cfa_offset 16
 1155              		.cfi_offset 6, -16
 1156 0b99 4889E5   		movq	%rsp, %rbp
 1157              		.cfi_def_cfa_register 6
 1158 0b9c 4883EC50 		subq	$80, %rsp
 1159 0ba0 897DCC   		movl	%edi, -52(%rbp)
 1160 0ba3 488975C0 		movq	%rsi, -64(%rbp)
 1161 0ba7 488955B8 		movq	%rdx, -72(%rbp)
 1162 0bab 48894DB0 		movq	%rcx, -80(%rbp)
 378:argtable2.c   ****     int tabindex=0;
 1163              		.loc 1 378 0
 1164 0baf C745DC00 		movl	$0, -36(%rbp)
 1164      000000
 379:argtable2.c   ****     int errorlast=0;
 1165              		.loc 1 379 0
 1166 0bb6 C745E000 		movl	$0, -32(%rbp)
 1166      000000
 380:argtable2.c   ****     const char *optarglast = NULL;
 1167              		.loc 1 380 0
 1168 0bbd 48C745E8 		movq	$0, -24(%rbp)
 1168      00000000 
 381:argtable2.c   ****     void *parentlast = NULL;
 1169              		.loc 1 381 0
 1170 0bc5 48C745F0 		movq	$0, -16(%rbp)
 1170      00000000 
 382:argtable2.c   **** 
 383:argtable2.c   ****     /*printf("arg_parse_untagged(%d,%p,%p,%p)\n",argc,argv,table,endtable);*/
 384:argtable2.c   ****     while (!(table[tabindex]->flag&ARG_TERMINATOR))
 1171              		.loc 1 384 0
 1172 0bcd E9430100 		jmp	.L70
 1172      00
 1173              	.L77:
 1174              	.LBB13:
 385:argtable2.c   ****         {
 386:argtable2.c   ****         void *parent;
 387:argtable2.c   ****         int errorcode;
 388:argtable2.c   **** 
 389:argtable2.c   ****         /* if we have exhausted our argv[optind] entries then we have finished */
 390:argtable2.c   ****         if (optind>=argc)
 1175              		.loc 1 390 0
 1176 0bd2 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1176      000000
 1177 0bd9 8B00     		movl	(%rax), %eax
 1178 0bdb 3B45CC   		cmpl	-52(%rbp), %eax
 1179 0bde 7C05     		jl	.L71
 391:argtable2.c   ****             {
 392:argtable2.c   ****             /*printf("arg_parse_untagged(): argv[] exhausted\n");*/
 393:argtable2.c   ****             return;
 1180              		.loc 1 393 0
 1181 0be0 E9DE0100 		jmp	.L69
 1181      00
 1182              	.L71:
 394:argtable2.c   ****             }
 395:argtable2.c   **** 
 396:argtable2.c   ****         /* skip table entries with non-null long or short options (they are not untagged entries) *
 397:argtable2.c   ****         if (table[tabindex]->longopts || table[tabindex]->shortopts)
 1183              		.loc 1 397 0
 1184 0be5 8B45DC   		movl	-36(%rbp), %eax
 1185 0be8 4898     		cltq
 1186 0bea 488D14C5 		leaq	0(,%rax,8), %rdx
 1186      00000000 
 1187 0bf2 488B45B8 		movq	-72(%rbp), %rax
 1188 0bf6 4801D0   		addq	%rdx, %rax
 1189 0bf9 488B00   		movq	(%rax), %rax
 1190 0bfc 488B4010 		movq	16(%rax), %rax
 1191 0c00 4885C0   		testq	%rax, %rax
 1192 0c03 7520     		jne	.L73
 1193              		.loc 1 397 0 is_stmt 0 discriminator 1
 1194 0c05 8B45DC   		movl	-36(%rbp), %eax
 1195 0c08 4898     		cltq
 1196 0c0a 488D14C5 		leaq	0(,%rax,8), %rdx
 1196      00000000 
 1197 0c12 488B45B8 		movq	-72(%rbp), %rax
 1198 0c16 4801D0   		addq	%rdx, %rax
 1199 0c19 488B00   		movq	(%rax), %rax
 1200 0c1c 488B4008 		movq	8(%rax), %rax
 1201 0c20 4885C0   		testq	%rax, %rax
 1202 0c23 7409     		je	.L74
 1203              	.L73:
 398:argtable2.c   ****             {
 399:argtable2.c   ****             /*printf("arg_parse_untagged(): skipping argtable[%d] (tagged argument)\n",tabindex);*/
 400:argtable2.c   ****             tabindex++;
 1204              		.loc 1 400 0 is_stmt 1
 1205 0c25 8345DC01 		addl	$1, -36(%rbp)
 401:argtable2.c   ****             continue;
 1206              		.loc 1 401 0
 1207 0c29 E9E70000 		jmp	.L70
 1207      00
 1208              	.L74:
 402:argtable2.c   ****             }
 403:argtable2.c   **** 
 404:argtable2.c   ****         /* skip table entries with NULL scanfn */
 405:argtable2.c   ****         if (!(table[tabindex]->scanfn))
 1209              		.loc 1 405 0
 1210 0c2e 8B45DC   		movl	-36(%rbp), %eax
 1211 0c31 4898     		cltq
 1212 0c33 488D14C5 		leaq	0(,%rax,8), %rdx
 1212      00000000 
 1213 0c3b 488B45B8 		movq	-72(%rbp), %rax
 1214 0c3f 4801D0   		addq	%rdx, %rax
 1215 0c42 488B00   		movq	(%rax), %rax
 1216 0c45 488B4040 		movq	64(%rax), %rax
 1217 0c49 4885C0   		testq	%rax, %rax
 1218 0c4c 7509     		jne	.L75
 406:argtable2.c   ****             {
 407:argtable2.c   ****             /*printf("arg_parse_untagged(): skipping argtable[%d] (NULL scanfn)\n",tabindex);*/
 408:argtable2.c   ****             tabindex++;
 1219              		.loc 1 408 0
 1220 0c4e 8345DC01 		addl	$1, -36(%rbp)
 409:argtable2.c   ****             continue;
 1221              		.loc 1 409 0
 1222 0c52 E9BE0000 		jmp	.L70
 1222      00
 1223              	.L75:
 410:argtable2.c   ****             }
 411:argtable2.c   **** 
 412:argtable2.c   ****         /* attempt to scan the current argv[optind] with the current     */
 413:argtable2.c   ****         /* table[tabindex] entry. If it succeeds then keep it, otherwise */
 414:argtable2.c   ****         /* try again with the next table[] entry.                        */
 415:argtable2.c   ****         parent = table[tabindex]->parent;
 1224              		.loc 1 415 0
 1225 0c57 8B45DC   		movl	-36(%rbp), %eax
 1226 0c5a 4898     		cltq
 1227 0c5c 488D14C5 		leaq	0(,%rax,8), %rdx
 1227      00000000 
 1228 0c64 488B45B8 		movq	-72(%rbp), %rax
 1229 0c68 4801D0   		addq	%rdx, %rax
 1230 0c6b 488B00   		movq	(%rax), %rax
 1231 0c6e 488B4030 		movq	48(%rax), %rax
 1232 0c72 488945F8 		movq	%rax, -8(%rbp)
 416:argtable2.c   ****         errorcode = table[tabindex]->scanfn(parent,argv[optind]);
 1233              		.loc 1 416 0
 1234 0c76 8B45DC   		movl	-36(%rbp), %eax
 1235 0c79 4898     		cltq
 1236 0c7b 488D14C5 		leaq	0(,%rax,8), %rdx
 1236      00000000 
 1237 0c83 488B45B8 		movq	-72(%rbp), %rax
 1238 0c87 4801D0   		addq	%rdx, %rax
 1239 0c8a 488B00   		movq	(%rax), %rax
 1240 0c8d 488B4040 		movq	64(%rax), %rax
 1241 0c91 488B1500 		movq	optind@GOTPCREL(%rip), %rdx
 1241      000000
 1242 0c98 8B12     		movl	(%rdx), %edx
 1243 0c9a 4863D2   		movslq	%edx, %rdx
 1244 0c9d 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1244      00000000 
 1245 0ca5 488B55C0 		movq	-64(%rbp), %rdx
 1246 0ca9 4801CA   		addq	%rcx, %rdx
 1247 0cac 488B0A   		movq	(%rdx), %rcx
 1248 0caf 488B55F8 		movq	-8(%rbp), %rdx
 1249 0cb3 4889CE   		movq	%rcx, %rsi
 1250 0cb6 4889D7   		movq	%rdx, %rdi
 1251 0cb9 FFD0     		call	*%rax
 1252 0cbb 8945E4   		movl	%eax, -28(%rbp)
 417:argtable2.c   ****         if (errorcode==0)
 1253              		.loc 1 417 0
 1254 0cbe 837DE400 		cmpl	$0, -28(%rbp)
 1255 0cc2 751E     		jne	.L76
 418:argtable2.c   ****             {
 419:argtable2.c   ****             /* success, move onto next argv[optind] but stay with same table[tabindex] */
 420:argtable2.c   ****             /*printf("arg_parse_untagged(): argtable[%d] successfully matched\n",tabindex);*/
 421:argtable2.c   ****             optind++;
 1256              		.loc 1 421 0
 1257 0cc4 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1257      000000
 1258 0ccb 8B00     		movl	(%rax), %eax
 1259 0ccd 8D5001   		leal	1(%rax), %edx
 1260 0cd0 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1260      000000
 1261 0cd7 8910     		movl	%edx, (%rax)
 422:argtable2.c   **** 
 423:argtable2.c   ****             /* clear the last tentative error */
 424:argtable2.c   ****             errorlast = 0;
 1262              		.loc 1 424 0
 1263 0cd9 C745E000 		movl	$0, -32(%rbp)
 1263      000000
 1264 0ce0 EB33     		jmp	.L70
 1265              	.L76:
 425:argtable2.c   ****             }
 426:argtable2.c   ****         else
 427:argtable2.c   ****             {
 428:argtable2.c   ****             /* failure, try same argv[optind] with next table[tabindex] entry */
 429:argtable2.c   ****             /*printf("arg_parse_untagged(): argtable[%d] failed match\n",tabindex);*/
 430:argtable2.c   ****             tabindex++;
 1266              		.loc 1 430 0
 1267 0ce2 8345DC01 		addl	$1, -36(%rbp)
 431:argtable2.c   **** 
 432:argtable2.c   ****             /* remember this as a tentative error we may wish to reinstate later */
 433:argtable2.c   ****             errorlast = errorcode;
 1268              		.loc 1 433 0
 1269 0ce6 8B45E4   		movl	-28(%rbp), %eax
 1270 0ce9 8945E0   		movl	%eax, -32(%rbp)
 434:argtable2.c   ****             optarglast = argv[optind];
 1271              		.loc 1 434 0
 1272 0cec 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1272      000000
 1273 0cf3 8B00     		movl	(%rax), %eax
 1274 0cf5 4898     		cltq
 1275 0cf7 488D14C5 		leaq	0(,%rax,8), %rdx
 1275      00000000 
 1276 0cff 488B45C0 		movq	-64(%rbp), %rax
 1277 0d03 4801D0   		addq	%rdx, %rax
 1278 0d06 488B00   		movq	(%rax), %rax
 1279 0d09 488945E8 		movq	%rax, -24(%rbp)
 435:argtable2.c   ****             parentlast = parent;
 1280              		.loc 1 435 0
 1281 0d0d 488B45F8 		movq	-8(%rbp), %rax
 1282 0d11 488945F0 		movq	%rax, -16(%rbp)
 1283              	.L70:
 1284              	.LBE13:
 384:argtable2.c   ****         {
 1285              		.loc 1 384 0 discriminator 1
 1286 0d15 8B45DC   		movl	-36(%rbp), %eax
 1287 0d18 4898     		cltq
 1288 0d1a 488D14C5 		leaq	0(,%rax,8), %rdx
 1288      00000000 
 1289 0d22 488B45B8 		movq	-72(%rbp), %rax
 1290 0d26 4801D0   		addq	%rdx, %rax
 1291 0d29 488B00   		movq	(%rax), %rax
 1292 0d2c 0FB600   		movzbl	(%rax), %eax
 1293 0d2f 0FBEC0   		movsbl	%al, %eax
 1294 0d32 83E001   		andl	$1, %eax
 1295 0d35 85C0     		testl	%eax, %eax
 1296 0d37 0F8495FE 		je	.L77
 1296      FFFF
 436:argtable2.c   ****             }
 437:argtable2.c   **** 
 438:argtable2.c   ****         }
 439:argtable2.c   **** 
 440:argtable2.c   ****     /* if a tenative error still remains at this point then register it as a proper error */
 441:argtable2.c   ****     if (errorlast)
 1297              		.loc 1 441 0
 1298 0d3d 837DE000 		cmpl	$0, -32(%rbp)
 1299 0d41 742E     		je	.L78
 442:argtable2.c   ****         {
 443:argtable2.c   ****         arg_register_error(endtable,parentlast,errorlast,optarglast);
 1300              		.loc 1 443 0
 1301 0d43 488B4DE8 		movq	-24(%rbp), %rcx
 1302 0d47 8B55E0   		movl	-32(%rbp), %edx
 1303 0d4a 488B75F0 		movq	-16(%rbp), %rsi
 1304 0d4e 488B45B0 		movq	-80(%rbp), %rax
 1305 0d52 4889C7   		movq	%rax, %rdi
 1306 0d55 E8A6F2FF 		call	arg_register_error
 1306      FF
 444:argtable2.c   ****         optind++;
 1307              		.loc 1 444 0
 1308 0d5a 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1308      000000
 1309 0d61 8B00     		movl	(%rax), %eax
 1310 0d63 8D5001   		leal	1(%rax), %edx
 1311 0d66 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1311      000000
 1312 0d6d 8910     		movl	%edx, (%rax)
 445:argtable2.c   ****         }
 446:argtable2.c   **** 
 447:argtable2.c   ****     /* only get here when not all argv[] entries were consumed */
 448:argtable2.c   ****     /* register an error for each unused argv[] entry */
 449:argtable2.c   ****     while (optind<argc)
 1313              		.loc 1 449 0
 1314 0d6f EB43     		jmp	.L79
 1315              	.L78:
 1316 0d71 EB41     		jmp	.L79
 1317              	.L80:
 450:argtable2.c   ****         {
 451:argtable2.c   ****         /*printf("arg_parse_untagged(): argv[%d]=\"%s\" not consumed\n",optind,argv[optind]);*/
 452:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_ENOMATCH,argv[optind++]);
 1318              		.loc 1 452 0
 1319 0d73 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1319      000000
 1320 0d7a 8B00     		movl	(%rax), %eax
 1321 0d7c 8D4801   		leal	1(%rax), %ecx
 1322 0d7f 488B1500 		movq	optind@GOTPCREL(%rip), %rdx
 1322      000000
 1323 0d86 890A     		movl	%ecx, (%rdx)
 1324 0d88 4898     		cltq
 1325 0d8a 488D14C5 		leaq	0(,%rax,8), %rdx
 1325      00000000 
 1326 0d92 488B45C0 		movq	-64(%rbp), %rax
 1327 0d96 4801D0   		addq	%rdx, %rax
 1328 0d99 488B10   		movq	(%rax), %rdx
 1329 0d9c 488B75B0 		movq	-80(%rbp), %rsi
 1330 0da0 488B45B0 		movq	-80(%rbp), %rax
 1331 0da4 4889D1   		movq	%rdx, %rcx
 1332 0da7 BA030000 		movl	$3, %edx
 1332      00
 1333 0dac 4889C7   		movq	%rax, %rdi
 1334 0daf E84CF2FF 		call	arg_register_error
 1334      FF
 1335              	.L79:
 449:argtable2.c   ****         {
 1336              		.loc 1 449 0 discriminator 1
 1337 0db4 488B0500 		movq	optind@GOTPCREL(%rip), %rax
 1337      000000
 1338 0dbb 8B00     		movl	(%rax), %eax
 1339 0dbd 3B45CC   		cmpl	-52(%rbp), %eax
 1340 0dc0 7CB1     		jl	.L80
 453:argtable2.c   ****         }
 454:argtable2.c   **** 
 455:argtable2.c   ****     return;
 1341              		.loc 1 455 0
 1342 0dc2 90       		nop
 1343              	.L69:
 456:argtable2.c   ****     }
 1344              		.loc 1 456 0
 1345 0dc3 C9       		leave
 1346              		.cfi_def_cfa 7, 8
 1347 0dc4 C3       		ret
 1348              		.cfi_endproc
 1349              	.LFE7:
 1352              	arg_parse_check:
 1353              	.LFB8:
 457:argtable2.c   **** 
 458:argtable2.c   **** 
 459:argtable2.c   **** static
 460:argtable2.c   **** void arg_parse_check(struct arg_hdr **table, struct arg_end *endtable)
 461:argtable2.c   ****     {
 1354              		.loc 1 461 0
 1355              		.cfi_startproc
 1356 0dc5 55       		pushq	%rbp
 1357              		.cfi_def_cfa_offset 16
 1358              		.cfi_offset 6, -16
 1359 0dc6 4889E5   		movq	%rsp, %rbp
 1360              		.cfi_def_cfa_register 6
 1361 0dc9 4883EC20 		subq	$32, %rsp
 1362 0dcd 48897DE8 		movq	%rdi, -24(%rbp)
 1363 0dd1 488975E0 		movq	%rsi, -32(%rbp)
 462:argtable2.c   ****     int tabindex=0;
 1364              		.loc 1 462 0
 1365 0dd5 C745F000 		movl	$0, -16(%rbp)
 1365      000000
 1366              	.L83:
 463:argtable2.c   ****     /* printf("arg_parse_check()\n"); */
 464:argtable2.c   ****     do
 465:argtable2.c   ****         {
 466:argtable2.c   ****         if (table[tabindex]->checkfn)
 1367              		.loc 1 466 0
 1368 0ddc 8B45F0   		movl	-16(%rbp), %eax
 1369 0ddf 4898     		cltq
 1370 0de1 488D14C5 		leaq	0(,%rax,8), %rdx
 1370      00000000 
 1371 0de9 488B45E8 		movq	-24(%rbp), %rax
 1372 0ded 4801D0   		addq	%rdx, %rax
 1373 0df0 488B00   		movq	(%rax), %rax
 1374 0df3 488B4048 		movq	72(%rax), %rax
 1375 0df7 4885C0   		testq	%rax, %rax
 1376 0dfa 7464     		je	.L82
 1377              	.LBB14:
 467:argtable2.c   ****             {
 468:argtable2.c   ****             void *parent  = table[tabindex]->parent;
 1378              		.loc 1 468 0
 1379 0dfc 8B45F0   		movl	-16(%rbp), %eax
 1380 0dff 4898     		cltq
 1381 0e01 488D14C5 		leaq	0(,%rax,8), %rdx
 1381      00000000 
 1382 0e09 488B45E8 		movq	-24(%rbp), %rax
 1383 0e0d 4801D0   		addq	%rdx, %rax
 1384 0e10 488B00   		movq	(%rax), %rax
 1385 0e13 488B4030 		movq	48(%rax), %rax
 1386 0e17 488945F8 		movq	%rax, -8(%rbp)
 469:argtable2.c   ****             int errorcode = table[tabindex]->checkfn(parent);
 1387              		.loc 1 469 0
 1388 0e1b 8B45F0   		movl	-16(%rbp), %eax
 1389 0e1e 4898     		cltq
 1390 0e20 488D14C5 		leaq	0(,%rax,8), %rdx
 1390      00000000 
 1391 0e28 488B45E8 		movq	-24(%rbp), %rax
 1392 0e2c 4801D0   		addq	%rdx, %rax
 1393 0e2f 488B00   		movq	(%rax), %rax
 1394 0e32 488B4048 		movq	72(%rax), %rax
 1395 0e36 488B55F8 		movq	-8(%rbp), %rdx
 1396 0e3a 4889D7   		movq	%rdx, %rdi
 1397 0e3d FFD0     		call	*%rax
 1398 0e3f 8945F4   		movl	%eax, -12(%rbp)
 470:argtable2.c   ****             if (errorcode!=0)
 1399              		.loc 1 470 0
 1400 0e42 837DF400 		cmpl	$0, -12(%rbp)
 1401 0e46 7418     		je	.L82
 471:argtable2.c   ****                 arg_register_error(endtable,parent,errorcode,NULL);
 1402              		.loc 1 471 0
 1403 0e48 8B55F4   		movl	-12(%rbp), %edx
 1404 0e4b 488B75F8 		movq	-8(%rbp), %rsi
 1405 0e4f 488B45E0 		movq	-32(%rbp), %rax
 1406 0e53 B9000000 		movl	$0, %ecx
 1406      00
 1407 0e58 4889C7   		movq	%rax, %rdi
 1408 0e5b E8A0F1FF 		call	arg_register_error
 1408      FF
 1409              	.L82:
 1410              	.LBE14:
 472:argtable2.c   ****             }
 473:argtable2.c   ****         }while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 1411              		.loc 1 473 0
 1412 0e60 8B45F0   		movl	-16(%rbp), %eax
 1413 0e63 8D5001   		leal	1(%rax), %edx
 1414 0e66 8955F0   		movl	%edx, -16(%rbp)
 1415 0e69 4898     		cltq
 1416 0e6b 488D14C5 		leaq	0(,%rax,8), %rdx
 1416      00000000 
 1417 0e73 488B45E8 		movq	-24(%rbp), %rax
 1418 0e77 4801D0   		addq	%rdx, %rax
 1419 0e7a 488B00   		movq	(%rax), %rax
 1420 0e7d 0FB600   		movzbl	(%rax), %eax
 1421 0e80 0FBEC0   		movsbl	%al, %eax
 1422 0e83 83E001   		andl	$1, %eax
 1423 0e86 85C0     		testl	%eax, %eax
 1424 0e88 0F844EFF 		je	.L83
 1424      FFFF
 474:argtable2.c   ****     }
 1425              		.loc 1 474 0
 1426 0e8e C9       		leave
 1427              		.cfi_def_cfa 7, 8
 1428 0e8f C3       		ret
 1429              		.cfi_endproc
 1430              	.LFE8:
 1433              	arg_reset:
 1434              	.LFB9:
 475:argtable2.c   **** 
 476:argtable2.c   **** 
 477:argtable2.c   **** static
 478:argtable2.c   **** void arg_reset(void **argtable)
 479:argtable2.c   ****     {
 1435              		.loc 1 479 0
 1436              		.cfi_startproc
 1437 0e90 55       		pushq	%rbp
 1438              		.cfi_def_cfa_offset 16
 1439              		.cfi_offset 6, -16
 1440 0e91 4889E5   		movq	%rsp, %rbp
 1441              		.cfi_def_cfa_register 6
 1442 0e94 4883EC20 		subq	$32, %rsp
 1443 0e98 48897DE8 		movq	%rdi, -24(%rbp)
 480:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 1444              		.loc 1 480 0
 1445 0e9c 488B45E8 		movq	-24(%rbp), %rax
 1446 0ea0 488945F8 		movq	%rax, -8(%rbp)
 481:argtable2.c   ****     int tabindex=0;
 1447              		.loc 1 481 0
 1448 0ea4 C745F400 		movl	$0, -12(%rbp)
 1448      000000
 1449              	.L86:
 482:argtable2.c   ****     /*printf("arg_reset(%p)\n",argtable);*/
 483:argtable2.c   ****     do
 484:argtable2.c   ****         {
 485:argtable2.c   ****         if (table[tabindex]->resetfn)
 1450              		.loc 1 485 0
 1451 0eab 8B45F4   		movl	-12(%rbp), %eax
 1452 0eae 4898     		cltq
 1453 0eb0 488D14C5 		leaq	0(,%rax,8), %rdx
 1453      00000000 
 1454 0eb8 488B45F8 		movq	-8(%rbp), %rax
 1455 0ebc 4801D0   		addq	%rdx, %rax
 1456 0ebf 488B00   		movq	(%rax), %rax
 1457 0ec2 488B4038 		movq	56(%rax), %rax
 1458 0ec6 4885C0   		testq	%rax, %rax
 1459 0ec9 743C     		je	.L85
 486:argtable2.c   ****             table[tabindex]->resetfn(table[tabindex]->parent);
 1460              		.loc 1 486 0
 1461 0ecb 8B45F4   		movl	-12(%rbp), %eax
 1462 0ece 4898     		cltq
 1463 0ed0 488D14C5 		leaq	0(,%rax,8), %rdx
 1463      00000000 
 1464 0ed8 488B45F8 		movq	-8(%rbp), %rax
 1465 0edc 4801D0   		addq	%rdx, %rax
 1466 0edf 488B00   		movq	(%rax), %rax
 1467 0ee2 488B4038 		movq	56(%rax), %rax
 1468 0ee6 8B55F4   		movl	-12(%rbp), %edx
 1469 0ee9 4863D2   		movslq	%edx, %rdx
 1470 0eec 488D0CD5 		leaq	0(,%rdx,8), %rcx
 1470      00000000 
 1471 0ef4 488B55F8 		movq	-8(%rbp), %rdx
 1472 0ef8 4801CA   		addq	%rcx, %rdx
 1473 0efb 488B12   		movq	(%rdx), %rdx
 1474 0efe 488B5230 		movq	48(%rdx), %rdx
 1475 0f02 4889D7   		movq	%rdx, %rdi
 1476 0f05 FFD0     		call	*%rax
 1477              	.L85:
 487:argtable2.c   ****         } while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 1478              		.loc 1 487 0
 1479 0f07 8B45F4   		movl	-12(%rbp), %eax
 1480 0f0a 8D5001   		leal	1(%rax), %edx
 1481 0f0d 8955F4   		movl	%edx, -12(%rbp)
 1482 0f10 4898     		cltq
 1483 0f12 488D14C5 		leaq	0(,%rax,8), %rdx
 1483      00000000 
 1484 0f1a 488B45F8 		movq	-8(%rbp), %rax
 1485 0f1e 4801D0   		addq	%rdx, %rax
 1486 0f21 488B00   		movq	(%rax), %rax
 1487 0f24 0FB600   		movzbl	(%rax), %eax
 1488 0f27 0FBEC0   		movsbl	%al, %eax
 1489 0f2a 83E001   		andl	$1, %eax
 1490 0f2d 85C0     		testl	%eax, %eax
 1491 0f2f 0F8476FF 		je	.L86
 1491      FFFF
 488:argtable2.c   ****     }
 1492              		.loc 1 488 0
 1493 0f35 C9       		leave
 1494              		.cfi_def_cfa 7, 8
 1495 0f36 C3       		ret
 1496              		.cfi_endproc
 1497              	.LFE9:
 1499              		.globl	arg_parse
 1501              	arg_parse:
 1502              	.LFB10:
 489:argtable2.c   **** 
 490:argtable2.c   ****     
 491:argtable2.c   **** int arg_parse(int argc, char **argv, void **argtable)
 492:argtable2.c   ****     {
 1503              		.loc 1 492 0
 1504              		.cfi_startproc
 1505 0f37 55       		pushq	%rbp
 1506              		.cfi_def_cfa_offset 16
 1507              		.cfi_offset 6, -16
 1508 0f38 4889E5   		movq	%rsp, %rbp
 1509              		.cfi_def_cfa_register 6
 1510 0f3b 4883EC40 		subq	$64, %rsp
 1511 0f3f 897DDC   		movl	%edi, -36(%rbp)
 1512 0f42 488975D0 		movq	%rsi, -48(%rbp)
 1513 0f46 488955C8 		movq	%rdx, -56(%rbp)
 493:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr **)argtable;
 1514              		.loc 1 493 0
 1515 0f4a 488B45C8 		movq	-56(%rbp), %rax
 1516 0f4e 488945E8 		movq	%rax, -24(%rbp)
 494:argtable2.c   ****     struct arg_end *endtable;
 495:argtable2.c   ****     int endindex;
 496:argtable2.c   ****     char **argvcopy = NULL;
 1517              		.loc 1 496 0
 1518 0f52 48C745F0 		movq	$0, -16(%rbp)
 1518      00000000 
 497:argtable2.c   **** 
 498:argtable2.c   ****     /*printf("arg_parse(%d,%p,%p)\n",argc,argv,argtable);*/
 499:argtable2.c   **** 
 500:argtable2.c   ****     /* reset any argtable data from previous invocations */
 501:argtable2.c   ****     arg_reset(argtable);
 1519              		.loc 1 501 0
 1520 0f5a 488B45C8 		movq	-56(%rbp), %rax
 1521 0f5e 4889C7   		movq	%rax, %rdi
 1522 0f61 E82AFFFF 		call	arg_reset
 1522      FF
 502:argtable2.c   **** 
 503:argtable2.c   ****     /* locate the first end-of-table marker within the array */
 504:argtable2.c   ****     endindex = arg_endindex(table);
 1523              		.loc 1 504 0
 1524 0f66 488B45E8 		movq	-24(%rbp), %rax
 1525 0f6a 4889C7   		movq	%rax, %rdi
 1526 0f6d E852F8FF 		call	arg_endindex
 1526      FF
 1527 0f72 8945E4   		movl	%eax, -28(%rbp)
 505:argtable2.c   ****     endtable = (struct arg_end*)table[endindex];
 1528              		.loc 1 505 0
 1529 0f75 8B45E4   		movl	-28(%rbp), %eax
 1530 0f78 4898     		cltq
 1531 0f7a 488D14C5 		leaq	0(,%rax,8), %rdx
 1531      00000000 
 1532 0f82 488B45E8 		movq	-24(%rbp), %rax
 1533 0f86 4801D0   		addq	%rdx, %rax
 1534 0f89 488B00   		movq	(%rax), %rax
 1535 0f8c 488945F8 		movq	%rax, -8(%rbp)
 506:argtable2.c   **** 
 507:argtable2.c   ****     /* Special case of argc==0.  This can occur on Texas Instruments DSP. */
 508:argtable2.c   ****     /* Failure to trap this case results in an unwanted NULL result from  */
 509:argtable2.c   ****     /* the malloc for argvcopy (next code block).                         */
 510:argtable2.c   ****     if (argc==0)
 1536              		.loc 1 510 0
 1537 0f90 837DDC00 		cmpl	$0, -36(%rbp)
 1538 0f94 751F     		jne	.L88
 511:argtable2.c   ****         {
 512:argtable2.c   ****         /* We must still perform post-parse checks despite the absence of command line arguments */
 513:argtable2.c   ****         arg_parse_check(table,endtable);
 1539              		.loc 1 513 0
 1540 0f96 488B55F8 		movq	-8(%rbp), %rdx
 1541 0f9a 488B45E8 		movq	-24(%rbp), %rax
 1542 0f9e 4889D6   		movq	%rdx, %rsi
 1543 0fa1 4889C7   		movq	%rax, %rdi
 1544 0fa4 E81CFEFF 		call	arg_parse_check
 1544      FF
 514:argtable2.c   **** 
 515:argtable2.c   ****         /* Now we are finished */
 516:argtable2.c   ****         return endtable->count;
 1545              		.loc 1 516 0
 1546 0fa9 488B45F8 		movq	-8(%rbp), %rax
 1547 0fad 8B4060   		movl	96(%rax), %eax
 1548 0fb0 E9DC0000 		jmp	.L89
 1548      00
 1549              	.L88:
 517:argtable2.c   ****         }
 518:argtable2.c   **** 
 519:argtable2.c   ****     argvcopy = malloc(sizeof(char *) * argc);
 1550              		.loc 1 519 0
 1551 0fb5 8B45DC   		movl	-36(%rbp), %eax
 1552 0fb8 4898     		cltq
 1553 0fba 48C1E003 		salq	$3, %rax
 1554 0fbe 4889C7   		movq	%rax, %rdi
 1555 0fc1 E8000000 		call	malloc@PLT
 1555      00
 1556 0fc6 488945F0 		movq	%rax, -16(%rbp)
 520:argtable2.c   ****     if (argvcopy)
 1557              		.loc 1 520 0
 1558 0fca 48837DF0 		cmpq	$0, -16(%rbp)
 1558      00
 1559 0fcf 0F849B00 		je	.L90
 1559      0000
 1560              	.LBB15:
 521:argtable2.c   ****         {
 522:argtable2.c   ****         int i;
 523:argtable2.c   **** 
 524:argtable2.c   ****         /*
 525:argtable2.c   ****         Fill in the local copy of argv[]. We need a local copy
 526:argtable2.c   ****         because getopt rearranges argv[] which adversely affects
 527:argtable2.c   ****         susbsequent parsing attempts.
 528:argtable2.c   ****         */
 529:argtable2.c   ****         for (i=0; i<argc; i++)
 1561              		.loc 1 529 0
 1562 0fd5 C745E000 		movl	$0, -32(%rbp)
 1562      000000
 1563 0fdc EB32     		jmp	.L91
 1564              	.L92:
 530:argtable2.c   ****             argvcopy[i] = argv[i];
 1565              		.loc 1 530 0 discriminator 2
 1566 0fde 8B45E0   		movl	-32(%rbp), %eax
 1567 0fe1 4898     		cltq
 1568 0fe3 488D14C5 		leaq	0(,%rax,8), %rdx
 1568      00000000 
 1569 0feb 488B45F0 		movq	-16(%rbp), %rax
 1570 0fef 4801C2   		addq	%rax, %rdx
 1571 0ff2 8B45E0   		movl	-32(%rbp), %eax
 1572 0ff5 4898     		cltq
 1573 0ff7 488D0CC5 		leaq	0(,%rax,8), %rcx
 1573      00000000 
 1574 0fff 488B45D0 		movq	-48(%rbp), %rax
 1575 1003 4801C8   		addq	%rcx, %rax
 1576 1006 488B00   		movq	(%rax), %rax
 1577 1009 488902   		movq	%rax, (%rdx)
 529:argtable2.c   ****             argvcopy[i] = argv[i];
 1578              		.loc 1 529 0 discriminator 2
 1579 100c 8345E001 		addl	$1, -32(%rbp)
 1580              	.L91:
 529:argtable2.c   ****             argvcopy[i] = argv[i];
 1581              		.loc 1 529 0 is_stmt 0 discriminator 1
 1582 1010 8B45E0   		movl	-32(%rbp), %eax
 1583 1013 3B45DC   		cmpl	-36(%rbp), %eax
 1584 1016 7CC6     		jl	.L92
 531:argtable2.c   **** 
 532:argtable2.c   ****         /* parse the command line (local copy) for tagged options */
 533:argtable2.c   ****         arg_parse_tagged(argc,argvcopy,table,endtable);
 1585              		.loc 1 533 0 is_stmt 1
 1586 1018 488B4DF8 		movq	-8(%rbp), %rcx
 1587 101c 488B55E8 		movq	-24(%rbp), %rdx
 1588 1020 488B75F0 		movq	-16(%rbp), %rsi
 1589 1024 8B45DC   		movl	-36(%rbp), %eax
 1590 1027 89C7     		movl	%eax, %edi
 1591 1029 E8D4F7FF 		call	arg_parse_tagged
 1591      FF
 534:argtable2.c   **** 
 535:argtable2.c   ****         /* parse the command line (local copy) for untagged options */
 536:argtable2.c   ****         arg_parse_untagged(argc,argvcopy,table,endtable);
 1592              		.loc 1 536 0
 1593 102e 488B4DF8 		movq	-8(%rbp), %rcx
 1594 1032 488B55E8 		movq	-24(%rbp), %rdx
 1595 1036 488B75F0 		movq	-16(%rbp), %rsi
 1596 103a 8B45DC   		movl	-36(%rbp), %eax
 1597 103d 89C7     		movl	%eax, %edi
 1598 103f E854FBFF 		call	arg_parse_untagged
 1598      FF
 537:argtable2.c   **** 
 538:argtable2.c   ****         /* if no errors so far then perform post-parse checks otherwise dont bother */
 539:argtable2.c   ****         if (endtable->count==0)
 1599              		.loc 1 539 0
 1600 1044 488B45F8 		movq	-8(%rbp), %rax
 1601 1048 8B4060   		movl	96(%rax), %eax
 1602 104b 85C0     		testl	%eax, %eax
 1603 104d 7513     		jne	.L93
 540:argtable2.c   ****             arg_parse_check(table,endtable);
 1604              		.loc 1 540 0
 1605 104f 488B55F8 		movq	-8(%rbp), %rdx
 1606 1053 488B45E8 		movq	-24(%rbp), %rax
 1607 1057 4889D6   		movq	%rdx, %rsi
 1608 105a 4889C7   		movq	%rax, %rdi
 1609 105d E863FDFF 		call	arg_parse_check
 1609      FF
 1610              	.L93:
 541:argtable2.c   **** 
 542:argtable2.c   ****         /* release the local copt of argv[] */
 543:argtable2.c   ****         free(argvcopy);
 1611              		.loc 1 543 0
 1612 1062 488B45F0 		movq	-16(%rbp), %rax
 1613 1066 4889C7   		movq	%rax, %rdi
 1614 1069 E8000000 		call	free@PLT
 1614      00
 1615              	.LBE15:
 1616 106e EB1A     		jmp	.L94
 1617              	.L90:
 544:argtable2.c   ****         }
 545:argtable2.c   ****     else
 546:argtable2.c   ****         {
 547:argtable2.c   ****         /* memory alloc failed */
 548:argtable2.c   ****         arg_register_error(endtable,endtable,ARG_EMALLOC,NULL);
 1618              		.loc 1 548 0
 1619 1070 488B75F8 		movq	-8(%rbp), %rsi
 1620 1074 488B45F8 		movq	-8(%rbp), %rax
 1621 1078 B9000000 		movl	$0, %ecx
 1621      00
 1622 107d BA020000 		movl	$2, %edx
 1622      00
 1623 1082 4889C7   		movq	%rax, %rdi
 1624 1085 E876EFFF 		call	arg_register_error
 1624      FF
 1625              	.L94:
 549:argtable2.c   ****         }        
 550:argtable2.c   **** 
 551:argtable2.c   ****     return endtable->count;
 1626              		.loc 1 551 0
 1627 108a 488B45F8 		movq	-8(%rbp), %rax
 1628 108e 8B4060   		movl	96(%rax), %eax
 1629              	.L89:
 552:argtable2.c   ****     }
 1630              		.loc 1 552 0
 1631 1091 C9       		leave
 1632              		.cfi_def_cfa 7, 8
 1633 1092 C3       		ret
 1634              		.cfi_endproc
 1635              	.LFE10:
 1638              	arg_cat:
 1639              	.LFB11:
 553:argtable2.c   **** 
 554:argtable2.c   **** 
 555:argtable2.c   **** /*
 556:argtable2.c   ****  * Concatenate contents of src[] string onto *pdest[] string.
 557:argtable2.c   ****  * The *pdest pointer is altered to point to the end of the
 558:argtable2.c   ****  * target string and *pndest is decremented by the same number
 559:argtable2.c   ****  * of chars.
 560:argtable2.c   ****  * Does not append more than *pndest chars into *pdest[]
 561:argtable2.c   ****  * so as to prevent buffer overruns.
 562:argtable2.c   ****  * Its something like strncat() but more efficient for repeated
 563:argtable2.c   ****  * calls on the same destination string.
 564:argtable2.c   ****  * Example of use:
 565:argtable2.c   ****  *   char dest[30] = "good"
 566:argtable2.c   ****  *   size_t ndest = sizeof(dest);
 567:argtable2.c   ****  *   char *pdest = dest;
 568:argtable2.c   ****  *   arg_char(&pdest,"bye ",&ndest);
 569:argtable2.c   ****  *   arg_char(&pdest,"cruel ",&ndest);
 570:argtable2.c   ****  *   arg_char(&pdest,"world!",&ndest);
 571:argtable2.c   ****  * Results in:
 572:argtable2.c   ****  *   dest[] == "goodbye cruel world!"
 573:argtable2.c   ****  *   ndest  == 10
 574:argtable2.c   ****  */
 575:argtable2.c   **** static
 576:argtable2.c   **** void arg_cat(char **pdest, const char *src, size_t *pndest)
 577:argtable2.c   ****     {
 1640              		.loc 1 577 0
 1641              		.cfi_startproc
 1642 1093 55       		pushq	%rbp
 1643              		.cfi_def_cfa_offset 16
 1644              		.cfi_offset 6, -16
 1645 1094 4889E5   		movq	%rsp, %rbp
 1646              		.cfi_def_cfa_register 6
 1647 1097 48897DE8 		movq	%rdi, -24(%rbp)
 1648 109b 488975E0 		movq	%rsi, -32(%rbp)
 1649 109f 488955D8 		movq	%rdx, -40(%rbp)
 578:argtable2.c   ****     char *dest = *pdest;
 1650              		.loc 1 578 0
 1651 10a3 488B45E8 		movq	-24(%rbp), %rax
 1652 10a7 488B00   		movq	(%rax), %rax
 1653 10aa 488945F0 		movq	%rax, -16(%rbp)
 579:argtable2.c   ****     char *end  = dest + *pndest;
 1654              		.loc 1 579 0
 1655 10ae 488B45D8 		movq	-40(%rbp), %rax
 1656 10b2 488B10   		movq	(%rax), %rdx
 1657 10b5 488B45F0 		movq	-16(%rbp), %rax
 1658 10b9 4801D0   		addq	%rdx, %rax
 1659 10bc 488945F8 		movq	%rax, -8(%rbp)
 580:argtable2.c   **** 
 581:argtable2.c   ****     /*locate null terminator of dest string */
 582:argtable2.c   ****     while(dest<end && *dest!=0)
 1660              		.loc 1 582 0
 1661 10c0 EB05     		jmp	.L96
 1662              	.L98:
 583:argtable2.c   ****         dest++;
 1663              		.loc 1 583 0
 1664 10c2 488345F0 		addq	$1, -16(%rbp)
 1664      01
 1665              	.L96:
 582:argtable2.c   ****         dest++;
 1666              		.loc 1 582 0 discriminator 1
 1667 10c7 488B45F0 		movq	-16(%rbp), %rax
 1668 10cb 483B45F8 		cmpq	-8(%rbp), %rax
 1669 10cf 730B     		jnb	.L97
 582:argtable2.c   ****         dest++;
 1670              		.loc 1 582 0 is_stmt 0 discriminator 2
 1671 10d1 488B45F0 		movq	-16(%rbp), %rax
 1672 10d5 0FB600   		movzbl	(%rax), %eax
 1673 10d8 84C0     		testb	%al, %al
 1674 10da 75E6     		jne	.L98
 1675              	.L97:
 584:argtable2.c   **** 
 585:argtable2.c   ****     /* concat src string to dest string */
 586:argtable2.c   ****     while(dest<end && *src!=0)
 1676              		.loc 1 586 0 is_stmt 1
 1677 10dc EB1D     		jmp	.L99
 1678              	.L101:
 587:argtable2.c   ****         *dest++ = *src++;
 1679              		.loc 1 587 0
 1680 10de 488B45F0 		movq	-16(%rbp), %rax
 1681 10e2 488D5001 		leaq	1(%rax), %rdx
 1682 10e6 488955F0 		movq	%rdx, -16(%rbp)
 1683 10ea 488B55E0 		movq	-32(%rbp), %rdx
 1684 10ee 488D4A01 		leaq	1(%rdx), %rcx
 1685 10f2 48894DE0 		movq	%rcx, -32(%rbp)
 1686 10f6 0FB612   		movzbl	(%rdx), %edx
 1687 10f9 8810     		movb	%dl, (%rax)
 1688              	.L99:
 586:argtable2.c   ****         *dest++ = *src++;
 1689              		.loc 1 586 0 discriminator 1
 1690 10fb 488B45F0 		movq	-16(%rbp), %rax
 1691 10ff 483B45F8 		cmpq	-8(%rbp), %rax
 1692 1103 730B     		jnb	.L100
 586:argtable2.c   ****         *dest++ = *src++;
 1693              		.loc 1 586 0 is_stmt 0 discriminator 2
 1694 1105 488B45E0 		movq	-32(%rbp), %rax
 1695 1109 0FB600   		movzbl	(%rax), %eax
 1696 110c 84C0     		testb	%al, %al
 1697 110e 75CE     		jne	.L101
 1698              	.L100:
 588:argtable2.c   **** 
 589:argtable2.c   ****     /* null terminate dest string */
 590:argtable2.c   ****     *dest=0;
 1699              		.loc 1 590 0 is_stmt 1
 1700 1110 488B45F0 		movq	-16(%rbp), %rax
 1701 1114 C60000   		movb	$0, (%rax)
 591:argtable2.c   **** 
 592:argtable2.c   ****     /* update *pdest and *pndest */
 593:argtable2.c   ****     *pndest = end - dest;
 1702              		.loc 1 593 0
 1703 1117 488B55F8 		movq	-8(%rbp), %rdx
 1704 111b 488B45F0 		movq	-16(%rbp), %rax
 1705 111f 4829C2   		subq	%rax, %rdx
 1706 1122 4889D0   		movq	%rdx, %rax
 1707 1125 4889C2   		movq	%rax, %rdx
 1708 1128 488B45D8 		movq	-40(%rbp), %rax
 1709 112c 488910   		movq	%rdx, (%rax)
 594:argtable2.c   ****     *pdest  = dest;
 1710              		.loc 1 594 0
 1711 112f 488B45E8 		movq	-24(%rbp), %rax
 1712 1133 488B55F0 		movq	-16(%rbp), %rdx
 1713 1137 488910   		movq	%rdx, (%rax)
 595:argtable2.c   ****     }
 1714              		.loc 1 595 0
 1715 113a 5D       		popq	%rbp
 1716              		.cfi_def_cfa 7, 8
 1717 113b C3       		ret
 1718              		.cfi_endproc
 1719              	.LFE11:
 1721              		.section	.rodata
 1722              	.LC6:
 1723 008a 2000     		.string	" "
 1724              	.LC7:
 1725 008c 5B00     		.string	"["
 1726              	.LC8:
 1727 008e 5D00     		.string	"]"
 1728              	.LC9:
 1729 0090 2D2D00   		.string	"--"
 1730              	.LC10:
 1731 0093 2C00     		.string	","
 1732              	.LC11:
 1733 0095 3D00     		.string	"="
 1734              		.text
 1736              	arg_cat_option:
 1737              	.LFB12:
 596:argtable2.c   **** 
 597:argtable2.c   **** 
 598:argtable2.c   **** static
 599:argtable2.c   **** void arg_cat_option(char *dest, size_t ndest, const char *shortopts, const char *longopts, const ch
 600:argtable2.c   ****     {
 1738              		.loc 1 600 0
 1739              		.cfi_startproc
 1740 113c 55       		pushq	%rbp
 1741              		.cfi_def_cfa_offset 16
 1742              		.cfi_offset 6, -16
 1743 113d 4889E5   		movq	%rsp, %rbp
 1744              		.cfi_def_cfa_register 6
 1745 1140 4883EC40 		subq	$64, %rsp
 1746 1144 48897DE8 		movq	%rdi, -24(%rbp)
 1747 1148 488975E0 		movq	%rsi, -32(%rbp)
 1748 114c 488955D8 		movq	%rdx, -40(%rbp)
 1749 1150 48894DD0 		movq	%rcx, -48(%rbp)
 1750 1154 4C8945C8 		movq	%r8, -56(%rbp)
 1751 1158 44894DC4 		movl	%r9d, -60(%rbp)
 601:argtable2.c   ****     if (shortopts)
 1752              		.loc 1 601 0
 1753 115c 48837DD8 		cmpq	$0, -40(%rbp)
 1753      00
 1754 1161 0F84B900 		je	.L103
 1754      0000
 1755              	.LBB16:
 602:argtable2.c   ****         {
 603:argtable2.c   ****         char option[3];
 604:argtable2.c   ****         
 605:argtable2.c   ****         /* note: option array[] is initialiazed dynamically here to satisfy   */
 606:argtable2.c   ****         /* a deficiency in the watcom compiler wrt static array initializers. */
 607:argtable2.c   ****         option[0] = '-';
 1756              		.loc 1 607 0
 1757 1167 C645F02D 		movb	$45, -16(%rbp)
 608:argtable2.c   ****         option[1] = shortopts[0];
 1758              		.loc 1 608 0
 1759 116b 488B45D8 		movq	-40(%rbp), %rax
 1760 116f 0FB600   		movzbl	(%rax), %eax
 1761 1172 8845F1   		movb	%al, -15(%rbp)
 609:argtable2.c   ****         option[2] = 0;
 1762              		.loc 1 609 0
 1763 1175 C645F200 		movb	$0, -14(%rbp)
 610:argtable2.c   ****         
 611:argtable2.c   ****         arg_cat(&dest,option,&ndest);
 1764              		.loc 1 611 0
 1765 1179 488D55E0 		leaq	-32(%rbp), %rdx
 1766 117d 488D4DF0 		leaq	-16(%rbp), %rcx
 1767 1181 488D45E8 		leaq	-24(%rbp), %rax
 1768 1185 4889CE   		movq	%rcx, %rsi
 1769 1188 4889C7   		movq	%rax, %rdi
 1770 118b E803FFFF 		call	arg_cat
 1770      FF
 612:argtable2.c   ****         if (datatype)
 1771              		.loc 1 612 0
 1772 1190 48837DC8 		cmpq	$0, -56(%rbp)
 1772      00
 1773 1195 0F848000 		je	.L104
 1773      0000
 613:argtable2.c   ****             {
 614:argtable2.c   ****             arg_cat(&dest," ",&ndest);
 1774              		.loc 1 614 0
 1775 119b 488D55E0 		leaq	-32(%rbp), %rdx
 1776 119f 488D45E8 		leaq	-24(%rbp), %rax
 1777 11a3 488D3500 		leaq	.LC6(%rip), %rsi
 1777      000000
 1778 11aa 4889C7   		movq	%rax, %rdi
 1779 11ad E8E1FEFF 		call	arg_cat
 1779      FF
 615:argtable2.c   ****             if (optvalue)
 1780              		.loc 1 615 0
 1781 11b2 837DC400 		cmpl	$0, -60(%rbp)
 1782 11b6 7447     		je	.L105
 616:argtable2.c   ****                 {
 617:argtable2.c   ****                 arg_cat(&dest,"[",&ndest);
 1783              		.loc 1 617 0
 1784 11b8 488D55E0 		leaq	-32(%rbp), %rdx
 1785 11bc 488D45E8 		leaq	-24(%rbp), %rax
 1786 11c0 488D3500 		leaq	.LC7(%rip), %rsi
 1786      000000
 1787 11c7 4889C7   		movq	%rax, %rdi
 1788 11ca E8C4FEFF 		call	arg_cat
 1788      FF
 618:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 1789              		.loc 1 618 0
 1790 11cf 488D55E0 		leaq	-32(%rbp), %rdx
 1791 11d3 488B4DC8 		movq	-56(%rbp), %rcx
 1792 11d7 488D45E8 		leaq	-24(%rbp), %rax
 1793 11db 4889CE   		movq	%rcx, %rsi
 1794 11de 4889C7   		movq	%rax, %rdi
 1795 11e1 E8ADFEFF 		call	arg_cat
 1795      FF
 619:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 1796              		.loc 1 619 0
 1797 11e6 488D55E0 		leaq	-32(%rbp), %rdx
 1798 11ea 488D45E8 		leaq	-24(%rbp), %rax
 1799 11ee 488D3500 		leaq	.LC8(%rip), %rsi
 1799      000000
 1800 11f5 4889C7   		movq	%rax, %rdi
 1801 11f8 E896FEFF 		call	arg_cat
 1801      FF
 1802 11fd EB1C     		jmp	.L104
 1803              	.L105:
 620:argtable2.c   ****                 }
 621:argtable2.c   ****             else
 622:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 1804              		.loc 1 622 0
 1805 11ff 488D55E0 		leaq	-32(%rbp), %rdx
 1806 1203 488B4DC8 		movq	-56(%rbp), %rcx
 1807 1207 488D45E8 		leaq	-24(%rbp), %rax
 1808 120b 4889CE   		movq	%rcx, %rsi
 1809 120e 4889C7   		movq	%rax, %rdi
 1810 1211 E87DFEFF 		call	arg_cat
 1810      FF
 1811              	.LBE16:
 1812 1216 E9510100 		jmp	.L102
 1812      00
 1813              	.L104:
 1814 121b E94C0100 		jmp	.L102
 1814      00
 1815              	.L103:
 623:argtable2.c   ****             }
 624:argtable2.c   ****         }
 625:argtable2.c   ****     else if (longopts)
 1816              		.loc 1 625 0
 1817 1220 48837DD0 		cmpq	$0, -48(%rbp)
 1817      00
 1818 1225 0F84D600 		je	.L107
 1818      0000
 1819              	.LBB17:
 626:argtable2.c   ****         {
 627:argtable2.c   ****         size_t ncspn;
 628:argtable2.c   **** 
 629:argtable2.c   ****         /* add "--" tag prefix */
 630:argtable2.c   ****         arg_cat(&dest,"--",&ndest);
 1820              		.loc 1 630 0
 1821 122b 488D55E0 		leaq	-32(%rbp), %rdx
 1822 122f 488D45E8 		leaq	-24(%rbp), %rax
 1823 1233 488D3500 		leaq	.LC9(%rip), %rsi
 1823      000000
 1824 123a 4889C7   		movq	%rax, %rdi
 1825 123d E851FEFF 		call	arg_cat
 1825      FF
 631:argtable2.c   **** 
 632:argtable2.c   ****         /* add comma separated option tag */
 633:argtable2.c   ****         ncspn = strcspn(longopts,",");
 1826              		.loc 1 633 0
 1827 1242 488B45D0 		movq	-48(%rbp), %rax
 1828 1246 488D3500 		leaq	.LC10(%rip), %rsi
 1828      000000
 1829 124d 4889C7   		movq	%rax, %rdi
 1830 1250 E8000000 		call	strcspn@PLT
 1830      00
 1831 1255 488945F8 		movq	%rax, -8(%rbp)
 634:argtable2.c   ****         strncat(dest,longopts,(ncspn<ndest)?ncspn:ndest);
 1832              		.loc 1 634 0
 1833 1259 488B55E0 		movq	-32(%rbp), %rdx
 1834 125d 488B45F8 		movq	-8(%rbp), %rax
 1835 1261 4839C2   		cmpq	%rax, %rdx
 1836 1264 480F47D0 		cmova	%rax, %rdx
 1837 1268 488B45E8 		movq	-24(%rbp), %rax
 1838 126c 488B4DD0 		movq	-48(%rbp), %rcx
 1839 1270 4889CE   		movq	%rcx, %rsi
 1840 1273 4889C7   		movq	%rax, %rdi
 1841 1276 E8000000 		call	strncat@PLT
 1841      00
 635:argtable2.c   **** 
 636:argtable2.c   ****         if (datatype)
 1842              		.loc 1 636 0
 1843 127b 48837DC8 		cmpq	$0, -56(%rbp)
 1843      00
 1844 1280 747D     		je	.L108
 637:argtable2.c   ****             {
 638:argtable2.c   ****             arg_cat(&dest,"=",&ndest);
 1845              		.loc 1 638 0
 1846 1282 488D55E0 		leaq	-32(%rbp), %rdx
 1847 1286 488D45E8 		leaq	-24(%rbp), %rax
 1848 128a 488D3500 		leaq	.LC11(%rip), %rsi
 1848      000000
 1849 1291 4889C7   		movq	%rax, %rdi
 1850 1294 E8FAFDFF 		call	arg_cat
 1850      FF
 639:argtable2.c   ****             if (optvalue)
 1851              		.loc 1 639 0
 1852 1299 837DC400 		cmpl	$0, -60(%rbp)
 1853 129d 7447     		je	.L109
 640:argtable2.c   ****                 {
 641:argtable2.c   ****                 arg_cat(&dest,"[",&ndest);
 1854              		.loc 1 641 0
 1855 129f 488D55E0 		leaq	-32(%rbp), %rdx
 1856 12a3 488D45E8 		leaq	-24(%rbp), %rax
 1857 12a7 488D3500 		leaq	.LC7(%rip), %rsi
 1857      000000
 1858 12ae 4889C7   		movq	%rax, %rdi
 1859 12b1 E8DDFDFF 		call	arg_cat
 1859      FF
 642:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 1860              		.loc 1 642 0
 1861 12b6 488D55E0 		leaq	-32(%rbp), %rdx
 1862 12ba 488B4DC8 		movq	-56(%rbp), %rcx
 1863 12be 488D45E8 		leaq	-24(%rbp), %rax
 1864 12c2 4889CE   		movq	%rcx, %rsi
 1865 12c5 4889C7   		movq	%rax, %rdi
 1866 12c8 E8C6FDFF 		call	arg_cat
 1866      FF
 643:argtable2.c   ****                 arg_cat(&dest,"]",&ndest);
 1867              		.loc 1 643 0
 1868 12cd 488D55E0 		leaq	-32(%rbp), %rdx
 1869 12d1 488D45E8 		leaq	-24(%rbp), %rax
 1870 12d5 488D3500 		leaq	.LC8(%rip), %rsi
 1870      000000
 1871 12dc 4889C7   		movq	%rax, %rdi
 1872 12df E8AFFDFF 		call	arg_cat
 1872      FF
 1873 12e4 EB19     		jmp	.L108
 1874              	.L109:
 644:argtable2.c   ****                 }
 645:argtable2.c   ****             else
 646:argtable2.c   ****                 arg_cat(&dest,datatype,&ndest);
 1875              		.loc 1 646 0
 1876 12e6 488D55E0 		leaq	-32(%rbp), %rdx
 1877 12ea 488B4DC8 		movq	-56(%rbp), %rcx
 1878 12ee 488D45E8 		leaq	-24(%rbp), %rax
 1879 12f2 4889CE   		movq	%rcx, %rsi
 1880 12f5 4889C7   		movq	%rax, %rdi
 1881 12f8 E896FDFF 		call	arg_cat
 1881      FF
 1882              	.LBE17:
 1883 12fd EB6D     		jmp	.L102
 1884              	.L108:
 1885 12ff EB6B     		jmp	.L102
 1886              	.L107:
 647:argtable2.c   ****             }
 648:argtable2.c   ****         }
 649:argtable2.c   ****     else if (datatype)
 1887              		.loc 1 649 0
 1888 1301 48837DC8 		cmpq	$0, -56(%rbp)
 1888      00
 1889 1306 7464     		je	.L102
 650:argtable2.c   ****         {
 651:argtable2.c   ****         if (optvalue)
 1890              		.loc 1 651 0
 1891 1308 837DC400 		cmpl	$0, -60(%rbp)
 1892 130c 7447     		je	.L110
 652:argtable2.c   ****             {
 653:argtable2.c   ****             arg_cat(&dest,"[",&ndest);
 1893              		.loc 1 653 0
 1894 130e 488D55E0 		leaq	-32(%rbp), %rdx
 1895 1312 488D45E8 		leaq	-24(%rbp), %rax
 1896 1316 488D3500 		leaq	.LC7(%rip), %rsi
 1896      000000
 1897 131d 4889C7   		movq	%rax, %rdi
 1898 1320 E86EFDFF 		call	arg_cat
 1898      FF
 654:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 1899              		.loc 1 654 0
 1900 1325 488D55E0 		leaq	-32(%rbp), %rdx
 1901 1329 488B4DC8 		movq	-56(%rbp), %rcx
 1902 132d 488D45E8 		leaq	-24(%rbp), %rax
 1903 1331 4889CE   		movq	%rcx, %rsi
 1904 1334 4889C7   		movq	%rax, %rdi
 1905 1337 E857FDFF 		call	arg_cat
 1905      FF
 655:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 1906              		.loc 1 655 0
 1907 133c 488D55E0 		leaq	-32(%rbp), %rdx
 1908 1340 488D45E8 		leaq	-24(%rbp), %rax
 1909 1344 488D3500 		leaq	.LC8(%rip), %rsi
 1909      000000
 1910 134b 4889C7   		movq	%rax, %rdi
 1911 134e E840FDFF 		call	arg_cat
 1911      FF
 1912 1353 EB17     		jmp	.L102
 1913              	.L110:
 656:argtable2.c   ****             }
 657:argtable2.c   ****         else
 658:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 1914              		.loc 1 658 0
 1915 1355 488D55E0 		leaq	-32(%rbp), %rdx
 1916 1359 488B4DC8 		movq	-56(%rbp), %rcx
 1917 135d 488D45E8 		leaq	-24(%rbp), %rax
 1918 1361 4889CE   		movq	%rcx, %rsi
 1919 1364 4889C7   		movq	%rax, %rdi
 1920 1367 E827FDFF 		call	arg_cat
 1920      FF
 1921              	.L102:
 659:argtable2.c   ****         }
 660:argtable2.c   ****     }
 1922              		.loc 1 660 0
 1923 136c C9       		leave
 1924              		.cfi_def_cfa 7, 8
 1925 136d C3       		ret
 1926              		.cfi_endproc
 1927              	.LFE12:
 1929              		.section	.rodata
 1930              	.LC12:
 1931 0097 00       		.string	""
 1932              		.text
 1934              	arg_cat_optionv:
 1935              	.LFB13:
 661:argtable2.c   **** 
 662:argtable2.c   **** static
 663:argtable2.c   **** void arg_cat_optionv(char *dest, size_t ndest, const char *shortopts, const char *longopts, const c
 664:argtable2.c   ****     {
 1936              		.loc 1 664 0
 1937              		.cfi_startproc
 1938 136e 55       		pushq	%rbp
 1939              		.cfi_def_cfa_offset 16
 1940              		.cfi_offset 6, -16
 1941 136f 4889E5   		movq	%rsp, %rbp
 1942              		.cfi_def_cfa_register 6
 1943 1372 4883EC50 		subq	$80, %rsp
 1944 1376 48897DD8 		movq	%rdi, -40(%rbp)
 1945 137a 488975D0 		movq	%rsi, -48(%rbp)
 1946 137e 488955C8 		movq	%rdx, -56(%rbp)
 1947 1382 48894DC0 		movq	%rcx, -64(%rbp)
 1948 1386 4C8945B8 		movq	%r8, -72(%rbp)
 1949 138a 44894DB4 		movl	%r9d, -76(%rbp)
 665:argtable2.c   ****     separator = separator ? separator : "";
 1950              		.loc 1 665 0
 1951 138e 48837D10 		cmpq	$0, 16(%rbp)
 1951      00
 1952 1393 7406     		je	.L112
 1953              		.loc 1 665 0 is_stmt 0 discriminator 1
 1954 1395 488B4510 		movq	16(%rbp), %rax
 1955 1399 EB07     		jmp	.L113
 1956              	.L112:
 1957              		.loc 1 665 0 discriminator 2
 1958 139b 488D0500 		leaq	.LC12(%rip), %rax
 1958      000000
 1959              	.L113:
 1960              		.loc 1 665 0 discriminator 3
 1961 13a2 48894510 		movq	%rax, 16(%rbp)
 666:argtable2.c   **** 
 667:argtable2.c   ****     if (shortopts)
 1962              		.loc 1 667 0 is_stmt 1 discriminator 3
 1963 13a6 48837DC8 		cmpq	$0, -56(%rbp)
 1963      00
 1964 13ab 7462     		je	.L114
 1965              	.LBB18:
 668:argtable2.c   ****         {
 669:argtable2.c   ****         const char *c = shortopts;
 1966              		.loc 1 669 0
 1967 13ad 488B45C8 		movq	-56(%rbp), %rax
 1968 13b1 488945E8 		movq	%rax, -24(%rbp)
 670:argtable2.c   ****         while(*c)
 1969              		.loc 1 670 0
 1970 13b5 EB4D     		jmp	.L115
 1971              	.L117:
 1972              	.LBB19:
 671:argtable2.c   ****             {
 672:argtable2.c   ****             /* "-a|-b|-c" */
 673:argtable2.c   ****             char shortopt[3];
 674:argtable2.c   ****         
 675:argtable2.c   ****             /* note: shortopt array[] is initialiazed dynamically here to satisfy */
 676:argtable2.c   ****             /* a deficiency in the watcom compiler wrt static array initializers. */
 677:argtable2.c   ****             shortopt[0]='-';
 1973              		.loc 1 677 0
 1974 13b7 C645E02D 		movb	$45, -32(%rbp)
 678:argtable2.c   ****             shortopt[1]=*c;
 1975              		.loc 1 678 0
 1976 13bb 488B45E8 		movq	-24(%rbp), %rax
 1977 13bf 0FB600   		movzbl	(%rax), %eax
 1978 13c2 8845E1   		movb	%al, -31(%rbp)
 679:argtable2.c   ****             shortopt[2]=0;
 1979              		.loc 1 679 0
 1980 13c5 C645E200 		movb	$0, -30(%rbp)
 680:argtable2.c   ****             
 681:argtable2.c   ****             arg_cat(&dest,shortopt,&ndest);
 1981              		.loc 1 681 0
 1982 13c9 488D55D0 		leaq	-48(%rbp), %rdx
 1983 13cd 488D4DE0 		leaq	-32(%rbp), %rcx
 1984 13d1 488D45D8 		leaq	-40(%rbp), %rax
 1985 13d5 4889CE   		movq	%rcx, %rsi
 1986 13d8 4889C7   		movq	%rax, %rdi
 1987 13db E8B3FCFF 		call	arg_cat
 1987      FF
 682:argtable2.c   ****             if (*++c)
 1988              		.loc 1 682 0
 1989 13e0 488345E8 		addq	$1, -24(%rbp)
 1989      01
 1990 13e5 488B45E8 		movq	-24(%rbp), %rax
 1991 13e9 0FB600   		movzbl	(%rax), %eax
 1992 13ec 84C0     		testb	%al, %al
 1993 13ee 7414     		je	.L115
 683:argtable2.c   ****                 arg_cat(&dest,separator,&ndest);
 1994              		.loc 1 683 0
 1995 13f0 488D55D0 		leaq	-48(%rbp), %rdx
 1996 13f4 488D45D8 		leaq	-40(%rbp), %rax
 1997 13f8 488B7510 		movq	16(%rbp), %rsi
 1998 13fc 4889C7   		movq	%rax, %rdi
 1999 13ff E88FFCFF 		call	arg_cat
 1999      FF
 2000              	.L115:
 2001              	.LBE19:
 670:argtable2.c   ****             {
 2002              		.loc 1 670 0 discriminator 1
 2003 1404 488B45E8 		movq	-24(%rbp), %rax
 2004 1408 0FB600   		movzbl	(%rax), %eax
 2005 140b 84C0     		testb	%al, %al
 2006 140d 75A8     		jne	.L117
 2007              	.L114:
 2008              	.LBE18:
 684:argtable2.c   ****             }
 685:argtable2.c   ****         }
 686:argtable2.c   **** 
 687:argtable2.c   ****     /* put separator between long opts and short opts */
 688:argtable2.c   ****     if (shortopts && longopts)
 2009              		.loc 1 688 0
 2010 140f 48837DC8 		cmpq	$0, -56(%rbp)
 2010      00
 2011 1414 741B     		je	.L118
 2012              		.loc 1 688 0 is_stmt 0 discriminator 1
 2013 1416 48837DC0 		cmpq	$0, -64(%rbp)
 2013      00
 2014 141b 7414     		je	.L118
 689:argtable2.c   ****         arg_cat(&dest,separator,&ndest);
 2015              		.loc 1 689 0 is_stmt 1
 2016 141d 488D55D0 		leaq	-48(%rbp), %rdx
 2017 1421 488D45D8 		leaq	-40(%rbp), %rax
 2018 1425 488B7510 		movq	16(%rbp), %rsi
 2019 1429 4889C7   		movq	%rax, %rdi
 2020 142c E862FCFF 		call	arg_cat
 2020      FF
 2021              	.L118:
 690:argtable2.c   **** 
 691:argtable2.c   ****     if (longopts)
 2022              		.loc 1 691 0
 2023 1431 48837DC0 		cmpq	$0, -64(%rbp)
 2023      00
 2024 1436 0F849500 		je	.L119
 2024      0000
 2025              	.LBB20:
 692:argtable2.c   ****         {
 693:argtable2.c   ****         const char *c = longopts;
 2026              		.loc 1 693 0
 2027 143c 488B45C0 		movq	-64(%rbp), %rax
 2028 1440 488945F0 		movq	%rax, -16(%rbp)
 694:argtable2.c   ****         while(*c)
 2029              		.loc 1 694 0
 2030 1444 EB7C     		jmp	.L120
 2031              	.L121:
 2032              	.LBB21:
 695:argtable2.c   ****             {
 696:argtable2.c   ****             size_t ncspn;
 697:argtable2.c   **** 
 698:argtable2.c   ****             /* add "--" tag prefix */
 699:argtable2.c   ****             arg_cat(&dest,"--",&ndest);
 2033              		.loc 1 699 0
 2034 1446 488D55D0 		leaq	-48(%rbp), %rdx
 2035 144a 488D45D8 		leaq	-40(%rbp), %rax
 2036 144e 488D3500 		leaq	.LC9(%rip), %rsi
 2036      000000
 2037 1455 4889C7   		movq	%rax, %rdi
 2038 1458 E836FCFF 		call	arg_cat
 2038      FF
 700:argtable2.c   **** 
 701:argtable2.c   ****             /* add comma separated option tag */
 702:argtable2.c   ****             ncspn = strcspn(c,",");
 2039              		.loc 1 702 0
 2040 145d 488B45F0 		movq	-16(%rbp), %rax
 2041 1461 488D3500 		leaq	.LC10(%rip), %rsi
 2041      000000
 2042 1468 4889C7   		movq	%rax, %rdi
 2043 146b E8000000 		call	strcspn@PLT
 2043      00
 2044 1470 488945F8 		movq	%rax, -8(%rbp)
 703:argtable2.c   ****             strncat(dest,c,(ncspn<ndest)?ncspn:ndest);
 2045              		.loc 1 703 0
 2046 1474 488B55D0 		movq	-48(%rbp), %rdx
 2047 1478 488B45F8 		movq	-8(%rbp), %rax
 2048 147c 4839C2   		cmpq	%rax, %rdx
 2049 147f 480F47D0 		cmova	%rax, %rdx
 2050 1483 488B45D8 		movq	-40(%rbp), %rax
 2051 1487 488B4DF0 		movq	-16(%rbp), %rcx
 2052 148b 4889CE   		movq	%rcx, %rsi
 2053 148e 4889C7   		movq	%rax, %rdi
 2054 1491 E8000000 		call	strncat@PLT
 2054      00
 704:argtable2.c   ****             c+=ncspn;
 2055              		.loc 1 704 0
 2056 1496 488B45F8 		movq	-8(%rbp), %rax
 2057 149a 480145F0 		addq	%rax, -16(%rbp)
 705:argtable2.c   **** 
 706:argtable2.c   ****             /* add given separator in place of comma */
 707:argtable2.c   ****             if (*c==',')
 2058              		.loc 1 707 0
 2059 149e 488B45F0 		movq	-16(%rbp), %rax
 2060 14a2 0FB600   		movzbl	(%rax), %eax
 2061 14a5 3C2C     		cmpb	$44, %al
 2062 14a7 7519     		jne	.L120
 708:argtable2.c   ****                  {
 709:argtable2.c   ****                  arg_cat(&dest,separator,&ndest);
 2063              		.loc 1 709 0
 2064 14a9 488D55D0 		leaq	-48(%rbp), %rdx
 2065 14ad 488D45D8 		leaq	-40(%rbp), %rax
 2066 14b1 488B7510 		movq	16(%rbp), %rsi
 2067 14b5 4889C7   		movq	%rax, %rdi
 2068 14b8 E8D6FBFF 		call	arg_cat
 2068      FF
 710:argtable2.c   ****                  c++;
 2069              		.loc 1 710 0
 2070 14bd 488345F0 		addq	$1, -16(%rbp)
 2070      01
 2071              	.L120:
 2072              	.LBE21:
 694:argtable2.c   ****             {
 2073              		.loc 1 694 0 discriminator 1
 2074 14c2 488B45F0 		movq	-16(%rbp), %rax
 2075 14c6 0FB600   		movzbl	(%rax), %eax
 2076 14c9 84C0     		testb	%al, %al
 2077 14cb 0F8575FF 		jne	.L121
 2077      FFFF
 2078              	.L119:
 2079              	.LBE20:
 711:argtable2.c   ****                  }
 712:argtable2.c   ****             }
 713:argtable2.c   ****         }
 714:argtable2.c   **** 
 715:argtable2.c   ****     if (datatype)
 2080              		.loc 1 715 0
 2081 14d1 48837DB8 		cmpq	$0, -72(%rbp)
 2081      00
 2082 14d6 0F84A200 		je	.L111
 2082      0000
 716:argtable2.c   ****         {
 717:argtable2.c   ****         if (longopts)
 2083              		.loc 1 717 0
 2084 14dc 48837DC0 		cmpq	$0, -64(%rbp)
 2084      00
 2085 14e1 7419     		je	.L123
 718:argtable2.c   ****             arg_cat(&dest,"=",&ndest);
 2086              		.loc 1 718 0
 2087 14e3 488D55D0 		leaq	-48(%rbp), %rdx
 2088 14e7 488D45D8 		leaq	-40(%rbp), %rax
 2089 14eb 488D3500 		leaq	.LC11(%rip), %rsi
 2089      000000
 2090 14f2 4889C7   		movq	%rax, %rdi
 2091 14f5 E899FBFF 		call	arg_cat
 2091      FF
 2092 14fa EB1E     		jmp	.L124
 2093              	.L123:
 719:argtable2.c   ****         else if (shortopts)
 2094              		.loc 1 719 0
 2095 14fc 48837DC8 		cmpq	$0, -56(%rbp)
 2095      00
 2096 1501 7417     		je	.L124
 720:argtable2.c   ****             arg_cat(&dest," ",&ndest);
 2097              		.loc 1 720 0
 2098 1503 488D55D0 		leaq	-48(%rbp), %rdx
 2099 1507 488D45D8 		leaq	-40(%rbp), %rax
 2100 150b 488D3500 		leaq	.LC6(%rip), %rsi
 2100      000000
 2101 1512 4889C7   		movq	%rax, %rdi
 2102 1515 E879FBFF 		call	arg_cat
 2102      FF
 2103              	.L124:
 721:argtable2.c   **** 
 722:argtable2.c   ****         if (optvalue)
 2104              		.loc 1 722 0
 2105 151a 837DB400 		cmpl	$0, -76(%rbp)
 2106 151e 7447     		je	.L125
 723:argtable2.c   ****             {
 724:argtable2.c   ****             arg_cat(&dest,"[",&ndest);
 2107              		.loc 1 724 0
 2108 1520 488D55D0 		leaq	-48(%rbp), %rdx
 2109 1524 488D45D8 		leaq	-40(%rbp), %rax
 2110 1528 488D3500 		leaq	.LC7(%rip), %rsi
 2110      000000
 2111 152f 4889C7   		movq	%rax, %rdi
 2112 1532 E85CFBFF 		call	arg_cat
 2112      FF
 725:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 2113              		.loc 1 725 0
 2114 1537 488D55D0 		leaq	-48(%rbp), %rdx
 2115 153b 488B4DB8 		movq	-72(%rbp), %rcx
 2116 153f 488D45D8 		leaq	-40(%rbp), %rax
 2117 1543 4889CE   		movq	%rcx, %rsi
 2118 1546 4889C7   		movq	%rax, %rdi
 2119 1549 E845FBFF 		call	arg_cat
 2119      FF
 726:argtable2.c   ****             arg_cat(&dest,"]",&ndest);
 2120              		.loc 1 726 0
 2121 154e 488D55D0 		leaq	-48(%rbp), %rdx
 2122 1552 488D45D8 		leaq	-40(%rbp), %rax
 2123 1556 488D3500 		leaq	.LC8(%rip), %rsi
 2123      000000
 2124 155d 4889C7   		movq	%rax, %rdi
 2125 1560 E82EFBFF 		call	arg_cat
 2125      FF
 2126 1565 EB17     		jmp	.L111
 2127              	.L125:
 727:argtable2.c   ****             }
 728:argtable2.c   ****         else
 729:argtable2.c   ****             arg_cat(&dest,datatype,&ndest);
 2128              		.loc 1 729 0
 2129 1567 488D55D0 		leaq	-48(%rbp), %rdx
 2130 156b 488B4DB8 		movq	-72(%rbp), %rcx
 2131 156f 488D45D8 		leaq	-40(%rbp), %rax
 2132 1573 4889CE   		movq	%rcx, %rsi
 2133 1576 4889C7   		movq	%rax, %rdi
 2134 1579 E815FBFF 		call	arg_cat
 2134      FF
 2135              	.L111:
 730:argtable2.c   ****         }
 731:argtable2.c   ****     }
 2136              		.loc 1 731 0
 2137 157e C9       		leave
 2138              		.cfi_def_cfa 7, 8
 2139 157f C3       		ret
 2140              		.cfi_endproc
 2141              	.LFE13:
 2143              		.section	.rodata
 2144              	.LC13:
 2145 0098 7C00     		.string	"|"
 2146              		.text
 2147              		.globl	arg_print_option
 2149              	arg_print_option:
 2150              	.LFB14:
 732:argtable2.c   **** 
 733:argtable2.c   **** 
 734:argtable2.c   **** /* this function should be deprecated because it doesnt consider optional argument values (ARG_HASO
 735:argtable2.c   **** void arg_print_option(FILE *fp, const char *shortopts, const char *longopts, const char *datatype, 
 736:argtable2.c   ****     {
 2151              		.loc 1 736 0
 2152              		.cfi_startproc
 2153 1580 55       		pushq	%rbp
 2154              		.cfi_def_cfa_offset 16
 2155              		.cfi_offset 6, -16
 2156 1581 4889E5   		movq	%rsp, %rbp
 2157              		.cfi_def_cfa_register 6
 2158 1584 4881EC00 		subq	$256, %rsp
 2158      010000
 2159 158b 4889BD28 		movq	%rdi, -216(%rbp)
 2159      FFFFFF
 2160 1592 4889B520 		movq	%rsi, -224(%rbp)
 2160      FFFFFF
 2161 1599 48899518 		movq	%rdx, -232(%rbp)
 2161      FFFFFF
 2162 15a0 48898D10 		movq	%rcx, -240(%rbp)
 2162      FFFFFF
 2163 15a7 4C898508 		movq	%r8, -248(%rbp)
 2163      FFFFFF
 2164              		.loc 1 736 0
 2165 15ae 64488B04 		movq	%fs:40, %rax
 2165      25280000 
 2165      00
 2166 15b7 488945F8 		movq	%rax, -8(%rbp)
 2167 15bb 31C0     		xorl	%eax, %eax
 737:argtable2.c   ****     char syntax[200]="";
 2168              		.loc 1 737 0
 2169 15bd 48C78530 		movq	$0, -208(%rbp)
 2169      FFFFFF00 
 2169      000000
 2170 15c8 488DB538 		leaq	-200(%rbp), %rsi
 2170      FFFFFF
 2171 15cf B8000000 		movl	$0, %eax
 2171      00
 2172 15d4 BA180000 		movl	$24, %edx
 2172      00
 2173 15d9 4889F7   		movq	%rsi, %rdi
 2174 15dc 4889D1   		movq	%rdx, %rcx
 2175 15df F348AB   		rep stosq
 738:argtable2.c   ****     suffix = suffix ? suffix : "";
 2176              		.loc 1 738 0
 2177 15e2 4883BD08 		cmpq	$0, -248(%rbp)
 2177      FFFFFF00 
 2178 15ea 7409     		je	.L127
 2179              		.loc 1 738 0 is_stmt 0 discriminator 1
 2180 15ec 488B8508 		movq	-248(%rbp), %rax
 2180      FFFFFF
 2181 15f3 EB07     		jmp	.L128
 2182              	.L127:
 2183              		.loc 1 738 0 discriminator 2
 2184 15f5 488D0500 		leaq	.LC12(%rip), %rax
 2184      000000
 2185              	.L128:
 2186              		.loc 1 738 0 discriminator 3
 2187 15fc 48898508 		movq	%rax, -248(%rbp)
 2187      FFFFFF
 739:argtable2.c   **** 
 740:argtable2.c   ****     /* there is no way of passing the proper optvalue for optional argument values here, so we must
 741:argtable2.c   ****     arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,0,"|");
 2188              		.loc 1 741 0 is_stmt 1 discriminator 3
 2189 1603 488BBD10 		movq	-240(%rbp), %rdi
 2189      FFFFFF
 2190 160a 488B8D18 		movq	-232(%rbp), %rcx
 2190      FFFFFF
 2191 1611 488B9520 		movq	-224(%rbp), %rdx
 2191      FFFFFF
 2192 1618 488D8530 		leaq	-208(%rbp), %rax
 2192      FFFFFF
 2193 161f 488D3500 		leaq	.LC13(%rip), %rsi
 2193      000000
 2194 1626 48893424 		movq	%rsi, (%rsp)
 2195 162a 41B90000 		movl	$0, %r9d
 2195      0000
 2196 1630 4989F8   		movq	%rdi, %r8
 2197 1633 BEC80000 		movl	$200, %esi
 2197      00
 2198 1638 4889C7   		movq	%rax, %rdi
 2199 163b E82EFDFF 		call	arg_cat_optionv
 2199      FF
 742:argtable2.c   **** 
 743:argtable2.c   ****     fputs(syntax,fp);
 2200              		.loc 1 743 0 discriminator 3
 2201 1640 488B9528 		movq	-216(%rbp), %rdx
 2201      FFFFFF
 2202 1647 488D8530 		leaq	-208(%rbp), %rax
 2202      FFFFFF
 2203 164e 4889D6   		movq	%rdx, %rsi
 2204 1651 4889C7   		movq	%rax, %rdi
 2205 1654 E8000000 		call	fputs@PLT
 2205      00
 744:argtable2.c   ****     fputs(suffix,fp);
 2206              		.loc 1 744 0 discriminator 3
 2207 1659 488B9528 		movq	-216(%rbp), %rdx
 2207      FFFFFF
 2208 1660 488B8508 		movq	-248(%rbp), %rax
 2208      FFFFFF
 2209 1667 4889D6   		movq	%rdx, %rsi
 2210 166a 4889C7   		movq	%rax, %rdi
 2211 166d E8000000 		call	fputs@PLT
 2211      00
 745:argtable2.c   ****     }
 2212              		.loc 1 745 0 discriminator 3
 2213 1672 488B45F8 		movq	-8(%rbp), %rax
 2214 1676 64483304 		xorq	%fs:40, %rax
 2214      25280000 
 2214      00
 2215 167f 7405     		je	.L129
 2216              		.loc 1 745 0 is_stmt 0
 2217 1681 E8000000 		call	__stack_chk_fail@PLT
 2217      00
 2218              	.L129:
 2219 1686 C9       		leave
 2220              		.cfi_def_cfa 7, 8
 2221 1687 C3       		ret
 2222              		.cfi_endproc
 2223              	.LFE14:
 2225              		.section	.rodata
 2226              	.LC14:
 2227 009a 202D2563 		.string	" -%c"
 2227      00
 2228              	.LC15:
 2229 009f 205B2D25 		.string	" [-%c"
 2229      6300
 2230              	.LC16:
 2231 00a5 256300   		.string	"%c"
 2232              	.LC17:
 2233 00a8 5B256300 		.string	"[%c"
 2234              		.text
 2236              	arg_print_gnuswitch:
 2237              	.LFB15:
 746:argtable2.c   **** 
 747:argtable2.c   **** 
 748:argtable2.c   **** /*
 749:argtable2.c   ****  * Print a GNU style [OPTION] string in which all short options that
 750:argtable2.c   ****  * do not take argument values are presented in abbreviated form, as
 751:argtable2.c   ****  * in: -xvfsd, or -xvf[sd], or [-xvsfd]
 752:argtable2.c   ****  */
 753:argtable2.c   **** static
 754:argtable2.c   **** void arg_print_gnuswitch(FILE *fp, struct arg_hdr **table)
 755:argtable2.c   ****     {
 2238              		.loc 1 755 0 is_stmt 1
 2239              		.cfi_startproc
 2240 1688 55       		pushq	%rbp
 2241              		.cfi_def_cfa_offset 16
 2242              		.cfi_offset 6, -16
 2243 1689 4889E5   		movq	%rsp, %rbp
 2244              		.cfi_def_cfa_register 6
 2245 168c 4883EC30 		subq	$48, %rsp
 2246 1690 48897DD8 		movq	%rdi, -40(%rbp)
 2247 1694 488975D0 		movq	%rsi, -48(%rbp)
 756:argtable2.c   ****     int tabindex;
 757:argtable2.c   ****     char *format1=" -%c";
 2248              		.loc 1 757 0
 2249 1698 488D0500 		leaq	.LC14(%rip), %rax
 2249      000000
 2250 169f 488945E8 		movq	%rax, -24(%rbp)
 758:argtable2.c   ****     char *format2=" [-%c";
 2251              		.loc 1 758 0
 2252 16a3 488D0500 		leaq	.LC15(%rip), %rax
 2252      000000
 2253 16aa 488945F0 		movq	%rax, -16(%rbp)
 759:argtable2.c   ****     char *suffix="";
 2254              		.loc 1 759 0
 2255 16ae 488D0500 		leaq	.LC12(%rip), %rax
 2255      000000
 2256 16b5 488945F8 		movq	%rax, -8(%rbp)
 760:argtable2.c   **** 
 761:argtable2.c   ****     /* print all mandatory switches that are without argument values */
 762:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2257              		.loc 1 762 0
 2258 16b9 C745E400 		movl	$0, -28(%rbp)
 2258      000000
 2259 16c0 E9BE0000 		jmp	.L131
 2259      00
 2260              	.L137:
 763:argtable2.c   ****         {
 764:argtable2.c   ****         /* skip optional options */
 765:argtable2.c   ****         if (table[tabindex]->mincount<1)
 2261              		.loc 1 765 0
 2262 16c5 8B45E4   		movl	-28(%rbp), %eax
 2263 16c8 4898     		cltq
 2264 16ca 488D14C5 		leaq	0(,%rax,8), %rdx
 2264      00000000 
 2265 16d2 488B45D0 		movq	-48(%rbp), %rax
 2266 16d6 4801D0   		addq	%rdx, %rax
 2267 16d9 488B00   		movq	(%rax), %rax
 2268 16dc 8B4028   		movl	40(%rax), %eax
 2269 16df 85C0     		testl	%eax, %eax
 2270 16e1 7F05     		jg	.L132
 766:argtable2.c   ****             continue;
 2271              		.loc 1 766 0
 2272 16e3 E9970000 		jmp	.L133
 2272      00
 2273              	.L132:
 767:argtable2.c   **** 
 768:argtable2.c   ****         /* skip non-short options */
 769:argtable2.c   ****         if (table[tabindex]->shortopts==NULL)
 2274              		.loc 1 769 0
 2275 16e8 8B45E4   		movl	-28(%rbp), %eax
 2276 16eb 4898     		cltq
 2277 16ed 488D14C5 		leaq	0(,%rax,8), %rdx
 2277      00000000 
 2278 16f5 488B45D0 		movq	-48(%rbp), %rax
 2279 16f9 4801D0   		addq	%rdx, %rax
 2280 16fc 488B00   		movq	(%rax), %rax
 2281 16ff 488B4008 		movq	8(%rax), %rax
 2282 1703 4885C0   		testq	%rax, %rax
 2283 1706 7502     		jne	.L134
 770:argtable2.c   ****             continue;
 2284              		.loc 1 770 0
 2285 1708 EB75     		jmp	.L133
 2286              	.L134:
 771:argtable2.c   **** 
 772:argtable2.c   ****         /* skip options that take argument values */
 773:argtable2.c   ****         if (table[tabindex]->flag&ARG_HASVALUE)
 2287              		.loc 1 773 0
 2288 170a 8B45E4   		movl	-28(%rbp), %eax
 2289 170d 4898     		cltq
 2290 170f 488D14C5 		leaq	0(,%rax,8), %rdx
 2290      00000000 
 2291 1717 488B45D0 		movq	-48(%rbp), %rax
 2292 171b 4801D0   		addq	%rdx, %rax
 2293 171e 488B00   		movq	(%rax), %rax
 2294 1721 0FB600   		movzbl	(%rax), %eax
 2295 1724 0FBEC0   		movsbl	%al, %eax
 2296 1727 83E002   		andl	$2, %eax
 2297 172a 85C0     		testl	%eax, %eax
 2298 172c 7402     		je	.L135
 774:argtable2.c   ****             continue;
 2299              		.loc 1 774 0
 2300 172e EB4F     		jmp	.L133
 2301              	.L135:
 775:argtable2.c   **** 
 776:argtable2.c   ****         /* print the short option (only the first short option char, ignore multiple choices)*/
 777:argtable2.c   ****         fprintf(fp,format1,table[tabindex]->shortopts[0]);
 2302              		.loc 1 777 0
 2303 1730 8B45E4   		movl	-28(%rbp), %eax
 2304 1733 4898     		cltq
 2305 1735 488D14C5 		leaq	0(,%rax,8), %rdx
 2305      00000000 
 2306 173d 488B45D0 		movq	-48(%rbp), %rax
 2307 1741 4801D0   		addq	%rdx, %rax
 2308 1744 488B00   		movq	(%rax), %rax
 2309 1747 488B4008 		movq	8(%rax), %rax
 2310 174b 0FB600   		movzbl	(%rax), %eax
 2311 174e 0FBED0   		movsbl	%al, %edx
 2312 1751 488B4DE8 		movq	-24(%rbp), %rcx
 2313 1755 488B45D8 		movq	-40(%rbp), %rax
 2314 1759 4889CE   		movq	%rcx, %rsi
 2315 175c 4889C7   		movq	%rax, %rdi
 2316 175f B8000000 		movl	$0, %eax
 2316      00
 2317 1764 E8000000 		call	fprintf@PLT
 2317      00
 778:argtable2.c   ****         format1="%c";
 2318              		.loc 1 778 0
 2319 1769 488D0500 		leaq	.LC16(%rip), %rax
 2319      000000
 2320 1770 488945E8 		movq	%rax, -24(%rbp)
 779:argtable2.c   ****         format2="[%c";
 2321              		.loc 1 779 0
 2322 1774 488D0500 		leaq	.LC17(%rip), %rax
 2322      000000
 2323 177b 488945F0 		movq	%rax, -16(%rbp)
 2324              	.L133:
 762:argtable2.c   ****         {
 2325              		.loc 1 762 0
 2326 177f 8345E401 		addl	$1, -28(%rbp)
 2327              	.L131:
 762:argtable2.c   ****         {
 2328              		.loc 1 762 0 is_stmt 0 discriminator 1
 2329 1783 8B45E4   		movl	-28(%rbp), %eax
 2330 1786 4898     		cltq
 2331 1788 488D14C5 		leaq	0(,%rax,8), %rdx
 2331      00000000 
 2332 1790 488B45D0 		movq	-48(%rbp), %rax
 2333 1794 4801D0   		addq	%rdx, %rax
 2334 1797 488B00   		movq	(%rax), %rax
 2335 179a 4885C0   		testq	%rax, %rax
 2336 179d 7428     		je	.L136
 762:argtable2.c   ****         {
 2337              		.loc 1 762 0 discriminator 2
 2338 179f 8B45E4   		movl	-28(%rbp), %eax
 2339 17a2 4898     		cltq
 2340 17a4 488D14C5 		leaq	0(,%rax,8), %rdx
 2340      00000000 
 2341 17ac 488B45D0 		movq	-48(%rbp), %rax
 2342 17b0 4801D0   		addq	%rdx, %rax
 2343 17b3 488B00   		movq	(%rax), %rax
 2344 17b6 0FB600   		movzbl	(%rax), %eax
 2345 17b9 0FBEC0   		movsbl	%al, %eax
 2346 17bc 83E001   		andl	$1, %eax
 2347 17bf 85C0     		testl	%eax, %eax
 2348 17c1 0F84FEFE 		je	.L137
 2348      FFFF
 2349              	.L136:
 780:argtable2.c   ****         }
 781:argtable2.c   **** 
 782:argtable2.c   ****     /* print all optional switches that are without argument values */
 783:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2350              		.loc 1 783 0 is_stmt 1
 2351 17c7 C745E400 		movl	$0, -28(%rbp)
 2351      000000
 2352 17ce E9BE0000 		jmp	.L138
 2352      00
 2353              	.L144:
 784:argtable2.c   ****         {
 785:argtable2.c   ****         /* skip mandatory args */
 786:argtable2.c   ****         if (table[tabindex]->mincount>0)
 2354              		.loc 1 786 0
 2355 17d3 8B45E4   		movl	-28(%rbp), %eax
 2356 17d6 4898     		cltq
 2357 17d8 488D14C5 		leaq	0(,%rax,8), %rdx
 2357      00000000 
 2358 17e0 488B45D0 		movq	-48(%rbp), %rax
 2359 17e4 4801D0   		addq	%rdx, %rax
 2360 17e7 488B00   		movq	(%rax), %rax
 2361 17ea 8B4028   		movl	40(%rax), %eax
 2362 17ed 85C0     		testl	%eax, %eax
 2363 17ef 7E05     		jle	.L139
 787:argtable2.c   ****             continue;
 2364              		.loc 1 787 0
 2365 17f1 E9970000 		jmp	.L140
 2365      00
 2366              	.L139:
 788:argtable2.c   **** 
 789:argtable2.c   ****         /* skip args without short options */
 790:argtable2.c   ****         if (table[tabindex]->shortopts==NULL)
 2367              		.loc 1 790 0
 2368 17f6 8B45E4   		movl	-28(%rbp), %eax
 2369 17f9 4898     		cltq
 2370 17fb 488D14C5 		leaq	0(,%rax,8), %rdx
 2370      00000000 
 2371 1803 488B45D0 		movq	-48(%rbp), %rax
 2372 1807 4801D0   		addq	%rdx, %rax
 2373 180a 488B00   		movq	(%rax), %rax
 2374 180d 488B4008 		movq	8(%rax), %rax
 2375 1811 4885C0   		testq	%rax, %rax
 2376 1814 7502     		jne	.L141
 791:argtable2.c   ****             continue;
 2377              		.loc 1 791 0
 2378 1816 EB75     		jmp	.L140
 2379              	.L141:
 792:argtable2.c   **** 
 793:argtable2.c   ****         /* skip args with values */
 794:argtable2.c   ****         if (table[tabindex]->flag&ARG_HASVALUE)
 2380              		.loc 1 794 0
 2381 1818 8B45E4   		movl	-28(%rbp), %eax
 2382 181b 4898     		cltq
 2383 181d 488D14C5 		leaq	0(,%rax,8), %rdx
 2383      00000000 
 2384 1825 488B45D0 		movq	-48(%rbp), %rax
 2385 1829 4801D0   		addq	%rdx, %rax
 2386 182c 488B00   		movq	(%rax), %rax
 2387 182f 0FB600   		movzbl	(%rax), %eax
 2388 1832 0FBEC0   		movsbl	%al, %eax
 2389 1835 83E002   		andl	$2, %eax
 2390 1838 85C0     		testl	%eax, %eax
 2391 183a 7402     		je	.L142
 795:argtable2.c   ****             continue;
 2392              		.loc 1 795 0
 2393 183c EB4F     		jmp	.L140
 2394              	.L142:
 796:argtable2.c   **** 
 797:argtable2.c   ****         /* print first short option */
 798:argtable2.c   ****         fprintf(fp,format2,table[tabindex]->shortopts[0]);
 2395              		.loc 1 798 0
 2396 183e 8B45E4   		movl	-28(%rbp), %eax
 2397 1841 4898     		cltq
 2398 1843 488D14C5 		leaq	0(,%rax,8), %rdx
 2398      00000000 
 2399 184b 488B45D0 		movq	-48(%rbp), %rax
 2400 184f 4801D0   		addq	%rdx, %rax
 2401 1852 488B00   		movq	(%rax), %rax
 2402 1855 488B4008 		movq	8(%rax), %rax
 2403 1859 0FB600   		movzbl	(%rax), %eax
 2404 185c 0FBED0   		movsbl	%al, %edx
 2405 185f 488B4DF0 		movq	-16(%rbp), %rcx
 2406 1863 488B45D8 		movq	-40(%rbp), %rax
 2407 1867 4889CE   		movq	%rcx, %rsi
 2408 186a 4889C7   		movq	%rax, %rdi
 2409 186d B8000000 		movl	$0, %eax
 2409      00
 2410 1872 E8000000 		call	fprintf@PLT
 2410      00
 799:argtable2.c   ****         format2="%c";
 2411              		.loc 1 799 0
 2412 1877 488D0500 		leaq	.LC16(%rip), %rax
 2412      000000
 2413 187e 488945F0 		movq	%rax, -16(%rbp)
 800:argtable2.c   ****         suffix="]";
 2414              		.loc 1 800 0
 2415 1882 488D0500 		leaq	.LC8(%rip), %rax
 2415      000000
 2416 1889 488945F8 		movq	%rax, -8(%rbp)
 2417              	.L140:
 783:argtable2.c   ****         {
 2418              		.loc 1 783 0
 2419 188d 8345E401 		addl	$1, -28(%rbp)
 2420              	.L138:
 783:argtable2.c   ****         {
 2421              		.loc 1 783 0 is_stmt 0 discriminator 1
 2422 1891 8B45E4   		movl	-28(%rbp), %eax
 2423 1894 4898     		cltq
 2424 1896 488D14C5 		leaq	0(,%rax,8), %rdx
 2424      00000000 
 2425 189e 488B45D0 		movq	-48(%rbp), %rax
 2426 18a2 4801D0   		addq	%rdx, %rax
 2427 18a5 488B00   		movq	(%rax), %rax
 2428 18a8 4885C0   		testq	%rax, %rax
 2429 18ab 7428     		je	.L143
 783:argtable2.c   ****         {
 2430              		.loc 1 783 0 discriminator 2
 2431 18ad 8B45E4   		movl	-28(%rbp), %eax
 2432 18b0 4898     		cltq
 2433 18b2 488D14C5 		leaq	0(,%rax,8), %rdx
 2433      00000000 
 2434 18ba 488B45D0 		movq	-48(%rbp), %rax
 2435 18be 4801D0   		addq	%rdx, %rax
 2436 18c1 488B00   		movq	(%rax), %rax
 2437 18c4 0FB600   		movzbl	(%rax), %eax
 2438 18c7 0FBEC0   		movsbl	%al, %eax
 2439 18ca 83E001   		andl	$1, %eax
 2440 18cd 85C0     		testl	%eax, %eax
 2441 18cf 0F84FEFE 		je	.L144
 2441      FFFF
 2442              	.L143:
 801:argtable2.c   ****         }
 802:argtable2.c   **** 
 803:argtable2.c   ****     fprintf(fp,"%s",suffix);
 2443              		.loc 1 803 0 is_stmt 1
 2444 18d5 488B55D8 		movq	-40(%rbp), %rdx
 2445 18d9 488B45F8 		movq	-8(%rbp), %rax
 2446 18dd 4889D6   		movq	%rdx, %rsi
 2447 18e0 4889C7   		movq	%rax, %rdi
 2448 18e3 E8000000 		call	fputs@PLT
 2448      00
 804:argtable2.c   ****     }
 2449              		.loc 1 804 0
 2450 18e8 C9       		leave
 2451              		.cfi_def_cfa 7, 8
 2452 18e9 C3       		ret
 2453              		.cfi_endproc
 2454              	.LFE15:
 2456              		.section	.rodata
 2457              	.LC18:
 2458 00ac 20257300 		.string	" %s"
 2459              	.LC19:
 2460 00b0 205B2573 		.string	" [%s]"
 2460      5D00
 2461              	.LC20:
 2462 00b6 205B2573 		.string	" [%s] [%s]"
 2462      5D205B25 
 2462      735D00
 2463              	.LC21:
 2464 00c1 205B2573 		.string	" [%s]..."
 2464      5D2E2E2E 
 2464      00
 2465              		.text
 2466              		.globl	arg_print_syntax
 2468              	arg_print_syntax:
 2469              	.LFB16:
 805:argtable2.c   **** 
 806:argtable2.c   **** 
 807:argtable2.c   **** void arg_print_syntax(FILE *fp, void **argtable, const char *suffix)
 808:argtable2.c   ****     {
 2470              		.loc 1 808 0
 2471              		.cfi_startproc
 2472 18ea 55       		pushq	%rbp
 2473              		.cfi_def_cfa_offset 16
 2474              		.cfi_offset 6, -16
 2475 18eb 4889E5   		movq	%rsp, %rbp
 2476              		.cfi_def_cfa_register 6
 2477 18ee 4881EC20 		subq	$288, %rsp
 2477      010000
 2478 18f5 4889BDF8 		movq	%rdi, -264(%rbp)
 2478      FEFFFF
 2479 18fc 4889B5F0 		movq	%rsi, -272(%rbp)
 2479      FEFFFF
 2480 1903 488995E8 		movq	%rdx, -280(%rbp)
 2480      FEFFFF
 2481              		.loc 1 808 0
 2482 190a 64488B04 		movq	%fs:40, %rax
 2482      25280000 
 2482      00
 2483 1913 488945F8 		movq	%rax, -8(%rbp)
 2484 1917 31C0     		xorl	%eax, %eax
 809:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 2485              		.loc 1 809 0
 2486 1919 488B85F0 		movq	-272(%rbp), %rax
 2486      FEFFFF
 2487 1920 48898510 		movq	%rax, -240(%rbp)
 2487      FFFFFF
 810:argtable2.c   ****     int i,tabindex;
 811:argtable2.c   **** 
 812:argtable2.c   ****     /* print GNU style [OPTION] string */
 813:argtable2.c   ****     arg_print_gnuswitch(fp, table);
 2488              		.loc 1 813 0
 2489 1927 488B9510 		movq	-240(%rbp), %rdx
 2489      FFFFFF
 2490 192e 488B85F8 		movq	-264(%rbp), %rax
 2490      FEFFFF
 2491 1935 4889D6   		movq	%rdx, %rsi
 2492 1938 4889C7   		movq	%rax, %rdi
 2493 193b E848FDFF 		call	arg_print_gnuswitch
 2493      FF
 814:argtable2.c   **** 
 815:argtable2.c   ****     /* print remaining options in abbreviated style */
 816:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2494              		.loc 1 816 0
 2495 1940 C7850CFF 		movl	$0, -244(%rbp)
 2495      FFFF0000 
 2495      0000
 2496 194a E9860200 		jmp	.L146
 2496      00
 2497              	.L157:
 2498              	.LBB22:
 817:argtable2.c   ****         {
 818:argtable2.c   ****         char syntax[200]="";
 2499              		.loc 1 818 0
 2500 194f 48C78530 		movq	$0, -208(%rbp)
 2500      FFFFFF00 
 2500      000000
 2501 195a 488DB538 		leaq	-200(%rbp), %rsi
 2501      FFFFFF
 2502 1961 B8000000 		movl	$0, %eax
 2502      00
 2503 1966 BA180000 		movl	$24, %edx
 2503      00
 2504 196b 4889F7   		movq	%rsi, %rdi
 2505 196e 4889D1   		movq	%rdx, %rcx
 2506 1971 F348AB   		rep stosq
 819:argtable2.c   ****         const char *shortopts, *longopts, *datatype;
 820:argtable2.c   **** 
 821:argtable2.c   ****         /* skip short options without arg values (they were printed by arg_print_gnu_switch) */
 822:argtable2.c   ****         if (table[tabindex]->shortopts && !(table[tabindex]->flag&ARG_HASVALUE))
 2507              		.loc 1 822 0
 2508 1974 8B850CFF 		movl	-244(%rbp), %eax
 2508      FFFF
 2509 197a 4898     		cltq
 2510 197c 488D14C5 		leaq	0(,%rax,8), %rdx
 2510      00000000 
 2511 1984 488B8510 		movq	-240(%rbp), %rax
 2511      FFFFFF
 2512 198b 4801D0   		addq	%rdx, %rax
 2513 198e 488B00   		movq	(%rax), %rax
 2514 1991 488B4008 		movq	8(%rax), %rax
 2515 1995 4885C0   		testq	%rax, %rax
 2516 1998 742E     		je	.L147
 2517              		.loc 1 822 0 is_stmt 0 discriminator 1
 2518 199a 8B850CFF 		movl	-244(%rbp), %eax
 2518      FFFF
 2519 19a0 4898     		cltq
 2520 19a2 488D14C5 		leaq	0(,%rax,8), %rdx
 2520      00000000 
 2521 19aa 488B8510 		movq	-240(%rbp), %rax
 2521      FFFFFF
 2522 19b1 4801D0   		addq	%rdx, %rax
 2523 19b4 488B00   		movq	(%rax), %rax
 2524 19b7 0FB600   		movzbl	(%rax), %eax
 2525 19ba 0FBEC0   		movsbl	%al, %eax
 2526 19bd 83E002   		andl	$2, %eax
 2527 19c0 85C0     		testl	%eax, %eax
 2528 19c2 0F840602 		je	.L148
 2528      0000
 2529              	.L147:
 823:argtable2.c   ****             continue;
 824:argtable2.c   **** 
 825:argtable2.c   ****         shortopts = table[tabindex]->shortopts;
 2530              		.loc 1 825 0 is_stmt 1
 2531 19c8 8B850CFF 		movl	-244(%rbp), %eax
 2531      FFFF
 2532 19ce 4898     		cltq
 2533 19d0 488D14C5 		leaq	0(,%rax,8), %rdx
 2533      00000000 
 2534 19d8 488B8510 		movq	-240(%rbp), %rax
 2534      FFFFFF
 2535 19df 4801D0   		addq	%rdx, %rax
 2536 19e2 488B00   		movq	(%rax), %rax
 2537 19e5 488B4008 		movq	8(%rax), %rax
 2538 19e9 48898518 		movq	%rax, -232(%rbp)
 2538      FFFFFF
 826:argtable2.c   ****         longopts  = table[tabindex]->longopts;
 2539              		.loc 1 826 0
 2540 19f0 8B850CFF 		movl	-244(%rbp), %eax
 2540      FFFF
 2541 19f6 4898     		cltq
 2542 19f8 488D14C5 		leaq	0(,%rax,8), %rdx
 2542      00000000 
 2543 1a00 488B8510 		movq	-240(%rbp), %rax
 2543      FFFFFF
 2544 1a07 4801D0   		addq	%rdx, %rax
 2545 1a0a 488B00   		movq	(%rax), %rax
 2546 1a0d 488B4010 		movq	16(%rax), %rax
 2547 1a11 48898520 		movq	%rax, -224(%rbp)
 2547      FFFFFF
 827:argtable2.c   ****         datatype  = table[tabindex]->datatype;
 2548              		.loc 1 827 0
 2549 1a18 8B850CFF 		movl	-244(%rbp), %eax
 2549      FFFF
 2550 1a1e 4898     		cltq
 2551 1a20 488D14C5 		leaq	0(,%rax,8), %rdx
 2551      00000000 
 2552 1a28 488B8510 		movq	-240(%rbp), %rax
 2552      FFFFFF
 2553 1a2f 4801D0   		addq	%rdx, %rax
 2554 1a32 488B00   		movq	(%rax), %rax
 2555 1a35 488B4018 		movq	24(%rax), %rax
 2556 1a39 48898528 		movq	%rax, -216(%rbp)
 2556      FFFFFF
 828:argtable2.c   ****         arg_cat_option(syntax,sizeof(syntax),shortopts,longopts,datatype, table[tabindex]->flag&ARG
 2557              		.loc 1 828 0
 2558 1a40 8B850CFF 		movl	-244(%rbp), %eax
 2558      FFFF
 2559 1a46 4898     		cltq
 2560 1a48 488D14C5 		leaq	0(,%rax,8), %rdx
 2560      00000000 
 2561 1a50 488B8510 		movq	-240(%rbp), %rax
 2561      FFFFFF
 2562 1a57 4801D0   		addq	%rdx, %rax
 2563 1a5a 488B00   		movq	(%rax), %rax
 2564 1a5d 0FB600   		movzbl	(%rax), %eax
 2565 1a60 0FBEC0   		movsbl	%al, %eax
 2566 1a63 83E004   		andl	$4, %eax
 2567 1a66 89C7     		movl	%eax, %edi
 2568 1a68 488BB528 		movq	-216(%rbp), %rsi
 2568      FFFFFF
 2569 1a6f 488B8D20 		movq	-224(%rbp), %rcx
 2569      FFFFFF
 2570 1a76 488B9518 		movq	-232(%rbp), %rdx
 2570      FFFFFF
 2571 1a7d 488D8530 		leaq	-208(%rbp), %rax
 2571      FFFFFF
 2572 1a84 4189F9   		movl	%edi, %r9d
 2573 1a87 4989F0   		movq	%rsi, %r8
 2574 1a8a BEC80000 		movl	$200, %esi
 2574      00
 2575 1a8f 4889C7   		movq	%rax, %rdi
 2576 1a92 E8A5F6FF 		call	arg_cat_option
 2576      FF
 829:argtable2.c   **** 
 830:argtable2.c   ****         if (strlen(syntax)>0)
 2577              		.loc 1 830 0
 2578 1a97 488D8530 		leaq	-208(%rbp), %rax
 2578      FFFFFF
 2579 1a9e 0FB600   		movzbl	(%rax), %eax
 2580 1aa1 84C0     		testb	%al, %al
 2581 1aa3 0F842501 		je	.L148
 2581      0000
 831:argtable2.c   ****             {
 832:argtable2.c   ****             /* print mandatory instances of this option */
 833:argtable2.c   ****             for (i=0; i<table[tabindex]->mincount; i++)
 2582              		.loc 1 833 0
 2583 1aa9 C78508FF 		movl	$0, -248(%rbp)
 2583      FFFF0000 
 2583      0000
 2584 1ab3 EB29     		jmp	.L150
 2585              	.L151:
 834:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2586              		.loc 1 834 0 discriminator 2
 2587 1ab5 488D9530 		leaq	-208(%rbp), %rdx
 2587      FFFFFF
 2588 1abc 488B85F8 		movq	-264(%rbp), %rax
 2588      FEFFFF
 2589 1ac3 488D3500 		leaq	.LC18(%rip), %rsi
 2589      000000
 2590 1aca 4889C7   		movq	%rax, %rdi
 2591 1acd B8000000 		movl	$0, %eax
 2591      00
 2592 1ad2 E8000000 		call	fprintf@PLT
 2592      00
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2593              		.loc 1 833 0 discriminator 2
 2594 1ad7 838508FF 		addl	$1, -248(%rbp)
 2594      FFFF01
 2595              	.L150:
 833:argtable2.c   ****                 fprintf(fp, " %s",syntax);
 2596              		.loc 1 833 0 is_stmt 0 discriminator 1
 2597 1ade 8B850CFF 		movl	-244(%rbp), %eax
 2597      FFFF
 2598 1ae4 4898     		cltq
 2599 1ae6 488D14C5 		leaq	0(,%rax,8), %rdx
 2599      00000000 
 2600 1aee 488B8510 		movq	-240(%rbp), %rax
 2600      FFFFFF
 2601 1af5 4801D0   		addq	%rdx, %rax
 2602 1af8 488B00   		movq	(%rax), %rax
 2603 1afb 8B4028   		movl	40(%rax), %eax
 2604 1afe 3B8508FF 		cmpl	-248(%rbp), %eax
 2604      FFFF
 2605 1b04 7FAF     		jg	.L151
 835:argtable2.c   **** 
 836:argtable2.c   ****             /* print optional instances enclosed in "[..]" */
 837:argtable2.c   ****             switch ( table[tabindex]->maxcount - table[tabindex]->mincount )
 2606              		.loc 1 837 0 is_stmt 1
 2607 1b06 8B850CFF 		movl	-244(%rbp), %eax
 2607      FFFF
 2608 1b0c 4898     		cltq
 2609 1b0e 488D14C5 		leaq	0(,%rax,8), %rdx
 2609      00000000 
 2610 1b16 488B8510 		movq	-240(%rbp), %rax
 2610      FFFFFF
 2611 1b1d 4801D0   		addq	%rdx, %rax
 2612 1b20 488B00   		movq	(%rax), %rax
 2613 1b23 8B502C   		movl	44(%rax), %edx
 2614 1b26 8B850CFF 		movl	-244(%rbp), %eax
 2614      FFFF
 2615 1b2c 4898     		cltq
 2616 1b2e 488D0CC5 		leaq	0(,%rax,8), %rcx
 2616      00000000 
 2617 1b36 488B8510 		movq	-240(%rbp), %rax
 2617      FFFFFF
 2618 1b3d 4801C8   		addq	%rcx, %rax
 2619 1b40 488B00   		movq	(%rax), %rax
 2620 1b43 8B4028   		movl	40(%rax), %eax
 2621 1b46 29C2     		subl	%eax, %edx
 2622 1b48 89D0     		movl	%edx, %eax
 2623 1b4a 83F801   		cmpl	$1, %eax
 2624 1b4d 740B     		je	.L153
 2625 1b4f 83F802   		cmpl	$2, %eax
 2626 1b52 742A     		je	.L154
 2627 1b54 85C0     		testl	%eax, %eax
 2628 1b56 7475     		je	.L161
 2629 1b58 EB4F     		jmp	.L160
 2630              	.L153:
 838:argtable2.c   ****                 {
 839:argtable2.c   ****                 case 0:
 840:argtable2.c   ****                     break;
 841:argtable2.c   ****                 case 1:
 842:argtable2.c   ****                     fprintf(fp, " [%s]",syntax);
 2631              		.loc 1 842 0
 2632 1b5a 488D9530 		leaq	-208(%rbp), %rdx
 2632      FFFFFF
 2633 1b61 488B85F8 		movq	-264(%rbp), %rax
 2633      FEFFFF
 2634 1b68 488D3500 		leaq	.LC19(%rip), %rsi
 2634      000000
 2635 1b6f 4889C7   		movq	%rax, %rdi
 2636 1b72 B8000000 		movl	$0, %eax
 2636      00
 2637 1b77 E8000000 		call	fprintf@PLT
 2637      00
 843:argtable2.c   ****                     break;
 2638              		.loc 1 843 0
 2639 1b7c EB50     		jmp	.L149
 2640              	.L154:
 844:argtable2.c   ****                 case 2:
 845:argtable2.c   ****                     fprintf(fp, " [%s] [%s]",syntax,syntax);
 2641              		.loc 1 845 0
 2642 1b7e 488D8D30 		leaq	-208(%rbp), %rcx
 2642      FFFFFF
 2643 1b85 488D9530 		leaq	-208(%rbp), %rdx
 2643      FFFFFF
 2644 1b8c 488B85F8 		movq	-264(%rbp), %rax
 2644      FEFFFF
 2645 1b93 488D3500 		leaq	.LC20(%rip), %rsi
 2645      000000
 2646 1b9a 4889C7   		movq	%rax, %rdi
 2647 1b9d B8000000 		movl	$0, %eax
 2647      00
 2648 1ba2 E8000000 		call	fprintf@PLT
 2648      00
 846:argtable2.c   ****                     break;
 2649              		.loc 1 846 0
 2650 1ba7 EB25     		jmp	.L149
 2651              	.L160:
 847:argtable2.c   ****                 default:
 848:argtable2.c   ****                     fprintf(fp, " [%s]...",syntax);
 2652              		.loc 1 848 0
 2653 1ba9 488D9530 		leaq	-208(%rbp), %rdx
 2653      FFFFFF
 2654 1bb0 488B85F8 		movq	-264(%rbp), %rax
 2654      FEFFFF
 2655 1bb7 488D3500 		leaq	.LC21(%rip), %rsi
 2655      000000
 2656 1bbe 4889C7   		movq	%rax, %rdi
 2657 1bc1 B8000000 		movl	$0, %eax
 2657      00
 2658 1bc6 E8000000 		call	fprintf@PLT
 2658      00
 849:argtable2.c   ****                     break;
 2659              		.loc 1 849 0
 2660 1bcb EB01     		jmp	.L149
 2661              	.L161:
 840:argtable2.c   ****                 case 1:
 2662              		.loc 1 840 0
 2663 1bcd 90       		nop
 2664              	.L149:
 2665              	.L148:
 2666              	.LBE22:
 816:argtable2.c   ****         {
 2667              		.loc 1 816 0
 2668 1bce 83850CFF 		addl	$1, -244(%rbp)
 2668      FFFF01
 2669              	.L146:
 816:argtable2.c   ****         {
 2670              		.loc 1 816 0 is_stmt 0 discriminator 1
 2671 1bd5 8B850CFF 		movl	-244(%rbp), %eax
 2671      FFFF
 2672 1bdb 4898     		cltq
 2673 1bdd 488D14C5 		leaq	0(,%rax,8), %rdx
 2673      00000000 
 2674 1be5 488B8510 		movq	-240(%rbp), %rax
 2674      FFFFFF
 2675 1bec 4801D0   		addq	%rdx, %rax
 2676 1bef 488B00   		movq	(%rax), %rax
 2677 1bf2 4885C0   		testq	%rax, %rax
 2678 1bf5 742E     		je	.L156
 816:argtable2.c   ****         {
 2679              		.loc 1 816 0 discriminator 2
 2680 1bf7 8B850CFF 		movl	-244(%rbp), %eax
 2680      FFFF
 2681 1bfd 4898     		cltq
 2682 1bff 488D14C5 		leaq	0(,%rax,8), %rdx
 2682      00000000 
 2683 1c07 488B8510 		movq	-240(%rbp), %rax
 2683      FFFFFF
 2684 1c0e 4801D0   		addq	%rdx, %rax
 2685 1c11 488B00   		movq	(%rax), %rax
 2686 1c14 0FB600   		movzbl	(%rax), %eax
 2687 1c17 0FBEC0   		movsbl	%al, %eax
 2688 1c1a 83E001   		andl	$1, %eax
 2689 1c1d 85C0     		testl	%eax, %eax
 2690 1c1f 0F842AFD 		je	.L157
 2690      FFFF
 2691              	.L156:
 850:argtable2.c   ****                 }
 851:argtable2.c   ****             }
 852:argtable2.c   ****         }
 853:argtable2.c   **** 
 854:argtable2.c   ****     if (suffix)
 2692              		.loc 1 854 0 is_stmt 1
 2693 1c25 4883BDE8 		cmpq	$0, -280(%rbp)
 2693      FEFFFF00 
 2694 1c2d 7419     		je	.L145
 855:argtable2.c   ****         fprintf(fp, "%s",suffix);
 2695              		.loc 1 855 0
 2696 1c2f 488B95F8 		movq	-264(%rbp), %rdx
 2696      FEFFFF
 2697 1c36 488B85E8 		movq	-280(%rbp), %rax
 2697      FEFFFF
 2698 1c3d 4889D6   		movq	%rdx, %rsi
 2699 1c40 4889C7   		movq	%rax, %rdi
 2700 1c43 E8000000 		call	fputs@PLT
 2700      00
 2701              	.L145:
 856:argtable2.c   ****     }
 2702              		.loc 1 856 0
 2703 1c48 488B45F8 		movq	-8(%rbp), %rax
 2704 1c4c 64483304 		xorq	%fs:40, %rax
 2704      25280000 
 2704      00
 2705 1c55 7405     		je	.L159
 2706 1c57 E8000000 		call	__stack_chk_fail@PLT
 2706      00
 2707              	.L159:
 2708 1c5c C9       		leave
 2709              		.cfi_def_cfa 7, 8
 2710 1c5d C3       		ret
 2711              		.cfi_endproc
 2712              	.LFE16:
 2714              		.globl	arg_print_syntaxv
 2716              	arg_print_syntaxv:
 2717              	.LFB17:
 857:argtable2.c   **** 
 858:argtable2.c   **** 
 859:argtable2.c   **** void arg_print_syntaxv(FILE *fp, void **argtable, const char *suffix)
 860:argtable2.c   ****     {
 2718              		.loc 1 860 0
 2719              		.cfi_startproc
 2720 1c5e 55       		pushq	%rbp
 2721              		.cfi_def_cfa_offset 16
 2722              		.cfi_offset 6, -16
 2723 1c5f 4889E5   		movq	%rsp, %rbp
 2724              		.cfi_def_cfa_register 6
 2725 1c62 4881EC20 		subq	$288, %rsp
 2725      010000
 2726 1c69 4889BDF8 		movq	%rdi, -264(%rbp)
 2726      FEFFFF
 2727 1c70 4889B5F0 		movq	%rsi, -272(%rbp)
 2727      FEFFFF
 2728 1c77 488995E8 		movq	%rdx, -280(%rbp)
 2728      FEFFFF
 2729              		.loc 1 860 0
 2730 1c7e 64488B04 		movq	%fs:40, %rax
 2730      25280000 
 2730      00
 2731 1c87 488945F8 		movq	%rax, -8(%rbp)
 2732 1c8b 31C0     		xorl	%eax, %eax
 861:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 2733              		.loc 1 861 0
 2734 1c8d 488B85F0 		movq	-272(%rbp), %rax
 2734      FEFFFF
 2735 1c94 48898510 		movq	%rax, -240(%rbp)
 2735      FFFFFF
 862:argtable2.c   ****     int i,tabindex;
 863:argtable2.c   **** 
 864:argtable2.c   ****     /* print remaining options in abbreviated style */
 865:argtable2.c   ****     for(tabindex=0; table[tabindex] && !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2736              		.loc 1 865 0
 2737 1c9b C7850CFF 		movl	$0, -244(%rbp)
 2737      FFFF0000 
 2737      0000
 2738 1ca5 E92C0200 		jmp	.L163
 2738      00
 2739              	.L172:
 2740              	.LBB23:
 866:argtable2.c   ****         {
 867:argtable2.c   ****         char syntax[200]="";
 2741              		.loc 1 867 0
 2742 1caa 48C78530 		movq	$0, -208(%rbp)
 2742      FFFFFF00 
 2742      000000
 2743 1cb5 488DB538 		leaq	-200(%rbp), %rsi
 2743      FFFFFF
 2744 1cbc B8000000 		movl	$0, %eax
 2744      00
 2745 1cc1 BA180000 		movl	$24, %edx
 2745      00
 2746 1cc6 4889F7   		movq	%rsi, %rdi
 2747 1cc9 4889D1   		movq	%rdx, %rcx
 2748 1ccc F348AB   		rep stosq
 868:argtable2.c   ****         const char *shortopts, *longopts, *datatype;
 869:argtable2.c   **** 
 870:argtable2.c   ****         shortopts = table[tabindex]->shortopts;
 2749              		.loc 1 870 0
 2750 1ccf 8B850CFF 		movl	-244(%rbp), %eax
 2750      FFFF
 2751 1cd5 4898     		cltq
 2752 1cd7 488D14C5 		leaq	0(,%rax,8), %rdx
 2752      00000000 
 2753 1cdf 488B8510 		movq	-240(%rbp), %rax
 2753      FFFFFF
 2754 1ce6 4801D0   		addq	%rdx, %rax
 2755 1ce9 488B00   		movq	(%rax), %rax
 2756 1cec 488B4008 		movq	8(%rax), %rax
 2757 1cf0 48898518 		movq	%rax, -232(%rbp)
 2757      FFFFFF
 871:argtable2.c   ****         longopts  = table[tabindex]->longopts;
 2758              		.loc 1 871 0
 2759 1cf7 8B850CFF 		movl	-244(%rbp), %eax
 2759      FFFF
 2760 1cfd 4898     		cltq
 2761 1cff 488D14C5 		leaq	0(,%rax,8), %rdx
 2761      00000000 
 2762 1d07 488B8510 		movq	-240(%rbp), %rax
 2762      FFFFFF
 2763 1d0e 4801D0   		addq	%rdx, %rax
 2764 1d11 488B00   		movq	(%rax), %rax
 2765 1d14 488B4010 		movq	16(%rax), %rax
 2766 1d18 48898520 		movq	%rax, -224(%rbp)
 2766      FFFFFF
 872:argtable2.c   ****         datatype  = table[tabindex]->datatype;
 2767              		.loc 1 872 0
 2768 1d1f 8B850CFF 		movl	-244(%rbp), %eax
 2768      FFFF
 2769 1d25 4898     		cltq
 2770 1d27 488D14C5 		leaq	0(,%rax,8), %rdx
 2770      00000000 
 2771 1d2f 488B8510 		movq	-240(%rbp), %rax
 2771      FFFFFF
 2772 1d36 4801D0   		addq	%rdx, %rax
 2773 1d39 488B00   		movq	(%rax), %rax
 2774 1d3c 488B4018 		movq	24(%rax), %rax
 2775 1d40 48898528 		movq	%rax, -216(%rbp)
 2775      FFFFFF
 873:argtable2.c   ****         arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag&ARG
 2776              		.loc 1 873 0
 2777 1d47 8B850CFF 		movl	-244(%rbp), %eax
 2777      FFFF
 2778 1d4d 4898     		cltq
 2779 1d4f 488D14C5 		leaq	0(,%rax,8), %rdx
 2779      00000000 
 2780 1d57 488B8510 		movq	-240(%rbp), %rax
 2780      FFFFFF
 2781 1d5e 4801D0   		addq	%rdx, %rax
 2782 1d61 488B00   		movq	(%rax), %rax
 2783 1d64 0FB600   		movzbl	(%rax), %eax
 2784 1d67 0FBEC0   		movsbl	%al, %eax
 2785 1d6a 83E004   		andl	$4, %eax
 2786 1d6d 4189C0   		movl	%eax, %r8d
 2787 1d70 488BBD28 		movq	-216(%rbp), %rdi
 2787      FFFFFF
 2788 1d77 488B8D20 		movq	-224(%rbp), %rcx
 2788      FFFFFF
 2789 1d7e 488B9518 		movq	-232(%rbp), %rdx
 2789      FFFFFF
 2790 1d85 488D8530 		leaq	-208(%rbp), %rax
 2790      FFFFFF
 2791 1d8c 488D3500 		leaq	.LC13(%rip), %rsi
 2791      000000
 2792 1d93 48893424 		movq	%rsi, (%rsp)
 2793 1d97 4589C1   		movl	%r8d, %r9d
 2794 1d9a 4989F8   		movq	%rdi, %r8
 2795 1d9d BEC80000 		movl	$200, %esi
 2795      00
 2796 1da2 4889C7   		movq	%rax, %rdi
 2797 1da5 E8C4F5FF 		call	arg_cat_optionv
 2797      FF
 874:argtable2.c   **** 
 875:argtable2.c   ****         /* print mandatory options */
 876:argtable2.c   ****         for (i=0; i<table[tabindex]->mincount; i++)
 2798              		.loc 1 876 0
 2799 1daa C78508FF 		movl	$0, -248(%rbp)
 2799      FFFF0000 
 2799      0000
 2800 1db4 EB29     		jmp	.L164
 2801              	.L165:
 877:argtable2.c   ****             fprintf(fp," %s",syntax);
 2802              		.loc 1 877 0 discriminator 2
 2803 1db6 488D9530 		leaq	-208(%rbp), %rdx
 2803      FFFFFF
 2804 1dbd 488B85F8 		movq	-264(%rbp), %rax
 2804      FEFFFF
 2805 1dc4 488D3500 		leaq	.LC18(%rip), %rsi
 2805      000000
 2806 1dcb 4889C7   		movq	%rax, %rdi
 2807 1dce B8000000 		movl	$0, %eax
 2807      00
 2808 1dd3 E8000000 		call	fprintf@PLT
 2808      00
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 2809              		.loc 1 876 0 discriminator 2
 2810 1dd8 838508FF 		addl	$1, -248(%rbp)
 2810      FFFF01
 2811              	.L164:
 876:argtable2.c   ****             fprintf(fp," %s",syntax);
 2812              		.loc 1 876 0 is_stmt 0 discriminator 1
 2813 1ddf 8B850CFF 		movl	-244(%rbp), %eax
 2813      FFFF
 2814 1de5 4898     		cltq
 2815 1de7 488D14C5 		leaq	0(,%rax,8), %rdx
 2815      00000000 
 2816 1def 488B8510 		movq	-240(%rbp), %rax
 2816      FFFFFF
 2817 1df6 4801D0   		addq	%rdx, %rax
 2818 1df9 488B00   		movq	(%rax), %rax
 2819 1dfc 8B4028   		movl	40(%rax), %eax
 2820 1dff 3B8508FF 		cmpl	-248(%rbp), %eax
 2820      FFFF
 2821 1e05 7FAF     		jg	.L165
 878:argtable2.c   **** 
 879:argtable2.c   ****         /* print optional args enclosed in "[..]" */
 880:argtable2.c   ****         switch ( table[tabindex]->maxcount - table[tabindex]->mincount )
 2822              		.loc 1 880 0 is_stmt 1
 2823 1e07 8B850CFF 		movl	-244(%rbp), %eax
 2823      FFFF
 2824 1e0d 4898     		cltq
 2825 1e0f 488D14C5 		leaq	0(,%rax,8), %rdx
 2825      00000000 
 2826 1e17 488B8510 		movq	-240(%rbp), %rax
 2826      FFFFFF
 2827 1e1e 4801D0   		addq	%rdx, %rax
 2828 1e21 488B00   		movq	(%rax), %rax
 2829 1e24 8B502C   		movl	44(%rax), %edx
 2830 1e27 8B850CFF 		movl	-244(%rbp), %eax
 2830      FFFF
 2831 1e2d 4898     		cltq
 2832 1e2f 488D0CC5 		leaq	0(,%rax,8), %rcx
 2832      00000000 
 2833 1e37 488B8510 		movq	-240(%rbp), %rax
 2833      FFFFFF
 2834 1e3e 4801C8   		addq	%rcx, %rax
 2835 1e41 488B00   		movq	(%rax), %rax
 2836 1e44 8B4028   		movl	40(%rax), %eax
 2837 1e47 29C2     		subl	%eax, %edx
 2838 1e49 89D0     		movl	%edx, %eax
 2839 1e4b 83F801   		cmpl	$1, %eax
 2840 1e4e 740B     		je	.L167
 2841 1e50 83F802   		cmpl	$2, %eax
 2842 1e53 742A     		je	.L168
 2843 1e55 85C0     		testl	%eax, %eax
 2844 1e57 7475     		je	.L176
 2845 1e59 EB4F     		jmp	.L175
 2846              	.L167:
 881:argtable2.c   ****             {
 882:argtable2.c   ****             case 0:
 883:argtable2.c   ****                 break;
 884:argtable2.c   ****             case 1:
 885:argtable2.c   ****                 fprintf(fp, " [%s]",syntax);
 2847              		.loc 1 885 0
 2848 1e5b 488D9530 		leaq	-208(%rbp), %rdx
 2848      FFFFFF
 2849 1e62 488B85F8 		movq	-264(%rbp), %rax
 2849      FEFFFF
 2850 1e69 488D3500 		leaq	.LC19(%rip), %rsi
 2850      000000
 2851 1e70 4889C7   		movq	%rax, %rdi
 2852 1e73 B8000000 		movl	$0, %eax
 2852      00
 2853 1e78 E8000000 		call	fprintf@PLT
 2853      00
 886:argtable2.c   ****                 break;
 2854              		.loc 1 886 0
 2855 1e7d EB50     		jmp	.L170
 2856              	.L168:
 887:argtable2.c   ****             case 2:
 888:argtable2.c   ****                 fprintf(fp, " [%s] [%s]",syntax,syntax);
 2857              		.loc 1 888 0
 2858 1e7f 488D8D30 		leaq	-208(%rbp), %rcx
 2858      FFFFFF
 2859 1e86 488D9530 		leaq	-208(%rbp), %rdx
 2859      FFFFFF
 2860 1e8d 488B85F8 		movq	-264(%rbp), %rax
 2860      FEFFFF
 2861 1e94 488D3500 		leaq	.LC20(%rip), %rsi
 2861      000000
 2862 1e9b 4889C7   		movq	%rax, %rdi
 2863 1e9e B8000000 		movl	$0, %eax
 2863      00
 2864 1ea3 E8000000 		call	fprintf@PLT
 2864      00
 889:argtable2.c   ****                 break;
 2865              		.loc 1 889 0
 2866 1ea8 EB25     		jmp	.L170
 2867              	.L175:
 890:argtable2.c   ****             default:
 891:argtable2.c   ****                 fprintf(fp, " [%s]...",syntax);
 2868              		.loc 1 891 0
 2869 1eaa 488D9530 		leaq	-208(%rbp), %rdx
 2869      FFFFFF
 2870 1eb1 488B85F8 		movq	-264(%rbp), %rax
 2870      FEFFFF
 2871 1eb8 488D3500 		leaq	.LC21(%rip), %rsi
 2871      000000
 2872 1ebf 4889C7   		movq	%rax, %rdi
 2873 1ec2 B8000000 		movl	$0, %eax
 2873      00
 2874 1ec7 E8000000 		call	fprintf@PLT
 2874      00
 892:argtable2.c   ****                 break;
 2875              		.loc 1 892 0
 2876 1ecc EB01     		jmp	.L170
 2877              	.L176:
 883:argtable2.c   ****             case 1:
 2878              		.loc 1 883 0
 2879 1ece 90       		nop
 2880              	.L170:
 2881              	.LBE23:
 865:argtable2.c   ****         {
 2882              		.loc 1 865 0
 2883 1ecf 83850CFF 		addl	$1, -244(%rbp)
 2883      FFFF01
 2884              	.L163:
 865:argtable2.c   ****         {
 2885              		.loc 1 865 0 is_stmt 0 discriminator 1
 2886 1ed6 8B850CFF 		movl	-244(%rbp), %eax
 2886      FFFF
 2887 1edc 4898     		cltq
 2888 1ede 488D14C5 		leaq	0(,%rax,8), %rdx
 2888      00000000 
 2889 1ee6 488B8510 		movq	-240(%rbp), %rax
 2889      FFFFFF
 2890 1eed 4801D0   		addq	%rdx, %rax
 2891 1ef0 488B00   		movq	(%rax), %rax
 2892 1ef3 4885C0   		testq	%rax, %rax
 2893 1ef6 742E     		je	.L171
 865:argtable2.c   ****         {
 2894              		.loc 1 865 0 discriminator 2
 2895 1ef8 8B850CFF 		movl	-244(%rbp), %eax
 2895      FFFF
 2896 1efe 4898     		cltq
 2897 1f00 488D14C5 		leaq	0(,%rax,8), %rdx
 2897      00000000 
 2898 1f08 488B8510 		movq	-240(%rbp), %rax
 2898      FFFFFF
 2899 1f0f 4801D0   		addq	%rdx, %rax
 2900 1f12 488B00   		movq	(%rax), %rax
 2901 1f15 0FB600   		movzbl	(%rax), %eax
 2902 1f18 0FBEC0   		movsbl	%al, %eax
 2903 1f1b 83E001   		andl	$1, %eax
 2904 1f1e 85C0     		testl	%eax, %eax
 2905 1f20 0F8484FD 		je	.L172
 2905      FFFF
 2906              	.L171:
 893:argtable2.c   ****             }
 894:argtable2.c   ****         }
 895:argtable2.c   **** 
 896:argtable2.c   ****     if (suffix)
 2907              		.loc 1 896 0 is_stmt 1
 2908 1f26 4883BDE8 		cmpq	$0, -280(%rbp)
 2908      FEFFFF00 
 2909 1f2e 7419     		je	.L162
 897:argtable2.c   ****         fprintf(fp,"%s",suffix);
 2910              		.loc 1 897 0
 2911 1f30 488B95F8 		movq	-264(%rbp), %rdx
 2911      FEFFFF
 2912 1f37 488B85E8 		movq	-280(%rbp), %rax
 2912      FEFFFF
 2913 1f3e 4889D6   		movq	%rdx, %rsi
 2914 1f41 4889C7   		movq	%rax, %rdi
 2915 1f44 E8000000 		call	fputs@PLT
 2915      00
 2916              	.L162:
 898:argtable2.c   ****     }
 2917              		.loc 1 898 0
 2918 1f49 488B45F8 		movq	-8(%rbp), %rax
 2919 1f4d 64483304 		xorq	%fs:40, %rax
 2919      25280000 
 2919      00
 2920 1f56 7405     		je	.L174
 2921 1f58 E8000000 		call	__stack_chk_fail@PLT
 2921      00
 2922              	.L174:
 2923 1f5d C9       		leave
 2924              		.cfi_def_cfa 7, 8
 2925 1f5e C3       		ret
 2926              		.cfi_endproc
 2927              	.LFE17:
 2929              		.section	.rodata
 2930              	.LC22:
 2931 00ca 2020252D 		.string	"  %-20s %s\n"
 2931      32307320 
 2931      25730A00 
 2932              	.LC23:
 2933 00d6 2C2000   		.string	", "
 2934              		.text
 2935              		.globl	arg_print_glossary
 2937              	arg_print_glossary:
 2938              	.LFB18:
 899:argtable2.c   **** 
 900:argtable2.c   **** 
 901:argtable2.c   **** void arg_print_glossary(FILE *fp, void **argtable, const char *format)
 902:argtable2.c   ****     {
 2939              		.loc 1 902 0
 2940              		.cfi_startproc
 2941 1f5f 55       		pushq	%rbp
 2942              		.cfi_def_cfa_offset 16
 2943              		.cfi_offset 6, -16
 2944 1f60 4889E5   		movq	%rsp, %rbp
 2945              		.cfi_def_cfa_register 6
 2946 1f63 4881EC20 		subq	$288, %rsp
 2946      010000
 2947 1f6a 4889BDF8 		movq	%rdi, -264(%rbp)
 2947      FEFFFF
 2948 1f71 4889B5F0 		movq	%rsi, -272(%rbp)
 2948      FEFFFF
 2949 1f78 488995E8 		movq	%rdx, -280(%rbp)
 2949      FEFFFF
 2950              		.loc 1 902 0
 2951 1f7f 64488B04 		movq	%fs:40, %rax
 2951      25280000 
 2951      00
 2952 1f88 488945F8 		movq	%rax, -8(%rbp)
 2953 1f8c 31C0     		xorl	%eax, %eax
 903:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 2954              		.loc 1 903 0
 2955 1f8e 488B85F0 		movq	-272(%rbp), %rax
 2955      FEFFFF
 2956 1f95 48898508 		movq	%rax, -248(%rbp)
 2956      FFFFFF
 904:argtable2.c   ****     int tabindex;
 905:argtable2.c   **** 
 906:argtable2.c   ****     format = format ? format : "  %-20s %s\n";
 2957              		.loc 1 906 0
 2958 1f9c 4883BDE8 		cmpq	$0, -280(%rbp)
 2958      FEFFFF00 
 2959 1fa4 7409     		je	.L178
 2960              		.loc 1 906 0 is_stmt 0 discriminator 1
 2961 1fa6 488B85E8 		movq	-280(%rbp), %rax
 2961      FEFFFF
 2962 1fad EB07     		jmp	.L179
 2963              	.L178:
 2964              		.loc 1 906 0 discriminator 2
 2965 1faf 488D0500 		leaq	.LC22(%rip), %rax
 2965      000000
 2966              	.L179:
 2967              		.loc 1 906 0 discriminator 3
 2968 1fb6 488985E8 		movq	%rax, -280(%rbp)
 2968      FEFFFF
 907:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 2969              		.loc 1 907 0 is_stmt 1 discriminator 3
 2970 1fbd C78504FF 		movl	$0, -252(%rbp)
 2970      FFFF0000 
 2970      0000
 2971 1fc7 E9820100 		jmp	.L180
 2971      00
 2972              	.L182:
 908:argtable2.c   ****         {
 909:argtable2.c   ****         if (table[tabindex]->glossary)
 2973              		.loc 1 909 0
 2974 1fcc 8B8504FF 		movl	-252(%rbp), %eax
 2974      FFFF
 2975 1fd2 4898     		cltq
 2976 1fd4 488D14C5 		leaq	0(,%rax,8), %rdx
 2976      00000000 
 2977 1fdc 488B8508 		movq	-248(%rbp), %rax
 2977      FFFFFF
 2978 1fe3 4801D0   		addq	%rdx, %rax
 2979 1fe6 488B00   		movq	(%rax), %rax
 2980 1fe9 488B4020 		movq	32(%rax), %rax
 2981 1fed 4885C0   		testq	%rax, %rax
 2982 1ff0 0F845101 		je	.L181
 2982      0000
 2983              	.LBB24:
 910:argtable2.c   ****             {
 911:argtable2.c   ****             char syntax[200]="";
 2984              		.loc 1 911 0
 2985 1ff6 48C78530 		movq	$0, -208(%rbp)
 2985      FFFFFF00 
 2985      000000
 2986 2001 488DB538 		leaq	-200(%rbp), %rsi
 2986      FFFFFF
 2987 2008 B8000000 		movl	$0, %eax
 2987      00
 2988 200d BA180000 		movl	$24, %edx
 2988      00
 2989 2012 4889F7   		movq	%rsi, %rdi
 2990 2015 4889D1   		movq	%rdx, %rcx
 2991 2018 F348AB   		rep stosq
 912:argtable2.c   ****             const char *shortopts = table[tabindex]->shortopts;
 2992              		.loc 1 912 0
 2993 201b 8B8504FF 		movl	-252(%rbp), %eax
 2993      FFFF
 2994 2021 4898     		cltq
 2995 2023 488D14C5 		leaq	0(,%rax,8), %rdx
 2995      00000000 
 2996 202b 488B8508 		movq	-248(%rbp), %rax
 2996      FFFFFF
 2997 2032 4801D0   		addq	%rdx, %rax
 2998 2035 488B00   		movq	(%rax), %rax
 2999 2038 488B4008 		movq	8(%rax), %rax
 3000 203c 48898510 		movq	%rax, -240(%rbp)
 3000      FFFFFF
 913:argtable2.c   ****             const char *longopts  = table[tabindex]->longopts;
 3001              		.loc 1 913 0
 3002 2043 8B8504FF 		movl	-252(%rbp), %eax
 3002      FFFF
 3003 2049 4898     		cltq
 3004 204b 488D14C5 		leaq	0(,%rax,8), %rdx
 3004      00000000 
 3005 2053 488B8508 		movq	-248(%rbp), %rax
 3005      FFFFFF
 3006 205a 4801D0   		addq	%rdx, %rax
 3007 205d 488B00   		movq	(%rax), %rax
 3008 2060 488B4010 		movq	16(%rax), %rax
 3009 2064 48898518 		movq	%rax, -232(%rbp)
 3009      FFFFFF
 914:argtable2.c   ****             const char *datatype  = table[tabindex]->datatype;
 3010              		.loc 1 914 0
 3011 206b 8B8504FF 		movl	-252(%rbp), %eax
 3011      FFFF
 3012 2071 4898     		cltq
 3013 2073 488D14C5 		leaq	0(,%rax,8), %rdx
 3013      00000000 
 3014 207b 488B8508 		movq	-248(%rbp), %rax
 3014      FFFFFF
 3015 2082 4801D0   		addq	%rdx, %rax
 3016 2085 488B00   		movq	(%rax), %rax
 3017 2088 488B4018 		movq	24(%rax), %rax
 3018 208c 48898520 		movq	%rax, -224(%rbp)
 3018      FFFFFF
 915:argtable2.c   ****             const char *glossary  = table[tabindex]->glossary;
 3019              		.loc 1 915 0
 3020 2093 8B8504FF 		movl	-252(%rbp), %eax
 3020      FFFF
 3021 2099 4898     		cltq
 3022 209b 488D14C5 		leaq	0(,%rax,8), %rdx
 3022      00000000 
 3023 20a3 488B8508 		movq	-248(%rbp), %rax
 3023      FFFFFF
 3024 20aa 4801D0   		addq	%rdx, %rax
 3025 20ad 488B00   		movq	(%rax), %rax
 3026 20b0 488B4020 		movq	32(%rax), %rax
 3027 20b4 48898528 		movq	%rax, -216(%rbp)
 3027      FFFFFF
 916:argtable2.c   ****             arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag
 3028              		.loc 1 916 0
 3029 20bb 8B8504FF 		movl	-252(%rbp), %eax
 3029      FFFF
 3030 20c1 4898     		cltq
 3031 20c3 488D14C5 		leaq	0(,%rax,8), %rdx
 3031      00000000 
 3032 20cb 488B8508 		movq	-248(%rbp), %rax
 3032      FFFFFF
 3033 20d2 4801D0   		addq	%rdx, %rax
 3034 20d5 488B00   		movq	(%rax), %rax
 3035 20d8 0FB600   		movzbl	(%rax), %eax
 3036 20db 0FBEC0   		movsbl	%al, %eax
 3037 20de 83E004   		andl	$4, %eax
 3038 20e1 4189C0   		movl	%eax, %r8d
 3039 20e4 488BBD20 		movq	-224(%rbp), %rdi
 3039      FFFFFF
 3040 20eb 488B8D18 		movq	-232(%rbp), %rcx
 3040      FFFFFF
 3041 20f2 488B9510 		movq	-240(%rbp), %rdx
 3041      FFFFFF
 3042 20f9 488D8530 		leaq	-208(%rbp), %rax
 3042      FFFFFF
 3043 2100 488D3500 		leaq	.LC23(%rip), %rsi
 3043      000000
 3044 2107 48893424 		movq	%rsi, (%rsp)
 3045 210b 4589C1   		movl	%r8d, %r9d
 3046 210e 4989F8   		movq	%rdi, %r8
 3047 2111 BEC80000 		movl	$200, %esi
 3047      00
 3048 2116 4889C7   		movq	%rax, %rdi
 3049 2119 E850F2FF 		call	arg_cat_optionv
 3049      FF
 917:argtable2.c   ****             fprintf(fp,format,syntax,glossary);
 3050              		.loc 1 917 0
 3051 211e 488B8D28 		movq	-216(%rbp), %rcx
 3051      FFFFFF
 3052 2125 488D9530 		leaq	-208(%rbp), %rdx
 3052      FFFFFF
 3053 212c 488BB5E8 		movq	-280(%rbp), %rsi
 3053      FEFFFF
 3054 2133 488B85F8 		movq	-264(%rbp), %rax
 3054      FEFFFF
 3055 213a 4889C7   		movq	%rax, %rdi
 3056 213d B8000000 		movl	$0, %eax
 3056      00
 3057 2142 E8000000 		call	fprintf@PLT
 3057      00
 3058              	.L181:
 3059              	.LBE24:
 907:argtable2.c   ****         {
 3060              		.loc 1 907 0
 3061 2147 838504FF 		addl	$1, -252(%rbp)
 3061      FFFF01
 3062              	.L180:
 907:argtable2.c   ****         {
 3063              		.loc 1 907 0 is_stmt 0 discriminator 1
 3064 214e 8B8504FF 		movl	-252(%rbp), %eax
 3064      FFFF
 3065 2154 4898     		cltq
 3066 2156 488D14C5 		leaq	0(,%rax,8), %rdx
 3066      00000000 
 3067 215e 488B8508 		movq	-248(%rbp), %rax
 3067      FFFFFF
 3068 2165 4801D0   		addq	%rdx, %rax
 3069 2168 488B00   		movq	(%rax), %rax
 3070 216b 0FB600   		movzbl	(%rax), %eax
 3071 216e 0FBEC0   		movsbl	%al, %eax
 3072 2171 83E001   		andl	$1, %eax
 3073 2174 85C0     		testl	%eax, %eax
 3074 2176 0F8450FE 		je	.L182
 3074      FFFF
 918:argtable2.c   ****             }
 919:argtable2.c   ****         }
 920:argtable2.c   ****     }
 3075              		.loc 1 920 0 is_stmt 1
 3076 217c 488B45F8 		movq	-8(%rbp), %rax
 3077 2180 64483304 		xorq	%fs:40, %rax
 3077      25280000 
 3077      00
 3078 2189 7405     		je	.L183
 3079 218b E8000000 		call	__stack_chk_fail@PLT
 3079      00
 3080              	.L183:
 3081 2190 C9       		leave
 3082              		.cfi_def_cfa 7, 8
 3083 2191 C3       		ret
 3084              		.cfi_endproc
 3085              	.LFE18:
 3087              		.section	.rodata
 3088              	.LC24:
 3089 00d9 25730A00 		.string	"%s\n"
 3090              		.text
 3092              	arg_print_formatted:
 3093              	.LFB19:
 921:argtable2.c   **** 
 922:argtable2.c   **** 
 923:argtable2.c   **** /**
 924:argtable2.c   ****  * Print a piece of text formatted, which means in a column with a
 925:argtable2.c   ****  * left and a right margin. The lines are wrapped at whitspaces next
 926:argtable2.c   ****  * to right margin. The function does not indent the first line, but
 927:argtable2.c   ****  * only the following ones.
 928:argtable2.c   ****  *
 929:argtable2.c   ****  * Example:
 930:argtable2.c   ****  * arg_print_formatted( fp, 0, 5, "Some text that doesn't fit." )
 931:argtable2.c   ****  * will result in the following output:
 932:argtable2.c   ****  *
 933:argtable2.c   ****  * Some
 934:argtable2.c   ****  * text
 935:argtable2.c   ****  * that
 936:argtable2.c   ****  * doesn'
 937:argtable2.c   ****  * t fit.
 938:argtable2.c   ****  *
 939:argtable2.c   ****  * Too long lines will be wrapped in the middle of a word.
 940:argtable2.c   ****  *
 941:argtable2.c   ****  * arg_print_formatted( fp, 2, 7, "Some text that doesn't fit." )
 942:argtable2.c   ****  * will result in the following output:
 943:argtable2.c   ****  *
 944:argtable2.c   ****  * Some
 945:argtable2.c   ****  *   text
 946:argtable2.c   ****  *   that
 947:argtable2.c   ****  *   doesn'
 948:argtable2.c   ****  *   t fit.
 949:argtable2.c   ****  *
 950:argtable2.c   ****  * As you see, the first line is not indented. This enables output of
 951:argtable2.c   ****  * lines, which start in a line where output already happened.
 952:argtable2.c   ****  *
 953:argtable2.c   ****  * Author: Uli Fouquet
 954:argtable2.c   ****  */
 955:argtable2.c   **** static
 956:argtable2.c   **** void arg_print_formatted( FILE *fp, const unsigned lmargin, const unsigned rmargin, const char *tex
 957:argtable2.c   ****     {
 3094              		.loc 1 957 0
 3095              		.cfi_startproc
 3096 2192 55       		pushq	%rbp
 3097              		.cfi_def_cfa_offset 16
 3098              		.cfi_offset 6, -16
 3099 2193 4889E5   		movq	%rsp, %rbp
 3100              		.cfi_def_cfa_register 6
 3101 2196 4883EC40 		subq	$64, %rsp
 3102 219a 48897DD8 		movq	%rdi, -40(%rbp)
 3103 219e 8975D4   		movl	%esi, -44(%rbp)
 3104 21a1 8955D0   		movl	%edx, -48(%rbp)
 3105 21a4 48894DC8 		movq	%rcx, -56(%rbp)
 958:argtable2.c   ****     const unsigned textlen = strlen( text );
 3106              		.loc 1 958 0
 3107 21a8 488B45C8 		movq	-56(%rbp), %rax
 3108 21ac 4889C7   		movq	%rax, %rdi
 3109 21af E8000000 		call	strlen@PLT
 3109      00
 3110 21b4 8945F8   		movl	%eax, -8(%rbp)
 959:argtable2.c   ****     unsigned line_start = 0;
 3111              		.loc 1 959 0
 3112 21b7 C745EC00 		movl	$0, -20(%rbp)
 3112      000000
 960:argtable2.c   ****     unsigned line_end = textlen + 1;
 3113              		.loc 1 960 0
 3114 21be 8B45F8   		movl	-8(%rbp), %eax
 3115 21c1 83C001   		addl	$1, %eax
 3116 21c4 8945F0   		movl	%eax, -16(%rbp)
 961:argtable2.c   ****     const unsigned colwidth = (rmargin - lmargin) + 1;
 3117              		.loc 1 961 0
 3118 21c7 8B45D4   		movl	-44(%rbp), %eax
 3119 21ca 8B55D0   		movl	-48(%rbp), %edx
 3120 21cd 29C2     		subl	%eax, %edx
 3121 21cf 89D0     		movl	%edx, %eax
 3122 21d1 83C001   		addl	$1, %eax
 3123 21d4 8945FC   		movl	%eax, -4(%rbp)
 962:argtable2.c   **** 
 963:argtable2.c   ****     /* Someone doesn't like us... */
 964:argtable2.c   ****     if ( line_end < line_start )
 3124              		.loc 1 964 0
 3125 21d7 8B45F0   		movl	-16(%rbp), %eax
 3126 21da 3B45EC   		cmpl	-20(%rbp), %eax
 3127 21dd 7321     		jnb	.L185
 965:argtable2.c   ****         { fprintf( fp, "%s\n", text ); }
 3128              		.loc 1 965 0
 3129 21df 488B55C8 		movq	-56(%rbp), %rdx
 3130 21e3 488B45D8 		movq	-40(%rbp), %rax
 3131 21e7 488D3500 		leaq	.LC24(%rip), %rsi
 3131      000000
 3132 21ee 4889C7   		movq	%rax, %rdi
 3133 21f1 B8000000 		movl	$0, %eax
 3133      00
 3134 21f6 E8000000 		call	fprintf@PLT
 3134      00
 966:argtable2.c   **** 
 967:argtable2.c   ****     while (line_end-1 > line_start ) 
 3135              		.loc 1 967 0
 3136 21fb E91C0100 		jmp	.L186
 3136      00
 3137              	.L185:
 3138 2200 E9170100 		jmp	.L186
 3138      00
 3139              	.L198:
 968:argtable2.c   ****         {
 969:argtable2.c   ****         /* Eat leading whitespaces. This is essential because while
 970:argtable2.c   ****            wrapping lines, there will often be a whitespace at beginning
 971:argtable2.c   ****            of line  */
 972:argtable2.c   ****         while ( isspace(*(text+line_start)) ) 
 3140              		.loc 1 972 0
 3141 2205 EB04     		jmp	.L187
 3142              	.L188:
 973:argtable2.c   ****             { line_start++; }
 3143              		.loc 1 973 0
 3144 2207 8345EC01 		addl	$1, -20(%rbp)
 3145              	.L187:
 972:argtable2.c   ****             { line_start++; }
 3146              		.loc 1 972 0 discriminator 1
 3147 220b E8000000 		call	__ctype_b_loc@PLT
 3147      00
 3148 2210 488B00   		movq	(%rax), %rax
 3149 2213 8B4DEC   		movl	-20(%rbp), %ecx
 3150 2216 488B55C8 		movq	-56(%rbp), %rdx
 3151 221a 4801CA   		addq	%rcx, %rdx
 3152 221d 0FB612   		movzbl	(%rdx), %edx
 3153 2220 480FBED2 		movsbq	%dl, %rdx
 3154 2224 4801D2   		addq	%rdx, %rdx
 3155 2227 4801D0   		addq	%rdx, %rax
 3156 222a 0FB700   		movzwl	(%rax), %eax
 3157 222d 0FB7C0   		movzwl	%ax, %eax
 3158 2230 25002000 		andl	$8192, %eax
 3158      00
 3159 2235 85C0     		testl	%eax, %eax
 3160 2237 75CE     		jne	.L188
 974:argtable2.c   **** 
 975:argtable2.c   ****         if ((line_end - line_start) > colwidth ) 
 3161              		.loc 1 975 0
 3162 2239 8B45EC   		movl	-20(%rbp), %eax
 3163 223c 8B55F0   		movl	-16(%rbp), %edx
 3164 223f 29C2     		subl	%eax, %edx
 3165 2241 89D0     		movl	%edx, %eax
 3166 2243 3B45FC   		cmpl	-4(%rbp), %eax
 3167 2246 760D     		jbe	.L189
 976:argtable2.c   ****             { line_end = line_start + colwidth; }
 3168              		.loc 1 976 0
 3169 2248 8B45FC   		movl	-4(%rbp), %eax
 3170 224b 8B55EC   		movl	-20(%rbp), %edx
 3171 224e 01D0     		addl	%edx, %eax
 3172 2250 8945F0   		movl	%eax, -16(%rbp)
 977:argtable2.c   **** 
 978:argtable2.c   ****         /* Find last whitespace, that fits into line */
 979:argtable2.c   ****         while ( ( line_end > line_start ) 
 3173              		.loc 1 979 0
 3174 2253 EB06     		jmp	.L190
 3175              	.L189:
 3176 2255 EB04     		jmp	.L190
 3177              	.L192:
 980:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 981:argtable2.c   ****                 && !isspace(*(text+line_end))) 
 982:argtable2.c   ****             { line_end--; }
 3178              		.loc 1 982 0
 3179 2257 836DF001 		subl	$1, -16(%rbp)
 3180              	.L190:
 979:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 3181              		.loc 1 979 0 discriminator 1
 3182 225b 8B45F0   		movl	-16(%rbp), %eax
 3183 225e 3B45EC   		cmpl	-20(%rbp), %eax
 3184 2261 763D     		jbe	.L191
 980:argtable2.c   ****                 && ( line_end - line_start > colwidth )
 3185              		.loc 1 980 0
 3186 2263 8B45EC   		movl	-20(%rbp), %eax
 3187 2266 8B55F0   		movl	-16(%rbp), %edx
 3188 2269 29C2     		subl	%eax, %edx
 3189 226b 89D0     		movl	%edx, %eax
 3190 226d 3B45FC   		cmpl	-4(%rbp), %eax
 3191 2270 762E     		jbe	.L191
 981:argtable2.c   ****             { line_end--; }
 3192              		.loc 1 981 0
 3193 2272 E8000000 		call	__ctype_b_loc@PLT
 3193      00
 3194 2277 488B00   		movq	(%rax), %rax
 3195 227a 8B4DF0   		movl	-16(%rbp), %ecx
 3196 227d 488B55C8 		movq	-56(%rbp), %rdx
 3197 2281 4801CA   		addq	%rcx, %rdx
 3198 2284 0FB612   		movzbl	(%rdx), %edx
 3199 2287 480FBED2 		movsbq	%dl, %rdx
 3200 228b 4801D2   		addq	%rdx, %rdx
 3201 228e 4801D0   		addq	%rdx, %rax
 3202 2291 0FB700   		movzwl	(%rax), %eax
 3203 2294 0FB7C0   		movzwl	%ax, %eax
 3204 2297 25002000 		andl	$8192, %eax
 3204      00
 3205 229c 85C0     		testl	%eax, %eax
 3206 229e 74B7     		je	.L192
 3207              	.L191:
 983:argtable2.c   **** 
 984:argtable2.c   ****         /* Do not print trailing whitespace. If this text
 985:argtable2.c   ****            has got only one line, line_end now points to the
 986:argtable2.c   ****            last char due to initialization. */
 987:argtable2.c   ****         line_end--;
 3208              		.loc 1 987 0
 3209 22a0 836DF001 		subl	$1, -16(%rbp)
 988:argtable2.c   **** 
 989:argtable2.c   ****         /* Output line of text */
 990:argtable2.c   ****         while ( line_start < line_end ) 
 3210              		.loc 1 990 0
 3211 22a4 EB22     		jmp	.L193
 3212              	.L194:
 991:argtable2.c   ****             {
 992:argtable2.c   ****             fputc(*(text+line_start), fp );
 3213              		.loc 1 992 0
 3214 22a6 8B55EC   		movl	-20(%rbp), %edx
 3215 22a9 488B45C8 		movq	-56(%rbp), %rax
 3216 22ad 4801D0   		addq	%rdx, %rax
 3217 22b0 0FB600   		movzbl	(%rax), %eax
 3218 22b3 0FBEC0   		movsbl	%al, %eax
 3219 22b6 488B55D8 		movq	-40(%rbp), %rdx
 3220 22ba 4889D6   		movq	%rdx, %rsi
 3221 22bd 89C7     		movl	%eax, %edi
 3222 22bf E8000000 		call	fputc@PLT
 3222      00
 993:argtable2.c   ****             line_start++;
 3223              		.loc 1 993 0
 3224 22c4 8345EC01 		addl	$1, -20(%rbp)
 3225              	.L193:
 990:argtable2.c   ****             {
 3226              		.loc 1 990 0 discriminator 1
 3227 22c8 8B45EC   		movl	-20(%rbp), %eax
 3228 22cb 3B45F0   		cmpl	-16(%rbp), %eax
 3229 22ce 72D6     		jb	.L194
 994:argtable2.c   ****             }
 995:argtable2.c   ****         fputc( '\n', fp );
 3230              		.loc 1 995 0
 3231 22d0 488B45D8 		movq	-40(%rbp), %rax
 3232 22d4 4889C6   		movq	%rax, %rsi
 3233 22d7 BF0A0000 		movl	$10, %edi
 3233      00
 3234 22dc E8000000 		call	fputc@PLT
 3234      00
 996:argtable2.c   **** 
 997:argtable2.c   ****         /* Initialize another line */
 998:argtable2.c   ****         if ( line_end+1 < textlen ) 
 3235              		.loc 1 998 0
 3236 22e1 8B45F0   		movl	-16(%rbp), %eax
 3237 22e4 83C001   		addl	$1, %eax
 3238 22e7 3B45F8   		cmpl	-8(%rbp), %eax
 3239 22ea 732C     		jnb	.L195
 3240              	.LBB25:
 999:argtable2.c   ****             {
1000:argtable2.c   ****             unsigned i;
1001:argtable2.c   **** 
1002:argtable2.c   ****             for (i=0; i < lmargin; i++ )
 3241              		.loc 1 1002 0
 3242 22ec C745F400 		movl	$0, -12(%rbp)
 3242      000000
 3243 22f3 EB15     		jmp	.L196
 3244              	.L197:
1003:argtable2.c   ****                 { fputc( ' ', fp ); }
 3245              		.loc 1 1003 0 discriminator 2
 3246 22f5 488B45D8 		movq	-40(%rbp), %rax
 3247 22f9 4889C6   		movq	%rax, %rsi
 3248 22fc BF200000 		movl	$32, %edi
 3248      00
 3249 2301 E8000000 		call	fputc@PLT
 3249      00
1002:argtable2.c   ****                 { fputc( ' ', fp ); }
 3250              		.loc 1 1002 0 discriminator 2
 3251 2306 8345F401 		addl	$1, -12(%rbp)
 3252              	.L196:
1002:argtable2.c   ****                 { fputc( ' ', fp ); }
 3253              		.loc 1 1002 0 is_stmt 0 discriminator 1
 3254 230a 8B45F4   		movl	-12(%rbp), %eax
 3255 230d 3B45D4   		cmpl	-44(%rbp), %eax
 3256 2310 72E3     		jb	.L197
1004:argtable2.c   **** 
1005:argtable2.c   ****             line_end = textlen;
 3257              		.loc 1 1005 0 is_stmt 1
 3258 2312 8B45F8   		movl	-8(%rbp), %eax
 3259 2315 8945F0   		movl	%eax, -16(%rbp)
 3260              	.L195:
 3261              	.LBE25:
1006:argtable2.c   ****             }
1007:argtable2.c   **** 
1008:argtable2.c   ****         /* If we have to print another line, get also the last char. */
1009:argtable2.c   ****         line_end++;
 3262              		.loc 1 1009 0
 3263 2318 8345F001 		addl	$1, -16(%rbp)
 3264              	.L186:
 967:argtable2.c   ****         {
 3265              		.loc 1 967 0 discriminator 1
 3266 231c 8B45F0   		movl	-16(%rbp), %eax
 3267 231f 83E801   		subl	$1, %eax
 3268 2322 3B45EC   		cmpl	-20(%rbp), %eax
 3269 2325 0F87DAFE 		ja	.L198
 3269      FFFF
1010:argtable2.c   **** 
1011:argtable2.c   ****         } /* lines of text */
1012:argtable2.c   ****     }
 3270              		.loc 1 1012 0
 3271 232b C9       		leave
 3272              		.cfi_def_cfa 7, 8
 3273 232c C3       		ret
 3274              		.cfi_endproc
 3275              	.LFE19:
 3277              		.section	.rodata
 3278              	.LC25:
 3279 00dd 2020252D 		.string	"  %-25s %s\n"
 3279      32357320 
 3279      25730A00 
 3280              	.LC26:
 3281 00e9 2020252D 		.string	"  %-25s "
 3281      32357320 
 3281      00
 3282              		.text
 3283              		.globl	arg_print_glossary_gnu
 3285              	arg_print_glossary_gnu:
 3286              	.LFB20:
1013:argtable2.c   **** 
1014:argtable2.c   **** /**
1015:argtable2.c   ****  * Prints the glossary in strict GNU format. 
1016:argtable2.c   ****  * Differences to arg_print_glossary() are:
1017:argtable2.c   ****  *  - wraps lines after 80 chars
1018:argtable2.c   ****  *  - indents lines without shortops
1019:argtable2.c   ****  *  - does not accept formatstrings
1020:argtable2.c   ****  *
1021:argtable2.c   ****  * Contributed by Uli Fouquet
1022:argtable2.c   ****  */
1023:argtable2.c   **** void arg_print_glossary_gnu(FILE *fp, void **argtable )
1024:argtable2.c   ****     {
 3287              		.loc 1 1024 0
 3288              		.cfi_startproc
 3289 232d 55       		pushq	%rbp
 3290              		.cfi_def_cfa_offset 16
 3291              		.cfi_offset 6, -16
 3292 232e 4889E5   		movq	%rsp, %rbp
 3293              		.cfi_def_cfa_register 6
 3294 2331 4881EC20 		subq	$288, %rsp
 3294      010000
 3295 2338 4889BDF8 		movq	%rdi, -264(%rbp)
 3295      FEFFFF
 3296 233f 4889B5F0 		movq	%rsi, -272(%rbp)
 3296      FEFFFF
 3297              		.loc 1 1024 0
 3298 2346 64488B04 		movq	%fs:40, %rax
 3298      25280000 
 3298      00
 3299 234f 488945F8 		movq	%rax, -8(%rbp)
 3300 2353 31C0     		xorl	%eax, %eax
1025:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr**)argtable;
 3301              		.loc 1 1025 0
 3302 2355 488B85F0 		movq	-272(%rbp), %rax
 3302      FEFFFF
 3303 235c 48898508 		movq	%rax, -248(%rbp)
 3303      FFFFFF
1026:argtable2.c   ****     int tabindex;
1027:argtable2.c   **** 
1028:argtable2.c   ****     for(tabindex=0; !(table[tabindex]->flag&ARG_TERMINATOR); tabindex++)
 3304              		.loc 1 1028 0
 3305 2363 C78504FF 		movl	$0, -252(%rbp)
 3305      FFFF0000 
 3305      0000
 3306 236d E9170200 		jmp	.L200
 3306      00
 3307              	.L204:
1029:argtable2.c   ****         {
1030:argtable2.c   ****         if (table[tabindex]->glossary)
 3308              		.loc 1 1030 0
 3309 2372 8B8504FF 		movl	-252(%rbp), %eax
 3309      FFFF
 3310 2378 4898     		cltq
 3311 237a 488D14C5 		leaq	0(,%rax,8), %rdx
 3311      00000000 
 3312 2382 488B8508 		movq	-248(%rbp), %rax
 3312      FFFFFF
 3313 2389 4801D0   		addq	%rdx, %rax
 3314 238c 488B00   		movq	(%rax), %rax
 3315 238f 488B4020 		movq	32(%rax), %rax
 3316 2393 4885C0   		testq	%rax, %rax
 3317 2396 0F84E601 		je	.L201
 3317      0000
 3318              	.LBB26:
1031:argtable2.c   ****             {
1032:argtable2.c   ****             char syntax[200]="";
 3319              		.loc 1 1032 0
 3320 239c 48C78530 		movq	$0, -208(%rbp)
 3320      FFFFFF00 
 3320      000000
 3321 23a7 488DB538 		leaq	-200(%rbp), %rsi
 3321      FFFFFF
 3322 23ae B8000000 		movl	$0, %eax
 3322      00
 3323 23b3 BA180000 		movl	$24, %edx
 3323      00
 3324 23b8 4889F7   		movq	%rsi, %rdi
 3325 23bb 4889D1   		movq	%rdx, %rcx
 3326 23be F348AB   		rep stosq
1033:argtable2.c   ****             const char *shortopts = table[tabindex]->shortopts;
 3327              		.loc 1 1033 0
 3328 23c1 8B8504FF 		movl	-252(%rbp), %eax
 3328      FFFF
 3329 23c7 4898     		cltq
 3330 23c9 488D14C5 		leaq	0(,%rax,8), %rdx
 3330      00000000 
 3331 23d1 488B8508 		movq	-248(%rbp), %rax
 3331      FFFFFF
 3332 23d8 4801D0   		addq	%rdx, %rax
 3333 23db 488B00   		movq	(%rax), %rax
 3334 23de 488B4008 		movq	8(%rax), %rax
 3335 23e2 48898510 		movq	%rax, -240(%rbp)
 3335      FFFFFF
1034:argtable2.c   ****             const char *longopts  = table[tabindex]->longopts;
 3336              		.loc 1 1034 0
 3337 23e9 8B8504FF 		movl	-252(%rbp), %eax
 3337      FFFF
 3338 23ef 4898     		cltq
 3339 23f1 488D14C5 		leaq	0(,%rax,8), %rdx
 3339      00000000 
 3340 23f9 488B8508 		movq	-248(%rbp), %rax
 3340      FFFFFF
 3341 2400 4801D0   		addq	%rdx, %rax
 3342 2403 488B00   		movq	(%rax), %rax
 3343 2406 488B4010 		movq	16(%rax), %rax
 3344 240a 48898518 		movq	%rax, -232(%rbp)
 3344      FFFFFF
1035:argtable2.c   ****             const char *datatype  = table[tabindex]->datatype;
 3345              		.loc 1 1035 0
 3346 2411 8B8504FF 		movl	-252(%rbp), %eax
 3346      FFFF
 3347 2417 4898     		cltq
 3348 2419 488D14C5 		leaq	0(,%rax,8), %rdx
 3348      00000000 
 3349 2421 488B8508 		movq	-248(%rbp), %rax
 3349      FFFFFF
 3350 2428 4801D0   		addq	%rdx, %rax
 3351 242b 488B00   		movq	(%rax), %rax
 3352 242e 488B4018 		movq	24(%rax), %rax
 3353 2432 48898520 		movq	%rax, -224(%rbp)
 3353      FFFFFF
1036:argtable2.c   ****             const char *glossary  = table[tabindex]->glossary;
 3354              		.loc 1 1036 0
 3355 2439 8B8504FF 		movl	-252(%rbp), %eax
 3355      FFFF
 3356 243f 4898     		cltq
 3357 2441 488D14C5 		leaq	0(,%rax,8), %rdx
 3357      00000000 
 3358 2449 488B8508 		movq	-248(%rbp), %rax
 3358      FFFFFF
 3359 2450 4801D0   		addq	%rdx, %rax
 3360 2453 488B00   		movq	(%rax), %rax
 3361 2456 488B4020 		movq	32(%rax), %rax
 3362 245a 48898528 		movq	%rax, -216(%rbp)
 3362      FFFFFF
1037:argtable2.c   **** 
1038:argtable2.c   ****             if ( !shortopts && longopts ) 
 3363              		.loc 1 1038 0
 3364 2461 4883BD10 		cmpq	$0, -240(%rbp)
 3364      FFFFFF00 
 3365 2469 752A     		jne	.L202
 3366              		.loc 1 1038 0 is_stmt 0 discriminator 1
 3367 246b 4883BD18 		cmpq	$0, -232(%rbp)
 3367      FFFFFF00 
 3368 2473 7420     		je	.L202
1039:argtable2.c   ****                 {
1040:argtable2.c   ****                 /* Indent trailing line by 4 spaces... */
1041:argtable2.c   ****                 memset( syntax, ' ', 4 );
 3369              		.loc 1 1041 0 is_stmt 1
 3370 2475 488D8530 		leaq	-208(%rbp), %rax
 3370      FFFFFF
 3371 247c BA040000 		movl	$4, %edx
 3371      00
 3372 2481 BE200000 		movl	$32, %esi
 3372      00
 3373 2486 4889C7   		movq	%rax, %rdi
 3374 2489 E8000000 		call	memset@PLT
 3374      00
1042:argtable2.c   ****                 *(syntax+4) = '\0';
 3375              		.loc 1 1042 0
 3376 248e C68534FF 		movb	$0, -204(%rbp)
 3376      FFFF00
 3377              	.L202:
1043:argtable2.c   ****                 }
1044:argtable2.c   **** 
1045:argtable2.c   ****             arg_cat_optionv(syntax,sizeof(syntax),shortopts,longopts,datatype,table[tabindex]->flag
 3378              		.loc 1 1045 0
 3379 2495 8B8504FF 		movl	-252(%rbp), %eax
 3379      FFFF
 3380 249b 4898     		cltq
 3381 249d 488D14C5 		leaq	0(,%rax,8), %rdx
 3381      00000000 
 3382 24a5 488B8508 		movq	-248(%rbp), %rax
 3382      FFFFFF
 3383 24ac 4801D0   		addq	%rdx, %rax
 3384 24af 488B00   		movq	(%rax), %rax
 3385 24b2 0FB600   		movzbl	(%rax), %eax
 3386 24b5 0FBEC0   		movsbl	%al, %eax
 3387 24b8 83E004   		andl	$4, %eax
 3388 24bb 4189C0   		movl	%eax, %r8d
 3389 24be 488BBD20 		movq	-224(%rbp), %rdi
 3389      FFFFFF
 3390 24c5 488B8D18 		movq	-232(%rbp), %rcx
 3390      FFFFFF
 3391 24cc 488B9510 		movq	-240(%rbp), %rdx
 3391      FFFFFF
 3392 24d3 488D8530 		leaq	-208(%rbp), %rax
 3392      FFFFFF
 3393 24da 488D3500 		leaq	.LC23(%rip), %rsi
 3393      000000
 3394 24e1 48893424 		movq	%rsi, (%rsp)
 3395 24e5 4589C1   		movl	%r8d, %r9d
 3396 24e8 4989F8   		movq	%rdi, %r8
 3397 24eb BEC80000 		movl	$200, %esi
 3397      00
 3398 24f0 4889C7   		movq	%rax, %rdi
 3399 24f3 E876EEFF 		call	arg_cat_optionv
 3399      FF
1046:argtable2.c   **** 
1047:argtable2.c   ****             /* If syntax fits not into column, print glossary in new line... */
1048:argtable2.c   ****             if ( strlen(syntax) > 25 ) 
 3400              		.loc 1 1048 0
 3401 24f8 488D8530 		leaq	-208(%rbp), %rax
 3401      FFFFFF
 3402 24ff 4889C7   		movq	%rax, %rdi
 3403 2502 E8000000 		call	strlen@PLT
 3403      00
 3404 2507 4883F819 		cmpq	$25, %rax
 3405 250b 7630     		jbe	.L203
1049:argtable2.c   ****                 {
1050:argtable2.c   ****                 fprintf( fp, "  %-25s %s\n", syntax, "" );
 3406              		.loc 1 1050 0
 3407 250d 488D9530 		leaq	-208(%rbp), %rdx
 3407      FFFFFF
 3408 2514 488B85F8 		movq	-264(%rbp), %rax
 3408      FEFFFF
 3409 251b 488D0D00 		leaq	.LC12(%rip), %rcx
 3409      000000
 3410 2522 488D3500 		leaq	.LC25(%rip), %rsi
 3410      000000
 3411 2529 4889C7   		movq	%rax, %rdi
 3412 252c B8000000 		movl	$0, %eax
 3412      00
 3413 2531 E8000000 		call	fprintf@PLT
 3413      00
1051:argtable2.c   ****                 *syntax = '\0';
 3414              		.loc 1 1051 0
 3415 2536 C68530FF 		movb	$0, -208(%rbp)
 3415      FFFF00
 3416              	.L203:
1052:argtable2.c   ****                 }
1053:argtable2.c   **** 
1054:argtable2.c   ****             fprintf( fp, "  %-25s ", syntax );
 3417              		.loc 1 1054 0
 3418 253d 488D9530 		leaq	-208(%rbp), %rdx
 3418      FFFFFF
 3419 2544 488B85F8 		movq	-264(%rbp), %rax
 3419      FEFFFF
 3420 254b 488D3500 		leaq	.LC26(%rip), %rsi
 3420      000000
 3421 2552 4889C7   		movq	%rax, %rdi
 3422 2555 B8000000 		movl	$0, %eax
 3422      00
 3423 255a E8000000 		call	fprintf@PLT
 3423      00
1055:argtable2.c   ****             arg_print_formatted( fp, 28, 79, glossary );
 3424              		.loc 1 1055 0
 3425 255f 488B9528 		movq	-216(%rbp), %rdx
 3425      FFFFFF
 3426 2566 488B85F8 		movq	-264(%rbp), %rax
 3426      FEFFFF
 3427 256d 4889D1   		movq	%rdx, %rcx
 3428 2570 BA4F0000 		movl	$79, %edx
 3428      00
 3429 2575 BE1C0000 		movl	$28, %esi
 3429      00
 3430 257a 4889C7   		movq	%rax, %rdi
 3431 257d E810FCFF 		call	arg_print_formatted
 3431      FF
 3432              	.L201:
 3433              	.LBE26:
1028:argtable2.c   ****         {
 3434              		.loc 1 1028 0
 3435 2582 838504FF 		addl	$1, -252(%rbp)
 3435      FFFF01
 3436              	.L200:
1028:argtable2.c   ****         {
 3437              		.loc 1 1028 0 is_stmt 0 discriminator 1
 3438 2589 8B8504FF 		movl	-252(%rbp), %eax
 3438      FFFF
 3439 258f 4898     		cltq
 3440 2591 488D14C5 		leaq	0(,%rax,8), %rdx
 3440      00000000 
 3441 2599 488B8508 		movq	-248(%rbp), %rax
 3441      FFFFFF
 3442 25a0 4801D0   		addq	%rdx, %rax
 3443 25a3 488B00   		movq	(%rax), %rax
 3444 25a6 0FB600   		movzbl	(%rax), %eax
 3445 25a9 0FBEC0   		movsbl	%al, %eax
 3446 25ac 83E001   		andl	$1, %eax
 3447 25af 85C0     		testl	%eax, %eax
 3448 25b1 0F84BBFD 		je	.L204
 3448      FFFF
1056:argtable2.c   ****             }
1057:argtable2.c   ****         } /* for each table entry */
1058:argtable2.c   **** 
1059:argtable2.c   ****     fputc( '\n', fp );
 3449              		.loc 1 1059 0 is_stmt 1
 3450 25b7 488B85F8 		movq	-264(%rbp), %rax
 3450      FEFFFF
 3451 25be 4889C6   		movq	%rax, %rsi
 3452 25c1 BF0A0000 		movl	$10, %edi
 3452      00
 3453 25c6 E8000000 		call	fputc@PLT
 3453      00
1060:argtable2.c   ****     }
 3454              		.loc 1 1060 0
 3455 25cb 488B45F8 		movq	-8(%rbp), %rax
 3456 25cf 64483304 		xorq	%fs:40, %rax
 3456      25280000 
 3456      00
 3457 25d8 7405     		je	.L205
 3458 25da E8000000 		call	__stack_chk_fail@PLT
 3458      00
 3459              	.L205:
 3460 25df C9       		leave
 3461              		.cfi_def_cfa 7, 8
 3462 25e0 C3       		ret
 3463              		.cfi_endproc
 3464              	.LFE20:
 3466              		.globl	arg_nullcheck
 3468              	arg_nullcheck:
 3469              	.LFB21:
1061:argtable2.c   **** 
1062:argtable2.c   **** 
1063:argtable2.c   **** /**
1064:argtable2.c   ****  * Checks the argtable[] array for NULL entries and returns 1
1065:argtable2.c   ****  * if any are found, zero otherwise.
1066:argtable2.c   ****  */
1067:argtable2.c   **** int arg_nullcheck(void **argtable)
1068:argtable2.c   ****     {
 3470              		.loc 1 1068 0
 3471              		.cfi_startproc
 3472 25e1 55       		pushq	%rbp
 3473              		.cfi_def_cfa_offset 16
 3474              		.cfi_offset 6, -16
 3475 25e2 4889E5   		movq	%rsp, %rbp
 3476              		.cfi_def_cfa_register 6
 3477 25e5 48897DE8 		movq	%rdi, -24(%rbp)
1069:argtable2.c   ****     struct arg_hdr **table = (struct arg_hdr **)argtable;
 3478              		.loc 1 1069 0
 3479 25e9 488B45E8 		movq	-24(%rbp), %rax
 3480 25ed 488945F8 		movq	%rax, -8(%rbp)
1070:argtable2.c   ****     int tabindex;
1071:argtable2.c   ****     /*printf("arg_nullcheck(%p)\n",argtable);*/
1072:argtable2.c   **** 
1073:argtable2.c   ****     if (!table)
 3481              		.loc 1 1073 0
 3482 25f1 48837DF8 		cmpq	$0, -8(%rbp)
 3482      00
 3483 25f6 7507     		jne	.L207
1074:argtable2.c   ****         return 1;
 3484              		.loc 1 1074 0
 3485 25f8 B8010000 		movl	$1, %eax
 3485      00
 3486 25fd EB59     		jmp	.L208
 3487              	.L207:
1075:argtable2.c   **** 
1076:argtable2.c   ****     tabindex=0;
 3488              		.loc 1 1076 0
 3489 25ff C745F400 		movl	$0, -12(%rbp)
 3489      000000
 3490              	.L210:
1077:argtable2.c   ****     do
1078:argtable2.c   ****         {
1079:argtable2.c   ****         /*printf("argtable[%d]=%p\n",tabindex,argtable[tabindex]);*/
1080:argtable2.c   ****         if (!table[tabindex])
 3491              		.loc 1 1080 0
 3492 2606 8B45F4   		movl	-12(%rbp), %eax
 3493 2609 4898     		cltq
 3494 260b 488D14C5 		leaq	0(,%rax,8), %rdx
 3494      00000000 
 3495 2613 488B45F8 		movq	-8(%rbp), %rax
 3496 2617 4801D0   		addq	%rdx, %rax
 3497 261a 488B00   		movq	(%rax), %rax
 3498 261d 4885C0   		testq	%rax, %rax
 3499 2620 7507     		jne	.L209
1081:argtable2.c   ****             return 1;
 3500              		.loc 1 1081 0
 3501 2622 B8010000 		movl	$1, %eax
 3501      00
 3502 2627 EB2F     		jmp	.L208
 3503              	.L209:
1082:argtable2.c   ****         } while(!(table[tabindex++]->flag&ARG_TERMINATOR));
 3504              		.loc 1 1082 0
 3505 2629 8B45F4   		movl	-12(%rbp), %eax
 3506 262c 8D5001   		leal	1(%rax), %edx
 3507 262f 8955F4   		movl	%edx, -12(%rbp)
 3508 2632 4898     		cltq
 3509 2634 488D14C5 		leaq	0(,%rax,8), %rdx
 3509      00000000 
 3510 263c 488B45F8 		movq	-8(%rbp), %rax
 3511 2640 4801D0   		addq	%rdx, %rax
 3512 2643 488B00   		movq	(%rax), %rax
 3513 2646 0FB600   		movzbl	(%rax), %eax
 3514 2649 0FBEC0   		movsbl	%al, %eax
 3515 264c 83E001   		andl	$1, %eax
 3516 264f 85C0     		testl	%eax, %eax
 3517 2651 74B3     		je	.L210
1083:argtable2.c   **** 
1084:argtable2.c   ****     return 0;
 3518              		.loc 1 1084 0
 3519 2653 B8000000 		movl	$0, %eax
 3519      00
 3520              	.L208:
1085:argtable2.c   ****     }
 3521              		.loc 1 1085 0
 3522 2658 5D       		popq	%rbp
 3523              		.cfi_def_cfa 7, 8
 3524 2659 C3       		ret
 3525              		.cfi_endproc
 3526              	.LFE21:
 3528              		.globl	arg_free
 3530              	arg_free:
 3531              	.LFB22:
1086:argtable2.c   **** 
1087:argtable2.c   **** 
1088:argtable2.c   **** /*
1089:argtable2.c   ****  * arg_free() is deprecated in favour of arg_freetable() due to a flaw in its design.
1090:argtable2.c   ****  * The flaw results in memory leak in the (very rare) case that an intermediate
1091:argtable2.c   ****  * entry in the argtable array failed its memory allocation while others following
1092:argtable2.c   ****  * that entry were still allocated ok. Those subsequent allocations will not be
1093:argtable2.c   ****  * deallocated by arg_free().
1094:argtable2.c   ****  * Despite the unlikeliness of the problem occurring, and the even unlikelier event
1095:argtable2.c   ****  * that it has any deliterious effect, it is fixed regardless by replacing arg_free()
1096:argtable2.c   ****  * with the newer arg_freetable() function.
1097:argtable2.c   ****  * We still keep arg_free() for backwards compatibility.
1098:argtable2.c   ****  */
1099:argtable2.c   **** void arg_free(void **argtable)
1100:argtable2.c   ****     {
 3532              		.loc 1 1100 0
 3533              		.cfi_startproc
 3534 265a 55       		pushq	%rbp
 3535              		.cfi_def_cfa_offset 16
 3536              		.cfi_offset 6, -16
 3537 265b 4889E5   		movq	%rsp, %rbp
 3538              		.cfi_def_cfa_register 6
 3539 265e 4883EC20 		subq	$32, %rsp
 3540 2662 48897DE8 		movq	%rdi, -24(%rbp)
1101:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 3541              		.loc 1 1101 0
 3542 2666 488B45E8 		movq	-24(%rbp), %rax
 3543 266a 488945F8 		movq	%rax, -8(%rbp)
1102:argtable2.c   ****     int tabindex=0;
 3544              		.loc 1 1102 0
 3545 266e C745F000 		movl	$0, -16(%rbp)
 3545      000000
 3546              	.L214:
1103:argtable2.c   ****     int flag;
1104:argtable2.c   ****     /*printf("arg_free(%p)\n",argtable);*/
1105:argtable2.c   ****     do
1106:argtable2.c   ****         {
1107:argtable2.c   ****         /*
1108:argtable2.c   ****         if we encounter a NULL entry then somewhat incorrectly we presume
1109:argtable2.c   ****         we have come to the end of the array. It isnt strictly true because
1110:argtable2.c   ****         an intermediate entry could be NULL with other non-NULL entries to follow.
1111:argtable2.c   ****         The subsequent argtable entries would then not be freed as they should.
1112:argtable2.c   ****         */
1113:argtable2.c   ****         if (table[tabindex]==NULL)
 3547              		.loc 1 1113 0
 3548 2675 8B45F0   		movl	-16(%rbp), %eax
 3549 2678 4898     		cltq
 3550 267a 488D14C5 		leaq	0(,%rax,8), %rdx
 3550      00000000 
 3551 2682 488B45F8 		movq	-8(%rbp), %rax
 3552 2686 4801D0   		addq	%rdx, %rax
 3553 2689 488B00   		movq	(%rax), %rax
 3554 268c 4885C0   		testq	%rax, %rax
 3555 268f 7502     		jne	.L212
1114:argtable2.c   ****             break;
 3556              		.loc 1 1114 0
 3557 2691 EB6E     		jmp	.L211
 3558              	.L212:
1115:argtable2.c   ****                     
1116:argtable2.c   ****         flag = table[tabindex]->flag;
 3559              		.loc 1 1116 0
 3560 2693 8B45F0   		movl	-16(%rbp), %eax
 3561 2696 4898     		cltq
 3562 2698 488D14C5 		leaq	0(,%rax,8), %rdx
 3562      00000000 
 3563 26a0 488B45F8 		movq	-8(%rbp), %rax
 3564 26a4 4801D0   		addq	%rdx, %rax
 3565 26a7 488B00   		movq	(%rax), %rax
 3566 26aa 0FB600   		movzbl	(%rax), %eax
 3567 26ad 0FBEC0   		movsbl	%al, %eax
 3568 26b0 8945F4   		movl	%eax, -12(%rbp)
1117:argtable2.c   ****         free(table[tabindex]);
 3569              		.loc 1 1117 0
 3570 26b3 8B45F0   		movl	-16(%rbp), %eax
 3571 26b6 4898     		cltq
 3572 26b8 488D14C5 		leaq	0(,%rax,8), %rdx
 3572      00000000 
 3573 26c0 488B45F8 		movq	-8(%rbp), %rax
 3574 26c4 4801D0   		addq	%rdx, %rax
 3575 26c7 488B00   		movq	(%rax), %rax
 3576 26ca 4889C7   		movq	%rax, %rdi
 3577 26cd E8000000 		call	free@PLT
 3577      00
1118:argtable2.c   ****         table[tabindex++]=NULL;
 3578              		.loc 1 1118 0
 3579 26d2 8B45F0   		movl	-16(%rbp), %eax
 3580 26d5 8D5001   		leal	1(%rax), %edx
 3581 26d8 8955F0   		movl	%edx, -16(%rbp)
 3582 26db 4898     		cltq
 3583 26dd 488D14C5 		leaq	0(,%rax,8), %rdx
 3583      00000000 
 3584 26e5 488B45F8 		movq	-8(%rbp), %rax
 3585 26e9 4801D0   		addq	%rdx, %rax
 3586 26ec 48C70000 		movq	$0, (%rax)
 3586      000000
1119:argtable2.c   ****         
1120:argtable2.c   ****         } while(!(flag&ARG_TERMINATOR));
 3587              		.loc 1 1120 0
 3588 26f3 8B45F4   		movl	-12(%rbp), %eax
 3589 26f6 83E001   		andl	$1, %eax
 3590 26f9 85C0     		testl	%eax, %eax
 3591 26fb 0F8474FF 		je	.L214
 3591      FFFF
 3592              	.L211:
1121:argtable2.c   ****     }
 3593              		.loc 1 1121 0
 3594 2701 C9       		leave
 3595              		.cfi_def_cfa 7, 8
 3596 2702 C3       		ret
 3597              		.cfi_endproc
 3598              	.LFE22:
 3600              		.globl	arg_freetable
 3602              	arg_freetable:
 3603              	.LFB23:
1122:argtable2.c   **** 
1123:argtable2.c   **** /* frees each non-NULL element of argtable[], where n is the size of the number of entries in the a
1124:argtable2.c   **** void arg_freetable(void **argtable, size_t n)
1125:argtable2.c   ****     {
 3604              		.loc 1 1125 0
 3605              		.cfi_startproc
 3606 2703 55       		pushq	%rbp
 3607              		.cfi_def_cfa_offset 16
 3608              		.cfi_offset 6, -16
 3609 2704 4889E5   		movq	%rsp, %rbp
 3610              		.cfi_def_cfa_register 6
 3611 2707 4883EC20 		subq	$32, %rsp
 3612 270b 48897DE8 		movq	%rdi, -24(%rbp)
 3613 270f 488975E0 		movq	%rsi, -32(%rbp)
1126:argtable2.c   ****     struct arg_hdr **table=(struct arg_hdr**)argtable;
 3614              		.loc 1 1126 0
 3615 2713 488B45E8 		movq	-24(%rbp), %rax
 3616 2717 488945F8 		movq	%rax, -8(%rbp)
1127:argtable2.c   ****     int tabindex=0;
 3617              		.loc 1 1127 0
 3618 271b C745F400 		movl	$0, -12(%rbp)
 3618      000000
1128:argtable2.c   ****     /*printf("arg_freetable(%p)\n",argtable);*/
1129:argtable2.c   ****     for (tabindex=0; tabindex<n; tabindex++)
 3619              		.loc 1 1129 0
 3620 2722 C745F400 		movl	$0, -12(%rbp)
 3620      000000
 3621 2729 EB5C     		jmp	.L216
 3622              	.L219:
1130:argtable2.c   ****         {
1131:argtable2.c   ****         if (table[tabindex]==NULL)
 3623              		.loc 1 1131 0
 3624 272b 8B45F4   		movl	-12(%rbp), %eax
 3625 272e 4898     		cltq
 3626 2730 488D14C5 		leaq	0(,%rax,8), %rdx
 3626      00000000 
 3627 2738 488B45F8 		movq	-8(%rbp), %rax
 3628 273c 4801D0   		addq	%rdx, %rax
 3629 273f 488B00   		movq	(%rax), %rax
 3630 2742 4885C0   		testq	%rax, %rax
 3631 2745 7502     		jne	.L217
1132:argtable2.c   ****             continue;
 3632              		.loc 1 1132 0
 3633 2747 EB3A     		jmp	.L218
 3634              	.L217:
1133:argtable2.c   ****                     
1134:argtable2.c   ****         free(table[tabindex]);
 3635              		.loc 1 1134 0
 3636 2749 8B45F4   		movl	-12(%rbp), %eax
 3637 274c 4898     		cltq
 3638 274e 488D14C5 		leaq	0(,%rax,8), %rdx
 3638      00000000 
 3639 2756 488B45F8 		movq	-8(%rbp), %rax
 3640 275a 4801D0   		addq	%rdx, %rax
 3641 275d 488B00   		movq	(%rax), %rax
 3642 2760 4889C7   		movq	%rax, %rdi
 3643 2763 E8000000 		call	free@PLT
 3643      00
1135:argtable2.c   ****         table[tabindex]=NULL;        
 3644              		.loc 1 1135 0
 3645 2768 8B45F4   		movl	-12(%rbp), %eax
 3646 276b 4898     		cltq
 3647 276d 488D14C5 		leaq	0(,%rax,8), %rdx
 3647      00000000 
 3648 2775 488B45F8 		movq	-8(%rbp), %rax
 3649 2779 4801D0   		addq	%rdx, %rax
 3650 277c 48C70000 		movq	$0, (%rax)
 3650      000000
 3651              	.L218:
1129:argtable2.c   ****         {
 3652              		.loc 1 1129 0
 3653 2783 8345F401 		addl	$1, -12(%rbp)
 3654              	.L216:
1129:argtable2.c   ****         {
 3655              		.loc 1 1129 0 is_stmt 0 discriminator 1
 3656 2787 8B45F4   		movl	-12(%rbp), %eax
 3657 278a 4898     		cltq
 3658 278c 483B45E0 		cmpq	-32(%rbp), %rax
 3659 2790 7299     		jb	.L219
1136:argtable2.c   ****         };
1137:argtable2.c   ****     }
 3660              		.loc 1 1137 0 is_stmt 1
 3661 2792 C9       		leave
 3662              		.cfi_def_cfa 7, 8
 3663 2793 C3       		ret
 3664              		.cfi_endproc
 3665              	.LFE23:
 3667              	.Letext0:
 3668              		.file 2 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 3669              		.file 3 "/usr/include/x86_64-linux-gnu/bits/types.h"
 3670              		.file 4 "./getopt.h"
 3671              		.file 5 "/usr/include/stdio.h"
 3672              		.file 6 "/usr/include/libio.h"
 3673              		.file 7 "/usr/include/ctype.h"
 3674              		.file 8 "argtable2.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 argtable2.c
     /tmp/ccSfc657.s:5      .text:0000000000000000 arg_register_error
     /tmp/ccSfc657.s:104    .text:00000000000000fd find_shortoption
     /tmp/ccSfc657.s:189    .text:0000000000000199 dump_longoptions
     /tmp/ccSfc657.s:286    .text:00000000000002b3 alloc_longoptions
     /tmp/ccSfc657.s:613    .text:0000000000000621 alloc_shortoptions
     /tmp/ccSfc657.s:788    .text:00000000000007c4 arg_endindex
     /tmp/ccSfc657.s:828    .text:0000000000000802 arg_parse_tagged
     /tmp/ccSfc657.s:1149   .text:0000000000000b98 arg_parse_untagged
     /tmp/ccSfc657.s:1352   .text:0000000000000dc5 arg_parse_check
     /tmp/ccSfc657.s:1433   .text:0000000000000e90 arg_reset
     /tmp/ccSfc657.s:1501   .text:0000000000000f37 arg_parse
     /tmp/ccSfc657.s:1638   .text:0000000000001093 arg_cat
     /tmp/ccSfc657.s:1736   .text:000000000000113c arg_cat_option
     /tmp/ccSfc657.s:1934   .text:000000000000136e arg_cat_optionv
     /tmp/ccSfc657.s:2149   .text:0000000000001580 arg_print_option
     /tmp/ccSfc657.s:2236   .text:0000000000001688 arg_print_gnuswitch
     /tmp/ccSfc657.s:2468   .text:00000000000018ea arg_print_syntax
     /tmp/ccSfc657.s:2716   .text:0000000000001c5e arg_print_syntaxv
     /tmp/ccSfc657.s:2937   .text:0000000000001f5f arg_print_glossary
     /tmp/ccSfc657.s:3092   .text:0000000000002192 arg_print_formatted
     /tmp/ccSfc657.s:3285   .text:000000000000232d arg_print_glossary_gnu
     /tmp/ccSfc657.s:3468   .text:00000000000025e1 arg_nullcheck
     /tmp/ccSfc657.s:3530   .text:000000000000265a arg_free
     /tmp/ccSfc657.s:3602   .text:0000000000002703 arg_freetable

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
strchr
printf
strlen
malloc
free
optind
opterr
optarg
optopt
getopt_long
strcspn
strncat
fputs
__stack_chk_fail
fprintf
__ctype_b_loc
fputc
memset
