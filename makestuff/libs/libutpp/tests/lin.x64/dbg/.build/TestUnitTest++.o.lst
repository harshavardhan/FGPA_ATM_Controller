   1              		.file	"TestUnitTest++.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.section	.rodata
   5              	.LC0:
   6 0000 44656661 		.string	"DefaultSuite"
   6      756C7453 
   6      75697465 
   6      00
   7              		.section	.text._ZN13UnitTestSuite12GetSuiteNameEv,"axG",@progbits,_ZN13UnitTestSuite12GetSuiteName
   8              		.weak	_ZN13UnitTestSuite12GetSuiteNameEv
  10              	_ZN13UnitTestSuite12GetSuiteNameEv:
  11              	.LFB0:
  12              		.file 1 "../TestSuite.h"
   1:../TestSuite.h **** #ifndef UNITTEST_TESTSUITE_H
   2:../TestSuite.h **** #define UNITTEST_TESTSUITE_H
   3:../TestSuite.h **** 
   4:../TestSuite.h **** namespace UnitTestSuite {
   5:../TestSuite.h **** 
   6:../TestSuite.h ****     inline char const* GetSuiteName ()
   7:../TestSuite.h ****     {
  13              		.loc 1 7 0
  14              		.cfi_startproc
  15 0000 55       		pushq	%rbp
  16              		.cfi_def_cfa_offset 16
  17              		.cfi_offset 6, -16
  18 0001 4889E5   		movq	%rsp, %rbp
  19              		.cfi_def_cfa_register 6
   8:../TestSuite.h ****         return "DefaultSuite";
  20              		.loc 1 8 0
  21 0004 B8000000 		movl	$.LC0, %eax
  21      00
   9:../TestSuite.h ****     }
  22              		.loc 1 9 0
  23 0009 5D       		popq	%rbp
  24              		.cfi_def_cfa 7, 8
  25 000a C3       		ret
  26              		.cfi_endproc
  27              	.LFE0:
  29              		.section	.text._ZN8UnitTest15MemoryOutStreamC1Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamC1Ev
  30              		.align 2
  31              		.weak	_ZN8UnitTest15MemoryOutStreamC1Ev
  33              	_ZN8UnitTest15MemoryOutStreamC1Ev:
  34              	.LFB1007:
  35              		.file 2 "../MemoryOutStream.h"
   1:../MemoryOutStream.h **** #ifndef UNITTEST_MEMORYOUTSTREAM_H
   2:../MemoryOutStream.h **** #define UNITTEST_MEMORYOUTSTREAM_H
   3:../MemoryOutStream.h **** 
   4:../MemoryOutStream.h **** #include "Config.h"
   5:../MemoryOutStream.h **** 
   6:../MemoryOutStream.h **** #ifndef UNITTEST_USE_CUSTOM_STREAMS
   7:../MemoryOutStream.h **** 
   8:../MemoryOutStream.h **** #include <sstream>
   9:../MemoryOutStream.h **** 
  10:../MemoryOutStream.h **** namespace UnitTest
  11:../MemoryOutStream.h **** {
  12:../MemoryOutStream.h **** 
  13:../MemoryOutStream.h **** class MemoryOutStream : public std::ostringstream
  14:../MemoryOutStream.h **** {
  15:../MemoryOutStream.h **** public:
  16:../MemoryOutStream.h ****     MemoryOutStream() {}
  36              		.loc 2 16 0
  37              		.cfi_startproc
  38              		.cfi_personality 0x3,__gxx_personality_v0
  39              		.cfi_lsda 0x3,.LLSDA1007
  40 0000 55       		pushq	%rbp
  41              		.cfi_def_cfa_offset 16
  42              		.cfi_offset 6, -16
  43 0001 4889E5   		movq	%rsp, %rbp
  44              		.cfi_def_cfa_register 6
  45 0004 53       		pushq	%rbx
  46 0005 4883EC18 		subq	$24, %rsp
  47              		.cfi_offset 3, -24
  48 0009 48897DE8 		movq	%rdi, -24(%rbp)
  49              	.LBB2:
  50              		.loc 2 16 0
  51 000d 488B45E8 		movq	-24(%rbp), %rax
  52 0011 4883C060 		addq	$96, %rax
  53 0015 4889C7   		movq	%rax, %rdi
  54              	.LEHB0:
  55 0018 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev
  55      00
  56              	.LEHE0:
  57 001d B9000000 		movl	$_ZTTN8UnitTest15MemoryOutStreamE+8, %ecx
  57      00
  58 0022 488B45E8 		movq	-24(%rbp), %rax
  59 0026 BA100000 		movl	$16, %edx
  59      00
  60 002b 4889CE   		movq	%rcx, %rsi
  61 002e 4889C7   		movq	%rax, %rdi
  62              	.LEHB1:
  63 0031 E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode
  63      00
  64              	.LEHE1:
  65              		.loc 2 16 0 is_stmt 0 discriminator 6
  66 0036 BA000000 		movl	$_ZTVN8UnitTest15MemoryOutStreamE+24, %edx
  66      00
  67 003b 488B45E8 		movq	-24(%rbp), %rax
  68 003f 488910   		movq	%rdx, (%rax)
  69 0042 BA600000 		movl	$96, %edx
  69      00
  70 0047 488B45E8 		movq	-24(%rbp), %rax
  71 004b 4801C2   		addq	%rax, %rdx
  72 004e B8000000 		movl	$_ZTVN8UnitTest15MemoryOutStreamE+64, %eax
  72      00
  73 0053 488902   		movq	%rax, (%rdx)
  74 0056 488B45E8 		movq	-24(%rbp), %rax
  75 005a 4883C058 		addq	$88, %rax
  76 005e 4889C7   		movq	%rax, %rdi
  77              	.LEHB2:
  78 0061 E8000000 		call	_ZNSsC1Ev
  78      00
  79              	.LEHE2:
  80              	.LBE2:
  81              		.loc 2 16 0
  82 0066 EB37     		jmp	.L8
  83              	.L6:
  84 0068 4889C3   		movq	%rax, %rbx
  85              	.LBB3:
  86 006b BA000000 		movl	$_ZTTN8UnitTest15MemoryOutStreamE+8, %edx
  86      00
  87 0070 488B45E8 		movq	-24(%rbp), %rax
  88 0074 4889D6   		movq	%rdx, %rsi
  89 0077 4889C7   		movq	%rax, %rdi
  90 007a E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED2Ev
  90      00
  91 007f EB03     		jmp	.L5
  92              	.L7:
  93 0081 4889C3   		movq	%rax, %rbx
  94              	.L5:
  95              		.loc 2 16 0 discriminator 19
  96 0084 488B45E8 		movq	-24(%rbp), %rax
  97 0088 4883C060 		addq	$96, %rax
  98 008c 4889C7   		movq	%rax, %rdi
  99 008f E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev
  99      00
 100 0094 4889D8   		movq	%rbx, %rax
 101 0097 4889C7   		movq	%rax, %rdi
 102              	.LEHB3:
 103 009a E8000000 		call	_Unwind_Resume
 103      00
 104              	.LEHE3:
 105              	.L8:
 106              	.LBE3:
 107              		.loc 2 16 0
 108 009f 4883C418 		addq	$24, %rsp
 109 00a3 5B       		popq	%rbx
 110 00a4 5D       		popq	%rbp
 111              		.cfi_def_cfa 7, 8
 112 00a5 C3       		ret
 113              		.cfi_endproc
 114              	.LFE1007:
 115              		.globl	__gxx_personality_v0
 116              		.section	.gcc_except_table._ZN8UnitTest15MemoryOutStreamC1Ev,"aG",@progbits,_ZN8UnitTest15MemoryOu
 117              	.LLSDA1007:
 118 0000 FF       		.byte	0xff
 119 0001 FF       		.byte	0xff
 120 0002 01       		.byte	0x1
 121 0003 12       		.uleb128 .LLSDACSE1007-.LLSDACSB1007
 122              	.LLSDACSB1007:
 123 0004 18       		.uleb128 .LEHB0-.LFB1007
 124 0005 05       		.uleb128 .LEHE0-.LEHB0
 125 0006 00       		.uleb128 0
 126 0007 00       		.uleb128 0
 127 0008 31       		.uleb128 .LEHB1-.LFB1007
 128 0009 05       		.uleb128 .LEHE1-.LEHB1
 129 000a 8101     		.uleb128 .L7-.LFB1007
 130 000c 00       		.uleb128 0
 131 000d 61       		.uleb128 .LEHB2-.LFB1007
 132 000e 05       		.uleb128 .LEHE2-.LEHB2
 133 000f 68       		.uleb128 .L6-.LFB1007
 134 0010 00       		.uleb128 0
 135 0011 9A01     		.uleb128 .LEHB3-.LFB1007
 136 0013 05       		.uleb128 .LEHE3-.LEHB3
 137 0014 00       		.uleb128 0
 138 0015 00       		.uleb128 0
 139              	.LLSDACSE1007:
 140              		.section	.text._ZN8UnitTest15MemoryOutStreamC1Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamC1Ev
 142              		.section	.text._ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE,"axG",@progb
 143              		.align 2
 144              		.weak	_ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
 146              	_ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE:
 147              	.LFB1023:
 148              		.file 3 "ScopedCurrentTest.h"
   1:ScopedCurrentTest.h **** #ifndef UNITTEST_SCOPEDCURRENTTEST_H
   2:ScopedCurrentTest.h **** #define UNITTEST_SCOPEDCURRENTTEST_H
   3:ScopedCurrentTest.h **** 
   4:ScopedCurrentTest.h **** #include "../CurrentTest.h"
   5:ScopedCurrentTest.h **** #include <cstddef>
   6:ScopedCurrentTest.h **** 
   7:ScopedCurrentTest.h **** class ScopedCurrentTest
   8:ScopedCurrentTest.h **** {
   9:ScopedCurrentTest.h **** public:
  10:ScopedCurrentTest.h **** 	ScopedCurrentTest()
  11:ScopedCurrentTest.h **** 		: m_oldTestResults(UnitTest::CurrentTest::Results())
  12:ScopedCurrentTest.h **** 		, m_oldTestDetails(UnitTest::CurrentTest::Details())
  13:ScopedCurrentTest.h **** 	{
  14:ScopedCurrentTest.h **** 	}
  15:ScopedCurrentTest.h **** 
  16:ScopedCurrentTest.h **** 	explicit ScopedCurrentTest(UnitTest::TestResults& newResults, const UnitTest::TestDetails* newDeta
 149              		.loc 3 16 0 is_stmt 1
 150              		.cfi_startproc
 151 0000 55       		pushq	%rbp
 152              		.cfi_def_cfa_offset 16
 153              		.cfi_offset 6, -16
 154 0001 4889E5   		movq	%rsp, %rbp
 155              		.cfi_def_cfa_register 6
 156 0004 4883EC20 		subq	$32, %rsp
 157 0008 48897DF8 		movq	%rdi, -8(%rbp)
 158 000c 488975F0 		movq	%rsi, -16(%rbp)
 159 0010 488955E8 		movq	%rdx, -24(%rbp)
 160              	.LBB4:
  17:ScopedCurrentTest.h **** 		: m_oldTestResults(UnitTest::CurrentTest::Results())
 161              		.loc 3 17 0
 162 0014 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 162      00
  18:ScopedCurrentTest.h **** 		, m_oldTestDetails(UnitTest::CurrentTest::Details())
 163              		.loc 3 18 0
 164 0019 488B10   		movq	(%rax), %rdx
 165 001c 488B45F8 		movq	-8(%rbp), %rax
 166 0020 488910   		movq	%rdx, (%rax)
 167 0023 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 167      00
 168 0028 488B10   		movq	(%rax), %rdx
 169 002b 488B45F8 		movq	-8(%rbp), %rax
 170 002f 48895008 		movq	%rdx, 8(%rax)
  19:ScopedCurrentTest.h **** 	{
  20:ScopedCurrentTest.h **** 		UnitTest::CurrentTest::Results() = &newResults;
 171              		.loc 3 20 0
 172 0033 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 172      00
 173 0038 488B55F0 		movq	-16(%rbp), %rdx
 174 003c 488910   		movq	%rdx, (%rax)
  21:ScopedCurrentTest.h **** 
  22:ScopedCurrentTest.h **** 		if (newDetails != NULL)
 175              		.loc 3 22 0
 176 003f 48837DE8 		cmpq	$0, -24(%rbp)
 176      00
 177 0044 740C     		je	.L9
  23:ScopedCurrentTest.h **** 			UnitTest::CurrentTest::Details() = newDetails;
 178              		.loc 3 23 0
 179 0046 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 179      00
 180 004b 488B55E8 		movq	-24(%rbp), %rdx
 181 004f 488910   		movq	%rdx, (%rax)
 182              	.L9:
 183              	.LBE4:
  24:ScopedCurrentTest.h **** 	}
 184              		.loc 3 24 0
 185 0052 C9       		leave
 186              		.cfi_def_cfa 7, 8
 187 0053 C3       		ret
 188              		.cfi_endproc
 189              	.LFE1023:
 191              		.weak	_ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
 192              		.set	_ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE,_ZN17ScopedCurrentTest
 193              		.section	.text._ZN17ScopedCurrentTestD2Ev,"axG",@progbits,_ZN17ScopedCurrentTestD5Ev,comdat
 194              		.align 2
 195              		.weak	_ZN17ScopedCurrentTestD2Ev
 197              	_ZN17ScopedCurrentTestD2Ev:
 198              	.LFB1026:
  25:ScopedCurrentTest.h **** 
  26:ScopedCurrentTest.h **** 	~ScopedCurrentTest()
 199              		.loc 3 26 0
 200              		.cfi_startproc
 201 0000 55       		pushq	%rbp
 202              		.cfi_def_cfa_offset 16
 203              		.cfi_offset 6, -16
 204 0001 4889E5   		movq	%rsp, %rbp
 205              		.cfi_def_cfa_register 6
 206 0004 4883EC10 		subq	$16, %rsp
 207 0008 48897DF8 		movq	%rdi, -8(%rbp)
 208              	.LBB5:
  27:ScopedCurrentTest.h **** 	{
  28:ScopedCurrentTest.h **** 		UnitTest::CurrentTest::Results() = m_oldTestResults;
 209              		.loc 3 28 0
 210 000c E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 210      00
 211 0011 488B55F8 		movq	-8(%rbp), %rdx
 212 0015 488B12   		movq	(%rdx), %rdx
 213 0018 488910   		movq	%rdx, (%rax)
  29:ScopedCurrentTest.h **** 		UnitTest::CurrentTest::Details() = m_oldTestDetails;
 214              		.loc 3 29 0
 215 001b E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 215      00
 216 0020 488B55F8 		movq	-8(%rbp), %rdx
 217 0024 488B5208 		movq	8(%rdx), %rdx
 218 0028 488910   		movq	%rdx, (%rax)
 219              	.LBE5:
  30:ScopedCurrentTest.h **** 	}
 220              		.loc 3 30 0
 221 002b C9       		leave
 222              		.cfi_def_cfa 7, 8
 223 002c C3       		ret
 224              		.cfi_endproc
 225              	.LFE1026:
 227              		.weak	_ZN17ScopedCurrentTestD1Ev
 228              		.set	_ZN17ScopedCurrentTestD1Ev,_ZN17ScopedCurrentTestD2Ev
 229              		.section	.rodata
 230              	.LC1:
 231 000d 54657374 		.string	"TestUnitTest++.cpp"
 231      556E6974 
 231      54657374 
 231      2B2B2E63 
 231      707000
 232              	.LC2:
 233 0020 56616C69 		.string	"ValidCheckSucceeds"
 233      64436865 
 233      636B5375 
 233      63636565 
 233      647300
 234              		.text
 235              		.align 2
 237              	_ZN12_GLOBAL__N_122TestValidCheckSucceedsC2Ev:
 238              	.LFB1290:
 239              		.file 4 "TestUnitTest++.cpp"
   1:TestUnitTest++.cpp **** #include "../UnitTest++.h"
   2:TestUnitTest++.cpp **** #include "../ReportAssert.h"
   3:TestUnitTest++.cpp **** #include "ScopedCurrentTest.h"
   4:TestUnitTest++.cpp **** 
   5:TestUnitTest++.cpp **** #include <vector>
   6:TestUnitTest++.cpp **** 
   7:TestUnitTest++.cpp **** // These are sample tests that show the different features of the framework
   8:TestUnitTest++.cpp **** 
   9:TestUnitTest++.cpp **** namespace {
  10:TestUnitTest++.cpp **** 
  11:TestUnitTest++.cpp **** TEST(ValidCheckSucceeds)
 240              		.loc 4 11 0
 241              		.cfi_startproc
 242 0000 55       		pushq	%rbp
 243              		.cfi_def_cfa_offset 16
 244              		.cfi_offset 6, -16
 245 0001 4889E5   		movq	%rsp, %rbp
 246              		.cfi_def_cfa_register 6
 247 0004 4883EC10 		subq	$16, %rsp
 248 0008 48897DF8 		movq	%rdi, -8(%rbp)
 249              	.LBB6:
 250              		.loc 4 11 0
 251 000c E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 251      00
 252 0011 4889C2   		movq	%rax, %rdx
 253 0014 488B45F8 		movq	-8(%rbp), %rax
 254 0018 41B80B00 		movl	$11, %r8d
 254      0000
 255 001e B9000000 		movl	$.LC1, %ecx
 255      00
 256 0023 BE000000 		movl	$.LC2, %esi
 256      00
 257 0028 4889C7   		movq	%rax, %rdi
 258 002b E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 258      00
 259 0030 488B45F8 		movq	-8(%rbp), %rax
 260 0034 48C70000 		movq	$_ZTVN12_GLOBAL__N_122TestValidCheckSucceedsE+16, (%rax)
 260      000000
 261              	.LBE6:
 262 003b C9       		leave
 263              		.cfi_def_cfa 7, 8
 264 003c C3       		ret
 265              		.cfi_endproc
 266              	.LFE1290:
 268              		.set	_ZN12_GLOBAL__N_122TestValidCheckSucceedsC1Ev,_ZN12_GLOBAL__N_122TestValidCheckSucceedsC2Ev
 269              		.local	_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE
 270              		.comm	_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE,56,32
 271              		.local	_ZN12_GLOBAL__N_123adderValidCheckSucceedsE
 272              		.comm	_ZN12_GLOBAL__N_123adderValidCheckSucceedsE,1,1
 273              		.section	.rodata
 274              	.LC3:
 275 0033 6200     		.string	"b"
 276 0035 000000   		.align 8
 277              	.LC4:
 278 0038 556E6861 		.string	"Unhandled exception in CHECK(b)"
 278      6E646C65 
 278      64206578 
 278      63657074 
 278      696F6E20 
 279              		.text
 280 003d 90       		.align 2
 282              	_ZNK12_GLOBAL__N_122TestValidCheckSucceeds7RunImplEv:
 283              	.LFB1292:
  12:TestUnitTest++.cpp **** {
 284              		.loc 4 12 0
 285              		.cfi_startproc
 286              		.cfi_personality 0x3,__gxx_personality_v0
 287              		.cfi_lsda 0x3,.LLSDA1292
 288 003e 55       		pushq	%rbp
 289              		.cfi_def_cfa_offset 16
 290              		.cfi_offset 6, -16
 291 003f 4889E5   		movq	%rsp, %rbp
 292              		.cfi_def_cfa_register 6
 293 0042 53       		pushq	%rbx
 294 0043 4883EC48 		subq	$72, %rsp
 295              		.cfi_offset 3, -24
 296 0047 48897DB8 		movq	%rdi, -72(%rbp)
 297              	.LBB7:
  13:TestUnitTest++.cpp ****     bool const b = true;
 298              		.loc 4 13 0
 299 004b C645CF01 		movb	$1, -49(%rbp)
  14:TestUnitTest++.cpp ****     CHECK(b);
 300              		.loc 4 14 0
 301 004f BF010000 		movl	$1, %edi
 301      00
 302 0054 E8000000 		call	_ZN8UnitTest5CheckIbEEbT_
 302      00
 303 0059 83F001   		xorl	$1, %eax
 304 005c 84C0     		testb	%al, %al
 305 005e 0F849300 		je	.L14
 305      0000
 306              	.LEHB4:
 307              		.loc 4 14 0 is_stmt 0 discriminator 1
 308 0064 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 308      00
 309 0069 488B08   		movq	(%rax), %rcx
 310 006c 488D45D0 		leaq	-48(%rbp), %rax
 311 0070 BA0E0000 		movl	$14, %edx
 311      00
 312 0075 4889CE   		movq	%rcx, %rsi
 313 0078 4889C7   		movq	%rax, %rdi
 314 007b E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 314      00
 315 0080 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 315      00
 316 0085 488B00   		movq	(%rax), %rax
 317 0088 488D4DD0 		leaq	-48(%rbp), %rcx
 318 008c BA000000 		movl	$.LC3, %edx
 318      00
 319 0091 4889CE   		movq	%rcx, %rsi
 320 0094 4889C7   		movq	%rax, %rdi
 321 0097 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 321      00
 322              	.LEHE4:
 323 009c EB59     		jmp	.L14
 324              	.L19:
 325 009e 4889C3   		movq	%rax, %rbx
 326              		.loc 4 14 0
 327 00a1 E8000000 		call	__cxa_end_catch
 327      00
 328 00a6 4889D8   		movq	%rbx, %rax
 329 00a9 4889C7   		movq	%rax, %rdi
 330              	.LEHB5:
 331 00ac E8000000 		call	_Unwind_Resume
 331      00
 332              	.LEHE5:
 333              	.L18:
 334 00b1 4889C7   		movq	%rax, %rdi
 335 00b4 E8000000 		call	__cxa_begin_catch
 335      00
 336              	.LEHB6:
 337 00b9 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 337      00
 338 00be 488B08   		movq	(%rax), %rcx
 339 00c1 488D45D0 		leaq	-48(%rbp), %rax
 340 00c5 BA0E0000 		movl	$14, %edx
 340      00
 341 00ca 4889CE   		movq	%rcx, %rsi
 342 00cd 4889C7   		movq	%rax, %rdi
 343 00d0 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 343      00
 344              		.loc 4 14 0 discriminator 1
 345 00d5 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 345      00
 346 00da 488B00   		movq	(%rax), %rax
 347 00dd 488D4DD0 		leaq	-48(%rbp), %rcx
 348 00e1 BA000000 		movl	$.LC4, %edx
 348      00
 349 00e6 4889CE   		movq	%rcx, %rsi
 350 00e9 4889C7   		movq	%rax, %rdi
 351 00ec E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 351      00
 352              	.LEHE6:
 353              	.LEHB7:
 354 00f1 E8000000 		call	__cxa_end_catch
 354      00
 355              	.LEHE7:
 356              	.LBE7:
  15:TestUnitTest++.cpp **** }
 357              		.loc 4 15 0 is_stmt 1 discriminator 1
 358 00f6 90       		nop
 359              	.L14:
 360              		.loc 4 15 0 is_stmt 0
 361 00f7 4883C448 		addq	$72, %rsp
 362 00fb 5B       		popq	%rbx
 363 00fc 5D       		popq	%rbp
 364              		.cfi_def_cfa 7, 8
 365 00fd C3       		ret
 366              		.cfi_endproc
 367              	.LFE1292:
 368              		.section	.gcc_except_table,"a",@progbits
 369              		.align 4
 370              	.LLSDA1292:
 371 0000 FF       		.byte	0xff
 372 0001 03       		.byte	0x3
 373 0002 19       		.uleb128 .LLSDATT1292-.LLSDATTD1292
 374              	.LLSDATTD1292:
 375 0003 01       		.byte	0x1
 376 0004 11       		.uleb128 .LLSDACSE1292-.LLSDACSB1292
 377              	.LLSDACSB1292:
 378 0005 26       		.uleb128 .LEHB4-.LFB1292
 379 0006 38       		.uleb128 .LEHE4-.LEHB4
 380 0007 73       		.uleb128 .L18-.LFB1292
 381 0008 01       		.uleb128 0x1
 382 0009 6E       		.uleb128 .LEHB5-.LFB1292
 383 000a 05       		.uleb128 .LEHE5-.LEHB5
 384 000b 00       		.uleb128 0
 385 000c 00       		.uleb128 0
 386 000d 7B       		.uleb128 .LEHB6-.LFB1292
 387 000e 38       		.uleb128 .LEHE6-.LEHB6
 388 000f 60       		.uleb128 .L19-.LFB1292
 389 0010 00       		.uleb128 0
 390 0011 B301     		.uleb128 .LEHB7-.LFB1292
 391 0013 05       		.uleb128 .LEHE7-.LEHB7
 392 0014 00       		.uleb128 0
 393 0015 00       		.uleb128 0
 394              	.LLSDACSE1292:
 395 0016 01       		.byte	0x1
 396 0017 00       		.byte	0
 397              		.align 4
 398 0018 00000000 		.long	0
 399              	
 400              	.LLSDATT1292:
 401              		.text
 403              		.section	.rodata
 404              	.LC5:
 405 0058 43686563 		.string	"CheckWorksWithPointers"
 405      6B576F72 
 405      6B735769 
 405      7468506F 
 405      696E7465 
 406              		.text
 407              		.align 2
 409              	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersC2Ev:
 410              	.LFB1294:
  16:TestUnitTest++.cpp **** 
  17:TestUnitTest++.cpp **** TEST(CheckWorksWithPointers)
 411              		.loc 4 17 0 is_stmt 1
 412              		.cfi_startproc
 413 00fe 55       		pushq	%rbp
 414              		.cfi_def_cfa_offset 16
 415              		.cfi_offset 6, -16
 416 00ff 4889E5   		movq	%rsp, %rbp
 417              		.cfi_def_cfa_register 6
 418 0102 4883EC10 		subq	$16, %rsp
 419 0106 48897DF8 		movq	%rdi, -8(%rbp)
 420              	.LBB8:
 421              		.loc 4 17 0
 422 010a E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 422      00
 423 010f 4889C2   		movq	%rax, %rdx
 424 0112 488B45F8 		movq	-8(%rbp), %rax
 425 0116 41B81100 		movl	$17, %r8d
 425      0000
 426 011c B9000000 		movl	$.LC1, %ecx
 426      00
 427 0121 BE000000 		movl	$.LC5, %esi
 427      00
 428 0126 4889C7   		movq	%rax, %rdi
 429 0129 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 429      00
 430 012e 488B45F8 		movq	-8(%rbp), %rax
 431 0132 48C70000 		movq	$_ZTVN12_GLOBAL__N_126TestCheckWorksWithPointersE+16, (%rax)
 431      000000
 432              	.LBE8:
 433 0139 C9       		leave
 434              		.cfi_def_cfa 7, 8
 435 013a C3       		ret
 436              		.cfi_endproc
 437              	.LFE1294:
 439              		.set	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersC1Ev,_ZN12_GLOBAL__N_126TestCheckWorksWithPointe
 440              		.local	_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE
 441              		.comm	_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE,56,32
 442              		.local	_ZN12_GLOBAL__N_127adderCheckWorksWithPointersE
 443              		.comm	_ZN12_GLOBAL__N_127adderCheckWorksWithPointersE,1,1
 444              		.section	.rodata
 445              	.LC6:
 446 006f 7000     		.string	"p"
 447              	.LC7:
 448 0071 7020213D 		.string	"p != 0"
 448      203000
 449              		.align 8
 450              	.LC8:
 451 0078 556E6861 		.string	"Unhandled exception in CHECK(p)"
 451      6E646C65 
 451      64206578 
 451      63657074 
 451      696F6E20 
 452              		.align 8
 453              	.LC9:
 454 0098 556E6861 		.string	"Unhandled exception in CHECK(p != 0)"
 454      6E646C65 
 454      64206578 
 454      63657074 
 454      696F6E20 
 455              		.text
 456 013b 90       		.align 2
 458              	_ZNK12_GLOBAL__N_126TestCheckWorksWithPointers7RunImplEv:
 459              	.LFB1296:
  18:TestUnitTest++.cpp **** {
 460              		.loc 4 18 0
 461              		.cfi_startproc
 462              		.cfi_personality 0x3,__gxx_personality_v0
 463              		.cfi_lsda 0x3,.LLSDA1296
 464 013c 55       		pushq	%rbp
 465              		.cfi_def_cfa_offset 16
 466              		.cfi_offset 6, -16
 467 013d 4889E5   		movq	%rsp, %rbp
 468              		.cfi_def_cfa_register 6
 469 0140 53       		pushq	%rbx
 470 0141 4883EC48 		subq	$72, %rsp
 471              		.cfi_offset 3, -24
 472 0145 48897DB8 		movq	%rdi, -72(%rbp)
 473              	.LBB9:
  19:TestUnitTest++.cpp ****     void* p = (void *)0x100;
 474              		.loc 4 19 0
 475 0149 48C745C8 		movq	$256, -56(%rbp)
 475      00010000 
  20:TestUnitTest++.cpp ****     CHECK(p);
 476              		.loc 4 20 0
 477 0151 488B45C8 		movq	-56(%rbp), %rax
 478 0155 4889C7   		movq	%rax, %rdi
 479 0158 E8000000 		call	_ZN8UnitTest5CheckIPvEEbT_
 479      00
 480 015d 83F001   		xorl	$1, %eax
 481 0160 84C0     		testb	%al, %al
 482 0162 7438     		je	.L22
 483              	.LEHB8:
 484              		.loc 4 20 0 is_stmt 0 discriminator 1
 485 0164 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 485      00
 486 0169 488B08   		movq	(%rax), %rcx
 487 016c 488D45D0 		leaq	-48(%rbp), %rax
 488 0170 BA140000 		movl	$20, %edx
 488      00
 489 0175 4889CE   		movq	%rcx, %rsi
 490 0178 4889C7   		movq	%rax, %rdi
 491 017b E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 491      00
 492 0180 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 492      00
 493 0185 488B00   		movq	(%rax), %rax
 494 0188 488D4DD0 		leaq	-48(%rbp), %rcx
 495 018c BA000000 		movl	$.LC6, %edx
 495      00
 496 0191 4889CE   		movq	%rcx, %rsi
 497 0194 4889C7   		movq	%rax, %rdi
 498 0197 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 498      00
 499              	.LEHE8:
 500              	.L22:
  21:TestUnitTest++.cpp ****     CHECK(p != 0);
 501              		.loc 4 21 0 is_stmt 1
 502 019c 48837DC8 		cmpq	$0, -56(%rbp)
 502      00
 503 01a1 0F95C0   		setne	%al
 504 01a4 0FB6C0   		movzbl	%al, %eax
 505 01a7 89C7     		movl	%eax, %edi
 506 01a9 E8000000 		call	_ZN8UnitTest5CheckIbEEbT_
 506      00
 507 01ae 83F001   		xorl	$1, %eax
 508 01b1 84C0     		testb	%al, %al
 509 01b3 0F84F300 		je	.L21
 509      0000
 510              	.LEHB9:
 511              		.loc 4 21 0 is_stmt 0 discriminator 1
 512 01b9 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 512      00
 513 01be 488B08   		movq	(%rax), %rcx
 514 01c1 488D45D0 		leaq	-48(%rbp), %rax
 515 01c5 BA150000 		movl	$21, %edx
 515      00
 516 01ca 4889CE   		movq	%rcx, %rsi
 517 01cd 4889C7   		movq	%rax, %rdi
 518 01d0 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 518      00
 519 01d5 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 519      00
 520 01da 488B00   		movq	(%rax), %rax
 521 01dd 488D4DD0 		leaq	-48(%rbp), %rcx
 522 01e1 BA000000 		movl	$.LC7, %edx
 522      00
 523 01e6 4889CE   		movq	%rcx, %rsi
 524 01e9 4889C7   		movq	%rax, %rdi
 525 01ec E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 525      00
 526              	.LEHE9:
 527 01f1 E9B60000 		jmp	.L21
 527      00
 528              	.L29:
 529 01f6 4889C3   		movq	%rax, %rbx
  20:TestUnitTest++.cpp ****     CHECK(p);
 530              		.loc 4 20 0 is_stmt 1
 531 01f9 E8000000 		call	__cxa_end_catch
 531      00
 532 01fe 4889D8   		movq	%rbx, %rax
 533 0201 4889C7   		movq	%rax, %rdi
 534              	.LEHB10:
 535 0204 E8000000 		call	_Unwind_Resume
 535      00
 536              	.LEHE10:
 537              	.L28:
 538 0209 4889C7   		movq	%rax, %rdi
 539 020c E8000000 		call	__cxa_begin_catch
 539      00
 540              	.LEHB11:
 541 0211 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 541      00
 542 0216 488B08   		movq	(%rax), %rcx
 543 0219 488D45D0 		leaq	-48(%rbp), %rax
 544 021d BA140000 		movl	$20, %edx
 544      00
 545 0222 4889CE   		movq	%rcx, %rsi
 546 0225 4889C7   		movq	%rax, %rdi
 547 0228 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 547      00
  20:TestUnitTest++.cpp ****     CHECK(p);
 548              		.loc 4 20 0 is_stmt 0 discriminator 1
 549 022d E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 549      00
 550 0232 488B00   		movq	(%rax), %rax
 551 0235 488D4DD0 		leaq	-48(%rbp), %rcx
 552 0239 BA000000 		movl	$.LC8, %edx
 552      00
 553 023e 4889CE   		movq	%rcx, %rsi
 554 0241 4889C7   		movq	%rax, %rdi
 555 0244 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 555      00
 556              	.LEHE11:
 557              	.LEHB12:
 558 0249 E8000000 		call	__cxa_end_catch
 558      00
 559              	.LEHE12:
 560 024e E949FFFF 		jmp	.L22
 560      FF
 561              	.L31:
 562 0253 4889C3   		movq	%rax, %rbx
 563              		.loc 4 21 0 is_stmt 1
 564 0256 E8000000 		call	__cxa_end_catch
 564      00
 565 025b 4889D8   		movq	%rbx, %rax
 566 025e 4889C7   		movq	%rax, %rdi
 567              	.LEHB13:
 568 0261 E8000000 		call	_Unwind_Resume
 568      00
 569              	.LEHE13:
 570              	.L30:
 571 0266 4889C7   		movq	%rax, %rdi
 572 0269 E8000000 		call	__cxa_begin_catch
 572      00
 573              	.LEHB14:
 574 026e E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 574      00
 575 0273 488B08   		movq	(%rax), %rcx
 576 0276 488D45D0 		leaq	-48(%rbp), %rax
 577 027a BA150000 		movl	$21, %edx
 577      00
 578 027f 4889CE   		movq	%rcx, %rsi
 579 0282 4889C7   		movq	%rax, %rdi
 580 0285 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 580      00
 581              		.loc 4 21 0 is_stmt 0 discriminator 1
 582 028a E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 582      00
 583 028f 488B00   		movq	(%rax), %rax
 584 0292 488D4DD0 		leaq	-48(%rbp), %rcx
 585 0296 BA000000 		movl	$.LC9, %edx
 585      00
 586 029b 4889CE   		movq	%rcx, %rsi
 587 029e 4889C7   		movq	%rax, %rdi
 588 02a1 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 588      00
 589              	.LEHE14:
 590              	.LEHB15:
 591 02a6 E8000000 		call	__cxa_end_catch
 591      00
 592              	.LEHE15:
 593              	.LBE9:
  22:TestUnitTest++.cpp **** }
 594              		.loc 4 22 0 is_stmt 1 discriminator 1
 595 02ab 90       		nop
 596              	.L21:
 597              		.loc 4 22 0 is_stmt 0
 598 02ac 4883C448 		addq	$72, %rsp
 599 02b0 5B       		popq	%rbx
 600 02b1 5D       		popq	%rbp
 601              		.cfi_def_cfa 7, 8
 602 02b2 C3       		ret
 603              		.cfi_endproc
 604              	.LFE1296:
 605              		.section	.gcc_except_table
 606              		.align 4
 607              	.LLSDA1296:
 608 001c FF       		.byte	0xff
 609 001d 03       		.byte	0x3
 610 001e 35       		.uleb128 .LLSDATT1296-.LLSDATTD1296
 611              	.LLSDATTD1296:
 612 001f 01       		.byte	0x1
 613 0020 2A       		.uleb128 .LLSDACSE1296-.LLSDACSB1296
 614              	.LLSDACSB1296:
 615 0021 28       		.uleb128 .LEHB8-.LFB1296
 616 0022 38       		.uleb128 .LEHE8-.LEHB8
 617 0023 CD01     		.uleb128 .L28-.LFB1296
 618 0025 01       		.uleb128 0x1
 619 0026 7D       		.uleb128 .LEHB9-.LFB1296
 620 0027 38       		.uleb128 .LEHE9-.LEHB9
 621 0028 AA02     		.uleb128 .L30-.LFB1296
 622 002a 01       		.uleb128 0x1
 623 002b C801     		.uleb128 .LEHB10-.LFB1296
 624 002d 05       		.uleb128 .LEHE10-.LEHB10
 625 002e 00       		.uleb128 0
 626 002f 00       		.uleb128 0
 627 0030 D501     		.uleb128 .LEHB11-.LFB1296
 628 0032 38       		.uleb128 .LEHE11-.LEHB11
 629 0033 BA01     		.uleb128 .L29-.LFB1296
 630 0035 00       		.uleb128 0
 631 0036 8D02     		.uleb128 .LEHB12-.LFB1296
 632 0038 05       		.uleb128 .LEHE12-.LEHB12
 633 0039 00       		.uleb128 0
 634 003a 00       		.uleb128 0
 635 003b A502     		.uleb128 .LEHB13-.LFB1296
 636 003d 05       		.uleb128 .LEHE13-.LEHB13
 637 003e 00       		.uleb128 0
 638 003f 00       		.uleb128 0
 639 0040 B202     		.uleb128 .LEHB14-.LFB1296
 640 0042 38       		.uleb128 .LEHE14-.LEHB14
 641 0043 9702     		.uleb128 .L31-.LFB1296
 642 0045 00       		.uleb128 0
 643 0046 EA02     		.uleb128 .LEHB15-.LFB1296
 644 0048 05       		.uleb128 .LEHE15-.LEHB15
 645 0049 00       		.uleb128 0
 646 004a 00       		.uleb128 0
 647              	.LLSDACSE1296:
 648 004b 01       		.byte	0x1
 649 004c 00       		.byte	0
 650 004d 000000   		.align 4
 651 0050 00000000 		.long	0
 652              	
 653              	.LLSDATT1296:
 654              		.text
 656              		.section	.rodata
 657              	.LC10:
 658 00bd 56616C69 		.string	"ValidCheckEqualSucceeds"
 658      64436865 
 658      636B4571 
 658      75616C53 
 658      75636365 
 659              		.text
 660 02b3 90       		.align 2
 662              	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC2Ev:
 663              	.LFB1298:
  23:TestUnitTest++.cpp **** 
  24:TestUnitTest++.cpp **** TEST(ValidCheckEqualSucceeds)
 664              		.loc 4 24 0 is_stmt 1
 665              		.cfi_startproc
 666 02b4 55       		pushq	%rbp
 667              		.cfi_def_cfa_offset 16
 668              		.cfi_offset 6, -16
 669 02b5 4889E5   		movq	%rsp, %rbp
 670              		.cfi_def_cfa_register 6
 671 02b8 4883EC10 		subq	$16, %rsp
 672 02bc 48897DF8 		movq	%rdi, -8(%rbp)
 673              	.LBB10:
 674              		.loc 4 24 0
 675 02c0 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 675      00
 676 02c5 4889C2   		movq	%rax, %rdx
 677 02c8 488B45F8 		movq	-8(%rbp), %rax
 678 02cc 41B81800 		movl	$24, %r8d
 678      0000
 679 02d2 B9000000 		movl	$.LC1, %ecx
 679      00
 680 02d7 BE000000 		movl	$.LC10, %esi
 680      00
 681 02dc 4889C7   		movq	%rax, %rdi
 682 02df E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 682      00
 683 02e4 488B45F8 		movq	-8(%rbp), %rax
 684 02e8 48C70000 		movq	$_ZTVN12_GLOBAL__N_127TestValidCheckEqualSucceedsE+16, (%rax)
 684      000000
 685              	.LBE10:
 686 02ef C9       		leave
 687              		.cfi_def_cfa 7, 8
 688 02f0 C3       		ret
 689              		.cfi_endproc
 690              	.LFE1298:
 692              		.set	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC1Ev,_ZN12_GLOBAL__N_127TestValidCheckEqualSucc
 693              		.local	_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE
 694              		.comm	_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE,56,32
 695              		.local	_ZN12_GLOBAL__N_128adderValidCheckEqualSucceedsE
 696              		.comm	_ZN12_GLOBAL__N_128adderValidCheckEqualSucceedsE,1,1
 697              		.section	.rodata
 698 00d5 000000   		.align 8
 699              	.LC11:
 700 00d8 556E6861 		.string	"Unhandled exception in CHECK_EQUAL(x, y)"
 700      6E646C65 
 700      64206578 
 700      63657074 
 700      696F6E20 
 701              		.text
 702 02f1 90       		.align 2
 704              	_ZNK12_GLOBAL__N_127TestValidCheckEqualSucceeds7RunImplEv:
 705              	.LFB1300:
  25:TestUnitTest++.cpp **** {
 706              		.loc 4 25 0
 707              		.cfi_startproc
 708              		.cfi_personality 0x3,__gxx_personality_v0
 709              		.cfi_lsda 0x3,.LLSDA1300
 710 02f2 55       		pushq	%rbp
 711              		.cfi_def_cfa_offset 16
 712              		.cfi_offset 6, -16
 713 02f3 4889E5   		movq	%rsp, %rbp
 714              		.cfi_def_cfa_register 6
 715 02f6 53       		pushq	%rbx
 716 02f7 4883EC48 		subq	$72, %rsp
 717              		.cfi_offset 3, -24
 718 02fb 48897DB8 		movq	%rdi, -72(%rbp)
 719              	.LBB11:
  26:TestUnitTest++.cpp ****     int const x = 3;
 720              		.loc 4 26 0
 721 02ff C745C803 		movl	$3, -56(%rbp)
 721      000000
  27:TestUnitTest++.cpp ****     int const y = 3;
 722              		.loc 4 27 0
 723 0306 C745CC03 		movl	$3, -52(%rbp)
 723      000000
 724              	.LEHB16:
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 725              		.loc 4 28 0
 726 030d E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 726      00
 727 0312 488B08   		movq	(%rax), %rcx
 728 0315 488D45D0 		leaq	-48(%rbp), %rax
 729 0319 BA1C0000 		movl	$28, %edx
 729      00
 730 031e 4889CE   		movq	%rcx, %rsi
 731 0321 4889C7   		movq	%rax, %rdi
 732 0324 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 732      00
 733              		.loc 4 28 0 is_stmt 0 discriminator 1
 734 0329 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 734      00
 735 032e 488B00   		movq	(%rax), %rax
 736 0331 488D4DD0 		leaq	-48(%rbp), %rcx
 737 0335 488D55CC 		leaq	-52(%rbp), %rdx
 738 0339 488D75C8 		leaq	-56(%rbp), %rsi
 739 033d 4889C7   		movq	%rax, %rdi
 740 0340 E8000000 		call	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 740      00
 741              	.LEHE16:
 742              	.LBE11:
  29:TestUnitTest++.cpp **** }
 743              		.loc 4 29 0 is_stmt 1
 744 0345 EB58     		jmp	.L39
 745              	.L38:
 746 0347 4889C3   		movq	%rax, %rbx
 747              	.LBB12:
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 748              		.loc 4 28 0
 749 034a E8000000 		call	__cxa_end_catch
 749      00
 750 034f 4889D8   		movq	%rbx, %rax
 751 0352 4889C7   		movq	%rax, %rdi
 752              	.LEHB17:
 753 0355 E8000000 		call	_Unwind_Resume
 753      00
 754              	.LEHE17:
 755              	.L37:
 756 035a 4889C7   		movq	%rax, %rdi
 757 035d E8000000 		call	__cxa_begin_catch
 757      00
 758              	.LEHB18:
 759 0362 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 759      00
 760 0367 488B08   		movq	(%rax), %rcx
 761 036a 488D45D0 		leaq	-48(%rbp), %rax
 762 036e BA1C0000 		movl	$28, %edx
 762      00
 763 0373 4889CE   		movq	%rcx, %rsi
 764 0376 4889C7   		movq	%rax, %rdi
 765 0379 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 765      00
  28:TestUnitTest++.cpp ****     CHECK_EQUAL(x, y);
 766              		.loc 4 28 0 is_stmt 0 discriminator 1
 767 037e E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 767      00
 768 0383 488B00   		movq	(%rax), %rax
 769 0386 488D4DD0 		leaq	-48(%rbp), %rcx
 770 038a BA000000 		movl	$.LC11, %edx
 770      00
 771 038f 4889CE   		movq	%rcx, %rsi
 772 0392 4889C7   		movq	%rax, %rdi
 773 0395 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 773      00
 774              	.LEHE18:
 775              	.LEHB19:
 776 039a E8000000 		call	__cxa_end_catch
 776      00
 777              	.LEHE19:
 778              	.L39:
 779              	.LBE12:
 780              		.loc 4 29 0 is_stmt 1
 781 039f 90       		nop
 782 03a0 4883C448 		addq	$72, %rsp
 783 03a4 5B       		popq	%rbx
 784 03a5 5D       		popq	%rbp
 785              		.cfi_def_cfa 7, 8
 786 03a6 C3       		ret
 787              		.cfi_endproc
 788              	.LFE1300:
 789              		.section	.gcc_except_table
 790              		.align 4
 791              	.LLSDA1300:
 792 0054 FF       		.byte	0xff
 793 0055 03       		.byte	0x3
 794 0056 19       		.uleb128 .LLSDATT1300-.LLSDATTD1300
 795              	.LLSDATTD1300:
 796 0057 01       		.byte	0x1
 797 0058 11       		.uleb128 .LLSDACSE1300-.LLSDACSB1300
 798              	.LLSDACSB1300:
 799 0059 1B       		.uleb128 .LEHB16-.LFB1300
 800 005a 38       		.uleb128 .LEHE16-.LEHB16
 801 005b 68       		.uleb128 .L37-.LFB1300
 802 005c 01       		.uleb128 0x1
 803 005d 63       		.uleb128 .LEHB17-.LFB1300
 804 005e 05       		.uleb128 .LEHE17-.LEHB17
 805 005f 00       		.uleb128 0
 806 0060 00       		.uleb128 0
 807 0061 70       		.uleb128 .LEHB18-.LFB1300
 808 0062 38       		.uleb128 .LEHE18-.LEHB18
 809 0063 55       		.uleb128 .L38-.LFB1300
 810 0064 00       		.uleb128 0
 811 0065 A801     		.uleb128 .LEHB19-.LFB1300
 812 0067 05       		.uleb128 .LEHE19-.LEHB19
 813 0068 00       		.uleb128 0
 814 0069 00       		.uleb128 0
 815              	.LLSDACSE1300:
 816 006a 01       		.byte	0x1
 817 006b 00       		.byte	0
 818              		.align 4
 819 006c 00000000 		.long	0
 820              	
 821              	.LLSDATT1300:
 822              		.text
 824              		.section	.rodata
 825              	.LC12:
 826 0101 43686563 		.string	"CheckEqualWorksWithPointers"
 826      6B457175 
 826      616C576F 
 826      726B7357 
 826      69746850 
 827              		.text
 828 03a7 90       		.align 2
 830              	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC2Ev:
 831              	.LFB1302:
  30:TestUnitTest++.cpp **** 
  31:TestUnitTest++.cpp **** TEST(CheckEqualWorksWithPointers)
 832              		.loc 4 31 0
 833              		.cfi_startproc
 834 03a8 55       		pushq	%rbp
 835              		.cfi_def_cfa_offset 16
 836              		.cfi_offset 6, -16
 837 03a9 4889E5   		movq	%rsp, %rbp
 838              		.cfi_def_cfa_register 6
 839 03ac 4883EC10 		subq	$16, %rsp
 840 03b0 48897DF8 		movq	%rdi, -8(%rbp)
 841              	.LBB13:
 842              		.loc 4 31 0
 843 03b4 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 843      00
 844 03b9 4889C2   		movq	%rax, %rdx
 845 03bc 488B45F8 		movq	-8(%rbp), %rax
 846 03c0 41B81F00 		movl	$31, %r8d
 846      0000
 847 03c6 B9000000 		movl	$.LC1, %ecx
 847      00
 848 03cb BE000000 		movl	$.LC12, %esi
 848      00
 849 03d0 4889C7   		movq	%rax, %rdi
 850 03d3 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 850      00
 851 03d8 488B45F8 		movq	-8(%rbp), %rax
 852 03dc 48C70000 		movq	$_ZTVN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE+16, (%rax)
 852      000000
 853              	.LBE13:
 854 03e3 C9       		leave
 855              		.cfi_def_cfa 7, 8
 856 03e4 C3       		ret
 857              		.cfi_endproc
 858              	.LFE1302:
 860              		.set	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC1Ev,_ZN12_GLOBAL__N_131TestCheckEqualWorks
 861              		.local	_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE
 862              		.comm	_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE,56,32
 863              		.local	_ZN12_GLOBAL__N_132adderCheckEqualWorksWithPointersE
 864              		.comm	_ZN12_GLOBAL__N_132adderCheckEqualWorksWithPointersE,1,1
 865              		.section	.rodata
 866 011d 000000   		.align 8
 867              	.LC13:
 868 0120 556E6861 		.string	"Unhandled exception in CHECK_EQUAL((void*)0, p)"
 868      6E646C65 
 868      64206578 
 868      63657074 
 868      696F6E20 
 869              		.text
 870 03e5 90       		.align 2
 872              	_ZNK12_GLOBAL__N_131TestCheckEqualWorksWithPointers7RunImplEv:
 873              	.LFB1304:
  32:TestUnitTest++.cpp **** {
 874              		.loc 4 32 0
 875              		.cfi_startproc
 876              		.cfi_personality 0x3,__gxx_personality_v0
 877              		.cfi_lsda 0x3,.LLSDA1304
 878 03e6 55       		pushq	%rbp
 879              		.cfi_def_cfa_offset 16
 880              		.cfi_offset 6, -16
 881 03e7 4889E5   		movq	%rsp, %rbp
 882              		.cfi_def_cfa_register 6
 883 03ea 53       		pushq	%rbx
 884 03eb 4883EC48 		subq	$72, %rsp
 885              		.cfi_offset 3, -24
 886 03ef 48897DB8 		movq	%rdi, -72(%rbp)
 887              	.LBB14:
  33:TestUnitTest++.cpp ****     void* p = (void *)0;
 888              		.loc 4 33 0
 889 03f3 48C745C0 		movq	$0, -64(%rbp)
 889      00000000 
 890              	.LEHB20:
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 891              		.loc 4 34 0
 892 03fb E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 892      00
 893 0400 488B08   		movq	(%rax), %rcx
 894 0403 488D45D0 		leaq	-48(%rbp), %rax
 895 0407 BA220000 		movl	$34, %edx
 895      00
 896 040c 4889CE   		movq	%rcx, %rsi
 897 040f 4889C7   		movq	%rax, %rdi
 898 0412 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 898      00
 899              		.loc 4 34 0 is_stmt 0 discriminator 1
 900 0417 48C745C8 		movq	$0, -56(%rbp)
 900      00000000 
 901 041f E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 901      00
 902 0424 488B00   		movq	(%rax), %rax
 903 0427 488D4DD0 		leaq	-48(%rbp), %rcx
 904 042b 488D55C0 		leaq	-64(%rbp), %rdx
 905 042f 488D75C8 		leaq	-56(%rbp), %rsi
 906 0433 4889C7   		movq	%rax, %rdi
 907 0436 E8000000 		call	_ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 907      00
 908              	.LEHE20:
 909              	.LBE14:
  35:TestUnitTest++.cpp **** }
 910              		.loc 4 35 0 is_stmt 1
 911 043b EB58     		jmp	.L47
 912              	.L46:
 913 043d 4889C3   		movq	%rax, %rbx
 914              	.LBB15:
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 915              		.loc 4 34 0
 916 0440 E8000000 		call	__cxa_end_catch
 916      00
 917 0445 4889D8   		movq	%rbx, %rax
 918 0448 4889C7   		movq	%rax, %rdi
 919              	.LEHB21:
 920 044b E8000000 		call	_Unwind_Resume
 920      00
 921              	.LEHE21:
 922              	.L45:
 923 0450 4889C7   		movq	%rax, %rdi
 924 0453 E8000000 		call	__cxa_begin_catch
 924      00
 925              	.LEHB22:
 926 0458 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 926      00
 927 045d 488B08   		movq	(%rax), %rcx
 928 0460 488D45D0 		leaq	-48(%rbp), %rax
 929 0464 BA220000 		movl	$34, %edx
 929      00
 930 0469 4889CE   		movq	%rcx, %rsi
 931 046c 4889C7   		movq	%rax, %rdi
 932 046f E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 932      00
  34:TestUnitTest++.cpp ****     CHECK_EQUAL((void*)0, p);
 933              		.loc 4 34 0 is_stmt 0 discriminator 1
 934 0474 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 934      00
 935 0479 488B00   		movq	(%rax), %rax
 936 047c 488D4DD0 		leaq	-48(%rbp), %rcx
 937 0480 BA000000 		movl	$.LC13, %edx
 937      00
 938 0485 4889CE   		movq	%rcx, %rsi
 939 0488 4889C7   		movq	%rax, %rdi
 940 048b E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 940      00
 941              	.LEHE22:
 942              	.LEHB23:
 943 0490 E8000000 		call	__cxa_end_catch
 943      00
 944              	.LEHE23:
 945              	.L47:
 946              	.LBE15:
 947              		.loc 4 35 0 is_stmt 1
 948 0495 90       		nop
 949 0496 4883C448 		addq	$72, %rsp
 950 049a 5B       		popq	%rbx
 951 049b 5D       		popq	%rbp
 952              		.cfi_def_cfa 7, 8
 953 049c C3       		ret
 954              		.cfi_endproc
 955              	.LFE1304:
 956              		.section	.gcc_except_table
 957              		.align 4
 958              	.LLSDA1304:
 959 0070 FF       		.byte	0xff
 960 0071 03       		.byte	0x3
 961 0072 19       		.uleb128 .LLSDATT1304-.LLSDATTD1304
 962              	.LLSDATTD1304:
 963 0073 01       		.byte	0x1
 964 0074 11       		.uleb128 .LLSDACSE1304-.LLSDACSB1304
 965              	.LLSDACSB1304:
 966 0075 15       		.uleb128 .LEHB20-.LFB1304
 967 0076 40       		.uleb128 .LEHE20-.LEHB20
 968 0077 6A       		.uleb128 .L45-.LFB1304
 969 0078 01       		.uleb128 0x1
 970 0079 65       		.uleb128 .LEHB21-.LFB1304
 971 007a 05       		.uleb128 .LEHE21-.LEHB21
 972 007b 00       		.uleb128 0
 973 007c 00       		.uleb128 0
 974 007d 72       		.uleb128 .LEHB22-.LFB1304
 975 007e 38       		.uleb128 .LEHE22-.LEHB22
 976 007f 57       		.uleb128 .L46-.LFB1304
 977 0080 00       		.uleb128 0
 978 0081 AA01     		.uleb128 .LEHB23-.LFB1304
 979 0083 05       		.uleb128 .LEHE23-.LEHB23
 980 0084 00       		.uleb128 0
 981 0085 00       		.uleb128 0
 982              	.LLSDACSE1304:
 983 0086 01       		.byte	0x1
 984 0087 00       		.byte	0
 985              		.align 4
 986 0088 00000000 		.long	0
 987              	
 988              	.LLSDATT1304:
 989              		.text
 991              		.section	.rodata
 992              	.LC14:
 993 0150 56616C69 		.string	"ValidCheckCloseSucceeds"
 993      64436865 
 993      636B436C 
 993      6F736553 
 993      75636365 
 994              		.text
 995 049d 90       		.align 2
 997              	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC2Ev:
 998              	.LFB1306:
  36:TestUnitTest++.cpp **** 
  37:TestUnitTest++.cpp **** TEST(ValidCheckCloseSucceeds)
 999              		.loc 4 37 0
 1000              		.cfi_startproc
 1001 049e 55       		pushq	%rbp
 1002              		.cfi_def_cfa_offset 16
 1003              		.cfi_offset 6, -16
 1004 049f 4889E5   		movq	%rsp, %rbp
 1005              		.cfi_def_cfa_register 6
 1006 04a2 4883EC10 		subq	$16, %rsp
 1007 04a6 48897DF8 		movq	%rdi, -8(%rbp)
 1008              	.LBB16:
 1009              		.loc 4 37 0
 1010 04aa E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1010      00
 1011 04af 4889C2   		movq	%rax, %rdx
 1012 04b2 488B45F8 		movq	-8(%rbp), %rax
 1013 04b6 41B82500 		movl	$37, %r8d
 1013      0000
 1014 04bc B9000000 		movl	$.LC1, %ecx
 1014      00
 1015 04c1 BE000000 		movl	$.LC14, %esi
 1015      00
 1016 04c6 4889C7   		movq	%rax, %rdi
 1017 04c9 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 1017      00
 1018 04ce 488B45F8 		movq	-8(%rbp), %rax
 1019 04d2 48C70000 		movq	$_ZTVN12_GLOBAL__N_127TestValidCheckCloseSucceedsE+16, (%rax)
 1019      000000
 1020              	.LBE16:
 1021 04d9 C9       		leave
 1022              		.cfi_def_cfa 7, 8
 1023 04da C3       		ret
 1024              		.cfi_endproc
 1025              	.LFE1306:
 1027              		.set	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC1Ev,_ZN12_GLOBAL__N_127TestValidCheckCloseSucc
 1028              		.local	_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE
 1029              		.comm	_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE,56,32
 1030              		.local	_ZN12_GLOBAL__N_128adderValidCheckCloseSucceedsE
 1031              		.comm	_ZN12_GLOBAL__N_128adderValidCheckCloseSucceedsE,1,1
 1032              		.section	.rodata
 1033              		.align 8
 1034              	.LC18:
 1035 0168 556E6861 		.string	"Unhandled exception in CHECK_CLOSE(2.0f, 2.001f)"
 1035      6E646C65 
 1035      64206578 
 1035      63657074 
 1035      696F6E20 
 1036 0199 00000000 		.align 8
 1036      000000
 1037              	.LC19:
 1038 01a0 556E6861 		.string	"Unhandled exception in CHECK_CLOSE(2.001f, 2.0f)"
 1038      6E646C65 
 1038      64206578 
 1038      63657074 
 1038      696F6E20 
 1039              		.text
 1040 04db 90       		.align 2
 1042              	_ZNK12_GLOBAL__N_127TestValidCheckCloseSucceeds7RunImplEv:
 1043              	.LFB1308:
  38:TestUnitTest++.cpp **** {
 1044              		.loc 4 38 0
 1045              		.cfi_startproc
 1046              		.cfi_personality 0x3,__gxx_personality_v0
 1047              		.cfi_lsda 0x3,.LLSDA1308
 1048 04dc 55       		pushq	%rbp
 1049              		.cfi_def_cfa_offset 16
 1050              		.cfi_offset 6, -16
 1051 04dd 4889E5   		movq	%rsp, %rbp
 1052              		.cfi_def_cfa_register 6
 1053 04e0 53       		pushq	%rbx
 1054 04e1 4883EC48 		subq	$72, %rsp
 1055              		.cfi_offset 3, -24
 1056 04e5 48897DB8 		movq	%rdi, -72(%rbp)
 1057              	.LEHB24:
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1058              		.loc 4 39 0
 1059 04e9 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1059      00
 1060 04ee 488B08   		movq	(%rax), %rcx
 1061 04f1 488D45D0 		leaq	-48(%rbp), %rax
 1062 04f5 BA270000 		movl	$39, %edx
 1062      00
 1063 04fa 4889CE   		movq	%rcx, %rsi
 1064 04fd 4889C7   		movq	%rax, %rdi
 1065 0500 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1065      00
 1066              		.loc 4 39 0 is_stmt 0 discriminator 1
 1067 0505 8B050000 		movl	.LC15(%rip), %eax
 1067      0000
 1068 050b 8945CC   		movl	%eax, -52(%rbp)
 1069 050e 8B050000 		movl	.LC16(%rip), %eax
 1069      0000
 1070 0514 8945C8   		movl	%eax, -56(%rbp)
 1071 0517 8B050000 		movl	.LC17(%rip), %eax
 1071      0000
 1072 051d 8945C4   		movl	%eax, -60(%rbp)
 1073 0520 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1073      00
 1074 0525 488B00   		movq	(%rax), %rax
 1075 0528 488D7DD0 		leaq	-48(%rbp), %rdi
 1076 052c 488D4DCC 		leaq	-52(%rbp), %rcx
 1077 0530 488D55C8 		leaq	-56(%rbp), %rdx
 1078 0534 488D75C4 		leaq	-60(%rbp), %rsi
 1079 0538 4989F8   		movq	%rdi, %r8
 1080 053b 4889C7   		movq	%rax, %rdi
 1081 053e E8000000 		call	_ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE
 1081      00
 1082              	.LEHE24:
 1083              	.L52:
 1084              	.LEHB25:
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1085              		.loc 4 40 0 is_stmt 1
 1086 0543 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1086      00
 1087 0548 488B08   		movq	(%rax), %rcx
 1088 054b 488D45D0 		leaq	-48(%rbp), %rax
 1089 054f BA280000 		movl	$40, %edx
 1089      00
 1090 0554 4889CE   		movq	%rcx, %rsi
 1091 0557 4889C7   		movq	%rax, %rdi
 1092 055a E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1092      00
 1093              		.loc 4 40 0 is_stmt 0 discriminator 1
 1094 055f 8B050000 		movl	.LC15(%rip), %eax
 1094      0000
 1095 0565 8945CC   		movl	%eax, -52(%rbp)
 1096 0568 8B050000 		movl	.LC17(%rip), %eax
 1096      0000
 1097 056e 8945C8   		movl	%eax, -56(%rbp)
 1098 0571 8B050000 		movl	.LC16(%rip), %eax
 1098      0000
 1099 0577 8945C4   		movl	%eax, -60(%rbp)
 1100 057a E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1100      00
 1101 057f 488B00   		movq	(%rax), %rax
 1102 0582 488D7DD0 		leaq	-48(%rbp), %rdi
 1103 0586 488D4DCC 		leaq	-52(%rbp), %rcx
 1104 058a 488D55C8 		leaq	-56(%rbp), %rdx
 1105 058e 488D75C4 		leaq	-60(%rbp), %rsi
 1106 0592 4989F8   		movq	%rdi, %r8
 1107 0595 4889C7   		movq	%rax, %rdi
 1108 0598 E8000000 		call	_ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE
 1108      00
 1109              	.LEHE25:
  41:TestUnitTest++.cpp **** }
 1110              		.loc 4 41 0 is_stmt 1
 1111 059d E9B50000 		jmp	.L60
 1111      00
 1112              	.L57:
 1113 05a2 4889C3   		movq	%rax, %rbx
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1114              		.loc 4 39 0
 1115 05a5 E8000000 		call	__cxa_end_catch
 1115      00
 1116 05aa 4889D8   		movq	%rbx, %rax
 1117 05ad 4889C7   		movq	%rax, %rdi
 1118              	.LEHB26:
 1119 05b0 E8000000 		call	_Unwind_Resume
 1119      00
 1120              	.LEHE26:
 1121              	.L56:
 1122 05b5 4889C7   		movq	%rax, %rdi
 1123 05b8 E8000000 		call	__cxa_begin_catch
 1123      00
 1124              	.LEHB27:
 1125 05bd E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1125      00
 1126 05c2 488B08   		movq	(%rax), %rcx
 1127 05c5 488D45D0 		leaq	-48(%rbp), %rax
 1128 05c9 BA270000 		movl	$39, %edx
 1128      00
 1129 05ce 4889CE   		movq	%rcx, %rsi
 1130 05d1 4889C7   		movq	%rax, %rdi
 1131 05d4 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1131      00
  39:TestUnitTest++.cpp ****     CHECK_CLOSE(2.0f, 2.001f, 0.01f);
 1132              		.loc 4 39 0 is_stmt 0 discriminator 1
 1133 05d9 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1133      00
 1134 05de 488B00   		movq	(%rax), %rax
 1135 05e1 488D4DD0 		leaq	-48(%rbp), %rcx
 1136 05e5 BA000000 		movl	$.LC18, %edx
 1136      00
 1137 05ea 4889CE   		movq	%rcx, %rsi
 1138 05ed 4889C7   		movq	%rax, %rdi
 1139 05f0 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 1139      00
 1140              	.LEHE27:
 1141              	.LEHB28:
 1142 05f5 E8000000 		call	__cxa_end_catch
 1142      00
 1143              	.LEHE28:
 1144 05fa E944FFFF 		jmp	.L52
 1144      FF
 1145              	.L59:
 1146 05ff 4889C3   		movq	%rax, %rbx
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1147              		.loc 4 40 0 is_stmt 1
 1148 0602 E8000000 		call	__cxa_end_catch
 1148      00
 1149 0607 4889D8   		movq	%rbx, %rax
 1150 060a 4889C7   		movq	%rax, %rdi
 1151              	.LEHB29:
 1152 060d E8000000 		call	_Unwind_Resume
 1152      00
 1153              	.LEHE29:
 1154              	.L58:
 1155 0612 4889C7   		movq	%rax, %rdi
 1156 0615 E8000000 		call	__cxa_begin_catch
 1156      00
 1157              	.LEHB30:
 1158 061a E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1158      00
 1159 061f 488B08   		movq	(%rax), %rcx
 1160 0622 488D45D0 		leaq	-48(%rbp), %rax
 1161 0626 BA280000 		movl	$40, %edx
 1161      00
 1162 062b 4889CE   		movq	%rcx, %rsi
 1163 062e 4889C7   		movq	%rax, %rdi
 1164 0631 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1164      00
  40:TestUnitTest++.cpp ****     CHECK_CLOSE(2.001f, 2.0f, 0.01f);
 1165              		.loc 4 40 0 is_stmt 0 discriminator 1
 1166 0636 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1166      00
 1167 063b 488B00   		movq	(%rax), %rax
 1168 063e 488D4DD0 		leaq	-48(%rbp), %rcx
 1169 0642 BA000000 		movl	$.LC19, %edx
 1169      00
 1170 0647 4889CE   		movq	%rcx, %rsi
 1171 064a 4889C7   		movq	%rax, %rdi
 1172 064d E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 1172      00
 1173              	.LEHE30:
 1174              	.LEHB31:
 1175 0652 E8000000 		call	__cxa_end_catch
 1175      00
 1176              	.LEHE31:
 1177              	.L60:
 1178              		.loc 4 41 0 is_stmt 1
 1179 0657 90       		nop
 1180 0658 4883C448 		addq	$72, %rsp
 1181 065c 5B       		popq	%rbx
 1182 065d 5D       		popq	%rbp
 1183              		.cfi_def_cfa 7, 8
 1184 065e C3       		ret
 1185              		.cfi_endproc
 1186              	.LFE1308:
 1187              		.section	.gcc_except_table
 1188              		.align 4
 1189              	.LLSDA1308:
 1190 008c FF       		.byte	0xff
 1191 008d 03       		.byte	0x3
 1192 008e 35       		.uleb128 .LLSDATT1308-.LLSDATTD1308
 1193              	.LLSDATTD1308:
 1194 008f 01       		.byte	0x1
 1195 0090 2A       		.uleb128 .LLSDACSE1308-.LLSDACSB1308
 1196              	.LLSDACSB1308:
 1197 0091 0D       		.uleb128 .LEHB24-.LFB1308
 1198 0092 5A       		.uleb128 .LEHE24-.LEHB24
 1199 0093 D901     		.uleb128 .L56-.LFB1308
 1200 0095 01       		.uleb128 0x1
 1201 0096 67       		.uleb128 .LEHB25-.LFB1308
 1202 0097 5A       		.uleb128 .LEHE25-.LEHB25
 1203 0098 B602     		.uleb128 .L58-.LFB1308
 1204 009a 01       		.uleb128 0x1
 1205 009b D401     		.uleb128 .LEHB26-.LFB1308
 1206 009d 05       		.uleb128 .LEHE26-.LEHB26
 1207 009e 00       		.uleb128 0
 1208 009f 00       		.uleb128 0
 1209 00a0 E101     		.uleb128 .LEHB27-.LFB1308
 1210 00a2 38       		.uleb128 .LEHE27-.LEHB27
 1211 00a3 C601     		.uleb128 .L57-.LFB1308
 1212 00a5 00       		.uleb128 0
 1213 00a6 9902     		.uleb128 .LEHB28-.LFB1308
 1214 00a8 05       		.uleb128 .LEHE28-.LEHB28
 1215 00a9 00       		.uleb128 0
 1216 00aa 00       		.uleb128 0
 1217 00ab B102     		.uleb128 .LEHB29-.LFB1308
 1218 00ad 05       		.uleb128 .LEHE29-.LEHB29
 1219 00ae 00       		.uleb128 0
 1220 00af 00       		.uleb128 0
 1221 00b0 BE02     		.uleb128 .LEHB30-.LFB1308
 1222 00b2 38       		.uleb128 .LEHE30-.LEHB30
 1223 00b3 A302     		.uleb128 .L59-.LFB1308
 1224 00b5 00       		.uleb128 0
 1225 00b6 F602     		.uleb128 .LEHB31-.LFB1308
 1226 00b8 05       		.uleb128 .LEHE31-.LEHB31
 1227 00b9 00       		.uleb128 0
 1228 00ba 00       		.uleb128 0
 1229              	.LLSDACSE1308:
 1230 00bb 01       		.byte	0x1
 1231 00bc 00       		.byte	0
 1232 00bd 000000   		.align 4
 1233 00c0 00000000 		.long	0
 1234              	
 1235              	.LLSDATT1308:
 1236              		.text
 1238              		.section	.rodata
 1239              	.LC20:
 1240 01d1 41727261 		.string	"ArrayCloseSucceeds"
 1240      79436C6F 
 1240      73655375 
 1240      63636565 
 1240      647300
 1241              		.text
 1242 065f 90       		.align 2
 1244              	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsC2Ev:
 1245              	.LFB1310:
  42:TestUnitTest++.cpp **** 
  43:TestUnitTest++.cpp **** TEST(ArrayCloseSucceeds)
 1246              		.loc 4 43 0
 1247              		.cfi_startproc
 1248 0660 55       		pushq	%rbp
 1249              		.cfi_def_cfa_offset 16
 1250              		.cfi_offset 6, -16
 1251 0661 4889E5   		movq	%rsp, %rbp
 1252              		.cfi_def_cfa_register 6
 1253 0664 4883EC10 		subq	$16, %rsp
 1254 0668 48897DF8 		movq	%rdi, -8(%rbp)
 1255              	.LBB17:
 1256              		.loc 4 43 0
 1257 066c E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1257      00
 1258 0671 4889C2   		movq	%rax, %rdx
 1259 0674 488B45F8 		movq	-8(%rbp), %rax
 1260 0678 41B82B00 		movl	$43, %r8d
 1260      0000
 1261 067e B9000000 		movl	$.LC1, %ecx
 1261      00
 1262 0683 BE000000 		movl	$.LC20, %esi
 1262      00
 1263 0688 4889C7   		movq	%rax, %rdi
 1264 068b E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 1264      00
 1265 0690 488B45F8 		movq	-8(%rbp), %rax
 1266 0694 48C70000 		movq	$_ZTVN12_GLOBAL__N_122TestArrayCloseSucceedsE+16, (%rax)
 1266      000000
 1267              	.LBE17:
 1268 069b C9       		leave
 1269              		.cfi_def_cfa 7, 8
 1270 069c C3       		ret
 1271              		.cfi_endproc
 1272              	.LFE1310:
 1274              		.set	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsC1Ev,_ZN12_GLOBAL__N_122TestArrayCloseSucceedsC2Ev
 1275              		.local	_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE
 1276              		.comm	_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE,56,32
 1277              		.local	_ZN12_GLOBAL__N_123adderArrayCloseSucceedsE
 1278              		.comm	_ZN12_GLOBAL__N_123adderArrayCloseSucceedsE,1,1
 1279              		.section	.rodata
 1280 01e4 00000000 		.align 8
 1281              	.LC25:
 1282 01e8 556E6861 		.string	"Unhandled exception in CHECK_ARRAY_CLOSE(a1, a2)"
 1282      6E646C65 
 1282      64206578 
 1282      63657074 
 1282      696F6E20 
 1283              		.text
 1284 069d 90       		.align 2
 1286              	_ZNK12_GLOBAL__N_122TestArrayCloseSucceeds7RunImplEv:
 1287              	.LFB1312:
  44:TestUnitTest++.cpp **** {
 1288              		.loc 4 44 0
 1289              		.cfi_startproc
 1290              		.cfi_personality 0x3,__gxx_personality_v0
 1291              		.cfi_lsda 0x3,.LLSDA1312
 1292 069e 55       		pushq	%rbp
 1293              		.cfi_def_cfa_offset 16
 1294              		.cfi_offset 6, -16
 1295 069f 4889E5   		movq	%rsp, %rbp
 1296              		.cfi_def_cfa_register 6
 1297 06a2 53       		pushq	%rbx
 1298 06a3 4883EC68 		subq	$104, %rsp
 1299              		.cfi_offset 3, -24
 1300 06a7 48897D98 		movq	%rdi, -104(%rbp)
 1301              	.LBB18:
  45:TestUnitTest++.cpp ****     float const a1[] = {1, 2, 3};
 1302              		.loc 4 45 0
 1303 06ab 8B050000 		movl	.LC21(%rip), %eax
 1303      0000
 1304 06b1 8945B0   		movl	%eax, -80(%rbp)
 1305 06b4 8B050000 		movl	.LC17(%rip), %eax
 1305      0000
 1306 06ba 8945B4   		movl	%eax, -76(%rbp)
 1307 06bd 8B050000 		movl	.LC22(%rip), %eax
 1307      0000
 1308 06c3 8945B8   		movl	%eax, -72(%rbp)
  46:TestUnitTest++.cpp ****     float const a2[] = {1, 2.01f, 3};
 1309              		.loc 4 46 0
 1310 06c6 8B050000 		movl	.LC21(%rip), %eax
 1310      0000
 1311 06cc 8945C0   		movl	%eax, -64(%rbp)
 1312 06cf 8B050000 		movl	.LC23(%rip), %eax
 1312      0000
 1313 06d5 8945C4   		movl	%eax, -60(%rbp)
 1314 06d8 8B050000 		movl	.LC22(%rip), %eax
 1314      0000
 1315 06de 8945C8   		movl	%eax, -56(%rbp)
 1316              	.LEHB32:
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1317              		.loc 4 47 0
 1318 06e1 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1318      00
 1319 06e6 488B08   		movq	(%rax), %rcx
 1320 06e9 488D45D0 		leaq	-48(%rbp), %rax
 1321 06ed BA2F0000 		movl	$47, %edx
 1321      00
 1322 06f2 4889CE   		movq	%rcx, %rsi
 1323 06f5 4889C7   		movq	%rax, %rdi
 1324 06f8 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1324      00
 1325              		.loc 4 47 0 is_stmt 0 discriminator 1
 1326 06fd 8B050000 		movl	.LC24(%rip), %eax
 1326      0000
 1327 0703 8945AC   		movl	%eax, -84(%rbp)
 1328 0706 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1328      00
 1329 070b 488B00   		movq	(%rax), %rax
 1330 070e 488D7DD0 		leaq	-48(%rbp), %rdi
 1331 0712 488D4DAC 		leaq	-84(%rbp), %rcx
 1332 0716 488D55C0 		leaq	-64(%rbp), %rdx
 1333 071a 488D75B0 		leaq	-80(%rbp), %rsi
 1334 071e 4989F9   		movq	%rdi, %r9
 1335 0721 4989C8   		movq	%rcx, %r8
 1336 0724 B9030000 		movl	$3, %ecx
 1336      00
 1337 0729 4889C7   		movq	%rax, %rdi
 1338 072c E8000000 		call	_ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE
 1338      00
 1339              	.LEHE32:
 1340              	.LBE18:
  48:TestUnitTest++.cpp **** }
 1341              		.loc 4 48 0 is_stmt 1
 1342 0731 EB58     		jmp	.L68
 1343              	.L67:
 1344 0733 4889C3   		movq	%rax, %rbx
 1345              	.LBB19:
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1346              		.loc 4 47 0
 1347 0736 E8000000 		call	__cxa_end_catch
 1347      00
 1348 073b 4889D8   		movq	%rbx, %rax
 1349 073e 4889C7   		movq	%rax, %rdi
 1350              	.LEHB33:
 1351 0741 E8000000 		call	_Unwind_Resume
 1351      00
 1352              	.LEHE33:
 1353              	.L66:
 1354 0746 4889C7   		movq	%rax, %rdi
 1355 0749 E8000000 		call	__cxa_begin_catch
 1355      00
 1356              	.LEHB34:
 1357 074e E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1357      00
 1358 0753 488B08   		movq	(%rax), %rcx
 1359 0756 488D45D0 		leaq	-48(%rbp), %rax
 1360 075a BA2F0000 		movl	$47, %edx
 1360      00
 1361 075f 4889CE   		movq	%rcx, %rsi
 1362 0762 4889C7   		movq	%rax, %rdi
 1363 0765 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1363      00
  47:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a1, a2, 3, 0.1f);
 1364              		.loc 4 47 0 is_stmt 0 discriminator 1
 1365 076a E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1365      00
 1366 076f 488B00   		movq	(%rax), %rax
 1367 0772 488D4DD0 		leaq	-48(%rbp), %rcx
 1368 0776 BA000000 		movl	$.LC25, %edx
 1368      00
 1369 077b 4889CE   		movq	%rcx, %rsi
 1370 077e 4889C7   		movq	%rax, %rdi
 1371 0781 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 1371      00
 1372              	.LEHE34:
 1373              	.LEHB35:
 1374 0786 E8000000 		call	__cxa_end_catch
 1374      00
 1375              	.LEHE35:
 1376              	.L68:
 1377              	.LBE19:
 1378              		.loc 4 48 0 is_stmt 1
 1379 078b 90       		nop
 1380 078c 4883C468 		addq	$104, %rsp
 1381 0790 5B       		popq	%rbx
 1382 0791 5D       		popq	%rbp
 1383              		.cfi_def_cfa 7, 8
 1384 0792 C3       		ret
 1385              		.cfi_endproc
 1386              	.LFE1312:
 1387              		.section	.gcc_except_table
 1388              		.align 4
 1389              	.LLSDA1312:
 1390 00c4 FF       		.byte	0xff
 1391 00c5 03       		.byte	0x3
 1392 00c6 1D       		.uleb128 .LLSDATT1312-.LLSDATTD1312
 1393              	.LLSDATTD1312:
 1394 00c7 01       		.byte	0x1
 1395 00c8 15       		.uleb128 .LLSDACSE1312-.LLSDACSB1312
 1396              	.LLSDACSB1312:
 1397 00c9 43       		.uleb128 .LEHB32-.LFB1312
 1398 00ca 50       		.uleb128 .LEHE32-.LEHB32
 1399 00cb A801     		.uleb128 .L66-.LFB1312
 1400 00cd 01       		.uleb128 0x1
 1401 00ce A301     		.uleb128 .LEHB33-.LFB1312
 1402 00d0 05       		.uleb128 .LEHE33-.LEHB33
 1403 00d1 00       		.uleb128 0
 1404 00d2 00       		.uleb128 0
 1405 00d3 B001     		.uleb128 .LEHB34-.LFB1312
 1406 00d5 38       		.uleb128 .LEHE34-.LEHB34
 1407 00d6 9501     		.uleb128 .L67-.LFB1312
 1408 00d8 00       		.uleb128 0
 1409 00d9 E801     		.uleb128 .LEHB35-.LFB1312
 1410 00db 05       		.uleb128 .LEHE35-.LEHB35
 1411 00dc 00       		.uleb128 0
 1412 00dd 00       		.uleb128 0
 1413              	.LLSDACSE1312:
 1414 00de 01       		.byte	0x1
 1415 00df 00       		.byte	0
 1416              		.align 4
 1417 00e0 00000000 		.long	0
 1418              	
 1419              	.LLSDATT1312:
 1420              		.text
 1422              		.section	.rodata
 1423 0219 00000000 		.align 8
 1423      000000
 1424              	.LC26:
 1425 0220 43686563 		.string	"CheckArrayCloseWorksWithVectors"
 1425      6B417272 
 1425      6179436C 
 1425      6F736557 
 1425      6F726B73 
 1426              		.text
 1427 0793 90       		.align 2
 1429              	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC2Ev:
 1430              	.LFB1314:
  49:TestUnitTest++.cpp **** 
  50:TestUnitTest++.cpp **** TEST (CheckArrayCloseWorksWithVectors)
 1431              		.loc 4 50 0
 1432              		.cfi_startproc
 1433 0794 55       		pushq	%rbp
 1434              		.cfi_def_cfa_offset 16
 1435              		.cfi_offset 6, -16
 1436 0795 4889E5   		movq	%rsp, %rbp
 1437              		.cfi_def_cfa_register 6
 1438 0798 4883EC10 		subq	$16, %rsp
 1439 079c 48897DF8 		movq	%rdi, -8(%rbp)
 1440              	.LBB20:
 1441              		.loc 4 50 0
 1442 07a0 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1442      00
 1443 07a5 4889C2   		movq	%rax, %rdx
 1444 07a8 488B45F8 		movq	-8(%rbp), %rax
 1445 07ac 41B83200 		movl	$50, %r8d
 1445      0000
 1446 07b2 B9000000 		movl	$.LC1, %ecx
 1446      00
 1447 07b7 BE000000 		movl	$.LC26, %esi
 1447      00
 1448 07bc 4889C7   		movq	%rax, %rdi
 1449 07bf E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 1449      00
 1450 07c4 488B45F8 		movq	-8(%rbp), %rax
 1451 07c8 48C70000 		movq	$_ZTVN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE+16, (%rax)
 1451      000000
 1452              	.LBE20:
 1453 07cf C9       		leave
 1454              		.cfi_def_cfa 7, 8
 1455 07d0 C3       		ret
 1456              		.cfi_endproc
 1457              	.LFE1314:
 1459              		.set	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC1Ev,_ZN12_GLOBAL__N_135TestCheckArrayC
 1460              		.local	_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE
 1461              		.comm	_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE,56,32
 1462              		.local	_ZN12_GLOBAL__N_136adderCheckArrayCloseWorksWithVectorsE
 1463              		.comm	_ZN12_GLOBAL__N_136adderCheckArrayCloseWorksWithVectorsE,1,1
 1464              		.section	.rodata
 1465              		.align 8
 1466              	.LC29:
 1467 0240 556E6861 		.string	"Unhandled exception in CHECK_ARRAY_CLOSE(a, a)"
 1467      6E646C65 
 1467      64206578 
 1467      63657074 
 1467      696F6E20 
 1468              		.text
 1469 07d1 90       		.align 2
 1471              	_ZNK12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectors7RunImplEv:
 1472              	.LFB1316:
  51:TestUnitTest++.cpp **** {
 1473              		.loc 4 51 0
 1474              		.cfi_startproc
 1475              		.cfi_personality 0x3,__gxx_personality_v0
 1476              		.cfi_lsda 0x3,.LLSDA1316
 1477 07d2 55       		pushq	%rbp
 1478              		.cfi_def_cfa_offset 16
 1479              		.cfi_offset 6, -16
 1480 07d3 4889E5   		movq	%rsp, %rbp
 1481              		.cfi_def_cfa_register 6
 1482 07d6 53       		pushq	%rbx
 1483 07d7 4883EC68 		subq	$104, %rsp
 1484              		.cfi_offset 3, -24
 1485 07db 48897D98 		movq	%rdi, -104(%rbp)
 1486              	.LBB21:
  52:TestUnitTest++.cpp ****     std::vector< float > a(4);
 1487              		.loc 4 52 0
 1488 07df 488D45A8 		leaq	-88(%rbp), %rax
 1489 07e3 4889C7   		movq	%rax, %rdi
 1490 07e6 E8000000 		call	_ZNSaIfEC1Ev
 1490      00
 1491 07eb 8B050000 		movl	.LC27(%rip), %eax
 1491      0000
 1492 07f1 8945D0   		movl	%eax, -48(%rbp)
 1493 07f4 488D4DA8 		leaq	-88(%rbp), %rcx
 1494 07f8 488D55D0 		leaq	-48(%rbp), %rdx
 1495 07fc 488D45B0 		leaq	-80(%rbp), %rax
 1496 0800 BE040000 		movl	$4, %esi
 1496      00
 1497 0805 4889C7   		movq	%rax, %rdi
 1498              	.LEHB36:
 1499 0808 E8000000 		call	_ZNSt6vectorIfSaIfEEC1EmRKfRKS0_
 1499      00
 1500              	.LEHE36:
 1501              		.loc 4 52 0 is_stmt 0 discriminator 1
 1502 080d 488D45A8 		leaq	-88(%rbp), %rax
 1503 0811 4889C7   		movq	%rax, %rdi
 1504 0814 E8000000 		call	_ZNSaIfED1Ev
 1504      00
 1505              	.LBB22:
  53:TestUnitTest++.cpp ****     for (int i = 0; i < 4; ++i)
 1506              		.loc 4 53 0 is_stmt 1 discriminator 1
 1507 0819 C745AC00 		movl	$0, -84(%rbp)
 1507      000000
 1508 0820 EB22     		jmp	.L71
 1509              	.L72:
  54:TestUnitTest++.cpp ****         a[i] = (float)i;
 1510              		.loc 4 54 0 discriminator 2
 1511 0822 8B45AC   		movl	-84(%rbp), %eax
 1512 0825 4863D0   		movslq	%eax, %rdx
 1513 0828 488D45B0 		leaq	-80(%rbp), %rax
 1514 082c 4889D6   		movq	%rdx, %rsi
 1515 082f 4889C7   		movq	%rax, %rdi
 1516 0832 E8000000 		call	_ZNSt6vectorIfSaIfEEixEm
 1516      00
 1517 0837 F30F2A45 		cvtsi2ss	-84(%rbp), %xmm0
 1517      AC
 1518 083c F30F1100 		movss	%xmm0, (%rax)
  53:TestUnitTest++.cpp ****     for (int i = 0; i < 4; ++i)
 1519              		.loc 4 53 0 discriminator 2
 1520 0840 8345AC01 		addl	$1, -84(%rbp)
 1521              	.L71:
  53:TestUnitTest++.cpp ****     for (int i = 0; i < 4; ++i)
 1522              		.loc 4 53 0 is_stmt 0 discriminator 1
 1523 0844 837DAC03 		cmpl	$3, -84(%rbp)
 1524 0848 7ED8     		jle	.L72
 1525              	.LEHB37:
 1526              	.LBE22:
  55:TestUnitTest++.cpp **** 
  56:TestUnitTest++.cpp ****     CHECK_ARRAY_CLOSE(a, a, (int)a.size(), 0.0001f);
 1527              		.loc 4 56 0 is_stmt 1
 1528 084a E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1528      00
 1529 084f 488B08   		movq	(%rax), %rcx
 1530 0852 488D45D0 		leaq	-48(%rbp), %rax
 1531 0856 BA380000 		movl	$56, %edx
 1531      00
 1532 085b 4889CE   		movq	%rcx, %rsi
 1533 085e 4889C7   		movq	%rax, %rdi
 1534 0861 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1534      00
 1535              		.loc 4 56 0 is_stmt 0 discriminator 1
 1536 0866 8B050000 		movl	.LC28(%rip), %eax
 1536      0000
 1537 086c 8945A8   		movl	%eax, -88(%rbp)
 1538 086f 488D45B0 		leaq	-80(%rbp), %rax
 1539 0873 4889C7   		movq	%rax, %rdi
 1540 0876 E8000000 		call	_ZNKSt6vectorIfSaIfEE4sizeEv
 1540      00
 1541 087b 89C3     		movl	%eax, %ebx
 1542 087d E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1542      00
 1543 0882 488B00   		movq	(%rax), %rax
 1544 0885 488D7DD0 		leaq	-48(%rbp), %rdi
 1545 0889 488D4DA8 		leaq	-88(%rbp), %rcx
 1546 088d 488D55B0 		leaq	-80(%rbp), %rdx
 1547 0891 488D75B0 		leaq	-80(%rbp), %rsi
 1548 0895 4989F9   		movq	%rdi, %r9
 1549 0898 4989C8   		movq	%rcx, %r8
 1550 089b 89D9     		movl	%ebx, %ecx
 1551 089d 4889C7   		movq	%rax, %rdi
 1552 08a0 E8000000 		call	_ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_1
 1552      00
 1553              	.LEHE37:
 1554              	.L77:
 1555              		.loc 4 56 0 discriminator 2
 1556 08a5 488D45B0 		leaq	-80(%rbp), %rax
 1557 08a9 4889C7   		movq	%rax, %rdi
 1558              	.LEHB38:
 1559 08ac E8000000 		call	_ZNSt6vectorIfSaIfEED1Ev
 1559      00
 1560 08b1 E9850000 		jmp	.L82
 1560      00
 1561              	.L78:
 1562 08b6 4889C3   		movq	%rax, %rbx
 1563 08b9 488D45A8 		leaq	-88(%rbp), %rax
 1564 08bd 4889C7   		movq	%rax, %rdi
 1565 08c0 E8000000 		call	_ZNSaIfED1Ev
 1565      00
 1566 08c5 4889D8   		movq	%rbx, %rax
 1567 08c8 4889C7   		movq	%rax, %rdi
 1568 08cb E8000000 		call	_Unwind_Resume
 1568      00
 1569              	.LEHE38:
 1570              	.L81:
 1571 08d0 4889C3   		movq	%rax, %rbx
 1572              		.loc 4 56 0
 1573 08d3 E8000000 		call	__cxa_end_catch
 1573      00
 1574 08d8 EB4A     		jmp	.L75
 1575              	.L79:
 1576 08da 4889C7   		movq	%rax, %rdi
 1577 08dd E8000000 		call	__cxa_begin_catch
 1577      00
 1578              	.LEHB39:
 1579 08e2 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1579      00
 1580 08e7 488B08   		movq	(%rax), %rcx
 1581 08ea 488D45D0 		leaq	-48(%rbp), %rax
 1582 08ee BA380000 		movl	$56, %edx
 1582      00
 1583 08f3 4889CE   		movq	%rcx, %rsi
 1584 08f6 4889C7   		movq	%rax, %rdi
 1585 08f9 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1585      00
 1586              		.loc 4 56 0 discriminator 1
 1587 08fe E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1587      00
 1588 0903 488B00   		movq	(%rax), %rax
 1589 0906 488D4DD0 		leaq	-48(%rbp), %rcx
 1590 090a BA000000 		movl	$.LC29, %edx
 1590      00
 1591 090f 4889CE   		movq	%rcx, %rsi
 1592 0912 4889C7   		movq	%rax, %rdi
 1593 0915 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 1593      00
 1594              	.LEHE39:
 1595              	.LEHB40:
 1596 091a E8000000 		call	__cxa_end_catch
 1596      00
 1597              	.LEHE40:
 1598              		.loc 4 56 0
 1599 091f EB84     		jmp	.L77
 1600              	.L80:
 1601 0921 4889C3   		movq	%rax, %rbx
 1602              	.L75:
 1603 0924 488D45B0 		leaq	-80(%rbp), %rax
 1604 0928 4889C7   		movq	%rax, %rdi
 1605 092b E8000000 		call	_ZNSt6vectorIfSaIfEED1Ev
 1605      00
 1606 0930 4889D8   		movq	%rbx, %rax
 1607 0933 4889C7   		movq	%rax, %rdi
 1608              	.LEHB41:
 1609 0936 E8000000 		call	_Unwind_Resume
 1609      00
 1610              	.LEHE41:
 1611              	.L82:
 1612              	.LBE21:
  57:TestUnitTest++.cpp **** }
 1613              		.loc 4 57 0 is_stmt 1
 1614 093b 4883C468 		addq	$104, %rsp
 1615 093f 5B       		popq	%rbx
 1616 0940 5D       		popq	%rbp
 1617              		.cfi_def_cfa 7, 8
 1618 0941 C3       		ret
 1619              		.cfi_endproc
 1620              	.LFE1316:
 1621              		.section	.gcc_except_table
 1622              		.align 4
 1623              	.LLSDA1316:
 1624 00e4 FF       		.byte	0xff
 1625 00e5 03       		.byte	0x3
 1626 00e6 29       		.uleb128 .LLSDATT1316-.LLSDATTD1316
 1627              	.LLSDATTD1316:
 1628 00e7 01       		.byte	0x1
 1629 00e8 20       		.uleb128 .LLSDACSE1316-.LLSDACSB1316
 1630              	.LLSDACSB1316:
 1631 00e9 36       		.uleb128 .LEHB36-.LFB1316
 1632 00ea 05       		.uleb128 .LEHE36-.LEHB36
 1633 00eb E401     		.uleb128 .L78-.LFB1316
 1634 00ed 00       		.uleb128 0
 1635 00ee 78       		.uleb128 .LEHB37-.LFB1316
 1636 00ef 5B       		.uleb128 .LEHE37-.LEHB37
 1637 00f0 8802     		.uleb128 .L79-.LFB1316
 1638 00f2 01       		.uleb128 0x1
 1639 00f3 DA01     		.uleb128 .LEHB38-.LFB1316
 1640 00f5 24       		.uleb128 .LEHE38-.LEHB38
 1641 00f6 00       		.uleb128 0
 1642 00f7 00       		.uleb128 0
 1643 00f8 9002     		.uleb128 .LEHB39-.LFB1316
 1644 00fa 38       		.uleb128 .LEHE39-.LEHB39
 1645 00fb FE01     		.uleb128 .L81-.LFB1316
 1646 00fd 00       		.uleb128 0
 1647 00fe C802     		.uleb128 .LEHB40-.LFB1316
 1648 0100 05       		.uleb128 .LEHE40-.LEHB40
 1649 0101 CF02     		.uleb128 .L80-.LFB1316
 1650 0103 00       		.uleb128 0
 1651 0104 E402     		.uleb128 .LEHB41-.LFB1316
 1652 0106 05       		.uleb128 .LEHE41-.LEHB41
 1653 0107 00       		.uleb128 0
 1654 0108 00       		.uleb128 0
 1655              	.LLSDACSE1316:
 1656 0109 01       		.byte	0x1
 1657 010a 00       		.byte	0
 1658 010b 00       		.align 4
 1659 010c 00000000 		.long	0
 1660              	
 1661              	.LLSDATT1316:
 1662              		.text
 1664              		.section	.rodata
 1665 026f 00       		.align 8
 1666              	.LC30:
 1667 0270 43686563 		.string	"CheckThrowMacroSucceedsOnCorrectException"
 1667      6B546872 
 1667      6F774D61 
 1667      63726F53 
 1667      75636365 
 1668              		.text
 1669              		.align 2
 1671              	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC2Ev:
 1672              	.LFB1318:
  58:TestUnitTest++.cpp **** 
  59:TestUnitTest++.cpp **** TEST(CheckThrowMacroSucceedsOnCorrectException)
 1673              		.loc 4 59 0
 1674              		.cfi_startproc
 1675 0942 55       		pushq	%rbp
 1676              		.cfi_def_cfa_offset 16
 1677              		.cfi_offset 6, -16
 1678 0943 4889E5   		movq	%rsp, %rbp
 1679              		.cfi_def_cfa_register 6
 1680 0946 4883EC10 		subq	$16, %rsp
 1681 094a 48897DF8 		movq	%rdi, -8(%rbp)
 1682              	.LBB23:
 1683              		.loc 4 59 0
 1684 094e E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1684      00
 1685 0953 4889C2   		movq	%rax, %rdx
 1686 0956 488B45F8 		movq	-8(%rbp), %rax
 1687 095a 41B83B00 		movl	$59, %r8d
 1687      0000
 1688 0960 B9000000 		movl	$.LC1, %ecx
 1688      00
 1689 0965 BE000000 		movl	$.LC30, %esi
 1689      00
 1690 096a 4889C7   		movq	%rax, %rdi
 1691 096d E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 1691      00
 1692 0972 488B45F8 		movq	-8(%rbp), %rax
 1693 0976 48C70000 		movq	$_ZTVN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE+16, (%rax)
 1693      000000
 1694              	.LBE23:
 1695 097d C9       		leave
 1696              		.cfi_def_cfa 7, 8
 1697 097e C3       		ret
 1698              		.cfi_endproc
 1699              	.LFE1318:
 1701              		.set	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC1Ev,_ZN12_GLOBAL__N_145TestC
 1702              		.local	_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE
 1703              		.comm	_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE,56,32
 1704              		.local	_ZN12_GLOBAL__N_146adderCheckThrowMacroSucceedsOnCorrectExceptionE
 1705              		.comm	_ZN12_GLOBAL__N_146adderCheckThrowMacroSucceedsOnCorrectExceptionE,1,1
 1706              		.section	.rodata
 1707 029a 00000000 		.align 8
 1707      0000
 1708              	.LC31:
 1709 02a0 45787065 		.string	"Expected exception: \"TestException\" not thrown"
 1709      63746564 
 1709      20657863 
 1709      65707469 
 1709      6F6E3A20 
 1710              		.text
 1711 097f 90       		.align 2
 1713              	_ZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEv:
 1714              	.LFB1320:
  60:TestUnitTest++.cpp **** {
 1715              		.loc 4 60 0
 1716              		.cfi_startproc
 1717              		.cfi_personality 0x3,__gxx_personality_v0
 1718              		.cfi_lsda 0x3,.LLSDA1320
 1719 0980 55       		pushq	%rbp
 1720              		.cfi_def_cfa_offset 16
 1721              		.cfi_offset 6, -16
 1722 0981 4889E5   		movq	%rsp, %rbp
 1723              		.cfi_def_cfa_register 6
 1724 0984 4883EC40 		subq	$64, %rsp
 1725 0988 48897DC8 		movq	%rdi, -56(%rbp)
 1726              	.LBB24:
 1727              	.LBB25:
  61:TestUnitTest++.cpp ****     struct TestException {};
  62:TestUnitTest++.cpp ****     CHECK_THROW(throw TestException(), TestException);
 1728              		.loc 4 62 0
 1729 098c C645D700 		movb	$0, -41(%rbp)
 1730 0990 BF010000 		movl	$1, %edi
 1730      00
 1731 0995 E8000000 		call	__cxa_allocate_exception
 1731      00
 1732 099a BA000000 		movl	$0, %edx
 1732      00
 1733 099f BE000000 		movl	$_ZTIZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestExcepti
 1733      00
 1734 09a4 4889C7   		movq	%rax, %rdi
 1735              	.LEHB42:
 1736 09a7 E8000000 		call	__cxa_throw
 1736      00
 1737              	.LEHE42:
 1738              	.L89:
 1739 09ac 0FB645D7 		movzbl	-41(%rbp), %eax
 1740 09b0 83F001   		xorl	$1, %eax
 1741 09b3 84C0     		testb	%al, %al
 1742 09b5 7466     		je	.L91
 1743              	.LEHB43:
 1744              		.loc 4 62 0 is_stmt 0 discriminator 1
 1745 09b7 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1745      00
 1746 09bc 488B08   		movq	(%rax), %rcx
 1747 09bf 488D45E0 		leaq	-32(%rbp), %rax
 1748 09c3 BA3E0000 		movl	$62, %edx
 1748      00
 1749 09c8 4889CE   		movq	%rcx, %rsi
 1750 09cb 4889C7   		movq	%rax, %rdi
 1751 09ce E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1751      00
 1752 09d3 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1752      00
 1753 09d8 488B00   		movq	(%rax), %rax
 1754 09db 488D4DE0 		leaq	-32(%rbp), %rcx
 1755 09df BA000000 		movl	$.LC31, %edx
 1755      00
 1756 09e4 4889CE   		movq	%rcx, %rsi
 1757 09e7 4889C7   		movq	%rax, %rdi
 1758 09ea E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 1758      00
 1759 09ef EB2C     		jmp	.L91
 1760              	.L90:
 1761 09f1 4883FA01 		cmpq	$1, %rdx
 1762 09f5 7517     		jne	.L92
 1763              	.LBB26:
 1764              		.loc 4 62 0
 1765 09f7 4889C7   		movq	%rax, %rdi
 1766 09fa E8000000 		call	__cxa_begin_catch
 1766      00
 1767 09ff 488945D8 		movq	%rax, -40(%rbp)
 1768 0a03 C645D701 		movb	$1, -41(%rbp)
 1769 0a07 E8000000 		call	__cxa_end_catch
 1769      00
 1770 0a0c EB9E     		jmp	.L89
 1771              	.L92:
 1772              	.LBE26:
 1773 0a0e 4889C7   		movq	%rax, %rdi
 1774 0a11 E8000000 		call	__cxa_begin_catch
 1774      00
 1775 0a16 E8000000 		call	__cxa_end_catch
 1775      00
 1776              	.LEHE43:
 1777 0a1b EB8F     		jmp	.L89
 1778              	.L91:
 1779              	.LBE25:
 1780              	.LBE24:
  63:TestUnitTest++.cpp **** }
 1781              		.loc 4 63 0 is_stmt 1
 1782 0a1d C9       		leave
 1783              		.cfi_def_cfa 7, 8
 1784 0a1e C3       		ret
 1785              		.cfi_endproc
 1786              	.LFE1320:
 1787              		.section	.gcc_except_table
 1788              		.align 4
 1789              	.LLSDA1320:
 1790 0110 FF       		.byte	0xff
 1791 0111 03       		.byte	0x3
 1792 0112 19       		.uleb128 .LLSDATT1320-.LLSDATTD1320
 1793              	.LLSDATTD1320:
 1794 0113 01       		.byte	0x1
 1795 0114 08       		.uleb128 .LLSDACSE1320-.LLSDACSB1320
 1796              	.LLSDACSB1320:
 1797 0115 27       		.uleb128 .LEHB42-.LFB1320
 1798 0116 05       		.uleb128 .LEHE42-.LEHB42
 1799 0117 71       		.uleb128 .L90-.LFB1320
 1800 0118 03       		.uleb128 0x3
 1801 0119 37       		.uleb128 .LEHB43-.LFB1320
 1802 011a 64       		.uleb128 .LEHE43-.LEHB43
 1803 011b 00       		.uleb128 0
 1804 011c 00       		.uleb128 0
 1805              	.LLSDACSE1320:
 1806 011d 02       		.byte	0x2
 1807 011e 00       		.byte	0
 1808 011f 01       		.byte	0x1
 1809 0120 7D       		.byte	0x7d
 1810 0121 000000   		.align 4
 1811 0124 00000000 		.long	0
 1812              	
 1813 0128 00000000 		.long	_ZTIZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestExcepti
 1814              	.LLSDATT1320:
 1815              		.text
 1817              		.section	.rodata
 1818              	.LC32:
 1819 02cf 43686563 		.string	"CheckAssertSucceeds"
 1819      6B417373 
 1819      65727453 
 1819      75636365 
 1819      65647300 
 1820              		.text
 1821 0a1f 90       		.align 2
 1823              	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsC2Ev:
 1824              	.LFB1322:
  64:TestUnitTest++.cpp **** 
  65:TestUnitTest++.cpp **** TEST(CheckAssertSucceeds)
 1825              		.loc 4 65 0
 1826              		.cfi_startproc
 1827 0a20 55       		pushq	%rbp
 1828              		.cfi_def_cfa_offset 16
 1829              		.cfi_offset 6, -16
 1830 0a21 4889E5   		movq	%rsp, %rbp
 1831              		.cfi_def_cfa_register 6
 1832 0a24 4883EC10 		subq	$16, %rsp
 1833 0a28 48897DF8 		movq	%rdi, -8(%rbp)
 1834              	.LBB27:
 1835              		.loc 4 65 0
 1836 0a2c E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1836      00
 1837 0a31 4889C2   		movq	%rax, %rdx
 1838 0a34 488B45F8 		movq	-8(%rbp), %rax
 1839 0a38 41B84100 		movl	$65, %r8d
 1839      0000
 1840 0a3e B9000000 		movl	$.LC1, %ecx
 1840      00
 1841 0a43 BE000000 		movl	$.LC32, %esi
 1841      00
 1842 0a48 4889C7   		movq	%rax, %rdi
 1843 0a4b E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 1843      00
 1844 0a50 488B45F8 		movq	-8(%rbp), %rax
 1845 0a54 48C70000 		movq	$_ZTVN12_GLOBAL__N_123TestCheckAssertSucceedsE+16, (%rax)
 1845      000000
 1846              	.LBE27:
 1847 0a5b C9       		leave
 1848              		.cfi_def_cfa 7, 8
 1849 0a5c C3       		ret
 1850              		.cfi_endproc
 1851              	.LFE1322:
 1853              		.set	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsC1Ev,_ZN12_GLOBAL__N_123TestCheckAssertSucceedsC2Ev
 1854              		.local	_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE
 1855              		.comm	_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE,56,32
 1856              		.local	_ZN12_GLOBAL__N_124adderCheckAssertSucceedsE
 1857              		.comm	_ZN12_GLOBAL__N_124adderCheckAssertSucceedsE,1,1
 1858              		.section	.rodata
 1859              	.LC33:
 1860 02e3 66696C65 		.string	"file"
 1860      00
 1861              	.LC34:
 1862 02e8 64657363 		.string	"desc"
 1862      00
 1863 02ed 000000   		.align 8
 1864              	.LC35:
 1865 02f0 45787065 		.string	"Expected exception: \"UnitTest::AssertException\" not thrown"
 1865      63746564 
 1865      20657863 
 1865      65707469 
 1865      6F6E3A20 
 1866              		.text
 1867 0a5d 90       		.align 2
 1869              	_ZNK12_GLOBAL__N_123TestCheckAssertSucceeds7RunImplEv:
 1870              	.LFB1324:
  66:TestUnitTest++.cpp **** {
 1871              		.loc 4 66 0
 1872              		.cfi_startproc
 1873              		.cfi_personality 0x3,__gxx_personality_v0
 1874              		.cfi_lsda 0x3,.LLSDA1324
 1875 0a5e 55       		pushq	%rbp
 1876              		.cfi_def_cfa_offset 16
 1877              		.cfi_offset 6, -16
 1878 0a5f 4889E5   		movq	%rsp, %rbp
 1879              		.cfi_def_cfa_register 6
 1880 0a62 4883EC40 		subq	$64, %rsp
 1881 0a66 48897DC8 		movq	%rdi, -56(%rbp)
 1882              	.LBB28:
 1883              	.LBB29:
  67:TestUnitTest++.cpp ****     CHECK_ASSERT(UnitTest::ReportAssert("desc", "file", 0));
 1884              		.loc 4 67 0
 1885 0a6a C645D700 		movb	$0, -41(%rbp)
 1886 0a6e BA000000 		movl	$0, %edx
 1886      00
 1887 0a73 BE000000 		movl	$.LC33, %esi
 1887      00
 1888 0a78 BF000000 		movl	$.LC34, %edi
 1888      00
 1889              	.LEHB44:
 1890 0a7d E8000000 		call	_ZN8UnitTest12ReportAssertEPKcS1_i
 1890      00
 1891              	.LEHE44:
 1892              	.L99:
 1893              		.loc 4 67 0 is_stmt 0 discriminator 1
 1894 0a82 0FB645D7 		movzbl	-41(%rbp), %eax
 1895 0a86 83F001   		xorl	$1, %eax
 1896 0a89 84C0     		testb	%al, %al
 1897 0a8b 7466     		je	.L101
 1898              	.LEHB45:
 1899 0a8d E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 1899      00
 1900 0a92 488B08   		movq	(%rax), %rcx
 1901 0a95 488D45E0 		leaq	-32(%rbp), %rax
 1902 0a99 BA430000 		movl	$67, %edx
 1902      00
 1903 0a9e 4889CE   		movq	%rcx, %rsi
 1904 0aa1 4889C7   		movq	%rax, %rdi
 1905 0aa4 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 1905      00
 1906 0aa9 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 1906      00
 1907 0aae 488B00   		movq	(%rax), %rax
 1908 0ab1 488D4DE0 		leaq	-32(%rbp), %rcx
 1909 0ab5 BA000000 		movl	$.LC35, %edx
 1909      00
 1910 0aba 4889CE   		movq	%rcx, %rsi
 1911 0abd 4889C7   		movq	%rax, %rdi
 1912 0ac0 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 1912      00
 1913 0ac5 EB2C     		jmp	.L101
 1914              	.L100:
 1915 0ac7 4883FA01 		cmpq	$1, %rdx
 1916 0acb 7517     		jne	.L102
 1917              	.LBB30:
 1918              		.loc 4 67 0
 1919 0acd 4889C7   		movq	%rax, %rdi
 1920 0ad0 E8000000 		call	__cxa_begin_catch
 1920      00
 1921 0ad5 488945D8 		movq	%rax, -40(%rbp)
 1922 0ad9 C645D701 		movb	$1, -41(%rbp)
 1923 0add E8000000 		call	__cxa_end_catch
 1923      00
 1924 0ae2 EB9E     		jmp	.L99
 1925              	.L102:
 1926              	.LBE30:
 1927 0ae4 4889C7   		movq	%rax, %rdi
 1928 0ae7 E8000000 		call	__cxa_begin_catch
 1928      00
 1929 0aec E8000000 		call	__cxa_end_catch
 1929      00
 1930              	.LEHE45:
 1931 0af1 EB8F     		jmp	.L99
 1932              	.L101:
 1933              	.LBE29:
 1934              	.LBE28:
  68:TestUnitTest++.cpp **** }
 1935              		.loc 4 68 0 is_stmt 1
 1936 0af3 C9       		leave
 1937              		.cfi_def_cfa 7, 8
 1938 0af4 C3       		ret
 1939              		.cfi_endproc
 1940              	.LFE1324:
 1941              		.section	.gcc_except_table
 1942              		.align 4
 1943              	.LLSDA1324:
 1944 012c FF       		.byte	0xff
 1945 012d 03       		.byte	0x3
 1946 012e 19       		.uleb128 .LLSDATT1324-.LLSDATTD1324
 1947              	.LLSDATTD1324:
 1948 012f 01       		.byte	0x1
 1949 0130 08       		.uleb128 .LLSDACSE1324-.LLSDACSB1324
 1950              	.LLSDACSB1324:
 1951 0131 1F       		.uleb128 .LEHB44-.LFB1324
 1952 0132 05       		.uleb128 .LEHE44-.LEHB44
 1953 0133 69       		.uleb128 .L100-.LFB1324
 1954 0134 03       		.uleb128 0x3
 1955 0135 2F       		.uleb128 .LEHB45-.LFB1324
 1956 0136 64       		.uleb128 .LEHE45-.LEHB45
 1957 0137 00       		.uleb128 0
 1958 0138 00       		.uleb128 0
 1959              	.LLSDACSE1324:
 1960 0139 02       		.byte	0x2
 1961 013a 00       		.byte	0
 1962 013b 01       		.byte	0x1
 1963 013c 7D       		.byte	0x7d
 1964 013d 000000   		.align 4
 1965 0140 00000000 		.long	0
 1966              	
 1967 0144 00000000 		.long	_ZTIN8UnitTest15AssertExceptionE
 1968              	.LLSDATT1324:
 1969              		.text
 1971              		.section	.rodata
 1972 032b 00000000 		.align 8
 1972      00
 1973              	.LC36:
 1974 0330 43686563 		.string	"CheckThrowMacroFailsOnMissingException"
 1974      6B546872 
 1974      6F774D61 
 1974      63726F46 
 1974      61696C73 
 1975              		.text
 1976 0af5 90       		.align 2
 1978              	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC2Ev:
 1979              	.LFB1326:
  69:TestUnitTest++.cpp **** 
  70:TestUnitTest++.cpp **** TEST(CheckThrowMacroFailsOnMissingException)
 1980              		.loc 4 70 0
 1981              		.cfi_startproc
 1982 0af6 55       		pushq	%rbp
 1983              		.cfi_def_cfa_offset 16
 1984              		.cfi_offset 6, -16
 1985 0af7 4889E5   		movq	%rsp, %rbp
 1986              		.cfi_def_cfa_register 6
 1987 0afa 4883EC10 		subq	$16, %rsp
 1988 0afe 48897DF8 		movq	%rdi, -8(%rbp)
 1989              	.LBB31:
 1990              		.loc 4 70 0
 1991 0b02 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 1991      00
 1992 0b07 4889C2   		movq	%rax, %rdx
 1993 0b0a 488B45F8 		movq	-8(%rbp), %rax
 1994 0b0e 41B84600 		movl	$70, %r8d
 1994      0000
 1995 0b14 B9000000 		movl	$.LC1, %ecx
 1995      00
 1996 0b19 BE000000 		movl	$.LC36, %esi
 1996      00
 1997 0b1e 4889C7   		movq	%rax, %rdi
 1998 0b21 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 1998      00
 1999 0b26 488B45F8 		movq	-8(%rbp), %rax
 2000 0b2a 48C70000 		movq	$_ZTVN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE+16, (%rax)
 2000      000000
 2001              	.LBE31:
 2002 0b31 C9       		leave
 2003              		.cfi_def_cfa 7, 8
 2004 0b32 C3       		ret
 2005              		.cfi_endproc
 2006              	.LFE1326:
 2008              		.set	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC1Ev,_ZN12_GLOBAL__N_142TestChec
 2009              		.local	_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE
 2010              		.comm	_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE,56,32
 2011              		.local	_ZN12_GLOBAL__N_143adderCheckThrowMacroFailsOnMissingExceptionE
 2012              		.comm	_ZN12_GLOBAL__N_143adderCheckThrowMacroFailsOnMissingExceptionE,1,1
 2013              		.section	.rodata
 2014              	.LC37:
 2015 0357 00       		.string	""
 2016              	.LC38:
 2017 0358 6E6F7468 		.string	"nothrow"
 2017      726F7700 
 2018              		.text
 2019 0b33 90       		.align 2
 2021              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC2Ev:
 2022              	.LFB1330:
  71:TestUnitTest++.cpp **** {
  72:TestUnitTest++.cpp ****     class NoThrowTest : public UnitTest::Test
  73:TestUnitTest++.cpp ****     {
  74:TestUnitTest++.cpp ****     public:
  75:TestUnitTest++.cpp ****         NoThrowTest() : Test("nothrow") {}
 2023              		.loc 4 75 0
 2024              		.cfi_startproc
 2025 0b34 55       		pushq	%rbp
 2026              		.cfi_def_cfa_offset 16
 2027              		.cfi_offset 6, -16
 2028 0b35 4889E5   		movq	%rsp, %rbp
 2029              		.cfi_def_cfa_register 6
 2030 0b38 4883EC10 		subq	$16, %rsp
 2031 0b3c 48897DF8 		movq	%rdi, -8(%rbp)
 2032              	.LBB32:
 2033              		.loc 4 75 0
 2034 0b40 488B45F8 		movq	-8(%rbp), %rax
 2035 0b44 41B80000 		movl	$0, %r8d
 2035      0000
 2036 0b4a B9000000 		movl	$.LC37, %ecx
 2036      00
 2037 0b4f BA000000 		movl	$.LC0, %edx
 2037      00
 2038 0b54 BE000000 		movl	$.LC38, %esi
 2038      00
 2039 0b59 4889C7   		movq	%rax, %rdi
 2040 0b5c E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 2040      00
 2041 0b61 488B45F8 		movq	-8(%rbp), %rax
 2042 0b65 48C70000 		movq	$_ZTVZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest+16
 2042      000000
 2043              	.LBE32:
 2044 0b6c C9       		leave
 2045              		.cfi_def_cfa 7, 8
 2046 0b6d C3       		ret
 2047              		.cfi_endproc
 2048              	.LFE1330:
 2050              		.set	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC1Ev,
 2051              		.align 2
 2053              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest9DontThrow
 2054              	.LFB1332:
  76:TestUnitTest++.cpp ****         void DontThrow() const
 2055              		.loc 4 76 0
 2056              		.cfi_startproc
 2057 0b6e 55       		pushq	%rbp
 2058              		.cfi_def_cfa_offset 16
 2059              		.cfi_offset 6, -16
 2060 0b6f 4889E5   		movq	%rsp, %rbp
 2061              		.cfi_def_cfa_register 6
 2062 0b72 48897DF8 		movq	%rdi, -8(%rbp)
  77:TestUnitTest++.cpp ****         {
  78:TestUnitTest++.cpp ****         }
 2063              		.loc 4 78 0
 2064 0b76 5D       		popq	%rbp
 2065              		.cfi_def_cfa 7, 8
 2066 0b77 C3       		ret
 2067              		.cfi_endproc
 2068              	.LFE1332:
 2070              		.section	.rodata
 2071              		.align 8
 2072              	.LC39:
 2073 0360 45787065 		.string	"Expected exception: \"int\" not thrown"
 2073      63746564 
 2073      20657863 
 2073      65707469 
 2073      6F6E3A20 
 2074              		.text
 2075              		.align 2
 2077              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest7RunImplEv
 2078              	.LFB1333:
  79:TestUnitTest++.cpp **** 
  80:TestUnitTest++.cpp ****         virtual void RunImpl() const
 2079              		.loc 4 80 0
 2080              		.cfi_startproc
 2081 0b78 55       		pushq	%rbp
 2082              		.cfi_def_cfa_offset 16
 2083              		.cfi_offset 6, -16
 2084 0b79 4889E5   		movq	%rsp, %rbp
 2085              		.cfi_def_cfa_register 6
 2086 0b7c 4883EC40 		subq	$64, %rsp
 2087 0b80 48897DC8 		movq	%rdi, -56(%rbp)
 2088              	.LBB33:
 2089              	.LBB34:
  81:TestUnitTest++.cpp ****         {
  82:TestUnitTest++.cpp ****             CHECK_THROW(DontThrow(), int);
 2090              		.loc 4 82 0
 2091 0b84 C645DF00 		movb	$0, -33(%rbp)
 2092 0b88 488B45C8 		movq	-56(%rbp), %rax
 2093 0b8c 4889C7   		movq	%rax, %rdi
 2094 0b8f E8DAFFFF 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest9Don
 2094      FF
 2095 0b94 0FB645DF 		movzbl	-33(%rbp), %eax
 2096 0b98 83F001   		xorl	$1, %eax
 2097 0b9b 84C0     		testb	%al, %al
 2098 0b9d 7438     		je	.L106
 2099              		.loc 4 82 0 is_stmt 0 discriminator 1
 2100 0b9f E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 2100      00
 2101 0ba4 488B08   		movq	(%rax), %rcx
 2102 0ba7 488D45E0 		leaq	-32(%rbp), %rax
 2103 0bab BA520000 		movl	$82, %edx
 2103      00
 2104 0bb0 4889CE   		movq	%rcx, %rsi
 2105 0bb3 4889C7   		movq	%rax, %rdi
 2106 0bb6 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 2106      00
 2107 0bbb E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 2107      00
 2108 0bc0 488B00   		movq	(%rax), %rax
 2109 0bc3 488D4DE0 		leaq	-32(%rbp), %rcx
 2110 0bc7 BA000000 		movl	$.LC39, %edx
 2110      00
 2111 0bcc 4889CE   		movq	%rcx, %rsi
 2112 0bcf 4889C7   		movq	%rax, %rdi
 2113 0bd2 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 2113      00
 2114              	.L106:
 2115              	.LBE34:
 2116              	.LBE33:
  83:TestUnitTest++.cpp ****         }
 2117              		.loc 4 83 0 is_stmt 1
 2118 0bd7 C9       		leave
 2119              		.cfi_def_cfa 7, 8
 2120 0bd8 C3       		ret
 2121              		.cfi_endproc
 2122              	.LFE1333:
 2124              		.section	.rodata
 2125 0385 000000   		.align 8
 2126              	.LC40:
 2127 0388 556E6861 		.string	"Unhandled exception in CHECK_EQUAL(1, results.GetFailureCount())"
 2127      6E646C65 
 2127      64206578 
 2127      63657074 
 2127      696F6E20 
 2128              		.text
 2129 0bd9 90       		.align 2
 2131              	_ZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEv:
 2132              	.LFB1328:
  71:TestUnitTest++.cpp ****     class NoThrowTest : public UnitTest::Test
 2133              		.loc 4 71 0
 2134              		.cfi_startproc
 2135              		.cfi_personality 0x3,__gxx_personality_v0
 2136              		.cfi_lsda 0x3,.LLSDA1328
 2137 0bda 55       		pushq	%rbp
 2138              		.cfi_def_cfa_offset 16
 2139              		.cfi_offset 6, -16
 2140 0bdb 4889E5   		movq	%rsp, %rbp
 2141              		.cfi_def_cfa_register 6
 2142 0bde 53       		pushq	%rbx
 2143 0bdf 4881EC98 		subq	$152, %rsp
 2143      000000
 2144              		.cfi_offset 3, -24
 2145 0be6 4889BD68 		movq	%rdi, -152(%rbp)
 2145      FFFFFF
 2146              	.LBB35:
  84:TestUnitTest++.cpp ****     };
  85:TestUnitTest++.cpp **** 
  86:TestUnitTest++.cpp ****     UnitTest::TestResults results;
 2147              		.loc 4 86 0
 2148 0bed 488D4590 		leaq	-112(%rbp), %rax
 2149 0bf1 BE000000 		movl	$0, %esi
 2149      00
 2150 0bf6 4889C7   		movq	%rax, %rdi
 2151              	.LEHB46:
 2152 0bf9 E8000000 		call	_ZN8UnitTest11TestResultsC1EPNS_12TestReporterE
 2152      00
 2153              	.LBB36:
  87:TestUnitTest++.cpp **** 	{
  88:TestUnitTest++.cpp **** 		ScopedCurrentTest scopedResults(results);
 2154              		.loc 4 88 0
 2155 0bfe 488D4D90 		leaq	-112(%rbp), %rcx
 2156 0c02 488D4580 		leaq	-128(%rbp), %rax
 2157 0c06 BA000000 		movl	$0, %edx
 2157      00
 2158 0c0b 4889CE   		movq	%rcx, %rsi
 2159 0c0e 4889C7   		movq	%rax, %rdi
 2160 0c11 E8000000 		call	_ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
 2160      00
 2161              	.LEHE46:
  89:TestUnitTest++.cpp **** 
  90:TestUnitTest++.cpp **** 		NoThrowTest test;
 2162              		.loc 4 90 0
 2163 0c16 488D45B0 		leaq	-80(%rbp), %rax
 2164 0c1a 4889C7   		movq	%rax, %rdi
 2165              	.LEHB47:
 2166 0c1d E812FFFF 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC1Ev
 2166      FF
 2167              	.LEHE47:
  91:TestUnitTest++.cpp **** 		test.Run();
 2168              		.loc 4 91 0
 2169 0c22 488D45B0 		leaq	-80(%rbp), %rax
 2170 0c26 4889C7   		movq	%rax, %rdi
 2171              	.LEHB48:
 2172 0c29 E8000000 		call	_ZN8UnitTest4Test3RunEv
 2172      00
 2173              	.LEHE48:
  90:TestUnitTest++.cpp **** 		test.Run();
 2174              		.loc 4 90 0
 2175 0c2e 488D45B0 		leaq	-80(%rbp), %rax
 2176 0c32 4889C7   		movq	%rax, %rdi
 2177              	.LEHB49:
 2178 0c35 E85C1400 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
 2178      00
 2179              	.LEHE49:
 2180              		.loc 4 91 0
 2181 0c3a 488D4580 		leaq	-128(%rbp), %rax
 2182 0c3e 4889C7   		movq	%rax, %rdi
 2183              	.LEHB50:
 2184 0c41 E8000000 		call	_ZN17ScopedCurrentTestD1Ev
 2184      00
 2185              	.LEHE50:
 2186              	.LEHB51:
 2187              	.LBE36:
  92:TestUnitTest++.cpp **** 	}
  93:TestUnitTest++.cpp **** 
  94:TestUnitTest++.cpp **** 	CHECK_EQUAL(1, results.GetFailureCount());
 2188              		.loc 4 94 0
 2189 0c46 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 2189      00
 2190 0c4b 488B08   		movq	(%rax), %rcx
 2191 0c4e 488D45B0 		leaq	-80(%rbp), %rax
 2192 0c52 BA5E0000 		movl	$94, %edx
 2192      00
 2193 0c57 4889CE   		movq	%rcx, %rsi
 2194 0c5a 4889C7   		movq	%rax, %rdi
 2195 0c5d E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 2195      00
 2196              		.loc 4 94 0 is_stmt 0 discriminator 1
 2197 0c62 488D4590 		leaq	-112(%rbp), %rax
 2198 0c66 4889C7   		movq	%rax, %rdi
 2199 0c69 E8000000 		call	_ZNK8UnitTest11TestResults15GetFailureCountEv
 2199      00
 2200 0c6e 894580   		movl	%eax, -128(%rbp)
 2201 0c71 C7857CFF 		movl	$1, -132(%rbp)
 2201      FFFF0100 
 2201      0000
 2202 0c7b E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 2202      00
 2203 0c80 488B00   		movq	(%rax), %rax
 2204 0c83 488D4DB0 		leaq	-80(%rbp), %rcx
 2205 0c87 488D5580 		leaq	-128(%rbp), %rdx
 2206 0c8b 488DB57C 		leaq	-132(%rbp), %rsi
 2206      FFFFFF
 2207 0c92 4889C7   		movq	%rax, %rdi
 2208 0c95 E8000000 		call	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 2208      00
 2209              	.LEHE51:
 2210              	.LBE35:
  95:TestUnitTest++.cpp **** }
 2211              		.loc 4 95 0 is_stmt 1
 2212 0c9a E9830000 		jmp	.L118
 2212      00
 2213              	.L115:
 2214 0c9f 4889C3   		movq	%rax, %rbx
 2215              	.LBB38:
 2216              	.LBB37:
  90:TestUnitTest++.cpp **** 		test.Run();
 2217              		.loc 4 90 0
 2218 0ca2 488D45B0 		leaq	-80(%rbp), %rax
 2219 0ca6 4889C7   		movq	%rax, %rdi
 2220 0ca9 E8E81300 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
 2220      00
 2221 0cae EB03     		jmp	.L110
 2222              	.L114:
 2223 0cb0 4889C3   		movq	%rax, %rbx
 2224              	.L110:
  91:TestUnitTest++.cpp **** 	}
 2225              		.loc 4 91 0
 2226 0cb3 488D4580 		leaq	-128(%rbp), %rax
 2227 0cb7 4889C7   		movq	%rax, %rdi
 2228 0cba E8000000 		call	_ZN17ScopedCurrentTestD1Ev
 2228      00
 2229 0cbf 4889D8   		movq	%rbx, %rax
 2230 0cc2 4889C7   		movq	%rax, %rdi
 2231              	.LEHB52:
 2232 0cc5 E8000000 		call	_Unwind_Resume
 2232      00
 2233              	.LEHE52:
 2234              	.L117:
 2235 0cca 4889C3   		movq	%rax, %rbx
 2236              	.LBE37:
  94:TestUnitTest++.cpp **** }
 2237              		.loc 4 94 0
 2238 0ccd E8000000 		call	__cxa_end_catch
 2238      00
 2239 0cd2 4889D8   		movq	%rbx, %rax
 2240 0cd5 4889C7   		movq	%rax, %rdi
 2241              	.LEHB53:
 2242 0cd8 E8000000 		call	_Unwind_Resume
 2242      00
 2243              	.LEHE53:
 2244              	.L116:
 2245 0cdd 4889C7   		movq	%rax, %rdi
 2246 0ce0 E8000000 		call	__cxa_begin_catch
 2246      00
 2247              	.LEHB54:
 2248 0ce5 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 2248      00
 2249 0cea 488B08   		movq	(%rax), %rcx
 2250 0ced 488D45B0 		leaq	-80(%rbp), %rax
 2251 0cf1 BA5E0000 		movl	$94, %edx
 2251      00
 2252 0cf6 4889CE   		movq	%rcx, %rsi
 2253 0cf9 4889C7   		movq	%rax, %rdi
 2254 0cfc E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 2254      00
  94:TestUnitTest++.cpp **** }
 2255              		.loc 4 94 0 is_stmt 0 discriminator 1
 2256 0d01 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 2256      00
 2257 0d06 488B00   		movq	(%rax), %rax
 2258 0d09 488D4DB0 		leaq	-80(%rbp), %rcx
 2259 0d0d BA000000 		movl	$.LC40, %edx
 2259      00
 2260 0d12 4889CE   		movq	%rcx, %rsi
 2261 0d15 4889C7   		movq	%rax, %rdi
 2262 0d18 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 2262      00
 2263              	.LEHE54:
 2264              	.LEHB55:
 2265 0d1d E8000000 		call	__cxa_end_catch
 2265      00
 2266              	.LEHE55:
 2267              	.L118:
 2268              	.LBE38:
 2269              		.loc 4 95 0 is_stmt 1
 2270 0d22 90       		nop
 2271 0d23 4881C498 		addq	$152, %rsp
 2271      000000
 2272 0d2a 5B       		popq	%rbx
 2273 0d2b 5D       		popq	%rbp
 2274              		.cfi_def_cfa 7, 8
 2275 0d2c C3       		ret
 2276              		.cfi_endproc
 2277              	.LFE1328:
 2278              		.section	.gcc_except_table
 2279              		.align 4
 2280              	.LLSDA1328:
 2281 0148 FF       		.byte	0xff
 2282 0149 03       		.byte	0x3
 2283 014a 39       		.uleb128 .LLSDATT1328-.LLSDATTD1328
 2284              	.LLSDATTD1328:
 2285 014b 01       		.byte	0x1
 2286 014c 31       		.uleb128 .LLSDACSE1328-.LLSDACSB1328
 2287              	.LLSDACSB1328:
 2288 014d 1F       		.uleb128 .LEHB46-.LFB1328
 2289 014e 1D       		.uleb128 .LEHE46-.LEHB46
 2290 014f 00       		.uleb128 0
 2291 0150 00       		.uleb128 0
 2292 0151 43       		.uleb128 .LEHB47-.LFB1328
 2293 0152 05       		.uleb128 .LEHE47-.LEHB47
 2294 0153 D601     		.uleb128 .L114-.LFB1328
 2295 0155 00       		.uleb128 0
 2296 0156 4F       		.uleb128 .LEHB48-.LFB1328
 2297 0157 05       		.uleb128 .LEHE48-.LEHB48
 2298 0158 C501     		.uleb128 .L115-.LFB1328
 2299 015a 00       		.uleb128 0
 2300 015b 5B       		.uleb128 .LEHB49-.LFB1328
 2301 015c 05       		.uleb128 .LEHE49-.LEHB49
 2302 015d D601     		.uleb128 .L114-.LFB1328
 2303 015f 00       		.uleb128 0
 2304 0160 67       		.uleb128 .LEHB50-.LFB1328
 2305 0161 05       		.uleb128 .LEHE50-.LEHB50
 2306 0162 00       		.uleb128 0
 2307 0163 00       		.uleb128 0
 2308 0164 6C       		.uleb128 .LEHB51-.LFB1328
 2309 0165 54       		.uleb128 .LEHE51-.LEHB51
 2310 0166 8302     		.uleb128 .L116-.LFB1328
 2311 0168 01       		.uleb128 0x1
 2312 0169 EB01     		.uleb128 .LEHB52-.LFB1328
 2313 016b 05       		.uleb128 .LEHE52-.LEHB52
 2314 016c 00       		.uleb128 0
 2315 016d 00       		.uleb128 0
 2316 016e FE01     		.uleb128 .LEHB53-.LFB1328
 2317 0170 05       		.uleb128 .LEHE53-.LEHB53
 2318 0171 00       		.uleb128 0
 2319 0172 00       		.uleb128 0
 2320 0173 8B02     		.uleb128 .LEHB54-.LFB1328
 2321 0175 38       		.uleb128 .LEHE54-.LEHB54
 2322 0176 F001     		.uleb128 .L117-.LFB1328
 2323 0178 00       		.uleb128 0
 2324 0179 C302     		.uleb128 .LEHB55-.LFB1328
 2325 017b 05       		.uleb128 .LEHE55-.LEHB55
 2326 017c 00       		.uleb128 0
 2327 017d 00       		.uleb128 0
 2328              	.LLSDACSE1328:
 2329 017e 01       		.byte	0x1
 2330 017f 00       		.byte	0
 2331              		.align 4
 2332 0180 00000000 		.long	0
 2333              	
 2334              	.LLSDATT1328:
 2335              		.text
 2337              		.section	.rodata
 2338 03c9 00000000 		.align 8
 2338      000000
 2339              	.LC41:
 2340 03d0 43686563 		.string	"CheckThrowMacroFailsOnWrongException"
 2340      6B546872 
 2340      6F774D61 
 2340      63726F46 
 2340      61696C73 
 2341              		.text
 2342 0d2d 90       		.align 2
 2344              	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC2Ev:
 2345              	.LFB1335:
  96:TestUnitTest++.cpp **** 
  97:TestUnitTest++.cpp **** TEST(CheckThrowMacroFailsOnWrongException)
 2346              		.loc 4 97 0
 2347              		.cfi_startproc
 2348 0d2e 55       		pushq	%rbp
 2349              		.cfi_def_cfa_offset 16
 2350              		.cfi_offset 6, -16
 2351 0d2f 4889E5   		movq	%rsp, %rbp
 2352              		.cfi_def_cfa_register 6
 2353 0d32 4883EC10 		subq	$16, %rsp
 2354 0d36 48897DF8 		movq	%rdi, -8(%rbp)
 2355              	.LBB39:
 2356              		.loc 4 97 0
 2357 0d3a E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 2357      00
 2358 0d3f 4889C2   		movq	%rax, %rdx
 2359 0d42 488B45F8 		movq	-8(%rbp), %rax
 2360 0d46 41B86100 		movl	$97, %r8d
 2360      0000
 2361 0d4c B9000000 		movl	$.LC1, %ecx
 2361      00
 2362 0d51 BE000000 		movl	$.LC41, %esi
 2362      00
 2363 0d56 4889C7   		movq	%rax, %rdi
 2364 0d59 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 2364      00
 2365 0d5e 488B45F8 		movq	-8(%rbp), %rax
 2366 0d62 48C70000 		movq	$_ZTVN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE+16, (%rax)
 2366      000000
 2367              	.LBE39:
 2368 0d69 C9       		leave
 2369              		.cfi_def_cfa 7, 8
 2370 0d6a C3       		ret
 2371              		.cfi_endproc
 2372              	.LFE1335:
 2374              		.set	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC1Ev,_ZN12_GLOBAL__N_140TestCheckT
 2375              		.local	_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE
 2376              		.comm	_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE,56,32
 2377              		.local	_ZN12_GLOBAL__N_141adderCheckThrowMacroFailsOnWrongExceptionE
 2378              		.comm	_ZN12_GLOBAL__N_141adderCheckThrowMacroFailsOnWrongExceptionE,1,1
 2379              		.section	.rodata
 2380              	.LC42:
 2381 03f5 77726F6E 		.string	"wrongthrow"
 2381      67746872 
 2381      6F7700
 2382              		.text
 2383 0d6b 90       		.align 2
 2385              	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC2Ev:
 2386              	.LFB1339:
  98:TestUnitTest++.cpp **** {
  99:TestUnitTest++.cpp ****     class WrongThrowTest : public UnitTest::Test
 100:TestUnitTest++.cpp ****     {
 101:TestUnitTest++.cpp ****     public:
 102:TestUnitTest++.cpp ****         WrongThrowTest() : Test("wrongthrow") {}
 2387              		.loc 4 102 0
 2388              		.cfi_startproc
 2389 0d6c 55       		pushq	%rbp
 2390              		.cfi_def_cfa_offset 16
 2391              		.cfi_offset 6, -16
 2392 0d6d 4889E5   		movq	%rsp, %rbp
 2393              		.cfi_def_cfa_register 6
 2394 0d70 4883EC10 		subq	$16, %rsp
 2395 0d74 48897DF8 		movq	%rdi, -8(%rbp)
 2396              	.LBB40:
 2397              		.loc 4 102 0
 2398 0d78 488B45F8 		movq	-8(%rbp), %rax
 2399 0d7c 41B80000 		movl	$0, %r8d
 2399      0000
 2400 0d82 B9000000 		movl	$.LC37, %ecx
 2400      00
 2401 0d87 BA000000 		movl	$.LC0, %edx
 2401      00
 2402 0d8c BE000000 		movl	$.LC42, %esi
 2402      00
 2403 0d91 4889C7   		movq	%rax, %rdi
 2404 0d94 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 2404      00
 2405 0d99 488B45F8 		movq	-8(%rbp), %rax
 2406 0d9d 48C70000 		movq	$_ZTVZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest+1
 2406      000000
 2407              	.LBE40:
 2408 0da4 C9       		leave
 2409              		.cfi_def_cfa 7, 8
 2410 0da5 C3       		ret
 2411              		.cfi_endproc
 2412              	.LFE1339:
 2414              		.set	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC1Ev
 2415              		.section	.rodata
 2416              	.LC43:
 2417 0400 6F6F7073 		.string	"oops"
 2417      00
 2418              		.text
 2419              		.align 2
 2421              	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvENK14WrongThrowTest7RunImplE
 2422              	.LFB1341:
 103:TestUnitTest++.cpp ****         virtual void RunImpl() const
 2423              		.loc 4 103 0
 2424              		.cfi_startproc
 2425              		.cfi_personality 0x3,__gxx_personality_v0
 2426              		.cfi_lsda 0x3,.LLSDA1341
 2427 0da6 55       		pushq	%rbp
 2428              		.cfi_def_cfa_offset 16
 2429              		.cfi_offset 6, -16
 2430 0da7 4889E5   		movq	%rsp, %rbp
 2431              		.cfi_def_cfa_register 6
 2432 0daa 4883EC40 		subq	$64, %rsp
 2433 0dae 48897DC8 		movq	%rdi, -56(%rbp)
 2434              	.LBB41:
 2435              	.LBB42:
 104:TestUnitTest++.cpp ****         {
 105:TestUnitTest++.cpp ****             CHECK_THROW(throw "oops", int);
 2436              		.loc 4 105 0
 2437 0db2 C645D700 		movb	$0, -41(%rbp)
 2438 0db6 BF080000 		movl	$8, %edi
 2438      00
 2439 0dbb E8000000 		call	__cxa_allocate_exception
 2439      00
 2440 0dc0 48C70000 		movq	$.LC43, (%rax)
 2440      000000
 2441 0dc7 BA000000 		movl	$0, %edx
 2441      00
 2442 0dcc BE000000 		movl	$_ZTIPKc, %esi
 2442      00
 2443 0dd1 4889C7   		movq	%rax, %rdi
 2444              	.LEHB56:
 2445 0dd4 E8000000 		call	__cxa_throw
 2445      00
 2446              	.LEHE56:
 2447              	.L126:
 2448 0dd9 0FB645D7 		movzbl	-41(%rbp), %eax
 2449 0ddd 83F001   		xorl	$1, %eax
 2450 0de0 84C0     		testb	%al, %al
 2451 0de2 7466     		je	.L128
 2452              	.LEHB57:
 2453              		.loc 4 105 0 is_stmt 0 discriminator 1
 2454 0de4 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 2454      00
 2455 0de9 488B08   		movq	(%rax), %rcx
 2456 0dec 488D45E0 		leaq	-32(%rbp), %rax
 2457 0df0 BA690000 		movl	$105, %edx
 2457      00
 2458 0df5 4889CE   		movq	%rcx, %rsi
 2459 0df8 4889C7   		movq	%rax, %rdi
 2460 0dfb E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 2460      00
 2461 0e00 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 2461      00
 2462 0e05 488B00   		movq	(%rax), %rax
 2463 0e08 488D4DE0 		leaq	-32(%rbp), %rcx
 2464 0e0c BA000000 		movl	$.LC39, %edx
 2464      00
 2465 0e11 4889CE   		movq	%rcx, %rsi
 2466 0e14 4889C7   		movq	%rax, %rdi
 2467 0e17 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 2467      00
 2468 0e1c EB2C     		jmp	.L128
 2469              	.L127:
 2470 0e1e 4883FA01 		cmpq	$1, %rdx
 2471 0e22 7517     		jne	.L129
 2472              	.LBB43:
 2473              		.loc 4 105 0
 2474 0e24 4889C7   		movq	%rax, %rdi
 2475 0e27 E8000000 		call	__cxa_begin_catch
 2475      00
 2476 0e2c 488945D8 		movq	%rax, -40(%rbp)
 2477 0e30 C645D701 		movb	$1, -41(%rbp)
 2478 0e34 E8000000 		call	__cxa_end_catch
 2478      00
 2479 0e39 EB9E     		jmp	.L126
 2480              	.L129:
 2481              	.LBE43:
 2482 0e3b 4889C7   		movq	%rax, %rdi
 2483 0e3e E8000000 		call	__cxa_begin_catch
 2483      00
 2484 0e43 E8000000 		call	__cxa_end_catch
 2484      00
 2485              	.LEHE57:
 2486 0e48 EB8F     		jmp	.L126
 2487              	.L128:
 2488              	.LBE42:
 2489              	.LBE41:
 106:TestUnitTest++.cpp ****         }
 2490              		.loc 4 106 0 is_stmt 1
 2491 0e4a C9       		leave
 2492              		.cfi_def_cfa 7, 8
 2493 0e4b C3       		ret
 2494              		.cfi_endproc
 2495              	.LFE1341:
 2496              		.section	.gcc_except_table
 2497              		.align 4
 2498              	.LLSDA1341:
 2499 0184 FF       		.byte	0xff
 2500 0185 03       		.byte	0x3
 2501 0186 19       		.uleb128 .LLSDATT1341-.LLSDATTD1341
 2502              	.LLSDATTD1341:
 2503 0187 01       		.byte	0x1
 2504 0188 08       		.uleb128 .LLSDACSE1341-.LLSDACSB1341
 2505              	.LLSDACSB1341:
 2506 0189 2E       		.uleb128 .LEHB56-.LFB1341
 2507 018a 05       		.uleb128 .LEHE56-.LEHB56
 2508 018b 78       		.uleb128 .L127-.LFB1341
 2509 018c 03       		.uleb128 0x3
 2510 018d 3E       		.uleb128 .LEHB57-.LFB1341
 2511 018e 64       		.uleb128 .LEHE57-.LEHB57
 2512 018f 00       		.uleb128 0
 2513 0190 00       		.uleb128 0
 2514              	.LLSDACSE1341:
 2515 0191 02       		.byte	0x2
 2516 0192 00       		.byte	0
 2517 0193 01       		.byte	0x1
 2518 0194 7D       		.byte	0x7d
 2519 0195 000000   		.align 4
 2520 0198 00000000 		.long	0
 2521              	
 2522 019c 00000000 		.long	_ZTIi
 2523              	.LLSDATT1341:
 2524              		.text
 2526              		.align 2
 2528              	_ZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEv:
 2529              	.LFB1337:
  98:TestUnitTest++.cpp ****     class WrongThrowTest : public UnitTest::Test
 2530              		.loc 4 98 0
 2531              		.cfi_startproc
 2532              		.cfi_personality 0x3,__gxx_personality_v0
 2533              		.cfi_lsda 0x3,.LLSDA1337
 2534 0e4c 55       		pushq	%rbp
 2535              		.cfi_def_cfa_offset 16
 2536              		.cfi_offset 6, -16
 2537 0e4d 4889E5   		movq	%rsp, %rbp
 2538              		.cfi_def_cfa_register 6
 2539 0e50 53       		pushq	%rbx
 2540 0e51 4881EC98 		subq	$152, %rsp
 2540      000000
 2541              		.cfi_offset 3, -24
 2542 0e58 4889BD68 		movq	%rdi, -152(%rbp)
 2542      FFFFFF
 2543              	.LBB44:
 107:TestUnitTest++.cpp ****     };
 108:TestUnitTest++.cpp **** 
 109:TestUnitTest++.cpp ****     UnitTest::TestResults results;
 2544              		.loc 4 109 0
 2545 0e5f 488D4590 		leaq	-112(%rbp), %rax
 2546 0e63 BE000000 		movl	$0, %esi
 2546      00
 2547 0e68 4889C7   		movq	%rax, %rdi
 2548              	.LEHB58:
 2549 0e6b E8000000 		call	_ZN8UnitTest11TestResultsC1EPNS_12TestReporterE
 2549      00
 2550              	.LBB45:
 110:TestUnitTest++.cpp **** 	{
 111:TestUnitTest++.cpp **** 		ScopedCurrentTest scopedResults(results);
 2551              		.loc 4 111 0
 2552 0e70 488D4D90 		leaq	-112(%rbp), %rcx
 2553 0e74 488D4580 		leaq	-128(%rbp), %rax
 2554 0e78 BA000000 		movl	$0, %edx
 2554      00
 2555 0e7d 4889CE   		movq	%rcx, %rsi
 2556 0e80 4889C7   		movq	%rax, %rdi
 2557 0e83 E8000000 		call	_ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
 2557      00
 2558              	.LEHE58:
 112:TestUnitTest++.cpp **** 
 113:TestUnitTest++.cpp **** 		WrongThrowTest test;
 2559              		.loc 4 113 0
 2560 0e88 488D45B0 		leaq	-80(%rbp), %rax
 2561 0e8c 4889C7   		movq	%rax, %rdi
 2562              	.LEHB59:
 2563 0e8f E8D8FEFF 		call	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC1Ev
 2563      FF
 2564              	.LEHE59:
 114:TestUnitTest++.cpp **** 		test.Run();
 2565              		.loc 4 114 0
 2566 0e94 488D45B0 		leaq	-80(%rbp), %rax
 2567 0e98 4889C7   		movq	%rax, %rdi
 2568              	.LEHB60:
 2569 0e9b E8000000 		call	_ZN8UnitTest4Test3RunEv
 2569      00
 2570              	.LEHE60:
 113:TestUnitTest++.cpp **** 		test.Run();
 2571              		.loc 4 113 0
 2572 0ea0 488D45B0 		leaq	-80(%rbp), %rax
 2573 0ea4 4889C7   		movq	%rax, %rdi
 2574              	.LEHB61:
 2575 0ea7 E82A1100 		call	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
 2575      00
 2576              	.LEHE61:
 2577              		.loc 4 114 0
 2578 0eac 488D4580 		leaq	-128(%rbp), %rax
 2579 0eb0 4889C7   		movq	%rax, %rdi
 2580              	.LEHB62:
 2581 0eb3 E8000000 		call	_ZN17ScopedCurrentTestD1Ev
 2581      00
 2582              	.LEHE62:
 2583              	.LEHB63:
 2584              	.LBE45:
 115:TestUnitTest++.cpp **** 	}
 116:TestUnitTest++.cpp **** 
 117:TestUnitTest++.cpp **** 	CHECK_EQUAL(1, results.GetFailureCount());
 2585              		.loc 4 117 0
 2586 0eb8 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 2586      00
 2587 0ebd 488B08   		movq	(%rax), %rcx
 2588 0ec0 488D45B0 		leaq	-80(%rbp), %rax
 2589 0ec4 BA750000 		movl	$117, %edx
 2589      00
 2590 0ec9 4889CE   		movq	%rcx, %rsi
 2591 0ecc 4889C7   		movq	%rax, %rdi
 2592 0ecf E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 2592      00
 2593              		.loc 4 117 0 is_stmt 0 discriminator 1
 2594 0ed4 488D4590 		leaq	-112(%rbp), %rax
 2595 0ed8 4889C7   		movq	%rax, %rdi
 2596 0edb E8000000 		call	_ZNK8UnitTest11TestResults15GetFailureCountEv
 2596      00
 2597 0ee0 894580   		movl	%eax, -128(%rbp)
 2598 0ee3 C7857CFF 		movl	$1, -132(%rbp)
 2598      FFFF0100 
 2598      0000
 2599 0eed E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 2599      00
 2600 0ef2 488B00   		movq	(%rax), %rax
 2601 0ef5 488D4DB0 		leaq	-80(%rbp), %rcx
 2602 0ef9 488D5580 		leaq	-128(%rbp), %rdx
 2603 0efd 488DB57C 		leaq	-132(%rbp), %rsi
 2603      FFFFFF
 2604 0f04 4889C7   		movq	%rax, %rdi
 2605 0f07 E8000000 		call	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 2605      00
 2606              	.LEHE63:
 2607              	.LBE44:
 118:TestUnitTest++.cpp **** }
 2608              		.loc 4 118 0 is_stmt 1
 2609 0f0c E9830000 		jmp	.L140
 2609      00
 2610              	.L137:
 2611 0f11 4889C3   		movq	%rax, %rbx
 2612              	.LBB47:
 2613              	.LBB46:
 113:TestUnitTest++.cpp **** 		test.Run();
 2614              		.loc 4 113 0
 2615 0f14 488D45B0 		leaq	-80(%rbp), %rax
 2616 0f18 4889C7   		movq	%rax, %rdi
 2617 0f1b E8B61000 		call	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
 2617      00
 2618 0f20 EB03     		jmp	.L132
 2619              	.L136:
 2620 0f22 4889C3   		movq	%rax, %rbx
 2621              	.L132:
 114:TestUnitTest++.cpp **** 	}
 2622              		.loc 4 114 0
 2623 0f25 488D4580 		leaq	-128(%rbp), %rax
 2624 0f29 4889C7   		movq	%rax, %rdi
 2625 0f2c E8000000 		call	_ZN17ScopedCurrentTestD1Ev
 2625      00
 2626 0f31 4889D8   		movq	%rbx, %rax
 2627 0f34 4889C7   		movq	%rax, %rdi
 2628              	.LEHB64:
 2629 0f37 E8000000 		call	_Unwind_Resume
 2629      00
 2630              	.LEHE64:
 2631              	.L139:
 2632 0f3c 4889C3   		movq	%rax, %rbx
 2633              	.LBE46:
 117:TestUnitTest++.cpp **** }
 2634              		.loc 4 117 0
 2635 0f3f E8000000 		call	__cxa_end_catch
 2635      00
 2636 0f44 4889D8   		movq	%rbx, %rax
 2637 0f47 4889C7   		movq	%rax, %rdi
 2638              	.LEHB65:
 2639 0f4a E8000000 		call	_Unwind_Resume
 2639      00
 2640              	.LEHE65:
 2641              	.L138:
 2642 0f4f 4889C7   		movq	%rax, %rdi
 2643 0f52 E8000000 		call	__cxa_begin_catch
 2643      00
 2644              	.LEHB66:
 2645 0f57 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 2645      00
 2646 0f5c 488B08   		movq	(%rax), %rcx
 2647 0f5f 488D45B0 		leaq	-80(%rbp), %rax
 2648 0f63 BA750000 		movl	$117, %edx
 2648      00
 2649 0f68 4889CE   		movq	%rcx, %rsi
 2650 0f6b 4889C7   		movq	%rax, %rdi
 2651 0f6e E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 2651      00
 117:TestUnitTest++.cpp **** }
 2652              		.loc 4 117 0 is_stmt 0 discriminator 1
 2653 0f73 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 2653      00
 2654 0f78 488B00   		movq	(%rax), %rax
 2655 0f7b 488D4DB0 		leaq	-80(%rbp), %rcx
 2656 0f7f BA000000 		movl	$.LC40, %edx
 2656      00
 2657 0f84 4889CE   		movq	%rcx, %rsi
 2658 0f87 4889C7   		movq	%rax, %rdi
 2659 0f8a E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 2659      00
 2660              	.LEHE66:
 2661              	.LEHB67:
 2662 0f8f E8000000 		call	__cxa_end_catch
 2662      00
 2663              	.LEHE67:
 2664              	.L140:
 2665              	.LBE47:
 2666              		.loc 4 118 0 is_stmt 1
 2667 0f94 90       		nop
 2668 0f95 4881C498 		addq	$152, %rsp
 2668      000000
 2669 0f9c 5B       		popq	%rbx
 2670 0f9d 5D       		popq	%rbp
 2671              		.cfi_def_cfa 7, 8
 2672 0f9e C3       		ret
 2673              		.cfi_endproc
 2674              	.LFE1337:
 2675              		.section	.gcc_except_table
 2676              		.align 4
 2677              	.LLSDA1337:
 2678 01a0 FF       		.byte	0xff
 2679 01a1 03       		.byte	0x3
 2680 01a2 39       		.uleb128 .LLSDATT1337-.LLSDATTD1337
 2681              	.LLSDATTD1337:
 2682 01a3 01       		.byte	0x1
 2683 01a4 31       		.uleb128 .LLSDACSE1337-.LLSDACSB1337
 2684              	.LLSDACSB1337:
 2685 01a5 1F       		.uleb128 .LEHB58-.LFB1337
 2686 01a6 1D       		.uleb128 .LEHE58-.LEHB58
 2687 01a7 00       		.uleb128 0
 2688 01a8 00       		.uleb128 0
 2689 01a9 43       		.uleb128 .LEHB59-.LFB1337
 2690 01aa 05       		.uleb128 .LEHE59-.LEHB59
 2691 01ab D601     		.uleb128 .L136-.LFB1337
 2692 01ad 00       		.uleb128 0
 2693 01ae 4F       		.uleb128 .LEHB60-.LFB1337
 2694 01af 05       		.uleb128 .LEHE60-.LEHB60
 2695 01b0 C501     		.uleb128 .L137-.LFB1337
 2696 01b2 00       		.uleb128 0
 2697 01b3 5B       		.uleb128 .LEHB61-.LFB1337
 2698 01b4 05       		.uleb128 .LEHE61-.LEHB61
 2699 01b5 D601     		.uleb128 .L136-.LFB1337
 2700 01b7 00       		.uleb128 0
 2701 01b8 67       		.uleb128 .LEHB62-.LFB1337
 2702 01b9 05       		.uleb128 .LEHE62-.LEHB62
 2703 01ba 00       		.uleb128 0
 2704 01bb 00       		.uleb128 0
 2705 01bc 6C       		.uleb128 .LEHB63-.LFB1337
 2706 01bd 54       		.uleb128 .LEHE63-.LEHB63
 2707 01be 8302     		.uleb128 .L138-.LFB1337
 2708 01c0 01       		.uleb128 0x1
 2709 01c1 EB01     		.uleb128 .LEHB64-.LFB1337
 2710 01c3 05       		.uleb128 .LEHE64-.LEHB64
 2711 01c4 00       		.uleb128 0
 2712 01c5 00       		.uleb128 0
 2713 01c6 FE01     		.uleb128 .LEHB65-.LFB1337
 2714 01c8 05       		.uleb128 .LEHE65-.LEHB65
 2715 01c9 00       		.uleb128 0
 2716 01ca 00       		.uleb128 0
 2717 01cb 8B02     		.uleb128 .LEHB66-.LFB1337
 2718 01cd 38       		.uleb128 .LEHE66-.LEHB66
 2719 01ce F001     		.uleb128 .L139-.LFB1337
 2720 01d0 00       		.uleb128 0
 2721 01d1 C302     		.uleb128 .LEHB67-.LFB1337
 2722 01d3 05       		.uleb128 .LEHE67-.LEHB67
 2723 01d4 00       		.uleb128 0
 2724 01d5 00       		.uleb128 0
 2725              	.LLSDACSE1337:
 2726 01d6 01       		.byte	0x1
 2727 01d7 00       		.byte	0
 2728              		.align 4
 2729 01d8 00000000 		.long	0
 2730              	
 2731              	.LLSDATT1337:
 2732              		.text
 2734 0f9f 90       		.align 2
 2736              	_ZN12_GLOBAL__N_113SimpleFixtureC2Ev:
 2737              	.LFB1343:
 119:TestUnitTest++.cpp **** 
 120:TestUnitTest++.cpp **** struct SimpleFixture
 121:TestUnitTest++.cpp **** {
 122:TestUnitTest++.cpp ****     SimpleFixture()
 2738              		.loc 4 122 0
 2739              		.cfi_startproc
 2740 0fa0 55       		pushq	%rbp
 2741              		.cfi_def_cfa_offset 16
 2742              		.cfi_offset 6, -16
 2743 0fa1 4889E5   		movq	%rsp, %rbp
 2744              		.cfi_def_cfa_register 6
 2745 0fa4 48897DF8 		movq	%rdi, -8(%rbp)
 2746              	.LBB48:
 123:TestUnitTest++.cpp ****     {
 124:TestUnitTest++.cpp ****         ++instanceCount;
 2747              		.loc 4 124 0
 2748 0fa8 8B050000 		movl	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip), %eax
 2748      0000
 2749 0fae 83C001   		addl	$1, %eax
 2750 0fb1 89050000 		movl	%eax, _ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip)
 2750      0000
 2751              	.LBE48:
 125:TestUnitTest++.cpp ****     }
 2752              		.loc 4 125 0
 2753 0fb7 5D       		popq	%rbp
 2754              		.cfi_def_cfa 7, 8
 2755 0fb8 C3       		ret
 2756              		.cfi_endproc
 2757              	.LFE1343:
 2759 0fb9 90       		.align 2
 2761              	_ZN12_GLOBAL__N_113SimpleFixtureD2Ev:
 2762              	.LFB1346:
 126:TestUnitTest++.cpp ****     ~SimpleFixture()
 2763              		.loc 4 126 0
 2764              		.cfi_startproc
 2765 0fba 55       		pushq	%rbp
 2766              		.cfi_def_cfa_offset 16
 2767              		.cfi_offset 6, -16
 2768 0fbb 4889E5   		movq	%rsp, %rbp
 2769              		.cfi_def_cfa_register 6
 2770 0fbe 48897DF8 		movq	%rdi, -8(%rbp)
 2771              	.LBB49:
 127:TestUnitTest++.cpp ****     {
 128:TestUnitTest++.cpp ****         --instanceCount;
 2772              		.loc 4 128 0
 2773 0fc2 8B050000 		movl	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip), %eax
 2773      0000
 2774 0fc8 83E801   		subl	$1, %eax
 2775 0fcb 89050000 		movl	%eax, _ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip)
 2775      0000
 2776              	.LBE49:
 129:TestUnitTest++.cpp ****     }
 2777              		.loc 4 129 0
 2778 0fd1 5D       		popq	%rbp
 2779              		.cfi_def_cfa 7, 8
 2780 0fd2 C3       		ret
 2781              		.cfi_endproc
 2782              	.LFE1346:
 2784              		.local	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE
 2785              		.comm	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE,4,4
 2786 0fd3 90       		.align 2
 2788              	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC2ERKN8UnitTest11TestDetailsE:
 2789              	.LFB1349:
 130:TestUnitTest++.cpp **** 
 131:TestUnitTest++.cpp ****     static int instanceCount;
 132:TestUnitTest++.cpp **** };
 133:TestUnitTest++.cpp **** 
 134:TestUnitTest++.cpp **** int SimpleFixture::instanceCount = 0;
 135:TestUnitTest++.cpp **** 
 136:TestUnitTest++.cpp **** TEST_FIXTURE(SimpleFixture, DefaultFixtureCtorIsCalled)
 2790              		.loc 4 136 0
 2791              		.cfi_startproc
 2792 0fd4 55       		pushq	%rbp
 2793              		.cfi_def_cfa_offset 16
 2794              		.cfi_offset 6, -16
 2795 0fd5 4889E5   		movq	%rsp, %rbp
 2796              		.cfi_def_cfa_register 6
 2797 0fd8 4883EC10 		subq	$16, %rsp
 2798 0fdc 48897DF8 		movq	%rdi, -8(%rbp)
 2799 0fe0 488975F0 		movq	%rsi, -16(%rbp)
 2800              	.LBB50:
 2801              		.loc 4 136 0
 2802 0fe4 488B45F8 		movq	-8(%rbp), %rax
 2803 0fe8 4889C7   		movq	%rax, %rdi
 2804 0feb E8B0FFFF 		call	_ZN12_GLOBAL__N_113SimpleFixtureC2Ev
 2804      FF
 2805 0ff0 488B45F8 		movq	-8(%rbp), %rax
 2806 0ff4 488B55F0 		movq	-16(%rbp), %rdx
 2807 0ff8 488910   		movq	%rdx, (%rax)
 2808              	.LBE50:
 2809 0ffb C9       		leave
 2810              		.cfi_def_cfa 7, 8
 2811 0ffc C3       		ret
 2812              		.cfi_endproc
 2813              	.LFE1349:
 2815              		.set	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC1ERKN8UnitTest11TestDetailsE
 2816              		.section	.rodata
 2817              	.LC44:
 2818 0405 44656661 		.string	"DefaultFixtureCtorIsCalled"
 2818      756C7446 
 2818      69787475 
 2818      72654374 
 2818      6F724973 
 2819              		.text
 2820 0ffd 90       		.align 2
 2822              	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC2Ev:
 2823              	.LFB1352:
 2824              		.loc 4 136 0
 2825              		.cfi_startproc
 2826 0ffe 55       		pushq	%rbp
 2827              		.cfi_def_cfa_offset 16
 2828              		.cfi_offset 6, -16
 2829 0fff 4889E5   		movq	%rsp, %rbp
 2830              		.cfi_def_cfa_register 6
 2831 1002 4883EC10 		subq	$16, %rsp
 2832 1006 48897DF8 		movq	%rdi, -8(%rbp)
 2833              	.LBB51:
 2834              		.loc 4 136 0
 2835 100a E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 2835      00
 2836 100f 4889C2   		movq	%rax, %rdx
 2837 1012 488B45F8 		movq	-8(%rbp), %rax
 2838 1016 41B88800 		movl	$136, %r8d
 2838      0000
 2839 101c B9000000 		movl	$.LC1, %ecx
 2839      00
 2840 1021 BE000000 		movl	$.LC44, %esi
 2840      00
 2841 1026 4889C7   		movq	%rax, %rdi
 2842 1029 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 2842      00
 2843 102e 488B45F8 		movq	-8(%rbp), %rax
 2844 1032 48C70000 		movq	$_ZTVN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE+16, (%rax)
 2844      000000
 2845              	.LBE51:
 2846 1039 C9       		leave
 2847              		.cfi_def_cfa 7, 8
 2848 103a C3       		ret
 2849              		.cfi_endproc
 2850              	.LFE1352:
 2852              		.set	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC1Ev,_ZN12_GLOBAL__N_143TestSim
 2853              		.local	_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE
 2854              		.comm	_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE,56,32
 2855              		.local	_ZN12_GLOBAL__N_144adderSimpleFixtureDefaultFixtureCtorIsCalledE
 2856              		.comm	_ZN12_GLOBAL__N_144adderSimpleFixtureDefaultFixtureCtorIsCalledE,1,1
 2857 103b 90       		.align 2
 2859              	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD2Ev:
 2860              	.LFB1356:
 2861              		.loc 4 136 0
 2862              		.cfi_startproc
 2863 103c 55       		pushq	%rbp
 2864              		.cfi_def_cfa_offset 16
 2865              		.cfi_offset 6, -16
 2866 103d 4889E5   		movq	%rsp, %rbp
 2867              		.cfi_def_cfa_register 6
 2868 1040 4883EC08 		subq	$8, %rsp
 2869 1044 48897DF8 		movq	%rdi, -8(%rbp)
 2870              	.LBB52:
 2871              		.loc 4 136 0
 2872 1048 488B45F8 		movq	-8(%rbp), %rax
 2873 104c 4889C7   		movq	%rax, %rdi
 2874 104f E866FFFF 		call	_ZN12_GLOBAL__N_113SimpleFixtureD2Ev
 2874      FF
 2875              	.LBE52:
 2876 1054 C9       		leave
 2877              		.cfi_def_cfa 7, 8
 2878 1055 C3       		ret
 2879              		.cfi_endproc
 2880              	.LFE1356:
 2882              		.set	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD1Ev,_ZN12_GLOBAL__N_145Simpl
 2883              		.section	.rodata
 2884              	.LC45:
 2885 0420 556E6861 		.string	"Unhandled exception: "
 2885      6E646C65 
 2885      64206578 
 2885      63657074 
 2885      696F6E3A 
 2886 0436 0000     		.align 8
 2887              	.LC46:
 2888 0438 556E6861 		.string	"Unhandled exception while destroying fixture SimpleFixture"
 2888      6E646C65 
 2888      64206578 
 2888      63657074 
 2888      696F6E20 
 2889 0473 00000000 		.align 8
 2889      00
 2890              	.LC47:
 2891 0478 556E6861 		.string	"Unhandled exception while constructing fixture SimpleFixture"
 2891      6E646C65 
 2891      64206578 
 2891      63657074 
 2891      696F6E20 
 2892              		.text
 2893              		.align 2
 2895              	_ZNK12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalled7RunImplEv:
 2896              	.LFB1354:
 2897              		.loc 4 136 0
 2898              		.cfi_startproc
 2899              		.cfi_personality 0x3,__gxx_personality_v0
 2900              		.cfi_lsda 0x3,.LLSDA1354
 2901 1056 55       		pushq	%rbp
 2902              		.cfi_def_cfa_offset 16
 2903              		.cfi_offset 6, -16
 2904 1057 4889E5   		movq	%rsp, %rbp
 2905              		.cfi_def_cfa_register 6
 2906 105a 4154     		pushq	%r12
 2907 105c 53       		pushq	%rbx
 2908 105d 4881ECA0 		subq	$416, %rsp
 2908      010000
 2909              		.cfi_offset 12, -24
 2910              		.cfi_offset 3, -32
 2911 1064 4889BD58 		movq	%rdi, -424(%rbp)
 2911      FEFFFF
 2912              	.LBB53:
 2913              		.loc 4 136 0
 2914 106b C6856FFE 		movb	$0, -401(%rbp)
 2914      FFFF00
 2915              	.LBB54:
 2916 1072 488B8558 		movq	-424(%rbp), %rax
 2916      FEFFFF
 2917 1079 488D5008 		leaq	8(%rax), %rdx
 2918 107d 488D8580 		leaq	-384(%rbp), %rax
 2918      FEFFFF
 2919 1084 4889D6   		movq	%rdx, %rsi
 2920 1087 4889C7   		movq	%rax, %rdi
 2921 108a E845FFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC1ERKN8UnitTest11TestDetailsE
 2921      FF
 2922 108f C6856FFE 		movb	$1, -401(%rbp)
 2922      FFFF01
 2923 1096 488B8558 		movq	-424(%rbp), %rax
 2923      FEFFFF
 2924 109d 488D5008 		leaq	8(%rax), %rdx
 2925 10a1 488D8580 		leaq	-384(%rbp), %rax
 2925      FEFFFF
 2926 10a8 4889D6   		movq	%rdx, %rsi
 2927 10ab 4889C7   		movq	%rax, %rdi
 2928              	.LEHB68:
 2929 10ae E8730800 		call	_ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperEEEvR
 2929      00
 2930              	.LEHE68:
 2931              		.loc 4 136 0 is_stmt 0 discriminator 1
 2932 10b3 488D8580 		leaq	-384(%rbp), %rax
 2932      FEFFFF
 2933 10ba 4889C7   		movq	%rax, %rdi
 2934 10bd E87AFFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD1Ev
 2934      FF
 2935              	.LBE54:
 2936              	.LBE53:
 2937 10c2 E9620200 		jmp	.L166
 2937      00
 2938              	.L160:
 2939 10c7 4989C4   		movq	%rax, %r12
 2940 10ca 4889D3   		movq	%rdx, %rbx
 2941              	.LBB62:
 2942              	.LBB55:
 2943              		.loc 4 136 0
 2944 10cd 488D8580 		leaq	-384(%rbp), %rax
 2944      FEFFFF
 2945 10d4 4889C7   		movq	%rax, %rdi
 2946 10d7 E860FFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD1Ev
 2946      FF
 2947 10dc 4C89E0   		movq	%r12, %rax
 2948 10df 4889DA   		movq	%rbx, %rdx
 2949 10e2 4883FA01 		cmpq	$1, %rdx
 2950 10e6 745C     		je	.L151
 2951 10e8 4883FA02 		cmpq	$2, %rdx
 2952 10ec 0F84F400 		je	.L152
 2952      0000
 2953 10f2 E9980100 		jmp	.L165
 2953      00
 2954              	.L161:
 2955 10f7 4889C3   		movq	%rax, %rbx
 2956              	.LBE55:
 2957              	.LBB56:
 2958 10fa E8000000 		call	__cxa_end_catch
 2958      00
 2959 10ff 4889D8   		movq	%rbx, %rax
 2960 1102 4889C7   		movq	%rax, %rdi
 2961              	.LEHB69:
 2962 1105 E8000000 		call	_Unwind_Resume
 2962      00
 2963              	.LEHE69:
 2964              	.L162:
 2965 110a 4889C3   		movq	%rax, %rbx
 2966              	.LBE56:
 2967              	.LBB57:
 2968              	.LBB58:
 2969 110d 488D8580 		leaq	-384(%rbp), %rax
 2969      FEFFFF
 2970 1114 4889C7   		movq	%rax, %rdi
 2971 1117 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 2971      00
 2972 111c EB03     		jmp	.L155
 2973              	.L163:
 2974 111e 4889C3   		movq	%rax, %rbx
 2975              	.L155:
 2976              	.LBE58:
 2977 1121 E8000000 		call	__cxa_end_catch
 2977      00
 2978 1126 4889D8   		movq	%rbx, %rax
 2979 1129 4889C7   		movq	%rax, %rdi
 2980              	.LEHB70:
 2981 112c E8000000 		call	_Unwind_Resume
 2981      00
 2982              	.LEHE70:
 2983              	.L164:
 2984 1131 4889C3   		movq	%rax, %rbx
 2985              	.LBE57:
 2986 1134 E8000000 		call	__cxa_end_catch
 2986      00
 2987 1139 4889D8   		movq	%rbx, %rax
 2988 113c 4889C7   		movq	%rax, %rdi
 2989              	.LEHB71:
 2990 113f E8000000 		call	_Unwind_Resume
 2990      00
 2991              	.LEHE71:
 2992              	.L151:
 2993              	.LBB60:
 2994 1144 4889C7   		movq	%rax, %rdi
 2995 1147 E8000000 		call	__cxa_begin_catch
 2995      00
 2996 114c 48898570 		movq	%rax, -400(%rbp)
 2996      FEFFFF
 2997 1153 488B8570 		movq	-400(%rbp), %rax
 2997      FEFFFF
 2998 115a 488B00   		movq	(%rax), %rax
 2999 115d 4883C010 		addq	$16, %rax
 3000 1161 488B00   		movq	(%rax), %rax
 3001 1164 488B9570 		movq	-400(%rbp), %rdx
 3001      FEFFFF
 3002 116b 4889D7   		movq	%rdx, %rdi
 3003 116e FFD0     		call	*%rax
 3004 1170 4889C3   		movq	%rax, %rbx
 3005 1173 488B8570 		movq	-400(%rbp), %rax
 3005      FEFFFF
 3006 117a 4889C7   		movq	%rax, %rdi
 3007              	.LEHB72:
 3008 117d E8000000 		call	_ZNK8UnitTest15AssertException10LineNumberEv
 3008      00
 3009 1182 4189C4   		movl	%eax, %r12d
 3010 1185 488B8570 		movq	-400(%rbp), %rax
 3010      FEFFFF
 3011 118c 4889C7   		movq	%rax, %rdi
 3012 118f E8000000 		call	_ZNK8UnitTest15AssertException8FilenameEv
 3012      00
 3013              		.loc 4 136 0 discriminator 1
 3014 1194 4889C1   		movq	%rax, %rcx
 3015 1197 488B8558 		movq	-424(%rbp), %rax
 3015      FEFFFF
 3016 119e 488B5008 		movq	8(%rax), %rdx
 3017 11a2 488B8558 		movq	-424(%rbp), %rax
 3017      FEFFFF
 3018 11a9 488B7010 		movq	16(%rax), %rsi
 3019 11ad 488D8580 		leaq	-384(%rbp), %rax
 3019      FEFFFF
 3020 11b4 4589E0   		movl	%r12d, %r8d
 3021 11b7 4889C7   		movq	%rax, %rdi
 3022 11ba E8000000 		call	_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i
 3022      00
 3023              		.loc 4 136 0 discriminator 3
 3024 11bf E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3024      00
 3025 11c4 488B00   		movq	(%rax), %rax
 3026 11c7 488D8D80 		leaq	-384(%rbp), %rcx
 3026      FEFFFF
 3027 11ce 4889DA   		movq	%rbx, %rdx
 3028 11d1 4889CE   		movq	%rcx, %rsi
 3029 11d4 4889C7   		movq	%rax, %rdi
 3030 11d7 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3030      00
 3031              	.LEHE72:
 3032              		.loc 4 136 0 discriminator 1
 3033 11dc E8000000 		call	__cxa_end_catch
 3033      00
 3034              	.LBE60:
 3035              	.LBE62:
 3036 11e1 E9430100 		jmp	.L166
 3036      00
 3037              	.L152:
 3038              	.LBB63:
 3039              	.LBB61:
 3040              		.loc 4 136 0
 3041 11e6 4889C7   		movq	%rax, %rdi
 3042 11e9 E8000000 		call	__cxa_begin_catch
 3042      00
 3043 11ee 48898578 		movq	%rax, -392(%rbp)
 3043      FEFFFF
 3044              	.LBB59:
 3045 11f5 488D8580 		leaq	-384(%rbp), %rax
 3045      FEFFFF
 3046 11fc 4889C7   		movq	%rax, %rdi
 3047              	.LEHB73:
 3048 11ff E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 3048      00
 3049              	.LEHE73:
 3050              		.loc 4 136 0 discriminator 1
 3051 1204 488B8578 		movq	-392(%rbp), %rax
 3051      FEFFFF
 3052 120b 488B00   		movq	(%rax), %rax
 3053 120e 4883C010 		addq	$16, %rax
 3054 1212 488B00   		movq	(%rax), %rax
 3055 1215 488B9578 		movq	-392(%rbp), %rdx
 3055      FEFFFF
 3056 121c 4889D7   		movq	%rdx, %rdi
 3057 121f FFD0     		call	*%rax
 3058 1221 4889C3   		movq	%rax, %rbx
 3059 1224 488D8580 		leaq	-384(%rbp), %rax
 3059      FEFFFF
 3060 122b BE000000 		movl	$.LC45, %esi
 3060      00
 3061 1230 4889C7   		movq	%rax, %rdi
 3062              	.LEHB74:
 3063 1233 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 3063      00
 3064 1238 4889DE   		movq	%rbx, %rsi
 3065 123b 4889C7   		movq	%rax, %rdi
 3066 123e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 3066      00
 3067 1243 488D8580 		leaq	-384(%rbp), %rax
 3067      FEFFFF
 3068 124a 4889C7   		movq	%rax, %rdi
 3069 124d E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv
 3069      00
 3070 1252 4889C3   		movq	%rax, %rbx
 3071 1255 488B8558 		movq	-424(%rbp), %rax
 3071      FEFFFF
 3072 125c 4C8D6008 		leaq	8(%rax), %r12
 3073 1260 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3073      00
 3074 1265 488B00   		movq	(%rax), %rax
 3075 1268 4889DA   		movq	%rbx, %rdx
 3076 126b 4C89E6   		movq	%r12, %rsi
 3077 126e 4889C7   		movq	%rax, %rdi
 3078 1271 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3078      00
 3079              	.LEHE74:
 3080 1276 488D8580 		leaq	-384(%rbp), %rax
 3080      FEFFFF
 3081 127d 4889C7   		movq	%rax, %rdi
 3082              	.LEHB75:
 3083 1280 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 3083      00
 3084              	.LEHE75:
 3085              	.LBE59:
 3086              		.loc 4 136 0
 3087 1285 E8000000 		call	__cxa_end_catch
 3087      00
 3088              	.LBE61:
 3089              	.LBE63:
 3090 128a E99A0000 		jmp	.L166
 3090      00
 3091              	.L165:
 3092              	.LBB64:
 3093 128f 4889C7   		movq	%rax, %rdi
 3094 1292 E8000000 		call	__cxa_begin_catch
 3094      00
 3095 1297 80BD6FFE 		cmpb	$0, -401(%rbp)
 3095      FFFF00
 3096 129e 7443     		je	.L158
 3097              		.loc 4 136 0 discriminator 1
 3098 12a0 488B8558 		movq	-424(%rbp), %rax
 3098      FEFFFF
 3099 12a7 488D4808 		leaq	8(%rax), %rcx
 3100 12ab 488D8580 		leaq	-384(%rbp), %rax
 3100      FEFFFF
 3101 12b2 BA880000 		movl	$136, %edx
 3101      00
 3102 12b7 4889CE   		movq	%rcx, %rsi
 3103 12ba 4889C7   		movq	%rax, %rdi
 3104              	.LEHB76:
 3105 12bd E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3105      00
 3106 12c2 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3106      00
 3107 12c7 488B00   		movq	(%rax), %rax
 3108 12ca 488D8D80 		leaq	-384(%rbp), %rcx
 3108      FEFFFF
 3109 12d1 BA000000 		movl	$.LC46, %edx
 3109      00
 3110 12d6 4889CE   		movq	%rcx, %rsi
 3111 12d9 4889C7   		movq	%rax, %rdi
 3112 12dc E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3112      00
 3113 12e1 EB41     		jmp	.L159
 3114              	.L158:
 3115              		.loc 4 136 0 discriminator 2
 3116 12e3 488B8558 		movq	-424(%rbp), %rax
 3116      FEFFFF
 3117 12ea 488D4808 		leaq	8(%rax), %rcx
 3118 12ee 488D8580 		leaq	-384(%rbp), %rax
 3118      FEFFFF
 3119 12f5 BA880000 		movl	$136, %edx
 3119      00
 3120 12fa 4889CE   		movq	%rcx, %rsi
 3121 12fd 4889C7   		movq	%rax, %rdi
 3122 1300 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3122      00
 3123              		.loc 4 136 0 discriminator 1
 3124 1305 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3124      00
 3125 130a 488B00   		movq	(%rax), %rax
 3126 130d 488D8D80 		leaq	-384(%rbp), %rcx
 3126      FEFFFF
 3127 1314 BA000000 		movl	$.LC47, %edx
 3127      00
 3128 1319 4889CE   		movq	%rcx, %rsi
 3129 131c 4889C7   		movq	%rax, %rdi
 3130 131f E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3130      00
 3131              	.LEHE76:
 3132              	.L159:
 3133              	.LEHB77:
 3134 1324 E8000000 		call	__cxa_end_catch
 3134      00
 3135              	.LEHE77:
 3136              	.L166:
 3137              	.LBE64:
 3138              		.loc 4 136 0
 3139 1329 90       		nop
 3140 132a 4881C4A0 		addq	$416, %rsp
 3140      010000
 3141 1331 5B       		popq	%rbx
 3142 1332 415C     		popq	%r12
 3143 1334 5D       		popq	%rbp
 3144              		.cfi_def_cfa 7, 8
 3145 1335 C3       		ret
 3146              		.cfi_endproc
 3147              	.LFE1354:
 3148              		.section	.gcc_except_table
 3149              		.align 4
 3150              	.LLSDA1354:
 3151 01dc FF       		.byte	0xff
 3152 01dd 03       		.byte	0x3
 3153 01de 4D       		.uleb128 .LLSDATT1354-.LLSDATTD1354
 3154              	.LLSDATTD1354:
 3155 01df 01       		.byte	0x1
 3156 01e0 36       		.uleb128 .LLSDACSE1354-.LLSDACSB1354
 3157              	.LLSDACSB1354:
 3158 01e1 58       		.uleb128 .LEHB68-.LFB1354
 3159 01e2 05       		.uleb128 .LEHE68-.LEHB68
 3160 01e3 71       		.uleb128 .L160-.LFB1354
 3161 01e4 07       		.uleb128 0x7
 3162 01e5 AF01     		.uleb128 .LEHB69-.LFB1354
 3163 01e7 05       		.uleb128 .LEHE69-.LEHB69
 3164 01e8 00       		.uleb128 0
 3165 01e9 00       		.uleb128 0
 3166 01ea D601     		.uleb128 .LEHB70-.LFB1354
 3167 01ec 05       		.uleb128 .LEHE70-.LEHB70
 3168 01ed 00       		.uleb128 0
 3169 01ee 00       		.uleb128 0
 3170 01ef E901     		.uleb128 .LEHB71-.LFB1354
 3171 01f1 05       		.uleb128 .LEHE71-.LEHB71
 3172 01f2 00       		.uleb128 0
 3173 01f3 00       		.uleb128 0
 3174 01f4 A702     		.uleb128 .LEHB72-.LFB1354
 3175 01f6 5F       		.uleb128 .LEHE72-.LEHB72
 3176 01f7 A101     		.uleb128 .L161-.LFB1354
 3177 01f9 00       		.uleb128 0
 3178 01fa A903     		.uleb128 .LEHB73-.LFB1354
 3179 01fc 05       		.uleb128 .LEHE73-.LEHB73
 3180 01fd C801     		.uleb128 .L163-.LFB1354
 3181 01ff 00       		.uleb128 0
 3182 0200 DD03     		.uleb128 .LEHB74-.LFB1354
 3183 0202 43       		.uleb128 .LEHE74-.LEHB74
 3184 0203 B401     		.uleb128 .L162-.LFB1354
 3185 0205 00       		.uleb128 0
 3186 0206 AA04     		.uleb128 .LEHB75-.LFB1354
 3187 0208 05       		.uleb128 .LEHE75-.LEHB75
 3188 0209 C801     		.uleb128 .L163-.LFB1354
 3189 020b 00       		.uleb128 0
 3190 020c E704     		.uleb128 .LEHB76-.LFB1354
 3191 020e 67       		.uleb128 .LEHE76-.LEHB76
 3192 020f DB01     		.uleb128 .L164-.LFB1354
 3193 0211 00       		.uleb128 0
 3194 0212 CE05     		.uleb128 .LEHB77-.LFB1354
 3195 0214 05       		.uleb128 .LEHE77-.LEHB77
 3196 0215 00       		.uleb128 0
 3197 0216 00       		.uleb128 0
 3198              	.LLSDACSE1354:
 3199 0217 03       		.byte	0x3
 3200 0218 00       		.byte	0
 3201 0219 02       		.byte	0x2
 3202 021a 7D       		.byte	0x7d
 3203 021b 01       		.byte	0x1
 3204 021c 7D       		.byte	0x7d
 3205 021d 00       		.byte	0
 3206 021e 7D       		.byte	0x7d
 3207 021f 00       		.align 4
 3208 0220 00000000 		.long	0
 3209              	
 3210 0224 00000000 		.long	_ZTISt9exception
 3211 0228 00000000 		.long	_ZTIN8UnitTest15AssertExceptionE
 3212              	.LLSDATT1354:
 3213              		.text
 3215              		.section	.rodata
 3216 04b5 000000   		.align 8
 3217              	.LC48:
 3218 04b8 53696D70 		.string	"SimpleFixture::instanceCount > 0"
 3218      6C654669 
 3218      78747572 
 3218      653A3A69 
 3218      6E737461 
 3219 04d9 00000000 		.align 8
 3219      000000
 3220              	.LC49:
 3221 04e0 556E6861 		.string	"Unhandled exception in CHECK(SimpleFixture::instanceCount > 0)"
 3221      6E646C65 
 3221      64206578 
 3221      63657074 
 3221      696F6E20 
 3222              		.text
 3223              		.align 2
 3225              	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelper7RunImplEv:
 3226              	.LFB1358:
 137:TestUnitTest++.cpp **** {
 3227              		.loc 4 137 0 is_stmt 1
 3228              		.cfi_startproc
 3229              		.cfi_personality 0x3,__gxx_personality_v0
 3230              		.cfi_lsda 0x3,.LLSDA1358
 3231 1336 55       		pushq	%rbp
 3232              		.cfi_def_cfa_offset 16
 3233              		.cfi_offset 6, -16
 3234 1337 4889E5   		movq	%rsp, %rbp
 3235              		.cfi_def_cfa_register 6
 3236 133a 53       		pushq	%rbx
 3237 133b 4883EC38 		subq	$56, %rsp
 3238              		.cfi_offset 3, -24
 3239 133f 48897DC8 		movq	%rdi, -56(%rbp)
 138:TestUnitTest++.cpp ****     CHECK(SimpleFixture::instanceCount > 0);
 3240              		.loc 4 138 0
 3241 1343 8B050000 		movl	_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE(%rip), %eax
 3241      0000
 3242 1349 85C0     		testl	%eax, %eax
 3243 134b 0F9FC0   		setg	%al
 3244 134e 0FB6C0   		movzbl	%al, %eax
 3245 1351 89C7     		movl	%eax, %edi
 3246 1353 E8000000 		call	_ZN8UnitTest5CheckIbEEbT_
 3246      00
 3247 1358 83F001   		xorl	$1, %eax
 3248 135b 84C0     		testb	%al, %al
 3249 135d 0F849300 		je	.L167
 3249      0000
 3250              	.LEHB78:
 3251              		.loc 4 138 0 is_stmt 0 discriminator 1
 3252 1363 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 3252      00
 3253 1368 488B08   		movq	(%rax), %rcx
 3254 136b 488D45D0 		leaq	-48(%rbp), %rax
 3255 136f BA8A0000 		movl	$138, %edx
 3255      00
 3256 1374 4889CE   		movq	%rcx, %rsi
 3257 1377 4889C7   		movq	%rax, %rdi
 3258 137a E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3258      00
 3259 137f E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3259      00
 3260 1384 488B00   		movq	(%rax), %rax
 3261 1387 488D4DD0 		leaq	-48(%rbp), %rcx
 3262 138b BA000000 		movl	$.LC48, %edx
 3262      00
 3263 1390 4889CE   		movq	%rcx, %rsi
 3264 1393 4889C7   		movq	%rax, %rdi
 3265 1396 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3265      00
 3266              	.LEHE78:
 3267 139b EB59     		jmp	.L167
 3268              	.L172:
 3269 139d 4889C3   		movq	%rax, %rbx
 3270              		.loc 4 138 0
 3271 13a0 E8000000 		call	__cxa_end_catch
 3271      00
 3272 13a5 4889D8   		movq	%rbx, %rax
 3273 13a8 4889C7   		movq	%rax, %rdi
 3274              	.LEHB79:
 3275 13ab E8000000 		call	_Unwind_Resume
 3275      00
 3276              	.LEHE79:
 3277              	.L171:
 3278 13b0 4889C7   		movq	%rax, %rdi
 3279 13b3 E8000000 		call	__cxa_begin_catch
 3279      00
 3280              	.LEHB80:
 3281 13b8 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 3281      00
 3282 13bd 488B08   		movq	(%rax), %rcx
 3283 13c0 488D45D0 		leaq	-48(%rbp), %rax
 3284 13c4 BA8A0000 		movl	$138, %edx
 3284      00
 3285 13c9 4889CE   		movq	%rcx, %rsi
 3286 13cc 4889C7   		movq	%rax, %rdi
 3287 13cf E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3287      00
 3288              		.loc 4 138 0 discriminator 1
 3289 13d4 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3289      00
 3290 13d9 488B00   		movq	(%rax), %rax
 3291 13dc 488D4DD0 		leaq	-48(%rbp), %rcx
 3292 13e0 BA000000 		movl	$.LC49, %edx
 3292      00
 3293 13e5 4889CE   		movq	%rcx, %rsi
 3294 13e8 4889C7   		movq	%rax, %rdi
 3295 13eb E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3295      00
 3296              	.LEHE80:
 3297              	.LEHB81:
 3298 13f0 E8000000 		call	__cxa_end_catch
 3298      00
 3299              	.LEHE81:
 139:TestUnitTest++.cpp **** }
 3300              		.loc 4 139 0 is_stmt 1 discriminator 1
 3301 13f5 90       		nop
 3302              	.L167:
 3303              		.loc 4 139 0 is_stmt 0
 3304 13f6 4883C438 		addq	$56, %rsp
 3305 13fa 5B       		popq	%rbx
 3306 13fb 5D       		popq	%rbp
 3307              		.cfi_def_cfa 7, 8
 3308 13fc C3       		ret
 3309              		.cfi_endproc
 3310              	.LFE1358:
 3311              		.section	.gcc_except_table
 3312              		.align 4
 3313              	.LLSDA1358:
 3314 022c FF       		.byte	0xff
 3315 022d 03       		.byte	0x3
 3316 022e 1D       		.uleb128 .LLSDATT1358-.LLSDATTD1358
 3317              	.LLSDATTD1358:
 3318 022f 01       		.byte	0x1
 3319 0230 12       		.uleb128 .LLSDACSE1358-.LLSDACSB1358
 3320              	.LLSDACSB1358:
 3321 0231 2D       		.uleb128 .LEHB78-.LFB1358
 3322 0232 38       		.uleb128 .LEHE78-.LEHB78
 3323 0233 7A       		.uleb128 .L171-.LFB1358
 3324 0234 01       		.uleb128 0x1
 3325 0235 75       		.uleb128 .LEHB79-.LFB1358
 3326 0236 05       		.uleb128 .LEHE79-.LEHB79
 3327 0237 00       		.uleb128 0
 3328 0238 00       		.uleb128 0
 3329 0239 8201     		.uleb128 .LEHB80-.LFB1358
 3330 023b 38       		.uleb128 .LEHE80-.LEHB80
 3331 023c 67       		.uleb128 .L172-.LFB1358
 3332 023d 00       		.uleb128 0
 3333 023e BA01     		.uleb128 .LEHB81-.LFB1358
 3334 0240 05       		.uleb128 .LEHE81-.LEHB81
 3335 0241 00       		.uleb128 0
 3336 0242 00       		.uleb128 0
 3337              	.LLSDACSE1358:
 3338 0243 01       		.byte	0x1
 3339 0244 00       		.byte	0
 3340 0245 000000   		.align 4
 3341 0248 00000000 		.long	0
 3342              	
 3343              	.LLSDATT1358:
 3344              		.text
 3346 13fd 90       		.align 2
 3348              	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC2ERKN8UnitTest11TestDetailsE:
 3349              	.LFB1360:
 140:TestUnitTest++.cpp **** 
 141:TestUnitTest++.cpp **** TEST_FIXTURE(SimpleFixture, OnlyOneFixtureAliveAtATime)
 3350              		.loc 4 141 0 is_stmt 1
 3351              		.cfi_startproc
 3352 13fe 55       		pushq	%rbp
 3353              		.cfi_def_cfa_offset 16
 3354              		.cfi_offset 6, -16
 3355 13ff 4889E5   		movq	%rsp, %rbp
 3356              		.cfi_def_cfa_register 6
 3357 1402 4883EC10 		subq	$16, %rsp
 3358 1406 48897DF8 		movq	%rdi, -8(%rbp)
 3359 140a 488975F0 		movq	%rsi, -16(%rbp)
 3360              	.LBB65:
 3361              		.loc 4 141 0
 3362 140e 488B45F8 		movq	-8(%rbp), %rax
 3363 1412 4889C7   		movq	%rax, %rdi
 3364 1415 E886FBFF 		call	_ZN12_GLOBAL__N_113SimpleFixtureC2Ev
 3364      FF
 3365 141a 488B45F8 		movq	-8(%rbp), %rax
 3366 141e 488B55F0 		movq	-16(%rbp), %rdx
 3367 1422 488910   		movq	%rdx, (%rax)
 3368              	.LBE65:
 3369 1425 C9       		leave
 3370              		.cfi_def_cfa 7, 8
 3371 1426 C3       		ret
 3372              		.cfi_endproc
 3373              	.LFE1360:
 3375              		.set	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC1ERKN8UnitTest11TestDetailsE
 3376              		.section	.rodata
 3377              	.LC50:
 3378 051f 4F6E6C79 		.string	"OnlyOneFixtureAliveAtATime"
 3378      4F6E6546 
 3378      69787475 
 3378      7265416C 
 3378      69766541 
 3379              		.text
 3380 1427 90       		.align 2
 3382              	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC2Ev:
 3383              	.LFB1363:
 3384              		.loc 4 141 0
 3385              		.cfi_startproc
 3386 1428 55       		pushq	%rbp
 3387              		.cfi_def_cfa_offset 16
 3388              		.cfi_offset 6, -16
 3389 1429 4889E5   		movq	%rsp, %rbp
 3390              		.cfi_def_cfa_register 6
 3391 142c 4883EC10 		subq	$16, %rsp
 3392 1430 48897DF8 		movq	%rdi, -8(%rbp)
 3393              	.LBB66:
 3394              		.loc 4 141 0
 3395 1434 E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 3395      00
 3396 1439 4889C2   		movq	%rax, %rdx
 3397 143c 488B45F8 		movq	-8(%rbp), %rax
 3398 1440 41B88D00 		movl	$141, %r8d
 3398      0000
 3399 1446 B9000000 		movl	$.LC1, %ecx
 3399      00
 3400 144b BE000000 		movl	$.LC50, %esi
 3400      00
 3401 1450 4889C7   		movq	%rax, %rdi
 3402 1453 E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 3402      00
 3403 1458 488B45F8 		movq	-8(%rbp), %rax
 3404 145c 48C70000 		movq	$_ZTVN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE+16, (%rax)
 3404      000000
 3405              	.LBE66:
 3406 1463 C9       		leave
 3407              		.cfi_def_cfa 7, 8
 3408 1464 C3       		ret
 3409              		.cfi_endproc
 3410              	.LFE1363:
 3412              		.set	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC1Ev,_ZN12_GLOBAL__N_143TestSim
 3413              		.local	_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE
 3414              		.comm	_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE,56,32
 3415              		.local	_ZN12_GLOBAL__N_144adderSimpleFixtureOnlyOneFixtureAliveAtATimeE
 3416              		.comm	_ZN12_GLOBAL__N_144adderSimpleFixtureOnlyOneFixtureAliveAtATimeE,1,1
 3417 1465 90       		.align 2
 3419              	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD2Ev:
 3420              	.LFB1367:
 3421              		.loc 4 141 0
 3422              		.cfi_startproc
 3423 1466 55       		pushq	%rbp
 3424              		.cfi_def_cfa_offset 16
 3425              		.cfi_offset 6, -16
 3426 1467 4889E5   		movq	%rsp, %rbp
 3427              		.cfi_def_cfa_register 6
 3428 146a 4883EC08 		subq	$8, %rsp
 3429 146e 48897DF8 		movq	%rdi, -8(%rbp)
 3430              	.LBB67:
 3431              		.loc 4 141 0
 3432 1472 488B45F8 		movq	-8(%rbp), %rax
 3433 1476 4889C7   		movq	%rax, %rdi
 3434 1479 E83CFBFF 		call	_ZN12_GLOBAL__N_113SimpleFixtureD2Ev
 3434      FF
 3435              	.LBE67:
 3436 147e C9       		leave
 3437              		.cfi_def_cfa 7, 8
 3438 147f C3       		ret
 3439              		.cfi_endproc
 3440              	.LFE1367:
 3442              		.set	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD1Ev,_ZN12_GLOBAL__N_145Simpl
 3443              		.align 2
 3445              	_ZNK12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATime7RunImplEv:
 3446              	.LFB1365:
 3447              		.loc 4 141 0
 3448              		.cfi_startproc
 3449              		.cfi_personality 0x3,__gxx_personality_v0
 3450              		.cfi_lsda 0x3,.LLSDA1365
 3451 1480 55       		pushq	%rbp
 3452              		.cfi_def_cfa_offset 16
 3453              		.cfi_offset 6, -16
 3454 1481 4889E5   		movq	%rsp, %rbp
 3455              		.cfi_def_cfa_register 6
 3456 1484 4154     		pushq	%r12
 3457 1486 53       		pushq	%rbx
 3458 1487 4881ECA0 		subq	$416, %rsp
 3458      010000
 3459              		.cfi_offset 12, -24
 3460              		.cfi_offset 3, -32
 3461 148e 4889BD58 		movq	%rdi, -424(%rbp)
 3461      FEFFFF
 3462              	.LBB68:
 3463              		.loc 4 141 0
 3464 1495 C6856FFE 		movb	$0, -401(%rbp)
 3464      FFFF00
 3465              	.LBB69:
 3466 149c 488B8558 		movq	-424(%rbp), %rax
 3466      FEFFFF
 3467 14a3 488D5008 		leaq	8(%rax), %rdx
 3468 14a7 488D8580 		leaq	-384(%rbp), %rax
 3468      FEFFFF
 3469 14ae 4889D6   		movq	%rdx, %rsi
 3470 14b1 4889C7   		movq	%rax, %rdi
 3471 14b4 E845FFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC1ERKN8UnitTest11TestDetailsE
 3471      FF
 3472 14b9 C6856FFE 		movb	$1, -401(%rbp)
 3472      FFFF01
 3473 14c0 488B8558 		movq	-424(%rbp), %rax
 3473      FEFFFF
 3474 14c7 488D5008 		leaq	8(%rax), %rdx
 3475 14cb 488D8580 		leaq	-384(%rbp), %rax
 3475      FEFFFF
 3476 14d2 4889D6   		movq	%rdx, %rsi
 3477 14d5 4889C7   		movq	%rax, %rdi
 3478              	.LEHB82:
 3479 14d8 E8E10600 		call	_ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperEEEvR
 3479      00
 3480              	.LEHE82:
 3481              		.loc 4 141 0 is_stmt 0 discriminator 1
 3482 14dd 488D8580 		leaq	-384(%rbp), %rax
 3482      FEFFFF
 3483 14e4 4889C7   		movq	%rax, %rdi
 3484 14e7 E87AFFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD1Ev
 3484      FF
 3485              	.LBE69:
 3486              	.LBE68:
 3487 14ec E9620200 		jmp	.L195
 3487      00
 3488              	.L189:
 3489 14f1 4989C4   		movq	%rax, %r12
 3490 14f4 4889D3   		movq	%rdx, %rbx
 3491              	.LBB77:
 3492              	.LBB70:
 3493              		.loc 4 141 0
 3494 14f7 488D8580 		leaq	-384(%rbp), %rax
 3494      FEFFFF
 3495 14fe 4889C7   		movq	%rax, %rdi
 3496 1501 E860FFFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD1Ev
 3496      FF
 3497 1506 4C89E0   		movq	%r12, %rax
 3498 1509 4889DA   		movq	%rbx, %rdx
 3499 150c 4883FA01 		cmpq	$1, %rdx
 3500 1510 745C     		je	.L180
 3501 1512 4883FA02 		cmpq	$2, %rdx
 3502 1516 0F84F400 		je	.L181
 3502      0000
 3503 151c E9980100 		jmp	.L194
 3503      00
 3504              	.L190:
 3505 1521 4889C3   		movq	%rax, %rbx
 3506              	.LBE70:
 3507              	.LBB71:
 3508 1524 E8000000 		call	__cxa_end_catch
 3508      00
 3509 1529 4889D8   		movq	%rbx, %rax
 3510 152c 4889C7   		movq	%rax, %rdi
 3511              	.LEHB83:
 3512 152f E8000000 		call	_Unwind_Resume
 3512      00
 3513              	.LEHE83:
 3514              	.L191:
 3515 1534 4889C3   		movq	%rax, %rbx
 3516              	.LBE71:
 3517              	.LBB72:
 3518              	.LBB73:
 3519 1537 488D8580 		leaq	-384(%rbp), %rax
 3519      FEFFFF
 3520 153e 4889C7   		movq	%rax, %rdi
 3521 1541 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 3521      00
 3522 1546 EB03     		jmp	.L184
 3523              	.L192:
 3524 1548 4889C3   		movq	%rax, %rbx
 3525              	.L184:
 3526              	.LBE73:
 3527 154b E8000000 		call	__cxa_end_catch
 3527      00
 3528 1550 4889D8   		movq	%rbx, %rax
 3529 1553 4889C7   		movq	%rax, %rdi
 3530              	.LEHB84:
 3531 1556 E8000000 		call	_Unwind_Resume
 3531      00
 3532              	.LEHE84:
 3533              	.L193:
 3534 155b 4889C3   		movq	%rax, %rbx
 3535              	.LBE72:
 3536 155e E8000000 		call	__cxa_end_catch
 3536      00
 3537 1563 4889D8   		movq	%rbx, %rax
 3538 1566 4889C7   		movq	%rax, %rdi
 3539              	.LEHB85:
 3540 1569 E8000000 		call	_Unwind_Resume
 3540      00
 3541              	.LEHE85:
 3542              	.L180:
 3543              	.LBB75:
 3544 156e 4889C7   		movq	%rax, %rdi
 3545 1571 E8000000 		call	__cxa_begin_catch
 3545      00
 3546 1576 48898570 		movq	%rax, -400(%rbp)
 3546      FEFFFF
 3547 157d 488B8570 		movq	-400(%rbp), %rax
 3547      FEFFFF
 3548 1584 488B00   		movq	(%rax), %rax
 3549 1587 4883C010 		addq	$16, %rax
 3550 158b 488B00   		movq	(%rax), %rax
 3551 158e 488B9570 		movq	-400(%rbp), %rdx
 3551      FEFFFF
 3552 1595 4889D7   		movq	%rdx, %rdi
 3553 1598 FFD0     		call	*%rax
 3554 159a 4889C3   		movq	%rax, %rbx
 3555 159d 488B8570 		movq	-400(%rbp), %rax
 3555      FEFFFF
 3556 15a4 4889C7   		movq	%rax, %rdi
 3557              	.LEHB86:
 3558 15a7 E8000000 		call	_ZNK8UnitTest15AssertException10LineNumberEv
 3558      00
 3559 15ac 4189C4   		movl	%eax, %r12d
 3560 15af 488B8570 		movq	-400(%rbp), %rax
 3560      FEFFFF
 3561 15b6 4889C7   		movq	%rax, %rdi
 3562 15b9 E8000000 		call	_ZNK8UnitTest15AssertException8FilenameEv
 3562      00
 3563              		.loc 4 141 0 discriminator 1
 3564 15be 4889C1   		movq	%rax, %rcx
 3565 15c1 488B8558 		movq	-424(%rbp), %rax
 3565      FEFFFF
 3566 15c8 488B5008 		movq	8(%rax), %rdx
 3567 15cc 488B8558 		movq	-424(%rbp), %rax
 3567      FEFFFF
 3568 15d3 488B7010 		movq	16(%rax), %rsi
 3569 15d7 488D8580 		leaq	-384(%rbp), %rax
 3569      FEFFFF
 3570 15de 4589E0   		movl	%r12d, %r8d
 3571 15e1 4889C7   		movq	%rax, %rdi
 3572 15e4 E8000000 		call	_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i
 3572      00
 3573              		.loc 4 141 0 discriminator 3
 3574 15e9 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3574      00
 3575 15ee 488B00   		movq	(%rax), %rax
 3576 15f1 488D8D80 		leaq	-384(%rbp), %rcx
 3576      FEFFFF
 3577 15f8 4889DA   		movq	%rbx, %rdx
 3578 15fb 4889CE   		movq	%rcx, %rsi
 3579 15fe 4889C7   		movq	%rax, %rdi
 3580 1601 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3580      00
 3581              	.LEHE86:
 3582              		.loc 4 141 0 discriminator 1
 3583 1606 E8000000 		call	__cxa_end_catch
 3583      00
 3584              	.LBE75:
 3585              	.LBE77:
 3586 160b E9430100 		jmp	.L195
 3586      00
 3587              	.L181:
 3588              	.LBB78:
 3589              	.LBB76:
 3590              		.loc 4 141 0
 3591 1610 4889C7   		movq	%rax, %rdi
 3592 1613 E8000000 		call	__cxa_begin_catch
 3592      00
 3593 1618 48898578 		movq	%rax, -392(%rbp)
 3593      FEFFFF
 3594              	.LBB74:
 3595 161f 488D8580 		leaq	-384(%rbp), %rax
 3595      FEFFFF
 3596 1626 4889C7   		movq	%rax, %rdi
 3597              	.LEHB87:
 3598 1629 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 3598      00
 3599              	.LEHE87:
 3600              		.loc 4 141 0 discriminator 1
 3601 162e 488B8578 		movq	-392(%rbp), %rax
 3601      FEFFFF
 3602 1635 488B00   		movq	(%rax), %rax
 3603 1638 4883C010 		addq	$16, %rax
 3604 163c 488B00   		movq	(%rax), %rax
 3605 163f 488B9578 		movq	-392(%rbp), %rdx
 3605      FEFFFF
 3606 1646 4889D7   		movq	%rdx, %rdi
 3607 1649 FFD0     		call	*%rax
 3608 164b 4889C3   		movq	%rax, %rbx
 3609 164e 488D8580 		leaq	-384(%rbp), %rax
 3609      FEFFFF
 3610 1655 BE000000 		movl	$.LC45, %esi
 3610      00
 3611 165a 4889C7   		movq	%rax, %rdi
 3612              	.LEHB88:
 3613 165d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 3613      00
 3614 1662 4889DE   		movq	%rbx, %rsi
 3615 1665 4889C7   		movq	%rax, %rdi
 3616 1668 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 3616      00
 3617 166d 488D8580 		leaq	-384(%rbp), %rax
 3617      FEFFFF
 3618 1674 4889C7   		movq	%rax, %rdi
 3619 1677 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv
 3619      00
 3620 167c 4889C3   		movq	%rax, %rbx
 3621 167f 488B8558 		movq	-424(%rbp), %rax
 3621      FEFFFF
 3622 1686 4C8D6008 		leaq	8(%rax), %r12
 3623 168a E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3623      00
 3624 168f 488B00   		movq	(%rax), %rax
 3625 1692 4889DA   		movq	%rbx, %rdx
 3626 1695 4C89E6   		movq	%r12, %rsi
 3627 1698 4889C7   		movq	%rax, %rdi
 3628 169b E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3628      00
 3629              	.LEHE88:
 3630 16a0 488D8580 		leaq	-384(%rbp), %rax
 3630      FEFFFF
 3631 16a7 4889C7   		movq	%rax, %rdi
 3632              	.LEHB89:
 3633 16aa E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 3633      00
 3634              	.LEHE89:
 3635              	.LBE74:
 3636              		.loc 4 141 0
 3637 16af E8000000 		call	__cxa_end_catch
 3637      00
 3638              	.LBE76:
 3639              	.LBE78:
 3640 16b4 E99A0000 		jmp	.L195
 3640      00
 3641              	.L194:
 3642              	.LBB79:
 3643 16b9 4889C7   		movq	%rax, %rdi
 3644 16bc E8000000 		call	__cxa_begin_catch
 3644      00
 3645 16c1 80BD6FFE 		cmpb	$0, -401(%rbp)
 3645      FFFF00
 3646 16c8 7443     		je	.L187
 3647              		.loc 4 141 0 discriminator 1
 3648 16ca 488B8558 		movq	-424(%rbp), %rax
 3648      FEFFFF
 3649 16d1 488D4808 		leaq	8(%rax), %rcx
 3650 16d5 488D8580 		leaq	-384(%rbp), %rax
 3650      FEFFFF
 3651 16dc BA8D0000 		movl	$141, %edx
 3651      00
 3652 16e1 4889CE   		movq	%rcx, %rsi
 3653 16e4 4889C7   		movq	%rax, %rdi
 3654              	.LEHB90:
 3655 16e7 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3655      00
 3656 16ec E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3656      00
 3657 16f1 488B00   		movq	(%rax), %rax
 3658 16f4 488D8D80 		leaq	-384(%rbp), %rcx
 3658      FEFFFF
 3659 16fb BA000000 		movl	$.LC46, %edx
 3659      00
 3660 1700 4889CE   		movq	%rcx, %rsi
 3661 1703 4889C7   		movq	%rax, %rdi
 3662 1706 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3662      00
 3663 170b EB41     		jmp	.L188
 3664              	.L187:
 3665              		.loc 4 141 0 discriminator 2
 3666 170d 488B8558 		movq	-424(%rbp), %rax
 3666      FEFFFF
 3667 1714 488D4808 		leaq	8(%rax), %rcx
 3668 1718 488D8580 		leaq	-384(%rbp), %rax
 3668      FEFFFF
 3669 171f BA8D0000 		movl	$141, %edx
 3669      00
 3670 1724 4889CE   		movq	%rcx, %rsi
 3671 1727 4889C7   		movq	%rax, %rdi
 3672 172a E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3672      00
 3673              		.loc 4 141 0 discriminator 1
 3674 172f E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3674      00
 3675 1734 488B00   		movq	(%rax), %rax
 3676 1737 488D8D80 		leaq	-384(%rbp), %rcx
 3676      FEFFFF
 3677 173e BA000000 		movl	$.LC47, %edx
 3677      00
 3678 1743 4889CE   		movq	%rcx, %rsi
 3679 1746 4889C7   		movq	%rax, %rdi
 3680 1749 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3680      00
 3681              	.LEHE90:
 3682              	.L188:
 3683              	.LEHB91:
 3684 174e E8000000 		call	__cxa_end_catch
 3684      00
 3685              	.LEHE91:
 3686              	.L195:
 3687              	.LBE79:
 3688              		.loc 4 141 0
 3689 1753 90       		nop
 3690 1754 4881C4A0 		addq	$416, %rsp
 3690      010000
 3691 175b 5B       		popq	%rbx
 3692 175c 415C     		popq	%r12
 3693 175e 5D       		popq	%rbp
 3694              		.cfi_def_cfa 7, 8
 3695 175f C3       		ret
 3696              		.cfi_endproc
 3697              	.LFE1365:
 3698              		.section	.gcc_except_table
 3699              		.align 4
 3700              	.LLSDA1365:
 3701 024c FF       		.byte	0xff
 3702 024d 03       		.byte	0x3
 3703 024e 4D       		.uleb128 .LLSDATT1365-.LLSDATTD1365
 3704              	.LLSDATTD1365:
 3705 024f 01       		.byte	0x1
 3706 0250 36       		.uleb128 .LLSDACSE1365-.LLSDACSB1365
 3707              	.LLSDACSB1365:
 3708 0251 58       		.uleb128 .LEHB82-.LFB1365
 3709 0252 05       		.uleb128 .LEHE82-.LEHB82
 3710 0253 71       		.uleb128 .L189-.LFB1365
 3711 0254 07       		.uleb128 0x7
 3712 0255 AF01     		.uleb128 .LEHB83-.LFB1365
 3713 0257 05       		.uleb128 .LEHE83-.LEHB83
 3714 0258 00       		.uleb128 0
 3715 0259 00       		.uleb128 0
 3716 025a D601     		.uleb128 .LEHB84-.LFB1365
 3717 025c 05       		.uleb128 .LEHE84-.LEHB84
 3718 025d 00       		.uleb128 0
 3719 025e 00       		.uleb128 0
 3720 025f E901     		.uleb128 .LEHB85-.LFB1365
 3721 0261 05       		.uleb128 .LEHE85-.LEHB85
 3722 0262 00       		.uleb128 0
 3723 0263 00       		.uleb128 0
 3724 0264 A702     		.uleb128 .LEHB86-.LFB1365
 3725 0266 5F       		.uleb128 .LEHE86-.LEHB86
 3726 0267 A101     		.uleb128 .L190-.LFB1365
 3727 0269 00       		.uleb128 0
 3728 026a A903     		.uleb128 .LEHB87-.LFB1365
 3729 026c 05       		.uleb128 .LEHE87-.LEHB87
 3730 026d C801     		.uleb128 .L192-.LFB1365
 3731 026f 00       		.uleb128 0
 3732 0270 DD03     		.uleb128 .LEHB88-.LFB1365
 3733 0272 43       		.uleb128 .LEHE88-.LEHB88
 3734 0273 B401     		.uleb128 .L191-.LFB1365
 3735 0275 00       		.uleb128 0
 3736 0276 AA04     		.uleb128 .LEHB89-.LFB1365
 3737 0278 05       		.uleb128 .LEHE89-.LEHB89
 3738 0279 C801     		.uleb128 .L192-.LFB1365
 3739 027b 00       		.uleb128 0
 3740 027c E704     		.uleb128 .LEHB90-.LFB1365
 3741 027e 67       		.uleb128 .LEHE90-.LEHB90
 3742 027f DB01     		.uleb128 .L193-.LFB1365
 3743 0281 00       		.uleb128 0
 3744 0282 CE05     		.uleb128 .LEHB91-.LFB1365
 3745 0284 05       		.uleb128 .LEHE91-.LEHB91
 3746 0285 00       		.uleb128 0
 3747 0286 00       		.uleb128 0
 3748              	.LLSDACSE1365:
 3749 0287 03       		.byte	0x3
 3750 0288 00       		.byte	0
 3751 0289 02       		.byte	0x2
 3752 028a 7D       		.byte	0x7d
 3753 028b 01       		.byte	0x1
 3754 028c 7D       		.byte	0x7d
 3755 028d 00       		.byte	0
 3756 028e 7D       		.byte	0x7d
 3757 028f 00       		.align 4
 3758 0290 00000000 		.long	0
 3759              	
 3760 0294 00000000 		.long	_ZTISt9exception
 3761 0298 00000000 		.long	_ZTIN8UnitTest15AssertExceptionE
 3762              	.LLSDATT1365:
 3763              		.text
 3765              		.section	.rodata
 3766 053a 00000000 		.align 8
 3766      0000
 3767              	.LC51:
 3768 0540 556E6861 		.string	"Unhandled exception in CHECK_EQUAL(1, SimpleFixture::instanceCount)"
 3768      6E646C65 
 3768      64206578 
 3768      63657074 
 3768      696F6E20 
 3769              		.text
 3770              		.align 2
 3772              	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelper7RunImplEv:
 3773              	.LFB1369:
 142:TestUnitTest++.cpp **** {
 3774              		.loc 4 142 0 is_stmt 1
 3775              		.cfi_startproc
 3776              		.cfi_personality 0x3,__gxx_personality_v0
 3777              		.cfi_lsda 0x3,.LLSDA1369
 3778 1760 55       		pushq	%rbp
 3779              		.cfi_def_cfa_offset 16
 3780              		.cfi_offset 6, -16
 3781 1761 4889E5   		movq	%rsp, %rbp
 3782              		.cfi_def_cfa_register 6
 3783 1764 53       		pushq	%rbx
 3784 1765 4883EC48 		subq	$72, %rsp
 3785              		.cfi_offset 3, -24
 3786 1769 48897DB8 		movq	%rdi, -72(%rbp)
 3787              	.LEHB92:
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 3788              		.loc 4 143 0
 3789 176d E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 3789      00
 3790 1772 488B08   		movq	(%rax), %rcx
 3791 1775 488D45D0 		leaq	-48(%rbp), %rax
 3792 1779 BA8F0000 		movl	$143, %edx
 3792      00
 3793 177e 4889CE   		movq	%rcx, %rsi
 3794 1781 4889C7   		movq	%rax, %rdi
 3795 1784 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3795      00
 3796              		.loc 4 143 0 is_stmt 0 discriminator 1
 3797 1789 C745CC01 		movl	$1, -52(%rbp)
 3797      000000
 3798 1790 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3798      00
 3799 1795 488B00   		movq	(%rax), %rax
 3800 1798 488D55D0 		leaq	-48(%rbp), %rdx
 3801 179c 488D75CC 		leaq	-52(%rbp), %rsi
 3802 17a0 4889D1   		movq	%rdx, %rcx
 3803 17a3 BA000000 		movl	$_ZN12_GLOBAL__N_113SimpleFixture13instanceCountE, %edx
 3803      00
 3804 17a8 4889C7   		movq	%rax, %rdi
 3805 17ab E8000000 		call	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 3805      00
 3806              	.LEHE92:
 144:TestUnitTest++.cpp **** }
 3807              		.loc 4 144 0 is_stmt 1
 3808 17b0 EB58     		jmp	.L202
 3809              	.L201:
 3810 17b2 4889C3   		movq	%rax, %rbx
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 3811              		.loc 4 143 0
 3812 17b5 E8000000 		call	__cxa_end_catch
 3812      00
 3813 17ba 4889D8   		movq	%rbx, %rax
 3814 17bd 4889C7   		movq	%rax, %rdi
 3815              	.LEHB93:
 3816 17c0 E8000000 		call	_Unwind_Resume
 3816      00
 3817              	.LEHE93:
 3818              	.L200:
 3819 17c5 4889C7   		movq	%rax, %rdi
 3820 17c8 E8000000 		call	__cxa_begin_catch
 3820      00
 3821              	.LEHB94:
 3822 17cd E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 3822      00
 3823 17d2 488B08   		movq	(%rax), %rcx
 3824 17d5 488D45D0 		leaq	-48(%rbp), %rax
 3825 17d9 BA8F0000 		movl	$143, %edx
 3825      00
 3826 17de 4889CE   		movq	%rcx, %rsi
 3827 17e1 4889C7   		movq	%rax, %rdi
 3828 17e4 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3828      00
 143:TestUnitTest++.cpp ****     CHECK_EQUAL(1, SimpleFixture::instanceCount);
 3829              		.loc 4 143 0 is_stmt 0 discriminator 1
 3830 17e9 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3830      00
 3831 17ee 488B00   		movq	(%rax), %rax
 3832 17f1 488D4DD0 		leaq	-48(%rbp), %rcx
 3833 17f5 BA000000 		movl	$.LC51, %edx
 3833      00
 3834 17fa 4889CE   		movq	%rcx, %rsi
 3835 17fd 4889C7   		movq	%rax, %rdi
 3836 1800 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3836      00
 3837              	.LEHE94:
 3838              	.LEHB95:
 3839 1805 E8000000 		call	__cxa_end_catch
 3839      00
 3840              	.LEHE95:
 3841              	.L202:
 3842              		.loc 4 144 0 is_stmt 1
 3843 180a 90       		nop
 3844 180b 4883C448 		addq	$72, %rsp
 3845 180f 5B       		popq	%rbx
 3846 1810 5D       		popq	%rbp
 3847              		.cfi_def_cfa 7, 8
 3848 1811 C3       		ret
 3849              		.cfi_endproc
 3850              	.LFE1369:
 3851              		.section	.gcc_except_table
 3852              		.align 4
 3853              	.LLSDA1369:
 3854 029c FF       		.byte	0xff
 3855 029d 03       		.byte	0x3
 3856 029e 19       		.uleb128 .LLSDATT1369-.LLSDATTD1369
 3857              	.LLSDATTD1369:
 3858 029f 01       		.byte	0x1
 3859 02a0 11       		.uleb128 .LLSDACSE1369-.LLSDACSB1369
 3860              	.LLSDACSB1369:
 3861 02a1 0D       		.uleb128 .LEHB92-.LFB1369
 3862 02a2 43       		.uleb128 .LEHE92-.LEHB92
 3863 02a3 65       		.uleb128 .L200-.LFB1369
 3864 02a4 01       		.uleb128 0x1
 3865 02a5 60       		.uleb128 .LEHB93-.LFB1369
 3866 02a6 05       		.uleb128 .LEHE93-.LEHB93
 3867 02a7 00       		.uleb128 0
 3868 02a8 00       		.uleb128 0
 3869 02a9 6D       		.uleb128 .LEHB94-.LFB1369
 3870 02aa 38       		.uleb128 .LEHE94-.LEHB94
 3871 02ab 52       		.uleb128 .L201-.LFB1369
 3872 02ac 00       		.uleb128 0
 3873 02ad A501     		.uleb128 .LEHB95-.LFB1369
 3874 02af 05       		.uleb128 .LEHE95-.LEHB95
 3875 02b0 00       		.uleb128 0
 3876 02b1 00       		.uleb128 0
 3877              	.LLSDACSE1369:
 3878 02b2 01       		.byte	0x1
 3879 02b3 00       		.byte	0
 3880              		.align 4
 3881 02b4 00000000 		.long	0
 3882              	
 3883              	.LLSDATT1369:
 3884              		.text
 3887              	_ZN12_GLOBAL__N_19CheckBoolEb:
 3888              	.LFB1370:
 145:TestUnitTest++.cpp **** 
 146:TestUnitTest++.cpp **** void CheckBool(const bool b)
 147:TestUnitTest++.cpp **** {
 3889              		.loc 4 147 0
 3890              		.cfi_startproc
 3891              		.cfi_personality 0x3,__gxx_personality_v0
 3892              		.cfi_lsda 0x3,.LLSDA1370
 3893 1812 55       		pushq	%rbp
 3894              		.cfi_def_cfa_offset 16
 3895              		.cfi_offset 6, -16
 3896 1813 4889E5   		movq	%rsp, %rbp
 3897              		.cfi_def_cfa_register 6
 3898 1816 53       		pushq	%rbx
 3899 1817 4883EC38 		subq	$56, %rsp
 3900              		.cfi_offset 3, -24
 3901 181b 89F8     		movl	%edi, %eax
 3902 181d 8845CC   		movb	%al, -52(%rbp)
 148:TestUnitTest++.cpp **** 	CHECK(b);
 3903              		.loc 4 148 0
 3904 1820 0FB645CC 		movzbl	-52(%rbp), %eax
 3905 1824 89C7     		movl	%eax, %edi
 3906 1826 E8000000 		call	_ZN8UnitTest5CheckIbEEbT_
 3906      00
 3907 182b 83F001   		xorl	$1, %eax
 3908 182e 84C0     		testb	%al, %al
 3909 1830 0F849300 		je	.L203
 3909      0000
 3910              	.LEHB96:
 3911              		.loc 4 148 0 is_stmt 0 discriminator 1
 3912 1836 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 3912      00
 3913 183b 488B08   		movq	(%rax), %rcx
 3914 183e 488D45D0 		leaq	-48(%rbp), %rax
 3915 1842 BA940000 		movl	$148, %edx
 3915      00
 3916 1847 4889CE   		movq	%rcx, %rsi
 3917 184a 4889C7   		movq	%rax, %rdi
 3918 184d E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3918      00
 3919 1852 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3919      00
 3920 1857 488B00   		movq	(%rax), %rax
 3921 185a 488D4DD0 		leaq	-48(%rbp), %rcx
 3922 185e BA000000 		movl	$.LC3, %edx
 3922      00
 3923 1863 4889CE   		movq	%rcx, %rsi
 3924 1866 4889C7   		movq	%rax, %rdi
 3925 1869 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3925      00
 3926              	.LEHE96:
 3927 186e EB59     		jmp	.L203
 3928              	.L208:
 3929 1870 4889C3   		movq	%rax, %rbx
 3930              		.loc 4 148 0
 3931 1873 E8000000 		call	__cxa_end_catch
 3931      00
 3932 1878 4889D8   		movq	%rbx, %rax
 3933 187b 4889C7   		movq	%rax, %rdi
 3934              	.LEHB97:
 3935 187e E8000000 		call	_Unwind_Resume
 3935      00
 3936              	.LEHE97:
 3937              	.L207:
 3938 1883 4889C7   		movq	%rax, %rdi
 3939 1886 E8000000 		call	__cxa_begin_catch
 3939      00
 3940              	.LEHB98:
 3941 188b E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 3941      00
 3942 1890 488B08   		movq	(%rax), %rcx
 3943 1893 488D45D0 		leaq	-48(%rbp), %rax
 3944 1897 BA940000 		movl	$148, %edx
 3944      00
 3945 189c 4889CE   		movq	%rcx, %rsi
 3946 189f 4889C7   		movq	%rax, %rdi
 3947 18a2 E8000000 		call	_ZN8UnitTest11TestDetailsC1ERKS0_i
 3947      00
 3948              		.loc 4 148 0 discriminator 1
 3949 18a7 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 3949      00
 3950 18ac 488B00   		movq	(%rax), %rax
 3951 18af 488D4DD0 		leaq	-48(%rbp), %rcx
 3952 18b3 BA000000 		movl	$.LC4, %edx
 3952      00
 3953 18b8 4889CE   		movq	%rcx, %rsi
 3954 18bb 4889C7   		movq	%rax, %rdi
 3955 18be E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 3955      00
 3956              	.LEHE98:
 3957              	.LEHB99:
 3958 18c3 E8000000 		call	__cxa_end_catch
 3958      00
 3959              	.LEHE99:
 149:TestUnitTest++.cpp **** }
 3960              		.loc 4 149 0 is_stmt 1 discriminator 1
 3961 18c8 90       		nop
 3962              	.L203:
 3963              		.loc 4 149 0 is_stmt 0
 3964 18c9 4883C438 		addq	$56, %rsp
 3965 18cd 5B       		popq	%rbx
 3966 18ce 5D       		popq	%rbp
 3967              		.cfi_def_cfa 7, 8
 3968 18cf C3       		ret
 3969              		.cfi_endproc
 3970              	.LFE1370:
 3971              		.section	.gcc_except_table
 3972              		.align 4
 3973              	.LLSDA1370:
 3974 02b8 FF       		.byte	0xff
 3975 02b9 03       		.byte	0x3
 3976 02ba 19       		.uleb128 .LLSDATT1370-.LLSDATTD1370
 3977              	.LLSDATTD1370:
 3978 02bb 01       		.byte	0x1
 3979 02bc 11       		.uleb128 .LLSDACSE1370-.LLSDACSB1370
 3980              	.LLSDACSB1370:
 3981 02bd 24       		.uleb128 .LEHB96-.LFB1370
 3982 02be 38       		.uleb128 .LEHE96-.LEHB96
 3983 02bf 71       		.uleb128 .L207-.LFB1370
 3984 02c0 01       		.uleb128 0x1
 3985 02c1 6C       		.uleb128 .LEHB97-.LFB1370
 3986 02c2 05       		.uleb128 .LEHE97-.LEHB97
 3987 02c3 00       		.uleb128 0
 3988 02c4 00       		.uleb128 0
 3989 02c5 79       		.uleb128 .LEHB98-.LFB1370
 3990 02c6 38       		.uleb128 .LEHE98-.LEHB98
 3991 02c7 5E       		.uleb128 .L208-.LFB1370
 3992 02c8 00       		.uleb128 0
 3993 02c9 B101     		.uleb128 .LEHB99-.LFB1370
 3994 02cb 05       		.uleb128 .LEHE99-.LEHB99
 3995 02cc 00       		.uleb128 0
 3996 02cd 00       		.uleb128 0
 3997              	.LLSDACSE1370:
 3998 02ce 01       		.byte	0x1
 3999 02cf 00       		.byte	0
 4000              		.align 4
 4001 02d0 00000000 		.long	0
 4002              	
 4003              	.LLSDATT1370:
 4004              		.text
 4006              		.section	.rodata
 4007 0584 00000000 		.align 8
 4008              	.LC52:
 4009 0588 43616E43 		.string	"CanCallCHECKOutsideOfTestFunction"
 4009      616C6C43 
 4009      4845434B 
 4009      4F757473 
 4009      6964654F 
 4010              		.text
 4011              		.align 2
 4013              	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC2Ev:
 4014              	.LFB1372:
 150:TestUnitTest++.cpp **** 
 151:TestUnitTest++.cpp **** TEST(CanCallCHECKOutsideOfTestFunction)
 4015              		.loc 4 151 0 is_stmt 1
 4016              		.cfi_startproc
 4017 18d0 55       		pushq	%rbp
 4018              		.cfi_def_cfa_offset 16
 4019              		.cfi_offset 6, -16
 4020 18d1 4889E5   		movq	%rsp, %rbp
 4021              		.cfi_def_cfa_register 6
 4022 18d4 4883EC10 		subq	$16, %rsp
 4023 18d8 48897DF8 		movq	%rdi, -8(%rbp)
 4024              	.LBB80:
 4025              		.loc 4 151 0
 4026 18dc E8000000 		call	_ZN13UnitTestSuite12GetSuiteNameEv
 4026      00
 4027 18e1 4889C2   		movq	%rax, %rdx
 4028 18e4 488B45F8 		movq	-8(%rbp), %rax
 4029 18e8 41B89700 		movl	$151, %r8d
 4029      0000
 4030 18ee B9000000 		movl	$.LC1, %ecx
 4030      00
 4031 18f3 BE000000 		movl	$.LC52, %esi
 4031      00
 4032 18f8 4889C7   		movq	%rax, %rdi
 4033 18fb E8000000 		call	_ZN8UnitTest4TestC2EPKcS2_S2_i
 4033      00
 4034 1900 488B45F8 		movq	-8(%rbp), %rax
 4035 1904 48C70000 		movq	$_ZTVN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE+16, (%rax)
 4035      000000
 4036              	.LBE80:
 4037 190b C9       		leave
 4038              		.cfi_def_cfa 7, 8
 4039 190c C3       		ret
 4040              		.cfi_endproc
 4041              	.LFE1372:
 4043              		.set	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC1Ev,_ZN12_GLOBAL__N_137TestCanCallCH
 4044              		.local	_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE
 4045              		.comm	_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE,56,32
 4046              		.local	_ZN12_GLOBAL__N_138adderCanCallCHECKOutsideOfTestFunctionE
 4047              		.comm	_ZN12_GLOBAL__N_138adderCanCallCHECKOutsideOfTestFunctionE,1,1
 4048 190d 90       		.align 2
 4050              	_ZNK12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunction7RunImplEv:
 4051              	.LFB1374:
 152:TestUnitTest++.cpp **** {
 4052              		.loc 4 152 0
 4053              		.cfi_startproc
 4054 190e 55       		pushq	%rbp
 4055              		.cfi_def_cfa_offset 16
 4056              		.cfi_offset 6, -16
 4057 190f 4889E5   		movq	%rsp, %rbp
 4058              		.cfi_def_cfa_register 6
 4059 1912 4883EC10 		subq	$16, %rsp
 4060 1916 48897DF8 		movq	%rdi, -8(%rbp)
 153:TestUnitTest++.cpp **** 	CheckBool(true);
 4061              		.loc 4 153 0
 4062 191a BF010000 		movl	$1, %edi
 4062      00
 4063 191f E8EEFEFF 		call	_ZN12_GLOBAL__N_19CheckBoolEb
 4063      FF
 154:TestUnitTest++.cpp **** }
 4064              		.loc 4 154 0
 4065 1924 C9       		leave
 4066              		.cfi_def_cfa 7, 8
 4067 1925 C3       		ret
 4068              		.cfi_endproc
 4069              	.LFE1374:
 4071              		.section	.text._ZN8UnitTest5CheckIbEEbT_,"axG",@progbits,_ZN8UnitTest5CheckIbEEbT_,comdat
 4072              		.weak	_ZN8UnitTest5CheckIbEEbT_
 4074              	_ZN8UnitTest5CheckIbEEbT_:
 4075              	.LFB1403:
 4076              		.file 5 "../Checks.h"
   1:../Checks.h   **** #ifndef UNITTEST_CHECKS_H
   2:../Checks.h   **** #define UNITTEST_CHECKS_H
   3:../Checks.h   **** 
   4:../Checks.h   **** #include "Config.h"
   5:../Checks.h   **** #include "TestResults.h"
   6:../Checks.h   **** #include "MemoryOutStream.h"
   7:../Checks.h   **** 
   8:../Checks.h   **** namespace UnitTest {
   9:../Checks.h   **** 
  10:../Checks.h   **** 
  11:../Checks.h   **** template< typename Value >
  12:../Checks.h   **** bool Check(Value const value)
 4077              		.loc 5 12 0
 4078              		.cfi_startproc
 4079 0000 55       		pushq	%rbp
 4080              		.cfi_def_cfa_offset 16
 4081              		.cfi_offset 6, -16
 4082 0001 4889E5   		movq	%rsp, %rbp
 4083              		.cfi_def_cfa_register 6
 4084 0004 89F8     		movl	%edi, %eax
 4085 0006 8845FC   		movb	%al, -4(%rbp)
  13:../Checks.h   **** {
  14:../Checks.h   ****     return !!value; // doing double negative to avoid silly VS warnings
 4086              		.loc 5 14 0
 4087 0009 0FB645FC 		movzbl	-4(%rbp), %eax
  15:../Checks.h   **** }
 4088              		.loc 5 15 0
 4089 000d 5D       		popq	%rbp
 4090              		.cfi_def_cfa 7, 8
 4091 000e C3       		ret
 4092              		.cfi_endproc
 4093              	.LFE1403:
 4095              		.section	.text._ZN8UnitTest5CheckIPvEEbT_,"axG",@progbits,_ZN8UnitTest5CheckIPvEEbT_,comdat
 4096              		.weak	_ZN8UnitTest5CheckIPvEEbT_
 4098              	_ZN8UnitTest5CheckIPvEEbT_:
 4099              	.LFB1404:
  12:../Checks.h   **** {
 4100              		.loc 5 12 0
 4101              		.cfi_startproc
 4102 0000 55       		pushq	%rbp
 4103              		.cfi_def_cfa_offset 16
 4104              		.cfi_offset 6, -16
 4105 0001 4889E5   		movq	%rsp, %rbp
 4106              		.cfi_def_cfa_register 6
 4107 0004 48897DF8 		movq	%rdi, -8(%rbp)
  14:../Checks.h   **** }
 4108              		.loc 5 14 0
 4109 0008 48837DF8 		cmpq	$0, -8(%rbp)
 4109      00
 4110 000d 0F95C0   		setne	%al
 4111              		.loc 5 15 0
 4112 0010 5D       		popq	%rbp
 4113              		.cfi_def_cfa 7, 8
 4114 0011 C3       		ret
 4115              		.cfi_endproc
 4116              	.LFE1404:
 4118              		.section	.rodata
 4119              	.LC53:
 4120 05aa 45787065 		.string	"Expected "
 4120      63746564 
 4120      2000
 4121              	.LC54:
 4122 05b4 20627574 		.string	" but was "
 4122      20776173 
 4122      2000
 4123              		.section	.text._ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE,"axG",
 4124              		.weak	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 4126              	_ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE:
 4127              	.LFB1405:
  16:../Checks.h   **** 
  17:../Checks.h   **** 
  18:../Checks.h   **** template< typename Expected, typename Actual >
  19:../Checks.h   **** void CheckEqual(TestResults& results, Expected const& expected, Actual const& actual, TestDetails c
 4128              		.loc 5 19 0
 4129              		.cfi_startproc
 4130              		.cfi_personality 0x3,__gxx_personality_v0
 4131              		.cfi_lsda 0x3,.LLSDA1405
 4132 0000 55       		pushq	%rbp
 4133              		.cfi_def_cfa_offset 16
 4134              		.cfi_offset 6, -16
 4135 0001 4889E5   		movq	%rsp, %rbp
 4136              		.cfi_def_cfa_register 6
 4137 0004 4154     		pushq	%r12
 4138 0006 53       		pushq	%rbx
 4139 0007 4881EC90 		subq	$400, %rsp
 4139      010000
 4140              		.cfi_offset 12, -24
 4141              		.cfi_offset 3, -32
 4142 000e 4889BD78 		movq	%rdi, -392(%rbp)
 4142      FEFFFF
 4143 0015 4889B570 		movq	%rsi, -400(%rbp)
 4143      FEFFFF
 4144 001c 48899568 		movq	%rdx, -408(%rbp)
 4144      FEFFFF
 4145 0023 48898D60 		movq	%rcx, -416(%rbp)
 4145      FEFFFF
 4146              	.LBB81:
 4147              	.LBB82:
  20:../Checks.h   **** {
  21:../Checks.h   ****     if (!(expected == actual))
 4148              		.loc 5 21 0
 4149 002a 488B8570 		movq	-400(%rbp), %rax
 4149      FEFFFF
 4150 0031 8B10     		movl	(%rax), %edx
 4151 0033 488B8568 		movq	-408(%rbp), %rax
 4151      FEFFFF
 4152 003a 8B00     		movl	(%rax), %eax
 4153 003c 39C2     		cmpl	%eax, %edx
 4154 003e 0F84B100 		je	.L219
 4154      0000
 4155              	.LBB83:
  22:../Checks.h   ****     {
  23:../Checks.h   ****         UnitTest::MemoryOutStream stream;
 4156              		.loc 5 23 0
 4157 0044 488D8580 		leaq	-384(%rbp), %rax
 4157      FEFFFF
 4158 004b 4889C7   		movq	%rax, %rdi
 4159              	.LEHB100:
 4160 004e E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 4160      00
 4161              	.LEHE100:
  24:../Checks.h   ****         stream << "Expected " << expected << " but was " << actual;
 4162              		.loc 5 24 0
 4163 0053 488B8568 		movq	-408(%rbp), %rax
 4163      FEFFFF
 4164 005a 8B18     		movl	(%rax), %ebx
 4165 005c 488B8570 		movq	-400(%rbp), %rax
 4165      FEFFFF
 4166 0063 448B20   		movl	(%rax), %r12d
 4167 0066 488D8580 		leaq	-384(%rbp), %rax
 4167      FEFFFF
 4168 006d BE000000 		movl	$.LC53, %esi
 4168      00
 4169 0072 4889C7   		movq	%rax, %rdi
 4170              	.LEHB101:
 4171 0075 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4171      00
 4172 007a 4489E6   		movl	%r12d, %esi
 4173 007d 4889C7   		movq	%rax, %rdi
 4174 0080 E8000000 		call	_ZNSolsEi
 4174      00
 4175              		.loc 5 24 0 is_stmt 0 discriminator 1
 4176 0085 BE000000 		movl	$.LC54, %esi
 4176      00
 4177 008a 4889C7   		movq	%rax, %rdi
 4178 008d E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4178      00
 4179 0092 89DE     		movl	%ebx, %esi
 4180 0094 4889C7   		movq	%rax, %rdi
 4181 0097 E8000000 		call	_ZNSolsEi
 4181      00
  25:../Checks.h   **** 
  26:../Checks.h   ****         results.OnTestFailure(details, stream.GetText());
 4182              		.loc 5 26 0 is_stmt 1
 4183 009c 488D8580 		leaq	-384(%rbp), %rax
 4183      FEFFFF
 4184 00a3 4889C7   		movq	%rax, %rdi
 4185 00a6 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv
 4185      00
 4186 00ab 4889C2   		movq	%rax, %rdx
 4187 00ae 488B8D60 		movq	-416(%rbp), %rcx
 4187      FEFFFF
 4188 00b5 488B8578 		movq	-392(%rbp), %rax
 4188      FEFFFF
 4189 00bc 4889CE   		movq	%rcx, %rsi
 4190 00bf 4889C7   		movq	%rax, %rdi
 4191 00c2 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 4191      00
 4192              	.LEHE101:
 4193              		.loc 5 26 0 is_stmt 0 discriminator 1
 4194 00c7 488D8580 		leaq	-384(%rbp), %rax
 4194      FEFFFF
 4195 00ce 4889C7   		movq	%rax, %rdi
 4196              	.LEHB102:
 4197 00d1 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4197      00
 4198              	.LEHE102:
 4199              	.LBE83:
 4200 00d6 EB1D     		jmp	.L219
 4201              	.L218:
 4202 00d8 4889C3   		movq	%rax, %rbx
 4203              	.LBB84:
 4204              		.loc 5 26 0
 4205 00db 488D8580 		leaq	-384(%rbp), %rax
 4205      FEFFFF
 4206 00e2 4889C7   		movq	%rax, %rdi
 4207 00e5 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4207      00
 4208 00ea 4889D8   		movq	%rbx, %rax
 4209 00ed 4889C7   		movq	%rax, %rdi
 4210              	.LEHB103:
 4211 00f0 E8000000 		call	_Unwind_Resume
 4211      00
 4212              	.LEHE103:
 4213              	.L219:
 4214              	.LBE84:
 4215              	.LBE82:
 4216              	.LBE81:
  27:../Checks.h   ****     }
  28:../Checks.h   **** }
 4217              		.loc 5 28 0 is_stmt 1
 4218 00f5 4881C490 		addq	$400, %rsp
 4218      010000
 4219 00fc 5B       		popq	%rbx
 4220 00fd 415C     		popq	%r12
 4221 00ff 5D       		popq	%rbp
 4222              		.cfi_def_cfa 7, 8
 4223 0100 C3       		ret
 4224              		.cfi_endproc
 4225              	.LFE1405:
 4226              		.section	.gcc_except_table
 4227              	.LLSDA1405:
 4228 02d4 FF       		.byte	0xff
 4229 02d5 FF       		.byte	0xff
 4230 02d6 01       		.byte	0x1
 4231 02d7 13       		.uleb128 .LLSDACSE1405-.LLSDACSB1405
 4232              	.LLSDACSB1405:
 4233 02d8 4E       		.uleb128 .LEHB100-.LFB1405
 4234 02d9 05       		.uleb128 .LEHE100-.LEHB100
 4235 02da 00       		.uleb128 0
 4236 02db 00       		.uleb128 0
 4237 02dc 75       		.uleb128 .LEHB101-.LFB1405
 4238 02dd 52       		.uleb128 .LEHE101-.LEHB101
 4239 02de D801     		.uleb128 .L218-.LFB1405
 4240 02e0 00       		.uleb128 0
 4241 02e1 D101     		.uleb128 .LEHB102-.LFB1405
 4242 02e3 05       		.uleb128 .LEHE102-.LEHB102
 4243 02e4 00       		.uleb128 0
 4244 02e5 00       		.uleb128 0
 4245 02e6 F001     		.uleb128 .LEHB103-.LFB1405
 4246 02e8 05       		.uleb128 .LEHE103-.LEHB103
 4247 02e9 00       		.uleb128 0
 4248 02ea 00       		.uleb128 0
 4249              	.LLSDACSE1405:
 4250              		.section	.text._ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE,"axG",
 4252              		.section	.text._ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE,"ax
 4253              		.weak	_ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
 4255              	_ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE:
 4256              	.LFB1406:
  19:../Checks.h   **** {
 4257              		.loc 5 19 0
 4258              		.cfi_startproc
 4259              		.cfi_personality 0x3,__gxx_personality_v0
 4260              		.cfi_lsda 0x3,.LLSDA1406
 4261 0000 55       		pushq	%rbp
 4262              		.cfi_def_cfa_offset 16
 4263              		.cfi_offset 6, -16
 4264 0001 4889E5   		movq	%rsp, %rbp
 4265              		.cfi_def_cfa_register 6
 4266 0004 4154     		pushq	%r12
 4267 0006 53       		pushq	%rbx
 4268 0007 4881EC90 		subq	$400, %rsp
 4268      010000
 4269              		.cfi_offset 12, -24
 4270              		.cfi_offset 3, -32
 4271 000e 4889BD78 		movq	%rdi, -392(%rbp)
 4271      FEFFFF
 4272 0015 4889B570 		movq	%rsi, -400(%rbp)
 4272      FEFFFF
 4273 001c 48899568 		movq	%rdx, -408(%rbp)
 4273      FEFFFF
 4274 0023 48898D60 		movq	%rcx, -416(%rbp)
 4274      FEFFFF
 4275              	.LBB85:
 4276              	.LBB86:
  21:../Checks.h   ****     {
 4277              		.loc 5 21 0
 4278 002a 488B8570 		movq	-400(%rbp), %rax
 4278      FEFFFF
 4279 0031 488B10   		movq	(%rax), %rdx
 4280 0034 488B8568 		movq	-408(%rbp), %rax
 4280      FEFFFF
 4281 003b 488B00   		movq	(%rax), %rax
 4282 003e 4839C2   		cmpq	%rax, %rdx
 4283 0041 0F84B300 		je	.L224
 4283      0000
 4284              	.LBB87:
  23:../Checks.h   ****         stream << "Expected " << expected << " but was " << actual;
 4285              		.loc 5 23 0
 4286 0047 488D8580 		leaq	-384(%rbp), %rax
 4286      FEFFFF
 4287 004e 4889C7   		movq	%rax, %rdi
 4288              	.LEHB104:
 4289 0051 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 4289      00
 4290              	.LEHE104:
  24:../Checks.h   **** 
 4291              		.loc 5 24 0
 4292 0056 488B8568 		movq	-408(%rbp), %rax
 4292      FEFFFF
 4293 005d 488B18   		movq	(%rax), %rbx
 4294 0060 488B8570 		movq	-400(%rbp), %rax
 4294      FEFFFF
 4295 0067 4C8B20   		movq	(%rax), %r12
 4296 006a 488D8580 		leaq	-384(%rbp), %rax
 4296      FEFFFF
 4297 0071 BE000000 		movl	$.LC53, %esi
 4297      00
 4298 0076 4889C7   		movq	%rax, %rdi
 4299              	.LEHB105:
 4300 0079 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4300      00
 4301 007e 4C89E6   		movq	%r12, %rsi
 4302 0081 4889C7   		movq	%rax, %rdi
 4303 0084 E8000000 		call	_ZNSolsEPKv
 4303      00
  24:../Checks.h   **** 
 4304              		.loc 5 24 0 is_stmt 0 discriminator 1
 4305 0089 BE000000 		movl	$.LC54, %esi
 4305      00
 4306 008e 4889C7   		movq	%rax, %rdi
 4307 0091 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4307      00
 4308 0096 4889DE   		movq	%rbx, %rsi
 4309 0099 4889C7   		movq	%rax, %rdi
 4310 009c E8000000 		call	_ZNSolsEPKv
 4310      00
  26:../Checks.h   ****     }
 4311              		.loc 5 26 0 is_stmt 1
 4312 00a1 488D8580 		leaq	-384(%rbp), %rax
 4312      FEFFFF
 4313 00a8 4889C7   		movq	%rax, %rdi
 4314 00ab E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv
 4314      00
 4315 00b0 4889C2   		movq	%rax, %rdx
 4316 00b3 488B8D60 		movq	-416(%rbp), %rcx
 4316      FEFFFF
 4317 00ba 488B8578 		movq	-392(%rbp), %rax
 4317      FEFFFF
 4318 00c1 4889CE   		movq	%rcx, %rsi
 4319 00c4 4889C7   		movq	%rax, %rdi
 4320 00c7 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 4320      00
 4321              	.LEHE105:
  26:../Checks.h   ****     }
 4322              		.loc 5 26 0 is_stmt 0 discriminator 1
 4323 00cc 488D8580 		leaq	-384(%rbp), %rax
 4323      FEFFFF
 4324 00d3 4889C7   		movq	%rax, %rdi
 4325              	.LEHB106:
 4326 00d6 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4326      00
 4327              	.LEHE106:
 4328              	.LBE87:
 4329 00db EB1D     		jmp	.L224
 4330              	.L223:
 4331 00dd 4889C3   		movq	%rax, %rbx
 4332              	.LBB88:
  26:../Checks.h   ****     }
 4333              		.loc 5 26 0
 4334 00e0 488D8580 		leaq	-384(%rbp), %rax
 4334      FEFFFF
 4335 00e7 4889C7   		movq	%rax, %rdi
 4336 00ea E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4336      00
 4337 00ef 4889D8   		movq	%rbx, %rax
 4338 00f2 4889C7   		movq	%rax, %rdi
 4339              	.LEHB107:
 4340 00f5 E8000000 		call	_Unwind_Resume
 4340      00
 4341              	.LEHE107:
 4342              	.L224:
 4343              	.LBE88:
 4344              	.LBE86:
 4345              	.LBE85:
 4346              		.loc 5 28 0 is_stmt 1
 4347 00fa 4881C490 		addq	$400, %rsp
 4347      010000
 4348 0101 5B       		popq	%rbx
 4349 0102 415C     		popq	%r12
 4350 0104 5D       		popq	%rbp
 4351              		.cfi_def_cfa 7, 8
 4352 0105 C3       		ret
 4353              		.cfi_endproc
 4354              	.LFE1406:
 4355              		.section	.gcc_except_table
 4356              	.LLSDA1406:
 4357 02eb FF       		.byte	0xff
 4358 02ec FF       		.byte	0xff
 4359 02ed 01       		.byte	0x1
 4360 02ee 13       		.uleb128 .LLSDACSE1406-.LLSDACSB1406
 4361              	.LLSDACSB1406:
 4362 02ef 51       		.uleb128 .LEHB104-.LFB1406
 4363 02f0 05       		.uleb128 .LEHE104-.LEHB104
 4364 02f1 00       		.uleb128 0
 4365 02f2 00       		.uleb128 0
 4366 02f3 79       		.uleb128 .LEHB105-.LFB1406
 4367 02f4 53       		.uleb128 .LEHE105-.LEHB105
 4368 02f5 DD01     		.uleb128 .L223-.LFB1406
 4369 02f7 00       		.uleb128 0
 4370 02f8 D601     		.uleb128 .LEHB106-.LFB1406
 4371 02fa 05       		.uleb128 .LEHE106-.LEHB106
 4372 02fb 00       		.uleb128 0
 4373 02fc 00       		.uleb128 0
 4374 02fd F501     		.uleb128 .LEHB107-.LFB1406
 4375 02ff 05       		.uleb128 .LEHE107-.LEHB107
 4376 0300 00       		.uleb128 0
 4377 0301 00       		.uleb128 0
 4378              	.LLSDACSE1406:
 4379              		.section	.text._ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE,"ax
 4381              		.section	.rodata
 4382              	.LC55:
 4383 05be 202B2F2D 		.string	" +/- "
 4383      2000
 4384              		.section	.text._ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE,
 4385              		.weak	_ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE
 4387              	_ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE:
 4388              	.LFB1407:
  29:../Checks.h   **** 
  30:../Checks.h   **** void CheckEqual(TestResults& results, char const* expected, char const* actual, TestDetails const& 
  31:../Checks.h   **** 
  32:../Checks.h   **** void CheckEqual(TestResults& results, char* expected, char* actual, TestDetails const& details);
  33:../Checks.h   **** 
  34:../Checks.h   **** void CheckEqual(TestResults& results, char* expected, char const* actual, TestDetails const& detail
  35:../Checks.h   **** 
  36:../Checks.h   **** void CheckEqual(TestResults& results, char const* expected, char* actual, TestDetails const& detail
  37:../Checks.h   **** 
  38:../Checks.h   **** template< typename Expected, typename Actual, typename Tolerance >
  39:../Checks.h   **** bool AreClose(Expected const& expected, Actual const& actual, Tolerance const& tolerance)
  40:../Checks.h   **** {
  41:../Checks.h   ****     return (actual >= (expected - tolerance)) && (actual <= (expected + tolerance));
  42:../Checks.h   **** }
  43:../Checks.h   **** 
  44:../Checks.h   **** template< typename Expected, typename Actual, typename Tolerance >
  45:../Checks.h   **** void CheckClose(TestResults& results, Expected const& expected, Actual const& actual, Tolerance con
 4389              		.loc 5 45 0
 4390              		.cfi_startproc
 4391              		.cfi_personality 0x3,__gxx_personality_v0
 4392              		.cfi_lsda 0x3,.LLSDA1407
 4393 0000 55       		pushq	%rbp
 4394              		.cfi_def_cfa_offset 16
 4395              		.cfi_offset 6, -16
 4396 0001 4889E5   		movq	%rsp, %rbp
 4397              		.cfi_def_cfa_register 6
 4398 0004 4155     		pushq	%r13
 4399 0006 4154     		pushq	%r12
 4400 0008 53       		pushq	%rbx
 4401 0009 4881ECA8 		subq	$424, %rsp
 4401      010000
 4402              		.cfi_offset 13, -24
 4403              		.cfi_offset 12, -32
 4404              		.cfi_offset 3, -40
 4405 0010 4889BD68 		movq	%rdi, -408(%rbp)
 4405      FEFFFF
 4406 0017 4889B560 		movq	%rsi, -416(%rbp)
 4406      FEFFFF
 4407 001e 48899558 		movq	%rdx, -424(%rbp)
 4407      FEFFFF
 4408 0025 48898D50 		movq	%rcx, -432(%rbp)
 4408      FEFFFF
 4409 002c 4C898548 		movq	%r8, -440(%rbp)
 4409      FEFFFF
 4410              	.LBB89:
 4411              	.LBB90:
  46:../Checks.h   ****                 TestDetails const& details)
  47:../Checks.h   **** {
  48:../Checks.h   ****     if (!AreClose(expected, actual, tolerance))
 4412              		.loc 5 48 0
 4413 0033 488B9550 		movq	-432(%rbp), %rdx
 4413      FEFFFF
 4414 003a 488B8D58 		movq	-424(%rbp), %rcx
 4414      FEFFFF
 4415 0041 488B8560 		movq	-416(%rbp), %rax
 4415      FEFFFF
 4416 0048 4889CE   		movq	%rcx, %rsi
 4417 004b 4889C7   		movq	%rax, %rdi
 4418 004e E8000000 		call	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
 4418      00
 4419 0053 83F001   		xorl	$1, %eax
 4420 0056 84C0     		testb	%al, %al
 4421 0058 0F84F700 		je	.L229
 4421      0000
 4422              	.LBB91:
  49:../Checks.h   ****     { 
  50:../Checks.h   ****         UnitTest::MemoryOutStream stream;
 4423              		.loc 5 50 0
 4424 005e 488D8570 		leaq	-400(%rbp), %rax
 4424      FEFFFF
 4425 0065 4889C7   		movq	%rax, %rdi
 4426              	.LEHB108:
 4427 0068 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 4427      00
 4428              	.LEHE108:
  51:../Checks.h   ****         stream << "Expected " << expected << " +/- " << tolerance << " but was " << actual;
 4429              		.loc 5 51 0
 4430 006d 488B8558 		movq	-424(%rbp), %rax
 4430      FEFFFF
 4431 0074 8B18     		movl	(%rax), %ebx
 4432 0076 488B8550 		movq	-432(%rbp), %rax
 4432      FEFFFF
 4433 007d 448B20   		movl	(%rax), %r12d
 4434 0080 488B8560 		movq	-416(%rbp), %rax
 4434      FEFFFF
 4435 0087 448B28   		movl	(%rax), %r13d
 4436 008a 488D8570 		leaq	-400(%rbp), %rax
 4436      FEFFFF
 4437 0091 BE000000 		movl	$.LC53, %esi
 4437      00
 4438 0096 4889C7   		movq	%rax, %rdi
 4439              	.LEHB109:
 4440 0099 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4440      00
 4441 009e 4489AD44 		movl	%r13d, -444(%rbp)
 4441      FEFFFF
 4442 00a5 F30F1085 		movss	-444(%rbp), %xmm0
 4442      44FEFFFF 
 4443 00ad 4889C7   		movq	%rax, %rdi
 4444 00b0 E8000000 		call	_ZNSolsEf
 4444      00
 4445              		.loc 5 51 0 is_stmt 0 discriminator 1
 4446 00b5 BE000000 		movl	$.LC55, %esi
 4446      00
 4447 00ba 4889C7   		movq	%rax, %rdi
 4448 00bd E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4448      00
 4449 00c2 4489A544 		movl	%r12d, -444(%rbp)
 4449      FEFFFF
 4450 00c9 F30F1085 		movss	-444(%rbp), %xmm0
 4450      44FEFFFF 
 4451 00d1 4889C7   		movq	%rax, %rdi
 4452 00d4 E8000000 		call	_ZNSolsEf
 4452      00
 4453 00d9 BE000000 		movl	$.LC54, %esi
 4453      00
 4454 00de 4889C7   		movq	%rax, %rdi
 4455 00e1 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4455      00
 4456 00e6 899D44FE 		movl	%ebx, -444(%rbp)
 4456      FFFF
 4457 00ec F30F1085 		movss	-444(%rbp), %xmm0
 4457      44FEFFFF 
 4458 00f4 4889C7   		movq	%rax, %rdi
 4459 00f7 E8000000 		call	_ZNSolsEf
 4459      00
  52:../Checks.h   **** 
  53:../Checks.h   ****         results.OnTestFailure(details, stream.GetText());
 4460              		.loc 5 53 0 is_stmt 1
 4461 00fc 488D8570 		leaq	-400(%rbp), %rax
 4461      FEFFFF
 4462 0103 4889C7   		movq	%rax, %rdi
 4463 0106 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv
 4463      00
 4464 010b 4889C2   		movq	%rax, %rdx
 4465 010e 488B8D48 		movq	-440(%rbp), %rcx
 4465      FEFFFF
 4466 0115 488B8568 		movq	-408(%rbp), %rax
 4466      FEFFFF
 4467 011c 4889CE   		movq	%rcx, %rsi
 4468 011f 4889C7   		movq	%rax, %rdi
 4469 0122 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 4469      00
 4470              	.LEHE109:
 4471              		.loc 5 53 0 is_stmt 0 discriminator 1
 4472 0127 488D8570 		leaq	-400(%rbp), %rax
 4472      FEFFFF
 4473 012e 4889C7   		movq	%rax, %rdi
 4474              	.LEHB110:
 4475 0131 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4475      00
 4476              	.LEHE110:
 4477              	.LBE91:
 4478 0136 EB1D     		jmp	.L229
 4479              	.L228:
 4480 0138 4889C3   		movq	%rax, %rbx
 4481              	.LBB92:
 4482              		.loc 5 53 0
 4483 013b 488D8570 		leaq	-400(%rbp), %rax
 4483      FEFFFF
 4484 0142 4889C7   		movq	%rax, %rdi
 4485 0145 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4485      00
 4486 014a 4889D8   		movq	%rbx, %rax
 4487 014d 4889C7   		movq	%rax, %rdi
 4488              	.LEHB111:
 4489 0150 E8000000 		call	_Unwind_Resume
 4489      00
 4490              	.LEHE111:
 4491              	.L229:
 4492              	.LBE92:
 4493              	.LBE90:
 4494              	.LBE89:
  54:../Checks.h   ****     }
  55:../Checks.h   **** }
 4495              		.loc 5 55 0 is_stmt 1
 4496 0155 4881C4A8 		addq	$424, %rsp
 4496      010000
 4497 015c 5B       		popq	%rbx
 4498 015d 415C     		popq	%r12
 4499 015f 415D     		popq	%r13
 4500 0161 5D       		popq	%rbp
 4501              		.cfi_def_cfa 7, 8
 4502 0162 C3       		ret
 4503              		.cfi_endproc
 4504              	.LFE1407:
 4505              		.section	.gcc_except_table
 4506              	.LLSDA1407:
 4507 0302 FF       		.byte	0xff
 4508 0303 FF       		.byte	0xff
 4509 0304 01       		.byte	0x1
 4510 0305 15       		.uleb128 .LLSDACSE1407-.LLSDACSB1407
 4511              	.LLSDACSB1407:
 4512 0306 68       		.uleb128 .LEHB108-.LFB1407
 4513 0307 05       		.uleb128 .LEHE108-.LEHB108
 4514 0308 00       		.uleb128 0
 4515 0309 00       		.uleb128 0
 4516 030a 9901     		.uleb128 .LEHB109-.LFB1407
 4517 030c 8E01     		.uleb128 .LEHE109-.LEHB109
 4518 030e B802     		.uleb128 .L228-.LFB1407
 4519 0310 00       		.uleb128 0
 4520 0311 B102     		.uleb128 .LEHB110-.LFB1407
 4521 0313 05       		.uleb128 .LEHE110-.LEHB110
 4522 0314 00       		.uleb128 0
 4523 0315 00       		.uleb128 0
 4524 0316 D002     		.uleb128 .LEHB111-.LFB1407
 4525 0318 05       		.uleb128 .LEHE111-.LEHB111
 4526 0319 00       		.uleb128 0
 4527 031a 00       		.uleb128 0
 4528              	.LLSDACSE1407:
 4529              		.section	.text._ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE,
 4531              		.section	.rodata
 4532              	.LC56:
 4533 05c4 45787065 		.string	"Expected [ "
 4533      63746564 
 4533      205B2000 
 4534              	.LC57:
 4535 05d0 2000     		.string	" "
 4536              	.LC58:
 4537 05d2 5D202B2F 		.string	"] +/- "
 4537      2D2000
 4538              	.LC59:
 4539 05d9 20627574 		.string	" but was [ "
 4539      20776173 
 4539      205B2000 
 4540              	.LC60:
 4541 05e5 5D00     		.string	"]"
 4542              		.section	.text._ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11Te
 4543              		.weak	_ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetails
 4545              	_ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE:
 4546              	.LFB1408:
  56:../Checks.h   **** 
  57:../Checks.h   **** 
  58:../Checks.h   **** template< typename Expected, typename Actual >
  59:../Checks.h   **** void CheckArrayEqual(TestResults& results, Expected const& expected, Actual const& actual,
  60:../Checks.h   ****                 int const count, TestDetails const& details)
  61:../Checks.h   **** {
  62:../Checks.h   ****     bool equal = true;
  63:../Checks.h   ****     for (int i = 0; i < count; ++i)
  64:../Checks.h   ****         equal &= (expected[i] == actual[i]);
  65:../Checks.h   **** 
  66:../Checks.h   ****     if (!equal)
  67:../Checks.h   ****     {
  68:../Checks.h   ****         UnitTest::MemoryOutStream stream;
  69:../Checks.h   **** 
  70:../Checks.h   **** 		stream << "Expected [ ";
  71:../Checks.h   **** 
  72:../Checks.h   **** 		for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
  73:../Checks.h   ****             stream << expected[expectedIndex] << " ";
  74:../Checks.h   **** 
  75:../Checks.h   **** 		stream << "] but was [ ";
  76:../Checks.h   **** 
  77:../Checks.h   **** 		for (int actualIndex = 0; actualIndex < count; ++actualIndex)
  78:../Checks.h   ****             stream << actual[actualIndex] << " ";
  79:../Checks.h   **** 
  80:../Checks.h   **** 		stream << "]";
  81:../Checks.h   **** 
  82:../Checks.h   ****         results.OnTestFailure(details, stream.GetText());
  83:../Checks.h   ****     }
  84:../Checks.h   **** }
  85:../Checks.h   **** 
  86:../Checks.h   **** template< typename Expected, typename Actual, typename Tolerance >
  87:../Checks.h   **** bool ArrayAreClose(Expected const& expected, Actual const& actual, int const count, Tolerance const
  88:../Checks.h   **** {
  89:../Checks.h   ****     bool equal = true;
  90:../Checks.h   ****     for (int i = 0; i < count; ++i)
  91:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
  92:../Checks.h   ****     return equal;
  93:../Checks.h   **** }
  94:../Checks.h   **** 
  95:../Checks.h   **** template< typename Expected, typename Actual, typename Tolerance >
  96:../Checks.h   **** void CheckArrayClose(TestResults& results, Expected const& expected, Actual const& actual,
 4547              		.loc 5 96 0
 4548              		.cfi_startproc
 4549              		.cfi_personality 0x3,__gxx_personality_v0
 4550              		.cfi_lsda 0x3,.LLSDA1408
 4551 0000 55       		pushq	%rbp
 4552              		.cfi_def_cfa_offset 16
 4553              		.cfi_offset 6, -16
 4554 0001 4889E5   		movq	%rsp, %rbp
 4555              		.cfi_def_cfa_register 6
 4556 0004 53       		pushq	%rbx
 4557 0005 4881ECB8 		subq	$440, %rsp
 4557      010000
 4558              		.cfi_offset 3, -24
 4559 000c 4889BD68 		movq	%rdi, -408(%rbp)
 4559      FEFFFF
 4560 0013 4889B560 		movq	%rsi, -416(%rbp)
 4560      FEFFFF
 4561 001a 48899558 		movq	%rdx, -424(%rbp)
 4561      FEFFFF
 4562 0021 898D54FE 		movl	%ecx, -428(%rbp)
 4562      FFFF
 4563 0027 4C898548 		movq	%r8, -440(%rbp)
 4563      FEFFFF
 4564 002e 4C898D40 		movq	%r9, -448(%rbp)
 4564      FEFFFF
 4565              	.LBB93:
  97:../Checks.h   ****                    int const count, Tolerance const& tolerance, TestDetails const& details)
  98:../Checks.h   **** {
  99:../Checks.h   ****     bool equal = ArrayAreClose(expected, actual, count, tolerance);
 4566              		.loc 5 99 0
 4567 0035 488B8D48 		movq	-440(%rbp), %rcx
 4567      FEFFFF
 4568 003c 8B9554FE 		movl	-428(%rbp), %edx
 4568      FFFF
 4569 0042 488BB558 		movq	-424(%rbp), %rsi
 4569      FEFFFF
 4570 0049 488B8560 		movq	-416(%rbp), %rax
 4570      FEFFFF
 4571 0050 4889C7   		movq	%rax, %rdi
 4572 0053 E8000000 		call	_ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_
 4572      00
 4573 0058 888577FE 		movb	%al, -393(%rbp)
 4573      FFFF
 4574              	.LBB94:
 100:../Checks.h   **** 
 101:../Checks.h   ****     if (!equal)
 4575              		.loc 5 101 0
 4576 005e 0FB68577 		movzbl	-393(%rbp), %eax
 4576      FEFFFF
 4577 0065 83F001   		xorl	$1, %eax
 4578 0068 84C0     		testb	%al, %al
 4579 006a 0F848C01 		je	.L238
 4579      0000
 4580              	.LBB95:
 102:../Checks.h   ****     {
 103:../Checks.h   ****         UnitTest::MemoryOutStream stream;
 4581              		.loc 5 103 0
 4582 0070 488D8580 		leaq	-384(%rbp), %rax
 4582      FEFFFF
 4583 0077 4889C7   		movq	%rax, %rdi
 4584              	.LEHB112:
 4585 007a E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 4585      00
 4586              	.LEHE112:
 104:../Checks.h   **** 
 105:../Checks.h   ****         stream << "Expected [ ";
 4587              		.loc 5 105 0
 4588 007f 488D8580 		leaq	-384(%rbp), %rax
 4588      FEFFFF
 4589 0086 BE000000 		movl	$.LC56, %esi
 4589      00
 4590 008b 4889C7   		movq	%rax, %rdi
 4591              	.LEHB113:
 4592 008e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4592      00
 4593              	.LBB96:
 106:../Checks.h   ****         for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
 4594              		.loc 5 106 0
 4595 0093 C78578FE 		movl	$0, -392(%rbp)
 4595      FFFF0000 
 4595      0000
 4596 009d EB44     		jmp	.L232
 4597              	.L233:
 107:../Checks.h   ****             stream << expected[expectedIndex] << " ";
 4598              		.loc 5 107 0
 4599 009f 488B8560 		movq	-416(%rbp), %rax
 4599      FEFFFF
 4600 00a6 8B9578FE 		movl	-392(%rbp), %edx
 4600      FFFF
 4601 00ac 4863D2   		movslq	%edx, %rdx
 4602 00af 8B0490   		movl	(%rax,%rdx,4), %eax
 4603 00b2 488D9580 		leaq	-384(%rbp), %rdx
 4603      FEFFFF
 4604 00b9 898550FE 		movl	%eax, -432(%rbp)
 4604      FFFF
 4605 00bf F30F1085 		movss	-432(%rbp), %xmm0
 4605      50FEFFFF 
 4606 00c7 4889D7   		movq	%rdx, %rdi
 4607 00ca E8000000 		call	_ZNSolsEf
 4607      00
 4608 00cf BE000000 		movl	$.LC57, %esi
 4608      00
 4609 00d4 4889C7   		movq	%rax, %rdi
 4610 00d7 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4610      00
 106:../Checks.h   ****         for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
 4611              		.loc 5 106 0
 4612 00dc 838578FE 		addl	$1, -392(%rbp)
 4612      FFFF01
 4613              	.L232:
 106:../Checks.h   ****         for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
 4614              		.loc 5 106 0 is_stmt 0 discriminator 1
 4615 00e3 8B8578FE 		movl	-392(%rbp), %eax
 4615      FFFF
 4616 00e9 3B8554FE 		cmpl	-428(%rbp), %eax
 4616      FFFF
 4617 00ef 7CAE     		jl	.L233
 4618              	.LBE96:
 108:../Checks.h   ****         stream << "] +/- " << tolerance << " but was [ ";
 4619              		.loc 5 108 0 is_stmt 1
 4620 00f1 488B8548 		movq	-440(%rbp), %rax
 4620      FEFFFF
 4621 00f8 8B18     		movl	(%rax), %ebx
 4622 00fa 488D8580 		leaq	-384(%rbp), %rax
 4622      FEFFFF
 4623 0101 BE000000 		movl	$.LC58, %esi
 4623      00
 4624 0106 4889C7   		movq	%rax, %rdi
 4625 0109 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4625      00
 4626 010e 899D50FE 		movl	%ebx, -432(%rbp)
 4626      FFFF
 4627 0114 F30F1085 		movss	-432(%rbp), %xmm0
 4627      50FEFFFF 
 4628 011c 4889C7   		movq	%rax, %rdi
 4629 011f E8000000 		call	_ZNSolsEf
 4629      00
 4630              		.loc 5 108 0 is_stmt 0 discriminator 1
 4631 0124 BE000000 		movl	$.LC59, %esi
 4631      00
 4632 0129 4889C7   		movq	%rax, %rdi
 4633 012c E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4633      00
 4634              	.LBB97:
 109:../Checks.h   **** 
 110:../Checks.h   **** 		for (int actualIndex = 0; actualIndex < count; ++actualIndex)
 4635              		.loc 5 110 0 is_stmt 1
 4636 0131 C7857CFE 		movl	$0, -388(%rbp)
 4636      FFFF0000 
 4636      0000
 4637 013b EB44     		jmp	.L234
 4638              	.L235:
 111:../Checks.h   ****             stream << actual[actualIndex] << " ";
 4639              		.loc 5 111 0
 4640 013d 488B8558 		movq	-424(%rbp), %rax
 4640      FEFFFF
 4641 0144 8B957CFE 		movl	-388(%rbp), %edx
 4641      FFFF
 4642 014a 4863D2   		movslq	%edx, %rdx
 4643 014d 8B0490   		movl	(%rax,%rdx,4), %eax
 4644 0150 488D9580 		leaq	-384(%rbp), %rdx
 4644      FEFFFF
 4645 0157 898550FE 		movl	%eax, -432(%rbp)
 4645      FFFF
 4646 015d F30F1085 		movss	-432(%rbp), %xmm0
 4646      50FEFFFF 
 4647 0165 4889D7   		movq	%rdx, %rdi
 4648 0168 E8000000 		call	_ZNSolsEf
 4648      00
 4649 016d BE000000 		movl	$.LC57, %esi
 4649      00
 4650 0172 4889C7   		movq	%rax, %rdi
 4651 0175 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4651      00
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 4652              		.loc 5 110 0
 4653 017a 83857CFE 		addl	$1, -388(%rbp)
 4653      FFFF01
 4654              	.L234:
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 4655              		.loc 5 110 0 is_stmt 0 discriminator 1
 4656 0181 8B857CFE 		movl	-388(%rbp), %eax
 4656      FFFF
 4657 0187 3B8554FE 		cmpl	-428(%rbp), %eax
 4657      FFFF
 4658 018d 7CAE     		jl	.L235
 4659              	.LBE97:
 112:../Checks.h   ****         stream << "]";
 4660              		.loc 5 112 0 is_stmt 1
 4661 018f 488D8580 		leaq	-384(%rbp), %rax
 4661      FEFFFF
 4662 0196 BE000000 		movl	$.LC60, %esi
 4662      00
 4663 019b 4889C7   		movq	%rax, %rdi
 4664 019e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 4664      00
 113:../Checks.h   **** 
 114:../Checks.h   ****         results.OnTestFailure(details, stream.GetText());
 4665              		.loc 5 114 0
 4666 01a3 488D8580 		leaq	-384(%rbp), %rax
 4666      FEFFFF
 4667 01aa 4889C7   		movq	%rax, %rdi
 4668 01ad E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv
 4668      00
 4669 01b2 4889C2   		movq	%rax, %rdx
 4670 01b5 488B8D40 		movq	-448(%rbp), %rcx
 4670      FEFFFF
 4671 01bc 488B8568 		movq	-408(%rbp), %rax
 4671      FEFFFF
 4672 01c3 4889CE   		movq	%rcx, %rsi
 4673 01c6 4889C7   		movq	%rax, %rdi
 4674 01c9 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 4674      00
 4675              	.LEHE113:
 4676              		.loc 5 114 0 is_stmt 0 discriminator 1
 4677 01ce 488D8580 		leaq	-384(%rbp), %rax
 4677      FEFFFF
 4678 01d5 4889C7   		movq	%rax, %rdi
 4679              	.LEHB114:
 4680 01d8 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4680      00
 4681              	.LEHE114:
 4682              	.LBE95:
 4683 01dd EB1D     		jmp	.L238
 4684              	.L237:
 4685 01df 4889C3   		movq	%rax, %rbx
 4686              	.LBB98:
 4687              		.loc 5 114 0
 4688 01e2 488D8580 		leaq	-384(%rbp), %rax
 4688      FEFFFF
 4689 01e9 4889C7   		movq	%rax, %rdi
 4690 01ec E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 4690      00
 4691 01f1 4889D8   		movq	%rbx, %rax
 4692 01f4 4889C7   		movq	%rax, %rdi
 4693              	.LEHB115:
 4694 01f7 E8000000 		call	_Unwind_Resume
 4694      00
 4695              	.LEHE115:
 4696              	.L238:
 4697              	.LBE98:
 4698              	.LBE94:
 4699              	.LBE93:
 115:../Checks.h   ****     }
 116:../Checks.h   **** }
 4700              		.loc 5 116 0 is_stmt 1
 4701 01fc 4881C4B8 		addq	$440, %rsp
 4701      010000
 4702 0203 5B       		popq	%rbx
 4703 0204 5D       		popq	%rbp
 4704              		.cfi_def_cfa 7, 8
 4705 0205 C3       		ret
 4706              		.cfi_endproc
 4707              	.LFE1408:
 4708              		.section	.gcc_except_table
 4709              	.LLSDA1408:
 4710 031b FF       		.byte	0xff
 4711 031c FF       		.byte	0xff
 4712 031d 01       		.byte	0x1
 4713 031e 15       		.uleb128 .LLSDACSE1408-.LLSDACSB1408
 4714              	.LLSDACSB1408:
 4715 031f 7A       		.uleb128 .LEHB112-.LFB1408
 4716 0320 05       		.uleb128 .LEHE112-.LEHB112
 4717 0321 00       		.uleb128 0
 4718 0322 00       		.uleb128 0
 4719 0323 8E01     		.uleb128 .LEHB113-.LFB1408
 4720 0325 C002     		.uleb128 .LEHE113-.LEHB113
 4721 0327 DF03     		.uleb128 .L237-.LFB1408
 4722 0329 00       		.uleb128 0
 4723 032a D803     		.uleb128 .LEHB114-.LFB1408
 4724 032c 05       		.uleb128 .LEHE114-.LEHB114
 4725 032d 00       		.uleb128 0
 4726 032e 00       		.uleb128 0
 4727 032f F703     		.uleb128 .LEHB115-.LFB1408
 4728 0331 05       		.uleb128 .LEHE115-.LEHB115
 4729 0332 00       		.uleb128 0
 4730 0333 00       		.uleb128 0
 4731              	.LLSDACSE1408:
 4732              		.section	.text._ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11Te
 4734              		.section	.text._ZNSaIfEC2Ev,"axG",@progbits,_ZNSaIfEC5Ev,comdat
 4735              		.align 2
 4736              		.weak	_ZNSaIfEC2Ev
 4738              	_ZNSaIfEC2Ev:
 4739              	.LFB1410:
 4740              		.file 6 "/usr/include/c++/4.8/bits/allocator.h"
   1:/usr/include/c++/4.8/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/4.8/bits/allocator.h **** 
   3:/usr/include/c++/4.8/bits/allocator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/allocator.h **** //
   5:/usr/include/c++/4.8/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/allocator.h **** // any later version.
  10:/usr/include/c++/4.8/bits/allocator.h **** 
  11:/usr/include/c++/4.8/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/allocator.h **** 
  16:/usr/include/c++/4.8/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/allocator.h **** 
  20:/usr/include/c++/4.8/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/allocator.h **** 
  25:/usr/include/c++/4.8/bits/allocator.h **** /*
  26:/usr/include/c++/4.8/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/4.8/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/4.8/bits/allocator.h ****  *
  29:/usr/include/c++/4.8/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/4.8/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/4.8/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/4.8/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/4.8/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/4.8/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/4.8/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/4.8/bits/allocator.h ****  */
  37:/usr/include/c++/4.8/bits/allocator.h **** 
  38:/usr/include/c++/4.8/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/4.8/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/4.8/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/4.8/bits/allocator.h ****  */
  42:/usr/include/c++/4.8/bits/allocator.h **** 
  43:/usr/include/c++/4.8/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/4.8/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/4.8/bits/allocator.h **** 
  46:/usr/include/c++/4.8/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/4.8/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/4.8/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/4.8/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/4.8/bits/allocator.h **** #endif
  51:/usr/include/c++/4.8/bits/allocator.h **** 
  52:/usr/include/c++/4.8/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/4.8/bits/allocator.h **** {
  54:/usr/include/c++/4.8/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/4.8/bits/allocator.h **** 
  56:/usr/include/c++/4.8/bits/allocator.h ****   /**
  57:/usr/include/c++/4.8/bits/allocator.h ****    *  @addtogroup allocators
  58:/usr/include/c++/4.8/bits/allocator.h ****    *  @{
  59:/usr/include/c++/4.8/bits/allocator.h ****    */
  60:/usr/include/c++/4.8/bits/allocator.h **** 
  61:/usr/include/c++/4.8/bits/allocator.h ****   /// allocator<void> specialization.
  62:/usr/include/c++/4.8/bits/allocator.h ****   template<>
  63:/usr/include/c++/4.8/bits/allocator.h ****     class allocator<void>
  64:/usr/include/c++/4.8/bits/allocator.h ****     {
  65:/usr/include/c++/4.8/bits/allocator.h ****     public:
  66:/usr/include/c++/4.8/bits/allocator.h ****       typedef size_t      size_type;
  67:/usr/include/c++/4.8/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  68:/usr/include/c++/4.8/bits/allocator.h ****       typedef void*       pointer;
  69:/usr/include/c++/4.8/bits/allocator.h ****       typedef const void* const_pointer;
  70:/usr/include/c++/4.8/bits/allocator.h ****       typedef void        value_type;
  71:/usr/include/c++/4.8/bits/allocator.h **** 
  72:/usr/include/c++/4.8/bits/allocator.h ****       template<typename _Tp1>
  73:/usr/include/c++/4.8/bits/allocator.h ****         struct rebind
  74:/usr/include/c++/4.8/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  75:/usr/include/c++/4.8/bits/allocator.h **** 
  76:/usr/include/c++/4.8/bits/allocator.h **** #if __cplusplus >= 201103L
  77:/usr/include/c++/4.8/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  78:/usr/include/c++/4.8/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  79:/usr/include/c++/4.8/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  80:/usr/include/c++/4.8/bits/allocator.h **** #endif
  81:/usr/include/c++/4.8/bits/allocator.h ****     };
  82:/usr/include/c++/4.8/bits/allocator.h **** 
  83:/usr/include/c++/4.8/bits/allocator.h ****   /**
  84:/usr/include/c++/4.8/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  85:/usr/include/c++/4.8/bits/allocator.h ****    *
  86:/usr/include/c++/4.8/bits/allocator.h ****    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html
  87:/usr/include/c++/4.8/bits/allocator.h ****    *  for further details.
  88:/usr/include/c++/4.8/bits/allocator.h ****    *
  89:/usr/include/c++/4.8/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  90:/usr/include/c++/4.8/bits/allocator.h ****    */
  91:/usr/include/c++/4.8/bits/allocator.h ****   template<typename _Tp>
  92:/usr/include/c++/4.8/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
  93:/usr/include/c++/4.8/bits/allocator.h ****     {
  94:/usr/include/c++/4.8/bits/allocator.h ****    public:
  95:/usr/include/c++/4.8/bits/allocator.h ****       typedef size_t     size_type;
  96:/usr/include/c++/4.8/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  97:/usr/include/c++/4.8/bits/allocator.h ****       typedef _Tp*       pointer;
  98:/usr/include/c++/4.8/bits/allocator.h ****       typedef const _Tp* const_pointer;
  99:/usr/include/c++/4.8/bits/allocator.h ****       typedef _Tp&       reference;
 100:/usr/include/c++/4.8/bits/allocator.h ****       typedef const _Tp& const_reference;
 101:/usr/include/c++/4.8/bits/allocator.h ****       typedef _Tp        value_type;
 102:/usr/include/c++/4.8/bits/allocator.h **** 
 103:/usr/include/c++/4.8/bits/allocator.h ****       template<typename _Tp1>
 104:/usr/include/c++/4.8/bits/allocator.h ****         struct rebind
 105:/usr/include/c++/4.8/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 106:/usr/include/c++/4.8/bits/allocator.h **** 
 107:/usr/include/c++/4.8/bits/allocator.h **** #if __cplusplus >= 201103L
 108:/usr/include/c++/4.8/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 109:/usr/include/c++/4.8/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 110:/usr/include/c++/4.8/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 111:/usr/include/c++/4.8/bits/allocator.h **** #endif
 112:/usr/include/c++/4.8/bits/allocator.h **** 
 113:/usr/include/c++/4.8/bits/allocator.h ****       allocator() throw() { }
 4741              		.loc 6 113 0
 4742              		.cfi_startproc
 4743 0000 55       		pushq	%rbp
 4744              		.cfi_def_cfa_offset 16
 4745              		.cfi_offset 6, -16
 4746 0001 4889E5   		movq	%rsp, %rbp
 4747              		.cfi_def_cfa_register 6
 4748 0004 4883EC10 		subq	$16, %rsp
 4749 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4750              	.LBB99:
 4751              		.loc 6 113 0
 4752 000c 488B45F8 		movq	-8(%rbp), %rax
 4753 0010 4889C7   		movq	%rax, %rdi
 4754 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfEC2Ev
 4754      00
 4755              	.LBE99:
 4756 0018 C9       		leave
 4757              		.cfi_def_cfa 7, 8
 4758 0019 C3       		ret
 4759              		.cfi_endproc
 4760              	.LFE1410:
 4762              		.weak	_ZNSaIfEC1Ev
 4763              		.set	_ZNSaIfEC1Ev,_ZNSaIfEC2Ev
 4764              		.section	.text._ZNSaIfED2Ev,"axG",@progbits,_ZNSaIfED5Ev,comdat
 4765              		.align 2
 4766              		.weak	_ZNSaIfED2Ev
 4768              	_ZNSaIfED2Ev:
 4769              	.LFB1413:
 114:/usr/include/c++/4.8/bits/allocator.h **** 
 115:/usr/include/c++/4.8/bits/allocator.h ****       allocator(const allocator& __a) throw()
 116:/usr/include/c++/4.8/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 117:/usr/include/c++/4.8/bits/allocator.h **** 
 118:/usr/include/c++/4.8/bits/allocator.h ****       template<typename _Tp1>
 119:/usr/include/c++/4.8/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 120:/usr/include/c++/4.8/bits/allocator.h **** 
 121:/usr/include/c++/4.8/bits/allocator.h ****       ~allocator() throw() { }
 4770              		.loc 6 121 0
 4771              		.cfi_startproc
 4772 0000 55       		pushq	%rbp
 4773              		.cfi_def_cfa_offset 16
 4774              		.cfi_offset 6, -16
 4775 0001 4889E5   		movq	%rsp, %rbp
 4776              		.cfi_def_cfa_register 6
 4777 0004 4883EC10 		subq	$16, %rsp
 4778 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4779              	.LBB100:
 4780              		.loc 6 121 0
 4781 000c 488B45F8 		movq	-8(%rbp), %rax
 4782 0010 4889C7   		movq	%rax, %rdi
 4783 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfED2Ev
 4783      00
 4784              	.LBE100:
 4785 0018 C9       		leave
 4786              		.cfi_def_cfa 7, 8
 4787 0019 C3       		ret
 4788              		.cfi_endproc
 4789              	.LFE1413:
 4791              		.weak	_ZNSaIfED1Ev
 4792              		.set	_ZNSaIfED1Ev,_ZNSaIfED2Ev
 4793              		.section	.text._ZNSt6vectorIfSaIfEEC2EmRKfRKS0_,"axG",@progbits,_ZNSt6vectorIfSaIfEEC5EmRKfRKS0_,c
 4794              		.align 2
 4795              		.weak	_ZNSt6vectorIfSaIfEEC2EmRKfRKS0_
 4797              	_ZNSt6vectorIfSaIfEEC2EmRKfRKS0_:
 4798              	.LFB1416:
 4799              		.file 7 "/usr/include/c++/4.8/bits/stl_vector.h"
   1:/usr/include/c++/4.8/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_vector.h **** 
   3:/usr/include/c++/4.8/bits/stl_vector.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_vector.h **** //
   5:/usr/include/c++/4.8/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_vector.h **** 
  11:/usr/include/c++/4.8/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_vector.h **** 
  16:/usr/include/c++/4.8/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_vector.h **** 
  20:/usr/include/c++/4.8/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_vector.h **** 
  25:/usr/include/c++/4.8/bits/stl_vector.h **** /*
  26:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  27:/usr/include/c++/4.8/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  30:/usr/include/c++/4.8/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  38:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  39:/usr/include/c++/4.8/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/4.8/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  42:/usr/include/c++/4.8/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/4.8/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_vector.h ****  */
  50:/usr/include/c++/4.8/bits/stl_vector.h **** 
  51:/usr/include/c++/4.8/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/4.8/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/4.8/bits/stl_vector.h ****  */
  55:/usr/include/c++/4.8/bits/stl_vector.h **** 
  56:/usr/include/c++/4.8/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/4.8/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/4.8/bits/stl_vector.h **** 
  59:/usr/include/c++/4.8/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/4.8/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/4.8/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/4.8/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
  65:/usr/include/c++/4.8/bits/stl_vector.h **** 
  66:/usr/include/c++/4.8/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/4.8/bits/stl_vector.h **** {
  68:/usr/include/c++/4.8/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/4.8/bits/stl_vector.h **** 
  70:/usr/include/c++/4.8/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/4.8/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/4.8/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/4.8/bits/stl_vector.h ****     {
  74:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/4.8/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/4.8/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/4.8/bits/stl_vector.h **** 
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/4.8/bits/stl_vector.h ****       {
  82:/usr/include/c++/4.8/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/4.8/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/4.8/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/4.8/bits/stl_vector.h **** 
  86:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  88:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/4.8/bits/stl_vector.h **** 
  90:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a)
  91:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  92:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/4.8/bits/stl_vector.h **** 
  94:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a)
  96:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_start(0), _M_finish(0), _M_end_of_storage(0)
  98:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 100:/usr/include/c++/4.8/bits/stl_vector.h **** 
 101:/usr/include/c++/4.8/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x)
 102:/usr/include/c++/4.8/bits/stl_vector.h **** 	{
 103:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
 107:/usr/include/c++/4.8/bits/stl_vector.h ****       };
 108:/usr/include/c++/4.8/bits/stl_vector.h ****       
 109:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 110:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/4.8/bits/stl_vector.h **** 
 112:/usr/include/c++/4.8/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/4.8/bits/stl_vector.h **** 
 116:/usr/include/c++/4.8/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/4.8/bits/stl_vector.h **** 
 120:/usr/include/c++/4.8/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/4.8/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/4.8/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/4.8/bits/stl_vector.h **** 
 124:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/4.8/bits/stl_vector.h **** 
 127:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a)
 128:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/4.8/bits/stl_vector.h **** 
 130:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 133:/usr/include/c++/4.8/bits/stl_vector.h **** 
 134:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/4.8/bits/stl_vector.h **** 
 138:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a)
 140:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/4.8/bits/stl_vector.h **** 
 142:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x)
 143:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/4.8/bits/stl_vector.h **** 
 146:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 149:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/4.8/bits/stl_vector.h **** 	else
 152:/usr/include/c++/4.8/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/4.8/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:/usr/include/c++/4.8/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/4.8/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 157:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 158:/usr/include/c++/4.8/bits/stl_vector.h **** 
 159:/usr/include/c++/4.8/bits/stl_vector.h ****       ~_Vector_base()
 160:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/4.8/bits/stl_vector.h **** 
 163:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 164:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/4.8/bits/stl_vector.h **** 
 166:/usr/include/c++/4.8/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/4.8/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 169:/usr/include/c++/4.8/bits/stl_vector.h **** 
 170:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 171:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 172:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 173:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__p)
 174:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 175:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 176:/usr/include/c++/4.8/bits/stl_vector.h **** 
 177:/usr/include/c++/4.8/bits/stl_vector.h ****     private:
 178:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 179:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 180:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 181:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 182:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 183:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 184:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 185:/usr/include/c++/4.8/bits/stl_vector.h ****     };
 186:/usr/include/c++/4.8/bits/stl_vector.h **** 
 187:/usr/include/c++/4.8/bits/stl_vector.h **** 
 188:/usr/include/c++/4.8/bits/stl_vector.h ****   /**
 189:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 190:/usr/include/c++/4.8/bits/stl_vector.h ****    *  individual elements in any order.
 191:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 192:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @ingroup sequences
 193:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 194:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 195:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 196:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 197:/usr/include/c++/4.8/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 198:/usr/include/c++/4.8/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 199:/usr/include/c++/4.8/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 200:/usr/include/c++/4.8/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 201:/usr/include/c++/4.8/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 202:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 203:/usr/include/c++/4.8/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 204:/usr/include/c++/4.8/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 205:/usr/include/c++/4.8/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 206:/usr/include/c++/4.8/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 207:/usr/include/c++/4.8/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 208:/usr/include/c++/4.8/bits/stl_vector.h ****   */
 209:/usr/include/c++/4.8/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 210:/usr/include/c++/4.8/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 211:/usr/include/c++/4.8/bits/stl_vector.h ****     {
 212:/usr/include/c++/4.8/bits/stl_vector.h ****       // Concept requirements.
 213:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 214:/usr/include/c++/4.8/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 215:/usr/include/c++/4.8/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 216:/usr/include/c++/4.8/bits/stl_vector.h ****       
 217:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 218:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 219:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 220:/usr/include/c++/4.8/bits/stl_vector.h **** 
 221:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 222:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Tp					 value_type;
 223:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 224:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 225:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 226:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 227:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 228:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 229:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator;
 230:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 231:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 232:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef size_t					 size_type;
 233:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 234:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 235:/usr/include/c++/4.8/bits/stl_vector.h **** 
 236:/usr/include/c++/4.8/bits/stl_vector.h ****     protected:
 237:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_allocate;
 238:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_deallocate;
 239:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_impl;
 240:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 241:/usr/include/c++/4.8/bits/stl_vector.h **** 
 242:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 243:/usr/include/c++/4.8/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 244:/usr/include/c++/4.8/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 245:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 246:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Default constructor creates no elements.
 247:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 248:/usr/include/c++/4.8/bits/stl_vector.h ****       vector()
 249:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base() { }
 250:/usr/include/c++/4.8/bits/stl_vector.h **** 
 251:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 252:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 253:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 254:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 255:/usr/include/c++/4.8/bits/stl_vector.h ****       explicit
 256:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(const allocator_type& __a)
 257:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__a) { }
 258:/usr/include/c++/4.8/bits/stl_vector.h **** 
 259:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 260:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 261:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 262:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 263:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 264:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 265:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 266:/usr/include/c++/4.8/bits/stl_vector.h ****        *  constructed elements.
 267:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 268:/usr/include/c++/4.8/bits/stl_vector.h ****       explicit
 269:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 270:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__n, __a)
 271:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 272:/usr/include/c++/4.8/bits/stl_vector.h **** 
 273:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 274:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 275:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 276:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 277:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 278:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 279:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 280:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 281:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 282:/usr/include/c++/4.8/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 283:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__n, __a)
 284:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 285:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 286:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 287:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 288:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 289:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 290:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 291:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 292:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 293:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 294:/usr/include/c++/4.8/bits/stl_vector.h ****       explicit
 295:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 4800              		.loc 7 295 0
 4801              		.cfi_startproc
 4802              		.cfi_personality 0x3,__gxx_personality_v0
 4803              		.cfi_lsda 0x3,.LLSDA1416
 4804 0000 55       		pushq	%rbp
 4805              		.cfi_def_cfa_offset 16
 4806              		.cfi_offset 6, -16
 4807 0001 4889E5   		movq	%rsp, %rbp
 4808              		.cfi_def_cfa_register 6
 4809 0004 53       		pushq	%rbx
 4810 0005 4883EC28 		subq	$40, %rsp
 4811              		.cfi_offset 3, -24
 4812 0009 48897DE8 		movq	%rdi, -24(%rbp)
 4813 000d 488975E0 		movq	%rsi, -32(%rbp)
 4814 0011 488955D8 		movq	%rdx, -40(%rbp)
 4815 0015 48894DD0 		movq	%rcx, -48(%rbp)
 4816              	.LBB101:
 296:/usr/include/c++/4.8/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 297:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__n, __a)
 4817              		.loc 7 297 0
 4818 0019 488B45E8 		movq	-24(%rbp), %rax
 4819 001d 488B55D0 		movq	-48(%rbp), %rdx
 4820 0021 488B4DE0 		movq	-32(%rbp), %rcx
 4821 0025 4889CE   		movq	%rcx, %rsi
 4822 0028 4889C7   		movq	%rax, %rdi
 4823              	.LEHB116:
 4824 002b E8000000 		call	_ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_
 4824      00
 4825              	.LEHE116:
 298:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 4826              		.loc 7 298 0
 4827 0030 488B55D8 		movq	-40(%rbp), %rdx
 4828 0034 488B4DE0 		movq	-32(%rbp), %rcx
 4829 0038 488B45E8 		movq	-24(%rbp), %rax
 4830 003c 4889CE   		movq	%rcx, %rsi
 4831 003f 4889C7   		movq	%rax, %rdi
 4832              	.LEHB117:
 4833 0042 E8000000 		call	_ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf
 4833      00
 4834              	.LEHE117:
 4835              	.LBE101:
 4836 0047 EB1A     		jmp	.L245
 4837              	.L244:
 4838 0049 4889C3   		movq	%rax, %rbx
 4839              	.LBB102:
 297:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 4840              		.loc 7 297 0
 4841 004c 488B45E8 		movq	-24(%rbp), %rax
 4842 0050 4889C7   		movq	%rax, %rdi
 4843 0053 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEED2Ev
 4843      00
 4844 0058 4889D8   		movq	%rbx, %rax
 4845 005b 4889C7   		movq	%rax, %rdi
 4846              	.LEHB118:
 4847 005e E8000000 		call	_Unwind_Resume
 4847      00
 4848              	.LEHE118:
 4849              	.L245:
 4850              	.LBE102:
 4851              		.loc 7 298 0
 4852 0063 4883C428 		addq	$40, %rsp
 4853 0067 5B       		popq	%rbx
 4854 0068 5D       		popq	%rbp
 4855              		.cfi_def_cfa 7, 8
 4856 0069 C3       		ret
 4857              		.cfi_endproc
 4858              	.LFE1416:
 4859              		.section	.gcc_except_table
 4860              	.LLSDA1416:
 4861 0334 FF       		.byte	0xff
 4862 0335 FF       		.byte	0xff
 4863 0336 01       		.byte	0x1
 4864 0337 0C       		.uleb128 .LLSDACSE1416-.LLSDACSB1416
 4865              	.LLSDACSB1416:
 4866 0338 2B       		.uleb128 .LEHB116-.LFB1416
 4867 0339 05       		.uleb128 .LEHE116-.LEHB116
 4868 033a 00       		.uleb128 0
 4869 033b 00       		.uleb128 0
 4870 033c 42       		.uleb128 .LEHB117-.LFB1416
 4871 033d 05       		.uleb128 .LEHE117-.LEHB117
 4872 033e 49       		.uleb128 .L244-.LFB1416
 4873 033f 00       		.uleb128 0
 4874 0340 5E       		.uleb128 .LEHB118-.LFB1416
 4875 0341 05       		.uleb128 .LEHE118-.LEHB118
 4876 0342 00       		.uleb128 0
 4877 0343 00       		.uleb128 0
 4878              	.LLSDACSE1416:
 4879              		.section	.text._ZNSt6vectorIfSaIfEEC2EmRKfRKS0_,"axG",@progbits,_ZNSt6vectorIfSaIfEEC5EmRKfRKS0_,c
 4881              		.weak	_ZNSt6vectorIfSaIfEEC1EmRKfRKS0_
 4882              		.set	_ZNSt6vectorIfSaIfEEC1EmRKfRKS0_,_ZNSt6vectorIfSaIfEEC2EmRKfRKS0_
 4883              		.section	.text._ZNSt6vectorIfSaIfEED2Ev,"axG",@progbits,_ZNSt6vectorIfSaIfEED5Ev,comdat
 4884              		.align 2
 4885              		.weak	_ZNSt6vectorIfSaIfEED2Ev
 4887              	_ZNSt6vectorIfSaIfEED2Ev:
 4888              	.LFB1419:
 299:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 300:/usr/include/c++/4.8/bits/stl_vector.h **** 
 301:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 302:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 303:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 304:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 305:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 306:/usr/include/c++/4.8/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 307:/usr/include/c++/4.8/bits/stl_vector.h ****        *  but any extra memory in
 308:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 309:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 310:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(const vector& __x)
 311:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__x.size(),
 312:/usr/include/c++/4.8/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 313:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 314:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 315:/usr/include/c++/4.8/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 316:/usr/include/c++/4.8/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 317:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 318:/usr/include/c++/4.8/bits/stl_vector.h **** 
 319:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 320:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 321:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 322:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 323:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 324:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 325:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 326:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 327:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 328:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 329:/usr/include/c++/4.8/bits/stl_vector.h **** 
 330:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 331:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 332:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 333:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 334:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 335:/usr/include/c++/4.8/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 336:/usr/include/c++/4.8/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 337:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 338:/usr/include/c++/4.8/bits/stl_vector.h **** 
 339:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 340:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 341:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 342:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 343:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 344:/usr/include/c++/4.8/bits/stl_vector.h **** 	  {
 345:/usr/include/c++/4.8/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 346:/usr/include/c++/4.8/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 347:/usr/include/c++/4.8/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 348:/usr/include/c++/4.8/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 349:/usr/include/c++/4.8/bits/stl_vector.h **** 	    __rv.clear();
 350:/usr/include/c++/4.8/bits/stl_vector.h **** 	  }
 351:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 352:/usr/include/c++/4.8/bits/stl_vector.h **** 
 353:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 354:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 355:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 356:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 357:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 358:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 359:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer_list @a __l.
 360:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 361:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 362:/usr/include/c++/4.8/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 363:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 364:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 365:/usr/include/c++/4.8/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 366:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__a)
 367:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 368:/usr/include/c++/4.8/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 369:/usr/include/c++/4.8/bits/stl_vector.h **** 			    random_access_iterator_tag());
 370:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 371:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 372:/usr/include/c++/4.8/bits/stl_vector.h **** 
 373:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 374:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 375:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 376:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 377:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 378:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 379:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 380:/usr/include/c++/4.8/bits/stl_vector.h ****        *  [first,last).
 381:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 382:/usr/include/c++/4.8/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 383:/usr/include/c++/4.8/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 384:/usr/include/c++/4.8/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 385:/usr/include/c++/4.8/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 386:/usr/include/c++/4.8/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 387:/usr/include/c++/4.8/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 388:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 389:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 390:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator,
 391:/usr/include/c++/4.8/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 392:/usr/include/c++/4.8/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 393:/usr/include/c++/4.8/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 394:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Base(__a)
 395:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 396:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 397:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
 398:/usr/include/c++/4.8/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 399:/usr/include/c++/4.8/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 400:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Base(__a)
 401:/usr/include/c++/4.8/bits/stl_vector.h ****         {
 402:/usr/include/c++/4.8/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 403:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 404:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 405:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
 406:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 407:/usr/include/c++/4.8/bits/stl_vector.h **** 
 408:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 409:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 410:/usr/include/c++/4.8/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 411:/usr/include/c++/4.8/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 412:/usr/include/c++/4.8/bits/stl_vector.h ****        *  responsibility.
 413:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 414:/usr/include/c++/4.8/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 4889              		.loc 7 414 0
 4890              		.cfi_startproc
 4891              		.cfi_personality 0x3,__gxx_personality_v0
 4892              		.cfi_lsda 0x3,.LLSDA1419
 4893 0000 55       		pushq	%rbp
 4894              		.cfi_def_cfa_offset 16
 4895              		.cfi_offset 6, -16
 4896 0001 4889E5   		movq	%rsp, %rbp
 4897              		.cfi_def_cfa_register 6
 4898 0004 53       		pushq	%rbx
 4899 0005 4883EC18 		subq	$24, %rsp
 4900              		.cfi_offset 3, -24
 4901 0009 48897DE8 		movq	%rdi, -24(%rbp)
 4902              	.LBB103:
 415:/usr/include/c++/4.8/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 416:/usr/include/c++/4.8/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 4903              		.loc 7 416 0
 4904 000d 488B45E8 		movq	-24(%rbp), %rax
 4905 0011 4889C7   		movq	%rax, %rdi
 4906 0014 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv
 4906      00
 4907 0019 4889C2   		movq	%rax, %rdx
 4908 001c 488B45E8 		movq	-24(%rbp), %rax
 4909 0020 488B4808 		movq	8(%rax), %rcx
 4910 0024 488B45E8 		movq	-24(%rbp), %rax
 4911 0028 488B00   		movq	(%rax), %rax
 415:/usr/include/c++/4.8/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 4912              		.loc 7 415 0
 4913 002b 4889CE   		movq	%rcx, %rsi
 4914 002e 4889C7   		movq	%rax, %rdi
 4915              	.LEHB119:
 4916 0031 E8000000 		call	_ZSt8_DestroyIPffEvT_S1_RSaIT0_E
 4916      00
 4917              	.LEHE119:
 4918              		.loc 7 416 0
 4919 0036 488B45E8 		movq	-24(%rbp), %rax
 4920 003a 4889C7   		movq	%rax, %rdi
 4921              	.LEHB120:
 4922 003d E8000000 		call	_ZNSt12_Vector_baseIfSaIfEED2Ev
 4922      00
 4923              	.LEHE120:
 4924 0042 EB1A     		jmp	.L250
 4925              	.L249:
 4926 0044 4889C3   		movq	%rax, %rbx
 4927 0047 488B45E8 		movq	-24(%rbp), %rax
 4928 004b 4889C7   		movq	%rax, %rdi
 4929 004e E8000000 		call	_ZNSt12_Vector_baseIfSaIfEED2Ev
 4929      00
 4930 0053 4889D8   		movq	%rbx, %rax
 4931 0056 4889C7   		movq	%rax, %rdi
 4932              	.LEHB121:
 4933 0059 E8000000 		call	_Unwind_Resume
 4933      00
 4934              	.LEHE121:
 4935              	.L250:
 4936              	.LBE103:
 4937 005e 4883C418 		addq	$24, %rsp
 4938 0062 5B       		popq	%rbx
 4939 0063 5D       		popq	%rbp
 4940              		.cfi_def_cfa 7, 8
 4941 0064 C3       		ret
 4942              		.cfi_endproc
 4943              	.LFE1419:
 4944              		.section	.gcc_except_table
 4945              	.LLSDA1419:
 4946 0344 FF       		.byte	0xff
 4947 0345 FF       		.byte	0xff
 4948 0346 01       		.byte	0x1
 4949 0347 0C       		.uleb128 .LLSDACSE1419-.LLSDACSB1419
 4950              	.LLSDACSB1419:
 4951 0348 31       		.uleb128 .LEHB119-.LFB1419
 4952 0349 05       		.uleb128 .LEHE119-.LEHB119
 4953 034a 44       		.uleb128 .L249-.LFB1419
 4954 034b 00       		.uleb128 0
 4955 034c 3D       		.uleb128 .LEHB120-.LFB1419
 4956 034d 05       		.uleb128 .LEHE120-.LEHB120
 4957 034e 00       		.uleb128 0
 4958 034f 00       		.uleb128 0
 4959 0350 59       		.uleb128 .LEHB121-.LFB1419
 4960 0351 05       		.uleb128 .LEHE121-.LEHB121
 4961 0352 00       		.uleb128 0
 4962 0353 00       		.uleb128 0
 4963              	.LLSDACSE1419:
 4964              		.section	.text._ZNSt6vectorIfSaIfEED2Ev,"axG",@progbits,_ZNSt6vectorIfSaIfEED5Ev,comdat
 4966              		.weak	_ZNSt6vectorIfSaIfEED1Ev
 4967              		.set	_ZNSt6vectorIfSaIfEED1Ev,_ZNSt6vectorIfSaIfEED2Ev
 4968              		.section	.text._ZNSt6vectorIfSaIfEEixEm,"axG",@progbits,_ZNSt6vectorIfSaIfEEixEm,comdat
 4969              		.align 2
 4970              		.weak	_ZNSt6vectorIfSaIfEEixEm
 4972              	_ZNSt6vectorIfSaIfEEixEm:
 4973              	.LFB1421:
 417:/usr/include/c++/4.8/bits/stl_vector.h **** 
 418:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 419:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 420:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 421:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 422:/usr/include/c++/4.8/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 423:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 424:/usr/include/c++/4.8/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 425:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 426:/usr/include/c++/4.8/bits/stl_vector.h ****       vector&
 427:/usr/include/c++/4.8/bits/stl_vector.h ****       operator=(const vector& __x);
 428:/usr/include/c++/4.8/bits/stl_vector.h **** 
 429:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 431:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 432:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 433:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 434:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 435:/usr/include/c++/4.8/bits/stl_vector.h ****        *  if the allocators permit it).
 436:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 437:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 438:/usr/include/c++/4.8/bits/stl_vector.h ****       vector&
 439:/usr/include/c++/4.8/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 440:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 441:/usr/include/c++/4.8/bits/stl_vector.h ****         constexpr bool __move_storage =
 442:/usr/include/c++/4.8/bits/stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 443:/usr/include/c++/4.8/bits/stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 444:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_move_assign(std::move(__x),
 445:/usr/include/c++/4.8/bits/stl_vector.h ****                        integral_constant<bool, __move_storage>());
 446:/usr/include/c++/4.8/bits/stl_vector.h **** 	return *this;
 447:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 448:/usr/include/c++/4.8/bits/stl_vector.h **** 
 449:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 450:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 451:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 452:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 453:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 454:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer list @a __l.
 455:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 456:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 457:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 458:/usr/include/c++/4.8/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 459:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 460:/usr/include/c++/4.8/bits/stl_vector.h ****       vector&
 461:/usr/include/c++/4.8/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 462:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 463:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 464:/usr/include/c++/4.8/bits/stl_vector.h **** 	return *this;
 465:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 466:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 467:/usr/include/c++/4.8/bits/stl_vector.h **** 
 468:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 469:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 470:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 471:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 472:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 473:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 474:/usr/include/c++/4.8/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 475:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 476:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 477:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 478:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 479:/usr/include/c++/4.8/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 480:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 481:/usr/include/c++/4.8/bits/stl_vector.h **** 
 482:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 483:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 484:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 485:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 486:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 487:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 488:/usr/include/c++/4.8/bits/stl_vector.h ****        *  range [__first,__last).
 489:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 490:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 491:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 492:/usr/include/c++/4.8/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 493:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 494:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 495:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator,
 496:/usr/include/c++/4.8/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 497:/usr/include/c++/4.8/bits/stl_vector.h ****         void
 498:/usr/include/c++/4.8/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 499:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 500:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 501:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
 502:/usr/include/c++/4.8/bits/stl_vector.h ****         void
 503:/usr/include/c++/4.8/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 504:/usr/include/c++/4.8/bits/stl_vector.h ****         {
 505:/usr/include/c++/4.8/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 506:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 507:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 508:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
 509:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 510:/usr/include/c++/4.8/bits/stl_vector.h **** 
 511:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 512:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 513:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 514:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 515:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 516:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 517:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer list @a __l.
 518:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 519:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 520:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 521:/usr/include/c++/4.8/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 522:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 523:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 524:/usr/include/c++/4.8/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 525:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 526:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 527:/usr/include/c++/4.8/bits/stl_vector.h **** 
 528:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 529:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::get_allocator;
 530:/usr/include/c++/4.8/bits/stl_vector.h **** 
 531:/usr/include/c++/4.8/bits/stl_vector.h ****       // iterators
 532:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 533:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 534:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 535:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 536:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 537:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 538:/usr/include/c++/4.8/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 539:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 540:/usr/include/c++/4.8/bits/stl_vector.h **** 
 541:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 542:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 543:/usr/include/c++/4.8/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 544:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 545:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 546:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 547:/usr/include/c++/4.8/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 548:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 549:/usr/include/c++/4.8/bits/stl_vector.h **** 
 550:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 551:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 552:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 553:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 554:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 555:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 556:/usr/include/c++/4.8/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 557:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 558:/usr/include/c++/4.8/bits/stl_vector.h **** 
 559:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 560:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 561:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 562:/usr/include/c++/4.8/bits/stl_vector.h ****        *  ordinary element order.
 563:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 564:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 565:/usr/include/c++/4.8/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 566:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 567:/usr/include/c++/4.8/bits/stl_vector.h **** 
 568:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 569:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 570:/usr/include/c++/4.8/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 571:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 572:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 573:/usr/include/c++/4.8/bits/stl_vector.h ****       reverse_iterator
 574:/usr/include/c++/4.8/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 575:/usr/include/c++/4.8/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 576:/usr/include/c++/4.8/bits/stl_vector.h **** 
 577:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 578:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 579:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 580:/usr/include/c++/4.8/bits/stl_vector.h ****        *  reverse element order.
 581:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 582:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reverse_iterator
 583:/usr/include/c++/4.8/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 584:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 585:/usr/include/c++/4.8/bits/stl_vector.h **** 
 586:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 587:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 588:/usr/include/c++/4.8/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 589:/usr/include/c++/4.8/bits/stl_vector.h ****        *  in reverse element order.
 590:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 591:/usr/include/c++/4.8/bits/stl_vector.h ****       reverse_iterator
 592:/usr/include/c++/4.8/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 593:/usr/include/c++/4.8/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 594:/usr/include/c++/4.8/bits/stl_vector.h **** 
 595:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 596:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 597:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 598:/usr/include/c++/4.8/bits/stl_vector.h ****        *  is done in reverse element order.
 599:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 600:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reverse_iterator
 601:/usr/include/c++/4.8/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 602:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 603:/usr/include/c++/4.8/bits/stl_vector.h **** 
 604:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 605:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 606:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 607:/usr/include/c++/4.8/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 608:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 609:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 610:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 611:/usr/include/c++/4.8/bits/stl_vector.h ****       cbegin() const noexcept
 612:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 613:/usr/include/c++/4.8/bits/stl_vector.h **** 
 614:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 615:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 616:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 617:/usr/include/c++/4.8/bits/stl_vector.h ****        *  ordinary element order.
 618:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 619:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 620:/usr/include/c++/4.8/bits/stl_vector.h ****       cend() const noexcept
 621:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 622:/usr/include/c++/4.8/bits/stl_vector.h **** 
 623:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 624:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 625:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 626:/usr/include/c++/4.8/bits/stl_vector.h ****        *  reverse element order.
 627:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 628:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reverse_iterator
 629:/usr/include/c++/4.8/bits/stl_vector.h ****       crbegin() const noexcept
 630:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 631:/usr/include/c++/4.8/bits/stl_vector.h **** 
 632:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 633:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 634:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 635:/usr/include/c++/4.8/bits/stl_vector.h ****        *  is done in reverse element order.
 636:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 637:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reverse_iterator
 638:/usr/include/c++/4.8/bits/stl_vector.h ****       crend() const noexcept
 639:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 640:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 641:/usr/include/c++/4.8/bits/stl_vector.h **** 
 642:/usr/include/c++/4.8/bits/stl_vector.h ****       // [23.2.4.2] capacity
 643:/usr/include/c++/4.8/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 644:/usr/include/c++/4.8/bits/stl_vector.h ****       size_type
 645:/usr/include/c++/4.8/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 646:/usr/include/c++/4.8/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 647:/usr/include/c++/4.8/bits/stl_vector.h **** 
 648:/usr/include/c++/4.8/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 649:/usr/include/c++/4.8/bits/stl_vector.h ****       size_type
 650:/usr/include/c++/4.8/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 651:/usr/include/c++/4.8/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 652:/usr/include/c++/4.8/bits/stl_vector.h **** 
 653:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 654:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 655:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 656:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 657:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 658:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 659:/usr/include/c++/4.8/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 660:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 661:/usr/include/c++/4.8/bits/stl_vector.h ****        *  default constructed elements are appended.
 662:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 663:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 664:/usr/include/c++/4.8/bits/stl_vector.h ****       resize(size_type __new_size)
 665:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 666:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__new_size > size())
 667:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 668:/usr/include/c++/4.8/bits/stl_vector.h **** 	else if (__new_size < size())
 669:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 670:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 671:/usr/include/c++/4.8/bits/stl_vector.h **** 
 672:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 673:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 674:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 675:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 676:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 677:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 678:/usr/include/c++/4.8/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 679:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 680:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 681:/usr/include/c++/4.8/bits/stl_vector.h ****        *  given data.
 682:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 683:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 684:/usr/include/c++/4.8/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 685:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 686:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__new_size > size())
 687:/usr/include/c++/4.8/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 688:/usr/include/c++/4.8/bits/stl_vector.h **** 	else if (__new_size < size())
 689:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 690:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 691:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 692:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 693:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 694:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 695:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 696:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 697:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 698:/usr/include/c++/4.8/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 699:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 700:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 701:/usr/include/c++/4.8/bits/stl_vector.h ****        *  given data.
 702:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 703:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 704:/usr/include/c++/4.8/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 705:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 706:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__new_size > size())
 707:/usr/include/c++/4.8/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 708:/usr/include/c++/4.8/bits/stl_vector.h **** 	else if (__new_size < size())
 709:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 710:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 711:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 712:/usr/include/c++/4.8/bits/stl_vector.h **** 
 713:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 714:/usr/include/c++/4.8/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 715:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 716:/usr/include/c++/4.8/bits/stl_vector.h ****       shrink_to_fit()
 717:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 718:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 719:/usr/include/c++/4.8/bits/stl_vector.h **** 
 720:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 721:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 722:/usr/include/c++/4.8/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 723:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 724:/usr/include/c++/4.8/bits/stl_vector.h ****       size_type
 725:/usr/include/c++/4.8/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 726:/usr/include/c++/4.8/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 727:/usr/include/c++/4.8/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 728:/usr/include/c++/4.8/bits/stl_vector.h **** 
 729:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 730:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 731:/usr/include/c++/4.8/bits/stl_vector.h ****        *  equal end().)
 732:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 733:/usr/include/c++/4.8/bits/stl_vector.h ****       bool
 734:/usr/include/c++/4.8/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
 735:/usr/include/c++/4.8/bits/stl_vector.h ****       { return begin() == end(); }
 736:/usr/include/c++/4.8/bits/stl_vector.h **** 
 737:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 738:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 739:/usr/include/c++/4.8/bits/stl_vector.h ****        *          elements.
 740:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
 741:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 742:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 743:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 744:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 745:/usr/include/c++/4.8/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 746:/usr/include/c++/4.8/bits/stl_vector.h ****        *  thrown.
 747:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 748:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 749:/usr/include/c++/4.8/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 750:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 751:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 752:/usr/include/c++/4.8/bits/stl_vector.h ****        *  and copying of %vector data.
 753:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 754:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 755:/usr/include/c++/4.8/bits/stl_vector.h ****       reserve(size_type __n);
 756:/usr/include/c++/4.8/bits/stl_vector.h **** 
 757:/usr/include/c++/4.8/bits/stl_vector.h ****       // element access
 758:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 759:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 760:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 761:/usr/include/c++/4.8/bits/stl_vector.h ****        *  accessed.
 762:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 763:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 764:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 765:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 766:/usr/include/c++/4.8/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 767:/usr/include/c++/4.8/bits/stl_vector.h ****        *  see at().)
 768:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 769:/usr/include/c++/4.8/bits/stl_vector.h ****       reference
 770:/usr/include/c++/4.8/bits/stl_vector.h ****       operator[](size_type __n)
 4974              		.loc 7 770 0
 4975              		.cfi_startproc
 4976 0000 55       		pushq	%rbp
 4977              		.cfi_def_cfa_offset 16
 4978              		.cfi_offset 6, -16
 4979 0001 4889E5   		movq	%rsp, %rbp
 4980              		.cfi_def_cfa_register 6
 4981 0004 48897DF8 		movq	%rdi, -8(%rbp)
 4982 0008 488975F0 		movq	%rsi, -16(%rbp)
 771:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 4983              		.loc 7 771 0
 4984 000c 488B45F8 		movq	-8(%rbp), %rax
 4985 0010 488B00   		movq	(%rax), %rax
 4986 0013 488B55F0 		movq	-16(%rbp), %rdx
 4987 0017 48C1E202 		salq	$2, %rdx
 4988 001b 4801D0   		addq	%rdx, %rax
 4989 001e 5D       		popq	%rbp
 4990              		.cfi_def_cfa 7, 8
 4991 001f C3       		ret
 4992              		.cfi_endproc
 4993              	.LFE1421:
 4995              		.section	.text._ZNKSt6vectorIfSaIfEE4sizeEv,"axG",@progbits,_ZNKSt6vectorIfSaIfEE4sizeEv,comdat
 4996              		.align 2
 4997              		.weak	_ZNKSt6vectorIfSaIfEE4sizeEv
 4999              	_ZNKSt6vectorIfSaIfEE4sizeEv:
 5000              	.LFB1422:
 645:/usr/include/c++/4.8/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 5001              		.loc 7 645 0
 5002              		.cfi_startproc
 5003 0000 55       		pushq	%rbp
 5004              		.cfi_def_cfa_offset 16
 5005              		.cfi_offset 6, -16
 5006 0001 4889E5   		movq	%rsp, %rbp
 5007              		.cfi_def_cfa_register 6
 5008 0004 48897DF8 		movq	%rdi, -8(%rbp)
 646:/usr/include/c++/4.8/bits/stl_vector.h **** 
 5009              		.loc 7 646 0
 5010 0008 488B45F8 		movq	-8(%rbp), %rax
 5011 000c 488B4008 		movq	8(%rax), %rax
 5012 0010 4889C2   		movq	%rax, %rdx
 5013 0013 488B45F8 		movq	-8(%rbp), %rax
 5014 0017 488B00   		movq	(%rax), %rax
 5015 001a 4829C2   		subq	%rax, %rdx
 5016 001d 4889D0   		movq	%rdx, %rax
 5017 0020 48C1F802 		sarq	$2, %rax
 5018 0024 5D       		popq	%rbp
 5019              		.cfi_def_cfa 7, 8
 5020 0025 C3       		ret
 5021              		.cfi_endproc
 5022              	.LFE1422:
 5024              		.section	.text._ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iR
 5025              		.weak	_ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_
 5027              	_ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestD
 5028              	.LFB1423:
  96:../Checks.h   ****                    int const count, Tolerance const& tolerance, TestDetails const& details)
 5029              		.loc 5 96 0
 5030              		.cfi_startproc
 5031              		.cfi_personality 0x3,__gxx_personality_v0
 5032              		.cfi_lsda 0x3,.LLSDA1423
 5033 0000 55       		pushq	%rbp
 5034              		.cfi_def_cfa_offset 16
 5035              		.cfi_offset 6, -16
 5036 0001 4889E5   		movq	%rsp, %rbp
 5037              		.cfi_def_cfa_register 6
 5038 0004 53       		pushq	%rbx
 5039 0005 4881ECB8 		subq	$440, %rsp
 5039      010000
 5040              		.cfi_offset 3, -24
 5041 000c 4889BD68 		movq	%rdi, -408(%rbp)
 5041      FEFFFF
 5042 0013 4889B560 		movq	%rsi, -416(%rbp)
 5042      FEFFFF
 5043 001a 48899558 		movq	%rdx, -424(%rbp)
 5043      FEFFFF
 5044 0021 898D54FE 		movl	%ecx, -428(%rbp)
 5044      FFFF
 5045 0027 4C898548 		movq	%r8, -440(%rbp)
 5045      FEFFFF
 5046 002e 4C898D40 		movq	%r9, -448(%rbp)
 5046      FEFFFF
 5047              	.LBB104:
  99:../Checks.h   **** 
 5048              		.loc 5 99 0
 5049 0035 488B8D48 		movq	-440(%rbp), %rcx
 5049      FEFFFF
 5050 003c 8B9554FE 		movl	-428(%rbp), %edx
 5050      FFFF
 5051 0042 488BB558 		movq	-424(%rbp), %rsi
 5051      FEFFFF
 5052 0049 488B8560 		movq	-416(%rbp), %rax
 5052      FEFFFF
 5053 0050 4889C7   		movq	%rax, %rdi
 5054              	.LEHB122:
 5055 0053 E8000000 		call	_ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_
 5055      00
 5056 0058 888577FE 		movb	%al, -393(%rbp)
 5056      FFFF
 5057              	.LBB105:
 101:../Checks.h   ****     {
 5058              		.loc 5 101 0
 5059 005e 0FB68577 		movzbl	-393(%rbp), %eax
 5059      FEFFFF
 5060 0065 83F001   		xorl	$1, %eax
 5061 0068 84C0     		testb	%al, %al
 5062 006a 0F84A001 		je	.L263
 5062      0000
 5063              	.LBB106:
 103:../Checks.h   **** 
 5064              		.loc 5 103 0
 5065 0070 488D8580 		leaq	-384(%rbp), %rax
 5065      FEFFFF
 5066 0077 4889C7   		movq	%rax, %rdi
 5067 007a E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 5067      00
 5068              	.LEHE122:
 105:../Checks.h   ****         for (int expectedIndex = 0; expectedIndex < count; ++expectedIndex)
 5069              		.loc 5 105 0
 5070 007f 488D8580 		leaq	-384(%rbp), %rax
 5070      FEFFFF
 5071 0086 BE000000 		movl	$.LC56, %esi
 5071      00
 5072 008b 4889C7   		movq	%rax, %rdi
 5073              	.LEHB123:
 5074 008e E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5074      00
 5075              	.LBB107:
 106:../Checks.h   ****             stream << expected[expectedIndex] << " ";
 5076              		.loc 5 106 0
 5077 0093 C78578FE 		movl	$0, -392(%rbp)
 5077      FFFF0000 
 5077      0000
 5078 009d EB4E     		jmp	.L257
 5079              	.L258:
 107:../Checks.h   ****         stream << "] +/- " << tolerance << " but was [ ";
 5080              		.loc 5 107 0
 5081 009f 8B8578FE 		movl	-392(%rbp), %eax
 5081      FFFF
 5082 00a5 4863D0   		movslq	%eax, %rdx
 5083 00a8 488B8560 		movq	-416(%rbp), %rax
 5083      FEFFFF
 5084 00af 4889D6   		movq	%rdx, %rsi
 5085 00b2 4889C7   		movq	%rax, %rdi
 5086 00b5 E8000000 		call	_ZNKSt6vectorIfSaIfEEixEm
 5086      00
 5087 00ba 8B00     		movl	(%rax), %eax
 5088 00bc 488D9580 		leaq	-384(%rbp), %rdx
 5088      FEFFFF
 5089 00c3 898550FE 		movl	%eax, -432(%rbp)
 5089      FFFF
 5090 00c9 F30F1085 		movss	-432(%rbp), %xmm0
 5090      50FEFFFF 
 5091 00d1 4889D7   		movq	%rdx, %rdi
 5092 00d4 E8000000 		call	_ZNSolsEf
 5092      00
 5093 00d9 BE000000 		movl	$.LC57, %esi
 5093      00
 5094 00de 4889C7   		movq	%rax, %rdi
 5095 00e1 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5095      00
 106:../Checks.h   ****             stream << expected[expectedIndex] << " ";
 5096              		.loc 5 106 0
 5097 00e6 838578FE 		addl	$1, -392(%rbp)
 5097      FFFF01
 5098              	.L257:
 106:../Checks.h   ****             stream << expected[expectedIndex] << " ";
 5099              		.loc 5 106 0 is_stmt 0 discriminator 1
 5100 00ed 8B8578FE 		movl	-392(%rbp), %eax
 5100      FFFF
 5101 00f3 3B8554FE 		cmpl	-428(%rbp), %eax
 5101      FFFF
 5102 00f9 7CA4     		jl	.L258
 5103              	.LBE107:
 108:../Checks.h   **** 
 5104              		.loc 5 108 0 is_stmt 1
 5105 00fb 488B8548 		movq	-440(%rbp), %rax
 5105      FEFFFF
 5106 0102 8B18     		movl	(%rax), %ebx
 5107 0104 488D8580 		leaq	-384(%rbp), %rax
 5107      FEFFFF
 5108 010b BE000000 		movl	$.LC58, %esi
 5108      00
 5109 0110 4889C7   		movq	%rax, %rdi
 5110 0113 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5110      00
 5111 0118 899D50FE 		movl	%ebx, -432(%rbp)
 5111      FFFF
 5112 011e F30F1085 		movss	-432(%rbp), %xmm0
 5112      50FEFFFF 
 5113 0126 4889C7   		movq	%rax, %rdi
 5114 0129 E8000000 		call	_ZNSolsEf
 5114      00
 108:../Checks.h   **** 
 5115              		.loc 5 108 0 is_stmt 0 discriminator 1
 5116 012e BE000000 		movl	$.LC59, %esi
 5116      00
 5117 0133 4889C7   		movq	%rax, %rdi
 5118 0136 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5118      00
 5119              	.LBB108:
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5120              		.loc 5 110 0 is_stmt 1
 5121 013b C7857CFE 		movl	$0, -388(%rbp)
 5121      FFFF0000 
 5121      0000
 5122 0145 EB4E     		jmp	.L259
 5123              	.L260:
 111:../Checks.h   ****         stream << "]";
 5124              		.loc 5 111 0
 5125 0147 8B857CFE 		movl	-388(%rbp), %eax
 5125      FFFF
 5126 014d 4863D0   		movslq	%eax, %rdx
 5127 0150 488B8558 		movq	-424(%rbp), %rax
 5127      FEFFFF
 5128 0157 4889D6   		movq	%rdx, %rsi
 5129 015a 4889C7   		movq	%rax, %rdi
 5130 015d E8000000 		call	_ZNKSt6vectorIfSaIfEEixEm
 5130      00
 5131 0162 8B00     		movl	(%rax), %eax
 5132 0164 488D9580 		leaq	-384(%rbp), %rdx
 5132      FEFFFF
 5133 016b 898550FE 		movl	%eax, -432(%rbp)
 5133      FFFF
 5134 0171 F30F1085 		movss	-432(%rbp), %xmm0
 5134      50FEFFFF 
 5135 0179 4889D7   		movq	%rdx, %rdi
 5136 017c E8000000 		call	_ZNSolsEf
 5136      00
 5137 0181 BE000000 		movl	$.LC57, %esi
 5137      00
 5138 0186 4889C7   		movq	%rax, %rdi
 5139 0189 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5139      00
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5140              		.loc 5 110 0
 5141 018e 83857CFE 		addl	$1, -388(%rbp)
 5141      FFFF01
 5142              	.L259:
 110:../Checks.h   ****             stream << actual[actualIndex] << " ";
 5143              		.loc 5 110 0 is_stmt 0 discriminator 1
 5144 0195 8B857CFE 		movl	-388(%rbp), %eax
 5144      FFFF
 5145 019b 3B8554FE 		cmpl	-428(%rbp), %eax
 5145      FFFF
 5146 01a1 7CA4     		jl	.L260
 5147              	.LBE108:
 112:../Checks.h   **** 
 5148              		.loc 5 112 0 is_stmt 1
 5149 01a3 488D8580 		leaq	-384(%rbp), %rax
 5149      FEFFFF
 5150 01aa BE000000 		movl	$.LC60, %esi
 5150      00
 5151 01af 4889C7   		movq	%rax, %rdi
 5152 01b2 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5152      00
 114:../Checks.h   ****     }
 5153              		.loc 5 114 0
 5154 01b7 488D8580 		leaq	-384(%rbp), %rax
 5154      FEFFFF
 5155 01be 4889C7   		movq	%rax, %rdi
 5156 01c1 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv
 5156      00
 5157 01c6 4889C2   		movq	%rax, %rdx
 5158 01c9 488B8D40 		movq	-448(%rbp), %rcx
 5158      FEFFFF
 5159 01d0 488B8568 		movq	-408(%rbp), %rax
 5159      FEFFFF
 5160 01d7 4889CE   		movq	%rcx, %rsi
 5161 01da 4889C7   		movq	%rax, %rdi
 5162 01dd E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 5162      00
 5163              	.LEHE123:
 114:../Checks.h   ****     }
 5164              		.loc 5 114 0 is_stmt 0 discriminator 1
 5165 01e2 488D8580 		leaq	-384(%rbp), %rax
 5165      FEFFFF
 5166 01e9 4889C7   		movq	%rax, %rdi
 5167              	.LEHB124:
 5168 01ec E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5168      00
 5169              	.LEHE124:
 5170              	.LBE106:
 5171 01f1 EB1D     		jmp	.L263
 5172              	.L262:
 5173 01f3 4889C3   		movq	%rax, %rbx
 5174              	.LBB109:
 114:../Checks.h   ****     }
 5175              		.loc 5 114 0
 5176 01f6 488D8580 		leaq	-384(%rbp), %rax
 5176      FEFFFF
 5177 01fd 4889C7   		movq	%rax, %rdi
 5178 0200 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5178      00
 5179 0205 4889D8   		movq	%rbx, %rax
 5180 0208 4889C7   		movq	%rax, %rdi
 5181              	.LEHB125:
 5182 020b E8000000 		call	_Unwind_Resume
 5182      00
 5183              	.LEHE125:
 5184              	.L263:
 5185              	.LBE109:
 5186              	.LBE105:
 5187              	.LBE104:
 5188              		.loc 5 116 0 is_stmt 1
 5189 0210 4881C4B8 		addq	$440, %rsp
 5189      010000
 5190 0217 5B       		popq	%rbx
 5191 0218 5D       		popq	%rbp
 5192              		.cfi_def_cfa 7, 8
 5193 0219 C3       		ret
 5194              		.cfi_endproc
 5195              	.LFE1423:
 5196              		.section	.gcc_except_table
 5197              	.LLSDA1423:
 5198 0354 FF       		.byte	0xff
 5199 0355 FF       		.byte	0xff
 5200 0356 01       		.byte	0x1
 5201 0357 15       		.uleb128 .LLSDACSE1423-.LLSDACSB1423
 5202              	.LLSDACSB1423:
 5203 0358 53       		.uleb128 .LEHB122-.LFB1423
 5204 0359 2C       		.uleb128 .LEHE122-.LEHB122
 5205 035a 00       		.uleb128 0
 5206 035b 00       		.uleb128 0
 5207 035c 8E01     		.uleb128 .LEHB123-.LFB1423
 5208 035e D402     		.uleb128 .LEHE123-.LEHB123
 5209 0360 F303     		.uleb128 .L262-.LFB1423
 5210 0362 00       		.uleb128 0
 5211 0363 EC03     		.uleb128 .LEHB124-.LFB1423
 5212 0365 05       		.uleb128 .LEHE124-.LEHB124
 5213 0366 00       		.uleb128 0
 5214 0367 00       		.uleb128 0
 5215 0368 8B04     		.uleb128 .LEHB125-.LFB1423
 5216 036a 05       		.uleb128 .LEHE125-.LEHB125
 5217 036b 00       		.uleb128 0
 5218 036c 00       		.uleb128 0
 5219              	.LLSDACSE1423:
 5220              		.section	.text._ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iR
 5222              		.section	.rodata
 5223              	.LC61:
 5224 05e7 556E6861 		.string	"Unhandled system exception"
 5224      6E646C65 
 5224      64207379 
 5224      7374656D 
 5224      20657863 
 5225              	.LC62:
 5226 0602 556E6861 		.string	"Unhandled exception: Crash!"
 5226      6E646C65 
 5226      64206578 
 5226      63657074 
 5226      696F6E3A 
 5227              		.text
 5229              	_ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperEEEvRT_RKNS
 5230              	.LFB1424:
 5231              		.file 8 "../ExecuteTest.h"
   1:../ExecuteTest.h **** #ifndef UNITTEST_EXECUTE_TEST_H
   2:../ExecuteTest.h **** #define UNITTEST_EXECUTE_TEST_H
   3:../ExecuteTest.h **** 
   4:../ExecuteTest.h **** #include "TestDetails.h"
   5:../ExecuteTest.h **** #include "MemoryOutStream.h"
   6:../ExecuteTest.h **** #include "AssertException.h"
   7:../ExecuteTest.h **** #include "CurrentTest.h"
   8:../ExecuteTest.h **** 
   9:../ExecuteTest.h **** #ifdef UNITTEST_POSIX
  10:../ExecuteTest.h **** 	#include "PosixUtils/SignalTranslator.h"
  11:../ExecuteTest.h **** #endif
  12:../ExecuteTest.h **** 
  13:../ExecuteTest.h **** namespace UnitTest {
  14:../ExecuteTest.h **** 
  15:../ExecuteTest.h **** template< typename T >
  16:../ExecuteTest.h **** void ExecuteTest(T& testObject, TestDetails const& details)
 5232              		.loc 8 16 0
 5233              		.cfi_startproc
 5234              		.cfi_personality 0x3,__gxx_personality_v0
 5235              		.cfi_lsda 0x3,.LLSDA1424
 5236 1926 55       		pushq	%rbp
 5237              		.cfi_def_cfa_offset 16
 5238              		.cfi_offset 6, -16
 5239 1927 4889E5   		movq	%rsp, %rbp
 5240              		.cfi_def_cfa_register 6
 5241 192a 4154     		pushq	%r12
 5242 192c 53       		pushq	%rbx
 5243 192d 4881EC80 		subq	$1152, %rsp
 5243      040000
 5244              		.cfi_offset 12, -24
 5245              		.cfi_offset 3, -32
 5246 1934 4889BD78 		movq	%rdi, -1160(%rbp)
 5246      FBFFFF
 5247 193b 4889B570 		movq	%rsi, -1168(%rbp)
 5247      FBFFFF
 5248              	.LEHB126:
 5249              	.LBB110:
  17:../ExecuteTest.h **** {
  18:../ExecuteTest.h **** 	CurrentTest::Details() = &details;
 5250              		.loc 8 18 0
 5251 1942 E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 5251      00
 5252              	.LEHE126:
 5253 1947 488B9570 		movq	-1168(%rbp), %rdx
 5253      FBFFFF
 5254 194e 488910   		movq	%rdx, (%rax)
 5255              	.LBB111:
  19:../ExecuteTest.h **** 
  20:../ExecuteTest.h **** 	try
  21:../ExecuteTest.h **** 	{
  22:../ExecuteTest.h **** #ifdef UNITTEST_POSIX
  23:../ExecuteTest.h **** 		UNITTEST_THROW_SIGNALS
 5256              		.loc 8 23 0
 5257 1951 488D8590 		leaq	-1136(%rbp), %rax
 5257      FBFFFF
 5258 1958 4889C7   		movq	%rax, %rdi
 5259              	.LEHB127:
 5260 195b E8000000 		call	_ZN8UnitTest16SignalTranslatorC1Ev
 5260      00
 5261              	.LEHE127:
 5262              		.loc 8 23 0 is_stmt 0 discriminator 1
 5263 1960 488B0500 		movq	_ZN8UnitTest16SignalTranslator12s_jumpTargetE(%rip), %rax
 5263      000000
 5264 1967 BE010000 		movl	$1, %esi
 5264      00
 5265 196c 4889C7   		movq	%rax, %rdi
 5266 196f E8000000 		call	__sigsetjmp
 5266      00
 5267 1974 85C0     		testl	%eax, %eax
 5268 1976 0F95C0   		setne	%al
 5269 1979 84C0     		testb	%al, %al
 5270 197b 7423     		je	.L265
 5271 197d BF080000 		movl	$8, %edi
 5271      00
 5272 1982 E8000000 		call	__cxa_allocate_exception
 5272      00
 5273 1987 48C70000 		movq	$.LC61, (%rax)
 5273      000000
 5274 198e BA000000 		movl	$0, %edx
 5274      00
 5275 1993 BE000000 		movl	$_ZTIPKc, %esi
 5275      00
 5276 1998 4889C7   		movq	%rax, %rdi
 5277              	.LEHB128:
 5278 199b E8000000 		call	__cxa_throw
 5278      00
 5279              	.L265:
  24:../ExecuteTest.h **** #endif
  25:../ExecuteTest.h **** 		testObject.RunImpl();
 5280              		.loc 8 25 0 is_stmt 1
 5281 19a0 488B8578 		movq	-1160(%rbp), %rax
 5281      FBFFFF
 5282 19a7 4889C7   		movq	%rax, %rdi
 5283 19aa E887F9FF 		call	_ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelper7RunImplEv
 5283      FF
 5284              	.LEHE128:
 5285              		.loc 8 25 0 is_stmt 0 discriminator 1
 5286 19af 488D8590 		leaq	-1136(%rbp), %rax
 5286      FBFFFF
 5287 19b6 4889C7   		movq	%rax, %rdi
 5288              	.LEHB129:
 5289 19b9 E8000000 		call	_ZN8UnitTest16SignalTranslatorD1Ev
 5289      00
 5290              	.LEHE129:
 5291              	.LBE111:
 5292              	.LBE110:
  26:../ExecuteTest.h **** 	}
  27:../ExecuteTest.h **** 	catch (AssertException const& e)
  28:../ExecuteTest.h **** 	{
  29:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(
  30:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
  31:../ExecuteTest.h **** 	}
  32:../ExecuteTest.h **** 	catch (std::exception const& e)
  33:../ExecuteTest.h **** 	{
  34:../ExecuteTest.h **** 		MemoryOutStream stream;
  35:../ExecuteTest.h **** 		stream << "Unhandled exception: " << e.what();
  36:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
  37:../ExecuteTest.h **** 	}
  38:../ExecuteTest.h **** 	catch (...)
  39:../ExecuteTest.h **** 	{
  40:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, "Unhandled exception: Crash!");
  41:../ExecuteTest.h **** 	}
  42:../ExecuteTest.h **** }
 5293              		.loc 8 42 0 is_stmt 1
 5294 19be E9EE0100 		jmp	.L283
 5294      00
 5295              	.L276:
 5296 19c3 4989C4   		movq	%rax, %r12
 5297 19c6 4889D3   		movq	%rdx, %rbx
 5298              	.LBB119:
 5299              	.LBB112:
  25:../ExecuteTest.h **** 	}
 5300              		.loc 8 25 0
 5301 19c9 488D8590 		leaq	-1136(%rbp), %rax
 5301      FBFFFF
 5302 19d0 4889C7   		movq	%rax, %rdi
 5303 19d3 E8000000 		call	_ZN8UnitTest16SignalTranslatorD1Ev
 5303      00
 5304 19d8 4C89E0   		movq	%r12, %rax
 5305 19db 4889DA   		movq	%rbx, %rdx
 5306 19de EB4D     		jmp	.L267
 5307              	.L278:
 5308 19e0 4889C3   		movq	%rax, %rbx
 5309              	.LBE112:
 5310              	.LBB113:
  27:../ExecuteTest.h **** 	{
 5311              		.loc 8 27 0
 5312 19e3 E8000000 		call	__cxa_end_catch
 5312      00
 5313 19e8 4889D8   		movq	%rbx, %rax
 5314 19eb 4889C7   		movq	%rax, %rdi
 5315              	.LEHB130:
 5316 19ee E8000000 		call	_Unwind_Resume
 5316      00
 5317              	.LEHE130:
 5318              	.L279:
 5319 19f3 4889C3   		movq	%rax, %rbx
 5320              	.LBE113:
 5321              	.LBB114:
 5322              	.LBB115:
  36:../ExecuteTest.h **** 	}
 5323              		.loc 8 36 0
 5324 19f6 488D8590 		leaq	-1136(%rbp), %rax
 5324      FBFFFF
 5325 19fd 4889C7   		movq	%rax, %rdi
 5326 1a00 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5326      00
 5327 1a05 EB03     		jmp	.L270
 5328              	.L280:
 5329 1a07 4889C3   		movq	%rax, %rbx
 5330              	.L270:
 5331              	.LBE115:
  32:../ExecuteTest.h **** 	{
 5332              		.loc 8 32 0
 5333 1a0a E8000000 		call	__cxa_end_catch
 5333      00
 5334 1a0f 4889D8   		movq	%rbx, %rax
 5335 1a12 4889C7   		movq	%rax, %rdi
 5336              	.LEHB131:
 5337 1a15 E8000000 		call	_Unwind_Resume
 5337      00
 5338              	.LEHE131:
 5339              	.L281:
 5340 1a1a 4889C3   		movq	%rax, %rbx
 5341              	.LBE114:
  38:../ExecuteTest.h **** 	{
 5342              		.loc 8 38 0
 5343 1a1d E8000000 		call	__cxa_end_catch
 5343      00
 5344 1a22 4889D8   		movq	%rbx, %rax
 5345 1a25 4889C7   		movq	%rax, %rdi
 5346              	.LEHB132:
 5347 1a28 E8000000 		call	_Unwind_Resume
 5347      00
 5348              	.LEHE132:
 5349              	.L277:
 5350              	.L267:
 5351 1a2d 4883FA01 		cmpq	$1, %rdx
 5352 1a31 740F     		je	.L273
 5353 1a33 4883FA02 		cmpq	$2, %rdx
 5354 1a37 0F84A600 		je	.L274
 5354      0000
 5355 1a3d E9430100 		jmp	.L282
 5355      00
 5356              	.L273:
 5357              	.LBB117:
  27:../ExecuteTest.h **** 	{
 5358              		.loc 8 27 0
 5359 1a42 4889C7   		movq	%rax, %rdi
 5360 1a45 E8000000 		call	__cxa_begin_catch
 5360      00
 5361 1a4a 48898580 		movq	%rax, -1152(%rbp)
 5361      FBFFFF
  30:../ExecuteTest.h **** 	}
 5362              		.loc 8 30 0
 5363 1a51 488B8580 		movq	-1152(%rbp), %rax
 5363      FBFFFF
 5364 1a58 488B00   		movq	(%rax), %rax
 5365 1a5b 4883C010 		addq	$16, %rax
 5366 1a5f 488B00   		movq	(%rax), %rax
 5367 1a62 488B9580 		movq	-1152(%rbp), %rdx
 5367      FBFFFF
 5368 1a69 4889D7   		movq	%rdx, %rdi
 5369 1a6c FFD0     		call	*%rax
 5370 1a6e 4889C3   		movq	%rax, %rbx
 5371 1a71 488B8580 		movq	-1152(%rbp), %rax
 5371      FBFFFF
 5372 1a78 4889C7   		movq	%rax, %rdi
 5373              	.LEHB133:
 5374 1a7b E8000000 		call	_ZNK8UnitTest15AssertException10LineNumberEv
 5374      00
 5375 1a80 4189C4   		movl	%eax, %r12d
 5376 1a83 488B8580 		movq	-1152(%rbp), %rax
 5376      FBFFFF
 5377 1a8a 4889C7   		movq	%rax, %rdi
 5378 1a8d E8000000 		call	_ZNK8UnitTest15AssertException8FilenameEv
 5378      00
  30:../ExecuteTest.h **** 	}
 5379              		.loc 8 30 0 is_stmt 0 discriminator 1
 5380 1a92 4889C1   		movq	%rax, %rcx
 5381 1a95 488B8570 		movq	-1168(%rbp), %rax
 5381      FBFFFF
 5382 1a9c 488B10   		movq	(%rax), %rdx
 5383 1a9f 488B8570 		movq	-1168(%rbp), %rax
 5383      FBFFFF
 5384 1aa6 488B7008 		movq	8(%rax), %rsi
 5385 1aaa 488D8590 		leaq	-1136(%rbp), %rax
 5385      FBFFFF
 5386 1ab1 4589E0   		movl	%r12d, %r8d
 5387 1ab4 4889C7   		movq	%rax, %rdi
 5388 1ab7 E8000000 		call	_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i
 5388      00
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 5389              		.loc 8 29 0 is_stmt 1
 5390 1abc E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 5390      00
  30:../ExecuteTest.h **** 	}
 5391              		.loc 8 30 0
 5392 1ac1 488B00   		movq	(%rax), %rax
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 5393              		.loc 8 29 0
 5394 1ac4 488D8D90 		leaq	-1136(%rbp), %rcx
 5394      FBFFFF
 5395 1acb 4889DA   		movq	%rbx, %rdx
 5396 1ace 4889CE   		movq	%rcx, %rsi
 5397 1ad1 4889C7   		movq	%rax, %rdi
 5398 1ad4 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 5398      00
 5399              	.LEHE133:
  27:../ExecuteTest.h **** 	{
 5400              		.loc 8 27 0
 5401 1ad9 E8000000 		call	__cxa_end_catch
 5401      00
 5402              	.LBE117:
 5403              	.LBE119:
 5404              		.loc 8 42 0
 5405 1ade E9CE0000 		jmp	.L283
 5405      00
 5406              	.L274:
 5407              	.LBB120:
 5408              	.LBB118:
  32:../ExecuteTest.h **** 	{
 5409              		.loc 8 32 0
 5410 1ae3 4889C7   		movq	%rax, %rdi
 5411 1ae6 E8000000 		call	__cxa_begin_catch
 5411      00
 5412 1aeb 48898588 		movq	%rax, -1144(%rbp)
 5412      FBFFFF
 5413              	.LBB116:
  34:../ExecuteTest.h **** 		stream << "Unhandled exception: " << e.what();
 5414              		.loc 8 34 0
 5415 1af2 488D8590 		leaq	-1136(%rbp), %rax
 5415      FBFFFF
 5416 1af9 4889C7   		movq	%rax, %rdi
 5417              	.LEHB134:
 5418 1afc E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 5418      00
 5419              	.LEHE134:
  35:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
 5420              		.loc 8 35 0
 5421 1b01 488B8588 		movq	-1144(%rbp), %rax
 5421      FBFFFF
 5422 1b08 488B00   		movq	(%rax), %rax
 5423 1b0b 4883C010 		addq	$16, %rax
 5424 1b0f 488B00   		movq	(%rax), %rax
 5425 1b12 488B9588 		movq	-1144(%rbp), %rdx
 5425      FBFFFF
 5426 1b19 4889D7   		movq	%rdx, %rdi
 5427 1b1c FFD0     		call	*%rax
 5428 1b1e 4889C3   		movq	%rax, %rbx
 5429 1b21 488D8590 		leaq	-1136(%rbp), %rax
 5429      FBFFFF
 5430 1b28 BE000000 		movl	$.LC45, %esi
 5430      00
 5431 1b2d 4889C7   		movq	%rax, %rdi
 5432              	.LEHB135:
 5433 1b30 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5433      00
 5434 1b35 4889DE   		movq	%rbx, %rsi
 5435 1b38 4889C7   		movq	%rax, %rdi
 5436 1b3b E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5436      00
  36:../ExecuteTest.h **** 	}
 5437              		.loc 8 36 0
 5438 1b40 488D8590 		leaq	-1136(%rbp), %rax
 5438      FBFFFF
 5439 1b47 4889C7   		movq	%rax, %rdi
 5440 1b4a E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv
 5440      00
 5441 1b4f 4889C3   		movq	%rax, %rbx
 5442 1b52 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 5442      00
  36:../ExecuteTest.h **** 	}
 5443              		.loc 8 36 0 is_stmt 0 discriminator 1
 5444 1b57 488B00   		movq	(%rax), %rax
 5445 1b5a 488B8D70 		movq	-1168(%rbp), %rcx
 5445      FBFFFF
 5446 1b61 4889DA   		movq	%rbx, %rdx
 5447 1b64 4889CE   		movq	%rcx, %rsi
 5448 1b67 4889C7   		movq	%rax, %rdi
 5449 1b6a E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 5449      00
 5450              	.LEHE135:
 5451 1b6f 488D8590 		leaq	-1136(%rbp), %rax
 5451      FBFFFF
 5452 1b76 4889C7   		movq	%rax, %rdi
 5453              	.LEHB136:
 5454 1b79 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5454      00
 5455              	.LEHE136:
 5456              	.LBE116:
  32:../ExecuteTest.h **** 	{
 5457              		.loc 8 32 0 is_stmt 1
 5458 1b7e E8000000 		call	__cxa_end_catch
 5458      00
 5459              	.LBE118:
 5460              	.LBE120:
 5461              		.loc 8 42 0
 5462 1b83 EB2C     		jmp	.L283
 5463              	.L282:
 5464              	.LBB121:
  38:../ExecuteTest.h **** 	{
 5465              		.loc 8 38 0
 5466 1b85 4889C7   		movq	%rax, %rdi
 5467 1b88 E8000000 		call	__cxa_begin_catch
 5467      00
 5468              	.LEHB137:
  40:../ExecuteTest.h **** 	}
 5469              		.loc 8 40 0
 5470 1b8d E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 5470      00
 5471 1b92 488B00   		movq	(%rax), %rax
 5472 1b95 488B8D70 		movq	-1168(%rbp), %rcx
 5472      FBFFFF
 5473 1b9c BA000000 		movl	$.LC62, %edx
 5473      00
 5474 1ba1 4889CE   		movq	%rcx, %rsi
 5475 1ba4 4889C7   		movq	%rax, %rdi
 5476 1ba7 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 5476      00
 5477              	.LEHE137:
 5478              	.LEHB138:
  38:../ExecuteTest.h **** 	{
 5479              		.loc 8 38 0
 5480 1bac E8000000 		call	__cxa_end_catch
 5480      00
 5481              	.LEHE138:
 5482              	.L283:
 5483              	.LBE121:
 5484              		.loc 8 42 0
 5485 1bb1 90       		nop
 5486 1bb2 4881C480 		addq	$1152, %rsp
 5486      040000
 5487 1bb9 5B       		popq	%rbx
 5488 1bba 415C     		popq	%r12
 5489 1bbc 5D       		popq	%rbp
 5490              		.cfi_def_cfa 7, 8
 5491 1bbd C3       		ret
 5492              		.cfi_endproc
 5493              	.LFE1424:
 5494              		.section	.gcc_except_table
 5495 036d 000000   		.align 4
 5496              	.LLSDA1424:
 5497 0370 FF       		.byte	0xff
 5498 0371 03       		.byte	0x3
 5499 0372 5D       		.uleb128 .LLSDATT1424-.LLSDATTD1424
 5500              	.LLSDATTD1424:
 5501 0373 01       		.byte	0x1
 5502 0374 46       		.uleb128 .LLSDACSE1424-.LLSDACSB1424
 5503              	.LLSDACSB1424:
 5504 0375 1C       		.uleb128 .LEHB126-.LFB1424
 5505 0376 05       		.uleb128 .LEHE126-.LEHB126
 5506 0377 00       		.uleb128 0
 5507 0378 00       		.uleb128 0
 5508 0379 35       		.uleb128 .LEHB127-.LFB1424
 5509 037a 05       		.uleb128 .LEHE127-.LEHB127
 5510 037b 8702     		.uleb128 .L277-.LFB1424
 5511 037d 05       		.uleb128 0x5
 5512 037e 75       		.uleb128 .LEHB128-.LFB1424
 5513 037f 14       		.uleb128 .LEHE128-.LEHB128
 5514 0380 9D01     		.uleb128 .L276-.LFB1424
 5515 0382 07       		.uleb128 0x7
 5516 0383 9301     		.uleb128 .LEHB129-.LFB1424
 5517 0385 05       		.uleb128 .LEHE129-.LEHB129
 5518 0386 8702     		.uleb128 .L277-.LFB1424
 5519 0388 05       		.uleb128 0x5
 5520 0389 C801     		.uleb128 .LEHB130-.LFB1424
 5521 038b 05       		.uleb128 .LEHE130-.LEHB130
 5522 038c 00       		.uleb128 0
 5523 038d 00       		.uleb128 0
 5524 038e EF01     		.uleb128 .LEHB131-.LFB1424
 5525 0390 05       		.uleb128 .LEHE131-.LEHB131
 5526 0391 00       		.uleb128 0
 5527 0392 00       		.uleb128 0
 5528 0393 8202     		.uleb128 .LEHB132-.LFB1424
 5529 0395 05       		.uleb128 .LEHE132-.LEHB132
 5530 0396 00       		.uleb128 0
 5531 0397 00       		.uleb128 0
 5532 0398 D502     		.uleb128 .LEHB133-.LFB1424
 5533 039a 5E       		.uleb128 .LEHE133-.LEHB133
 5534 039b BA01     		.uleb128 .L278-.LFB1424
 5535 039d 00       		.uleb128 0
 5536 039e D603     		.uleb128 .LEHB134-.LFB1424
 5537 03a0 05       		.uleb128 .LEHE134-.LEHB134
 5538 03a1 E101     		.uleb128 .L280-.LFB1424
 5539 03a3 00       		.uleb128 0
 5540 03a4 8A04     		.uleb128 .LEHB135-.LFB1424
 5541 03a6 3F       		.uleb128 .LEHE135-.LEHB135
 5542 03a7 CD01     		.uleb128 .L279-.LFB1424
 5543 03a9 00       		.uleb128 0
 5544 03aa D304     		.uleb128 .LEHB136-.LFB1424
 5545 03ac 05       		.uleb128 .LEHE136-.LEHB136
 5546 03ad E101     		.uleb128 .L280-.LFB1424
 5547 03af 00       		.uleb128 0
 5548 03b0 E704     		.uleb128 .LEHB137-.LFB1424
 5549 03b2 1F       		.uleb128 .LEHE137-.LEHB137
 5550 03b3 F401     		.uleb128 .L281-.LFB1424
 5551 03b5 00       		.uleb128 0
 5552 03b6 8605     		.uleb128 .LEHB138-.LFB1424
 5553 03b8 05       		.uleb128 .LEHE138-.LEHB138
 5554 03b9 00       		.uleb128 0
 5555 03ba 00       		.uleb128 0
 5556              	.LLSDACSE1424:
 5557 03bb 03       		.byte	0x3
 5558 03bc 00       		.byte	0
 5559 03bd 02       		.byte	0x2
 5560 03be 7D       		.byte	0x7d
 5561 03bf 01       		.byte	0x1
 5562 03c0 7D       		.byte	0x7d
 5563 03c1 00       		.byte	0
 5564 03c2 7D       		.byte	0x7d
 5565 03c3 00       		.align 4
 5566 03c4 00000000 		.long	0
 5567              	
 5568 03c8 00000000 		.long	_ZTISt9exception
 5569 03cc 00000000 		.long	_ZTIN8UnitTest15AssertExceptionE
 5570              	.LLSDATT1424:
 5571              		.text
 5574              	_ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperEEEvRT_RKNS
 5575              	.LFB1426:
  16:../ExecuteTest.h **** {
 5576              		.loc 8 16 0
 5577              		.cfi_startproc
 5578              		.cfi_personality 0x3,__gxx_personality_v0
 5579              		.cfi_lsda 0x3,.LLSDA1426
 5580 1bbe 55       		pushq	%rbp
 5581              		.cfi_def_cfa_offset 16
 5582              		.cfi_offset 6, -16
 5583 1bbf 4889E5   		movq	%rsp, %rbp
 5584              		.cfi_def_cfa_register 6
 5585 1bc2 4154     		pushq	%r12
 5586 1bc4 53       		pushq	%rbx
 5587 1bc5 4881EC80 		subq	$1152, %rsp
 5587      040000
 5588              		.cfi_offset 12, -24
 5589              		.cfi_offset 3, -32
 5590 1bcc 4889BD78 		movq	%rdi, -1160(%rbp)
 5590      FBFFFF
 5591 1bd3 4889B570 		movq	%rsi, -1168(%rbp)
 5591      FBFFFF
 5592              	.LEHB139:
 5593              	.LBB122:
  18:../ExecuteTest.h **** 
 5594              		.loc 8 18 0
 5595 1bda E8000000 		call	_ZN8UnitTest11CurrentTest7DetailsEv
 5595      00
 5596              	.LEHE139:
 5597 1bdf 488B9570 		movq	-1168(%rbp), %rdx
 5597      FBFFFF
 5598 1be6 488910   		movq	%rdx, (%rax)
 5599              	.LBB123:
  23:../ExecuteTest.h **** #endif
 5600              		.loc 8 23 0
 5601 1be9 488D8590 		leaq	-1136(%rbp), %rax
 5601      FBFFFF
 5602 1bf0 4889C7   		movq	%rax, %rdi
 5603              	.LEHB140:
 5604 1bf3 E8000000 		call	_ZN8UnitTest16SignalTranslatorC1Ev
 5604      00
 5605              	.LEHE140:
  23:../ExecuteTest.h **** #endif
 5606              		.loc 8 23 0 is_stmt 0 discriminator 1
 5607 1bf8 488B0500 		movq	_ZN8UnitTest16SignalTranslator12s_jumpTargetE(%rip), %rax
 5607      000000
 5608 1bff BE010000 		movl	$1, %esi
 5608      00
 5609 1c04 4889C7   		movq	%rax, %rdi
 5610 1c07 E8000000 		call	__sigsetjmp
 5610      00
 5611 1c0c 85C0     		testl	%eax, %eax
 5612 1c0e 0F95C0   		setne	%al
 5613 1c11 84C0     		testb	%al, %al
 5614 1c13 7423     		je	.L285
 5615 1c15 BF080000 		movl	$8, %edi
 5615      00
 5616 1c1a E8000000 		call	__cxa_allocate_exception
 5616      00
 5617 1c1f 48C70000 		movq	$.LC61, (%rax)
 5617      000000
 5618 1c26 BA000000 		movl	$0, %edx
 5618      00
 5619 1c2b BE000000 		movl	$_ZTIPKc, %esi
 5619      00
 5620 1c30 4889C7   		movq	%rax, %rdi
 5621              	.LEHB141:
 5622 1c33 E8000000 		call	__cxa_throw
 5622      00
 5623              	.L285:
  25:../ExecuteTest.h **** 	}
 5624              		.loc 8 25 0 is_stmt 1
 5625 1c38 488B8578 		movq	-1160(%rbp), %rax
 5625      FBFFFF
 5626 1c3f 4889C7   		movq	%rax, %rdi
 5627 1c42 E819FBFF 		call	_ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelper7RunImplEv
 5627      FF
 5628              	.LEHE141:
  25:../ExecuteTest.h **** 	}
 5629              		.loc 8 25 0 is_stmt 0 discriminator 1
 5630 1c47 488D8590 		leaq	-1136(%rbp), %rax
 5630      FBFFFF
 5631 1c4e 4889C7   		movq	%rax, %rdi
 5632              	.LEHB142:
 5633 1c51 E8000000 		call	_ZN8UnitTest16SignalTranslatorD1Ev
 5633      00
 5634              	.LEHE142:
 5635              	.LBE123:
 5636              	.LBE122:
 5637              		.loc 8 42 0 is_stmt 1
 5638 1c56 E9EE0100 		jmp	.L303
 5638      00
 5639              	.L296:
 5640 1c5b 4989C4   		movq	%rax, %r12
 5641 1c5e 4889D3   		movq	%rdx, %rbx
 5642              	.LBB131:
 5643              	.LBB124:
  25:../ExecuteTest.h **** 	}
 5644              		.loc 8 25 0
 5645 1c61 488D8590 		leaq	-1136(%rbp), %rax
 5645      FBFFFF
 5646 1c68 4889C7   		movq	%rax, %rdi
 5647 1c6b E8000000 		call	_ZN8UnitTest16SignalTranslatorD1Ev
 5647      00
 5648 1c70 4C89E0   		movq	%r12, %rax
 5649 1c73 4889DA   		movq	%rbx, %rdx
 5650 1c76 EB4D     		jmp	.L287
 5651              	.L298:
 5652 1c78 4889C3   		movq	%rax, %rbx
 5653              	.LBE124:
 5654              	.LBB125:
  27:../ExecuteTest.h **** 	{
 5655              		.loc 8 27 0
 5656 1c7b E8000000 		call	__cxa_end_catch
 5656      00
 5657 1c80 4889D8   		movq	%rbx, %rax
 5658 1c83 4889C7   		movq	%rax, %rdi
 5659              	.LEHB143:
 5660 1c86 E8000000 		call	_Unwind_Resume
 5660      00
 5661              	.LEHE143:
 5662              	.L299:
 5663 1c8b 4889C3   		movq	%rax, %rbx
 5664              	.LBE125:
 5665              	.LBB126:
 5666              	.LBB127:
  36:../ExecuteTest.h **** 	}
 5667              		.loc 8 36 0
 5668 1c8e 488D8590 		leaq	-1136(%rbp), %rax
 5668      FBFFFF
 5669 1c95 4889C7   		movq	%rax, %rdi
 5670 1c98 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5670      00
 5671 1c9d EB03     		jmp	.L290
 5672              	.L300:
 5673 1c9f 4889C3   		movq	%rax, %rbx
 5674              	.L290:
 5675              	.LBE127:
  32:../ExecuteTest.h **** 	{
 5676              		.loc 8 32 0
 5677 1ca2 E8000000 		call	__cxa_end_catch
 5677      00
 5678 1ca7 4889D8   		movq	%rbx, %rax
 5679 1caa 4889C7   		movq	%rax, %rdi
 5680              	.LEHB144:
 5681 1cad E8000000 		call	_Unwind_Resume
 5681      00
 5682              	.LEHE144:
 5683              	.L301:
 5684 1cb2 4889C3   		movq	%rax, %rbx
 5685              	.LBE126:
  38:../ExecuteTest.h **** 	{
 5686              		.loc 8 38 0
 5687 1cb5 E8000000 		call	__cxa_end_catch
 5687      00
 5688 1cba 4889D8   		movq	%rbx, %rax
 5689 1cbd 4889C7   		movq	%rax, %rdi
 5690              	.LEHB145:
 5691 1cc0 E8000000 		call	_Unwind_Resume
 5691      00
 5692              	.LEHE145:
 5693              	.L297:
 5694              	.L287:
 5695 1cc5 4883FA01 		cmpq	$1, %rdx
 5696 1cc9 740F     		je	.L293
 5697 1ccb 4883FA02 		cmpq	$2, %rdx
 5698 1ccf 0F84A600 		je	.L294
 5698      0000
 5699 1cd5 E9430100 		jmp	.L302
 5699      00
 5700              	.L293:
 5701              	.LBB129:
  27:../ExecuteTest.h **** 	{
 5702              		.loc 8 27 0
 5703 1cda 4889C7   		movq	%rax, %rdi
 5704 1cdd E8000000 		call	__cxa_begin_catch
 5704      00
 5705 1ce2 48898580 		movq	%rax, -1152(%rbp)
 5705      FBFFFF
  30:../ExecuteTest.h **** 	}
 5706              		.loc 8 30 0
 5707 1ce9 488B8580 		movq	-1152(%rbp), %rax
 5707      FBFFFF
 5708 1cf0 488B00   		movq	(%rax), %rax
 5709 1cf3 4883C010 		addq	$16, %rax
 5710 1cf7 488B00   		movq	(%rax), %rax
 5711 1cfa 488B9580 		movq	-1152(%rbp), %rdx
 5711      FBFFFF
 5712 1d01 4889D7   		movq	%rdx, %rdi
 5713 1d04 FFD0     		call	*%rax
 5714 1d06 4889C3   		movq	%rax, %rbx
 5715 1d09 488B8580 		movq	-1152(%rbp), %rax
 5715      FBFFFF
 5716 1d10 4889C7   		movq	%rax, %rdi
 5717              	.LEHB146:
 5718 1d13 E8000000 		call	_ZNK8UnitTest15AssertException10LineNumberEv
 5718      00
 5719 1d18 4189C4   		movl	%eax, %r12d
 5720 1d1b 488B8580 		movq	-1152(%rbp), %rax
 5720      FBFFFF
 5721 1d22 4889C7   		movq	%rax, %rdi
 5722 1d25 E8000000 		call	_ZNK8UnitTest15AssertException8FilenameEv
 5722      00
  30:../ExecuteTest.h **** 	}
 5723              		.loc 8 30 0 is_stmt 0 discriminator 1
 5724 1d2a 4889C1   		movq	%rax, %rcx
 5725 1d2d 488B8570 		movq	-1168(%rbp), %rax
 5725      FBFFFF
 5726 1d34 488B10   		movq	(%rax), %rdx
 5727 1d37 488B8570 		movq	-1168(%rbp), %rax
 5727      FBFFFF
 5728 1d3e 488B7008 		movq	8(%rax), %rsi
 5729 1d42 488D8590 		leaq	-1136(%rbp), %rax
 5729      FBFFFF
 5730 1d49 4589E0   		movl	%r12d, %r8d
 5731 1d4c 4889C7   		movq	%rax, %rdi
 5732 1d4f E8000000 		call	_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i
 5732      00
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 5733              		.loc 8 29 0 is_stmt 1
 5734 1d54 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 5734      00
  30:../ExecuteTest.h **** 	}
 5735              		.loc 8 30 0
 5736 1d59 488B00   		movq	(%rax), %rax
  29:../ExecuteTest.h **** 			TestDetails(details.testName, details.suiteName, e.Filename(), e.LineNumber()), e.what());
 5737              		.loc 8 29 0
 5738 1d5c 488D8D90 		leaq	-1136(%rbp), %rcx
 5738      FBFFFF
 5739 1d63 4889DA   		movq	%rbx, %rdx
 5740 1d66 4889CE   		movq	%rcx, %rsi
 5741 1d69 4889C7   		movq	%rax, %rdi
 5742 1d6c E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 5742      00
 5743              	.LEHE146:
  27:../ExecuteTest.h **** 	{
 5744              		.loc 8 27 0
 5745 1d71 E8000000 		call	__cxa_end_catch
 5745      00
 5746              	.LBE129:
 5747              	.LBE131:
 5748              		.loc 8 42 0
 5749 1d76 E9CE0000 		jmp	.L303
 5749      00
 5750              	.L294:
 5751              	.LBB132:
 5752              	.LBB130:
  32:../ExecuteTest.h **** 	{
 5753              		.loc 8 32 0
 5754 1d7b 4889C7   		movq	%rax, %rdi
 5755 1d7e E8000000 		call	__cxa_begin_catch
 5755      00
 5756 1d83 48898588 		movq	%rax, -1144(%rbp)
 5756      FBFFFF
 5757              	.LBB128:
  34:../ExecuteTest.h **** 		stream << "Unhandled exception: " << e.what();
 5758              		.loc 8 34 0
 5759 1d8a 488D8590 		leaq	-1136(%rbp), %rax
 5759      FBFFFF
 5760 1d91 4889C7   		movq	%rax, %rdi
 5761              	.LEHB147:
 5762 1d94 E8000000 		call	_ZN8UnitTest15MemoryOutStreamC1Ev
 5762      00
 5763              	.LEHE147:
  35:../ExecuteTest.h **** 		CurrentTest::Results()->OnTestFailure(details, stream.GetText());
 5764              		.loc 8 35 0
 5765 1d99 488B8588 		movq	-1144(%rbp), %rax
 5765      FBFFFF
 5766 1da0 488B00   		movq	(%rax), %rax
 5767 1da3 4883C010 		addq	$16, %rax
 5768 1da7 488B00   		movq	(%rax), %rax
 5769 1daa 488B9588 		movq	-1144(%rbp), %rdx
 5769      FBFFFF
 5770 1db1 4889D7   		movq	%rdx, %rdi
 5771 1db4 FFD0     		call	*%rax
 5772 1db6 4889C3   		movq	%rax, %rbx
 5773 1db9 488D8590 		leaq	-1136(%rbp), %rax
 5773      FBFFFF
 5774 1dc0 BE000000 		movl	$.LC45, %esi
 5774      00
 5775 1dc5 4889C7   		movq	%rax, %rdi
 5776              	.LEHB148:
 5777 1dc8 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5777      00
 5778 1dcd 4889DE   		movq	%rbx, %rsi
 5779 1dd0 4889C7   		movq	%rax, %rdi
 5780 1dd3 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 5780      00
  36:../ExecuteTest.h **** 	}
 5781              		.loc 8 36 0
 5782 1dd8 488D8590 		leaq	-1136(%rbp), %rax
 5782      FBFFFF
 5783 1ddf 4889C7   		movq	%rax, %rdi
 5784 1de2 E8000000 		call	_ZNK8UnitTest15MemoryOutStream7GetTextEv
 5784      00
 5785 1de7 4889C3   		movq	%rax, %rbx
 5786 1dea E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 5786      00
  36:../ExecuteTest.h **** 	}
 5787              		.loc 8 36 0 is_stmt 0 discriminator 1
 5788 1def 488B00   		movq	(%rax), %rax
 5789 1df2 488B8D70 		movq	-1168(%rbp), %rcx
 5789      FBFFFF
 5790 1df9 4889DA   		movq	%rbx, %rdx
 5791 1dfc 4889CE   		movq	%rcx, %rsi
 5792 1dff 4889C7   		movq	%rax, %rdi
 5793 1e02 E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 5793      00
 5794              	.LEHE148:
 5795 1e07 488D8590 		leaq	-1136(%rbp), %rax
 5795      FBFFFF
 5796 1e0e 4889C7   		movq	%rax, %rdi
 5797              	.LEHB149:
 5798 1e11 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 5798      00
 5799              	.LEHE149:
 5800              	.LBE128:
  32:../ExecuteTest.h **** 	{
 5801              		.loc 8 32 0 is_stmt 1
 5802 1e16 E8000000 		call	__cxa_end_catch
 5802      00
 5803              	.LBE130:
 5804              	.LBE132:
 5805              		.loc 8 42 0
 5806 1e1b EB2C     		jmp	.L303
 5807              	.L302:
 5808              	.LBB133:
  38:../ExecuteTest.h **** 	{
 5809              		.loc 8 38 0
 5810 1e1d 4889C7   		movq	%rax, %rdi
 5811 1e20 E8000000 		call	__cxa_begin_catch
 5811      00
 5812              	.LEHB150:
  40:../ExecuteTest.h **** 	}
 5813              		.loc 8 40 0
 5814 1e25 E8000000 		call	_ZN8UnitTest11CurrentTest7ResultsEv
 5814      00
 5815 1e2a 488B00   		movq	(%rax), %rax
 5816 1e2d 488B8D70 		movq	-1168(%rbp), %rcx
 5816      FBFFFF
 5817 1e34 BA000000 		movl	$.LC62, %edx
 5817      00
 5818 1e39 4889CE   		movq	%rcx, %rsi
 5819 1e3c 4889C7   		movq	%rax, %rdi
 5820 1e3f E8000000 		call	_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
 5820      00
 5821              	.LEHE150:
 5822              	.LEHB151:
  38:../ExecuteTest.h **** 	{
 5823              		.loc 8 38 0
 5824 1e44 E8000000 		call	__cxa_end_catch
 5824      00
 5825              	.LEHE151:
 5826              	.L303:
 5827              	.LBE133:
 5828              		.loc 8 42 0
 5829 1e49 90       		nop
 5830 1e4a 4881C480 		addq	$1152, %rsp
 5830      040000
 5831 1e51 5B       		popq	%rbx
 5832 1e52 415C     		popq	%r12
 5833 1e54 5D       		popq	%rbp
 5834              		.cfi_def_cfa 7, 8
 5835 1e55 C3       		ret
 5836              		.cfi_endproc
 5837              	.LFE1426:
 5838              		.section	.gcc_except_table
 5839              		.align 4
 5840              	.LLSDA1426:
 5841 03d0 FF       		.byte	0xff
 5842 03d1 03       		.byte	0x3
 5843 03d2 5D       		.uleb128 .LLSDATT1426-.LLSDATTD1426
 5844              	.LLSDATTD1426:
 5845 03d3 01       		.byte	0x1
 5846 03d4 46       		.uleb128 .LLSDACSE1426-.LLSDACSB1426
 5847              	.LLSDACSB1426:
 5848 03d5 1C       		.uleb128 .LEHB139-.LFB1426
 5849 03d6 05       		.uleb128 .LEHE139-.LEHB139
 5850 03d7 00       		.uleb128 0
 5851 03d8 00       		.uleb128 0
 5852 03d9 35       		.uleb128 .LEHB140-.LFB1426
 5853 03da 05       		.uleb128 .LEHE140-.LEHB140
 5854 03db 8702     		.uleb128 .L297-.LFB1426
 5855 03dd 05       		.uleb128 0x5
 5856 03de 75       		.uleb128 .LEHB141-.LFB1426
 5857 03df 14       		.uleb128 .LEHE141-.LEHB141
 5858 03e0 9D01     		.uleb128 .L296-.LFB1426
 5859 03e2 07       		.uleb128 0x7
 5860 03e3 9301     		.uleb128 .LEHB142-.LFB1426
 5861 03e5 05       		.uleb128 .LEHE142-.LEHB142
 5862 03e6 8702     		.uleb128 .L297-.LFB1426
 5863 03e8 05       		.uleb128 0x5
 5864 03e9 C801     		.uleb128 .LEHB143-.LFB1426
 5865 03eb 05       		.uleb128 .LEHE143-.LEHB143
 5866 03ec 00       		.uleb128 0
 5867 03ed 00       		.uleb128 0
 5868 03ee EF01     		.uleb128 .LEHB144-.LFB1426
 5869 03f0 05       		.uleb128 .LEHE144-.LEHB144
 5870 03f1 00       		.uleb128 0
 5871 03f2 00       		.uleb128 0
 5872 03f3 8202     		.uleb128 .LEHB145-.LFB1426
 5873 03f5 05       		.uleb128 .LEHE145-.LEHB145
 5874 03f6 00       		.uleb128 0
 5875 03f7 00       		.uleb128 0
 5876 03f8 D502     		.uleb128 .LEHB146-.LFB1426
 5877 03fa 5E       		.uleb128 .LEHE146-.LEHB146
 5878 03fb BA01     		.uleb128 .L298-.LFB1426
 5879 03fd 00       		.uleb128 0
 5880 03fe D603     		.uleb128 .LEHB147-.LFB1426
 5881 0400 05       		.uleb128 .LEHE147-.LEHB147
 5882 0401 E101     		.uleb128 .L300-.LFB1426
 5883 0403 00       		.uleb128 0
 5884 0404 8A04     		.uleb128 .LEHB148-.LFB1426
 5885 0406 3F       		.uleb128 .LEHE148-.LEHB148
 5886 0407 CD01     		.uleb128 .L299-.LFB1426
 5887 0409 00       		.uleb128 0
 5888 040a D304     		.uleb128 .LEHB149-.LFB1426
 5889 040c 05       		.uleb128 .LEHE149-.LEHB149
 5890 040d E101     		.uleb128 .L300-.LFB1426
 5891 040f 00       		.uleb128 0
 5892 0410 E704     		.uleb128 .LEHB150-.LFB1426
 5893 0412 1F       		.uleb128 .LEHE150-.LEHB150
 5894 0413 F401     		.uleb128 .L301-.LFB1426
 5895 0415 00       		.uleb128 0
 5896 0416 8605     		.uleb128 .LEHB151-.LFB1426
 5897 0418 05       		.uleb128 .LEHE151-.LEHB151
 5898 0419 00       		.uleb128 0
 5899 041a 00       		.uleb128 0
 5900              	.LLSDACSE1426:
 5901 041b 03       		.byte	0x3
 5902 041c 00       		.byte	0
 5903 041d 02       		.byte	0x2
 5904 041e 7D       		.byte	0x7d
 5905 041f 01       		.byte	0x1
 5906 0420 7D       		.byte	0x7d
 5907 0421 00       		.byte	0
 5908 0422 7D       		.byte	0x7d
 5909 0423 00       		.align 4
 5910 0424 00000000 		.long	0
 5911              	
 5912 0428 00000000 		.long	_ZTISt9exception
 5913 042c 00000000 		.long	_ZTIN8UnitTest15AssertExceptionE
 5914              	.LLSDATT1426:
 5915              		.text
 5917              		.section	.text._ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_,"axG",@progbits,_ZN8UnitTest8AreCloseIff
 5918              		.weak	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
 5920              	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_:
 5921              	.LFB1458:
  39:../Checks.h   **** {
 5922              		.loc 5 39 0
 5923              		.cfi_startproc
 5924 0000 55       		pushq	%rbp
 5925              		.cfi_def_cfa_offset 16
 5926              		.cfi_offset 6, -16
 5927 0001 4889E5   		movq	%rsp, %rbp
 5928              		.cfi_def_cfa_register 6
 5929 0004 48897DF8 		movq	%rdi, -8(%rbp)
 5930 0008 488975F0 		movq	%rsi, -16(%rbp)
 5931 000c 488955E8 		movq	%rdx, -24(%rbp)
  41:../Checks.h   **** }
 5932              		.loc 5 41 0
 5933 0010 488B45F0 		movq	-16(%rbp), %rax
 5934 0014 F30F1008 		movss	(%rax), %xmm1
 5935 0018 488B45F8 		movq	-8(%rbp), %rax
 5936 001c F30F1000 		movss	(%rax), %xmm0
 5937 0020 488B45E8 		movq	-24(%rbp), %rax
 5938 0024 F30F1010 		movss	(%rax), %xmm2
 5939 0028 F30F5CC2 		subss	%xmm2, %xmm0
 5940 002c 0F2EC8   		ucomiss	%xmm0, %xmm1
 5941 002f 7228     		jb	.L305
  41:../Checks.h   **** }
 5942              		.loc 5 41 0 is_stmt 0 discriminator 1
 5943 0031 488B45F0 		movq	-16(%rbp), %rax
 5944 0035 F30F1008 		movss	(%rax), %xmm1
 5945 0039 488B45F8 		movq	-8(%rbp), %rax
 5946 003d F30F1010 		movss	(%rax), %xmm2
 5947 0041 488B45E8 		movq	-24(%rbp), %rax
 5948 0045 F30F1000 		movss	(%rax), %xmm0
 5949 0049 F30F58C2 		addss	%xmm2, %xmm0
 5950 004d 0F2EC1   		ucomiss	%xmm1, %xmm0
 5951 0050 7207     		jb	.L305
  41:../Checks.h   **** }
 5952              		.loc 5 41 0 discriminator 3
 5953 0052 B8010000 		movl	$1, %eax
 5953      00
 5954 0057 EB05     		jmp	.L308
 5955              	.L305:
  41:../Checks.h   **** }
 5956              		.loc 5 41 0 discriminator 2
 5957 0059 B8000000 		movl	$0, %eax
 5957      00
 5958              	.L308:
  42:../Checks.h   **** 
 5959              		.loc 5 42 0 is_stmt 1 discriminator 4
 5960 005e 5D       		popq	%rbp
 5961              		.cfi_def_cfa 7, 8
 5962 005f C3       		ret
 5963              		.cfi_endproc
 5964              	.LFE1458:
 5966              		.section	.text._ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_,"axG",@progbits,_ZN8UnitTest
 5967              		.weak	_ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_
 5969              	_ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_:
 5970              	.LFB1460:
  87:../Checks.h   **** {
 5971              		.loc 5 87 0
 5972              		.cfi_startproc
 5973 0000 55       		pushq	%rbp
 5974              		.cfi_def_cfa_offset 16
 5975              		.cfi_offset 6, -16
 5976 0001 4889E5   		movq	%rsp, %rbp
 5977              		.cfi_def_cfa_register 6
 5978 0004 4883EC30 		subq	$48, %rsp
 5979 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5980 000c 488975E0 		movq	%rsi, -32(%rbp)
 5981 0010 8955DC   		movl	%edx, -36(%rbp)
 5982 0013 48894DD0 		movq	%rcx, -48(%rbp)
 5983              	.LBB134:
  89:../Checks.h   ****     for (int i = 0; i < count; ++i)
 5984              		.loc 5 89 0
 5985 0017 C645FB01 		movb	$1, -5(%rbp)
 5986              	.LBB135:
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 5987              		.loc 5 90 0
 5988 001b C745FC00 		movl	$0, -4(%rbp)
 5988      000000
 5989 0022 EB4E     		jmp	.L313
 5990              	.L314:
  91:../Checks.h   ****     return equal;
 5991              		.loc 5 91 0 discriminator 2
 5992 0024 8B45FC   		movl	-4(%rbp), %eax
 5993 0027 4898     		cltq
 5994 0029 488D1485 		leaq	0(,%rax,4), %rdx
 5994      00000000 
 5995 0031 488B45E0 		movq	-32(%rbp), %rax
 5996 0035 488D3402 		leaq	(%rdx,%rax), %rsi
 5997 0039 8B45FC   		movl	-4(%rbp), %eax
 5998 003c 4898     		cltq
 5999 003e 488D1485 		leaq	0(,%rax,4), %rdx
 5999      00000000 
 6000 0046 488B45E8 		movq	-24(%rbp), %rax
 6001 004a 488D0C02 		leaq	(%rdx,%rax), %rcx
 6002 004e 488B45D0 		movq	-48(%rbp), %rax
 6003 0052 4889C2   		movq	%rax, %rdx
 6004 0055 4889CF   		movq	%rcx, %rdi
 6005 0058 E8000000 		call	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
 6005      00
 6006 005d 0FB655FB 		movzbl	-5(%rbp), %edx
 6007 0061 0FB6C0   		movzbl	%al, %eax
 6008 0064 21D0     		andl	%edx, %eax
 6009 0066 85C0     		testl	%eax, %eax
 6010 0068 0F95C0   		setne	%al
 6011 006b 8845FB   		movb	%al, -5(%rbp)
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 6012              		.loc 5 90 0 discriminator 2
 6013 006e 8345FC01 		addl	$1, -4(%rbp)
 6014              	.L313:
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 6015              		.loc 5 90 0 is_stmt 0 discriminator 1
 6016 0072 8B45FC   		movl	-4(%rbp), %eax
 6017 0075 3B45DC   		cmpl	-36(%rbp), %eax
 6018 0078 7CAA     		jl	.L314
 6019              	.LBE135:
  92:../Checks.h   **** }
 6020              		.loc 5 92 0 is_stmt 1
 6021 007a 0FB645FB 		movzbl	-5(%rbp), %eax
 6022              	.LBE134:
  93:../Checks.h   **** 
 6023              		.loc 5 93 0
 6024 007e C9       		leave
 6025              		.cfi_def_cfa 7, 8
 6026 007f C3       		ret
 6027              		.cfi_endproc
 6028              	.LFE1460:
 6030              		.section	.text._ZN9__gnu_cxx13new_allocatorIfEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIfE
 6031              		.align 2
 6032              		.weak	_ZN9__gnu_cxx13new_allocatorIfEC2Ev
 6034              	_ZN9__gnu_cxx13new_allocatorIfEC2Ev:
 6035              	.LFB1462:
 6036              		.file 9 "/usr/include/c++/4.8/ext/new_allocator.h"
   1:/usr/include/c++/4.8/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/4.8/ext/new_allocator.h **** 
   3:/usr/include/c++/4.8/ext/new_allocator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/ext/new_allocator.h **** //
   5:/usr/include/c++/4.8/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/4.8/ext/new_allocator.h **** 
  11:/usr/include/c++/4.8/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/ext/new_allocator.h **** 
  16:/usr/include/c++/4.8/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/ext/new_allocator.h **** 
  20:/usr/include/c++/4.8/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/ext/new_allocator.h **** 
  25:/usr/include/c++/4.8/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/4.8/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/4.8/ext/new_allocator.h ****  */
  28:/usr/include/c++/4.8/ext/new_allocator.h **** 
  29:/usr/include/c++/4.8/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/4.8/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/4.8/ext/new_allocator.h **** 
  32:/usr/include/c++/4.8/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/4.8/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/4.8/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/4.8/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/4.8/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/4.8/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/4.8/ext/new_allocator.h **** #endif
  39:/usr/include/c++/4.8/ext/new_allocator.h **** 
  40:/usr/include/c++/4.8/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/4.8/ext/new_allocator.h **** {
  42:/usr/include/c++/4.8/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/4.8/ext/new_allocator.h **** 
  44:/usr/include/c++/4.8/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/4.8/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/4.8/ext/new_allocator.h **** 
  47:/usr/include/c++/4.8/ext/new_allocator.h ****   /**
  48:/usr/include/c++/4.8/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/4.8/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/4.8/ext/new_allocator.h ****    *
  51:/usr/include/c++/4.8/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/4.8/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/4.8/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/4.8/ext/new_allocator.h ****    *
  55:/usr/include/c++/4.8/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/4.8/ext/new_allocator.h ****    */
  57:/usr/include/c++/4.8/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/4.8/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/4.8/ext/new_allocator.h ****     {
  60:/usr/include/c++/4.8/ext/new_allocator.h ****     public:
  61:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/4.8/ext/new_allocator.h **** 
  69:/usr/include/c++/4.8/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/4.8/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/4.8/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/4.8/ext/new_allocator.h **** 
  73:/usr/include/c++/4.8/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/4.8/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/4.8/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/4.8/ext/new_allocator.h **** #endif
  78:/usr/include/c++/4.8/ext/new_allocator.h **** 
  79:/usr/include/c++/4.8/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 6037              		.loc 9 79 0
 6038              		.cfi_startproc
 6039 0000 55       		pushq	%rbp
 6040              		.cfi_def_cfa_offset 16
 6041              		.cfi_offset 6, -16
 6042 0001 4889E5   		movq	%rsp, %rbp
 6043              		.cfi_def_cfa_register 6
 6044 0004 48897DF8 		movq	%rdi, -8(%rbp)
 6045              		.loc 9 79 0
 6046 0008 5D       		popq	%rbp
 6047              		.cfi_def_cfa 7, 8
 6048 0009 C3       		ret
 6049              		.cfi_endproc
 6050              	.LFE1462:
 6052              		.weak	_ZN9__gnu_cxx13new_allocatorIfEC1Ev
 6053              		.set	_ZN9__gnu_cxx13new_allocatorIfEC1Ev,_ZN9__gnu_cxx13new_allocatorIfEC2Ev
 6054              		.section	.text._ZN9__gnu_cxx13new_allocatorIfED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocatorIfE
 6055              		.align 2
 6056              		.weak	_ZN9__gnu_cxx13new_allocatorIfED2Ev
 6058              	_ZN9__gnu_cxx13new_allocatorIfED2Ev:
 6059              	.LFB1465:
  80:/usr/include/c++/4.8/ext/new_allocator.h **** 
  81:/usr/include/c++/4.8/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/4.8/ext/new_allocator.h **** 
  83:/usr/include/c++/4.8/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/4.8/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/4.8/ext/new_allocator.h **** 
  86:/usr/include/c++/4.8/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 6060              		.loc 9 86 0
 6061              		.cfi_startproc
 6062 0000 55       		pushq	%rbp
 6063              		.cfi_def_cfa_offset 16
 6064              		.cfi_offset 6, -16
 6065 0001 4889E5   		movq	%rsp, %rbp
 6066              		.cfi_def_cfa_register 6
 6067 0004 48897DF8 		movq	%rdi, -8(%rbp)
 6068              		.loc 9 86 0
 6069 0008 5D       		popq	%rbp
 6070              		.cfi_def_cfa 7, 8
 6071 0009 C3       		ret
 6072              		.cfi_endproc
 6073              	.LFE1465:
 6075              		.weak	_ZN9__gnu_cxx13new_allocatorIfED1Ev
 6076              		.set	_ZN9__gnu_cxx13new_allocatorIfED1Ev,_ZN9__gnu_cxx13new_allocatorIfED2Ev
 6077              		.section	.text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector_baseIf
 6078              		.align 2
 6079              		.weak	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev
 6081              	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev:
 6082              	.LFB1469:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 6083              		.loc 7 79 0
 6084              		.cfi_startproc
 6085 0000 55       		pushq	%rbp
 6086              		.cfi_def_cfa_offset 16
 6087              		.cfi_offset 6, -16
 6088 0001 4889E5   		movq	%rsp, %rbp
 6089              		.cfi_def_cfa_register 6
 6090 0004 4883EC10 		subq	$16, %rsp
 6091 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6092              	.LBB136:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 6093              		.loc 7 79 0
 6094 000c 488B45F8 		movq	-8(%rbp), %rax
 6095 0010 4889C7   		movq	%rax, %rdi
 6096 0013 E8000000 		call	_ZNSaIfED2Ev
 6096      00
 6097              	.LBE136:
 6098 0018 C9       		leave
 6099              		.cfi_def_cfa 7, 8
 6100 0019 C3       		ret
 6101              		.cfi_endproc
 6102              	.LFE1469:
 6104              		.weak	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
 6105              		.set	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev,_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev
 6106              		.section	.text._ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_,"axG",@progbits,_ZNSt12_Vector_baseIfSaIfEEC5E
 6107              		.align 2
 6108              		.weak	_ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_
 6110              	_ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_:
 6111              	.LFB1471:
 134:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a)
 6112              		.loc 7 134 0
 6113              		.cfi_startproc
 6114              		.cfi_personality 0x3,__gxx_personality_v0
 6115              		.cfi_lsda 0x3,.LLSDA1471
 6116 0000 55       		pushq	%rbp
 6117              		.cfi_def_cfa_offset 16
 6118              		.cfi_offset 6, -16
 6119 0001 4889E5   		movq	%rsp, %rbp
 6120              		.cfi_def_cfa_register 6
 6121 0004 53       		pushq	%rbx
 6122 0005 4883EC28 		subq	$40, %rsp
 6123              		.cfi_offset 3, -24
 6124 0009 48897DE8 		movq	%rdi, -24(%rbp)
 6125 000d 488975E0 		movq	%rsi, -32(%rbp)
 6126 0011 488955D8 		movq	%rdx, -40(%rbp)
 6127              	.LBB137:
 135:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 6128              		.loc 7 135 0
 6129 0015 488B45E8 		movq	-24(%rbp), %rax
 6130 0019 488B55D8 		movq	-40(%rbp), %rdx
 6131 001d 4889D6   		movq	%rdx, %rsi
 6132 0020 4889C7   		movq	%rax, %rdi
 6133 0023 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_
 6133      00
 136:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6134              		.loc 7 136 0
 6135 0028 488B55E0 		movq	-32(%rbp), %rdx
 6136 002c 488B45E8 		movq	-24(%rbp), %rax
 6137 0030 4889D6   		movq	%rdx, %rsi
 6138 0033 4889C7   		movq	%rax, %rdi
 6139              	.LEHB152:
 6140 0036 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm
 6140      00
 6141              	.LEHE152:
 6142              	.LBE137:
 6143 003b EB1A     		jmp	.L324
 6144              	.L323:
 6145 003d 4889C3   		movq	%rax, %rbx
 6146              	.LBB138:
 135:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 6147              		.loc 7 135 0
 6148 0040 488B45E8 		movq	-24(%rbp), %rax
 6149 0044 4889C7   		movq	%rax, %rdi
 6150 0047 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
 6150      00
 6151 004c 4889D8   		movq	%rbx, %rax
 6152 004f 4889C7   		movq	%rax, %rdi
 6153              	.LEHB153:
 6154 0052 E8000000 		call	_Unwind_Resume
 6154      00
 6155              	.LEHE153:
 6156              	.L324:
 6157              	.LBE138:
 136:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6158              		.loc 7 136 0
 6159 0057 4883C428 		addq	$40, %rsp
 6160 005b 5B       		popq	%rbx
 6161 005c 5D       		popq	%rbp
 6162              		.cfi_def_cfa 7, 8
 6163 005d C3       		ret
 6164              		.cfi_endproc
 6165              	.LFE1471:
 6166              		.section	.gcc_except_table
 6167              	.LLSDA1471:
 6168 0430 FF       		.byte	0xff
 6169 0431 FF       		.byte	0xff
 6170 0432 01       		.byte	0x1
 6171 0433 08       		.uleb128 .LLSDACSE1471-.LLSDACSB1471
 6172              	.LLSDACSB1471:
 6173 0434 36       		.uleb128 .LEHB152-.LFB1471
 6174 0435 05       		.uleb128 .LEHE152-.LEHB152
 6175 0436 3D       		.uleb128 .L323-.LFB1471
 6176 0437 00       		.uleb128 0
 6177 0438 52       		.uleb128 .LEHB153-.LFB1471
 6178 0439 05       		.uleb128 .LEHE153-.LEHB153
 6179 043a 00       		.uleb128 0
 6180 043b 00       		.uleb128 0
 6181              	.LLSDACSE1471:
 6182              		.section	.text._ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_,"axG",@progbits,_ZNSt12_Vector_baseIfSaIfEEC5E
 6184              		.weak	_ZNSt12_Vector_baseIfSaIfEEC1EmRKS0_
 6185              		.set	_ZNSt12_Vector_baseIfSaIfEEC1EmRKS0_,_ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_
 6186              		.section	.text._ZNSt12_Vector_baseIfSaIfEED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIfSaIfEED5Ev,com
 6187              		.align 2
 6188              		.weak	_ZNSt12_Vector_baseIfSaIfEED2Ev
 6190              	_ZNSt12_Vector_baseIfSaIfEED2Ev:
 6191              	.LFB1474:
 159:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 6192              		.loc 7 159 0
 6193              		.cfi_startproc
 6194              		.cfi_personality 0x3,__gxx_personality_v0
 6195              		.cfi_lsda 0x3,.LLSDA1474
 6196 0000 55       		pushq	%rbp
 6197              		.cfi_def_cfa_offset 16
 6198              		.cfi_offset 6, -16
 6199 0001 4889E5   		movq	%rsp, %rbp
 6200              		.cfi_def_cfa_register 6
 6201 0004 53       		pushq	%rbx
 6202 0005 4883EC18 		subq	$24, %rsp
 6203              		.cfi_offset 3, -24
 6204 0009 48897DE8 		movq	%rdi, -24(%rbp)
 6205              	.LBB139:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6206              		.loc 7 161 0
 6207 000d 488B45E8 		movq	-24(%rbp), %rax
 6208 0011 488B4010 		movq	16(%rax), %rax
 6209 0015 4889C2   		movq	%rax, %rdx
 6210 0018 488B45E8 		movq	-24(%rbp), %rax
 6211 001c 488B00   		movq	(%rax), %rax
 6212 001f 4829C2   		subq	%rax, %rdx
 6213 0022 4889D0   		movq	%rdx, %rax
 6214 0025 48C1F802 		sarq	$2, %rax
 6215 0029 4889C2   		movq	%rax, %rdx
 6216 002c 488B45E8 		movq	-24(%rbp), %rax
 6217 0030 488B08   		movq	(%rax), %rcx
 160:/usr/include/c++/4.8/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 6218              		.loc 7 160 0
 6219 0033 488B45E8 		movq	-24(%rbp), %rax
 6220 0037 4889CE   		movq	%rcx, %rsi
 6221 003a 4889C7   		movq	%rax, %rdi
 6222              	.LEHB154:
 6223 003d E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm
 6223      00
 6224              	.LEHE154:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6225              		.loc 7 161 0
 6226 0042 488B45E8 		movq	-24(%rbp), %rax
 6227 0046 4889C7   		movq	%rax, %rdi
 6228 0049 E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
 6228      00
 6229 004e EB1A     		jmp	.L329
 6230              	.L328:
 6231 0050 4889C3   		movq	%rax, %rbx
 6232 0053 488B45E8 		movq	-24(%rbp), %rax
 6233 0057 4889C7   		movq	%rax, %rdi
 6234 005a E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
 6234      00
 6235 005f 4889D8   		movq	%rbx, %rax
 6236 0062 4889C7   		movq	%rax, %rdi
 6237              	.LEHB155:
 6238 0065 E8000000 		call	_Unwind_Resume
 6238      00
 6239              	.LEHE155:
 6240              	.L329:
 6241              	.LBE139:
 6242 006a 4883C418 		addq	$24, %rsp
 6243 006e 5B       		popq	%rbx
 6244 006f 5D       		popq	%rbp
 6245              		.cfi_def_cfa 7, 8
 6246 0070 C3       		ret
 6247              		.cfi_endproc
 6248              	.LFE1474:
 6249              		.section	.gcc_except_table
 6250              	.LLSDA1474:
 6251 043c FF       		.byte	0xff
 6252 043d FF       		.byte	0xff
 6253 043e 01       		.byte	0x1
 6254 043f 08       		.uleb128 .LLSDACSE1474-.LLSDACSB1474
 6255              	.LLSDACSB1474:
 6256 0440 3D       		.uleb128 .LEHB154-.LFB1474
 6257 0441 05       		.uleb128 .LEHE154-.LEHB154
 6258 0442 50       		.uleb128 .L328-.LFB1474
 6259 0443 00       		.uleb128 0
 6260 0444 65       		.uleb128 .LEHB155-.LFB1474
 6261 0445 05       		.uleb128 .LEHE155-.LEHB155
 6262 0446 00       		.uleb128 0
 6263 0447 00       		.uleb128 0
 6264              	.LLSDACSE1474:
 6265              		.section	.text._ZNSt12_Vector_baseIfSaIfEED2Ev,"axG",@progbits,_ZNSt12_Vector_baseIfSaIfEED5Ev,com
 6267              		.weak	_ZNSt12_Vector_baseIfSaIfEED1Ev
 6268              		.set	_ZNSt12_Vector_baseIfSaIfEED1Ev,_ZNSt12_Vector_baseIfSaIfEED2Ev
 6269              		.section	.text._ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf,"axG",@progbits,_ZNSt6vectorIfSaIfEE1
 6270              		.align 2
 6271              		.weak	_ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf
 6273              	_ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf:
 6274              	.LFB1476:
 772:/usr/include/c++/4.8/bits/stl_vector.h **** 
 773:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 774:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 775:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 776:/usr/include/c++/4.8/bits/stl_vector.h ****        *  accessed.
 777:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 778:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 779:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 780:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 781:/usr/include/c++/4.8/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 782:/usr/include/c++/4.8/bits/stl_vector.h ****        *  see at().)
 783:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 784:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reference
 785:/usr/include/c++/4.8/bits/stl_vector.h ****       operator[](size_type __n) const
 786:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 787:/usr/include/c++/4.8/bits/stl_vector.h **** 
 788:/usr/include/c++/4.8/bits/stl_vector.h ****     protected:
 789:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Safety check used only from at().
 790:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 791:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 792:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 793:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__n >= this->size())
 794:/usr/include/c++/4.8/bits/stl_vector.h **** 	  __throw_out_of_range(__N("vector::_M_range_check"));
 795:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 796:/usr/include/c++/4.8/bits/stl_vector.h **** 
 797:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 798:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 799:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 800:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 801:/usr/include/c++/4.8/bits/stl_vector.h ****        *  accessed.
 802:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 803:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 804:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 805:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 806:/usr/include/c++/4.8/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 807:/usr/include/c++/4.8/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 808:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 809:/usr/include/c++/4.8/bits/stl_vector.h ****       reference
 810:/usr/include/c++/4.8/bits/stl_vector.h ****       at(size_type __n)
 811:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 812:/usr/include/c++/4.8/bits/stl_vector.h **** 	_M_range_check(__n);
 813:/usr/include/c++/4.8/bits/stl_vector.h **** 	return (*this)[__n]; 
 814:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 815:/usr/include/c++/4.8/bits/stl_vector.h **** 
 816:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 817:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 818:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 819:/usr/include/c++/4.8/bits/stl_vector.h ****        *  accessed.
 820:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 821:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 822:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 823:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 824:/usr/include/c++/4.8/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 825:/usr/include/c++/4.8/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 826:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 827:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reference
 828:/usr/include/c++/4.8/bits/stl_vector.h ****       at(size_type __n) const
 829:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 830:/usr/include/c++/4.8/bits/stl_vector.h **** 	_M_range_check(__n);
 831:/usr/include/c++/4.8/bits/stl_vector.h **** 	return (*this)[__n];
 832:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 833:/usr/include/c++/4.8/bits/stl_vector.h **** 
 834:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 835:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 836:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element of the %vector.
 837:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 838:/usr/include/c++/4.8/bits/stl_vector.h ****       reference
 839:/usr/include/c++/4.8/bits/stl_vector.h ****       front()
 840:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *begin(); }
 841:/usr/include/c++/4.8/bits/stl_vector.h **** 
 842:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 843:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 844:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element of the %vector.
 845:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 846:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reference
 847:/usr/include/c++/4.8/bits/stl_vector.h ****       front() const
 848:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *begin(); }
 849:/usr/include/c++/4.8/bits/stl_vector.h **** 
 850:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 851:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
 852:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element of the %vector.
 853:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 854:/usr/include/c++/4.8/bits/stl_vector.h ****       reference
 855:/usr/include/c++/4.8/bits/stl_vector.h ****       back()
 856:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(end() - 1); }
 857:/usr/include/c++/4.8/bits/stl_vector.h ****       
 858:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 859:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 860:/usr/include/c++/4.8/bits/stl_vector.h ****        *  last element of the %vector.
 861:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 862:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reference
 863:/usr/include/c++/4.8/bits/stl_vector.h ****       back() const
 864:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(end() - 1); }
 865:/usr/include/c++/4.8/bits/stl_vector.h **** 
 866:/usr/include/c++/4.8/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 867:/usr/include/c++/4.8/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 868:/usr/include/c++/4.8/bits/stl_vector.h ****       // data access
 869:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 870:/usr/include/c++/4.8/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 871:/usr/include/c++/4.8/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 872:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 873:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 874:/usr/include/c++/4.8/bits/stl_vector.h ****       _Tp*
 875:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 876:/usr/include/c++/4.8/bits/stl_vector.h ****       pointer
 877:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 878:/usr/include/c++/4.8/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
 879:/usr/include/c++/4.8/bits/stl_vector.h ****       { return std::__addressof(front()); }
 880:/usr/include/c++/4.8/bits/stl_vector.h **** 
 881:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 882:/usr/include/c++/4.8/bits/stl_vector.h ****       const _Tp*
 883:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 884:/usr/include/c++/4.8/bits/stl_vector.h ****       const_pointer
 885:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 886:/usr/include/c++/4.8/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
 887:/usr/include/c++/4.8/bits/stl_vector.h ****       { return std::__addressof(front()); }
 888:/usr/include/c++/4.8/bits/stl_vector.h **** 
 889:/usr/include/c++/4.8/bits/stl_vector.h ****       // [23.2.4.3] modifiers
 890:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 891:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 892:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data to be added.
 893:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 894:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 895:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 896:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 897:/usr/include/c++/4.8/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 898:/usr/include/c++/4.8/bits/stl_vector.h ****        *  available.
 899:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 900:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 901:/usr/include/c++/4.8/bits/stl_vector.h ****       push_back(const value_type& __x)
 902:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 903:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 904:/usr/include/c++/4.8/bits/stl_vector.h **** 	  {
 905:/usr/include/c++/4.8/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 906:/usr/include/c++/4.8/bits/stl_vector.h **** 	                             __x);
 907:/usr/include/c++/4.8/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 908:/usr/include/c++/4.8/bits/stl_vector.h **** 	  }
 909:/usr/include/c++/4.8/bits/stl_vector.h **** 	else
 910:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 911:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_emplace_back_aux(__x);
 912:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 913:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_insert_aux(end(), __x);
 914:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 915:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 916:/usr/include/c++/4.8/bits/stl_vector.h **** 
 917:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 918:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 919:/usr/include/c++/4.8/bits/stl_vector.h ****       push_back(value_type&& __x)
 920:/usr/include/c++/4.8/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
 921:/usr/include/c++/4.8/bits/stl_vector.h **** 
 922:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename... _Args>
 923:/usr/include/c++/4.8/bits/stl_vector.h ****         void
 924:/usr/include/c++/4.8/bits/stl_vector.h ****         emplace_back(_Args&&... __args);
 925:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 926:/usr/include/c++/4.8/bits/stl_vector.h **** 
 927:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 928:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Removes last element.
 929:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 930:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 931:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 932:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
 933:/usr/include/c++/4.8/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
 934:/usr/include/c++/4.8/bits/stl_vector.h ****        *  called.
 935:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 936:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 937:/usr/include/c++/4.8/bits/stl_vector.h ****       pop_back()
 938:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 939:/usr/include/c++/4.8/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
 940:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 941:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 942:/usr/include/c++/4.8/bits/stl_vector.h **** 
 943:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 944:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 945:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
 946:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 947:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __args  Arguments.
 948:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 949:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 950:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
 951:/usr/include/c++/4.8/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
 952:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
 953:/usr/include/c++/4.8/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
 954:/usr/include/c++/4.8/bits/stl_vector.h ****        *  std::list.
 955:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 956:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename... _Args>
 957:/usr/include/c++/4.8/bits/stl_vector.h ****         iterator
 958:/usr/include/c++/4.8/bits/stl_vector.h ****         emplace(iterator __position, _Args&&... __args);
 959:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 960:/usr/include/c++/4.8/bits/stl_vector.h **** 
 961:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 962:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 963:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 964:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 965:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 966:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 967:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 968:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 969:/usr/include/c++/4.8/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 970:/usr/include/c++/4.8/bits/stl_vector.h ****        *  used the user should consider using std::list.
 971:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 972:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 973:/usr/include/c++/4.8/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
 974:/usr/include/c++/4.8/bits/stl_vector.h **** 
 975:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 976:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 977:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
 978:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 979:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 980:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 981:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 982:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
 983:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 984:/usr/include/c++/4.8/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 985:/usr/include/c++/4.8/bits/stl_vector.h ****        *  used the user should consider using std::list.
 986:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 987:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 988:/usr/include/c++/4.8/bits/stl_vector.h ****       insert(iterator __position, value_type&& __x)
 989:/usr/include/c++/4.8/bits/stl_vector.h ****       { return emplace(__position, std::move(__x)); }
 990:/usr/include/c++/4.8/bits/stl_vector.h **** 
 991:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 992:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
 993:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 994:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 995:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 996:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert copies of the data in the 
 997:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
 998:/usr/include/c++/4.8/bits/stl_vector.h ****        *  specified by @a position.
 999:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1000:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1001:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1002:/usr/include/c++/4.8/bits/stl_vector.h ****        *  consider using std::list.
1003:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1004:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1005:/usr/include/c++/4.8/bits/stl_vector.h ****       insert(iterator __position, initializer_list<value_type> __l)
1006:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->insert(__position, __l.begin(), __l.end()); }
1007:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1008:/usr/include/c++/4.8/bits/stl_vector.h **** 
1009:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1010:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1011:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1012:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1013:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1014:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1015:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1016:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1017:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1018:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1019:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1020:/usr/include/c++/4.8/bits/stl_vector.h ****        *  consider using std::list.
1021:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1022:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1023:/usr/include/c++/4.8/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1024:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1025:/usr/include/c++/4.8/bits/stl_vector.h **** 
1026:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1027:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1028:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1029:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1030:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1031:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1032:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1033:/usr/include/c++/4.8/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1034:/usr/include/c++/4.8/bits/stl_vector.h ****        *  by @a pos.
1035:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1036:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1037:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1038:/usr/include/c++/4.8/bits/stl_vector.h ****        *  consider using std::list.
1039:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1040:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
1041:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator,
1042:/usr/include/c++/4.8/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1043:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1044:/usr/include/c++/4.8/bits/stl_vector.h ****         insert(iterator __position, _InputIterator __first,
1045:/usr/include/c++/4.8/bits/stl_vector.h **** 	       _InputIterator __last)
1046:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_insert_dispatch(__position, __first, __last, __false_type()); }
1047:/usr/include/c++/4.8/bits/stl_vector.h **** #else
1048:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1049:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1050:/usr/include/c++/4.8/bits/stl_vector.h ****         insert(iterator __position, _InputIterator __first,
1051:/usr/include/c++/4.8/bits/stl_vector.h **** 	       _InputIterator __last)
1052:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1053:/usr/include/c++/4.8/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1054:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1055:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1056:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1057:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1058:/usr/include/c++/4.8/bits/stl_vector.h **** 
1059:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1060:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1061:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1062:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1063:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1064:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1065:/usr/include/c++/4.8/bits/stl_vector.h ****        *  shorten the %vector by one.
1066:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1067:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1068:/usr/include/c++/4.8/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1069:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1070:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1071:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1072:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1073:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1074:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
1075:/usr/include/c++/4.8/bits/stl_vector.h ****       erase(iterator __position);
1076:/usr/include/c++/4.8/bits/stl_vector.h **** 
1077:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1078:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1079:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1080:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1081:/usr/include/c++/4.8/bits/stl_vector.h ****        *                  erased.
1082:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1083:/usr/include/c++/4.8/bits/stl_vector.h ****        *           prior to erasing (or end()).
1084:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1085:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will erase the elements in the range
1086:/usr/include/c++/4.8/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1087:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1088:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1089:/usr/include/c++/4.8/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1090:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1091:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1092:/usr/include/c++/4.8/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1093:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1094:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1095:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
1096:/usr/include/c++/4.8/bits/stl_vector.h ****       erase(iterator __first, iterator __last);
1097:/usr/include/c++/4.8/bits/stl_vector.h **** 
1098:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1099:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1100:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1101:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1102:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1103:/usr/include/c++/4.8/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1104:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1105:/usr/include/c++/4.8/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1106:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1107:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1108:/usr/include/c++/4.8/bits/stl_vector.h ****       swap(vector& __x)
1109:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
1110:/usr/include/c++/4.8/bits/stl_vector.h **** 			noexcept(_Alloc_traits::_S_nothrow_swap())
1111:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1112:/usr/include/c++/4.8/bits/stl_vector.h ****       {
1113:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1114:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1115:/usr/include/c++/4.8/bits/stl_vector.h **** 	                          __x._M_get_Tp_allocator());
1116:/usr/include/c++/4.8/bits/stl_vector.h ****       }
1117:/usr/include/c++/4.8/bits/stl_vector.h **** 
1118:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1119:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1120:/usr/include/c++/4.8/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1121:/usr/include/c++/4.8/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1122:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the user's responsibility.
1123:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1124:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1125:/usr/include/c++/4.8/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1126:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1127:/usr/include/c++/4.8/bits/stl_vector.h **** 
1128:/usr/include/c++/4.8/bits/stl_vector.h ****     protected:
1129:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1130:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1131:/usr/include/c++/4.8/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1132:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1133:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _ForwardIterator>
1134:/usr/include/c++/4.8/bits/stl_vector.h ****         pointer
1135:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_allocate_and_copy(size_type __n,
1136:/usr/include/c++/4.8/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1137:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1138:/usr/include/c++/4.8/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1139:/usr/include/c++/4.8/bits/stl_vector.h **** 	  __try
1140:/usr/include/c++/4.8/bits/stl_vector.h **** 	    {
1141:/usr/include/c++/4.8/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1142:/usr/include/c++/4.8/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1143:/usr/include/c++/4.8/bits/stl_vector.h **** 	      return __result;
1144:/usr/include/c++/4.8/bits/stl_vector.h **** 	    }
1145:/usr/include/c++/4.8/bits/stl_vector.h **** 	  __catch(...)
1146:/usr/include/c++/4.8/bits/stl_vector.h **** 	    {
1147:/usr/include/c++/4.8/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1148:/usr/include/c++/4.8/bits/stl_vector.h **** 	      __throw_exception_again;
1149:/usr/include/c++/4.8/bits/stl_vector.h **** 	    }
1150:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1151:/usr/include/c++/4.8/bits/stl_vector.h **** 
1152:/usr/include/c++/4.8/bits/stl_vector.h **** 
1153:/usr/include/c++/4.8/bits/stl_vector.h ****       // Internal constructor functions follow.
1154:/usr/include/c++/4.8/bits/stl_vector.h **** 
1155:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1156:/usr/include/c++/4.8/bits/stl_vector.h **** 
1157:/usr/include/c++/4.8/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1158:/usr/include/c++/4.8/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1159:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _Integer>
1160:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1161:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1162:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1163:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
1164:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1165:/usr/include/c++/4.8/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1166:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1167:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1168:/usr/include/c++/4.8/bits/stl_vector.h **** 
1169:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1170:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1171:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1172:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1173:/usr/include/c++/4.8/bits/stl_vector.h **** 			       __false_type)
1174:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1175:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1176:/usr/include/c++/4.8/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1177:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1178:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1179:/usr/include/c++/4.8/bits/stl_vector.h **** 
1180:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1181:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1182:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1183:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_range_initialize(_InputIterator __first,
1184:/usr/include/c++/4.8/bits/stl_vector.h **** 			    _InputIterator __last, std::input_iterator_tag)
1185:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1186:/usr/include/c++/4.8/bits/stl_vector.h **** 	  for (; __first != __last; ++__first)
1187:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
1188:/usr/include/c++/4.8/bits/stl_vector.h **** 	    emplace_back(*__first);
1189:/usr/include/c++/4.8/bits/stl_vector.h **** #else
1190:/usr/include/c++/4.8/bits/stl_vector.h **** 	    push_back(*__first);
1191:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1192:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1193:/usr/include/c++/4.8/bits/stl_vector.h **** 
1194:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1195:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _ForwardIterator>
1196:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1197:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_range_initialize(_ForwardIterator __first,
1198:/usr/include/c++/4.8/bits/stl_vector.h **** 			    _ForwardIterator __last, std::forward_iterator_tag)
1199:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1200:/usr/include/c++/4.8/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1201:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_start = this->_M_allocate(__n);
1202:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1203:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1204:/usr/include/c++/4.8/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1205:/usr/include/c++/4.8/bits/stl_vector.h **** 					this->_M_impl._M_start,
1206:/usr/include/c++/4.8/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1207:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1208:/usr/include/c++/4.8/bits/stl_vector.h **** 
1209:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1210:/usr/include/c++/4.8/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1211:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1212:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
 6275              		.loc 7 1212 0
 6276              		.cfi_startproc
 6277 0000 55       		pushq	%rbp
 6278              		.cfi_def_cfa_offset 16
 6279              		.cfi_offset 6, -16
 6280 0001 4889E5   		movq	%rsp, %rbp
 6281              		.cfi_def_cfa_register 6
 6282 0004 4883EC20 		subq	$32, %rsp
 6283 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6284 000c 488975F0 		movq	%rsi, -16(%rbp)
 6285 0010 488955E8 		movq	%rdx, -24(%rbp)
1213:/usr/include/c++/4.8/bits/stl_vector.h ****       {
1214:/usr/include/c++/4.8/bits/stl_vector.h **** 	std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value, 
1215:/usr/include/c++/4.8/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 6286              		.loc 7 1215 0
 6287 0014 488B45F8 		movq	-8(%rbp), %rax
 6288 0018 4889C7   		movq	%rax, %rdi
 6289 001b E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv
 6289      00
 6290 0020 4889C1   		movq	%rax, %rcx
 6291 0023 488B45F8 		movq	-8(%rbp), %rax
 6292 0027 488B00   		movq	(%rax), %rax
1214:/usr/include/c++/4.8/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 6293              		.loc 7 1214 0
 6294 002a 488B55E8 		movq	-24(%rbp), %rdx
 6295 002e 488B75F0 		movq	-16(%rbp), %rsi
 6296 0032 4889C7   		movq	%rax, %rdi
 6297 0035 E8000000 		call	_ZSt24__uninitialized_fill_n_aIPfmffEvT_T0_RKT1_RSaIT2_E
 6297      00
1216:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
 6298              		.loc 7 1216 0
 6299 003a 488B45F8 		movq	-8(%rbp), %rax
 6300 003e 488B5010 		movq	16(%rax), %rdx
 6301 0042 488B45F8 		movq	-8(%rbp), %rax
 6302 0046 48895008 		movq	%rdx, 8(%rax)
1217:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 6303              		.loc 7 1217 0
 6304 004a C9       		leave
 6305              		.cfi_def_cfa 7, 8
 6306 004b C3       		ret
 6307              		.cfi_endproc
 6308              	.LFE1476:
 6310              		.section	.text._ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_Vector_b
 6311              		.align 2
 6312              		.weak	_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv
 6314              	_ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv:
 6315              	.LFB1477:
 113:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 6316              		.loc 7 113 0
 6317              		.cfi_startproc
 6318 0000 55       		pushq	%rbp
 6319              		.cfi_def_cfa_offset 16
 6320              		.cfi_offset 6, -16
 6321 0001 4889E5   		movq	%rsp, %rbp
 6322              		.cfi_def_cfa_register 6
 6323 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6324              		.loc 7 114 0
 6325 0008 488B45F8 		movq	-8(%rbp), %rax
 6326 000c 5D       		popq	%rbp
 6327              		.cfi_def_cfa 7, 8
 6328 000d C3       		ret
 6329              		.cfi_endproc
 6330              	.LFE1477:
 6332              		.section	.text._ZSt8_DestroyIPffEvT_S1_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPffEvT_S1_RSaIT0_E,c
 6333              		.weak	_ZSt8_DestroyIPffEvT_S1_RSaIT0_E
 6335              	_ZSt8_DestroyIPffEvT_S1_RSaIT0_E:
 6336              	.LFB1478:
 6337              		.file 10 "/usr/include/c++/4.8/bits/stl_construct.h"
   1:/usr/include/c++/4.8/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_construct.h **** 
   3:/usr/include/c++/4.8/bits/stl_construct.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_construct.h **** //
   5:/usr/include/c++/4.8/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_construct.h **** 
  11:/usr/include/c++/4.8/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_construct.h **** 
  16:/usr/include/c++/4.8/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_construct.h **** 
  20:/usr/include/c++/4.8/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_construct.h **** 
  25:/usr/include/c++/4.8/bits/stl_construct.h **** /*
  26:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  27:/usr/include/c++/4.8/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  30:/usr/include/c++/4.8/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  38:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  39:/usr/include/c++/4.8/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.8/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  42:/usr/include/c++/4.8/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_construct.h ****  */
  50:/usr/include/c++/4.8/bits/stl_construct.h **** 
  51:/usr/include/c++/4.8/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/4.8/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/4.8/bits/stl_construct.h ****  */
  55:/usr/include/c++/4.8/bits/stl_construct.h **** 
  56:/usr/include/c++/4.8/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/4.8/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/4.8/bits/stl_construct.h **** 
  59:/usr/include/c++/4.8/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/4.8/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/4.8/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/4.8/bits/stl_construct.h **** 
  63:/usr/include/c++/4.8/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/4.8/bits/stl_construct.h **** {
  65:/usr/include/c++/4.8/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/4.8/bits/stl_construct.h **** 
  67:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
  68:/usr/include/c++/4.8/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/4.8/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/4.8/bits/stl_construct.h ****    */
  71:/usr/include/c++/4.8/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/4.8/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/4.8/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/4.8/bits/stl_construct.h **** #else
  77:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/4.8/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/4.8/bits/stl_construct.h ****     {
  81:/usr/include/c++/4.8/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/4.8/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/4.8/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/4.8/bits/stl_construct.h ****     }
  85:/usr/include/c++/4.8/bits/stl_construct.h **** #endif
  86:/usr/include/c++/4.8/bits/stl_construct.h **** 
  87:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
  88:/usr/include/c++/4.8/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:/usr/include/c++/4.8/bits/stl_construct.h ****    */
  90:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _Tp>
  91:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
  92:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:/usr/include/c++/4.8/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  94:/usr/include/c++/4.8/bits/stl_construct.h **** 
  95:/usr/include/c++/4.8/bits/stl_construct.h ****   template<bool>
  96:/usr/include/c++/4.8/bits/stl_construct.h ****     struct _Destroy_aux
  97:/usr/include/c++/4.8/bits/stl_construct.h ****     {
  98:/usr/include/c++/4.8/bits/stl_construct.h ****       template<typename _ForwardIterator>
  99:/usr/include/c++/4.8/bits/stl_construct.h ****         static void
 100:/usr/include/c++/4.8/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:/usr/include/c++/4.8/bits/stl_construct.h **** 	{
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 103:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 104:/usr/include/c++/4.8/bits/stl_construct.h **** 	}
 105:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 106:/usr/include/c++/4.8/bits/stl_construct.h **** 
 107:/usr/include/c++/4.8/bits/stl_construct.h ****   template<>
 108:/usr/include/c++/4.8/bits/stl_construct.h ****     struct _Destroy_aux<true>
 109:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 110:/usr/include/c++/4.8/bits/stl_construct.h ****       template<typename _ForwardIterator>
 111:/usr/include/c++/4.8/bits/stl_construct.h ****         static void
 112:/usr/include/c++/4.8/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 113:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 114:/usr/include/c++/4.8/bits/stl_construct.h **** 
 115:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
 116:/usr/include/c++/4.8/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 117:/usr/include/c++/4.8/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 118:/usr/include/c++/4.8/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 119:/usr/include/c++/4.8/bits/stl_construct.h ****    */
 120:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _ForwardIterator>
 121:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
 122:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 123:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 124:/usr/include/c++/4.8/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 125:/usr/include/c++/4.8/bits/stl_construct.h ****                        _Value_type;
 126:/usr/include/c++/4.8/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 127:/usr/include/c++/4.8/bits/stl_construct.h **** 	__destroy(__first, __last);
 128:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 129:/usr/include/c++/4.8/bits/stl_construct.h **** 
 130:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
 131:/usr/include/c++/4.8/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 132:/usr/include/c++/4.8/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 133:/usr/include/c++/4.8/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 134:/usr/include/c++/4.8/bits/stl_construct.h ****    */
 135:/usr/include/c++/4.8/bits/stl_construct.h **** 
 136:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 137:/usr/include/c++/4.8/bits/stl_construct.h ****     void
 138:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 139:/usr/include/c++/4.8/bits/stl_construct.h **** 	     _Allocator& __alloc)
 140:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 141:/usr/include/c++/4.8/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 142:/usr/include/c++/4.8/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 143:/usr/include/c++/4.8/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 144:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 145:/usr/include/c++/4.8/bits/stl_construct.h **** 
 146:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
 148:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 6338              		.loc 10 148 0
 6339              		.cfi_startproc
 6340 0000 55       		pushq	%rbp
 6341              		.cfi_def_cfa_offset 16
 6342              		.cfi_offset 6, -16
 6343 0001 4889E5   		movq	%rsp, %rbp
 6344              		.cfi_def_cfa_register 6
 6345 0004 4883EC20 		subq	$32, %rsp
 6346 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6347 000c 488975F0 		movq	%rsi, -16(%rbp)
 6348 0010 488955E8 		movq	%rdx, -24(%rbp)
 149:/usr/include/c++/4.8/bits/stl_construct.h **** 	     allocator<_Tp>&)
 150:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 151:/usr/include/c++/4.8/bits/stl_construct.h ****       _Destroy(__first, __last);
 6349              		.loc 10 151 0
 6350 0014 488B55F0 		movq	-16(%rbp), %rdx
 6351 0018 488B45F8 		movq	-8(%rbp), %rax
 6352 001c 4889D6   		movq	%rdx, %rsi
 6353 001f 4889C7   		movq	%rax, %rdi
 6354 0022 E8000000 		call	_ZSt8_DestroyIPfEvT_S1_
 6354      00
 152:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 6355              		.loc 10 152 0
 6356 0027 C9       		leave
 6357              		.cfi_def_cfa 7, 8
 6358 0028 C3       		ret
 6359              		.cfi_endproc
 6360              	.LFE1478:
 6362              		.section	.text._ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_,"axG",@progbits
 6363              		.weak	_ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_
 6365              	_ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_:
 6366              	.LFB1479:
  87:../Checks.h   **** {
 6367              		.loc 5 87 0
 6368              		.cfi_startproc
 6369 0000 55       		pushq	%rbp
 6370              		.cfi_def_cfa_offset 16
 6371              		.cfi_offset 6, -16
 6372 0001 4889E5   		movq	%rsp, %rbp
 6373              		.cfi_def_cfa_register 6
 6374 0004 53       		pushq	%rbx
 6375 0005 4883EC38 		subq	$56, %rsp
 6376              		.cfi_offset 3, -24
 6377 0009 48897DD8 		movq	%rdi, -40(%rbp)
 6378 000d 488975D0 		movq	%rsi, -48(%rbp)
 6379 0011 8955CC   		movl	%edx, -52(%rbp)
 6380 0014 48894DC0 		movq	%rcx, -64(%rbp)
 6381              	.LBB140:
  89:../Checks.h   ****     for (int i = 0; i < count; ++i)
 6382              		.loc 5 89 0
 6383 0018 C645EB01 		movb	$1, -21(%rbp)
 6384              	.LBB141:
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 6385              		.loc 5 90 0
 6386 001c C745EC00 		movl	$0, -20(%rbp)
 6386      000000
 6387 0023 EB51     		jmp	.L335
 6388              	.L336:
  91:../Checks.h   ****     return equal;
 6389              		.loc 5 91 0 discriminator 2
 6390 0025 8B45EC   		movl	-20(%rbp), %eax
 6391 0028 4863D0   		movslq	%eax, %rdx
 6392 002b 488B45D0 		movq	-48(%rbp), %rax
 6393 002f 4889D6   		movq	%rdx, %rsi
 6394 0032 4889C7   		movq	%rax, %rdi
 6395 0035 E8000000 		call	_ZNKSt6vectorIfSaIfEEixEm
 6395      00
 6396 003a 4889C3   		movq	%rax, %rbx
 6397 003d 8B45EC   		movl	-20(%rbp), %eax
 6398 0040 4863D0   		movslq	%eax, %rdx
 6399 0043 488B45D8 		movq	-40(%rbp), %rax
 6400 0047 4889D6   		movq	%rdx, %rsi
 6401 004a 4889C7   		movq	%rax, %rdi
 6402 004d E8000000 		call	_ZNKSt6vectorIfSaIfEEixEm
 6402      00
 6403 0052 488B55C0 		movq	-64(%rbp), %rdx
 6404 0056 4889DE   		movq	%rbx, %rsi
 6405 0059 4889C7   		movq	%rax, %rdi
 6406 005c E8000000 		call	_ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
 6406      00
 6407 0061 0FB655EB 		movzbl	-21(%rbp), %edx
 6408 0065 0FB6C0   		movzbl	%al, %eax
 6409 0068 21D0     		andl	%edx, %eax
 6410 006a 85C0     		testl	%eax, %eax
 6411 006c 0F95C0   		setne	%al
 6412 006f 8845EB   		movb	%al, -21(%rbp)
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 6413              		.loc 5 90 0 discriminator 2
 6414 0072 8345EC01 		addl	$1, -20(%rbp)
 6415              	.L335:
  90:../Checks.h   ****         equal &= AreClose(expected[i], actual[i], tolerance);
 6416              		.loc 5 90 0 is_stmt 0 discriminator 1
 6417 0076 8B45EC   		movl	-20(%rbp), %eax
 6418 0079 3B45CC   		cmpl	-52(%rbp), %eax
 6419 007c 7CA7     		jl	.L336
 6420              	.LBE141:
  92:../Checks.h   **** }
 6421              		.loc 5 92 0 is_stmt 1
 6422 007e 0FB645EB 		movzbl	-21(%rbp), %eax
 6423              	.LBE140:
  93:../Checks.h   **** 
 6424              		.loc 5 93 0
 6425 0082 4883C438 		addq	$56, %rsp
 6426 0086 5B       		popq	%rbx
 6427 0087 5D       		popq	%rbp
 6428              		.cfi_def_cfa 7, 8
 6429 0088 C3       		ret
 6430              		.cfi_endproc
 6431              	.LFE1479:
 6433              		.section	.text._ZNKSt6vectorIfSaIfEEixEm,"axG",@progbits,_ZNKSt6vectorIfSaIfEEixEm,comdat
 6434              		.align 2
 6435              		.weak	_ZNKSt6vectorIfSaIfEEixEm
 6437              	_ZNKSt6vectorIfSaIfEEixEm:
 6438              	.LFB1480:
 785:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 6439              		.loc 7 785 0
 6440              		.cfi_startproc
 6441 0000 55       		pushq	%rbp
 6442              		.cfi_def_cfa_offset 16
 6443              		.cfi_offset 6, -16
 6444 0001 4889E5   		movq	%rsp, %rbp
 6445              		.cfi_def_cfa_register 6
 6446 0004 48897DF8 		movq	%rdi, -8(%rbp)
 6447 0008 488975F0 		movq	%rsi, -16(%rbp)
 786:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6448              		.loc 7 786 0
 6449 000c 488B45F8 		movq	-8(%rbp), %rax
 6450 0010 488B00   		movq	(%rax), %rax
 6451 0013 488B55F0 		movq	-16(%rbp), %rdx
 6452 0017 48C1E202 		salq	$2, %rdx
 6453 001b 4801D0   		addq	%rdx, %rax
 6454 001e 5D       		popq	%rbp
 6455              		.cfi_def_cfa 7, 8
 6456 001f C3       		ret
 6457              		.cfi_endproc
 6458              	.LFE1480:
 6460              		.section	.text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_,"axG",@progbits,_ZNSt12_Vector_ba
 6461              		.align 2
 6462              		.weak	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_
 6464              	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_:
 6465              	.LFB1498:
  90:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 6466              		.loc 7 90 0
 6467              		.cfi_startproc
 6468 0000 55       		pushq	%rbp
 6469              		.cfi_def_cfa_offset 16
 6470              		.cfi_offset 6, -16
 6471 0001 4889E5   		movq	%rsp, %rbp
 6472              		.cfi_def_cfa_register 6
 6473 0004 4883EC10 		subq	$16, %rsp
 6474 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6475 000c 488975F0 		movq	%rsi, -16(%rbp)
 6476              	.LBB142:
  91:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
 6477              		.loc 7 91 0
 6478 0010 488B55F0 		movq	-16(%rbp), %rdx
 6479 0014 488B45F8 		movq	-8(%rbp), %rax
 6480 0018 4889D6   		movq	%rdx, %rsi
 6481 001b 4889C7   		movq	%rax, %rdi
 6482 001e E8000000 		call	_ZNSaIfEC2ERKS_
 6482      00
 6483 0023 488B45F8 		movq	-8(%rbp), %rax
 6484 0027 48C70000 		movq	$0, (%rax)
 6484      000000
 6485 002e 488B45F8 		movq	-8(%rbp), %rax
 6486 0032 48C74008 		movq	$0, 8(%rax)
 6486      00000000 
 6487 003a 488B45F8 		movq	-8(%rbp), %rax
 6488 003e 48C74010 		movq	$0, 16(%rax)
 6488      00000000 
 6489              	.LBE142:
  92:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6490              		.loc 7 92 0
 6491 0046 C9       		leave
 6492              		.cfi_def_cfa 7, 8
 6493 0047 C3       		ret
 6494              		.cfi_endproc
 6495              	.LFE1498:
 6497              		.weak	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_
 6498              		.set	_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_,_ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2
 6499              		.section	.text._ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm,"axG",@progbits,_ZNSt12_Vector_bas
 6500              		.align 2
 6501              		.weak	_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm
 6503              	_ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm:
 6504              	.LFB1500:
 179:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 6505              		.loc 7 179 0
 6506              		.cfi_startproc
 6507 0000 55       		pushq	%rbp
 6508              		.cfi_def_cfa_offset 16
 6509              		.cfi_offset 6, -16
 6510 0001 4889E5   		movq	%rsp, %rbp
 6511              		.cfi_def_cfa_register 6
 6512 0004 4883EC10 		subq	$16, %rsp
 6513 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6514 000c 488975F0 		movq	%rsi, -16(%rbp)
 181:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 6515              		.loc 7 181 0
 6516 0010 488B55F0 		movq	-16(%rbp), %rdx
 6517 0014 488B45F8 		movq	-8(%rbp), %rax
 6518 0018 4889D6   		movq	%rdx, %rsi
 6519 001b 4889C7   		movq	%rax, %rdi
 6520 001e E8000000 		call	_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm
 6520      00
 6521 0023 488B55F8 		movq	-8(%rbp), %rdx
 6522 0027 488902   		movq	%rax, (%rdx)
 182:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 6523              		.loc 7 182 0
 6524 002a 488B45F8 		movq	-8(%rbp), %rax
 6525 002e 488B10   		movq	(%rax), %rdx
 6526 0031 488B45F8 		movq	-8(%rbp), %rax
 6527 0035 48895008 		movq	%rdx, 8(%rax)
 183:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 6528              		.loc 7 183 0
 6529 0039 488B45F8 		movq	-8(%rbp), %rax
 6530 003d 488B00   		movq	(%rax), %rax
 6531 0040 488B55F0 		movq	-16(%rbp), %rdx
 6532 0044 48C1E202 		salq	$2, %rdx
 6533 0048 4801C2   		addq	%rax, %rdx
 6534 004b 488B45F8 		movq	-8(%rbp), %rax
 6535 004f 48895010 		movq	%rdx, 16(%rax)
 184:/usr/include/c++/4.8/bits/stl_vector.h ****     };
 6536              		.loc 7 184 0
 6537 0053 C9       		leave
 6538              		.cfi_def_cfa 7, 8
 6539 0054 C3       		ret
 6540              		.cfi_endproc
 6541              	.LFE1500:
 6543              		.section	.text._ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm,"axG",@progbits,_ZNSt12_Vector_baseI
 6544              		.align 2
 6545              		.weak	_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm
 6547              	_ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm:
 6548              	.LFB1501:
 171:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 6549              		.loc 7 171 0
 6550              		.cfi_startproc
 6551 0000 55       		pushq	%rbp
 6552              		.cfi_def_cfa_offset 16
 6553              		.cfi_offset 6, -16
 6554 0001 4889E5   		movq	%rsp, %rbp
 6555              		.cfi_def_cfa_register 6
 6556 0004 4883EC20 		subq	$32, %rsp
 6557 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6558 000c 488975F0 		movq	%rsi, -16(%rbp)
 6559 0010 488955E8 		movq	%rdx, -24(%rbp)
 173:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 6560              		.loc 7 173 0
 6561 0014 48837DF0 		cmpq	$0, -16(%rbp)
 6561      00
 6562 0019 7417     		je	.L342
 174:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 6563              		.loc 7 174 0
 6564 001b 488B45F8 		movq	-8(%rbp), %rax
 6565 001f 488B55E8 		movq	-24(%rbp), %rdx
 6566 0023 488B4DF0 		movq	-16(%rbp), %rcx
 6567 0027 4889CE   		movq	%rcx, %rsi
 6568 002a 4889C7   		movq	%rax, %rdi
 6569 002d E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm
 6569      00
 6570              	.L342:
 175:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6571              		.loc 7 175 0
 6572 0032 C9       		leave
 6573              		.cfi_def_cfa 7, 8
 6574 0033 C3       		ret
 6575              		.cfi_endproc
 6576              	.LFE1501:
 6578              		.section	.text._ZSt24__uninitialized_fill_n_aIPfmffEvT_T0_RKT1_RSaIT2_E,"axG",@progbits,_ZSt24__un
 6579              		.weak	_ZSt24__uninitialized_fill_n_aIPfmffEvT_T0_RKT1_RSaIT2_E
 6581              	_ZSt24__uninitialized_fill_n_aIPfmffEvT_T0_RKT1_RSaIT2_E:
 6582              	.LFB1502:
 6583              		.file 11 "/usr/include/c++/4.8/bits/stl_uninitialized.h"
   1:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_uninitialized.h **** //
   5:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  11:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  16:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  20:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  25:/usr/include/c++/4.8/bits/stl_uninitialized.h **** /*
  26:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  27:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  30:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  38:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  39:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  42:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  */
  50:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  51:/usr/include/c++/4.8/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  */
  55:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  56:/usr/include/c++/4.8/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/c++/4.8/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  59:/usr/include/c++/4.8/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/4.8/bits/stl_uninitialized.h **** {
  61:/usr/include/c++/4.8/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  63:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  64:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  65:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
  66:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  67:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static _ForwardIterator
  68:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  69:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  70:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         {
  71:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  72:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __try
  73:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, ++__cur)
  75:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  76:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      return __cur;
  77:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
  78:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __catch(...)
  79:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
  80:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  81:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  82:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
  83:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
  84:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
  85:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  86:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<>
  87:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
  88:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
  89:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  90:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static _ForwardIterator
  91:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  92:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  93:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
  94:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
  95:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  96:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   /**
  97:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
  98:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
  99:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 100:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 101:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 102:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *
 103:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 104:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   */
 105:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 106:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline _ForwardIterator
 107:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 108:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 109:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 110:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 111:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	_ValueType1;
 112:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 113:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	_ValueType2;
 114:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 115:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<(__is_trivial(_ValueType1)
 116:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 					&& __is_trivial(_ValueType2))>::
 117:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 118:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 119:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 120:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 121:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 122:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 123:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 124:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 125:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static void
 126:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 127:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 128:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         {
 129:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 130:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __try
 131:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 132:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 133:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 134:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 135:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __catch(...)
 136:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 137:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 138:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 139:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 140:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 141:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 142:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 143:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<>
 144:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 145:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 146:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static void
 148:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 149:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 150:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 151:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 152:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 153:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   /**
 154:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 155:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 156:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 157:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 158:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @return   Nothing.
 159:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *
 160:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 161:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   */
 162:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 163:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline void
 164:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 165:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 166:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 167:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 168:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	_ValueType;
 169:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 170:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType)>::
 171:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 172:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 173:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 174:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 175:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 176:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 177:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 178:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 179:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static void
 180:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 181:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			const _Tp& __x)
 182:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         {
 183:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 184:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __try
 185:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 186:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, ++__cur)
 187:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 188:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 189:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __catch(...)
 190:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 191:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 192:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 193:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 194:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 195:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 196:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 197:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<>
 198:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 199:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 200:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 201:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static void
 202:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 203:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			const _Tp& __x)
 204:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         { std::fill_n(__first, __n, __x); }
 205:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 206:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 207:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   /**
 208:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 209:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 210:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 211:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 212:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @return   Nothing.
 213:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *
 214:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 215:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   */
 216:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 217:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline void
 218:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 219:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 220:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 221:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	_ValueType;
 222:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 223:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 224:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 225:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 226:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 227:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 228:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 229:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 230:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 231:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 232:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 233:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 234:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	   typename _Allocator>
 235:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     _ForwardIterator
 236:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 237:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 238:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 239:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 240:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       __try
 241:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	{
 242:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 243:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, ++__cur)
 244:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 245:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  return __cur;
 246:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 247:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       __catch(...)
 248:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	{
 249:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 250:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 251:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 252:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 253:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 254:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 255:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline _ForwardIterator
 256:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 257:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 258:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 259:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 260:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 261:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	   typename _Allocator>
 262:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline _ForwardIterator
 263:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 264:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 265:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 266:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 267:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 268:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 					 __result, __alloc);
 269:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 270:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 271:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 272:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	   typename _Allocator>
 273:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline _ForwardIterator
 274:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 275:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 276:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 277:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 278:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 279:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 280:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 281:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 282:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 283:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 284:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Allocator>
 285:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     void
 286:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 287:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   const _Tp& __x, _Allocator& __alloc)
 288:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 289:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 290:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       __try
 291:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	{
 292:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 293:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  for (; __cur != __last; ++__cur)
 294:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 295:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 296:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       __catch(...)
 297:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	{
 298:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 299:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 300:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 301:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 302:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 303:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp, typename _Tp2>
 304:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline void
 305:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
 306:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   const _Tp& __x, allocator<_Tp2>&)
 307:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     { std::uninitialized_fill(__first, __last, __x); }
 308:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 309:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 310:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	   typename _Allocator>
 311:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     void
 312:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 313:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			     const _Tp& __x, _Allocator& __alloc)
 314:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 315:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __first;
 316:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       __try
 317:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	{
 318:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 319:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  for (; __n > 0; --__n, ++__cur)
 320:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), __x);
 321:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 322:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       __catch(...)
 323:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	{
 324:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  std::_Destroy(__first, __cur, __alloc);
 325:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 326:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 327:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 328:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 329:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp,
 330:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	   typename _Tp2>
 331:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline void
 332:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 6584              		.loc 11 332 0
 6585              		.cfi_startproc
 6586 0000 55       		pushq	%rbp
 6587              		.cfi_def_cfa_offset 16
 6588              		.cfi_offset 6, -16
 6589 0001 4889E5   		movq	%rsp, %rbp
 6590              		.cfi_def_cfa_register 6
 6591 0004 4883EC20 		subq	$32, %rsp
 6592 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6593 000c 488975F0 		movq	%rsi, -16(%rbp)
 6594 0010 488955E8 		movq	%rdx, -24(%rbp)
 6595 0014 48894DE0 		movq	%rcx, -32(%rbp)
 333:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			     const _Tp& __x, allocator<_Tp2>&)
 334:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     { std::uninitialized_fill_n(__first, __n, __x); }
 6596              		.loc 11 334 0
 6597 0018 488B55E8 		movq	-24(%rbp), %rdx
 6598 001c 488B4DF0 		movq	-16(%rbp), %rcx
 6599 0020 488B45F8 		movq	-8(%rbp), %rax
 6600 0024 4889CE   		movq	%rcx, %rsi
 6601 0027 4889C7   		movq	%rax, %rdi
 6602 002a E8000000 		call	_ZSt20uninitialized_fill_nIPfmfEvT_T0_RKT1_
 6602      00
 6603 002f C9       		leave
 6604              		.cfi_def_cfa 7, 8
 6605 0030 C3       		ret
 6606              		.cfi_endproc
 6607              	.LFE1502:
 6609              		.section	.text._ZSt8_DestroyIPfEvT_S1_,"axG",@progbits,_ZSt8_DestroyIPfEvT_S1_,comdat
 6610              		.weak	_ZSt8_DestroyIPfEvT_S1_
 6612              	_ZSt8_DestroyIPfEvT_S1_:
 6613              	.LFB1503:
 122:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 6614              		.loc 10 122 0
 6615              		.cfi_startproc
 6616 0000 55       		pushq	%rbp
 6617              		.cfi_def_cfa_offset 16
 6618              		.cfi_offset 6, -16
 6619 0001 4889E5   		movq	%rsp, %rbp
 6620              		.cfi_def_cfa_register 6
 6621 0004 4883EC10 		subq	$16, %rsp
 6622 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6623 000c 488975F0 		movq	%rsi, -16(%rbp)
 6624              	.LBB143:
 126:/usr/include/c++/4.8/bits/stl_construct.h **** 	__destroy(__first, __last);
 6625              		.loc 10 126 0
 6626 0010 488B55F0 		movq	-16(%rbp), %rdx
 6627 0014 488B45F8 		movq	-8(%rbp), %rax
 6628 0018 4889D6   		movq	%rdx, %rsi
 6629 001b 4889C7   		movq	%rax, %rdi
 6630 001e E8000000 		call	_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_
 6630      00
 6631              	.LBE143:
 128:/usr/include/c++/4.8/bits/stl_construct.h **** 
 6632              		.loc 10 128 0
 6633 0023 C9       		leave
 6634              		.cfi_def_cfa 7, 8
 6635 0024 C3       		ret
 6636              		.cfi_endproc
 6637              	.LFE1503:
 6639              		.section	.text._ZNSaIfEC2ERKS_,"axG",@progbits,_ZNSaIfEC5ERKS_,comdat
 6640              		.align 2
 6641              		.weak	_ZNSaIfEC2ERKS_
 6643              	_ZNSaIfEC2ERKS_:
 6644              	.LFB1509:
 115:/usr/include/c++/4.8/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 6645              		.loc 6 115 0
 6646              		.cfi_startproc
 6647 0000 55       		pushq	%rbp
 6648              		.cfi_def_cfa_offset 16
 6649              		.cfi_offset 6, -16
 6650 0001 4889E5   		movq	%rsp, %rbp
 6651              		.cfi_def_cfa_register 6
 6652 0004 4883EC10 		subq	$16, %rsp
 6653 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6654 000c 488975F0 		movq	%rsi, -16(%rbp)
 6655              	.LBB144:
 116:/usr/include/c++/4.8/bits/allocator.h **** 
 6656              		.loc 6 116 0
 6657 0010 488B55F0 		movq	-16(%rbp), %rdx
 6658 0014 488B45F8 		movq	-8(%rbp), %rax
 6659 0018 4889D6   		movq	%rdx, %rsi
 6660 001b 4889C7   		movq	%rax, %rdi
 6661 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_
 6661      00
 6662              	.LBE144:
 6663 0023 C9       		leave
 6664              		.cfi_def_cfa 7, 8
 6665 0024 C3       		ret
 6666              		.cfi_endproc
 6667              	.LFE1509:
 6669              		.weak	_ZNSaIfEC1ERKS_
 6670              		.set	_ZNSaIfEC1ERKS_,_ZNSaIfEC2ERKS_
 6671              		.section	.text._ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vector_baseIfSaI
 6672              		.align 2
 6673              		.weak	_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm
 6675              	_ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm:
 6676              	.LFB1511:
 167:/usr/include/c++/4.8/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 6677              		.loc 7 167 0
 6678              		.cfi_startproc
 6679 0000 55       		pushq	%rbp
 6680              		.cfi_def_cfa_offset 16
 6681              		.cfi_offset 6, -16
 6682 0001 4889E5   		movq	%rsp, %rbp
 6683              		.cfi_def_cfa_register 6
 6684 0004 4883EC10 		subq	$16, %rsp
 6685 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6686 000c 488975F0 		movq	%rsi, -16(%rbp)
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6687              		.loc 7 168 0
 6688 0010 48837DF0 		cmpq	$0, -16(%rbp)
 6688      00
 6689 0015 741A     		je	.L348
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6690              		.loc 7 168 0 is_stmt 0 discriminator 1
 6691 0017 488B45F8 		movq	-8(%rbp), %rax
 6692 001b 488B4DF0 		movq	-16(%rbp), %rcx
 6693 001f BA000000 		movl	$0, %edx
 6693      00
 6694 0024 4889CE   		movq	%rcx, %rsi
 6695 0027 4889C7   		movq	%rax, %rdi
 6696 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv
 6696      00
 6697 002f EB05     		jmp	.L349
 6698              	.L348:
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6699              		.loc 7 168 0 discriminator 2
 6700 0031 B8000000 		movl	$0, %eax
 6700      00
 6701              	.L349:
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6702              		.loc 7 168 0 discriminator 3
 6703 0036 C9       		leave
 6704              		.cfi_def_cfa 7, 8
 6705 0037 C3       		ret
 6706              		.cfi_endproc
 6707              	.LFE1511:
 6709              		.section	.text._ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm,"axG",@progbits,_ZN9__gnu_cxx13new_
 6710              		.align 2
 6711              		.weak	_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm
 6713              	_ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm:
 6714              	.LFB1512:
  87:/usr/include/c++/4.8/ext/new_allocator.h **** 
  88:/usr/include/c++/4.8/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/4.8/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/4.8/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/4.8/ext/new_allocator.h **** 
  92:/usr/include/c++/4.8/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/4.8/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/4.8/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/4.8/ext/new_allocator.h **** 
  96:/usr/include/c++/4.8/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/4.8/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/4.8/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/4.8/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/4.8/ext/new_allocator.h ****       { 
 101:/usr/include/c++/4.8/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/4.8/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/4.8/ext/new_allocator.h **** 
 104:/usr/include/c++/4.8/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:/usr/include/c++/4.8/ext/new_allocator.h ****       }
 106:/usr/include/c++/4.8/ext/new_allocator.h **** 
 107:/usr/include/c++/4.8/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/4.8/ext/new_allocator.h ****       void
 109:/usr/include/c++/4.8/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 6715              		.loc 9 109 0 is_stmt 1
 6716              		.cfi_startproc
 6717 0000 55       		pushq	%rbp
 6718              		.cfi_def_cfa_offset 16
 6719              		.cfi_offset 6, -16
 6720 0001 4889E5   		movq	%rsp, %rbp
 6721              		.cfi_def_cfa_register 6
 6722 0004 4883EC20 		subq	$32, %rsp
 6723 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6724 000c 488975F0 		movq	%rsi, -16(%rbp)
 6725 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/4.8/ext/new_allocator.h ****       { ::operator delete(__p); }
 6726              		.loc 9 110 0
 6727 0014 488B45F0 		movq	-16(%rbp), %rax
 6728 0018 4889C7   		movq	%rax, %rdi
 6729 001b E8000000 		call	_ZdlPv
 6729      00
 6730 0020 C9       		leave
 6731              		.cfi_def_cfa 7, 8
 6732 0021 C3       		ret
 6733              		.cfi_endproc
 6734              	.LFE1512:
 6736              		.section	.text._ZSt20uninitialized_fill_nIPfmfEvT_T0_RKT1_,"axG",@progbits,_ZSt20uninitialized_fil
 6737              		.weak	_ZSt20uninitialized_fill_nIPfmfEvT_T0_RKT1_
 6739              	_ZSt20uninitialized_fill_nIPfmfEvT_T0_RKT1_:
 6740              	.LFB1513:
 218:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 6741              		.loc 11 218 0
 6742              		.cfi_startproc
 6743 0000 55       		pushq	%rbp
 6744              		.cfi_def_cfa_offset 16
 6745              		.cfi_offset 6, -16
 6746 0001 4889E5   		movq	%rsp, %rbp
 6747              		.cfi_def_cfa_register 6
 6748 0004 4883EC20 		subq	$32, %rsp
 6749 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6750 000c 488975F0 		movq	%rsi, -16(%rbp)
 6751 0010 488955E8 		movq	%rdx, -24(%rbp)
 6752              	.LBB145:
 223:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 6753              		.loc 11 223 0
 6754 0014 488B55E8 		movq	-24(%rbp), %rdx
 6755 0018 488B4DF0 		movq	-16(%rbp), %rcx
 6756 001c 488B45F8 		movq	-8(%rbp), %rax
 6757 0020 4889CE   		movq	%rcx, %rsi
 6758 0023 4889C7   		movq	%rax, %rdi
 6759 0026 E8000000 		call	_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEEvT_T0_RKT1_
 6759      00
 6760              	.LBE145:
 225:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 6761              		.loc 11 225 0
 6762 002b C9       		leave
 6763              		.cfi_def_cfa 7, 8
 6764 002c C3       		ret
 6765              		.cfi_endproc
 6766              	.LFE1513:
 6768              		.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_,"axG",@progbits,_ZNSt12_Destroy_auxI
 6769              		.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_
 6771              	_ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_:
 6772              	.LFB1514:
 112:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 6773              		.loc 10 112 0
 6774              		.cfi_startproc
 6775 0000 55       		pushq	%rbp
 6776              		.cfi_def_cfa_offset 16
 6777              		.cfi_offset 6, -16
 6778 0001 4889E5   		movq	%rsp, %rbp
 6779              		.cfi_def_cfa_register 6
 6780 0004 48897DF8 		movq	%rdi, -8(%rbp)
 6781 0008 488975F0 		movq	%rsi, -16(%rbp)
 112:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 6782              		.loc 10 112 0
 6783 000c 5D       		popq	%rbp
 6784              		.cfi_def_cfa 7, 8
 6785 000d C3       		ret
 6786              		.cfi_endproc
 6787              	.LFE1514:
 6789              		.section	.text._ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_,"axG",@progbits,_ZN9__gnu_cxx13new_allocato
 6790              		.align 2
 6791              		.weak	_ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_
 6793              	_ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_:
 6794              	.LFB1516:
  81:/usr/include/c++/4.8/ext/new_allocator.h **** 
 6795              		.loc 9 81 0
 6796              		.cfi_startproc
 6797 0000 55       		pushq	%rbp
 6798              		.cfi_def_cfa_offset 16
 6799              		.cfi_offset 6, -16
 6800 0001 4889E5   		movq	%rsp, %rbp
 6801              		.cfi_def_cfa_register 6
 6802 0004 48897DF8 		movq	%rdi, -8(%rbp)
 6803 0008 488975F0 		movq	%rsi, -16(%rbp)
  81:/usr/include/c++/4.8/ext/new_allocator.h **** 
 6804              		.loc 9 81 0
 6805 000c 5D       		popq	%rbp
 6806              		.cfi_def_cfa 7, 8
 6807 000d C3       		ret
 6808              		.cfi_endproc
 6809              	.LFE1516:
 6811              		.weak	_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_
 6812              		.set	_ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_,_ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_
 6813              		.section	.text._ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_cxx13new_al
 6814              		.align 2
 6815              		.weak	_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv
 6817              	_ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv:
 6818              	.LFB1518:
  99:/usr/include/c++/4.8/ext/new_allocator.h ****       { 
 6819              		.loc 9 99 0
 6820              		.cfi_startproc
 6821 0000 55       		pushq	%rbp
 6822              		.cfi_def_cfa_offset 16
 6823              		.cfi_offset 6, -16
 6824 0001 4889E5   		movq	%rsp, %rbp
 6825              		.cfi_def_cfa_register 6
 6826 0004 4883EC20 		subq	$32, %rsp
 6827 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6828 000c 488975F0 		movq	%rsi, -16(%rbp)
 6829 0010 488955E8 		movq	%rdx, -24(%rbp)
 101:/usr/include/c++/4.8/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 6830              		.loc 9 101 0
 6831 0014 488B45F8 		movq	-8(%rbp), %rax
 6832 0018 4889C7   		movq	%rax, %rdi
 6833 001b E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv
 6833      00
 6834 0020 483B45F0 		cmpq	-16(%rbp), %rax
 6835 0024 0F92C0   		setb	%al
 6836 0027 84C0     		testb	%al, %al
 6837 0029 7405     		je	.L356
 102:/usr/include/c++/4.8/ext/new_allocator.h **** 
 6838              		.loc 9 102 0
 6839 002b E8000000 		call	_ZSt17__throw_bad_allocv
 6839      00
 6840              	.L356:
 104:/usr/include/c++/4.8/ext/new_allocator.h ****       }
 6841              		.loc 9 104 0
 6842 0030 488B45F0 		movq	-16(%rbp), %rax
 6843 0034 48C1E002 		salq	$2, %rax
 6844 0038 4889C7   		movq	%rax, %rdi
 6845 003b E8000000 		call	_Znwm
 6845      00
 105:/usr/include/c++/4.8/ext/new_allocator.h **** 
 6846              		.loc 9 105 0
 6847 0040 C9       		leave
 6848              		.cfi_def_cfa 7, 8
 6849 0041 C3       		ret
 6850              		.cfi_endproc
 6851              	.LFE1518:
 6853              		.section	.text._ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEEvT_T0_RKT1_,"axG",@progb
 6854              		.weak	_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEEvT_T0_RKT1_
 6856              	_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEEvT_T0_RKT1_:
 6857              	.LFB1519:
 202:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			const _Tp& __x)
 6858              		.loc 11 202 0
 6859              		.cfi_startproc
 6860 0000 55       		pushq	%rbp
 6861              		.cfi_def_cfa_offset 16
 6862              		.cfi_offset 6, -16
 6863 0001 4889E5   		movq	%rsp, %rbp
 6864              		.cfi_def_cfa_register 6
 6865 0004 4883EC20 		subq	$32, %rsp
 6866 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6867 000c 488975F0 		movq	%rsi, -16(%rbp)
 6868 0010 488955E8 		movq	%rdx, -24(%rbp)
 204:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 6869              		.loc 11 204 0
 6870 0014 488B55E8 		movq	-24(%rbp), %rdx
 6871 0018 488B4DF0 		movq	-16(%rbp), %rcx
 6872 001c 488B45F8 		movq	-8(%rbp), %rax
 6873 0020 4889CE   		movq	%rcx, %rsi
 6874 0023 4889C7   		movq	%rax, %rdi
 6875 0026 E8000000 		call	_ZSt6fill_nIPfmfET_S1_T0_RKT1_
 6875      00
 6876 002b C9       		leave
 6877              		.cfi_def_cfa 7, 8
 6878 002c C3       		ret
 6879              		.cfi_endproc
 6880              	.LFE1519:
 6882              		.section	.text._ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_cxx13new_all
 6883              		.align 2
 6884              		.weak	_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv
 6886              	_ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv:
 6887              	.LFB1520:
 111:/usr/include/c++/4.8/ext/new_allocator.h **** 
 112:/usr/include/c++/4.8/ext/new_allocator.h ****       size_type
 113:/usr/include/c++/4.8/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 6888              		.loc 9 113 0
 6889              		.cfi_startproc
 6890 0000 55       		pushq	%rbp
 6891              		.cfi_def_cfa_offset 16
 6892              		.cfi_offset 6, -16
 6893 0001 4889E5   		movq	%rsp, %rbp
 6894              		.cfi_def_cfa_register 6
 6895 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.8/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 6896              		.loc 9 114 0
 6897 0008 48B8FFFF 		movabsq	$4611686018427387903, %rax
 6897      FFFFFFFF 
 6897      FF3F
 6898 0012 5D       		popq	%rbp
 6899              		.cfi_def_cfa 7, 8
 6900 0013 C3       		ret
 6901              		.cfi_endproc
 6902              	.LFE1520:
 6904              		.section	.text._ZSt6fill_nIPfmfET_S1_T0_RKT1_,"axG",@progbits,_ZSt6fill_nIPfmfET_S1_T0_RKT1_,comda
 6905              		.weak	_ZSt6fill_nIPfmfET_S1_T0_RKT1_
 6907              	_ZSt6fill_nIPfmfET_S1_T0_RKT1_:
 6908              	.LFB1521:
 6909              		.file 12 "/usr/include/c++/4.8/bits/stl_algobase.h"
   1:/usr/include/c++/4.8/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_algobase.h **** 
   3:/usr/include/c++/4.8/bits/stl_algobase.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_algobase.h **** //
   5:/usr/include/c++/4.8/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  11:/usr/include/c++/4.8/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  16:/usr/include/c++/4.8/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  20:/usr/include/c++/4.8/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  25:/usr/include/c++/4.8/bits/stl_algobase.h **** /*
  26:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  27:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  30:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  38:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  39:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  42:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_algobase.h ****  */
  50:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  51:/usr/include/c++/4.8/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/4.8/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/4.8/bits/stl_algobase.h ****  */
  55:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  56:/usr/include/c++/4.8/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/4.8/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  59:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  72:/usr/include/c++/4.8/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  73:/usr/include/c++/4.8/bits/stl_algobase.h **** {
  74:/usr/include/c++/4.8/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  75:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  76:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus < 201103L
  77:/usr/include/c++/4.8/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  78:/usr/include/c++/4.8/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  79:/usr/include/c++/4.8/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  80:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _BoolType>
  81:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __iter_swap
  82:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
  83:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  84:/usr/include/c++/4.8/bits/stl_algobase.h ****         static void
  85:/usr/include/c++/4.8/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  86:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
  87:/usr/include/c++/4.8/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  88:/usr/include/c++/4.8/bits/stl_algobase.h ****             _ValueType1;
  89:/usr/include/c++/4.8/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  90:/usr/include/c++/4.8/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  91:/usr/include/c++/4.8/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  92:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
  93:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
  94:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  95:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
  96:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __iter_swap<true>
  97:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
  98:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  99:/usr/include/c++/4.8/bits/stl_algobase.h ****         static void 
 100:/usr/include/c++/4.8/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 101:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 102:/usr/include/c++/4.8/bits/stl_algobase.h ****           swap(*__a, *__b);
 103:/usr/include/c++/4.8/bits/stl_algobase.h ****         }
 104:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 105:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 106:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 107:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 108:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 109:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 110:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 111:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 112:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   Nothing.
 113:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 114:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 115:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  iterators themselves.
 116:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 117:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 118:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline void
 119:/usr/include/c++/4.8/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 120:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 121:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 122:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 123:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 124:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 125:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 126:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 127:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus < 201103L
 128:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 129:/usr/include/c++/4.8/bits/stl_algobase.h **** 	_ValueType1;
 130:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 131:/usr/include/c++/4.8/bits/stl_algobase.h **** 	_ValueType2;
 132:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 133:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 134:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ValueType2>)
 135:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 136:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ValueType1>)
 137:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 138:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 139:/usr/include/c++/4.8/bits/stl_algobase.h **** 	_ReferenceType1;
 140:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 141:/usr/include/c++/4.8/bits/stl_algobase.h **** 	_ReferenceType2;
 142:/usr/include/c++/4.8/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 143:/usr/include/c++/4.8/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 144:/usr/include/c++/4.8/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 145:/usr/include/c++/4.8/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 146:/usr/include/c++/4.8/bits/stl_algobase.h **** #else
 147:/usr/include/c++/4.8/bits/stl_algobase.h ****       swap(*__a, *__b);
 148:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 149:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 150:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 151:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 152:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 153:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 154:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 155:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 156:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 157:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 158:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 159:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 160:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 161:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  The ranges must not overlap.
 162:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 163:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 164:/usr/include/c++/4.8/bits/stl_algobase.h ****     _ForwardIterator2
 165:/usr/include/c++/4.8/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 166:/usr/include/c++/4.8/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 167:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 168:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 169:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 170:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 171:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 172:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 173:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 174:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 175:/usr/include/c++/4.8/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 176:/usr/include/c++/4.8/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 177:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __first2;
 178:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 179:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 180:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 181:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 182:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 183:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 184:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 185:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 186:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 187:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 188:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 189:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  preprocessor macro.
 190:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 191:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Tp>
 192:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline const _Tp&
 193:/usr/include/c++/4.8/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 194:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 195:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 196:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 197:/usr/include/c++/4.8/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 198:/usr/include/c++/4.8/bits/stl_algobase.h ****       if (__b < __a)
 199:/usr/include/c++/4.8/bits/stl_algobase.h **** 	return __b;
 200:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __a;
 201:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 202:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 203:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 204:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 205:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 206:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 207:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 208:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 209:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 210:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 211:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 212:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  preprocessor macro.
 213:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 214:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Tp>
 215:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline const _Tp&
 216:/usr/include/c++/4.8/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 217:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 218:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 219:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 220:/usr/include/c++/4.8/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 221:/usr/include/c++/4.8/bits/stl_algobase.h ****       if (__a < __b)
 222:/usr/include/c++/4.8/bits/stl_algobase.h **** 	return __b;
 223:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __a;
 224:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 225:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 226:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 227:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 228:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 229:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 230:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 231:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 232:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 233:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 234:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 235:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 236:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 237:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 238:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline const _Tp&
 239:/usr/include/c++/4.8/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 240:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 241:/usr/include/c++/4.8/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 242:/usr/include/c++/4.8/bits/stl_algobase.h ****       if (__comp(__b, __a))
 243:/usr/include/c++/4.8/bits/stl_algobase.h **** 	return __b;
 244:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __a;
 245:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 246:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 247:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 248:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 249:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 250:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 251:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 252:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 253:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 254:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 255:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 256:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 257:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 258:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 259:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline const _Tp&
 260:/usr/include/c++/4.8/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 261:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 262:/usr/include/c++/4.8/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 263:/usr/include/c++/4.8/bits/stl_algobase.h ****       if (__comp(__a, __b))
 264:/usr/include/c++/4.8/bits/stl_algobase.h **** 	return __b;
 265:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __a;
 266:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 267:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 268:/usr/include/c++/4.8/bits/stl_algobase.h ****   // If _Iterator is a __normal_iterator return its base (a plain pointer,
 269:/usr/include/c++/4.8/bits/stl_algobase.h ****   // normally) otherwise return it untouched.  See copy, fill, ... 
 270:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Iterator>
 271:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct _Niter_base
 272:/usr/include/c++/4.8/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
 273:/usr/include/c++/4.8/bits/stl_algobase.h ****     { };
 274:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 275:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Iterator>
 276:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename _Niter_base<_Iterator>::iterator_type
 277:/usr/include/c++/4.8/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 278:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 279:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 280:/usr/include/c++/4.8/bits/stl_algobase.h ****   // Likewise, for move_iterator.
 281:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Iterator>
 282:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct _Miter_base
 283:/usr/include/c++/4.8/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
 284:/usr/include/c++/4.8/bits/stl_algobase.h ****     { };
 285:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 286:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Iterator>
 287:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename _Miter_base<_Iterator>::iterator_type
 288:/usr/include/c++/4.8/bits/stl_algobase.h ****     __miter_base(_Iterator __it)
 289:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 290:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 291:/usr/include/c++/4.8/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 292:/usr/include/c++/4.8/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 293:/usr/include/c++/4.8/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 294:/usr/include/c++/4.8/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 295:/usr/include/c++/4.8/bits/stl_algobase.h ****   // a for loop with an explicit count.
 296:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 297:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool, bool, typename>
 298:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move
 299:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 300:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 301:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _OI
 302:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 303:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 304:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 305:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *__result = *__first;
 306:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 307:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 308:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 309:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 310:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 311:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Category>
 312:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 313:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 314:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 315:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _OI
 316:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 317:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 318:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 319:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 320:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 321:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 322:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 323:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 324:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 325:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
 326:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 327:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 328:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 329:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _OI
 330:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 331:/usr/include/c++/4.8/bits/stl_algobase.h ****         { 
 332:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 333:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 334:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 335:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      *__result = *__first;
 336:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__first;
 337:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__result;
 338:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    }
 339:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 340:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 341:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 342:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 343:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 344:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
 345:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 346:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 347:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 348:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _OI
 349:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 350:/usr/include/c++/4.8/bits/stl_algobase.h ****         { 
 351:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 352:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 353:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 354:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 355:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__first;
 356:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__result;
 357:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    }
 358:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 359:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 360:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 361:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 362:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 363:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove>
 364:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 365:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 366:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _Tp>
 367:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _Tp*
 368:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 369:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 370:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 371:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  if (_Num)
 372:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 373:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result + _Num;
 374:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 375:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 376:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 377:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 378:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _OI
 379:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 380:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 381:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 382:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 383:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 384:/usr/include/c++/4.8/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueTypeI)
 385:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                     && __is_pointer<_II>::__value
 386:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                     && __is_pointer<_OI>::__value
 387:/usr/include/c++/4.8/bits/stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 388:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 389:/usr/include/c++/4.8/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 390:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                      _Category>::__copy_m(__first, __last, __result);
 391:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 392:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 393:/usr/include/c++/4.8/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 394:/usr/include/c++/4.8/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 395:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _CharT>
 396:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct char_traits;
 397:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 398:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 399:/usr/include/c++/4.8/bits/stl_algobase.h ****     class istreambuf_iterator;
 400:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 401:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 402:/usr/include/c++/4.8/bits/stl_algobase.h ****     class ostreambuf_iterator;
 403:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 404:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 405:/usr/include/c++/4.8/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 406:/usr/include/c++/4.8/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 407:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 408:/usr/include/c++/4.8/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 409:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 410:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 411:/usr/include/c++/4.8/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 412:/usr/include/c++/4.8/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 413:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 414:/usr/include/c++/4.8/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 415:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 416:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 417:/usr/include/c++/4.8/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 418:/usr/include/c++/4.8/bits/stl_algobase.h **** 				    _CharT*>::__type
 419:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 420:/usr/include/c++/4.8/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 421:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 422:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 423:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _OI
 424:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 425:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 426:/usr/include/c++/4.8/bits/stl_algobase.h ****       return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 427:/usr/include/c++/4.8/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 428:/usr/include/c++/4.8/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 429:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 430:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 431:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 432:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 433:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 434:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 435:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 436:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 437:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   result + (first - last)
 438:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 439:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 440:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 441:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 442:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 443:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 444:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 445:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 446:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  within [first,last).
 447:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 448:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 449:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _OI
 450:/usr/include/c++/4.8/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 451:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 452:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 453:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 454:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 455:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 456:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 457:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 458:/usr/include/c++/4.8/bits/stl_algobase.h ****       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
 459:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 460:/usr/include/c++/4.8/bits/stl_algobase.h **** 	       __result));
 461:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 462:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 463:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 464:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 465:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 466:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 467:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 468:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 469:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 470:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   result + (first - last)
 471:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 472:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 473:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 474:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 475:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 476:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 477:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 478:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 479:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  within [first,last).
 480:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 481:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 482:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _OI
 483:/usr/include/c++/4.8/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 484:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 485:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 486:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 487:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 488:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 489:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 490:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 491:/usr/include/c++/4.8/bits/stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 492:/usr/include/c++/4.8/bits/stl_algobase.h **** 				       std::__miter_base(__last), __result);
 493:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 494:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 495:/usr/include/c++/4.8/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 496:/usr/include/c++/4.8/bits/stl_algobase.h **** #else
 497:/usr/include/c++/4.8/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 498:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 499:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 500:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool, bool, typename>
 501:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward
 502:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 503:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 504:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _BI2
 505:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 506:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 507:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  while (__first != __last)
 508:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 509:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 510:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 511:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 512:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 513:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 514:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Category>
 515:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 516:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 517:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 518:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _BI2
 519:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 520:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 521:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  while (__first != __last)
 522:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 523:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 524:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 525:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 526:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 527:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 528:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
 529:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 530:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 531:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 532:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _BI2
 533:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 534:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 535:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 536:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 537:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 538:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 539:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 540:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 541:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 542:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 543:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
 544:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 545:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 546:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 547:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _BI2
 548:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 549:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 550:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 551:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 552:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 553:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 554:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 555:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 556:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 557:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 558:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove>
 559:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 560:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 561:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _Tp>
 562:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _Tp*
 563:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 564:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 565:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 566:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  if (_Num)
 567:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 568:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result - _Num;
 569:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 570:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 571:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 572:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 573:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _BI2
 574:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 575:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 576:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::value_type _ValueType1;
 577:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI2>::value_type _ValueType2;
 578:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 579:/usr/include/c++/4.8/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueType1)
 580:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                     && __is_pointer<_BI1>::__value
 581:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                     && __is_pointer<_BI2>::__value
 582:/usr/include/c++/4.8/bits/stl_algobase.h **** 			     && __are_same<_ValueType1, _ValueType2>::__value);
 583:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 584:/usr/include/c++/4.8/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove, __simple,
 585:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                               _Category>::__copy_move_b(__first,
 586:/usr/include/c++/4.8/bits/stl_algobase.h **** 								 __last,
 587:/usr/include/c++/4.8/bits/stl_algobase.h **** 								 __result);
 588:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 589:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 590:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 591:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _BI2
 592:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 593:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 594:/usr/include/c++/4.8/bits/stl_algobase.h ****       return _BI2(std::__copy_move_backward_a<_IsMove>
 595:/usr/include/c++/4.8/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 596:/usr/include/c++/4.8/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 597:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 598:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 599:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 600:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 601:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 602:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 603:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 604:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 605:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   result - (first - last)
 606:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 607:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 608:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 609:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 610:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 611:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 612:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 613:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 614:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 615:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 616:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 617:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 618:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _BI2
 619:/usr/include/c++/4.8/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 620:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 621:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 622:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 623:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 624:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 625:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 626:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 627:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 628:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 629:/usr/include/c++/4.8/bits/stl_algobase.h ****       return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
 630:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 631:/usr/include/c++/4.8/bits/stl_algobase.h **** 	       __result));
 632:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 633:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 634:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 635:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 636:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 637:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 638:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 639:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 640:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 641:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   result - (first - last)
 642:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 643:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  The function has the same effect as move, but starts at the end of the
 644:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 645:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 646:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 647:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 648:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 649:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 650:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use move instead.  Note
 651:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 652:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 653:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 654:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _BI2
 655:/usr/include/c++/4.8/bits/stl_algobase.h ****     move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 656:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 657:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 658:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 659:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 660:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 661:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 662:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 663:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 664:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 665:/usr/include/c++/4.8/bits/stl_algobase.h ****       return std::__copy_move_backward_a2<true>(std::__miter_base(__first),
 666:/usr/include/c++/4.8/bits/stl_algobase.h **** 						std::__miter_base(__last),
 667:/usr/include/c++/4.8/bits/stl_algobase.h **** 						__result);
 668:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 669:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 670:/usr/include/c++/4.8/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::move_backward(_Tp, _Up, _Vp)
 671:/usr/include/c++/4.8/bits/stl_algobase.h **** #else
 672:/usr/include/c++/4.8/bits/stl_algobase.h **** #define _GLIBCXX_MOVE_BACKWARD3(_Tp, _Up, _Vp) std::copy_backward(_Tp, _Up, _Vp)
 673:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 674:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 675:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 676:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename
 677:/usr/include/c++/4.8/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
 678:/usr/include/c++/4.8/bits/stl_algobase.h ****     __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 679:/usr/include/c++/4.8/bits/stl_algobase.h ****  	     const _Tp& __value)
 680:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 681:/usr/include/c++/4.8/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 682:/usr/include/c++/4.8/bits/stl_algobase.h **** 	*__first = __value;
 683:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 684:/usr/include/c++/4.8/bits/stl_algobase.h ****     
 685:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 686:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename
 687:/usr/include/c++/4.8/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
 688:/usr/include/c++/4.8/bits/stl_algobase.h ****     __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 689:/usr/include/c++/4.8/bits/stl_algobase.h **** 	     const _Tp& __value)
 690:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 691:/usr/include/c++/4.8/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 692:/usr/include/c++/4.8/bits/stl_algobase.h ****       for (; __first != __last; ++__first)
 693:/usr/include/c++/4.8/bits/stl_algobase.h **** 	*__first = __tmp;
 694:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 695:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 696:/usr/include/c++/4.8/bits/stl_algobase.h ****   // Specialization: for char types we can use memset.
 697:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Tp>
 698:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename
 699:/usr/include/c++/4.8/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
 700:/usr/include/c++/4.8/bits/stl_algobase.h ****     __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 701:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 702:/usr/include/c++/4.8/bits/stl_algobase.h ****       const _Tp __tmp = __c;
 703:/usr/include/c++/4.8/bits/stl_algobase.h ****       __builtin_memset(__first, static_cast<unsigned char>(__tmp),
 704:/usr/include/c++/4.8/bits/stl_algobase.h **** 		       __last - __first);
 705:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 706:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 707:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 708:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Fills the range [first,last) with copies of value.
 709:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 710:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first  A forward iterator.
 711:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last   A forward iterator.
 712:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 713:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   Nothing.
 714:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 715:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 716:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 717:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  to @c memset or @c wmemset.
 718:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 719:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _ForwardIterator, typename _Tp>
 720:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline void
 721:/usr/include/c++/4.8/bits/stl_algobase.h ****     fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 722:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 723:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 724:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 725:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ForwardIterator>)
 726:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 727:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 728:/usr/include/c++/4.8/bits/stl_algobase.h ****       std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 729:/usr/include/c++/4.8/bits/stl_algobase.h **** 		    __value);
 730:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 731:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 732:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 733:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename
 734:/usr/include/c++/4.8/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
 735:/usr/include/c++/4.8/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 736:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 737:/usr/include/c++/4.8/bits/stl_algobase.h ****       for (__decltype(__n + 0) __niter = __n;
 738:/usr/include/c++/4.8/bits/stl_algobase.h **** 	   __niter > 0; --__niter, ++__first)
 739:/usr/include/c++/4.8/bits/stl_algobase.h **** 	*__first = __value;
 740:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __first;
 741:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 742:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 743:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _OutputIterator, typename _Size, typename _Tp>
 744:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename
 745:/usr/include/c++/4.8/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
 746:/usr/include/c++/4.8/bits/stl_algobase.h ****     __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
 747:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 748:/usr/include/c++/4.8/bits/stl_algobase.h ****       const _Tp __tmp = __value;
 749:/usr/include/c++/4.8/bits/stl_algobase.h ****       for (__decltype(__n + 0) __niter = __n;
 750:/usr/include/c++/4.8/bits/stl_algobase.h **** 	   __niter > 0; --__niter, ++__first)
 751:/usr/include/c++/4.8/bits/stl_algobase.h **** 	*__first = __tmp;
 752:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __first;
 753:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 754:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 755:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Size, typename _Tp>
 756:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename
 757:/usr/include/c++/4.8/bits/stl_algobase.h ****     __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
 758:/usr/include/c++/4.8/bits/stl_algobase.h ****     __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 759:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 760:/usr/include/c++/4.8/bits/stl_algobase.h ****       std::__fill_a(__first, __first + __n, __c);
 761:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __first + __n;
 762:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 763:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 764:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 765:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Fills the range [first,first+n) with copies of value.
 766:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 767:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first  An output iterator.
 768:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __n      The count of copies to perform.
 769:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __value  A reference-to-const of arbitrary type.
 770:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   The iterator at first+n.
 771:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 772:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This function fills a range with copies of the same value.  For char
 773:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  types filling contiguous areas of memory, this becomes an inline call
 774:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  to @c memset or @ wmemset.
 775:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 776:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  _GLIBCXX_RESOLVE_LIB_DEFECTS
 777:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  DR 865. More algorithms that throw away information
 778:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 779:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _OI, typename _Size, typename _Tp>
 780:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _OI
 781:/usr/include/c++/4.8/bits/stl_algobase.h ****     fill_n(_OI __first, _Size __n, const _Tp& __value)
 6910              		.loc 12 781 0
 6911              		.cfi_startproc
 6912 0000 55       		pushq	%rbp
 6913              		.cfi_def_cfa_offset 16
 6914              		.cfi_offset 6, -16
 6915 0001 4889E5   		movq	%rsp, %rbp
 6916              		.cfi_def_cfa_register 6
 6917 0004 4883EC20 		subq	$32, %rsp
 6918 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6919 000c 488975F0 		movq	%rsi, -16(%rbp)
 6920 0010 488955E8 		movq	%rdx, -24(%rbp)
 782:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 783:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 784:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)
 785:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 786:/usr/include/c++/4.8/bits/stl_algobase.h ****       return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 6921              		.loc 12 786 0
 6922 0014 488B45F8 		movq	-8(%rbp), %rax
 6923 0018 4889C7   		movq	%rax, %rdi
 6924 001b E8000000 		call	_ZSt12__niter_baseIPfENSt11_Niter_baseIT_E13iterator_typeES2_
 6924      00
 6925 0020 488B55E8 		movq	-24(%rbp), %rdx
 6926 0024 488B4DF0 		movq	-16(%rbp), %rcx
 6927 0028 4889CE   		movq	%rcx, %rsi
 6928 002b 4889C7   		movq	%rax, %rdi
 6929 002e E8000000 		call	_ZSt10__fill_n_aIPfmfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_
 6929      00
 787:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 6930              		.loc 12 787 0
 6931 0033 C9       		leave
 6932              		.cfi_def_cfa 7, 8
 6933 0034 C3       		ret
 6934              		.cfi_endproc
 6935              	.LFE1521:
 6937              		.section	.text._ZSt12__niter_baseIPfENSt11_Niter_baseIT_E13iterator_typeES2_,"axG",@progbits,_ZSt1
 6938              		.weak	_ZSt12__niter_baseIPfENSt11_Niter_baseIT_E13iterator_typeES2_
 6940              	_ZSt12__niter_baseIPfENSt11_Niter_baseIT_E13iterator_typeES2_:
 6941              	.LFB1522:
 277:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 6942              		.loc 12 277 0
 6943              		.cfi_startproc
 6944 0000 55       		pushq	%rbp
 6945              		.cfi_def_cfa_offset 16
 6946              		.cfi_offset 6, -16
 6947 0001 4889E5   		movq	%rsp, %rbp
 6948              		.cfi_def_cfa_register 6
 6949 0004 4883EC10 		subq	$16, %rsp
 6950 0008 48897DF8 		movq	%rdi, -8(%rbp)
 278:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 6951              		.loc 12 278 0
 6952 000c 488B45F8 		movq	-8(%rbp), %rax
 6953 0010 4889C7   		movq	%rax, %rdi
 6954 0013 E8000000 		call	_ZNSt10_Iter_baseIPfLb0EE7_S_baseES0_
 6954      00
 6955 0018 C9       		leave
 6956              		.cfi_def_cfa 7, 8
 6957 0019 C3       		ret
 6958              		.cfi_endproc
 6959              	.LFE1522:
 6961              		.section	.text._ZSt10__fill_n_aIPfmfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6
 6962              		.weak	_ZSt10__fill_n_aIPfmfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6
 6964              	_ZSt10__fill_n_aIPfmfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS
 6965              	.LFB1523:
 746:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 6966              		.loc 12 746 0
 6967              		.cfi_startproc
 6968 0000 55       		pushq	%rbp
 6969              		.cfi_def_cfa_offset 16
 6970              		.cfi_offset 6, -16
 6971 0001 4889E5   		movq	%rsp, %rbp
 6972              		.cfi_def_cfa_register 6
 6973 0004 48897DE8 		movq	%rdi, -24(%rbp)
 6974 0008 488975E0 		movq	%rsi, -32(%rbp)
 6975 000c 488955D8 		movq	%rdx, -40(%rbp)
 6976              	.LBB146:
 748:/usr/include/c++/4.8/bits/stl_algobase.h ****       for (__decltype(__n + 0) __niter = __n;
 6977              		.loc 12 748 0
 6978 0010 488B45D8 		movq	-40(%rbp), %rax
 6979 0014 8B00     		movl	(%rax), %eax
 6980 0016 8945F4   		movl	%eax, -12(%rbp)
 6981              	.LBB147:
 749:/usr/include/c++/4.8/bits/stl_algobase.h **** 	   __niter > 0; --__niter, ++__first)
 6982              		.loc 12 749 0
 6983 0019 488B45E0 		movq	-32(%rbp), %rax
 6984 001d 488945F8 		movq	%rax, -8(%rbp)
 6985 0021 EB13     		jmp	.L366
 6986              	.L367:
 751:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __first;
 6987              		.loc 12 751 0 discriminator 2
 6988 0023 488B55E8 		movq	-24(%rbp), %rdx
 6989 0027 8B45F4   		movl	-12(%rbp), %eax
 6990 002a 8902     		movl	%eax, (%rdx)
 749:/usr/include/c++/4.8/bits/stl_algobase.h **** 	   __niter > 0; --__niter, ++__first)
 6991              		.loc 12 749 0 discriminator 2
 6992 002c 48836DF8 		subq	$1, -8(%rbp)
 6992      01
 6993 0031 488345E8 		addq	$4, -24(%rbp)
 6993      04
 6994              	.L366:
 749:/usr/include/c++/4.8/bits/stl_algobase.h **** 	   __niter > 0; --__niter, ++__first)
 6995              		.loc 12 749 0 is_stmt 0 discriminator 1
 6996 0036 48837DF8 		cmpq	$0, -8(%rbp)
 6996      00
 6997 003b 75E6     		jne	.L367
 6998              	.LBE147:
 752:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 6999              		.loc 12 752 0 is_stmt 1
 7000 003d 488B45E8 		movq	-24(%rbp), %rax
 7001              	.LBE146:
 753:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 7002              		.loc 12 753 0
 7003 0041 5D       		popq	%rbp
 7004              		.cfi_def_cfa 7, 8
 7005 0042 C3       		ret
 7006              		.cfi_endproc
 7007              	.LFE1523:
 7009              		.section	.text._ZNSt10_Iter_baseIPfLb0EE7_S_baseES0_,"axG",@progbits,_ZNSt10_Iter_baseIPfLb0EE7_S_
 7010              		.weak	_ZNSt10_Iter_baseIPfLb0EE7_S_baseES0_
 7012              	_ZNSt10_Iter_baseIPfLb0EE7_S_baseES0_:
 7013              	.LFB1524:
 7014              		.file 13 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h"
   1:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // Types used in iterator implementation -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
   3:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** //
   5:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  11:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  16:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  20:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  25:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** /*
  26:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  27:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  30:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  38:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  39:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  42:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  */
  50:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  51:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** /** @file bits/stl_iterator_base_types.h
  52:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  55:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *  This file contains all of the general iterator-related utility types,
  56:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *  such as iterator_traits and struct iterator.
  57:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  */
  58:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  59:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #ifndef _STL_ITERATOR_BASE_TYPES_H
  60:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #define _STL_ITERATOR_BASE_TYPES_H 1
  61:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  62:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #pragma GCC system_header
  63:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  64:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #include <bits/c++config.h>
  65:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  66:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
  67:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** # include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE, is_convertible
  68:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #endif
  69:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  70:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** namespace std _GLIBCXX_VISIBILITY(default)
  71:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** {
  72:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  73:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  74:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
  75:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  @defgroup iterators Iterators
  76:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  Abstractions for uniform iterating through various underlying types.
  77:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
  78:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   //@{ 
  79:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  80:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
  81:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  @defgroup iterator_tags Iterator Tags
  82:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  These are empty types, used to distinguish different iterators.  The
  83:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  distinction is not made by what they contain, but simply by what they
  84:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  are.  Different underlying algorithms can then be used based on the
  85:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  different operations supported by different iterator types.
  86:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
  87:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   //@{ 
  88:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   ///  Marking input iterators.
  89:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct input_iterator_tag { };
  90:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  91:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   ///  Marking output iterators.
  92:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct output_iterator_tag { };
  93:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  94:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Forward iterators support a superset of input iterator operations.
  95:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct forward_iterator_tag : public input_iterator_tag { };
  96:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  97:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Bidirectional iterators support a superset of forward iterator
  98:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// operations.
  99:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct bidirectional_iterator_tag : public forward_iterator_tag { };
 100:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 101:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Random-access iterators support a superset of bidirectional
 102:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// iterator operations.
 103:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct random_access_iterator_tag : public bidirectional_iterator_tag { };
 104:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   //@}
 105:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 106:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
 107:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  @brief  Common %iterator class.
 108:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *
 109:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  %Iterator classes
 110:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  can inherit from this class to save some work.  The typedefs are then
 111:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  used in specializations and overloading.
 112:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *
 113:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  In particular, there are no default implementations of requirements
 114:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  such as @c operator++ and the like.  (How could there be?)
 115:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
 116:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
 117:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****            typename _Pointer = _Tp*, typename _Reference = _Tp&>
 118:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator
 119:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 120:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// One of the @link iterator_tags tag types@endlink.
 121:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Category  iterator_category;
 122:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// The type "pointed to" by the iterator.
 123:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp        value_type;
 124:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// Distance between iterators is represented as this type.
 125:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Distance  difference_type;
 126:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// This type represents a pointer-to-value_type.
 127:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Pointer   pointer;
 128:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// This type represents a reference-to-value_type.
 129:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Reference reference;
 130:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 131:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 132:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
 133:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  @brief  Traits class for iterators.
 134:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *
 135:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  The general
 136:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  version simply @a forwards the nested typedefs from the Iterator
 137:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  argument.  Specialized versions for pointers and pointers-to-const
 138:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  provide tighter, more correct semantics.
 139:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
 140:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 142:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** _GLIBCXX_HAS_NESTED_TYPE(iterator_category)
 143:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 144:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator,
 145:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 	   bool = __has_iterator_category<_Iterator>::value>
 146:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct __iterator_traits { };
 147:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 148:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 149:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct __iterator_traits<_Iterator, true>
 150:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 151:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 152:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 153:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 154:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 155:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 156:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 157:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 158:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 159:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator_traits
 160:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     : public __iterator_traits<_Iterator> { };
 161:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #else
 162:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 163:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator_traits
 164:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 165:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 166:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 167:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 168:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 169:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 170:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 171:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #endif
 172:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 173:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Partial specialization for pointer types.
 174:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 175:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator_traits<_Tp*>
 176:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 177:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 178:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 179:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 180:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp*                        pointer;
 181:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp&                        reference;
 182:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 183:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 184:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Partial specialization for const pointer types.
 185:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 186:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator_traits<const _Tp*>
 187:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 188:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 189:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 190:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 191:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef const _Tp*                  pointer;
 192:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef const _Tp&                  reference;
 193:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 194:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 195:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
 196:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  This function is not a part of the C++ standard but is syntactic
 197:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  sugar for internal library use only.
 198:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
 199:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iter>
 200:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     inline typename iterator_traits<_Iter>::iterator_category
 201:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     __iterator_category(const _Iter&)
 202:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 203:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 204:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   //@}
 205:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 206:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   // If _Iterator has a base returns it otherwise _Iterator is returned
 207:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   // untouched
 208:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator, bool _HasBase>
 209:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct _Iter_base
 210:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 211:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Iterator iterator_type;
 212:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       static iterator_type _S_base(_Iterator __it)
 7015              		.loc 13 212 0
 7016              		.cfi_startproc
 7017 0000 55       		pushq	%rbp
 7018              		.cfi_def_cfa_offset 16
 7019              		.cfi_offset 6, -16
 7020 0001 4889E5   		movq	%rsp, %rbp
 7021              		.cfi_def_cfa_register 6
 7022 0004 48897DF8 		movq	%rdi, -8(%rbp)
 213:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       { return __it; }
 7023              		.loc 13 213 0
 7024 0008 488B45F8 		movq	-8(%rbp), %rax
 7025 000c 5D       		popq	%rbp
 7026              		.cfi_def_cfa 7, 8
 7027 000d C3       		ret
 7028              		.cfi_endproc
 7029              	.LFE1524:
 7031              		.section	.rodata
 7032 061e 0000     		.align 32
 7035              	_ZTVN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE:
 7036 0620 00000000 		.quad	0
 7036      00000000 
 7037 0628 00000000 		.quad	_ZTIN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
 7037      00000000 
 7038 0630 00000000 		.quad	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev
 7038      00000000 
 7039 0638 00000000 		.quad	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD0Ev
 7039      00000000 
 7040 0640 00000000 		.quad	_ZNK12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunction7RunImplEv
 7040      00000000 
 7041              		.text
 7042              		.align 2
 7044              	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD2Ev:
 7045              	.LFB1526:
 151:TestUnitTest++.cpp **** {
 7046              		.loc 4 151 0
 7047              		.cfi_startproc
 7048 1e56 55       		pushq	%rbp
 7049              		.cfi_def_cfa_offset 16
 7050              		.cfi_offset 6, -16
 7051 1e57 4889E5   		movq	%rsp, %rbp
 7052              		.cfi_def_cfa_register 6
 7053 1e5a 4883EC10 		subq	$16, %rsp
 7054 1e5e 48897DF8 		movq	%rdi, -8(%rbp)
 7055              	.LBB148:
 151:TestUnitTest++.cpp **** {
 7056              		.loc 4 151 0
 7057 1e62 488B45F8 		movq	-8(%rbp), %rax
 7058 1e66 48C70000 		movq	$_ZTVN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE+16, (%rax)
 7058      000000
 7059 1e6d 488B45F8 		movq	-8(%rbp), %rax
 7060 1e71 4889C7   		movq	%rax, %rdi
 7061 1e74 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7061      00
 7062              	.LBE148:
 7063 1e79 B8000000 		movl	$0, %eax
 7063      00
 7064 1e7e 85C0     		testl	%eax, %eax
 7065 1e80 740C     		je	.L371
 151:TestUnitTest++.cpp **** {
 7066              		.loc 4 151 0 is_stmt 0 discriminator 1
 7067 1e82 488B45F8 		movq	-8(%rbp), %rax
 7068 1e86 4889C7   		movq	%rax, %rdi
 7069 1e89 E8000000 		call	_ZdlPv
 7069      00
 7070              	.L371:
 151:TestUnitTest++.cpp **** {
 7071              		.loc 4 151 0
 7072 1e8e C9       		leave
 7073              		.cfi_def_cfa 7, 8
 7074 1e8f C3       		ret
 7075              		.cfi_endproc
 7076              	.LFE1526:
 7078              		.set	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev,_ZN12_GLOBAL__N_137TestCanCallCH
 7079              		.align 2
 7081              	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD0Ev:
 7082              	.LFB1528:
 151:TestUnitTest++.cpp **** {
 7083              		.loc 4 151 0 is_stmt 1
 7084              		.cfi_startproc
 7085 1e90 55       		pushq	%rbp
 7086              		.cfi_def_cfa_offset 16
 7087              		.cfi_offset 6, -16
 7088 1e91 4889E5   		movq	%rsp, %rbp
 7089              		.cfi_def_cfa_register 6
 7090 1e94 4883EC10 		subq	$16, %rsp
 7091 1e98 48897DF8 		movq	%rdi, -8(%rbp)
 151:TestUnitTest++.cpp **** {
 7092              		.loc 4 151 0
 7093 1e9c 488B45F8 		movq	-8(%rbp), %rax
 7094 1ea0 4889C7   		movq	%rax, %rdi
 7095 1ea3 E8AEFFFF 		call	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev
 7095      FF
 7096 1ea8 488B45F8 		movq	-8(%rbp), %rax
 7097 1eac 4889C7   		movq	%rax, %rdi
 7098 1eaf E8000000 		call	_ZdlPv
 7098      00
 7099 1eb4 C9       		leave
 7100              		.cfi_def_cfa 7, 8
 7101 1eb5 C3       		ret
 7102              		.cfi_endproc
 7103              	.LFE1528:
 7105              		.section	.rodata
 7106 0648 00000000 		.align 32
 7106      00000000 
 7106      00000000 
 7106      00000000 
 7106      00000000 
 7109              	_ZTVN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE:
 7110 0660 00000000 		.quad	0
 7110      00000000 
 7111 0668 00000000 		.quad	_ZTIN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
 7111      00000000 
 7112 0670 00000000 		.quad	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev
 7112      00000000 
 7113 0678 00000000 		.quad	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD0Ev
 7113      00000000 
 7114 0680 00000000 		.quad	_ZNK12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATime7RunImplEv
 7114      00000000 
 7115              		.text
 7116              		.align 2
 7118              	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD2Ev:
 7119              	.LFB1530:
 141:TestUnitTest++.cpp **** {
 7120              		.loc 4 141 0
 7121              		.cfi_startproc
 7122 1eb6 55       		pushq	%rbp
 7123              		.cfi_def_cfa_offset 16
 7124              		.cfi_offset 6, -16
 7125 1eb7 4889E5   		movq	%rsp, %rbp
 7126              		.cfi_def_cfa_register 6
 7127 1eba 4883EC10 		subq	$16, %rsp
 7128 1ebe 48897DF8 		movq	%rdi, -8(%rbp)
 7129              	.LBB149:
 141:TestUnitTest++.cpp **** {
 7130              		.loc 4 141 0
 7131 1ec2 488B45F8 		movq	-8(%rbp), %rax
 7132 1ec6 48C70000 		movq	$_ZTVN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE+16, (%rax)
 7132      000000
 7133 1ecd 488B45F8 		movq	-8(%rbp), %rax
 7134 1ed1 4889C7   		movq	%rax, %rdi
 7135 1ed4 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7135      00
 7136              	.LBE149:
 7137 1ed9 B8000000 		movl	$0, %eax
 7137      00
 7138 1ede 85C0     		testl	%eax, %eax
 7139 1ee0 740C     		je	.L376
 141:TestUnitTest++.cpp **** {
 7140              		.loc 4 141 0 is_stmt 0 discriminator 1
 7141 1ee2 488B45F8 		movq	-8(%rbp), %rax
 7142 1ee6 4889C7   		movq	%rax, %rdi
 7143 1ee9 E8000000 		call	_ZdlPv
 7143      00
 7144              	.L376:
 141:TestUnitTest++.cpp **** {
 7145              		.loc 4 141 0
 7146 1eee C9       		leave
 7147              		.cfi_def_cfa 7, 8
 7148 1eef C3       		ret
 7149              		.cfi_endproc
 7150              	.LFE1530:
 7152              		.set	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev,_ZN12_GLOBAL__N_143TestSim
 7153              		.align 2
 7155              	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD0Ev:
 7156              	.LFB1532:
 141:TestUnitTest++.cpp **** {
 7157              		.loc 4 141 0 is_stmt 1
 7158              		.cfi_startproc
 7159 1ef0 55       		pushq	%rbp
 7160              		.cfi_def_cfa_offset 16
 7161              		.cfi_offset 6, -16
 7162 1ef1 4889E5   		movq	%rsp, %rbp
 7163              		.cfi_def_cfa_register 6
 7164 1ef4 4883EC10 		subq	$16, %rsp
 7165 1ef8 48897DF8 		movq	%rdi, -8(%rbp)
 141:TestUnitTest++.cpp **** {
 7166              		.loc 4 141 0
 7167 1efc 488B45F8 		movq	-8(%rbp), %rax
 7168 1f00 4889C7   		movq	%rax, %rdi
 7169 1f03 E8AEFFFF 		call	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev
 7169      FF
 7170 1f08 488B45F8 		movq	-8(%rbp), %rax
 7171 1f0c 4889C7   		movq	%rax, %rdi
 7172 1f0f E8000000 		call	_ZdlPv
 7172      00
 7173 1f14 C9       		leave
 7174              		.cfi_def_cfa 7, 8
 7175 1f15 C3       		ret
 7176              		.cfi_endproc
 7177              	.LFE1532:
 7179              		.section	.rodata
 7180 0688 00000000 		.align 32
 7180      00000000 
 7180      00000000 
 7180      00000000 
 7180      00000000 
 7183              	_ZTVN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE:
 7184 06a0 00000000 		.quad	0
 7184      00000000 
 7185 06a8 00000000 		.quad	_ZTIN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
 7185      00000000 
 7186 06b0 00000000 		.quad	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev
 7186      00000000 
 7187 06b8 00000000 		.quad	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD0Ev
 7187      00000000 
 7188 06c0 00000000 		.quad	_ZNK12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalled7RunImplEv
 7188      00000000 
 7189              		.text
 7190              		.align 2
 7192              	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD2Ev:
 7193              	.LFB1534:
 136:TestUnitTest++.cpp **** {
 7194              		.loc 4 136 0
 7195              		.cfi_startproc
 7196 1f16 55       		pushq	%rbp
 7197              		.cfi_def_cfa_offset 16
 7198              		.cfi_offset 6, -16
 7199 1f17 4889E5   		movq	%rsp, %rbp
 7200              		.cfi_def_cfa_register 6
 7201 1f1a 4883EC10 		subq	$16, %rsp
 7202 1f1e 48897DF8 		movq	%rdi, -8(%rbp)
 7203              	.LBB150:
 136:TestUnitTest++.cpp **** {
 7204              		.loc 4 136 0
 7205 1f22 488B45F8 		movq	-8(%rbp), %rax
 7206 1f26 48C70000 		movq	$_ZTVN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE+16, (%rax)
 7206      000000
 7207 1f2d 488B45F8 		movq	-8(%rbp), %rax
 7208 1f31 4889C7   		movq	%rax, %rdi
 7209 1f34 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7209      00
 7210              	.LBE150:
 7211 1f39 B8000000 		movl	$0, %eax
 7211      00
 7212 1f3e 85C0     		testl	%eax, %eax
 7213 1f40 740C     		je	.L381
 136:TestUnitTest++.cpp **** {
 7214              		.loc 4 136 0 is_stmt 0 discriminator 1
 7215 1f42 488B45F8 		movq	-8(%rbp), %rax
 7216 1f46 4889C7   		movq	%rax, %rdi
 7217 1f49 E8000000 		call	_ZdlPv
 7217      00
 7218              	.L381:
 136:TestUnitTest++.cpp **** {
 7219              		.loc 4 136 0
 7220 1f4e C9       		leave
 7221              		.cfi_def_cfa 7, 8
 7222 1f4f C3       		ret
 7223              		.cfi_endproc
 7224              	.LFE1534:
 7226              		.set	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev,_ZN12_GLOBAL__N_143TestSim
 7227              		.align 2
 7229              	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD0Ev:
 7230              	.LFB1536:
 136:TestUnitTest++.cpp **** {
 7231              		.loc 4 136 0 is_stmt 1
 7232              		.cfi_startproc
 7233 1f50 55       		pushq	%rbp
 7234              		.cfi_def_cfa_offset 16
 7235              		.cfi_offset 6, -16
 7236 1f51 4889E5   		movq	%rsp, %rbp
 7237              		.cfi_def_cfa_register 6
 7238 1f54 4883EC10 		subq	$16, %rsp
 7239 1f58 48897DF8 		movq	%rdi, -8(%rbp)
 136:TestUnitTest++.cpp **** {
 7240              		.loc 4 136 0
 7241 1f5c 488B45F8 		movq	-8(%rbp), %rax
 7242 1f60 4889C7   		movq	%rax, %rdi
 7243 1f63 E8AEFFFF 		call	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev
 7243      FF
 7244 1f68 488B45F8 		movq	-8(%rbp), %rax
 7245 1f6c 4889C7   		movq	%rax, %rdi
 7246 1f6f E8000000 		call	_ZdlPv
 7246      00
 7247 1f74 C9       		leave
 7248              		.cfi_def_cfa 7, 8
 7249 1f75 C3       		ret
 7250              		.cfi_endproc
 7251              	.LFE1536:
 7253              		.section	.rodata
 7254 06c8 00000000 		.align 32
 7254      00000000 
 7254      00000000 
 7254      00000000 
 7254      00000000 
 7257              	_ZTVN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE:
 7258 06e0 00000000 		.quad	0
 7258      00000000 
 7259 06e8 00000000 		.quad	_ZTIN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
 7259      00000000 
 7260 06f0 00000000 		.quad	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev
 7260      00000000 
 7261 06f8 00000000 		.quad	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD0Ev
 7261      00000000 
 7262 0700 00000000 		.quad	_ZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEv
 7262      00000000 
 7263              		.text
 7264              		.align 2
 7266              	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD2Ev:
 7267              	.LFB1538:
  97:TestUnitTest++.cpp **** {
 7268              		.loc 4 97 0
 7269              		.cfi_startproc
 7270 1f76 55       		pushq	%rbp
 7271              		.cfi_def_cfa_offset 16
 7272              		.cfi_offset 6, -16
 7273 1f77 4889E5   		movq	%rsp, %rbp
 7274              		.cfi_def_cfa_register 6
 7275 1f7a 4883EC10 		subq	$16, %rsp
 7276 1f7e 48897DF8 		movq	%rdi, -8(%rbp)
 7277              	.LBB151:
  97:TestUnitTest++.cpp **** {
 7278              		.loc 4 97 0
 7279 1f82 488B45F8 		movq	-8(%rbp), %rax
 7280 1f86 48C70000 		movq	$_ZTVN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE+16, (%rax)
 7280      000000
 7281 1f8d 488B45F8 		movq	-8(%rbp), %rax
 7282 1f91 4889C7   		movq	%rax, %rdi
 7283 1f94 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7283      00
 7284              	.LBE151:
 7285 1f99 B8000000 		movl	$0, %eax
 7285      00
 7286 1f9e 85C0     		testl	%eax, %eax
 7287 1fa0 740C     		je	.L386
  97:TestUnitTest++.cpp **** {
 7288              		.loc 4 97 0 is_stmt 0 discriminator 1
 7289 1fa2 488B45F8 		movq	-8(%rbp), %rax
 7290 1fa6 4889C7   		movq	%rax, %rdi
 7291 1fa9 E8000000 		call	_ZdlPv
 7291      00
 7292              	.L386:
  97:TestUnitTest++.cpp **** {
 7293              		.loc 4 97 0
 7294 1fae C9       		leave
 7295              		.cfi_def_cfa 7, 8
 7296 1faf C3       		ret
 7297              		.cfi_endproc
 7298              	.LFE1538:
 7300              		.set	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev,_ZN12_GLOBAL__N_140TestCheckT
 7301              		.align 2
 7303              	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD0Ev:
 7304              	.LFB1540:
  97:TestUnitTest++.cpp **** {
 7305              		.loc 4 97 0 is_stmt 1
 7306              		.cfi_startproc
 7307 1fb0 55       		pushq	%rbp
 7308              		.cfi_def_cfa_offset 16
 7309              		.cfi_offset 6, -16
 7310 1fb1 4889E5   		movq	%rsp, %rbp
 7311              		.cfi_def_cfa_register 6
 7312 1fb4 4883EC10 		subq	$16, %rsp
 7313 1fb8 48897DF8 		movq	%rdi, -8(%rbp)
  97:TestUnitTest++.cpp **** {
 7314              		.loc 4 97 0
 7315 1fbc 488B45F8 		movq	-8(%rbp), %rax
 7316 1fc0 4889C7   		movq	%rax, %rdi
 7317 1fc3 E8AEFFFF 		call	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev
 7317      FF
 7318 1fc8 488B45F8 		movq	-8(%rbp), %rax
 7319 1fcc 4889C7   		movq	%rax, %rdi
 7320 1fcf E8000000 		call	_ZdlPv
 7320      00
 7321 1fd4 C9       		leave
 7322              		.cfi_def_cfa 7, 8
 7323 1fd5 C3       		ret
 7324              		.cfi_endproc
 7325              	.LFE1540:
 7327              		.section	.rodata
 7328 0708 00000000 		.align 32
 7328      00000000 
 7328      00000000 
 7328      00000000 
 7328      00000000 
 7331              	_ZTVZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest:
 7332 0720 00000000 		.quad	0
 7332      00000000 
 7333 0728 00000000 		.quad	_ZTIZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
 7333      00000000 
 7334 0730 00000000 		.quad	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1E
 7334      00000000 
 7335 0738 00000000 		.quad	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD0E
 7335      00000000 
 7336 0740 00000000 		.quad	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvENK14WrongThrowTest7R
 7336      00000000 
 7337              		.text
 7338              		.align 2
 7340              	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD2Ev:
 7341              	.LFB1542:
  99:TestUnitTest++.cpp ****     {
 7342              		.loc 4 99 0
 7343              		.cfi_startproc
 7344 1fd6 55       		pushq	%rbp
 7345              		.cfi_def_cfa_offset 16
 7346              		.cfi_offset 6, -16
 7347 1fd7 4889E5   		movq	%rsp, %rbp
 7348              		.cfi_def_cfa_register 6
 7349 1fda 4883EC10 		subq	$16, %rsp
 7350 1fde 48897DF8 		movq	%rdi, -8(%rbp)
 7351              	.LBB152:
  99:TestUnitTest++.cpp ****     {
 7352              		.loc 4 99 0
 7353 1fe2 488B45F8 		movq	-8(%rbp), %rax
 7354 1fe6 48C70000 		movq	$_ZTVZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest+1
 7354      000000
 7355 1fed 488B45F8 		movq	-8(%rbp), %rax
 7356 1ff1 4889C7   		movq	%rax, %rdi
 7357 1ff4 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7357      00
 7358              	.LBE152:
 7359 1ff9 B8000000 		movl	$0, %eax
 7359      00
 7360 1ffe 85C0     		testl	%eax, %eax
 7361 2000 740C     		je	.L391
  99:TestUnitTest++.cpp ****     {
 7362              		.loc 4 99 0 is_stmt 0 discriminator 1
 7363 2002 488B45F8 		movq	-8(%rbp), %rax
 7364 2006 4889C7   		movq	%rax, %rdi
 7365 2009 E8000000 		call	_ZdlPv
 7365      00
 7366              	.L391:
  99:TestUnitTest++.cpp ****     {
 7367              		.loc 4 99 0
 7368 200e C9       		leave
 7369              		.cfi_def_cfa 7, 8
 7370 200f C3       		ret
 7371              		.cfi_endproc
 7372              	.LFE1542:
 7374              		.set	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
 7375              		.align 2
 7377              	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD0Ev:
 7378              	.LFB1544:
  99:TestUnitTest++.cpp ****     {
 7379              		.loc 4 99 0 is_stmt 1
 7380              		.cfi_startproc
 7381 2010 55       		pushq	%rbp
 7382              		.cfi_def_cfa_offset 16
 7383              		.cfi_offset 6, -16
 7384 2011 4889E5   		movq	%rsp, %rbp
 7385              		.cfi_def_cfa_register 6
 7386 2014 4883EC10 		subq	$16, %rsp
 7387 2018 48897DF8 		movq	%rdi, -8(%rbp)
  99:TestUnitTest++.cpp ****     {
 7388              		.loc 4 99 0
 7389 201c 488B45F8 		movq	-8(%rbp), %rax
 7390 2020 4889C7   		movq	%rax, %rdi
 7391 2023 E8AEFFFF 		call	_ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
 7391      FF
 7392 2028 488B45F8 		movq	-8(%rbp), %rax
 7393 202c 4889C7   		movq	%rax, %rdi
 7394 202f E8000000 		call	_ZdlPv
 7394      00
 7395 2034 C9       		leave
 7396              		.cfi_def_cfa 7, 8
 7397 2035 C3       		ret
 7398              		.cfi_endproc
 7399              	.LFE1544:
 7401              		.section	.rodata
 7402 0748 00000000 		.align 32
 7402      00000000 
 7402      00000000 
 7402      00000000 
 7402      00000000 
 7405              	_ZTVN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE:
 7406 0760 00000000 		.quad	0
 7406      00000000 
 7407 0768 00000000 		.quad	_ZTIN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
 7407      00000000 
 7408 0770 00000000 		.quad	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev
 7408      00000000 
 7409 0778 00000000 		.quad	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD0Ev
 7409      00000000 
 7410 0780 00000000 		.quad	_ZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEv
 7410      00000000 
 7411              		.text
 7412              		.align 2
 7414              	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD2Ev:
 7415              	.LFB1546:
  70:TestUnitTest++.cpp **** {
 7416              		.loc 4 70 0
 7417              		.cfi_startproc
 7418 2036 55       		pushq	%rbp
 7419              		.cfi_def_cfa_offset 16
 7420              		.cfi_offset 6, -16
 7421 2037 4889E5   		movq	%rsp, %rbp
 7422              		.cfi_def_cfa_register 6
 7423 203a 4883EC10 		subq	$16, %rsp
 7424 203e 48897DF8 		movq	%rdi, -8(%rbp)
 7425              	.LBB153:
  70:TestUnitTest++.cpp **** {
 7426              		.loc 4 70 0
 7427 2042 488B45F8 		movq	-8(%rbp), %rax
 7428 2046 48C70000 		movq	$_ZTVN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE+16, (%rax)
 7428      000000
 7429 204d 488B45F8 		movq	-8(%rbp), %rax
 7430 2051 4889C7   		movq	%rax, %rdi
 7431 2054 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7431      00
 7432              	.LBE153:
 7433 2059 B8000000 		movl	$0, %eax
 7433      00
 7434 205e 85C0     		testl	%eax, %eax
 7435 2060 740C     		je	.L396
  70:TestUnitTest++.cpp **** {
 7436              		.loc 4 70 0 is_stmt 0 discriminator 1
 7437 2062 488B45F8 		movq	-8(%rbp), %rax
 7438 2066 4889C7   		movq	%rax, %rdi
 7439 2069 E8000000 		call	_ZdlPv
 7439      00
 7440              	.L396:
  70:TestUnitTest++.cpp **** {
 7441              		.loc 4 70 0
 7442 206e C9       		leave
 7443              		.cfi_def_cfa 7, 8
 7444 206f C3       		ret
 7445              		.cfi_endproc
 7446              	.LFE1546:
 7448              		.set	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev,_ZN12_GLOBAL__N_142TestChec
 7449              		.align 2
 7451              	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD0Ev:
 7452              	.LFB1548:
  70:TestUnitTest++.cpp **** {
 7453              		.loc 4 70 0 is_stmt 1
 7454              		.cfi_startproc
 7455 2070 55       		pushq	%rbp
 7456              		.cfi_def_cfa_offset 16
 7457              		.cfi_offset 6, -16
 7458 2071 4889E5   		movq	%rsp, %rbp
 7459              		.cfi_def_cfa_register 6
 7460 2074 4883EC10 		subq	$16, %rsp
 7461 2078 48897DF8 		movq	%rdi, -8(%rbp)
  70:TestUnitTest++.cpp **** {
 7462              		.loc 4 70 0
 7463 207c 488B45F8 		movq	-8(%rbp), %rax
 7464 2080 4889C7   		movq	%rax, %rdi
 7465 2083 E8AEFFFF 		call	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev
 7465      FF
 7466 2088 488B45F8 		movq	-8(%rbp), %rax
 7467 208c 4889C7   		movq	%rax, %rdi
 7468 208f E8000000 		call	_ZdlPv
 7468      00
 7469 2094 C9       		leave
 7470              		.cfi_def_cfa 7, 8
 7471 2095 C3       		ret
 7472              		.cfi_endproc
 7473              	.LFE1548:
 7475              		.section	.rodata
 7476 0788 00000000 		.align 32
 7476      00000000 
 7476      00000000 
 7476      00000000 
 7476      00000000 
 7479              	_ZTVZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest:
 7480 07a0 00000000 		.quad	0
 7480      00000000 
 7481 07a8 00000000 		.quad	_ZTIZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
 7481      00000000 
 7482 07b0 00000000 		.quad	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
 7482      00000000 
 7483 07b8 00000000 		.quad	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD0Ev
 7483      00000000 
 7484 07c0 00000000 		.quad	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest7Ru
 7484      00000000 
 7485              		.text
 7486              		.align 2
 7488              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD2Ev:
 7489              	.LFB1550:
  72:TestUnitTest++.cpp ****     {
 7490              		.loc 4 72 0
 7491              		.cfi_startproc
 7492 2096 55       		pushq	%rbp
 7493              		.cfi_def_cfa_offset 16
 7494              		.cfi_offset 6, -16
 7495 2097 4889E5   		movq	%rsp, %rbp
 7496              		.cfi_def_cfa_register 6
 7497 209a 4883EC10 		subq	$16, %rsp
 7498 209e 48897DF8 		movq	%rdi, -8(%rbp)
 7499              	.LBB154:
  72:TestUnitTest++.cpp ****     {
 7500              		.loc 4 72 0
 7501 20a2 488B45F8 		movq	-8(%rbp), %rax
 7502 20a6 48C70000 		movq	$_ZTVZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest+16
 7502      000000
 7503 20ad 488B45F8 		movq	-8(%rbp), %rax
 7504 20b1 4889C7   		movq	%rax, %rdi
 7505 20b4 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7505      00
 7506              	.LBE154:
 7507 20b9 B8000000 		movl	$0, %eax
 7507      00
 7508 20be 85C0     		testl	%eax, %eax
 7509 20c0 740C     		je	.L401
  72:TestUnitTest++.cpp ****     {
 7510              		.loc 4 72 0 is_stmt 0 discriminator 1
 7511 20c2 488B45F8 		movq	-8(%rbp), %rax
 7512 20c6 4889C7   		movq	%rax, %rdi
 7513 20c9 E8000000 		call	_ZdlPv
 7513      00
 7514              	.L401:
  72:TestUnitTest++.cpp ****     {
 7515              		.loc 4 72 0
 7516 20ce C9       		leave
 7517              		.cfi_def_cfa 7, 8
 7518 20cf C3       		ret
 7519              		.cfi_endproc
 7520              	.LFE1550:
 7522              		.set	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev,
 7523              		.align 2
 7525              	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD0Ev:
 7526              	.LFB1552:
  72:TestUnitTest++.cpp ****     {
 7527              		.loc 4 72 0 is_stmt 1
 7528              		.cfi_startproc
 7529 20d0 55       		pushq	%rbp
 7530              		.cfi_def_cfa_offset 16
 7531              		.cfi_offset 6, -16
 7532 20d1 4889E5   		movq	%rsp, %rbp
 7533              		.cfi_def_cfa_register 6
 7534 20d4 4883EC10 		subq	$16, %rsp
 7535 20d8 48897DF8 		movq	%rdi, -8(%rbp)
  72:TestUnitTest++.cpp ****     {
 7536              		.loc 4 72 0
 7537 20dc 488B45F8 		movq	-8(%rbp), %rax
 7538 20e0 4889C7   		movq	%rax, %rdi
 7539 20e3 E8AEFFFF 		call	_ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
 7539      FF
 7540 20e8 488B45F8 		movq	-8(%rbp), %rax
 7541 20ec 4889C7   		movq	%rax, %rdi
 7542 20ef E8000000 		call	_ZdlPv
 7542      00
 7543 20f4 C9       		leave
 7544              		.cfi_def_cfa 7, 8
 7545 20f5 C3       		ret
 7546              		.cfi_endproc
 7547              	.LFE1552:
 7549              		.section	.rodata
 7550 07c8 00000000 		.align 32
 7550      00000000 
 7550      00000000 
 7550      00000000 
 7550      00000000 
 7553              	_ZTVN12_GLOBAL__N_123TestCheckAssertSucceedsE:
 7554 07e0 00000000 		.quad	0
 7554      00000000 
 7555 07e8 00000000 		.quad	_ZTIN12_GLOBAL__N_123TestCheckAssertSucceedsE
 7555      00000000 
 7556 07f0 00000000 		.quad	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev
 7556      00000000 
 7557 07f8 00000000 		.quad	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD0Ev
 7557      00000000 
 7558 0800 00000000 		.quad	_ZNK12_GLOBAL__N_123TestCheckAssertSucceeds7RunImplEv
 7558      00000000 
 7559              		.text
 7560              		.align 2
 7562              	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD2Ev:
 7563              	.LFB1554:
  65:TestUnitTest++.cpp **** {
 7564              		.loc 4 65 0
 7565              		.cfi_startproc
 7566 20f6 55       		pushq	%rbp
 7567              		.cfi_def_cfa_offset 16
 7568              		.cfi_offset 6, -16
 7569 20f7 4889E5   		movq	%rsp, %rbp
 7570              		.cfi_def_cfa_register 6
 7571 20fa 4883EC10 		subq	$16, %rsp
 7572 20fe 48897DF8 		movq	%rdi, -8(%rbp)
 7573              	.LBB155:
  65:TestUnitTest++.cpp **** {
 7574              		.loc 4 65 0
 7575 2102 488B45F8 		movq	-8(%rbp), %rax
 7576 2106 48C70000 		movq	$_ZTVN12_GLOBAL__N_123TestCheckAssertSucceedsE+16, (%rax)
 7576      000000
 7577 210d 488B45F8 		movq	-8(%rbp), %rax
 7578 2111 4889C7   		movq	%rax, %rdi
 7579 2114 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7579      00
 7580              	.LBE155:
 7581 2119 B8000000 		movl	$0, %eax
 7581      00
 7582 211e 85C0     		testl	%eax, %eax
 7583 2120 740C     		je	.L406
  65:TestUnitTest++.cpp **** {
 7584              		.loc 4 65 0 is_stmt 0 discriminator 1
 7585 2122 488B45F8 		movq	-8(%rbp), %rax
 7586 2126 4889C7   		movq	%rax, %rdi
 7587 2129 E8000000 		call	_ZdlPv
 7587      00
 7588              	.L406:
  65:TestUnitTest++.cpp **** {
 7589              		.loc 4 65 0
 7590 212e C9       		leave
 7591              		.cfi_def_cfa 7, 8
 7592 212f C3       		ret
 7593              		.cfi_endproc
 7594              	.LFE1554:
 7596              		.set	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev,_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD2Ev
 7597              		.align 2
 7599              	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD0Ev:
 7600              	.LFB1556:
  65:TestUnitTest++.cpp **** {
 7601              		.loc 4 65 0 is_stmt 1
 7602              		.cfi_startproc
 7603 2130 55       		pushq	%rbp
 7604              		.cfi_def_cfa_offset 16
 7605              		.cfi_offset 6, -16
 7606 2131 4889E5   		movq	%rsp, %rbp
 7607              		.cfi_def_cfa_register 6
 7608 2134 4883EC10 		subq	$16, %rsp
 7609 2138 48897DF8 		movq	%rdi, -8(%rbp)
  65:TestUnitTest++.cpp **** {
 7610              		.loc 4 65 0
 7611 213c 488B45F8 		movq	-8(%rbp), %rax
 7612 2140 4889C7   		movq	%rax, %rdi
 7613 2143 E8AEFFFF 		call	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev
 7613      FF
 7614 2148 488B45F8 		movq	-8(%rbp), %rax
 7615 214c 4889C7   		movq	%rax, %rdi
 7616 214f E8000000 		call	_ZdlPv
 7616      00
 7617 2154 C9       		leave
 7618              		.cfi_def_cfa 7, 8
 7619 2155 C3       		ret
 7620              		.cfi_endproc
 7621              	.LFE1556:
 7623              		.section	.rodata
 7624 0808 00000000 		.align 32
 7624      00000000 
 7624      00000000 
 7624      00000000 
 7624      00000000 
 7627              	_ZTVN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE:
 7628 0820 00000000 		.quad	0
 7628      00000000 
 7629 0828 00000000 		.quad	_ZTIN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
 7629      00000000 
 7630 0830 00000000 		.quad	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev
 7630      00000000 
 7631 0838 00000000 		.quad	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD0Ev
 7631      00000000 
 7632 0840 00000000 		.quad	_ZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEv
 7632      00000000 
 7633              		.text
 7634              		.align 2
 7636              	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD2Ev:
 7637              	.LFB1558:
  59:TestUnitTest++.cpp **** {
 7638              		.loc 4 59 0
 7639              		.cfi_startproc
 7640 2156 55       		pushq	%rbp
 7641              		.cfi_def_cfa_offset 16
 7642              		.cfi_offset 6, -16
 7643 2157 4889E5   		movq	%rsp, %rbp
 7644              		.cfi_def_cfa_register 6
 7645 215a 4883EC10 		subq	$16, %rsp
 7646 215e 48897DF8 		movq	%rdi, -8(%rbp)
 7647              	.LBB156:
  59:TestUnitTest++.cpp **** {
 7648              		.loc 4 59 0
 7649 2162 488B45F8 		movq	-8(%rbp), %rax
 7650 2166 48C70000 		movq	$_ZTVN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE+16, (%rax)
 7650      000000
 7651 216d 488B45F8 		movq	-8(%rbp), %rax
 7652 2171 4889C7   		movq	%rax, %rdi
 7653 2174 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7653      00
 7654              	.LBE156:
 7655 2179 B8000000 		movl	$0, %eax
 7655      00
 7656 217e 85C0     		testl	%eax, %eax
 7657 2180 740C     		je	.L411
  59:TestUnitTest++.cpp **** {
 7658              		.loc 4 59 0 is_stmt 0 discriminator 1
 7659 2182 488B45F8 		movq	-8(%rbp), %rax
 7660 2186 4889C7   		movq	%rax, %rdi
 7661 2189 E8000000 		call	_ZdlPv
 7661      00
 7662              	.L411:
  59:TestUnitTest++.cpp **** {
 7663              		.loc 4 59 0
 7664 218e C9       		leave
 7665              		.cfi_def_cfa 7, 8
 7666 218f C3       		ret
 7667              		.cfi_endproc
 7668              	.LFE1558:
 7670              		.set	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev,_ZN12_GLOBAL__N_145TestC
 7671              		.align 2
 7673              	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD0Ev:
 7674              	.LFB1560:
  59:TestUnitTest++.cpp **** {
 7675              		.loc 4 59 0 is_stmt 1
 7676              		.cfi_startproc
 7677 2190 55       		pushq	%rbp
 7678              		.cfi_def_cfa_offset 16
 7679              		.cfi_offset 6, -16
 7680 2191 4889E5   		movq	%rsp, %rbp
 7681              		.cfi_def_cfa_register 6
 7682 2194 4883EC10 		subq	$16, %rsp
 7683 2198 48897DF8 		movq	%rdi, -8(%rbp)
  59:TestUnitTest++.cpp **** {
 7684              		.loc 4 59 0
 7685 219c 488B45F8 		movq	-8(%rbp), %rax
 7686 21a0 4889C7   		movq	%rax, %rdi
 7687 21a3 E8AEFFFF 		call	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev
 7687      FF
 7688 21a8 488B45F8 		movq	-8(%rbp), %rax
 7689 21ac 4889C7   		movq	%rax, %rdi
 7690 21af E8000000 		call	_ZdlPv
 7690      00
 7691 21b4 C9       		leave
 7692              		.cfi_def_cfa 7, 8
 7693 21b5 C3       		ret
 7694              		.cfi_endproc
 7695              	.LFE1560:
 7697              		.section	.rodata
 7698 0848 00000000 		.align 32
 7698      00000000 
 7698      00000000 
 7698      00000000 
 7698      00000000 
 7701              	_ZTVN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE:
 7702 0860 00000000 		.quad	0
 7702      00000000 
 7703 0868 00000000 		.quad	_ZTIN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
 7703      00000000 
 7704 0870 00000000 		.quad	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev
 7704      00000000 
 7705 0878 00000000 		.quad	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD0Ev
 7705      00000000 
 7706 0880 00000000 		.quad	_ZNK12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectors7RunImplEv
 7706      00000000 
 7707              		.text
 7708              		.align 2
 7710              	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD2Ev:
 7711              	.LFB1562:
  50:TestUnitTest++.cpp **** {
 7712              		.loc 4 50 0
 7713              		.cfi_startproc
 7714 21b6 55       		pushq	%rbp
 7715              		.cfi_def_cfa_offset 16
 7716              		.cfi_offset 6, -16
 7717 21b7 4889E5   		movq	%rsp, %rbp
 7718              		.cfi_def_cfa_register 6
 7719 21ba 4883EC10 		subq	$16, %rsp
 7720 21be 48897DF8 		movq	%rdi, -8(%rbp)
 7721              	.LBB157:
  50:TestUnitTest++.cpp **** {
 7722              		.loc 4 50 0
 7723 21c2 488B45F8 		movq	-8(%rbp), %rax
 7724 21c6 48C70000 		movq	$_ZTVN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE+16, (%rax)
 7724      000000
 7725 21cd 488B45F8 		movq	-8(%rbp), %rax
 7726 21d1 4889C7   		movq	%rax, %rdi
 7727 21d4 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7727      00
 7728              	.LBE157:
 7729 21d9 B8000000 		movl	$0, %eax
 7729      00
 7730 21de 85C0     		testl	%eax, %eax
 7731 21e0 740C     		je	.L416
  50:TestUnitTest++.cpp **** {
 7732              		.loc 4 50 0 is_stmt 0 discriminator 1
 7733 21e2 488B45F8 		movq	-8(%rbp), %rax
 7734 21e6 4889C7   		movq	%rax, %rdi
 7735 21e9 E8000000 		call	_ZdlPv
 7735      00
 7736              	.L416:
  50:TestUnitTest++.cpp **** {
 7737              		.loc 4 50 0
 7738 21ee C9       		leave
 7739              		.cfi_def_cfa 7, 8
 7740 21ef C3       		ret
 7741              		.cfi_endproc
 7742              	.LFE1562:
 7744              		.set	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev,_ZN12_GLOBAL__N_135TestCheckArrayC
 7745              		.align 2
 7747              	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD0Ev:
 7748              	.LFB1564:
  50:TestUnitTest++.cpp **** {
 7749              		.loc 4 50 0 is_stmt 1
 7750              		.cfi_startproc
 7751 21f0 55       		pushq	%rbp
 7752              		.cfi_def_cfa_offset 16
 7753              		.cfi_offset 6, -16
 7754 21f1 4889E5   		movq	%rsp, %rbp
 7755              		.cfi_def_cfa_register 6
 7756 21f4 4883EC10 		subq	$16, %rsp
 7757 21f8 48897DF8 		movq	%rdi, -8(%rbp)
  50:TestUnitTest++.cpp **** {
 7758              		.loc 4 50 0
 7759 21fc 488B45F8 		movq	-8(%rbp), %rax
 7760 2200 4889C7   		movq	%rax, %rdi
 7761 2203 E8AEFFFF 		call	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev
 7761      FF
 7762 2208 488B45F8 		movq	-8(%rbp), %rax
 7763 220c 4889C7   		movq	%rax, %rdi
 7764 220f E8000000 		call	_ZdlPv
 7764      00
 7765 2214 C9       		leave
 7766              		.cfi_def_cfa 7, 8
 7767 2215 C3       		ret
 7768              		.cfi_endproc
 7769              	.LFE1564:
 7771              		.section	.rodata
 7772 0888 00000000 		.align 32
 7772      00000000 
 7772      00000000 
 7772      00000000 
 7772      00000000 
 7775              	_ZTVN12_GLOBAL__N_122TestArrayCloseSucceedsE:
 7776 08a0 00000000 		.quad	0
 7776      00000000 
 7777 08a8 00000000 		.quad	_ZTIN12_GLOBAL__N_122TestArrayCloseSucceedsE
 7777      00000000 
 7778 08b0 00000000 		.quad	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev
 7778      00000000 
 7779 08b8 00000000 		.quad	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD0Ev
 7779      00000000 
 7780 08c0 00000000 		.quad	_ZNK12_GLOBAL__N_122TestArrayCloseSucceeds7RunImplEv
 7780      00000000 
 7781              		.text
 7782              		.align 2
 7784              	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD2Ev:
 7785              	.LFB1566:
  43:TestUnitTest++.cpp **** {
 7786              		.loc 4 43 0
 7787              		.cfi_startproc
 7788 2216 55       		pushq	%rbp
 7789              		.cfi_def_cfa_offset 16
 7790              		.cfi_offset 6, -16
 7791 2217 4889E5   		movq	%rsp, %rbp
 7792              		.cfi_def_cfa_register 6
 7793 221a 4883EC10 		subq	$16, %rsp
 7794 221e 48897DF8 		movq	%rdi, -8(%rbp)
 7795              	.LBB158:
  43:TestUnitTest++.cpp **** {
 7796              		.loc 4 43 0
 7797 2222 488B45F8 		movq	-8(%rbp), %rax
 7798 2226 48C70000 		movq	$_ZTVN12_GLOBAL__N_122TestArrayCloseSucceedsE+16, (%rax)
 7798      000000
 7799 222d 488B45F8 		movq	-8(%rbp), %rax
 7800 2231 4889C7   		movq	%rax, %rdi
 7801 2234 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7801      00
 7802              	.LBE158:
 7803 2239 B8000000 		movl	$0, %eax
 7803      00
 7804 223e 85C0     		testl	%eax, %eax
 7805 2240 740C     		je	.L421
  43:TestUnitTest++.cpp **** {
 7806              		.loc 4 43 0 is_stmt 0 discriminator 1
 7807 2242 488B45F8 		movq	-8(%rbp), %rax
 7808 2246 4889C7   		movq	%rax, %rdi
 7809 2249 E8000000 		call	_ZdlPv
 7809      00
 7810              	.L421:
  43:TestUnitTest++.cpp **** {
 7811              		.loc 4 43 0
 7812 224e C9       		leave
 7813              		.cfi_def_cfa 7, 8
 7814 224f C3       		ret
 7815              		.cfi_endproc
 7816              	.LFE1566:
 7818              		.set	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev,_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD2Ev
 7819              		.align 2
 7821              	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD0Ev:
 7822              	.LFB1568:
  43:TestUnitTest++.cpp **** {
 7823              		.loc 4 43 0 is_stmt 1
 7824              		.cfi_startproc
 7825 2250 55       		pushq	%rbp
 7826              		.cfi_def_cfa_offset 16
 7827              		.cfi_offset 6, -16
 7828 2251 4889E5   		movq	%rsp, %rbp
 7829              		.cfi_def_cfa_register 6
 7830 2254 4883EC10 		subq	$16, %rsp
 7831 2258 48897DF8 		movq	%rdi, -8(%rbp)
  43:TestUnitTest++.cpp **** {
 7832              		.loc 4 43 0
 7833 225c 488B45F8 		movq	-8(%rbp), %rax
 7834 2260 4889C7   		movq	%rax, %rdi
 7835 2263 E8AEFFFF 		call	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev
 7835      FF
 7836 2268 488B45F8 		movq	-8(%rbp), %rax
 7837 226c 4889C7   		movq	%rax, %rdi
 7838 226f E8000000 		call	_ZdlPv
 7838      00
 7839 2274 C9       		leave
 7840              		.cfi_def_cfa 7, 8
 7841 2275 C3       		ret
 7842              		.cfi_endproc
 7843              	.LFE1568:
 7845              		.section	.rodata
 7846 08c8 00000000 		.align 32
 7846      00000000 
 7846      00000000 
 7846      00000000 
 7846      00000000 
 7849              	_ZTVN12_GLOBAL__N_127TestValidCheckCloseSucceedsE:
 7850 08e0 00000000 		.quad	0
 7850      00000000 
 7851 08e8 00000000 		.quad	_ZTIN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
 7851      00000000 
 7852 08f0 00000000 		.quad	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev
 7852      00000000 
 7853 08f8 00000000 		.quad	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD0Ev
 7853      00000000 
 7854 0900 00000000 		.quad	_ZNK12_GLOBAL__N_127TestValidCheckCloseSucceeds7RunImplEv
 7854      00000000 
 7855              		.text
 7856              		.align 2
 7858              	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD2Ev:
 7859              	.LFB1570:
  37:TestUnitTest++.cpp **** {
 7860              		.loc 4 37 0
 7861              		.cfi_startproc
 7862 2276 55       		pushq	%rbp
 7863              		.cfi_def_cfa_offset 16
 7864              		.cfi_offset 6, -16
 7865 2277 4889E5   		movq	%rsp, %rbp
 7866              		.cfi_def_cfa_register 6
 7867 227a 4883EC10 		subq	$16, %rsp
 7868 227e 48897DF8 		movq	%rdi, -8(%rbp)
 7869              	.LBB159:
  37:TestUnitTest++.cpp **** {
 7870              		.loc 4 37 0
 7871 2282 488B45F8 		movq	-8(%rbp), %rax
 7872 2286 48C70000 		movq	$_ZTVN12_GLOBAL__N_127TestValidCheckCloseSucceedsE+16, (%rax)
 7872      000000
 7873 228d 488B45F8 		movq	-8(%rbp), %rax
 7874 2291 4889C7   		movq	%rax, %rdi
 7875 2294 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7875      00
 7876              	.LBE159:
 7877 2299 B8000000 		movl	$0, %eax
 7877      00
 7878 229e 85C0     		testl	%eax, %eax
 7879 22a0 740C     		je	.L426
  37:TestUnitTest++.cpp **** {
 7880              		.loc 4 37 0 is_stmt 0 discriminator 1
 7881 22a2 488B45F8 		movq	-8(%rbp), %rax
 7882 22a6 4889C7   		movq	%rax, %rdi
 7883 22a9 E8000000 		call	_ZdlPv
 7883      00
 7884              	.L426:
  37:TestUnitTest++.cpp **** {
 7885              		.loc 4 37 0
 7886 22ae C9       		leave
 7887              		.cfi_def_cfa 7, 8
 7888 22af C3       		ret
 7889              		.cfi_endproc
 7890              	.LFE1570:
 7892              		.set	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev,_ZN12_GLOBAL__N_127TestValidCheckCloseSucc
 7893              		.align 2
 7895              	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD0Ev:
 7896              	.LFB1572:
  37:TestUnitTest++.cpp **** {
 7897              		.loc 4 37 0 is_stmt 1
 7898              		.cfi_startproc
 7899 22b0 55       		pushq	%rbp
 7900              		.cfi_def_cfa_offset 16
 7901              		.cfi_offset 6, -16
 7902 22b1 4889E5   		movq	%rsp, %rbp
 7903              		.cfi_def_cfa_register 6
 7904 22b4 4883EC10 		subq	$16, %rsp
 7905 22b8 48897DF8 		movq	%rdi, -8(%rbp)
  37:TestUnitTest++.cpp **** {
 7906              		.loc 4 37 0
 7907 22bc 488B45F8 		movq	-8(%rbp), %rax
 7908 22c0 4889C7   		movq	%rax, %rdi
 7909 22c3 E8AEFFFF 		call	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev
 7909      FF
 7910 22c8 488B45F8 		movq	-8(%rbp), %rax
 7911 22cc 4889C7   		movq	%rax, %rdi
 7912 22cf E8000000 		call	_ZdlPv
 7912      00
 7913 22d4 C9       		leave
 7914              		.cfi_def_cfa 7, 8
 7915 22d5 C3       		ret
 7916              		.cfi_endproc
 7917              	.LFE1572:
 7919              		.section	.rodata
 7920 0908 00000000 		.align 32
 7920      00000000 
 7920      00000000 
 7920      00000000 
 7920      00000000 
 7923              	_ZTVN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE:
 7924 0920 00000000 		.quad	0
 7924      00000000 
 7925 0928 00000000 		.quad	_ZTIN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
 7925      00000000 
 7926 0930 00000000 		.quad	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev
 7926      00000000 
 7927 0938 00000000 		.quad	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD0Ev
 7927      00000000 
 7928 0940 00000000 		.quad	_ZNK12_GLOBAL__N_131TestCheckEqualWorksWithPointers7RunImplEv
 7928      00000000 
 7929              		.text
 7930              		.align 2
 7932              	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD2Ev:
 7933              	.LFB1574:
  31:TestUnitTest++.cpp **** {
 7934              		.loc 4 31 0
 7935              		.cfi_startproc
 7936 22d6 55       		pushq	%rbp
 7937              		.cfi_def_cfa_offset 16
 7938              		.cfi_offset 6, -16
 7939 22d7 4889E5   		movq	%rsp, %rbp
 7940              		.cfi_def_cfa_register 6
 7941 22da 4883EC10 		subq	$16, %rsp
 7942 22de 48897DF8 		movq	%rdi, -8(%rbp)
 7943              	.LBB160:
  31:TestUnitTest++.cpp **** {
 7944              		.loc 4 31 0
 7945 22e2 488B45F8 		movq	-8(%rbp), %rax
 7946 22e6 48C70000 		movq	$_ZTVN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE+16, (%rax)
 7946      000000
 7947 22ed 488B45F8 		movq	-8(%rbp), %rax
 7948 22f1 4889C7   		movq	%rax, %rdi
 7949 22f4 E8000000 		call	_ZN8UnitTest4TestD2Ev
 7949      00
 7950              	.LBE160:
 7951 22f9 B8000000 		movl	$0, %eax
 7951      00
 7952 22fe 85C0     		testl	%eax, %eax
 7953 2300 740C     		je	.L431
  31:TestUnitTest++.cpp **** {
 7954              		.loc 4 31 0 is_stmt 0 discriminator 1
 7955 2302 488B45F8 		movq	-8(%rbp), %rax
 7956 2306 4889C7   		movq	%rax, %rdi
 7957 2309 E8000000 		call	_ZdlPv
 7957      00
 7958              	.L431:
  31:TestUnitTest++.cpp **** {
 7959              		.loc 4 31 0
 7960 230e C9       		leave
 7961              		.cfi_def_cfa 7, 8
 7962 230f C3       		ret
 7963              		.cfi_endproc
 7964              	.LFE1574:
 7966              		.set	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev,_ZN12_GLOBAL__N_131TestCheckEqualWorks
 7967              		.align 2
 7969              	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD0Ev:
 7970              	.LFB1576:
  31:TestUnitTest++.cpp **** {
 7971              		.loc 4 31 0 is_stmt 1
 7972              		.cfi_startproc
 7973 2310 55       		pushq	%rbp
 7974              		.cfi_def_cfa_offset 16
 7975              		.cfi_offset 6, -16
 7976 2311 4889E5   		movq	%rsp, %rbp
 7977              		.cfi_def_cfa_register 6
 7978 2314 4883EC10 		subq	$16, %rsp
 7979 2318 48897DF8 		movq	%rdi, -8(%rbp)
  31:TestUnitTest++.cpp **** {
 7980              		.loc 4 31 0
 7981 231c 488B45F8 		movq	-8(%rbp), %rax
 7982 2320 4889C7   		movq	%rax, %rdi
 7983 2323 E8AEFFFF 		call	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev
 7983      FF
 7984 2328 488B45F8 		movq	-8(%rbp), %rax
 7985 232c 4889C7   		movq	%rax, %rdi
 7986 232f E8000000 		call	_ZdlPv
 7986      00
 7987 2334 C9       		leave
 7988              		.cfi_def_cfa 7, 8
 7989 2335 C3       		ret
 7990              		.cfi_endproc
 7991              	.LFE1576:
 7993              		.section	.rodata
 7994 0948 00000000 		.align 32
 7994      00000000 
 7994      00000000 
 7994      00000000 
 7994      00000000 
 7997              	_ZTVN12_GLOBAL__N_127TestValidCheckEqualSucceedsE:
 7998 0960 00000000 		.quad	0
 7998      00000000 
 7999 0968 00000000 		.quad	_ZTIN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
 7999      00000000 
 8000 0970 00000000 		.quad	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev
 8000      00000000 
 8001 0978 00000000 		.quad	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD0Ev
 8001      00000000 
 8002 0980 00000000 		.quad	_ZNK12_GLOBAL__N_127TestValidCheckEqualSucceeds7RunImplEv
 8002      00000000 
 8003              		.text
 8004              		.align 2
 8006              	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD2Ev:
 8007              	.LFB1578:
  24:TestUnitTest++.cpp **** {
 8008              		.loc 4 24 0
 8009              		.cfi_startproc
 8010 2336 55       		pushq	%rbp
 8011              		.cfi_def_cfa_offset 16
 8012              		.cfi_offset 6, -16
 8013 2337 4889E5   		movq	%rsp, %rbp
 8014              		.cfi_def_cfa_register 6
 8015 233a 4883EC10 		subq	$16, %rsp
 8016 233e 48897DF8 		movq	%rdi, -8(%rbp)
 8017              	.LBB161:
  24:TestUnitTest++.cpp **** {
 8018              		.loc 4 24 0
 8019 2342 488B45F8 		movq	-8(%rbp), %rax
 8020 2346 48C70000 		movq	$_ZTVN12_GLOBAL__N_127TestValidCheckEqualSucceedsE+16, (%rax)
 8020      000000
 8021 234d 488B45F8 		movq	-8(%rbp), %rax
 8022 2351 4889C7   		movq	%rax, %rdi
 8023 2354 E8000000 		call	_ZN8UnitTest4TestD2Ev
 8023      00
 8024              	.LBE161:
 8025 2359 B8000000 		movl	$0, %eax
 8025      00
 8026 235e 85C0     		testl	%eax, %eax
 8027 2360 740C     		je	.L436
  24:TestUnitTest++.cpp **** {
 8028              		.loc 4 24 0 is_stmt 0 discriminator 1
 8029 2362 488B45F8 		movq	-8(%rbp), %rax
 8030 2366 4889C7   		movq	%rax, %rdi
 8031 2369 E8000000 		call	_ZdlPv
 8031      00
 8032              	.L436:
  24:TestUnitTest++.cpp **** {
 8033              		.loc 4 24 0
 8034 236e C9       		leave
 8035              		.cfi_def_cfa 7, 8
 8036 236f C3       		ret
 8037              		.cfi_endproc
 8038              	.LFE1578:
 8040              		.set	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev,_ZN12_GLOBAL__N_127TestValidCheckEqualSucc
 8041              		.align 2
 8043              	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD0Ev:
 8044              	.LFB1580:
  24:TestUnitTest++.cpp **** {
 8045              		.loc 4 24 0 is_stmt 1
 8046              		.cfi_startproc
 8047 2370 55       		pushq	%rbp
 8048              		.cfi_def_cfa_offset 16
 8049              		.cfi_offset 6, -16
 8050 2371 4889E5   		movq	%rsp, %rbp
 8051              		.cfi_def_cfa_register 6
 8052 2374 4883EC10 		subq	$16, %rsp
 8053 2378 48897DF8 		movq	%rdi, -8(%rbp)
  24:TestUnitTest++.cpp **** {
 8054              		.loc 4 24 0
 8055 237c 488B45F8 		movq	-8(%rbp), %rax
 8056 2380 4889C7   		movq	%rax, %rdi
 8057 2383 E8AEFFFF 		call	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev
 8057      FF
 8058 2388 488B45F8 		movq	-8(%rbp), %rax
 8059 238c 4889C7   		movq	%rax, %rdi
 8060 238f E8000000 		call	_ZdlPv
 8060      00
 8061 2394 C9       		leave
 8062              		.cfi_def_cfa 7, 8
 8063 2395 C3       		ret
 8064              		.cfi_endproc
 8065              	.LFE1580:
 8067              		.section	.rodata
 8068 0988 00000000 		.align 32
 8068      00000000 
 8068      00000000 
 8068      00000000 
 8068      00000000 
 8071              	_ZTVN12_GLOBAL__N_126TestCheckWorksWithPointersE:
 8072 09a0 00000000 		.quad	0
 8072      00000000 
 8073 09a8 00000000 		.quad	_ZTIN12_GLOBAL__N_126TestCheckWorksWithPointersE
 8073      00000000 
 8074 09b0 00000000 		.quad	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev
 8074      00000000 
 8075 09b8 00000000 		.quad	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD0Ev
 8075      00000000 
 8076 09c0 00000000 		.quad	_ZNK12_GLOBAL__N_126TestCheckWorksWithPointers7RunImplEv
 8076      00000000 
 8077              		.text
 8078              		.align 2
 8080              	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD2Ev:
 8081              	.LFB1582:
  17:TestUnitTest++.cpp **** {
 8082              		.loc 4 17 0
 8083              		.cfi_startproc
 8084 2396 55       		pushq	%rbp
 8085              		.cfi_def_cfa_offset 16
 8086              		.cfi_offset 6, -16
 8087 2397 4889E5   		movq	%rsp, %rbp
 8088              		.cfi_def_cfa_register 6
 8089 239a 4883EC10 		subq	$16, %rsp
 8090 239e 48897DF8 		movq	%rdi, -8(%rbp)
 8091              	.LBB162:
  17:TestUnitTest++.cpp **** {
 8092              		.loc 4 17 0
 8093 23a2 488B45F8 		movq	-8(%rbp), %rax
 8094 23a6 48C70000 		movq	$_ZTVN12_GLOBAL__N_126TestCheckWorksWithPointersE+16, (%rax)
 8094      000000
 8095 23ad 488B45F8 		movq	-8(%rbp), %rax
 8096 23b1 4889C7   		movq	%rax, %rdi
 8097 23b4 E8000000 		call	_ZN8UnitTest4TestD2Ev
 8097      00
 8098              	.LBE162:
 8099 23b9 B8000000 		movl	$0, %eax
 8099      00
 8100 23be 85C0     		testl	%eax, %eax
 8101 23c0 740C     		je	.L441
  17:TestUnitTest++.cpp **** {
 8102              		.loc 4 17 0 is_stmt 0 discriminator 1
 8103 23c2 488B45F8 		movq	-8(%rbp), %rax
 8104 23c6 4889C7   		movq	%rax, %rdi
 8105 23c9 E8000000 		call	_ZdlPv
 8105      00
 8106              	.L441:
  17:TestUnitTest++.cpp **** {
 8107              		.loc 4 17 0
 8108 23ce C9       		leave
 8109              		.cfi_def_cfa 7, 8
 8110 23cf C3       		ret
 8111              		.cfi_endproc
 8112              	.LFE1582:
 8114              		.set	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev,_ZN12_GLOBAL__N_126TestCheckWorksWithPointe
 8115              		.align 2
 8117              	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD0Ev:
 8118              	.LFB1584:
  17:TestUnitTest++.cpp **** {
 8119              		.loc 4 17 0 is_stmt 1
 8120              		.cfi_startproc
 8121 23d0 55       		pushq	%rbp
 8122              		.cfi_def_cfa_offset 16
 8123              		.cfi_offset 6, -16
 8124 23d1 4889E5   		movq	%rsp, %rbp
 8125              		.cfi_def_cfa_register 6
 8126 23d4 4883EC10 		subq	$16, %rsp
 8127 23d8 48897DF8 		movq	%rdi, -8(%rbp)
  17:TestUnitTest++.cpp **** {
 8128              		.loc 4 17 0
 8129 23dc 488B45F8 		movq	-8(%rbp), %rax
 8130 23e0 4889C7   		movq	%rax, %rdi
 8131 23e3 E8AEFFFF 		call	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev
 8131      FF
 8132 23e8 488B45F8 		movq	-8(%rbp), %rax
 8133 23ec 4889C7   		movq	%rax, %rdi
 8134 23ef E8000000 		call	_ZdlPv
 8134      00
 8135 23f4 C9       		leave
 8136              		.cfi_def_cfa 7, 8
 8137 23f5 C3       		ret
 8138              		.cfi_endproc
 8139              	.LFE1584:
 8141              		.section	.rodata
 8142 09c8 00000000 		.align 32
 8142      00000000 
 8142      00000000 
 8142      00000000 
 8142      00000000 
 8145              	_ZTVN12_GLOBAL__N_122TestValidCheckSucceedsE:
 8146 09e0 00000000 		.quad	0
 8146      00000000 
 8147 09e8 00000000 		.quad	_ZTIN12_GLOBAL__N_122TestValidCheckSucceedsE
 8147      00000000 
 8148 09f0 00000000 		.quad	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev
 8148      00000000 
 8149 09f8 00000000 		.quad	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD0Ev
 8149      00000000 
 8150 0a00 00000000 		.quad	_ZNK12_GLOBAL__N_122TestValidCheckSucceeds7RunImplEv
 8150      00000000 
 8151              		.text
 8152              		.align 2
 8154              	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD2Ev:
 8155              	.LFB1586:
  11:TestUnitTest++.cpp **** {
 8156              		.loc 4 11 0
 8157              		.cfi_startproc
 8158 23f6 55       		pushq	%rbp
 8159              		.cfi_def_cfa_offset 16
 8160              		.cfi_offset 6, -16
 8161 23f7 4889E5   		movq	%rsp, %rbp
 8162              		.cfi_def_cfa_register 6
 8163 23fa 4883EC10 		subq	$16, %rsp
 8164 23fe 48897DF8 		movq	%rdi, -8(%rbp)
 8165              	.LBB163:
  11:TestUnitTest++.cpp **** {
 8166              		.loc 4 11 0
 8167 2402 488B45F8 		movq	-8(%rbp), %rax
 8168 2406 48C70000 		movq	$_ZTVN12_GLOBAL__N_122TestValidCheckSucceedsE+16, (%rax)
 8168      000000
 8169 240d 488B45F8 		movq	-8(%rbp), %rax
 8170 2411 4889C7   		movq	%rax, %rdi
 8171 2414 E8000000 		call	_ZN8UnitTest4TestD2Ev
 8171      00
 8172              	.LBE163:
 8173 2419 B8000000 		movl	$0, %eax
 8173      00
 8174 241e 85C0     		testl	%eax, %eax
 8175 2420 740C     		je	.L446
  11:TestUnitTest++.cpp **** {
 8176              		.loc 4 11 0 is_stmt 0 discriminator 1
 8177 2422 488B45F8 		movq	-8(%rbp), %rax
 8178 2426 4889C7   		movq	%rax, %rdi
 8179 2429 E8000000 		call	_ZdlPv
 8179      00
 8180              	.L446:
  11:TestUnitTest++.cpp **** {
 8181              		.loc 4 11 0
 8182 242e C9       		leave
 8183              		.cfi_def_cfa 7, 8
 8184 242f C3       		ret
 8185              		.cfi_endproc
 8186              	.LFE1586:
 8188              		.set	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev,_ZN12_GLOBAL__N_122TestValidCheckSucceedsD2Ev
 8189              		.align 2
 8191              	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD0Ev:
 8192              	.LFB1588:
  11:TestUnitTest++.cpp **** {
 8193              		.loc 4 11 0 is_stmt 1
 8194              		.cfi_startproc
 8195 2430 55       		pushq	%rbp
 8196              		.cfi_def_cfa_offset 16
 8197              		.cfi_offset 6, -16
 8198 2431 4889E5   		movq	%rsp, %rbp
 8199              		.cfi_def_cfa_register 6
 8200 2434 4883EC10 		subq	$16, %rsp
 8201 2438 48897DF8 		movq	%rdi, -8(%rbp)
  11:TestUnitTest++.cpp **** {
 8202              		.loc 4 11 0
 8203 243c 488B45F8 		movq	-8(%rbp), %rax
 8204 2440 4889C7   		movq	%rax, %rdi
 8205 2443 E8AEFFFF 		call	_ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev
 8205      FF
 8206 2448 488B45F8 		movq	-8(%rbp), %rax
 8207 244c 4889C7   		movq	%rax, %rdi
 8208 244f E8000000 		call	_ZdlPv
 8208      00
 8209 2454 C9       		leave
 8210              		.cfi_def_cfa 7, 8
 8211 2455 C3       		ret
 8212              		.cfi_endproc
 8213              	.LFE1588:
 8215              		.weak	_ZTVN8UnitTest15MemoryOutStreamE
 8216              		.section	.rodata._ZTVN8UnitTest15MemoryOutStreamE,"aG",@progbits,_ZTVN8UnitTest15MemoryOutStreamE,
 8217              		.align 32
 8220              	_ZTVN8UnitTest15MemoryOutStreamE:
 8221 0000 60000000 		.quad	96
 8221      00000000 
 8222 0008 00000000 		.quad	0
 8222      00000000 
 8223 0010 00000000 		.quad	_ZTIN8UnitTest15MemoryOutStreamE
 8223      00000000 
 8224 0018 00000000 		.quad	_ZN8UnitTest15MemoryOutStreamD1Ev
 8224      00000000 
 8225 0020 00000000 		.quad	_ZN8UnitTest15MemoryOutStreamD0Ev
 8225      00000000 
 8226 0028 A0FFFFFF 		.quad	-96
 8226      FFFFFFFF 
 8227 0030 A0FFFFFF 		.quad	-96
 8227      FFFFFFFF 
 8228 0038 00000000 		.quad	_ZTIN8UnitTest15MemoryOutStreamE
 8228      00000000 
 8229 0040 00000000 		.quad	_ZTv0_n24_N8UnitTest15MemoryOutStreamD1Ev
 8229      00000000 
 8230 0048 00000000 		.quad	_ZTv0_n24_N8UnitTest15MemoryOutStreamD0Ev
 8230      00000000 
 8231              		.section	.text._ZN8UnitTest15MemoryOutStreamD1Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamD1Ev
 8232              		.align 2
 8233              		.weak	_ZN8UnitTest15MemoryOutStreamD1Ev
 8235              	_ZN8UnitTest15MemoryOutStreamD1Ev:
 8236              	.LFB1591:
  13:../MemoryOutStream.h **** {
 8237              		.loc 2 13 0
 8238              		.cfi_startproc
 8239              		.cfi_personality 0x3,__gxx_personality_v0
 8240              		.cfi_lsda 0x3,.LLSDA1591
 8241 0000 55       		pushq	%rbp
 8242              		.cfi_def_cfa_offset 16
 8243              		.cfi_offset 6, -16
 8244 0001 4889E5   		movq	%rsp, %rbp
 8245              		.cfi_def_cfa_register 6
 8246 0004 53       		pushq	%rbx
 8247 0005 4883EC18 		subq	$24, %rsp
 8248              		.cfi_offset 3, -24
 8249 0009 48897DE8 		movq	%rdi, -24(%rbp)
 8250              	.LBB164:
  13:../MemoryOutStream.h **** {
 8251              		.loc 2 13 0
 8252 000d BA000000 		movl	$_ZTVN8UnitTest15MemoryOutStreamE+24, %edx
 8252      00
 8253 0012 488B45E8 		movq	-24(%rbp), %rax
 8254 0016 488910   		movq	%rdx, (%rax)
 8255 0019 BA600000 		movl	$96, %edx
 8255      00
 8256 001e 488B45E8 		movq	-24(%rbp), %rax
 8257 0022 4801C2   		addq	%rax, %rdx
 8258 0025 B8000000 		movl	$_ZTVN8UnitTest15MemoryOutStreamE+64, %eax
 8258      00
 8259 002a 488902   		movq	%rax, (%rdx)
 8260 002d 488B45E8 		movq	-24(%rbp), %rax
 8261 0031 4883C058 		addq	$88, %rax
 8262 0035 4889C7   		movq	%rax, %rdi
 8263              	.LEHB156:
 8264 0038 E8000000 		call	_ZNSsD1Ev
 8264      00
 8265              	.LEHE156:
  13:../MemoryOutStream.h **** {
 8266              		.loc 2 13 0 is_stmt 0 discriminator 10
 8267 003d BA000000 		movl	$_ZTTN8UnitTest15MemoryOutStreamE+8, %edx
 8267      00
 8268 0042 488B45E8 		movq	-24(%rbp), %rax
 8269 0046 4889D6   		movq	%rdx, %rsi
 8270 0049 4889C7   		movq	%rax, %rdi
 8271              	.LEHB157:
 8272 004c E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED2Ev
 8272      00
 8273              	.LEHE157:
  13:../MemoryOutStream.h **** {
 8274              		.loc 2 13 0 discriminator 14
 8275 0051 B8020000 		movl	$2, %eax
 8275      00
 8276 0056 85C0     		testl	%eax, %eax
 8277 0058 7410     		je	.L452
  13:../MemoryOutStream.h **** {
 8278              		.loc 2 13 0 discriminator 15
 8279 005a 488B45E8 		movq	-24(%rbp), %rax
 8280 005e 4883C060 		addq	$96, %rax
 8281 0062 4889C7   		movq	%rax, %rdi
 8282              	.LEHB158:
 8283 0065 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev
 8283      00
 8284              	.LEHE158:
 8285              	.L452:
 8286              	.LBE164:
  13:../MemoryOutStream.h **** {
 8287              		.loc 2 13 0 discriminator 16
 8288 006a B8000000 		movl	$0, %eax
 8288      00
 8289 006f 85C0     		testl	%eax, %eax
 8290 0071 744E     		je	.L459
  13:../MemoryOutStream.h **** {
 8291              		.loc 2 13 0 discriminator 1
 8292 0073 488B45E8 		movq	-24(%rbp), %rax
 8293 0077 4889C7   		movq	%rax, %rdi
 8294 007a E8000000 		call	_ZdlPv
 8294      00
 8295 007f EB40     		jmp	.L459
 8296              	.L457:
 8297 0081 4889C3   		movq	%rax, %rbx
 8298              	.LBB165:
  13:../MemoryOutStream.h **** {
 8299              		.loc 2 13 0
 8300 0084 BA000000 		movl	$_ZTTN8UnitTest15MemoryOutStreamE+8, %edx
 8300      00
 8301 0089 488B45E8 		movq	-24(%rbp), %rax
 8302 008d 4889D6   		movq	%rdx, %rsi
 8303 0090 4889C7   		movq	%rax, %rdi
 8304 0093 E8000000 		call	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED2Ev
 8304      00
 8305 0098 EB03     		jmp	.L455
 8306              	.L458:
 8307 009a 4889C3   		movq	%rax, %rbx
 8308              	.L455:
 8309 009d B8020000 		movl	$2, %eax
 8309      00
 8310 00a2 85C0     		testl	%eax, %eax
 8311 00a4 7410     		je	.L456
  13:../MemoryOutStream.h **** {
 8312              		.loc 2 13 0 discriminator 20
 8313 00a6 488B45E8 		movq	-24(%rbp), %rax
 8314 00aa 4883C060 		addq	$96, %rax
 8315 00ae 4889C7   		movq	%rax, %rdi
 8316 00b1 E8000000 		call	_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev
 8316      00
 8317              	.L456:
 8318 00b6 4889D8   		movq	%rbx, %rax
 8319 00b9 4889C7   		movq	%rax, %rdi
 8320              	.LEHB159:
 8321 00bc E8000000 		call	_Unwind_Resume
 8321      00
 8322              	.LEHE159:
 8323              	.L459:
 8324              	.LBE165:
  13:../MemoryOutStream.h **** {
 8325              		.loc 2 13 0
 8326 00c1 4883C418 		addq	$24, %rsp
 8327 00c5 5B       		popq	%rbx
 8328 00c6 5D       		popq	%rbp
 8329              		.cfi_def_cfa 7, 8
 8330 00c7 C3       		ret
 8331              		.cfi_endproc
 8332              	.LFE1591:
 8333              		.section	.gcc_except_table
 8334              	.LLSDA1591:
 8335 0448 FF       		.byte	0xff
 8336 0449 FF       		.byte	0xff
 8337 044a 01       		.byte	0x1
 8338 044b 13       		.uleb128 .LLSDACSE1591-.LLSDACSB1591
 8339              	.LLSDACSB1591:
 8340 044c 38       		.uleb128 .LEHB156-.LFB1591
 8341 044d 05       		.uleb128 .LEHE156-.LEHB156
 8342 044e 8101     		.uleb128 .L457-.LFB1591
 8343 0450 00       		.uleb128 0
 8344 0451 4C       		.uleb128 .LEHB157-.LFB1591
 8345 0452 05       		.uleb128 .LEHE157-.LEHB157
 8346 0453 9A01     		.uleb128 .L458-.LFB1591
 8347 0455 00       		.uleb128 0
 8348 0456 65       		.uleb128 .LEHB158-.LFB1591
 8349 0457 05       		.uleb128 .LEHE158-.LEHB158
 8350 0458 00       		.uleb128 0
 8351 0459 00       		.uleb128 0
 8352 045a BC01     		.uleb128 .LEHB159-.LFB1591
 8353 045c 05       		.uleb128 .LEHE159-.LEHB159
 8354 045d 00       		.uleb128 0
 8355 045e 00       		.uleb128 0
 8356              	.LLSDACSE1591:
 8357              		.section	.text._ZN8UnitTest15MemoryOutStreamD1Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamD1Ev
 8359              		.set	.LTHUNK0,_ZN8UnitTest15MemoryOutStreamD1Ev
 8360              		.weak	_ZTv0_n24_N8UnitTest15MemoryOutStreamD1Ev
 8362              	_ZTv0_n24_N8UnitTest15MemoryOutStreamD1Ev:
 8363              	.LFB1595:
  13:../MemoryOutStream.h **** {
 8364              		.loc 2 13 0 is_stmt 1
 8365              		.cfi_startproc
 8366 00c8 4C8B17   		movq	(%rdi), %r10
 8367 00cb 49037AE8 		addq	-24(%r10), %rdi
 8368 00cf E92CFFFF 		jmp	.LTHUNK0
 8368      FF
 8369              		.cfi_endproc
 8370              	.LFE1595:
 8372              		.section	.text._ZN8UnitTest15MemoryOutStreamD0Ev,"axG",@progbits,_ZN8UnitTest15MemoryOutStreamD0Ev
 8373              		.align 2
 8374              		.weak	_ZN8UnitTest15MemoryOutStreamD0Ev
 8376              	_ZN8UnitTest15MemoryOutStreamD0Ev:
 8377              	.LFB1592:
  13:../MemoryOutStream.h **** {
 8378              		.loc 2 13 0
 8379              		.cfi_startproc
 8380 0000 55       		pushq	%rbp
 8381              		.cfi_def_cfa_offset 16
 8382              		.cfi_offset 6, -16
 8383 0001 4889E5   		movq	%rsp, %rbp
 8384              		.cfi_def_cfa_register 6
 8385 0004 4883EC10 		subq	$16, %rsp
 8386 0008 48897DF8 		movq	%rdi, -8(%rbp)
  13:../MemoryOutStream.h **** {
 8387              		.loc 2 13 0
 8388 000c 488B45F8 		movq	-8(%rbp), %rax
 8389 0010 4889C7   		movq	%rax, %rdi
 8390 0013 E8000000 		call	_ZN8UnitTest15MemoryOutStreamD1Ev
 8390      00
 8391 0018 488B45F8 		movq	-8(%rbp), %rax
 8392 001c 4889C7   		movq	%rax, %rdi
 8393 001f E8000000 		call	_ZdlPv
 8393      00
 8394 0024 C9       		leave
 8395              		.cfi_def_cfa 7, 8
 8396 0025 C3       		ret
 8397              		.cfi_endproc
 8398              	.LFE1592:
 8400              		.set	.LTHUNK1,_ZN8UnitTest15MemoryOutStreamD0Ev
 8401              		.weak	_ZTv0_n24_N8UnitTest15MemoryOutStreamD0Ev
 8403              	_ZTv0_n24_N8UnitTest15MemoryOutStreamD0Ev:
 8404              	.LFB1596:
  13:../MemoryOutStream.h **** {
 8405              		.loc 2 13 0
 8406              		.cfi_startproc
 8407 0026 4C8B17   		movq	(%rdi), %r10
 8408 0029 49037AE8 		addq	-24(%r10), %rdi
 8409 002d EBD1     		jmp	.LTHUNK1
 8410              		.cfi_endproc
 8411              	.LFE1596:
 8413              		.weak	_ZTTN8UnitTest15MemoryOutStreamE
 8414              		.section	.rodata._ZTTN8UnitTest15MemoryOutStreamE,"aG",@progbits,_ZTVN8UnitTest15MemoryOutStreamE,
 8415              		.align 32
 8418              	_ZTTN8UnitTest15MemoryOutStreamE:
 8419 0000 00000000 		.quad	_ZTVN8UnitTest15MemoryOutStreamE+24
 8419      00000000 
 8420 0008 00000000 		.quad	_ZTCN8UnitTest15MemoryOutStreamE0_St19basic_ostringstreamIcSt11char_traitsIcESaIcEE+24
 8420      00000000 
 8421 0010 00000000 		.quad	_ZTCN8UnitTest15MemoryOutStreamE0_So+24
 8421      00000000 
 8422 0018 00000000 		.quad	_ZTCN8UnitTest15MemoryOutStreamE0_So+64
 8422      00000000 
 8423 0020 00000000 		.quad	_ZTCN8UnitTest15MemoryOutStreamE0_St19basic_ostringstreamIcSt11char_traitsIcESaIcEE+64
 8423      00000000 
 8424 0028 00000000 		.quad	_ZTVN8UnitTest15MemoryOutStreamE+64
 8424      00000000 
 8425              		.hidden	_ZTCN8UnitTest15MemoryOutStreamE0_St19basic_ostringstreamIcSt11char_traitsIcESaIcEE
 8426              		.weak	_ZTCN8UnitTest15MemoryOutStreamE0_St19basic_ostringstreamIcSt11char_traitsIcESaIcEE
 8427              		.section	.rodata._ZTCN8UnitTest15MemoryOutStreamE0_St19basic_ostringstreamIcSt11char_traitsIcESaIc
 8428              		.align 32
 8431              	_ZTCN8UnitTest15MemoryOutStreamE0_St19basic_ostringstreamIcSt11char_traitsIcESaIcEE:
 8432 0000 60000000 		.quad	96
 8432      00000000 
 8433 0008 00000000 		.quad	0
 8433      00000000 
 8434 0010 00000000 		.quad	_ZTISt19basic_ostringstreamIcSt11char_traitsIcESaIcEE
 8434      00000000 
 8435 0018 00000000 		.quad	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
 8435      00000000 
 8436 0020 00000000 		.quad	_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED0Ev
 8436      00000000 
 8437 0028 A0FFFFFF 		.quad	-96
 8437      FFFFFFFF 
 8438 0030 A0FFFFFF 		.quad	-96
 8438      FFFFFFFF 
 8439 0038 00000000 		.quad	_ZTISt19basic_ostringstreamIcSt11char_traitsIcESaIcEE
 8439      00000000 
 8440 0040 00000000 		.quad	_ZTv0_n24_NSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
 8440      00000000 
 8441 0048 00000000 		.quad	_ZTv0_n24_NSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED0Ev
 8441      00000000 
 8442              		.hidden	_ZTCN8UnitTest15MemoryOutStreamE0_So
 8443              		.weak	_ZTCN8UnitTest15MemoryOutStreamE0_So
 8444              		.section	.rodata._ZTCN8UnitTest15MemoryOutStreamE0_So,"aG",@progbits,_ZTVN8UnitTest15MemoryOutStre
 8445              		.align 32
 8448              	_ZTCN8UnitTest15MemoryOutStreamE0_So:
 8449 0000 60000000 		.quad	96
 8449      00000000 
 8450 0008 00000000 		.quad	0
 8450      00000000 
 8451 0010 00000000 		.quad	_ZTISo
 8451      00000000 
 8452 0018 00000000 		.quad	_ZNSoD1Ev
 8452      00000000 
 8453 0020 00000000 		.quad	_ZNSoD0Ev
 8453      00000000 
 8454 0028 A0FFFFFF 		.quad	-96
 8454      FFFFFFFF 
 8455 0030 A0FFFFFF 		.quad	-96
 8455      FFFFFFFF 
 8456 0038 00000000 		.quad	_ZTISo
 8456      00000000 
 8457 0040 00000000 		.quad	_ZTv0_n24_NSoD1Ev
 8457      00000000 
 8458 0048 00000000 		.quad	_ZTv0_n24_NSoD0Ev
 8458      00000000 
 8459              		.weak	_ZTSN8UnitTest15MemoryOutStreamE
 8460              		.section	.rodata._ZTSN8UnitTest15MemoryOutStreamE,"aG",@progbits,_ZTSN8UnitTest15MemoryOutStreamE,
 8461              		.align 16
 8464              	_ZTSN8UnitTest15MemoryOutStreamE:
 8465 0000 4E38556E 		.string	"N8UnitTest15MemoryOutStreamE"
 8465      69745465 
 8465      73743135 
 8465      4D656D6F 
 8465      72794F75 
 8466              		.weak	_ZTIN8UnitTest15MemoryOutStreamE
 8467              		.section	.rodata._ZTIN8UnitTest15MemoryOutStreamE,"aG",@progbits,_ZTIN8UnitTest15MemoryOutStreamE,
 8468              		.align 16
 8471              	_ZTIN8UnitTest15MemoryOutStreamE:
 8472 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8472      00000000 
 8473 0008 00000000 		.quad	_ZTSN8UnitTest15MemoryOutStreamE
 8473      00000000 
 8474 0010 00000000 		.quad	_ZTISt19basic_ostringstreamIcSt11char_traitsIcESaIcEE
 8474      00000000 
 8475              		.text
 8477              	_Z41__static_initialization_and_destruction_0ii:
 8478              	.LFB1593:
 155:TestUnitTest++.cpp **** 
 156:TestUnitTest++.cpp **** }
 8479              		.loc 4 156 0
 8480              		.cfi_startproc
 8481 2456 55       		pushq	%rbp
 8482              		.cfi_def_cfa_offset 16
 8483              		.cfi_offset 6, -16
 8484 2457 4889E5   		movq	%rsp, %rbp
 8485              		.cfi_def_cfa_register 6
 8486 245a 4883EC10 		subq	$16, %rsp
 8487 245e 897DFC   		movl	%edi, -4(%rbp)
 8488 2461 8975F8   		movl	%esi, -8(%rbp)
 8489              		.loc 4 156 0
 8490 2464 837DFC01 		cmpl	$1, -4(%rbp)
 8491 2468 0F85F302 		jne	.L462
 8491      0000
 8492              		.loc 4 156 0 is_stmt 0 discriminator 1
 8493 246e 817DF8FF 		cmpl	$65535, -8(%rbp)
 8493      FF0000
 8494 2475 0F85E602 		jne	.L462
 8494      0000
  11:TestUnitTest++.cpp **** {
 8495              		.loc 4 11 0 is_stmt 1
 8496 247b BF000000 		movl	$_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE, %edi
 8496      00
 8497 2480 E87BDBFF 		call	_ZN12_GLOBAL__N_122TestValidCheckSucceedsC1Ev
 8497      FF
 8498 2485 BA000000 		movl	$__dso_handle, %edx
 8498      00
 8499 248a BE000000 		movl	$_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE, %esi
 8499      00
 8500 248f BF000000 		movl	$_ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev, %edi
 8500      00
 8501 2494 E8000000 		call	__cxa_atexit
 8501      00
 8502 2499 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8502      00
 8503 249e BA000000 		movl	$_ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE, %edx
 8503      00
 8504 24a3 4889C6   		movq	%rax, %rsi
 8505 24a6 BF000000 		movl	$_ZN12_GLOBAL__N_123adderValidCheckSucceedsE, %edi
 8505      00
 8506 24ab E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8506      00
  17:TestUnitTest++.cpp **** {
 8507              		.loc 4 17 0
 8508 24b0 BF000000 		movl	$_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE, %edi
 8508      00
 8509 24b5 E844DCFF 		call	_ZN12_GLOBAL__N_126TestCheckWorksWithPointersC1Ev
 8509      FF
 8510 24ba BA000000 		movl	$__dso_handle, %edx
 8510      00
 8511 24bf BE000000 		movl	$_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE, %esi
 8511      00
 8512 24c4 BF000000 		movl	$_ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev, %edi
 8512      00
 8513 24c9 E8000000 		call	__cxa_atexit
 8513      00
 8514 24ce E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8514      00
 8515 24d3 BA000000 		movl	$_ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE, %edx
 8515      00
 8516 24d8 4889C6   		movq	%rax, %rsi
 8517 24db BF000000 		movl	$_ZN12_GLOBAL__N_127adderCheckWorksWithPointersE, %edi
 8517      00
 8518 24e0 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8518      00
  24:TestUnitTest++.cpp **** {
 8519              		.loc 4 24 0
 8520 24e5 BF000000 		movl	$_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE, %edi
 8520      00
 8521 24ea E8C5DDFF 		call	_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC1Ev
 8521      FF
 8522 24ef BA000000 		movl	$__dso_handle, %edx
 8522      00
 8523 24f4 BE000000 		movl	$_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE, %esi
 8523      00
 8524 24f9 BF000000 		movl	$_ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev, %edi
 8524      00
 8525 24fe E8000000 		call	__cxa_atexit
 8525      00
 8526 2503 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8526      00
 8527 2508 BA000000 		movl	$_ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE, %edx
 8527      00
 8528 250d 4889C6   		movq	%rax, %rsi
 8529 2510 BF000000 		movl	$_ZN12_GLOBAL__N_128adderValidCheckEqualSucceedsE, %edi
 8529      00
 8530 2515 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8530      00
  31:TestUnitTest++.cpp **** {
 8531              		.loc 4 31 0
 8532 251a BF000000 		movl	$_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE, %edi
 8532      00
 8533 251f E884DEFF 		call	_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC1Ev
 8533      FF
 8534 2524 BA000000 		movl	$__dso_handle, %edx
 8534      00
 8535 2529 BE000000 		movl	$_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE, %esi
 8535      00
 8536 252e BF000000 		movl	$_ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev, %edi
 8536      00
 8537 2533 E8000000 		call	__cxa_atexit
 8537      00
 8538 2538 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8538      00
 8539 253d BA000000 		movl	$_ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE, %edx
 8539      00
 8540 2542 4889C6   		movq	%rax, %rsi
 8541 2545 BF000000 		movl	$_ZN12_GLOBAL__N_132adderCheckEqualWorksWithPointersE, %edi
 8541      00
 8542 254a E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8542      00
  37:TestUnitTest++.cpp **** {
 8543              		.loc 4 37 0
 8544 254f BF000000 		movl	$_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE, %edi
 8544      00
 8545 2554 E845DFFF 		call	_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC1Ev
 8545      FF
 8546 2559 BA000000 		movl	$__dso_handle, %edx
 8546      00
 8547 255e BE000000 		movl	$_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE, %esi
 8547      00
 8548 2563 BF000000 		movl	$_ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev, %edi
 8548      00
 8549 2568 E8000000 		call	__cxa_atexit
 8549      00
 8550 256d E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8550      00
 8551 2572 BA000000 		movl	$_ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE, %edx
 8551      00
 8552 2577 4889C6   		movq	%rax, %rsi
 8553 257a BF000000 		movl	$_ZN12_GLOBAL__N_128adderValidCheckCloseSucceedsE, %edi
 8553      00
 8554 257f E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8554      00
  43:TestUnitTest++.cpp **** {
 8555              		.loc 4 43 0
 8556 2584 BF000000 		movl	$_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE, %edi
 8556      00
 8557 2589 E8D2E0FF 		call	_ZN12_GLOBAL__N_122TestArrayCloseSucceedsC1Ev
 8557      FF
 8558 258e BA000000 		movl	$__dso_handle, %edx
 8558      00
 8559 2593 BE000000 		movl	$_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE, %esi
 8559      00
 8560 2598 BF000000 		movl	$_ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev, %edi
 8560      00
 8561 259d E8000000 		call	__cxa_atexit
 8561      00
 8562 25a2 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8562      00
 8563 25a7 BA000000 		movl	$_ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE, %edx
 8563      00
 8564 25ac 4889C6   		movq	%rax, %rsi
 8565 25af BF000000 		movl	$_ZN12_GLOBAL__N_123adderArrayCloseSucceedsE, %edi
 8565      00
 8566 25b4 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8566      00
  50:TestUnitTest++.cpp **** {
 8567              		.loc 4 50 0
 8568 25b9 BF000000 		movl	$_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE, %edi
 8568      00
 8569 25be E8D1E1FF 		call	_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC1Ev
 8569      FF
 8570 25c3 BA000000 		movl	$__dso_handle, %edx
 8570      00
 8571 25c8 BE000000 		movl	$_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE, %esi
 8571      00
 8572 25cd BF000000 		movl	$_ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev, %edi
 8572      00
 8573 25d2 E8000000 		call	__cxa_atexit
 8573      00
 8574 25d7 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8574      00
 8575 25dc BA000000 		movl	$_ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE, %edx
 8575      00
 8576 25e1 4889C6   		movq	%rax, %rsi
 8577 25e4 BF000000 		movl	$_ZN12_GLOBAL__N_136adderCheckArrayCloseWorksWithVectorsE, %edi
 8577      00
 8578 25e9 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8578      00
  59:TestUnitTest++.cpp **** {
 8579              		.loc 4 59 0
 8580 25ee BF000000 		movl	$_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE, %edi
 8580      00
 8581 25f3 E84AE3FF 		call	_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC1Ev
 8581      FF
 8582 25f8 BA000000 		movl	$__dso_handle, %edx
 8582      00
 8583 25fd BE000000 		movl	$_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE, %esi
 8583      00
 8584 2602 BF000000 		movl	$_ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev, %edi
 8584      00
 8585 2607 E8000000 		call	__cxa_atexit
 8585      00
 8586 260c E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8586      00
 8587 2611 BA000000 		movl	$_ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE, %edx
 8587      00
 8588 2616 4889C6   		movq	%rax, %rsi
 8589 2619 BF000000 		movl	$_ZN12_GLOBAL__N_146adderCheckThrowMacroSucceedsOnCorrectExceptionE, %edi
 8589      00
 8590 261e E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8590      00
  65:TestUnitTest++.cpp **** {
 8591              		.loc 4 65 0
 8592 2623 BF000000 		movl	$_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE, %edi
 8592      00
 8593 2628 E8F3E3FF 		call	_ZN12_GLOBAL__N_123TestCheckAssertSucceedsC1Ev
 8593      FF
 8594 262d BA000000 		movl	$__dso_handle, %edx
 8594      00
 8595 2632 BE000000 		movl	$_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE, %esi
 8595      00
 8596 2637 BF000000 		movl	$_ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev, %edi
 8596      00
 8597 263c E8000000 		call	__cxa_atexit
 8597      00
 8598 2641 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8598      00
 8599 2646 BA000000 		movl	$_ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE, %edx
 8599      00
 8600 264b 4889C6   		movq	%rax, %rsi
 8601 264e BF000000 		movl	$_ZN12_GLOBAL__N_124adderCheckAssertSucceedsE, %edi
 8601      00
 8602 2653 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8602      00
  70:TestUnitTest++.cpp **** {
 8603              		.loc 4 70 0
 8604 2658 BF000000 		movl	$_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE, %edi
 8604      00
 8605 265d E894E4FF 		call	_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC1Ev
 8605      FF
 8606 2662 BA000000 		movl	$__dso_handle, %edx
 8606      00
 8607 2667 BE000000 		movl	$_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE, %esi
 8607      00
 8608 266c BF000000 		movl	$_ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev, %edi
 8608      00
 8609 2671 E8000000 		call	__cxa_atexit
 8609      00
 8610 2676 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8610      00
 8611 267b BA000000 		movl	$_ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE, %edx
 8611      00
 8612 2680 4889C6   		movq	%rax, %rsi
 8613 2683 BF000000 		movl	$_ZN12_GLOBAL__N_143adderCheckThrowMacroFailsOnMissingExceptionE, %edi
 8613      00
 8614 2688 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8614      00
  97:TestUnitTest++.cpp **** {
 8615              		.loc 4 97 0
 8616 268d BF000000 		movl	$_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE, %edi
 8616      00
 8617 2692 E897E6FF 		call	_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC1Ev
 8617      FF
 8618 2697 BA000000 		movl	$__dso_handle, %edx
 8618      00
 8619 269c BE000000 		movl	$_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE, %esi
 8619      00
 8620 26a1 BF000000 		movl	$_ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev, %edi
 8620      00
 8621 26a6 E8000000 		call	__cxa_atexit
 8621      00
 8622 26ab E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8622      00
 8623 26b0 BA000000 		movl	$_ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE, %edx
 8623      00
 8624 26b5 4889C6   		movq	%rax, %rsi
 8625 26b8 BF000000 		movl	$_ZN12_GLOBAL__N_141adderCheckThrowMacroFailsOnWrongExceptionE, %edi
 8625      00
 8626 26bd E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8626      00
 136:TestUnitTest++.cpp **** {
 8627              		.loc 4 136 0
 8628 26c2 BF000000 		movl	$_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE, %edi
 8628      00
 8629 26c7 E832E9FF 		call	_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC1Ev
 8629      FF
 8630 26cc BA000000 		movl	$__dso_handle, %edx
 8630      00
 8631 26d1 BE000000 		movl	$_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE, %esi
 8631      00
 8632 26d6 BF000000 		movl	$_ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev, %edi
 8632      00
 8633 26db E8000000 		call	__cxa_atexit
 8633      00
 8634 26e0 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8634      00
 8635 26e5 BA000000 		movl	$_ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE, %edx
 8635      00
 8636 26ea 4889C6   		movq	%rax, %rsi
 8637 26ed BF000000 		movl	$_ZN12_GLOBAL__N_144adderSimpleFixtureDefaultFixtureCtorIsCalledE, %edi
 8637      00
 8638 26f2 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8638      00
 141:TestUnitTest++.cpp **** {
 8639              		.loc 4 141 0
 8640 26f7 BF000000 		movl	$_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE, %edi
 8640      00
 8641 26fc E827EDFF 		call	_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC1Ev
 8641      FF
 8642 2701 BA000000 		movl	$__dso_handle, %edx
 8642      00
 8643 2706 BE000000 		movl	$_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE, %esi
 8643      00
 8644 270b BF000000 		movl	$_ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev, %edi
 8644      00
 8645 2710 E8000000 		call	__cxa_atexit
 8645      00
 8646 2715 E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8646      00
 8647 271a BA000000 		movl	$_ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE, %edx
 8647      00
 8648 271f 4889C6   		movq	%rax, %rsi
 8649 2722 BF000000 		movl	$_ZN12_GLOBAL__N_144adderSimpleFixtureOnlyOneFixtureAliveAtATimeE, %edi
 8649      00
 8650 2727 E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8650      00
 151:TestUnitTest++.cpp **** {
 8651              		.loc 4 151 0
 8652 272c BF000000 		movl	$_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE, %edi
 8652      00
 8653 2731 E89AF1FF 		call	_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC1Ev
 8653      FF
 8654 2736 BA000000 		movl	$__dso_handle, %edx
 8654      00
 8655 273b BE000000 		movl	$_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE, %esi
 8655      00
 8656 2740 BF000000 		movl	$_ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev, %edi
 8656      00
 8657 2745 E8000000 		call	__cxa_atexit
 8657      00
 8658 274a E8000000 		call	_ZN8UnitTest4Test11GetTestListEv
 8658      00
 8659 274f BA000000 		movl	$_ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE, %edx
 8659      00
 8660 2754 4889C6   		movq	%rax, %rsi
 8661 2757 BF000000 		movl	$_ZN12_GLOBAL__N_138adderCanCallCHECKOutsideOfTestFunctionE, %edi
 8661      00
 8662 275c E8000000 		call	_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
 8662      00
 8663              	.L462:
 8664              		.loc 4 156 0
 8665 2761 C9       		leave
 8666              		.cfi_def_cfa 7, 8
 8667 2762 C3       		ret
 8668              		.cfi_endproc
 8669              	.LFE1593:
 8671              		.section	.rodata
 8672 0a08 00000000 		.align 16
 8672      00000000 
 8675              	_ZTIN12_GLOBAL__N_122TestValidCheckSucceedsE:
 8676 0a10 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8676      00000000 
 8677 0a18 00000000 		.quad	_ZTSN12_GLOBAL__N_122TestValidCheckSucceedsE
 8677      00000000 
 8678 0a20 00000000 		.quad	_ZTIN8UnitTest4TestE
 8678      00000000 
 8679 0a28 00000000 		.align 16
 8679      00000000 
 8682              	_ZTIN12_GLOBAL__N_126TestCheckWorksWithPointersE:
 8683 0a30 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8683      00000000 
 8684 0a38 00000000 		.quad	_ZTSN12_GLOBAL__N_126TestCheckWorksWithPointersE
 8684      00000000 
 8685 0a40 00000000 		.quad	_ZTIN8UnitTest4TestE
 8685      00000000 
 8686 0a48 00000000 		.align 16
 8686      00000000 
 8689              	_ZTIN12_GLOBAL__N_127TestValidCheckEqualSucceedsE:
 8690 0a50 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8690      00000000 
 8691 0a58 00000000 		.quad	_ZTSN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
 8691      00000000 
 8692 0a60 00000000 		.quad	_ZTIN8UnitTest4TestE
 8692      00000000 
 8693 0a68 00000000 		.align 16
 8693      00000000 
 8696              	_ZTIN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE:
 8697 0a70 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8697      00000000 
 8698 0a78 00000000 		.quad	_ZTSN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
 8698      00000000 
 8699 0a80 00000000 		.quad	_ZTIN8UnitTest4TestE
 8699      00000000 
 8700 0a88 00000000 		.align 16
 8700      00000000 
 8703              	_ZTIN12_GLOBAL__N_127TestValidCheckCloseSucceedsE:
 8704 0a90 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8704      00000000 
 8705 0a98 00000000 		.quad	_ZTSN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
 8705      00000000 
 8706 0aa0 00000000 		.quad	_ZTIN8UnitTest4TestE
 8706      00000000 
 8707 0aa8 00000000 		.align 16
 8707      00000000 
 8710              	_ZTIN12_GLOBAL__N_122TestArrayCloseSucceedsE:
 8711 0ab0 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8711      00000000 
 8712 0ab8 00000000 		.quad	_ZTSN12_GLOBAL__N_122TestArrayCloseSucceedsE
 8712      00000000 
 8713 0ac0 00000000 		.quad	_ZTIN8UnitTest4TestE
 8713      00000000 
 8714 0ac8 00000000 		.align 16
 8714      00000000 
 8717              	_ZTIN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE:
 8718 0ad0 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8718      00000000 
 8719 0ad8 00000000 		.quad	_ZTSN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
 8719      00000000 
 8720 0ae0 00000000 		.quad	_ZTIN8UnitTest4TestE
 8720      00000000 
 8721 0ae8 00000000 		.align 16
 8721      00000000 
 8724              	_ZTIN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE:
 8725 0af0 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8725      00000000 
 8726 0af8 00000000 		.quad	_ZTSN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
 8726      00000000 
 8727 0b00 00000000 		.quad	_ZTIN8UnitTest4TestE
 8727      00000000 
 8728 0b08 00000000 		.align 16
 8728      00000000 
 8731              	_ZTIZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestException:
 8732 0b10 00000000 		.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 8732      00000000 
 8733 0b18 00000000 		.quad	_ZTSZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestExcepti
 8733      00000000 
 8734              		.align 16
 8737              	_ZTIN12_GLOBAL__N_123TestCheckAssertSucceedsE:
 8738 0b20 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8738      00000000 
 8739 0b28 00000000 		.quad	_ZTSN12_GLOBAL__N_123TestCheckAssertSucceedsE
 8739      00000000 
 8740 0b30 00000000 		.quad	_ZTIN8UnitTest4TestE
 8740      00000000 
 8741 0b38 00000000 		.align 16
 8741      00000000 
 8744              	_ZTIN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE:
 8745 0b40 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8745      00000000 
 8746 0b48 00000000 		.quad	_ZTSN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
 8746      00000000 
 8747 0b50 00000000 		.quad	_ZTIN8UnitTest4TestE
 8747      00000000 
 8748 0b58 00000000 		.align 16
 8748      00000000 
 8751              	_ZTIZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest:
 8752 0b60 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8752      00000000 
 8753 0b68 00000000 		.quad	_ZTSZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
 8753      00000000 
 8754 0b70 00000000 		.quad	_ZTIN8UnitTest4TestE
 8754      00000000 
 8755 0b78 00000000 		.align 16
 8755      00000000 
 8758              	_ZTIN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE:
 8759 0b80 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8759      00000000 
 8760 0b88 00000000 		.quad	_ZTSN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
 8760      00000000 
 8761 0b90 00000000 		.quad	_ZTIN8UnitTest4TestE
 8761      00000000 
 8762 0b98 00000000 		.align 16
 8762      00000000 
 8765              	_ZTIZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest:
 8766 0ba0 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8766      00000000 
 8767 0ba8 00000000 		.quad	_ZTSZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
 8767      00000000 
 8768 0bb0 00000000 		.quad	_ZTIN8UnitTest4TestE
 8768      00000000 
 8769 0bb8 00000000 		.align 16
 8769      00000000 
 8772              	_ZTIN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE:
 8773 0bc0 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8773      00000000 
 8774 0bc8 00000000 		.quad	_ZTSN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
 8774      00000000 
 8775 0bd0 00000000 		.quad	_ZTIN8UnitTest4TestE
 8775      00000000 
 8776 0bd8 00000000 		.align 16
 8776      00000000 
 8779              	_ZTIN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE:
 8780 0be0 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8780      00000000 
 8781 0be8 00000000 		.quad	_ZTSN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
 8781      00000000 
 8782 0bf0 00000000 		.quad	_ZTIN8UnitTest4TestE
 8782      00000000 
 8783 0bf8 00000000 		.align 16
 8783      00000000 
 8786              	_ZTIN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE:
 8787 0c00 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 8787      00000000 
 8788 0c08 00000000 		.quad	_ZTSN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
 8788      00000000 
 8789 0c10 00000000 		.quad	_ZTIN8UnitTest4TestE
 8789      00000000 
 8790 0c18 00000000 		.align 32
 8790      00000000 
 8793              	_ZTSN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE:
 8794 0c20 2A4E3132 		.string	"*N12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE"
 8794      5F474C4F 
 8794      42414C5F 
 8794      5F4E5F31 
 8794      33375465 
 8795 0c59 00000000 		.align 32
 8795      000000
 8798              	_ZTSN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE:
 8799 0c60 2A4E3132 		.string	"*N12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE"
 8799      5F474C4F 
 8799      42414C5F 
 8799      5F4E5F31 
 8799      34335465 
 8800 0c9f 00       		.align 32
 8803              	_ZTSN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE:
 8804 0ca0 2A4E3132 		.string	"*N12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE"
 8804      5F474C4F 
 8804      42414C5F 
 8804      5F4E5F31 
 8804      34335465 
 8805 0cdf 00       		.align 32
 8808              	_ZTSZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest:
 8809 0ce0 2A5A4E4B 		.string	"*ZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest"
 8809      31325F47 
 8809      4C4F4241 
 8809      4C5F5F4E 
 8809      5F313430 
 8810 0d38 00000000 		.align 32
 8810      00000000 
 8813              	_ZTSN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE:
 8814 0d40 2A4E3132 		.string	"*N12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE"
 8814      5F474C4F 
 8814      42414C5F 
 8814      5F4E5F31 
 8814      34305465 
 8815 0d7c 00000000 		.align 32
 8818              	_ZTSZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest:
 8819 0d80 2A5A4E4B 		.string	"*ZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest"
 8819      31325F47 
 8819      4C4F4241 
 8819      4C5F5F4E 
 8819      5F313432 
 8820 0dd7 00000000 		.align 32
 8820      00000000 
 8820      00
 8823              	_ZTSN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE:
 8824 0de0 2A4E3132 		.string	"*N12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE"
 8824      5F474C4F 
 8824      42414C5F 
 8824      5F4E5F31 
 8824      34325465 
 8825 0e1e 0000     		.align 32
 8828              	_ZTSN12_GLOBAL__N_123TestCheckAssertSucceedsE:
 8829 0e20 2A4E3132 		.string	"*N12_GLOBAL__N_123TestCheckAssertSucceedsE"
 8829      5F474C4F 
 8829      42414C5F 
 8829      5F4E5F31 
 8829      32335465 
 8830 0e4b 00000000 		.align 32
 8830      00000000 
 8830      00000000 
 8830      00000000 
 8830      00000000 
 8833              	_ZTSZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestException:
 8834 0e60 2A5A4E4B 		.string	"*ZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestExcepti
 8834      31325F47 
 8834      4C4F4241 
 8834      4C5F5F4E 
 8834      5F313435 
 8835 0ebc 00000000 		.align 32
 8838              	_ZTSN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE:
 8839 0ec0 2A4E3132 		.string	"*N12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE"
 8839      5F474C4F 
 8839      42414C5F 
 8839      5F4E5F31 
 8839      34355465 
 8840 0f01 00000000 		.align 32
 8840      00000000 
 8840      00000000 
 8840      00000000 
 8840      00000000 
 8843              	_ZTSN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE:
 8844 0f20 2A4E3132 		.string	"*N12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE"
 8844      5F474C4F 
 8844      42414C5F 
 8844      5F4E5F31 
 8844      33355465 
 8845 0f57 00000000 		.align 32
 8845      00000000 
 8845      00
 8848              	_ZTSN12_GLOBAL__N_122TestArrayCloseSucceedsE:
 8849 0f60 2A4E3132 		.string	"*N12_GLOBAL__N_122TestArrayCloseSucceedsE"
 8849      5F474C4F 
 8849      42414C5F 
 8849      5F4E5F31 
 8849      32325465 
 8850 0f8a 00000000 		.align 32
 8850      00000000 
 8850      00000000 
 8850      00000000 
 8850      00000000 
 8853              	_ZTSN12_GLOBAL__N_127TestValidCheckCloseSucceedsE:
 8854 0fa0 2A4E3132 		.string	"*N12_GLOBAL__N_127TestValidCheckCloseSucceedsE"
 8854      5F474C4F 
 8854      42414C5F 
 8854      5F4E5F31 
 8854      32375465 
 8855 0fcf 00000000 		.align 32
 8855      00000000 
 8855      00000000 
 8855      00000000 
 8855      00
 8858              	_ZTSN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE:
 8859 0fe0 2A4E3132 		.string	"*N12_GLOBAL__N_131TestCheckEqualWorksWithPointersE"
 8859      5F474C4F 
 8859      42414C5F 
 8859      5F4E5F31 
 8859      33315465 
 8860 1013 00000000 		.align 32
 8860      00000000 
 8860      00000000 
 8860      00
 8863              	_ZTSN12_GLOBAL__N_127TestValidCheckEqualSucceedsE:
 8864 1020 2A4E3132 		.string	"*N12_GLOBAL__N_127TestValidCheckEqualSucceedsE"
 8864      5F474C4F 
 8864      42414C5F 
 8864      5F4E5F31 
 8864      32375465 
 8865 104f 00000000 		.align 32
 8865      00000000 
 8865      00000000 
 8865      00000000 
 8865      00
 8868              	_ZTSN12_GLOBAL__N_126TestCheckWorksWithPointersE:
 8869 1060 2A4E3132 		.string	"*N12_GLOBAL__N_126TestCheckWorksWithPointersE"
 8869      5F474C4F 
 8869      42414C5F 
 8869      5F4E5F31 
 8869      32365465 
 8870 108e 00000000 		.align 32
 8870      00000000 
 8870      00000000 
 8870      00000000 
 8870      0000
 8873              	_ZTSN12_GLOBAL__N_122TestValidCheckSucceedsE:
 8874 10a0 2A4E3132 		.string	"*N12_GLOBAL__N_122TestValidCheckSucceedsE"
 8874      5F474C4F 
 8874      42414C5F 
 8874      5F4E5F31 
 8874      32325465 
 8875              		.text
 8877              	_GLOBAL__sub_I_TestUnitTest__.cpp:
 8878              	.LFB1594:
 8879              		.loc 4 156 0
 8880              		.cfi_startproc
 8881 2763 55       		pushq	%rbp
 8882              		.cfi_def_cfa_offset 16
 8883              		.cfi_offset 6, -16
 8884 2764 4889E5   		movq	%rsp, %rbp
 8885              		.cfi_def_cfa_register 6
 8886              		.loc 4 156 0
 8887 2767 BEFFFF00 		movl	$65535, %esi
 8887      00
 8888 276c BF010000 		movl	$1, %edi
 8888      00
 8889 2771 E8E0FCFF 		call	_Z41__static_initialization_and_destruction_0ii
 8889      FF
 8890 2776 5D       		popq	%rbp
 8891              		.cfi_def_cfa 7, 8
 8892 2777 C3       		ret
 8893              		.cfi_endproc
 8894              	.LFE1594:
 8896              		.section	.init_array,"aw"
 8897              		.align 8
 8898 0000 00000000 		.quad	_GLOBAL__sub_I_TestUnitTest__.cpp
 8898      00000000 
 8899              		.section	.rodata
 8900 10ca 00000000 		.align 8
 8900      0000
 8903              	_ZZL18__gthread_active_pvE20__gthread_active_ptr:
 8904 10d0 00000000 		.quad	_ZL28__gthrw___pthread_key_createPjPFvPvE
 8904      00000000 
 8905              		.weakref	_ZL28__gthrw___pthread_key_createPjPFvPvE,__pthread_key_create
 8906              		.align 4
 8907              	.LC15:
 8908 10d8 0AD7233C 		.long	1008981770
 8909              		.align 4
 8910              	.LC16:
 8911 10dc 62100040 		.long	1073746018
 8912              		.align 4
 8913              	.LC17:
 8914 10e0 00000040 		.long	1073741824
 8915              		.align 4
 8916              	.LC21:
 8917 10e4 0000803F 		.long	1065353216
 8918              		.align 4
 8919              	.LC22:
 8920 10e8 00004040 		.long	1077936128
 8921              		.align 4
 8922              	.LC23:
 8923 10ec D7A30040 		.long	1073783767
 8924              		.align 4
 8925              	.LC24:
 8926 10f0 CDCCCC3D 		.long	1036831949
 8927              		.align 4
 8928              	.LC27:
 8929 10f4 00000000 		.long	0
 8930              		.align 4
 8931              	.LC28:
 8932 10f8 17B7D138 		.long	953267991
 8933              		.text
 8934              	.Letext0:
 8935              		.file 14 "../TestDetails.h"
 8936              		.file 15 "../TestList.h"
 8937              		.file 16 "../TestResults.h"
 8938              		.file 17 "../PosixUtils/SignalTranslator.h"
 8939              		.file 18 "<built-in>"
 8940              		.file 19 "/usr/include/stdio.h"
 8941              		.file 20 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 8942              		.file 21 "/usr/include/wchar.h"
 8943              		.file 22 "/usr/include/c++/4.8/cwchar"
 8944              		.file 23 "/usr/include/c++/4.8/bits/cpp_type_traits.h"
 8945              		.file 24 "/usr/include/c++/4.8/bits/char_traits.h"
 8946              		.file 25 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h"
 8947              		.file 26 "/usr/include/c++/4.8/clocale"
 8948              		.file 27 "/usr/include/c++/4.8/bits/basic_string.h"
 8949              		.file 28 "/usr/include/c++/4.8/bits/basic_string.tcc"
 8950              		.file 29 "/usr/include/c++/4.8/bits/stringfwd.h"
 8951              		.file 30 "/usr/include/c++/4.8/cwctype"
 8952              		.file 31 "/usr/include/c++/4.8/bits/vector.tcc"
 8953              		.file 32 "/usr/include/time.h"
 8954              		.file 33 "/usr/include/c++/4.8/ext/numeric_traits.h"
 8955              		.file 34 "/usr/include/c++/4.8/ext/alloc_traits.h"
 8956              		.file 35 "/usr/include/c++/4.8/ext/type_traits.h"
 8957              		.file 36 "/usr/include/c++/4.8/debug/debug.h"
 8958              		.file 37 "/usr/include/locale.h"
 8959              		.file 38 "/usr/include/x86_64-linux-gnu/bits/types.h"
 8960              		.file 39 "/usr/include/x86_64-linux-gnu/bits/setjmp.h"
 8961              		.file 40 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h"
 8962              		.file 41 "/usr/include/wctype.h"
 8963              		.file 42 "/usr/include/x86_64-linux-gnu/bits/sigset.h"
 8964              		.file 43 "/usr/include/setjmp.h"
 8965              		.file 44 "/usr/include/x86_64-linux-gnu/bits/siginfo.h"
 8966              		.file 45 "/usr/include/signal.h"
 8967              		.file 46 "/usr/include/x86_64-linux-gnu/bits/sigaction.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 TestUnitTest++.cpp
     /tmp/ccBOaIhF.s:10     .text._ZN13UnitTestSuite12GetSuiteNameEv:0000000000000000 _ZN13UnitTestSuite12GetSuiteNameEv
     /tmp/ccBOaIhF.s:33     .text._ZN8UnitTest15MemoryOutStreamC1Ev:0000000000000000 _ZN8UnitTest15MemoryOutStreamC1Ev
     /tmp/ccBOaIhF.s:8418   .rodata._ZTTN8UnitTest15MemoryOutStreamE:0000000000000000 _ZTTN8UnitTest15MemoryOutStreamE
     /tmp/ccBOaIhF.s:8220   .rodata._ZTVN8UnitTest15MemoryOutStreamE:0000000000000000 _ZTVN8UnitTest15MemoryOutStreamE
     /tmp/ccBOaIhF.s:146    .text._ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE:0000000000000000 _ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
     /tmp/ccBOaIhF.s:146    .text._ZN17ScopedCurrentTestC2ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE:0000000000000000 _ZN17ScopedCurrentTestC1ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
     /tmp/ccBOaIhF.s:197    .text._ZN17ScopedCurrentTestD2Ev:0000000000000000 _ZN17ScopedCurrentTestD2Ev
     /tmp/ccBOaIhF.s:197    .text._ZN17ScopedCurrentTestD2Ev:0000000000000000 _ZN17ScopedCurrentTestD1Ev
     /tmp/ccBOaIhF.s:237    .text:0000000000000000 _ZN12_GLOBAL__N_122TestValidCheckSucceedsC2Ev
     /tmp/ccBOaIhF.s:8145   .rodata:00000000000009e0 _ZTVN12_GLOBAL__N_122TestValidCheckSucceedsE
     /tmp/ccBOaIhF.s:237    .text:0000000000000000 _ZN12_GLOBAL__N_122TestValidCheckSucceedsC1Ev
     /tmp/ccBOaIhF.s:270    .bss:0000000000000000 _ZN12_GLOBAL__N_130testValidCheckSucceedsInstanceE
     /tmp/ccBOaIhF.s:270    .bss:0000000000000038 _ZN12_GLOBAL__N_123adderValidCheckSucceedsE
     /tmp/ccBOaIhF.s:282    .text:000000000000003e _ZNK12_GLOBAL__N_122TestValidCheckSucceeds7RunImplEv
     /tmp/ccBOaIhF.s:4074   .text._ZN8UnitTest5CheckIbEEbT_:0000000000000000 _ZN8UnitTest5CheckIbEEbT_
     /tmp/ccBOaIhF.s:409    .text:00000000000000fe _ZN12_GLOBAL__N_126TestCheckWorksWithPointersC2Ev
     /tmp/ccBOaIhF.s:8071   .rodata:00000000000009a0 _ZTVN12_GLOBAL__N_126TestCheckWorksWithPointersE
     /tmp/ccBOaIhF.s:409    .text:00000000000000fe _ZN12_GLOBAL__N_126TestCheckWorksWithPointersC1Ev
     /tmp/ccBOaIhF.s:441    .bss:0000000000000040 _ZN12_GLOBAL__N_134testCheckWorksWithPointersInstanceE
     /tmp/ccBOaIhF.s:441    .bss:0000000000000078 _ZN12_GLOBAL__N_127adderCheckWorksWithPointersE
     /tmp/ccBOaIhF.s:458    .text:000000000000013c _ZNK12_GLOBAL__N_126TestCheckWorksWithPointers7RunImplEv
     /tmp/ccBOaIhF.s:4098   .text._ZN8UnitTest5CheckIPvEEbT_:0000000000000000 _ZN8UnitTest5CheckIPvEEbT_
     /tmp/ccBOaIhF.s:662    .text:00000000000002b4 _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC2Ev
     /tmp/ccBOaIhF.s:7997   .rodata:0000000000000960 _ZTVN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
     /tmp/ccBOaIhF.s:662    .text:00000000000002b4 _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsC1Ev
     /tmp/ccBOaIhF.s:694    .bss:0000000000000080 _ZN12_GLOBAL__N_135testValidCheckEqualSucceedsInstanceE
     /tmp/ccBOaIhF.s:694    .bss:00000000000000b8 _ZN12_GLOBAL__N_128adderValidCheckEqualSucceedsE
     /tmp/ccBOaIhF.s:704    .text:00000000000002f2 _ZNK12_GLOBAL__N_127TestValidCheckEqualSucceeds7RunImplEv
     /tmp/ccBOaIhF.s:4126   .text._ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest10CheckEqualIiiEEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
     /tmp/ccBOaIhF.s:830    .text:00000000000003a8 _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC2Ev
     /tmp/ccBOaIhF.s:7923   .rodata:0000000000000920 _ZTVN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
     /tmp/ccBOaIhF.s:830    .text:00000000000003a8 _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersC1Ev
     /tmp/ccBOaIhF.s:862    .bss:00000000000000c0 _ZN12_GLOBAL__N_139testCheckEqualWorksWithPointersInstanceE
     /tmp/ccBOaIhF.s:862    .bss:00000000000000f8 _ZN12_GLOBAL__N_132adderCheckEqualWorksWithPointersE
     /tmp/ccBOaIhF.s:872    .text:00000000000003e6 _ZNK12_GLOBAL__N_131TestCheckEqualWorksWithPointers7RunImplEv
     /tmp/ccBOaIhF.s:4255   .text._ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest10CheckEqualIPvS1_EEvRNS_11TestResultsERKT_RKT0_RKNS_11TestDetailsE
     /tmp/ccBOaIhF.s:997    .text:000000000000049e _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC2Ev
     /tmp/ccBOaIhF.s:7849   .rodata:00000000000008e0 _ZTVN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
     /tmp/ccBOaIhF.s:997    .text:000000000000049e _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsC1Ev
     /tmp/ccBOaIhF.s:1029   .bss:0000000000000100 _ZN12_GLOBAL__N_135testValidCheckCloseSucceedsInstanceE
     /tmp/ccBOaIhF.s:1029   .bss:0000000000000138 _ZN12_GLOBAL__N_128adderValidCheckCloseSucceedsE
     /tmp/ccBOaIhF.s:1042   .text:00000000000004dc _ZNK12_GLOBAL__N_127TestValidCheckCloseSucceeds7RunImplEv
     /tmp/ccBOaIhF.s:4387   .text._ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest10CheckCloseIfffEEvRNS_11TestResultsERKT_RKT0_RKT1_RKNS_11TestDetailsE
     /tmp/ccBOaIhF.s:1244   .text:0000000000000660 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsC2Ev
     /tmp/ccBOaIhF.s:7775   .rodata:00000000000008a0 _ZTVN12_GLOBAL__N_122TestArrayCloseSucceedsE
     /tmp/ccBOaIhF.s:1244   .text:0000000000000660 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsC1Ev
     /tmp/ccBOaIhF.s:1276   .bss:0000000000000140 _ZN12_GLOBAL__N_130testArrayCloseSucceedsInstanceE
     /tmp/ccBOaIhF.s:1276   .bss:0000000000000178 _ZN12_GLOBAL__N_123adderArrayCloseSucceedsE
     /tmp/ccBOaIhF.s:1286   .text:000000000000069e _ZNK12_GLOBAL__N_122TestArrayCloseSucceeds7RunImplEv
     /tmp/ccBOaIhF.s:4545   .text._ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest15CheckArrayCloseIA3_fS1_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE
     /tmp/ccBOaIhF.s:1429   .text:0000000000000794 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC2Ev
     /tmp/ccBOaIhF.s:7701   .rodata:0000000000000860 _ZTVN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
     /tmp/ccBOaIhF.s:1429   .text:0000000000000794 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsC1Ev
     /tmp/ccBOaIhF.s:1461   .bss:0000000000000180 _ZN12_GLOBAL__N_143testCheckArrayCloseWorksWithVectorsInstanceE
     /tmp/ccBOaIhF.s:1461   .bss:00000000000001b8 _ZN12_GLOBAL__N_136adderCheckArrayCloseWorksWithVectorsE
     /tmp/ccBOaIhF.s:1471   .text:00000000000007d2 _ZNK12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectors7RunImplEv
     /tmp/ccBOaIhF.s:4738   .text._ZNSaIfEC2Ev:0000000000000000 _ZNSaIfEC1Ev
     /tmp/ccBOaIhF.s:4797   .text._ZNSt6vectorIfSaIfEEC2EmRKfRKS0_:0000000000000000 _ZNSt6vectorIfSaIfEEC1EmRKfRKS0_
     /tmp/ccBOaIhF.s:4768   .text._ZNSaIfED2Ev:0000000000000000 _ZNSaIfED1Ev
     /tmp/ccBOaIhF.s:4972   .text._ZNSt6vectorIfSaIfEEixEm:0000000000000000 _ZNSt6vectorIfSaIfEEixEm
     /tmp/ccBOaIhF.s:4999   .text._ZNKSt6vectorIfSaIfEE4sizeEv:0000000000000000 _ZNKSt6vectorIfSaIfEE4sizeEv
     /tmp/ccBOaIhF.s:5027   .text._ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE:0000000000000000 _ZN8UnitTest15CheckArrayCloseISt6vectorIfSaIfEES3_fEEvRNS_11TestResultsERKT_RKT0_iRKT1_RKNS_11TestDetailsE
     /tmp/ccBOaIhF.s:4887   .text._ZNSt6vectorIfSaIfEED2Ev:0000000000000000 _ZNSt6vectorIfSaIfEED1Ev
     /tmp/ccBOaIhF.s:1671   .text:0000000000000942 _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC2Ev
     /tmp/ccBOaIhF.s:7627   .rodata:0000000000000820 _ZTVN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
     /tmp/ccBOaIhF.s:1671   .text:0000000000000942 _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionC1Ev
     /tmp/ccBOaIhF.s:1703   .bss:00000000000001c0 _ZN12_GLOBAL__N_153testCheckThrowMacroSucceedsOnCorrectExceptionInstanceE
     /tmp/ccBOaIhF.s:1703   .bss:00000000000001f8 _ZN12_GLOBAL__N_146adderCheckThrowMacroSucceedsOnCorrectExceptionE
     /tmp/ccBOaIhF.s:1713   .text:0000000000000980 _ZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEv
     /tmp/ccBOaIhF.s:8731   .rodata:0000000000000b10 _ZTIZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestException
     /tmp/ccBOaIhF.s:1823   .text:0000000000000a20 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsC2Ev
     /tmp/ccBOaIhF.s:7553   .rodata:00000000000007e0 _ZTVN12_GLOBAL__N_123TestCheckAssertSucceedsE
     /tmp/ccBOaIhF.s:1823   .text:0000000000000a20 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsC1Ev
     /tmp/ccBOaIhF.s:1855   .bss:0000000000000200 _ZN12_GLOBAL__N_131testCheckAssertSucceedsInstanceE
     /tmp/ccBOaIhF.s:1855   .bss:0000000000000238 _ZN12_GLOBAL__N_124adderCheckAssertSucceedsE
     /tmp/ccBOaIhF.s:1869   .text:0000000000000a5e _ZNK12_GLOBAL__N_123TestCheckAssertSucceeds7RunImplEv
     /tmp/ccBOaIhF.s:1978   .text:0000000000000af6 _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC2Ev
     /tmp/ccBOaIhF.s:7405   .rodata:0000000000000760 _ZTVN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
     /tmp/ccBOaIhF.s:1978   .text:0000000000000af6 _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionC1Ev
     /tmp/ccBOaIhF.s:2010   .bss:0000000000000240 _ZN12_GLOBAL__N_150testCheckThrowMacroFailsOnMissingExceptionInstanceE
     /tmp/ccBOaIhF.s:2010   .bss:0000000000000278 _ZN12_GLOBAL__N_143adderCheckThrowMacroFailsOnMissingExceptionE
     /tmp/ccBOaIhF.s:2021   .text:0000000000000b34 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC2Ev
     /tmp/ccBOaIhF.s:7479   .rodata:00000000000007a0 _ZTVZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
     /tmp/ccBOaIhF.s:2021   .text:0000000000000b34 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestC1Ev
     /tmp/ccBOaIhF.s:2053   .text:0000000000000b6e _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest9DontThrowEv
     /tmp/ccBOaIhF.s:2077   .text:0000000000000b78 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvENK11NoThrowTest7RunImplEv
     /tmp/ccBOaIhF.s:2131   .text:0000000000000bda _ZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEv
     /tmp/ccBOaIhF.s:7488   .text:0000000000002096 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD1Ev
     /tmp/ccBOaIhF.s:2344   .text:0000000000000d2e _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC2Ev
     /tmp/ccBOaIhF.s:7257   .rodata:00000000000006e0 _ZTVN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
     /tmp/ccBOaIhF.s:2344   .text:0000000000000d2e _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionC1Ev
     /tmp/ccBOaIhF.s:2376   .bss:0000000000000280 _ZN12_GLOBAL__N_148testCheckThrowMacroFailsOnWrongExceptionInstanceE
     /tmp/ccBOaIhF.s:2376   .bss:00000000000002b8 _ZN12_GLOBAL__N_141adderCheckThrowMacroFailsOnWrongExceptionE
     /tmp/ccBOaIhF.s:2385   .text:0000000000000d6c _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC2Ev
     /tmp/ccBOaIhF.s:7331   .rodata:0000000000000720 _ZTVZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
     /tmp/ccBOaIhF.s:2385   .text:0000000000000d6c _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestC1Ev
     /tmp/ccBOaIhF.s:2421   .text:0000000000000da6 _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvENK14WrongThrowTest7RunImplEv
     /tmp/ccBOaIhF.s:2528   .text:0000000000000e4c _ZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEv
     /tmp/ccBOaIhF.s:7340   .text:0000000000001fd6 _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD1Ev
     /tmp/ccBOaIhF.s:2736   .text:0000000000000fa0 _ZN12_GLOBAL__N_113SimpleFixtureC2Ev
     /tmp/ccBOaIhF.s:2785   .bss:00000000000002bc _ZN12_GLOBAL__N_113SimpleFixture13instanceCountE
     /tmp/ccBOaIhF.s:2761   .text:0000000000000fba _ZN12_GLOBAL__N_113SimpleFixtureD2Ev
     /tmp/ccBOaIhF.s:2788   .text:0000000000000fd4 _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC2ERKN8UnitTest11TestDetailsE
     /tmp/ccBOaIhF.s:2788   .text:0000000000000fd4 _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperC1ERKN8UnitTest11TestDetailsE
     /tmp/ccBOaIhF.s:2822   .text:0000000000000ffe _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC2Ev
     /tmp/ccBOaIhF.s:7183   .rodata:00000000000006a0 _ZTVN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
     /tmp/ccBOaIhF.s:2822   .text:0000000000000ffe _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledC1Ev
     /tmp/ccBOaIhF.s:2854   .bss:00000000000002c0 _ZN12_GLOBAL__N_151testSimpleFixtureDefaultFixtureCtorIsCalledInstanceE
     /tmp/ccBOaIhF.s:2854   .bss:00000000000002f8 _ZN12_GLOBAL__N_144adderSimpleFixtureDefaultFixtureCtorIsCalledE
     /tmp/ccBOaIhF.s:2859   .text:000000000000103c _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD2Ev
     /tmp/ccBOaIhF.s:2859   .text:000000000000103c _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperD1Ev
     /tmp/ccBOaIhF.s:2895   .text:0000000000001056 _ZNK12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalled7RunImplEv
     /tmp/ccBOaIhF.s:5229   .text:0000000000001926 _ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelperEEEvRT_RKNS_11TestDetailsE
     /tmp/ccBOaIhF.s:8235   .text._ZN8UnitTest15MemoryOutStreamD1Ev:0000000000000000 _ZN8UnitTest15MemoryOutStreamD1Ev
     /tmp/ccBOaIhF.s:3225   .text:0000000000001336 _ZN12_GLOBAL__N_145SimpleFixtureDefaultFixtureCtorIsCalledHelper7RunImplEv
     /tmp/ccBOaIhF.s:3348   .text:00000000000013fe _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC2ERKN8UnitTest11TestDetailsE
     /tmp/ccBOaIhF.s:3348   .text:00000000000013fe _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperC1ERKN8UnitTest11TestDetailsE
     /tmp/ccBOaIhF.s:3382   .text:0000000000001428 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC2Ev
     /tmp/ccBOaIhF.s:7109   .rodata:0000000000000660 _ZTVN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
     /tmp/ccBOaIhF.s:3382   .text:0000000000001428 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeC1Ev
     /tmp/ccBOaIhF.s:3414   .bss:0000000000000300 _ZN12_GLOBAL__N_151testSimpleFixtureOnlyOneFixtureAliveAtATimeInstanceE
     /tmp/ccBOaIhF.s:3414   .bss:0000000000000338 _ZN12_GLOBAL__N_144adderSimpleFixtureOnlyOneFixtureAliveAtATimeE
     /tmp/ccBOaIhF.s:3419   .text:0000000000001466 _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD2Ev
     /tmp/ccBOaIhF.s:3419   .text:0000000000001466 _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperD1Ev
     /tmp/ccBOaIhF.s:3445   .text:0000000000001480 _ZNK12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATime7RunImplEv
     /tmp/ccBOaIhF.s:5574   .text:0000000000001bbe _ZN8UnitTest11ExecuteTestIN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelperEEEvRT_RKNS_11TestDetailsE
     /tmp/ccBOaIhF.s:3772   .text:0000000000001760 _ZN12_GLOBAL__N_145SimpleFixtureOnlyOneFixtureAliveAtATimeHelper7RunImplEv
     /tmp/ccBOaIhF.s:3887   .text:0000000000001812 _ZN12_GLOBAL__N_19CheckBoolEb
     /tmp/ccBOaIhF.s:4013   .text:00000000000018d0 _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC2Ev
     /tmp/ccBOaIhF.s:7035   .rodata:0000000000000620 _ZTVN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
     /tmp/ccBOaIhF.s:4013   .text:00000000000018d0 _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionC1Ev
     /tmp/ccBOaIhF.s:4045   .bss:0000000000000340 _ZN12_GLOBAL__N_145testCanCallCHECKOutsideOfTestFunctionInstanceE
     /tmp/ccBOaIhF.s:4045   .bss:0000000000000378 _ZN12_GLOBAL__N_138adderCanCallCHECKOutsideOfTestFunctionE
     /tmp/ccBOaIhF.s:4050   .text:000000000000190e _ZNK12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunction7RunImplEv
     /tmp/ccBOaIhF.s:5920   .text._ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_:0000000000000000 _ZN8UnitTest8AreCloseIfffEEbRKT_RKT0_RKT1_
     /tmp/ccBOaIhF.s:5969   .text._ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_:0000000000000000 _ZN8UnitTest13ArrayAreCloseIA3_fS1_fEEbRKT_RKT0_iRKT1_
     /tmp/ccBOaIhF.s:4738   .text._ZNSaIfEC2Ev:0000000000000000 _ZNSaIfEC2Ev
     /tmp/ccBOaIhF.s:6034   .text._ZN9__gnu_cxx13new_allocatorIfEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC2Ev
     /tmp/ccBOaIhF.s:4768   .text._ZNSaIfED2Ev:0000000000000000 _ZNSaIfED2Ev
     /tmp/ccBOaIhF.s:6058   .text._ZN9__gnu_cxx13new_allocatorIfED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfED2Ev
     /tmp/ccBOaIhF.s:4797   .text._ZNSt6vectorIfSaIfEEC2EmRKfRKS0_:0000000000000000 _ZNSt6vectorIfSaIfEEC2EmRKfRKS0_
     /tmp/ccBOaIhF.s:6110   .text._ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_:0000000000000000 _ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_
     /tmp/ccBOaIhF.s:6273   .text._ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf:0000000000000000 _ZNSt6vectorIfSaIfEE18_M_fill_initializeEmRKf
     /tmp/ccBOaIhF.s:6190   .text._ZNSt12_Vector_baseIfSaIfEED2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEED2Ev
     /tmp/ccBOaIhF.s:4887   .text._ZNSt6vectorIfSaIfEED2Ev:0000000000000000 _ZNSt6vectorIfSaIfEED2Ev
     /tmp/ccBOaIhF.s:6314   .text._ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE19_M_get_Tp_allocatorEv
     /tmp/ccBOaIhF.s:6335   .text._ZSt8_DestroyIPffEvT_S1_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPffEvT_S1_RSaIT0_E
     /tmp/ccBOaIhF.s:6365   .text._ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_:0000000000000000 _ZN8UnitTest13ArrayAreCloseISt6vectorIfSaIfEES3_fEEbRKT_RKT0_iRKT1_
     /tmp/ccBOaIhF.s:6437   .text._ZNKSt6vectorIfSaIfEEixEm:0000000000000000 _ZNKSt6vectorIfSaIfEEixEm
     /tmp/ccBOaIhF.s:6034   .text._ZN9__gnu_cxx13new_allocatorIfEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC1Ev
     /tmp/ccBOaIhF.s:6058   .text._ZN9__gnu_cxx13new_allocatorIfED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfED1Ev
     /tmp/ccBOaIhF.s:6081   .text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev
     /tmp/ccBOaIhF.s:6081   .text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implD1Ev
     /tmp/ccBOaIhF.s:6464   .text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implC1ERKS0_
     /tmp/ccBOaIhF.s:6503   .text._ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE17_M_create_storageEm
     /tmp/ccBOaIhF.s:6110   .text._ZNSt12_Vector_baseIfSaIfEEC2EmRKS0_:0000000000000000 _ZNSt12_Vector_baseIfSaIfEEC1EmRKS0_
     /tmp/ccBOaIhF.s:6547   .text._ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE13_M_deallocateEPfm
     /tmp/ccBOaIhF.s:6190   .text._ZNSt12_Vector_baseIfSaIfEED2Ev:0000000000000000 _ZNSt12_Vector_baseIfSaIfEED1Ev
     /tmp/ccBOaIhF.s:6581   .text._ZSt24__uninitialized_fill_n_aIPfmffEvT_T0_RKT1_RSaIT2_E:0000000000000000 _ZSt24__uninitialized_fill_n_aIPfmffEvT_T0_RKT1_RSaIT2_E
     /tmp/ccBOaIhF.s:6612   .text._ZSt8_DestroyIPfEvT_S1_:0000000000000000 _ZSt8_DestroyIPfEvT_S1_
     /tmp/ccBOaIhF.s:6464   .text._ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implC2ERKS0_
     /tmp/ccBOaIhF.s:6643   .text._ZNSaIfEC2ERKS_:0000000000000000 _ZNSaIfEC2ERKS_
     /tmp/ccBOaIhF.s:6675   .text._ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE11_M_allocateEm
     /tmp/ccBOaIhF.s:6713   .text._ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfE10deallocateEPfm
     /tmp/ccBOaIhF.s:6739   .text._ZSt20uninitialized_fill_nIPfmfEvT_T0_RKT1_:0000000000000000 _ZSt20uninitialized_fill_nIPfmfEvT_T0_RKT1_
     /tmp/ccBOaIhF.s:6771   .text._ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_:0000000000000000 _ZNSt12_Destroy_auxILb1EE9__destroyIPfEEvT_S3_
     /tmp/ccBOaIhF.s:6793   .text._ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_
     /tmp/ccBOaIhF.s:6643   .text._ZNSaIfEC2ERKS_:0000000000000000 _ZNSaIfEC1ERKS_
     /tmp/ccBOaIhF.s:6817   .text._ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfE8allocateEmPKv
     /tmp/ccBOaIhF.s:6856   .text._ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEEvT_T0_RKT1_:0000000000000000 _ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPfmfEEvT_T0_RKT1_
     /tmp/ccBOaIhF.s:6793   .text._ZN9__gnu_cxx13new_allocatorIfEC2ERKS1_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC1ERKS1_
     /tmp/ccBOaIhF.s:6886   .text._ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorIfE8max_sizeEv
     /tmp/ccBOaIhF.s:6907   .text._ZSt6fill_nIPfmfET_S1_T0_RKT1_:0000000000000000 _ZSt6fill_nIPfmfET_S1_T0_RKT1_
     /tmp/ccBOaIhF.s:6940   .text._ZSt12__niter_baseIPfENSt11_Niter_baseIT_E13iterator_typeES2_:0000000000000000 _ZSt12__niter_baseIPfENSt11_Niter_baseIT_E13iterator_typeES2_
     /tmp/ccBOaIhF.s:6964   .text._ZSt10__fill_n_aIPfmfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_:0000000000000000 _ZSt10__fill_n_aIPfmfEN9__gnu_cxx11__enable_ifIXsrSt11__is_scalarIT1_E7__valueET_E6__typeES6_T0_RKS4_
     /tmp/ccBOaIhF.s:7012   .text._ZNSt10_Iter_baseIPfLb0EE7_S_baseES0_:0000000000000000 _ZNSt10_Iter_baseIPfLb0EE7_S_baseES0_
     /tmp/ccBOaIhF.s:8786   .rodata:0000000000000c00 _ZTIN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
     /tmp/ccBOaIhF.s:7044   .text:0000000000001e56 _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD1Ev
     /tmp/ccBOaIhF.s:7081   .text:0000000000001e90 _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD0Ev
     /tmp/ccBOaIhF.s:7044   .text:0000000000001e56 _ZN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionD2Ev
     /tmp/ccBOaIhF.s:8779   .rodata:0000000000000be0 _ZTIN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
     /tmp/ccBOaIhF.s:7118   .text:0000000000001eb6 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD1Ev
     /tmp/ccBOaIhF.s:7155   .text:0000000000001ef0 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD0Ev
     /tmp/ccBOaIhF.s:7118   .text:0000000000001eb6 _ZN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeD2Ev
     /tmp/ccBOaIhF.s:8772   .rodata:0000000000000bc0 _ZTIN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
     /tmp/ccBOaIhF.s:7192   .text:0000000000001f16 _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD1Ev
     /tmp/ccBOaIhF.s:7229   .text:0000000000001f50 _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD0Ev
     /tmp/ccBOaIhF.s:7192   .text:0000000000001f16 _ZN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledD2Ev
     /tmp/ccBOaIhF.s:8758   .rodata:0000000000000b80 _ZTIN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
     /tmp/ccBOaIhF.s:7266   .text:0000000000001f76 _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD1Ev
     /tmp/ccBOaIhF.s:7303   .text:0000000000001fb0 _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD0Ev
     /tmp/ccBOaIhF.s:7266   .text:0000000000001f76 _ZN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionD2Ev
     /tmp/ccBOaIhF.s:8765   .rodata:0000000000000ba0 _ZTIZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
     /tmp/ccBOaIhF.s:7377   .text:0000000000002010 _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD0Ev
     /tmp/ccBOaIhF.s:7340   .text:0000000000001fd6 _ZZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvEN14WrongThrowTestD2Ev
     /tmp/ccBOaIhF.s:8744   .rodata:0000000000000b40 _ZTIN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
     /tmp/ccBOaIhF.s:7414   .text:0000000000002036 _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD1Ev
     /tmp/ccBOaIhF.s:7451   .text:0000000000002070 _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD0Ev
     /tmp/ccBOaIhF.s:7414   .text:0000000000002036 _ZN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionD2Ev
     /tmp/ccBOaIhF.s:8751   .rodata:0000000000000b60 _ZTIZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
     /tmp/ccBOaIhF.s:7525   .text:00000000000020d0 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD0Ev
     /tmp/ccBOaIhF.s:7488   .text:0000000000002096 _ZZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvEN11NoThrowTestD2Ev
     /tmp/ccBOaIhF.s:8737   .rodata:0000000000000b20 _ZTIN12_GLOBAL__N_123TestCheckAssertSucceedsE
     /tmp/ccBOaIhF.s:7562   .text:00000000000020f6 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsD1Ev
     /tmp/ccBOaIhF.s:7599   .text:0000000000002130 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsD0Ev
     /tmp/ccBOaIhF.s:7562   .text:00000000000020f6 _ZN12_GLOBAL__N_123TestCheckAssertSucceedsD2Ev
     /tmp/ccBOaIhF.s:8724   .rodata:0000000000000af0 _ZTIN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
     /tmp/ccBOaIhF.s:7636   .text:0000000000002156 _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD1Ev
     /tmp/ccBOaIhF.s:7673   .text:0000000000002190 _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD0Ev
     /tmp/ccBOaIhF.s:7636   .text:0000000000002156 _ZN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionD2Ev
     /tmp/ccBOaIhF.s:8717   .rodata:0000000000000ad0 _ZTIN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
     /tmp/ccBOaIhF.s:7710   .text:00000000000021b6 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD1Ev
     /tmp/ccBOaIhF.s:7747   .text:00000000000021f0 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD0Ev
     /tmp/ccBOaIhF.s:7710   .text:00000000000021b6 _ZN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsD2Ev
     /tmp/ccBOaIhF.s:8710   .rodata:0000000000000ab0 _ZTIN12_GLOBAL__N_122TestArrayCloseSucceedsE
     /tmp/ccBOaIhF.s:7784   .text:0000000000002216 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsD1Ev
     /tmp/ccBOaIhF.s:7821   .text:0000000000002250 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsD0Ev
     /tmp/ccBOaIhF.s:7784   .text:0000000000002216 _ZN12_GLOBAL__N_122TestArrayCloseSucceedsD2Ev
     /tmp/ccBOaIhF.s:8703   .rodata:0000000000000a90 _ZTIN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
     /tmp/ccBOaIhF.s:7858   .text:0000000000002276 _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD1Ev
     /tmp/ccBOaIhF.s:7895   .text:00000000000022b0 _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD0Ev
     /tmp/ccBOaIhF.s:7858   .text:0000000000002276 _ZN12_GLOBAL__N_127TestValidCheckCloseSucceedsD2Ev
     /tmp/ccBOaIhF.s:8696   .rodata:0000000000000a70 _ZTIN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
     /tmp/ccBOaIhF.s:7932   .text:00000000000022d6 _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD1Ev
     /tmp/ccBOaIhF.s:7969   .text:0000000000002310 _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD0Ev
     /tmp/ccBOaIhF.s:7932   .text:00000000000022d6 _ZN12_GLOBAL__N_131TestCheckEqualWorksWithPointersD2Ev
     /tmp/ccBOaIhF.s:8689   .rodata:0000000000000a50 _ZTIN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
     /tmp/ccBOaIhF.s:8006   .text:0000000000002336 _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD1Ev
     /tmp/ccBOaIhF.s:8043   .text:0000000000002370 _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD0Ev
     /tmp/ccBOaIhF.s:8006   .text:0000000000002336 _ZN12_GLOBAL__N_127TestValidCheckEqualSucceedsD2Ev
     /tmp/ccBOaIhF.s:8682   .rodata:0000000000000a30 _ZTIN12_GLOBAL__N_126TestCheckWorksWithPointersE
     /tmp/ccBOaIhF.s:8080   .text:0000000000002396 _ZN12_GLOBAL__N_126TestCheckWorksWithPointersD1Ev
     /tmp/ccBOaIhF.s:8117   .text:00000000000023d0 _ZN12_GLOBAL__N_126TestCheckWorksWithPointersD0Ev
     /tmp/ccBOaIhF.s:8080   .text:0000000000002396 _ZN12_GLOBAL__N_126TestCheckWorksWithPointersD2Ev
     /tmp/ccBOaIhF.s:8675   .rodata:0000000000000a10 _ZTIN12_GLOBAL__N_122TestValidCheckSucceedsE
     /tmp/ccBOaIhF.s:8154   .text:00000000000023f6 _ZN12_GLOBAL__N_122TestValidCheckSucceedsD1Ev
     /tmp/ccBOaIhF.s:8191   .text:0000000000002430 _ZN12_GLOBAL__N_122TestValidCheckSucceedsD0Ev
     /tmp/ccBOaIhF.s:8154   .text:00000000000023f6 _ZN12_GLOBAL__N_122TestValidCheckSucceedsD2Ev
     /tmp/ccBOaIhF.s:8471   .rodata._ZTIN8UnitTest15MemoryOutStreamE:0000000000000000 _ZTIN8UnitTest15MemoryOutStreamE
     /tmp/ccBOaIhF.s:8376   .text._ZN8UnitTest15MemoryOutStreamD0Ev:0000000000000000 _ZN8UnitTest15MemoryOutStreamD0Ev
     /tmp/ccBOaIhF.s:8362   .text._ZN8UnitTest15MemoryOutStreamD1Ev:00000000000000c8 _ZTv0_n24_N8UnitTest15MemoryOutStreamD1Ev
     /tmp/ccBOaIhF.s:8403   .text._ZN8UnitTest15MemoryOutStreamD0Ev:0000000000000026 _ZTv0_n24_N8UnitTest15MemoryOutStreamD0Ev
     /tmp/ccBOaIhF.s:8431   .rodata._ZTCN8UnitTest15MemoryOutStreamE0_St19basic_ostringstreamIcSt11char_traitsIcESaIcEE:0000000000000000 _ZTCN8UnitTest15MemoryOutStreamE0_St19basic_ostringstreamIcSt11char_traitsIcESaIcEE
     /tmp/ccBOaIhF.s:8448   .rodata._ZTCN8UnitTest15MemoryOutStreamE0_So:0000000000000000 _ZTCN8UnitTest15MemoryOutStreamE0_So
     /tmp/ccBOaIhF.s:8464   .rodata._ZTSN8UnitTest15MemoryOutStreamE:0000000000000000 _ZTSN8UnitTest15MemoryOutStreamE
     /tmp/ccBOaIhF.s:8477   .text:0000000000002456 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccBOaIhF.s:8873   .rodata:00000000000010a0 _ZTSN12_GLOBAL__N_122TestValidCheckSucceedsE
     /tmp/ccBOaIhF.s:8868   .rodata:0000000000001060 _ZTSN12_GLOBAL__N_126TestCheckWorksWithPointersE
     /tmp/ccBOaIhF.s:8863   .rodata:0000000000001020 _ZTSN12_GLOBAL__N_127TestValidCheckEqualSucceedsE
     /tmp/ccBOaIhF.s:8858   .rodata:0000000000000fe0 _ZTSN12_GLOBAL__N_131TestCheckEqualWorksWithPointersE
     /tmp/ccBOaIhF.s:8853   .rodata:0000000000000fa0 _ZTSN12_GLOBAL__N_127TestValidCheckCloseSucceedsE
     /tmp/ccBOaIhF.s:8848   .rodata:0000000000000f60 _ZTSN12_GLOBAL__N_122TestArrayCloseSucceedsE
     /tmp/ccBOaIhF.s:8843   .rodata:0000000000000f20 _ZTSN12_GLOBAL__N_135TestCheckArrayCloseWorksWithVectorsE
     /tmp/ccBOaIhF.s:8838   .rodata:0000000000000ec0 _ZTSN12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectExceptionE
     /tmp/ccBOaIhF.s:8833   .rodata:0000000000000e60 _ZTSZNK12_GLOBAL__N_145TestCheckThrowMacroSucceedsOnCorrectException7RunImplEvE13TestException
     /tmp/ccBOaIhF.s:8828   .rodata:0000000000000e20 _ZTSN12_GLOBAL__N_123TestCheckAssertSucceedsE
     /tmp/ccBOaIhF.s:8823   .rodata:0000000000000de0 _ZTSN12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingExceptionE
     /tmp/ccBOaIhF.s:8818   .rodata:0000000000000d80 _ZTSZNK12_GLOBAL__N_142TestCheckThrowMacroFailsOnMissingException7RunImplEvE11NoThrowTest
     /tmp/ccBOaIhF.s:8813   .rodata:0000000000000d40 _ZTSN12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongExceptionE
     /tmp/ccBOaIhF.s:8808   .rodata:0000000000000ce0 _ZTSZNK12_GLOBAL__N_140TestCheckThrowMacroFailsOnWrongException7RunImplEvE14WrongThrowTest
     /tmp/ccBOaIhF.s:8803   .rodata:0000000000000ca0 _ZTSN12_GLOBAL__N_143TestSimpleFixtureDefaultFixtureCtorIsCalledE
     /tmp/ccBOaIhF.s:8798   .rodata:0000000000000c60 _ZTSN12_GLOBAL__N_143TestSimpleFixtureOnlyOneFixtureAliveAtATimeE
     /tmp/ccBOaIhF.s:8793   .rodata:0000000000000c20 _ZTSN12_GLOBAL__N_137TestCanCallCHECKOutsideOfTestFunctionE
     /tmp/ccBOaIhF.s:8877   .text:0000000000002763 _GLOBAL__sub_I_TestUnitTest__.cpp
     /tmp/ccBOaIhF.s:8903   .rodata:00000000000010d0 _ZZL18__gthread_active_pvE20__gthread_active_ptr
                           .group:0000000000000000 _ZN17ScopedCurrentTestC5ERN8UnitTest11TestResultsEPKNS0_11TestDetailsE
                           .group:0000000000000000 _ZN17ScopedCurrentTestD5Ev
                           .group:0000000000000000 _ZNSaIfEC5Ev
                           .group:0000000000000000 _ZNSaIfED5Ev
                           .group:0000000000000000 _ZNSt6vectorIfSaIfEEC5EmRKfRKS0_
                           .group:0000000000000000 _ZNSt6vectorIfSaIfEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIfSaIfEEC5EmRKS0_
                           .group:0000000000000000 _ZNSt12_Vector_baseIfSaIfEED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIfSaIfEE12_Vector_implC5ERKS0_
                           .group:0000000000000000 _ZNSaIfEC5ERKS_
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIfEC5ERKS1_

UNDEFINED SYMBOLS
__gxx_personality_v0
_ZNSt9basic_iosIcSt11char_traitsIcEEC2Ev
_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEEC2ESt13_Ios_Openmode
_ZNSsC1Ev
_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED2Ev
_ZNSt9basic_iosIcSt11char_traitsIcEED2Ev
_Unwind_Resume
_ZN8UnitTest11CurrentTest7ResultsEv
_ZN8UnitTest11CurrentTest7DetailsEv
_ZN8UnitTest4TestC2EPKcS2_S2_i
_ZN8UnitTest11TestDetailsC1ERKS0_i
_ZN8UnitTest11TestResults13OnTestFailureERKNS_11TestDetailsEPKc
__cxa_end_catch
__cxa_begin_catch
__cxa_allocate_exception
__cxa_throw
_ZN8UnitTest12ReportAssertEPKcS1_i
_ZTIN8UnitTest15AssertExceptionE
_ZN8UnitTest11TestResultsC1EPNS_12TestReporterE
_ZN8UnitTest4Test3RunEv
_ZNK8UnitTest11TestResults15GetFailureCountEv
_ZTIPKc
_ZTIi
_ZNK8UnitTest15AssertException10LineNumberEv
_ZNK8UnitTest15AssertException8FilenameEv
_ZN8UnitTest11TestDetailsC1EPKcS2_S2_i
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZNK8UnitTest15MemoryOutStream7GetTextEv
_ZTISt9exception
_ZNSolsEi
_ZNSolsEPKv
_ZNSolsEf
_ZN8UnitTest16SignalTranslatorC1Ev
_ZN8UnitTest16SignalTranslator12s_jumpTargetE
__sigsetjmp
_ZN8UnitTest16SignalTranslatorD1Ev
_ZdlPv
_ZSt17__throw_bad_allocv
_Znwm
_ZN8UnitTest4TestD2Ev
_ZNSsD1Ev
_ZTISt19basic_ostringstreamIcSt11char_traitsIcESaIcEE
_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
_ZNSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED0Ev
_ZTv0_n24_NSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED1Ev
_ZTv0_n24_NSt19basic_ostringstreamIcSt11char_traitsIcESaIcEED0Ev
_ZTISo
_ZNSoD1Ev
_ZNSoD0Ev
_ZTv0_n24_NSoD1Ev
_ZTv0_n24_NSoD0Ev
_ZTVN10__cxxabiv120__si_class_type_infoE
__dso_handle
__cxa_atexit
_ZN8UnitTest4Test11GetTestListEv
_ZN8UnitTest9ListAdderC1ERNS_8TestListEPNS_4TestE
_ZTIN8UnitTest4TestE
_ZTVN10__cxxabiv117__class_type_infoE
__pthread_key_create
