   1              		.file	"DeferredTestReporter.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.section	.text._ZnwmPv,"axG",@progbits,_ZnwmPv,comdat
   5              		.weak	_ZnwmPv
   7              	_ZnwmPv:
   8              	.LFB220:
   9              		.file 1 "/usr/include/c++/4.8/new"
   1:/usr/include/c++/4.8/new **** // The -*- C++ -*- dynamic memory management header.
   2:/usr/include/c++/4.8/new **** 
   3:/usr/include/c++/4.8/new **** // Copyright (C) 1994-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/new **** 
   5:/usr/include/c++/4.8/new **** // This file is part of GCC.
   6:/usr/include/c++/4.8/new **** //
   7:/usr/include/c++/4.8/new **** // GCC is free software; you can redistribute it and/or modify
   8:/usr/include/c++/4.8/new **** // it under the terms of the GNU General Public License as published by
   9:/usr/include/c++/4.8/new **** // the Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.8/new **** // any later version.
  11:/usr/include/c++/4.8/new **** // 
  12:/usr/include/c++/4.8/new **** // GCC is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.8/new **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.8/new **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.8/new **** // GNU General Public License for more details.
  16:/usr/include/c++/4.8/new **** // 
  17:/usr/include/c++/4.8/new **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.8/new **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.8/new **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.8/new **** 
  21:/usr/include/c++/4.8/new **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.8/new **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.8/new **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.8/new **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.8/new **** 
  26:/usr/include/c++/4.8/new **** /** @file new
  27:/usr/include/c++/4.8/new ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/4.8/new ****  *
  29:/usr/include/c++/4.8/new ****  *  The header @c new defines several functions to manage dynamic memory and
  30:/usr/include/c++/4.8/new ****  *  handling memory allocation errors; see
  31:/usr/include/c++/4.8/new ****  *  http://gcc.gnu.org/onlinedocs/libstdc++/18_support/howto.html#4 for more.
  32:/usr/include/c++/4.8/new ****  */
  33:/usr/include/c++/4.8/new **** 
  34:/usr/include/c++/4.8/new **** #ifndef _NEW
  35:/usr/include/c++/4.8/new **** #define _NEW
  36:/usr/include/c++/4.8/new **** 
  37:/usr/include/c++/4.8/new **** #pragma GCC system_header
  38:/usr/include/c++/4.8/new **** 
  39:/usr/include/c++/4.8/new **** #include <bits/c++config.h>
  40:/usr/include/c++/4.8/new **** #include <exception>
  41:/usr/include/c++/4.8/new **** 
  42:/usr/include/c++/4.8/new **** #pragma GCC visibility push(default)
  43:/usr/include/c++/4.8/new **** 
  44:/usr/include/c++/4.8/new **** extern "C++" {
  45:/usr/include/c++/4.8/new **** 
  46:/usr/include/c++/4.8/new **** namespace std 
  47:/usr/include/c++/4.8/new **** {
  48:/usr/include/c++/4.8/new ****   /**
  49:/usr/include/c++/4.8/new ****    *  @brief  Exception possibly thrown by @c new.
  50:/usr/include/c++/4.8/new ****    *  @ingroup exceptions
  51:/usr/include/c++/4.8/new ****    *
  52:/usr/include/c++/4.8/new ****    *  @c bad_alloc (or classes derived from it) is used to report allocation
  53:/usr/include/c++/4.8/new ****    *  errors from the throwing forms of @c new.  */
  54:/usr/include/c++/4.8/new ****   class bad_alloc : public exception 
  55:/usr/include/c++/4.8/new ****   {
  56:/usr/include/c++/4.8/new ****   public:
  57:/usr/include/c++/4.8/new ****     bad_alloc() throw() { }
  58:/usr/include/c++/4.8/new **** 
  59:/usr/include/c++/4.8/new ****     // This declaration is not useless:
  60:/usr/include/c++/4.8/new ****     // http://gcc.gnu.org/onlinedocs/gcc-3.0.2/gcc_6.html#SEC118
  61:/usr/include/c++/4.8/new ****     virtual ~bad_alloc() throw();
  62:/usr/include/c++/4.8/new **** 
  63:/usr/include/c++/4.8/new ****     // See comment in eh_exception.cc.
  64:/usr/include/c++/4.8/new ****     virtual const char* what() const throw();
  65:/usr/include/c++/4.8/new ****   };
  66:/usr/include/c++/4.8/new **** 
  67:/usr/include/c++/4.8/new ****   struct nothrow_t { };
  68:/usr/include/c++/4.8/new **** 
  69:/usr/include/c++/4.8/new ****   extern const nothrow_t nothrow;
  70:/usr/include/c++/4.8/new **** 
  71:/usr/include/c++/4.8/new ****   /** If you write your own error handler to be called by @c new, it must
  72:/usr/include/c++/4.8/new ****    *  be of this type.  */
  73:/usr/include/c++/4.8/new ****   typedef void (*new_handler)();
  74:/usr/include/c++/4.8/new **** 
  75:/usr/include/c++/4.8/new ****   /// Takes a replacement handler as the argument, returns the
  76:/usr/include/c++/4.8/new ****   /// previous handler.
  77:/usr/include/c++/4.8/new ****   new_handler set_new_handler(new_handler) throw();
  78:/usr/include/c++/4.8/new **** } // namespace std
  79:/usr/include/c++/4.8/new **** 
  80:/usr/include/c++/4.8/new **** //@{
  81:/usr/include/c++/4.8/new **** /** These are replaceable signatures:
  82:/usr/include/c++/4.8/new ****  *  - normal single new and delete (no arguments, throw @c bad_alloc on error)
  83:/usr/include/c++/4.8/new ****  *  - normal array new and delete (same)
  84:/usr/include/c++/4.8/new ****  *  - @c nothrow single new and delete (take a @c nothrow argument, return
  85:/usr/include/c++/4.8/new ****  *    @c NULL on error)
  86:/usr/include/c++/4.8/new ****  *  - @c nothrow array new and delete (same)
  87:/usr/include/c++/4.8/new ****  *
  88:/usr/include/c++/4.8/new ****  *  Placement new and delete signatures (take a memory address argument,
  89:/usr/include/c++/4.8/new ****  *  does nothing) may not be replaced by a user's program.
  90:/usr/include/c++/4.8/new **** */
  91:/usr/include/c++/4.8/new **** void* operator new(std::size_t) _GLIBCXX_THROW (std::bad_alloc)
  92:/usr/include/c++/4.8/new ****   __attribute__((__externally_visible__));
  93:/usr/include/c++/4.8/new **** void* operator new[](std::size_t) _GLIBCXX_THROW (std::bad_alloc)
  94:/usr/include/c++/4.8/new ****   __attribute__((__externally_visible__));
  95:/usr/include/c++/4.8/new **** void operator delete(void*) _GLIBCXX_USE_NOEXCEPT
  96:/usr/include/c++/4.8/new ****   __attribute__((__externally_visible__));
  97:/usr/include/c++/4.8/new **** void operator delete[](void*) _GLIBCXX_USE_NOEXCEPT
  98:/usr/include/c++/4.8/new ****   __attribute__((__externally_visible__));
  99:/usr/include/c++/4.8/new **** void* operator new(std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 100:/usr/include/c++/4.8/new ****   __attribute__((__externally_visible__));
 101:/usr/include/c++/4.8/new **** void* operator new[](std::size_t, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 102:/usr/include/c++/4.8/new ****   __attribute__((__externally_visible__));
 103:/usr/include/c++/4.8/new **** void operator delete(void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 104:/usr/include/c++/4.8/new ****   __attribute__((__externally_visible__));
 105:/usr/include/c++/4.8/new **** void operator delete[](void*, const std::nothrow_t&) _GLIBCXX_USE_NOEXCEPT
 106:/usr/include/c++/4.8/new ****   __attribute__((__externally_visible__));
 107:/usr/include/c++/4.8/new **** 
 108:/usr/include/c++/4.8/new **** // Default placement versions of operator new.
 109:/usr/include/c++/4.8/new **** inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 110:/usr/include/c++/4.8/new **** { return __p; }
  10              		.loc 1 110 0
  11              		.cfi_startproc
  12 0000 55       		pushq	%rbp
  13              		.cfi_def_cfa_offset 16
  14              		.cfi_offset 6, -16
  15 0001 4889E5   		movq	%rsp, %rbp
  16              		.cfi_def_cfa_register 6
  17 0004 48897DF8 		movq	%rdi, -8(%rbp)
  18 0008 488975F0 		movq	%rsi, -16(%rbp)
  19              		.loc 1 110 0
  20 000c 488B45F0 		movq	-16(%rbp), %rax
  21 0010 5D       		popq	%rbp
  22              		.cfi_def_cfa 7, 8
  23 0011 C3       		ret
  24              		.cfi_endproc
  25              	.LFE220:
  27              		.section	.text._ZdlPvS_,"axG",@progbits,_ZdlPvS_,comdat
  28              		.weak	_ZdlPvS_
  30              	_ZdlPvS_:
  31              	.LFB222:
 111:/usr/include/c++/4.8/new **** inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
 112:/usr/include/c++/4.8/new **** { return __p; }
 113:/usr/include/c++/4.8/new **** 
 114:/usr/include/c++/4.8/new **** // Default placement versions of operator delete.
 115:/usr/include/c++/4.8/new **** inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
  32              		.loc 1 115 0
  33              		.cfi_startproc
  34 0000 55       		pushq	%rbp
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 6, -16
  37 0001 4889E5   		movq	%rsp, %rbp
  38              		.cfi_def_cfa_register 6
  39 0004 48897DF8 		movq	%rdi, -8(%rbp)
  40 0008 488975F0 		movq	%rsi, -16(%rbp)
  41              		.loc 1 115 0
  42 000c 5D       		popq	%rbp
  43              		.cfi_def_cfa 7, 8
  44 000d C3       		ret
  45              		.cfi_endproc
  46              	.LFE222:
  48              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
  49              		.align 2
  50              		.weak	_ZN8UnitTest18DeferredTestResultD2Ev
  52              	_ZN8UnitTest18DeferredTestResultD2Ev:
  53              	.LFB819:
  54              		.file 2 "DeferredTestResult.h"
   1:DeferredTestResult.h **** #ifndef UNITTEST_DEFERREDTESTRESULT_H
   2:DeferredTestResult.h **** #define UNITTEST_DEFERREDTESTRESULT_H
   3:DeferredTestResult.h **** 
   4:DeferredTestResult.h **** #include <string>
   5:DeferredTestResult.h **** #include <vector>
   6:DeferredTestResult.h **** 
   7:DeferredTestResult.h **** namespace UnitTest
   8:DeferredTestResult.h **** {
   9:DeferredTestResult.h **** 
  10:DeferredTestResult.h **** struct DeferredTestResult
  55              		.loc 2 10 0
  56              		.cfi_startproc
  57              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
  58              		.cfi_lsda 0x1b,.LLSDA819
  59 0000 55       		pushq	%rbp
  60              		.cfi_def_cfa_offset 16
  61              		.cfi_offset 6, -16
  62 0001 4889E5   		movq	%rsp, %rbp
  63              		.cfi_def_cfa_register 6
  64 0004 53       		pushq	%rbx
  65 0005 4883EC18 		subq	$24, %rsp
  66              		.cfi_offset 3, -24
  67 0009 48897DE8 		movq	%rdi, -24(%rbp)
  68              	.LBB2:
  69              		.loc 2 10 0
  70 000d 488B45E8 		movq	-24(%rbp), %rax
  71 0011 4883C018 		addq	$24, %rax
  72 0015 4889C7   		movq	%rax, %rdi
  73              	.LEHB0:
  74 0018 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev@PLT
  74      00
  75              	.LEHE0:
  76              		.loc 2 10 0 is_stmt 0 discriminator 1
  77 001d 488B45E8 		movq	-24(%rbp), %rax
  78 0021 4883C010 		addq	$16, %rax
  79 0025 4889C7   		movq	%rax, %rdi
  80              	.LEHB1:
  81 0028 E8000000 		call	_ZNSsD1Ev@PLT
  81      00
  82              	.LEHE1:
  83              		.loc 2 10 0 discriminator 2
  84 002d 488B45E8 		movq	-24(%rbp), %rax
  85 0031 4883C008 		addq	$8, %rax
  86 0035 4889C7   		movq	%rax, %rdi
  87              	.LEHB2:
  88 0038 E8000000 		call	_ZNSsD1Ev@PLT
  88      00
  89              	.LEHE2:
  90              		.loc 2 10 0 discriminator 3
  91 003d 488B45E8 		movq	-24(%rbp), %rax
  92 0041 4889C7   		movq	%rax, %rdi
  93              	.LEHB3:
  94 0044 E8000000 		call	_ZNSsD1Ev@PLT
  94      00
  95              	.LEHE3:
  96 0049 EB44     		jmp	.L12
  97              	.L9:
  98 004b 4889C3   		movq	%rax, %rbx
  99              		.loc 2 10 0
 100 004e 488B45E8 		movq	-24(%rbp), %rax
 101 0052 4883C010 		addq	$16, %rax
 102 0056 4889C7   		movq	%rax, %rdi
 103 0059 E8000000 		call	_ZNSsD1Ev@PLT
 103      00
 104 005e EB03     		jmp	.L7
 105              	.L10:
 106 0060 4889C3   		movq	%rax, %rbx
 107              	.L7:
 108 0063 488B45E8 		movq	-24(%rbp), %rax
 109 0067 4883C008 		addq	$8, %rax
 110 006b 4889C7   		movq	%rax, %rdi
 111 006e E8000000 		call	_ZNSsD1Ev@PLT
 111      00
 112 0073 EB03     		jmp	.L8
 113              	.L11:
 114 0075 4889C3   		movq	%rax, %rbx
 115              	.L8:
 116 0078 488B45E8 		movq	-24(%rbp), %rax
 117 007c 4889C7   		movq	%rax, %rdi
 118 007f E8000000 		call	_ZNSsD1Ev@PLT
 118      00
 119 0084 4889D8   		movq	%rbx, %rax
 120 0087 4889C7   		movq	%rax, %rdi
 121              	.LEHB4:
 122 008a E8000000 		call	_Unwind_Resume@PLT
 122      00
 123              	.LEHE4:
 124              	.L12:
 125              	.LBE2:
 126 008f 4883C418 		addq	$24, %rsp
 127 0093 5B       		popq	%rbx
 128 0094 5D       		popq	%rbp
 129              		.cfi_def_cfa 7, 8
 130 0095 C3       		ret
 131              		.cfi_endproc
 132              	.LFE819:
 133              		.globl	__gxx_personality_v0
 134              		.section	.gcc_except_table._ZN8UnitTest18DeferredTestResultD2Ev,"aG",@progbits,_ZN8UnitTest18Defer
 135              	.LLSDA819:
 136 0000 FF       		.byte	0xff
 137 0001 FF       		.byte	0xff
 138 0002 01       		.byte	0x1
 139 0003 15       		.uleb128 .LLSDACSE819-.LLSDACSB819
 140              	.LLSDACSB819:
 141 0004 18       		.uleb128 .LEHB0-.LFB819
 142 0005 05       		.uleb128 .LEHE0-.LEHB0
 143 0006 4B       		.uleb128 .L9-.LFB819
 144 0007 00       		.uleb128 0
 145 0008 28       		.uleb128 .LEHB1-.LFB819
 146 0009 05       		.uleb128 .LEHE1-.LEHB1
 147 000a 60       		.uleb128 .L10-.LFB819
 148 000b 00       		.uleb128 0
 149 000c 38       		.uleb128 .LEHB2-.LFB819
 150 000d 05       		.uleb128 .LEHE2-.LEHB2
 151 000e 75       		.uleb128 .L11-.LFB819
 152 000f 00       		.uleb128 0
 153 0010 44       		.uleb128 .LEHB3-.LFB819
 154 0011 05       		.uleb128 .LEHE3-.LEHB3
 155 0012 00       		.uleb128 0
 156 0013 00       		.uleb128 0
 157 0014 8A01     		.uleb128 .LEHB4-.LFB819
 158 0016 05       		.uleb128 .LEHE4-.LEHB4
 159 0017 00       		.uleb128 0
 160 0018 00       		.uleb128 0
 161              	.LLSDACSE819:
 162              		.section	.text._ZN8UnitTest18DeferredTestResultD2Ev,"axG",@progbits,_ZN8UnitTest18DeferredTestResu
 164              		.weak	_ZN8UnitTest18DeferredTestResultD1Ev
 165              		.set	_ZN8UnitTest18DeferredTestResultD1Ev,_ZN8UnitTest18DeferredTestResultD2Ev
 166              		.text
 167              		.align 2
 168              		.globl	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 170              	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE:
 171              	.LFB817:
 172              		.file 3 "DeferredTestReporter.cpp"
   1:DeferredTestReporter.cpp **** #include "DeferredTestReporter.h"
   2:DeferredTestReporter.cpp **** #include "TestDetails.h"
   3:DeferredTestReporter.cpp **** #include "Config.h"
   4:DeferredTestReporter.cpp **** 
   5:DeferredTestReporter.cpp **** using namespace UnitTest;
   6:DeferredTestReporter.cpp **** 
   7:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportTestStart(TestDetails const& details)
   8:DeferredTestReporter.cpp **** {
 173              		.loc 3 8 0 is_stmt 1
 174              		.cfi_startproc
 175              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 176              		.cfi_lsda 0x1b,.LLSDA817
 177 0000 55       		pushq	%rbp
 178              		.cfi_def_cfa_offset 16
 179              		.cfi_offset 6, -16
 180 0001 4889E5   		movq	%rsp, %rbp
 181              		.cfi_def_cfa_register 6
 182 0004 53       		pushq	%rbx
 183 0005 4883EC58 		subq	$88, %rsp
 184              		.cfi_offset 3, -24
 185 0009 48897DA8 		movq	%rdi, -88(%rbp)
 186 000d 488975A0 		movq	%rsi, -96(%rbp)
   9:DeferredTestReporter.cpp ****     m_results.push_back(DeferredTestResult(details.suiteName, details.testName));
 187              		.loc 3 9 0
 188 0011 488B45A0 		movq	-96(%rbp), %rax
 189 0015 488B5008 		movq	8(%rax), %rdx
 190 0019 488B45A0 		movq	-96(%rbp), %rax
 191 001d 488B08   		movq	(%rax), %rcx
 192 0020 488D45B0 		leaq	-80(%rbp), %rax
 193 0024 4889CE   		movq	%rcx, %rsi
 194 0027 4889C7   		movq	%rax, %rdi
 195              	.LEHB5:
 196 002a E8000000 		call	_ZN8UnitTest18DeferredTestResultC1EPKcS2_@PLT
 196      00
 197              	.LEHE5:
 198 002f 488B45A8 		movq	-88(%rbp), %rax
 199 0033 488D5008 		leaq	8(%rax), %rdx
 200 0037 488D45B0 		leaq	-80(%rbp), %rax
 201 003b 4889C6   		movq	%rax, %rsi
 202 003e 4889D7   		movq	%rdx, %rdi
 203              	.LEHB6:
 204 0041 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_@PLT
 204      00
 205              	.LEHE6:
 206              		.loc 3 9 0 is_stmt 0 discriminator 1
 207 0046 488D45B0 		leaq	-80(%rbp), %rax
 208 004a 4889C7   		movq	%rax, %rdi
 209              	.LEHB7:
 210 004d E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 210      00
 211              	.LEHE7:
 212 0052 EB1A     		jmp	.L16
 213              	.L15:
 214 0054 4889C3   		movq	%rax, %rbx
 215              		.loc 3 9 0
 216 0057 488D45B0 		leaq	-80(%rbp), %rax
 217 005b 4889C7   		movq	%rax, %rdi
 218 005e E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 218      00
 219 0063 4889D8   		movq	%rbx, %rax
 220 0066 4889C7   		movq	%rax, %rdi
 221              	.LEHB8:
 222 0069 E8000000 		call	_Unwind_Resume@PLT
 222      00
 223              	.LEHE8:
 224              	.L16:
  10:DeferredTestReporter.cpp **** }
 225              		.loc 3 10 0 is_stmt 1
 226 006e 4883C458 		addq	$88, %rsp
 227 0072 5B       		popq	%rbx
 228 0073 5D       		popq	%rbp
 229              		.cfi_def_cfa 7, 8
 230 0074 C3       		ret
 231              		.cfi_endproc
 232              	.LFE817:
 233              		.section	.gcc_except_table,"a",@progbits
 234              	.LLSDA817:
 235 0000 FF       		.byte	0xff
 236 0001 FF       		.byte	0xff
 237 0002 01       		.byte	0x1
 238 0003 10       		.uleb128 .LLSDACSE817-.LLSDACSB817
 239              	.LLSDACSB817:
 240 0004 2A       		.uleb128 .LEHB5-.LFB817
 241 0005 05       		.uleb128 .LEHE5-.LEHB5
 242 0006 00       		.uleb128 0
 243 0007 00       		.uleb128 0
 244 0008 41       		.uleb128 .LEHB6-.LFB817
 245 0009 05       		.uleb128 .LEHE6-.LEHB6
 246 000a 54       		.uleb128 .L15-.LFB817
 247 000b 00       		.uleb128 0
 248 000c 4D       		.uleb128 .LEHB7-.LFB817
 249 000d 05       		.uleb128 .LEHE7-.LEHB7
 250 000e 00       		.uleb128 0
 251 000f 00       		.uleb128 0
 252 0010 69       		.uleb128 .LEHB8-.LFB817
 253 0011 05       		.uleb128 .LEHE8-.LEHB8
 254 0012 00       		.uleb128 0
 255 0013 00       		.uleb128 0
 256              	.LLSDACSE817:
 257              		.text
 259              		.section	.text._ZNSt4pairIiSsED2Ev,"axG",@progbits,_ZNSt4pairIiSsED5Ev,comdat
 260              		.align 2
 261              		.weak	_ZNSt4pairIiSsED2Ev
 263              	_ZNSt4pairIiSsED2Ev:
 264              	.LFB823:
 265              		.file 4 "/usr/include/c++/4.8/bits/stl_pair.h"
   1:/usr/include/c++/4.8/bits/stl_pair.h **** // Pair implementation -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_pair.h **** 
   3:/usr/include/c++/4.8/bits/stl_pair.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_pair.h **** //
   5:/usr/include/c++/4.8/bits/stl_pair.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_pair.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_pair.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_pair.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_pair.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_pair.h **** 
  11:/usr/include/c++/4.8/bits/stl_pair.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_pair.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_pair.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_pair.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_pair.h **** 
  16:/usr/include/c++/4.8/bits/stl_pair.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_pair.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_pair.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_pair.h **** 
  20:/usr/include/c++/4.8/bits/stl_pair.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_pair.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_pair.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_pair.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_pair.h **** 
  25:/usr/include/c++/4.8/bits/stl_pair.h **** /*
  26:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  27:/usr/include/c++/4.8/bits/stl_pair.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_pair.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  30:/usr/include/c++/4.8/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_pair.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_pair.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  38:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  39:/usr/include/c++/4.8/bits/stl_pair.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.8/bits/stl_pair.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_pair.h ****  *
  42:/usr/include/c++/4.8/bits/stl_pair.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_pair.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_pair.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_pair.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_pair.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_pair.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_pair.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_pair.h ****  */
  50:/usr/include/c++/4.8/bits/stl_pair.h **** 
  51:/usr/include/c++/4.8/bits/stl_pair.h **** /** @file bits/stl_pair.h
  52:/usr/include/c++/4.8/bits/stl_pair.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_pair.h ****  *  Do not attempt to use it directly. @headername{utility}
  54:/usr/include/c++/4.8/bits/stl_pair.h ****  */
  55:/usr/include/c++/4.8/bits/stl_pair.h **** 
  56:/usr/include/c++/4.8/bits/stl_pair.h **** #ifndef _STL_PAIR_H
  57:/usr/include/c++/4.8/bits/stl_pair.h **** #define _STL_PAIR_H 1
  58:/usr/include/c++/4.8/bits/stl_pair.h **** 
  59:/usr/include/c++/4.8/bits/stl_pair.h **** #include <bits/move.h> // for std::move / std::forward, and std::swap
  60:/usr/include/c++/4.8/bits/stl_pair.h **** 
  61:/usr/include/c++/4.8/bits/stl_pair.h **** #if __cplusplus >= 201103L
  62:/usr/include/c++/4.8/bits/stl_pair.h **** #include <type_traits> // for std::__decay_and_strip too
  63:/usr/include/c++/4.8/bits/stl_pair.h **** #endif
  64:/usr/include/c++/4.8/bits/stl_pair.h **** 
  65:/usr/include/c++/4.8/bits/stl_pair.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/4.8/bits/stl_pair.h **** {
  67:/usr/include/c++/4.8/bits/stl_pair.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  68:/usr/include/c++/4.8/bits/stl_pair.h **** 
  69:/usr/include/c++/4.8/bits/stl_pair.h ****   /**
  70:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @addtogroup utilities
  71:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @{
  72:/usr/include/c++/4.8/bits/stl_pair.h ****    */
  73:/usr/include/c++/4.8/bits/stl_pair.h **** 
  74:/usr/include/c++/4.8/bits/stl_pair.h **** #if __cplusplus >= 201103L
  75:/usr/include/c++/4.8/bits/stl_pair.h ****   /// piecewise_construct_t
  76:/usr/include/c++/4.8/bits/stl_pair.h ****   struct piecewise_construct_t { };
  77:/usr/include/c++/4.8/bits/stl_pair.h **** 
  78:/usr/include/c++/4.8/bits/stl_pair.h ****   /// piecewise_construct
  79:/usr/include/c++/4.8/bits/stl_pair.h ****   constexpr piecewise_construct_t piecewise_construct = piecewise_construct_t();
  80:/usr/include/c++/4.8/bits/stl_pair.h **** 
  81:/usr/include/c++/4.8/bits/stl_pair.h ****   // Forward declarations.
  82:/usr/include/c++/4.8/bits/stl_pair.h ****   template<typename...>
  83:/usr/include/c++/4.8/bits/stl_pair.h ****     class tuple;
  84:/usr/include/c++/4.8/bits/stl_pair.h **** 
  85:/usr/include/c++/4.8/bits/stl_pair.h ****   template<std::size_t...>
  86:/usr/include/c++/4.8/bits/stl_pair.h ****     struct _Index_tuple;
  87:/usr/include/c++/4.8/bits/stl_pair.h **** #endif
  88:/usr/include/c++/4.8/bits/stl_pair.h **** 
  89:/usr/include/c++/4.8/bits/stl_pair.h ****  /**
  90:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @brief Struct holding two objects of arbitrary type.
  91:/usr/include/c++/4.8/bits/stl_pair.h ****    *
  92:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @tparam _T1  Type of first object.
  93:/usr/include/c++/4.8/bits/stl_pair.h ****    *  @tparam _T2  Type of second object.
  94:/usr/include/c++/4.8/bits/stl_pair.h ****    */
  95:/usr/include/c++/4.8/bits/stl_pair.h ****   template<class _T1, class _T2>
  96:/usr/include/c++/4.8/bits/stl_pair.h ****     struct pair
 266              		.loc 4 96 0
 267              		.cfi_startproc
 268 0000 55       		pushq	%rbp
 269              		.cfi_def_cfa_offset 16
 270              		.cfi_offset 6, -16
 271 0001 4889E5   		movq	%rsp, %rbp
 272              		.cfi_def_cfa_register 6
 273 0004 4883EC10 		subq	$16, %rsp
 274 0008 48897DF8 		movq	%rdi, -8(%rbp)
 275              	.LBB3:
 276              		.loc 4 96 0
 277 000c 488B45F8 		movq	-8(%rbp), %rax
 278 0010 4883C008 		addq	$8, %rax
 279 0014 4889C7   		movq	%rax, %rdi
 280 0017 E8000000 		call	_ZNSsD1Ev@PLT
 280      00
 281              	.LBE3:
 282 001c C9       		leave
 283              		.cfi_def_cfa 7, 8
 284 001d C3       		ret
 285              		.cfi_endproc
 286              	.LFE823:
 288              		.weak	_ZNSt4pairIiSsED1Ev
 289              		.set	_ZNSt4pairIiSsED1Ev,_ZNSt4pairIiSsED2Ev
 290              		.text
 291 0075 90       		.align 2
 292              		.globl	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 294              	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc:
 295              	.LFB821:
  11:DeferredTestReporter.cpp **** 
  12:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportFailure(TestDetails const& details, char const* failure)
  13:DeferredTestReporter.cpp **** {
 296              		.loc 3 13 0
 297              		.cfi_startproc
 298              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 299              		.cfi_lsda 0x1b,.LLSDA821
 300 0076 55       		pushq	%rbp
 301              		.cfi_def_cfa_offset 16
 302              		.cfi_offset 6, -16
 303 0077 4889E5   		movq	%rsp, %rbp
 304              		.cfi_def_cfa_register 6
 305 007a 53       		pushq	%rbx
 306 007b 4883EC58 		subq	$88, %rsp
 307              		.cfi_offset 3, -24
 308 007f 48897DB8 		movq	%rdi, -72(%rbp)
 309 0083 488975B0 		movq	%rsi, -80(%rbp)
 310 0087 488955A8 		movq	%rdx, -88(%rbp)
 311              	.LBB4:
  14:DeferredTestReporter.cpp ****     DeferredTestResult& r = m_results.back();
 312              		.loc 3 14 0
 313 008b 488B45B8 		movq	-72(%rbp), %rax
 314 008f 4883C008 		addq	$8, %rax
 315 0093 4889C7   		movq	%rax, %rdi
 316              	.LEHB9:
 317 0096 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv@PLT
 317      00
 318              	.LEHE9:
 319 009b 488945D8 		movq	%rax, -40(%rbp)
  15:DeferredTestReporter.cpp ****     r.failed = true;
 320              		.loc 3 15 0
 321 009f 488B45D8 		movq	-40(%rbp), %rax
 322 00a3 C6403401 		movb	$1, 52(%rax)
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 323              		.loc 3 16 0
 324 00a7 488D45CF 		leaq	-49(%rbp), %rax
 325 00ab 4889C7   		movq	%rax, %rdi
 326 00ae E8000000 		call	_ZNSaIcEC1Ev@PLT
 326      00
 327 00b3 488D55CF 		leaq	-49(%rbp), %rdx
 328 00b7 488B4DA8 		movq	-88(%rbp), %rcx
 329 00bb 488D45D0 		leaq	-48(%rbp), %rax
 330 00bf 4889CE   		movq	%rcx, %rsi
 331 00c2 4889C7   		movq	%rax, %rdi
 332              	.LEHB10:
 333 00c5 E8000000 		call	_ZNSsC1EPKcRKSaIcE@PLT
 333      00
 334              	.LEHE10:
 335              		.loc 3 16 0 is_stmt 0 discriminator 1
 336 00ca 488B45B0 		movq	-80(%rbp), %rax
 337 00ce 488D4818 		leaq	24(%rax), %rcx
 338 00d2 488D55D0 		leaq	-48(%rbp), %rdx
 339 00d6 488D45E0 		leaq	-32(%rbp), %rax
 340 00da 4889CE   		movq	%rcx, %rsi
 341 00dd 4889C7   		movq	%rax, %rdi
 342              	.LEHB11:
 343 00e0 E8000000 		call	_ZNSt4pairIiSsEC1ERKiRKSs@PLT
 343      00
 344              	.LEHE11:
 345              		.loc 3 16 0 discriminator 2
 346 00e5 488B45D8 		movq	-40(%rbp), %rax
 347 00e9 488D5018 		leaq	24(%rax), %rdx
 348 00ed 488D45E0 		leaq	-32(%rbp), %rax
 349 00f1 4889C6   		movq	%rax, %rsi
 350 00f4 4889D7   		movq	%rdx, %rdi
 351              	.LEHB12:
 352 00f7 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_@PLT
 352      00
 353              	.LEHE12:
 354              		.loc 3 16 0 discriminator 1
 355 00fc 488D45E0 		leaq	-32(%rbp), %rax
 356 0100 4889C7   		movq	%rax, %rdi
 357              	.LEHB13:
 358 0103 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 358      00
 359              	.LEHE13:
 360              		.loc 3 16 0 discriminator 3
 361 0108 488D45D0 		leaq	-48(%rbp), %rax
 362 010c 4889C7   		movq	%rax, %rdi
 363              	.LEHB14:
 364 010f E8000000 		call	_ZNSsD1Ev@PLT
 364      00
 365              	.LEHE14:
 366              		.loc 3 16 0 discriminator 4
 367 0114 488D45CF 		leaq	-49(%rbp), %rax
 368 0118 4889C7   		movq	%rax, %rdi
 369 011b E8000000 		call	_ZNSaIcED1Ev@PLT
 369      00
  17:DeferredTestReporter.cpp ****     r.failureFile = details.filename;
 370              		.loc 3 17 0 is_stmt 1 discriminator 4
 371 0120 488B45B0 		movq	-80(%rbp), %rax
 372 0124 488B4010 		movq	16(%rax), %rax
 373 0128 488B55D8 		movq	-40(%rbp), %rdx
 374 012c 4883C210 		addq	$16, %rdx
 375 0130 4889C6   		movq	%rax, %rsi
 376 0133 4889D7   		movq	%rdx, %rdi
 377              	.LEHB15:
 378 0136 E8000000 		call	_ZNSsaSEPKc@PLT
 378      00
 379              	.LEHE15:
 380 013b EB3C     		jmp	.L26
 381              	.L25:
 382 013d 4889C3   		movq	%rax, %rbx
  16:DeferredTestReporter.cpp ****     r.failures.push_back(DeferredTestResult::Failure(details.lineNumber, failure));
 383              		.loc 3 16 0
 384 0140 488D45E0 		leaq	-32(%rbp), %rax
 385 0144 4889C7   		movq	%rax, %rdi
 386 0147 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 386      00
 387 014c EB03     		jmp	.L21
 388              	.L24:
 389 014e 4889C3   		movq	%rax, %rbx
 390              	.L21:
 391 0151 488D45D0 		leaq	-48(%rbp), %rax
 392 0155 4889C7   		movq	%rax, %rdi
 393 0158 E8000000 		call	_ZNSsD1Ev@PLT
 393      00
 394 015d EB03     		jmp	.L22
 395              	.L23:
 396 015f 4889C3   		movq	%rax, %rbx
 397              	.L22:
 398 0162 488D45CF 		leaq	-49(%rbp), %rax
 399 0166 4889C7   		movq	%rax, %rdi
 400 0169 E8000000 		call	_ZNSaIcED1Ev@PLT
 400      00
 401 016e 4889D8   		movq	%rbx, %rax
 402 0171 4889C7   		movq	%rax, %rdi
 403              	.LEHB16:
 404 0174 E8000000 		call	_Unwind_Resume@PLT
 404      00
 405              	.LEHE16:
 406              	.L26:
 407              	.LBE4:
  18:DeferredTestReporter.cpp **** }
 408              		.loc 3 18 0
 409 0179 4883C458 		addq	$88, %rsp
 410 017d 5B       		popq	%rbx
 411 017e 5D       		popq	%rbp
 412              		.cfi_def_cfa 7, 8
 413 017f C3       		ret
 414              		.cfi_endproc
 415              	.LFE821:
 416              		.section	.gcc_except_table
 417              	.LLSDA821:
 418 0014 FF       		.byte	0xff
 419 0015 FF       		.byte	0xff
 420 0016 01       		.byte	0x1
 421 0017 2A       		.uleb128 .LLSDACSE821-.LLSDACSB821
 422              	.LLSDACSB821:
 423 0018 20       		.uleb128 .LEHB9-.LFB821
 424 0019 05       		.uleb128 .LEHE9-.LEHB9
 425 001a 00       		.uleb128 0
 426 001b 00       		.uleb128 0
 427 001c 4F       		.uleb128 .LEHB10-.LFB821
 428 001d 05       		.uleb128 .LEHE10-.LEHB10
 429 001e E901     		.uleb128 .L23-.LFB821
 430 0020 00       		.uleb128 0
 431 0021 6A       		.uleb128 .LEHB11-.LFB821
 432 0022 05       		.uleb128 .LEHE11-.LEHB11
 433 0023 D801     		.uleb128 .L24-.LFB821
 434 0025 00       		.uleb128 0
 435 0026 8101     		.uleb128 .LEHB12-.LFB821
 436 0028 05       		.uleb128 .LEHE12-.LEHB12
 437 0029 C701     		.uleb128 .L25-.LFB821
 438 002b 00       		.uleb128 0
 439 002c 8D01     		.uleb128 .LEHB13-.LFB821
 440 002e 05       		.uleb128 .LEHE13-.LEHB13
 441 002f D801     		.uleb128 .L24-.LFB821
 442 0031 00       		.uleb128 0
 443 0032 9901     		.uleb128 .LEHB14-.LFB821
 444 0034 05       		.uleb128 .LEHE14-.LEHB14
 445 0035 E901     		.uleb128 .L23-.LFB821
 446 0037 00       		.uleb128 0
 447 0038 C001     		.uleb128 .LEHB15-.LFB821
 448 003a 05       		.uleb128 .LEHE15-.LEHB15
 449 003b 00       		.uleb128 0
 450 003c 00       		.uleb128 0
 451 003d FE01     		.uleb128 .LEHB16-.LFB821
 452 003f 05       		.uleb128 .LEHE16-.LEHB16
 453 0040 00       		.uleb128 0
 454 0041 00       		.uleb128 0
 455              	.LLSDACSE821:
 456              		.text
 458              		.align 2
 459              		.globl	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 461              	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf:
 462              	.LFB825:
  19:DeferredTestReporter.cpp **** 
  20:DeferredTestReporter.cpp **** void DeferredTestReporter::ReportTestFinish(TestDetails const&, float secondsElapsed)
  21:DeferredTestReporter.cpp **** {
 463              		.loc 3 21 0
 464              		.cfi_startproc
 465 0180 55       		pushq	%rbp
 466              		.cfi_def_cfa_offset 16
 467              		.cfi_offset 6, -16
 468 0181 4889E5   		movq	%rsp, %rbp
 469              		.cfi_def_cfa_register 6
 470 0184 4883EC30 		subq	$48, %rsp
 471 0188 48897DE8 		movq	%rdi, -24(%rbp)
 472 018c 488975E0 		movq	%rsi, -32(%rbp)
 473 0190 F30F1145 		movss	%xmm0, -36(%rbp)
 473      DC
 474              	.LBB5:
  22:DeferredTestReporter.cpp ****     DeferredTestResult& r = m_results.back();
 475              		.loc 3 22 0
 476 0195 488B45E8 		movq	-24(%rbp), %rax
 477 0199 4883C008 		addq	$8, %rax
 478 019d 4889C7   		movq	%rax, %rdi
 479 01a0 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv@PLT
 479      00
 480 01a5 488945F8 		movq	%rax, -8(%rbp)
  23:DeferredTestReporter.cpp ****     r.timeElapsed = secondsElapsed;
 481              		.loc 3 23 0
 482 01a9 488B55F8 		movq	-8(%rbp), %rdx
 483 01ad 8B45DC   		movl	-36(%rbp), %eax
 484 01b0 894230   		movl	%eax, 48(%rdx)
 485              	.LBE5:
  24:DeferredTestReporter.cpp **** }
 486              		.loc 3 24 0
 487 01b3 C9       		leave
 488              		.cfi_def_cfa 7, 8
 489 01b4 C3       		ret
 490              		.cfi_endproc
 491              	.LFE825:
 493 01b5 90       		.align 2
 494              		.globl	_ZN8UnitTest20DeferredTestReporter10GetResultsEv
 496              	_ZN8UnitTest20DeferredTestReporter10GetResultsEv:
 497              	.LFB826:
  25:DeferredTestReporter.cpp **** 
  26:DeferredTestReporter.cpp **** DeferredTestReporter::DeferredTestResultList& DeferredTestReporter::GetResults()
  27:DeferredTestReporter.cpp **** {
 498              		.loc 3 27 0
 499              		.cfi_startproc
 500 01b6 55       		pushq	%rbp
 501              		.cfi_def_cfa_offset 16
 502              		.cfi_offset 6, -16
 503 01b7 4889E5   		movq	%rsp, %rbp
 504              		.cfi_def_cfa_register 6
 505 01ba 48897DF8 		movq	%rdi, -8(%rbp)
  28:DeferredTestReporter.cpp ****     return m_results;
 506              		.loc 3 28 0
 507 01be 488B45F8 		movq	-8(%rbp), %rax
 508 01c2 4883C008 		addq	$8, %rax
  29:DeferredTestReporter.cpp **** }
 509              		.loc 3 29 0
 510 01c6 5D       		popq	%rbp
 511              		.cfi_def_cfa 7, 8
 512 01c7 C3       		ret
 513              		.cfi_endproc
 514              	.LFE826:
 516              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESaIS
 517              		.align 2
 518              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
 520              	_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:
 521              	.LFB835:
 522              		.file 5 "/usr/include/c++/4.8/bits/stl_vector.h"
   1:/usr/include/c++/4.8/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_vector.h **** 
   3:/usr/include/c++/4.8/bits/stl_vector.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_vector.h **** //
   5:/usr/include/c++/4.8/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_vector.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_vector.h **** 
  11:/usr/include/c++/4.8/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_vector.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_vector.h **** 
  16:/usr/include/c++/4.8/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_vector.h **** 
  20:/usr/include/c++/4.8/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_vector.h **** 
  25:/usr/include/c++/4.8/bits/stl_vector.h **** /*
  26:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  27:/usr/include/c++/4.8/bits/stl_vector.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_vector.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  30:/usr/include/c++/4.8/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_vector.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  38:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  39:/usr/include/c++/4.8/bits/stl_vector.h ****  * Copyright (c) 1996
  40:/usr/include/c++/4.8/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_vector.h ****  *
  42:/usr/include/c++/4.8/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/4.8/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_vector.h ****  */
  50:/usr/include/c++/4.8/bits/stl_vector.h **** 
  51:/usr/include/c++/4.8/bits/stl_vector.h **** /** @file bits/stl_vector.h
  52:/usr/include/c++/4.8/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/4.8/bits/stl_vector.h ****  */
  55:/usr/include/c++/4.8/bits/stl_vector.h **** 
  56:/usr/include/c++/4.8/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  57:/usr/include/c++/4.8/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  58:/usr/include/c++/4.8/bits/stl_vector.h **** 
  59:/usr/include/c++/4.8/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  60:/usr/include/c++/4.8/bits/stl_vector.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/4.8/bits/stl_vector.h **** #include <bits/concept_check.h>
  62:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
  63:/usr/include/c++/4.8/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
  65:/usr/include/c++/4.8/bits/stl_vector.h **** 
  66:/usr/include/c++/4.8/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  67:/usr/include/c++/4.8/bits/stl_vector.h **** {
  68:/usr/include/c++/4.8/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  69:/usr/include/c++/4.8/bits/stl_vector.h **** 
  70:/usr/include/c++/4.8/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  71:/usr/include/c++/4.8/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  72:/usr/include/c++/4.8/bits/stl_vector.h ****     struct _Vector_base
  73:/usr/include/c++/4.8/bits/stl_vector.h ****     {
  74:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
  75:/usr/include/c++/4.8/bits/stl_vector.h ****         rebind<_Tp>::other _Tp_alloc_type;
  76:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename __gnu_cxx::__alloc_traits<_Tp_alloc_type>::pointer
  77:/usr/include/c++/4.8/bits/stl_vector.h ****        	pointer;
  78:/usr/include/c++/4.8/bits/stl_vector.h **** 
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       struct _Vector_impl 
  80:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
  81:/usr/include/c++/4.8/bits/stl_vector.h ****       {
  82:/usr/include/c++/4.8/bits/stl_vector.h **** 	pointer _M_start;
  83:/usr/include/c++/4.8/bits/stl_vector.h **** 	pointer _M_finish;
  84:/usr/include/c++/4.8/bits/stl_vector.h **** 	pointer _M_end_of_storage;
  85:/usr/include/c++/4.8/bits/stl_vector.h **** 
  86:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Vector_impl()
  87:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  88:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/4.8/bits/stl_vector.h **** 
  90:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a)
  91:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  92:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
  93:/usr/include/c++/4.8/bits/stl_vector.h **** 
  94:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
  95:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type&& __a)
  96:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(std::move(__a)),
  97:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_start(0), _M_finish(0), _M_end_of_storage(0)
  98:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
  99:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 100:/usr/include/c++/4.8/bits/stl_vector.h **** 
 101:/usr/include/c++/4.8/bits/stl_vector.h **** 	void _M_swap_data(_Vector_impl& __x)
 102:/usr/include/c++/4.8/bits/stl_vector.h **** 	{
 103:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::swap(_M_start, __x._M_start);
 104:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::swap(_M_finish, __x._M_finish);
 105:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::swap(_M_end_of_storage, __x._M_end_of_storage);
 106:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
 107:/usr/include/c++/4.8/bits/stl_vector.h ****       };
 108:/usr/include/c++/4.8/bits/stl_vector.h ****       
 109:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 110:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Alloc allocator_type;
 111:/usr/include/c++/4.8/bits/stl_vector.h **** 
 112:/usr/include/c++/4.8/bits/stl_vector.h ****       _Tp_alloc_type&
 113:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 114:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 115:/usr/include/c++/4.8/bits/stl_vector.h **** 
 116:/usr/include/c++/4.8/bits/stl_vector.h ****       const _Tp_alloc_type&
 117:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 118:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 119:/usr/include/c++/4.8/bits/stl_vector.h **** 
 120:/usr/include/c++/4.8/bits/stl_vector.h ****       allocator_type
 121:/usr/include/c++/4.8/bits/stl_vector.h ****       get_allocator() const _GLIBCXX_NOEXCEPT
 122:/usr/include/c++/4.8/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 123:/usr/include/c++/4.8/bits/stl_vector.h **** 
 124:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base()
 125:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl() { }
 126:/usr/include/c++/4.8/bits/stl_vector.h **** 
 127:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a)
 128:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a) { }
 129:/usr/include/c++/4.8/bits/stl_vector.h **** 
 130:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(size_t __n)
 131:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl()
 132:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 133:/usr/include/c++/4.8/bits/stl_vector.h **** 
 134:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 135:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a)
 136:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 137:/usr/include/c++/4.8/bits/stl_vector.h **** 
 138:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 139:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(_Tp_alloc_type&& __a)
 140:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(std::move(__a)) { }
 141:/usr/include/c++/4.8/bits/stl_vector.h **** 
 142:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x)
 143:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(std::move(__x._M_get_Tp_allocator()))
 144:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_swap_data(__x._M_impl); }
 145:/usr/include/c++/4.8/bits/stl_vector.h **** 
 146:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x, const allocator_type& __a)
 147:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a)
 148:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 149:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__x.get_allocator() == __a)
 150:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_swap_data(__x._M_impl);
 151:/usr/include/c++/4.8/bits/stl_vector.h **** 	else
 152:/usr/include/c++/4.8/bits/stl_vector.h **** 	  {
 153:/usr/include/c++/4.8/bits/stl_vector.h **** 	    size_t __n = __x._M_impl._M_finish - __x._M_impl._M_start;
 154:/usr/include/c++/4.8/bits/stl_vector.h **** 	    _M_create_storage(__n);
 155:/usr/include/c++/4.8/bits/stl_vector.h **** 	  }
 156:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 157:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 158:/usr/include/c++/4.8/bits/stl_vector.h **** 
 159:/usr/include/c++/4.8/bits/stl_vector.h ****       ~_Vector_base()
 160:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 162:/usr/include/c++/4.8/bits/stl_vector.h **** 
 163:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 164:/usr/include/c++/4.8/bits/stl_vector.h ****       _Vector_impl _M_impl;
 165:/usr/include/c++/4.8/bits/stl_vector.h **** 
 166:/usr/include/c++/4.8/bits/stl_vector.h ****       pointer
 167:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_allocate(size_t __n)
 168:/usr/include/c++/4.8/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 169:/usr/include/c++/4.8/bits/stl_vector.h **** 
 170:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 171:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_deallocate(pointer __p, size_t __n)
 172:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 173:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__p)
 174:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 175:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 176:/usr/include/c++/4.8/bits/stl_vector.h **** 
 177:/usr/include/c++/4.8/bits/stl_vector.h ****     private:
 178:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 179:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_create_storage(size_t __n)
 180:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 181:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 182:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 183:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 184:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 185:/usr/include/c++/4.8/bits/stl_vector.h ****     };
 186:/usr/include/c++/4.8/bits/stl_vector.h **** 
 187:/usr/include/c++/4.8/bits/stl_vector.h **** 
 188:/usr/include/c++/4.8/bits/stl_vector.h ****   /**
 189:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 190:/usr/include/c++/4.8/bits/stl_vector.h ****    *  individual elements in any order.
 191:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 192:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @ingroup sequences
 193:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 194:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @tparam _Tp  Type of element.
 195:/usr/include/c++/4.8/bits/stl_vector.h ****    *  @tparam _Alloc  Allocator type, defaults to allocator<_Tp>.
 196:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 197:/usr/include/c++/4.8/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 198:/usr/include/c++/4.8/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 199:/usr/include/c++/4.8/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 200:/usr/include/c++/4.8/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 201:/usr/include/c++/4.8/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 202:/usr/include/c++/4.8/bits/stl_vector.h ****    *
 203:/usr/include/c++/4.8/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 204:/usr/include/c++/4.8/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 205:/usr/include/c++/4.8/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 206:/usr/include/c++/4.8/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 207:/usr/include/c++/4.8/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 208:/usr/include/c++/4.8/bits/stl_vector.h ****   */
 209:/usr/include/c++/4.8/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 210:/usr/include/c++/4.8/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 211:/usr/include/c++/4.8/bits/stl_vector.h ****     {
 212:/usr/include/c++/4.8/bits/stl_vector.h ****       // Concept requirements.
 213:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 214:/usr/include/c++/4.8/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 215:/usr/include/c++/4.8/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 216:/usr/include/c++/4.8/bits/stl_vector.h ****       
 217:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 218:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 219:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type>  _Alloc_traits;
 220:/usr/include/c++/4.8/bits/stl_vector.h **** 
 221:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 222:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Tp					 value_type;
 223:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Base::pointer                    pointer;
 224:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_pointer      const_pointer;
 225:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc_traits::reference          reference;
 226:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef typename _Alloc_traits::const_reference    const_reference;
 227:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 228:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 229:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator;
 230:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 231:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 232:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef size_t					 size_type;
 233:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 234:/usr/include/c++/4.8/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 235:/usr/include/c++/4.8/bits/stl_vector.h **** 
 236:/usr/include/c++/4.8/bits/stl_vector.h ****     protected:
 237:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_allocate;
 238:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_deallocate;
 239:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_impl;
 240:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 241:/usr/include/c++/4.8/bits/stl_vector.h **** 
 242:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 243:/usr/include/c++/4.8/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 244:/usr/include/c++/4.8/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 245:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 246:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Default constructor creates no elements.
 247:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 248:/usr/include/c++/4.8/bits/stl_vector.h ****       vector()
 249:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base() { }
 250:/usr/include/c++/4.8/bits/stl_vector.h **** 
 251:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 252:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 253:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator object.
 254:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 255:/usr/include/c++/4.8/bits/stl_vector.h ****       explicit
 256:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(const allocator_type& __a)
 257:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__a) { }
 258:/usr/include/c++/4.8/bits/stl_vector.h **** 
 259:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 260:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 261:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 262:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 263:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 264:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 265:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n default
 266:/usr/include/c++/4.8/bits/stl_vector.h ****        *  constructed elements.
 267:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 268:/usr/include/c++/4.8/bits/stl_vector.h ****       explicit
 269:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(size_type __n, const allocator_type& __a = allocator_type())
 270:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__n, __a)
 271:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 272:/usr/include/c++/4.8/bits/stl_vector.h **** 
 273:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 274:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 275:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 276:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 277:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 278:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 279:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 280:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 281:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 282:/usr/include/c++/4.8/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 283:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__n, __a)
 284:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 285:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 286:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 287:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 288:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  The number of elements to initially create.
 289:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __value  An element to copy.
 290:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 291:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 292:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This constructor fills the %vector with @a __n copies of @a __value.
 293:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 294:/usr/include/c++/4.8/bits/stl_vector.h ****       explicit
 295:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 296:/usr/include/c++/4.8/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 297:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__n, __a)
 298:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 299:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 300:/usr/include/c++/4.8/bits/stl_vector.h **** 
 301:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 302:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 303:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 304:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 305:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 306:/usr/include/c++/4.8/bits/stl_vector.h ****        *  object used by @a __x.  All the elements of @a __x are copied,
 307:/usr/include/c++/4.8/bits/stl_vector.h ****        *  but any extra memory in
 308:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.
 309:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 310:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(const vector& __x)
 311:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__x.size(),
 312:/usr/include/c++/4.8/bits/stl_vector.h ****         _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 313:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 314:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 315:/usr/include/c++/4.8/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 316:/usr/include/c++/4.8/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 317:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 318:/usr/include/c++/4.8/bits/stl_vector.h **** 
 319:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 320:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 321:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 322:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 323:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 324:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a __x.
 325:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The contents of @a __x are a valid, but unspecified %vector.
 326:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 327:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(vector&& __x) noexcept
 328:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 329:/usr/include/c++/4.8/bits/stl_vector.h **** 
 330:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Copy constructor with alternative allocator
 331:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(const vector& __x, const allocator_type& __a)
 332:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__x.size(), __a)
 333:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 334:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 335:/usr/include/c++/4.8/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 336:/usr/include/c++/4.8/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 337:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 338:/usr/include/c++/4.8/bits/stl_vector.h **** 
 339:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Move constructor with alternative allocator
 340:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(vector&& __rv, const allocator_type& __m)
 341:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(std::move(__rv), __m)
 342:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 343:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__rv.get_allocator() != __m)
 344:/usr/include/c++/4.8/bits/stl_vector.h **** 	  {
 345:/usr/include/c++/4.8/bits/stl_vector.h **** 	    this->_M_impl._M_finish =
 346:/usr/include/c++/4.8/bits/stl_vector.h **** 	      std::__uninitialized_move_a(__rv.begin(), __rv.end(),
 347:/usr/include/c++/4.8/bits/stl_vector.h **** 					  this->_M_impl._M_start,
 348:/usr/include/c++/4.8/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 349:/usr/include/c++/4.8/bits/stl_vector.h **** 	    __rv.clear();
 350:/usr/include/c++/4.8/bits/stl_vector.h **** 	  }
 351:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 352:/usr/include/c++/4.8/bits/stl_vector.h **** 
 353:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 354:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 355:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 356:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 357:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 358:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 359:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer_list @a __l.
 360:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 361:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 362:/usr/include/c++/4.8/bits/stl_vector.h ****        *  (where N is @a __l.size()) and do no memory reallocation.
 363:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 364:/usr/include/c++/4.8/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 365:/usr/include/c++/4.8/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 366:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__a)
 367:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 368:/usr/include/c++/4.8/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 369:/usr/include/c++/4.8/bits/stl_vector.h **** 			    random_access_iterator_tag());
 370:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 371:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 372:/usr/include/c++/4.8/bits/stl_vector.h **** 
 373:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 374:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 375:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 376:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last  An input iterator.
 377:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __a  An allocator.
 378:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 379:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 380:/usr/include/c++/4.8/bits/stl_vector.h ****        *  [first,last).
 381:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 382:/usr/include/c++/4.8/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 383:/usr/include/c++/4.8/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 384:/usr/include/c++/4.8/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 385:/usr/include/c++/4.8/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 386:/usr/include/c++/4.8/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 387:/usr/include/c++/4.8/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 388:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 389:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 390:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator,
 391:/usr/include/c++/4.8/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 392:/usr/include/c++/4.8/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 393:/usr/include/c++/4.8/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 394:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Base(__a)
 395:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_initialize_dispatch(__first, __last, __false_type()); }
 396:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 397:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
 398:/usr/include/c++/4.8/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 399:/usr/include/c++/4.8/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 400:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Base(__a)
 401:/usr/include/c++/4.8/bits/stl_vector.h ****         {
 402:/usr/include/c++/4.8/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 403:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 404:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 405:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
 406:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 407:/usr/include/c++/4.8/bits/stl_vector.h **** 
 408:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 409:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 410:/usr/include/c++/4.8/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 411:/usr/include/c++/4.8/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 412:/usr/include/c++/4.8/bits/stl_vector.h ****        *  responsibility.
 413:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 414:/usr/include/c++/4.8/bits/stl_vector.h ****       ~vector() _GLIBCXX_NOEXCEPT
 523              		.loc 5 414 0
 524              		.cfi_startproc
 525              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 526              		.cfi_lsda 0x1b,.LLSDA835
 527 0000 55       		pushq	%rbp
 528              		.cfi_def_cfa_offset 16
 529              		.cfi_offset 6, -16
 530 0001 4889E5   		movq	%rsp, %rbp
 531              		.cfi_def_cfa_register 6
 532 0004 53       		pushq	%rbx
 533 0005 4883EC18 		subq	$24, %rsp
 534              		.cfi_offset 3, -24
 535 0009 48897DE8 		movq	%rdi, -24(%rbp)
 536              	.LBB6:
 415:/usr/include/c++/4.8/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 416:/usr/include/c++/4.8/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 537              		.loc 5 416 0
 538 000d 488B45E8 		movq	-24(%rbp), %rax
 539 0011 4889C7   		movq	%rax, %rdi
 540              	.LEHB17:
 541 0014 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 541      00
 542 0019 4889C2   		movq	%rax, %rdx
 543 001c 488B45E8 		movq	-24(%rbp), %rax
 544 0020 488B4808 		movq	8(%rax), %rcx
 545 0024 488B45E8 		movq	-24(%rbp), %rax
 546 0028 488B00   		movq	(%rax), %rax
 415:/usr/include/c++/4.8/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 547              		.loc 5 415 0
 548 002b 4889CE   		movq	%rcx, %rsi
 549 002e 4889C7   		movq	%rax, %rdi
 550 0031 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 550      00
 551              	.LEHE17:
 552              		.loc 5 416 0
 553 0036 488B45E8 		movq	-24(%rbp), %rax
 554 003a 4889C7   		movq	%rax, %rdi
 555              	.LEHB18:
 556 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 556      00
 557              	.LEHE18:
 558 0042 EB1A     		jmp	.L34
 559              	.L33:
 560 0044 4889C3   		movq	%rax, %rbx
 561 0047 488B45E8 		movq	-24(%rbp), %rax
 562 004b 4889C7   		movq	%rax, %rdi
 563 004e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 563      00
 564 0053 4889D8   		movq	%rbx, %rax
 565 0056 4889C7   		movq	%rax, %rdi
 566              	.LEHB19:
 567 0059 E8000000 		call	_Unwind_Resume@PLT
 567      00
 568              	.LEHE19:
 569              	.L34:
 570              	.LBE6:
 571 005e 4883C418 		addq	$24, %rsp
 572 0062 5B       		popq	%rbx
 573 0063 5D       		popq	%rbp
 574              		.cfi_def_cfa 7, 8
 575 0064 C3       		ret
 576              		.cfi_endproc
 577              	.LFE835:
 578              		.section	.gcc_except_table
 579              	.LLSDA835:
 580 0042 FF       		.byte	0xff
 581 0043 FF       		.byte	0xff
 582 0044 01       		.byte	0x1
 583 0045 0C       		.uleb128 .LLSDACSE835-.LLSDACSB835
 584              	.LLSDACSB835:
 585 0046 14       		.uleb128 .LEHB17-.LFB835
 586 0047 22       		.uleb128 .LEHE17-.LEHB17
 587 0048 44       		.uleb128 .L33-.LFB835
 588 0049 00       		.uleb128 0
 589 004a 3D       		.uleb128 .LEHB18-.LFB835
 590 004b 05       		.uleb128 .LEHE18-.LEHB18
 591 004c 00       		.uleb128 0
 592 004d 00       		.uleb128 0
 593 004e 59       		.uleb128 .LEHB19-.LFB835
 594 004f 05       		.uleb128 .LEHE19-.LEHB19
 595 0050 00       		.uleb128 0
 596 0051 00       		.uleb128 0
 597              	.LLSDACSE835:
 598              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESaIS
 600              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev
 601              		.set	_ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev,_ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
 602              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_,"axG",@progbit
 603              		.align 2
 604              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_
 606              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_:
 607              	.LFB837:
 417:/usr/include/c++/4.8/bits/stl_vector.h **** 
 418:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 419:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 420:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 421:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 422:/usr/include/c++/4.8/bits/stl_vector.h ****        *  All the elements of @a __x are copied, but any extra memory in
 423:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @a __x (for fast expansion) will not be copied.  Unlike the
 424:/usr/include/c++/4.8/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 425:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 426:/usr/include/c++/4.8/bits/stl_vector.h ****       vector&
 427:/usr/include/c++/4.8/bits/stl_vector.h ****       operator=(const vector& __x);
 428:/usr/include/c++/4.8/bits/stl_vector.h **** 
 429:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 430:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 431:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 432:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of identical element and allocator types.
 433:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 434:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The contents of @a __x are moved into this %vector (without copying,
 435:/usr/include/c++/4.8/bits/stl_vector.h ****        *  if the allocators permit it).
 436:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @a __x is a valid, but unspecified %vector.
 437:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 438:/usr/include/c++/4.8/bits/stl_vector.h ****       vector&
 439:/usr/include/c++/4.8/bits/stl_vector.h ****       operator=(vector&& __x) noexcept(_Alloc_traits::_S_nothrow_move())
 440:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 441:/usr/include/c++/4.8/bits/stl_vector.h ****         constexpr bool __move_storage =
 442:/usr/include/c++/4.8/bits/stl_vector.h ****           _Alloc_traits::_S_propagate_on_move_assign()
 443:/usr/include/c++/4.8/bits/stl_vector.h ****           || _Alloc_traits::_S_always_equal();
 444:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_move_assign(std::move(__x),
 445:/usr/include/c++/4.8/bits/stl_vector.h ****                        integral_constant<bool, __move_storage>());
 446:/usr/include/c++/4.8/bits/stl_vector.h **** 	return *this;
 447:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 448:/usr/include/c++/4.8/bits/stl_vector.h **** 
 449:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 450:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 451:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 452:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 453:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 454:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer list @a __l.
 455:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 456:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 457:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 458:/usr/include/c++/4.8/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 459:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 460:/usr/include/c++/4.8/bits/stl_vector.h ****       vector&
 461:/usr/include/c++/4.8/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 462:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 463:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 464:/usr/include/c++/4.8/bits/stl_vector.h **** 	return *this;
 465:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 466:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 467:/usr/include/c++/4.8/bits/stl_vector.h **** 
 468:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 469:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 470:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  Number of elements to be assigned.
 471:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __val  Value to be assigned.
 472:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 473:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with @a __n copies of the given
 474:/usr/include/c++/4.8/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 475:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 476:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 477:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 478:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 479:/usr/include/c++/4.8/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 480:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 481:/usr/include/c++/4.8/bits/stl_vector.h **** 
 482:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 483:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 484:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  An input iterator.
 485:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last   An input iterator.
 486:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 487:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 488:/usr/include/c++/4.8/bits/stl_vector.h ****        *  range [__first,__last).
 489:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 490:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 491:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 492:/usr/include/c++/4.8/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 493:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 494:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 495:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator,
 496:/usr/include/c++/4.8/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
 497:/usr/include/c++/4.8/bits/stl_vector.h ****         void
 498:/usr/include/c++/4.8/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 499:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_assign_dispatch(__first, __last, __false_type()); }
 500:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 501:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
 502:/usr/include/c++/4.8/bits/stl_vector.h ****         void
 503:/usr/include/c++/4.8/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 504:/usr/include/c++/4.8/bits/stl_vector.h ****         {
 505:/usr/include/c++/4.8/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 506:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 507:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 508:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
 509:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 510:/usr/include/c++/4.8/bits/stl_vector.h **** 
 511:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 512:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 513:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 514:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 515:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 516:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 517:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer list @a __l.
 518:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 519:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 520:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 521:/usr/include/c++/4.8/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 522:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 523:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 524:/usr/include/c++/4.8/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 525:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
 526:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 527:/usr/include/c++/4.8/bits/stl_vector.h **** 
 528:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 529:/usr/include/c++/4.8/bits/stl_vector.h ****       using _Base::get_allocator;
 530:/usr/include/c++/4.8/bits/stl_vector.h **** 
 531:/usr/include/c++/4.8/bits/stl_vector.h ****       // iterators
 532:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 533:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 534:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 535:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 536:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 537:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 538:/usr/include/c++/4.8/bits/stl_vector.h ****       begin() _GLIBCXX_NOEXCEPT
 539:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 540:/usr/include/c++/4.8/bits/stl_vector.h **** 
 541:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 542:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 543:/usr/include/c++/4.8/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 544:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 545:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 546:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 547:/usr/include/c++/4.8/bits/stl_vector.h ****       begin() const _GLIBCXX_NOEXCEPT
 548:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 549:/usr/include/c++/4.8/bits/stl_vector.h **** 
 550:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 551:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 552:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 553:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 554:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 555:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 556:/usr/include/c++/4.8/bits/stl_vector.h ****       end() _GLIBCXX_NOEXCEPT
 557:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 558:/usr/include/c++/4.8/bits/stl_vector.h **** 
 559:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 560:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 561:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 562:/usr/include/c++/4.8/bits/stl_vector.h ****        *  ordinary element order.
 563:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 564:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 565:/usr/include/c++/4.8/bits/stl_vector.h ****       end() const _GLIBCXX_NOEXCEPT
 566:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 567:/usr/include/c++/4.8/bits/stl_vector.h **** 
 568:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 569:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 570:/usr/include/c++/4.8/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 571:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 572:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 573:/usr/include/c++/4.8/bits/stl_vector.h ****       reverse_iterator
 574:/usr/include/c++/4.8/bits/stl_vector.h ****       rbegin() _GLIBCXX_NOEXCEPT
 575:/usr/include/c++/4.8/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 576:/usr/include/c++/4.8/bits/stl_vector.h **** 
 577:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 578:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 579:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 580:/usr/include/c++/4.8/bits/stl_vector.h ****        *  reverse element order.
 581:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 582:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reverse_iterator
 583:/usr/include/c++/4.8/bits/stl_vector.h ****       rbegin() const _GLIBCXX_NOEXCEPT
 584:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 585:/usr/include/c++/4.8/bits/stl_vector.h **** 
 586:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 587:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 588:/usr/include/c++/4.8/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 589:/usr/include/c++/4.8/bits/stl_vector.h ****        *  in reverse element order.
 590:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 591:/usr/include/c++/4.8/bits/stl_vector.h ****       reverse_iterator
 592:/usr/include/c++/4.8/bits/stl_vector.h ****       rend() _GLIBCXX_NOEXCEPT
 593:/usr/include/c++/4.8/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 594:/usr/include/c++/4.8/bits/stl_vector.h **** 
 595:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 596:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 597:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 598:/usr/include/c++/4.8/bits/stl_vector.h ****        *  is done in reverse element order.
 599:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 600:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reverse_iterator
 601:/usr/include/c++/4.8/bits/stl_vector.h ****       rend() const _GLIBCXX_NOEXCEPT
 602:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 603:/usr/include/c++/4.8/bits/stl_vector.h **** 
 604:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 605:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 606:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 607:/usr/include/c++/4.8/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 608:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element order.
 609:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 610:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 611:/usr/include/c++/4.8/bits/stl_vector.h ****       cbegin() const noexcept
 612:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 613:/usr/include/c++/4.8/bits/stl_vector.h **** 
 614:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 615:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 616:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 617:/usr/include/c++/4.8/bits/stl_vector.h ****        *  ordinary element order.
 618:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 619:/usr/include/c++/4.8/bits/stl_vector.h ****       const_iterator
 620:/usr/include/c++/4.8/bits/stl_vector.h ****       cend() const noexcept
 621:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 622:/usr/include/c++/4.8/bits/stl_vector.h **** 
 623:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 624:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 625:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 626:/usr/include/c++/4.8/bits/stl_vector.h ****        *  reverse element order.
 627:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 628:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reverse_iterator
 629:/usr/include/c++/4.8/bits/stl_vector.h ****       crbegin() const noexcept
 630:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 631:/usr/include/c++/4.8/bits/stl_vector.h **** 
 632:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 633:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 634:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 635:/usr/include/c++/4.8/bits/stl_vector.h ****        *  is done in reverse element order.
 636:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 637:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reverse_iterator
 638:/usr/include/c++/4.8/bits/stl_vector.h ****       crend() const noexcept
 639:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 640:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 641:/usr/include/c++/4.8/bits/stl_vector.h **** 
 642:/usr/include/c++/4.8/bits/stl_vector.h ****       // [23.2.4.2] capacity
 643:/usr/include/c++/4.8/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 644:/usr/include/c++/4.8/bits/stl_vector.h ****       size_type
 645:/usr/include/c++/4.8/bits/stl_vector.h ****       size() const _GLIBCXX_NOEXCEPT
 646:/usr/include/c++/4.8/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 647:/usr/include/c++/4.8/bits/stl_vector.h **** 
 648:/usr/include/c++/4.8/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 649:/usr/include/c++/4.8/bits/stl_vector.h ****       size_type
 650:/usr/include/c++/4.8/bits/stl_vector.h ****       max_size() const _GLIBCXX_NOEXCEPT
 651:/usr/include/c++/4.8/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 652:/usr/include/c++/4.8/bits/stl_vector.h **** 
 653:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 654:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 655:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 656:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 657:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 658:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 659:/usr/include/c++/4.8/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 660:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 661:/usr/include/c++/4.8/bits/stl_vector.h ****        *  default constructed elements are appended.
 662:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 663:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 664:/usr/include/c++/4.8/bits/stl_vector.h ****       resize(size_type __new_size)
 665:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 666:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__new_size > size())
 667:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 668:/usr/include/c++/4.8/bits/stl_vector.h **** 	else if (__new_size < size())
 669:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 670:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 671:/usr/include/c++/4.8/bits/stl_vector.h **** 
 672:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 673:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 674:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 675:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 676:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 677:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 678:/usr/include/c++/4.8/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 679:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 680:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 681:/usr/include/c++/4.8/bits/stl_vector.h ****        *  given data.
 682:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 683:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 684:/usr/include/c++/4.8/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 685:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 686:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__new_size > size())
 687:/usr/include/c++/4.8/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 688:/usr/include/c++/4.8/bits/stl_vector.h **** 	else if (__new_size < size())
 689:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 690:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 691:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 692:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 693:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 694:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __new_size  Number of elements the %vector should contain.
 695:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data with which new elements should be populated.
 696:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 697:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 698:/usr/include/c++/4.8/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 699:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 700:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 701:/usr/include/c++/4.8/bits/stl_vector.h ****        *  given data.
 702:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 703:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 704:/usr/include/c++/4.8/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 705:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 706:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__new_size > size())
 707:/usr/include/c++/4.8/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 708:/usr/include/c++/4.8/bits/stl_vector.h **** 	else if (__new_size < size())
 709:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 710:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 711:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 712:/usr/include/c++/4.8/bits/stl_vector.h **** 
 713:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 714:/usr/include/c++/4.8/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 715:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 716:/usr/include/c++/4.8/bits/stl_vector.h ****       shrink_to_fit()
 717:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_shrink_to_fit(); }
 718:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 719:/usr/include/c++/4.8/bits/stl_vector.h **** 
 720:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 721:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 722:/usr/include/c++/4.8/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 723:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 724:/usr/include/c++/4.8/bits/stl_vector.h ****       size_type
 725:/usr/include/c++/4.8/bits/stl_vector.h ****       capacity() const _GLIBCXX_NOEXCEPT
 726:/usr/include/c++/4.8/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 727:/usr/include/c++/4.8/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 728:/usr/include/c++/4.8/bits/stl_vector.h **** 
 729:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 730:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 731:/usr/include/c++/4.8/bits/stl_vector.h ****        *  equal end().)
 732:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 733:/usr/include/c++/4.8/bits/stl_vector.h ****       bool
 734:/usr/include/c++/4.8/bits/stl_vector.h ****       empty() const _GLIBCXX_NOEXCEPT
 735:/usr/include/c++/4.8/bits/stl_vector.h ****       { return begin() == end(); }
 736:/usr/include/c++/4.8/bits/stl_vector.h **** 
 737:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 738:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 739:/usr/include/c++/4.8/bits/stl_vector.h ****        *          elements.
 740:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  Number of elements required.
 741:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 742:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 743:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 744:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 745:/usr/include/c++/4.8/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 746:/usr/include/c++/4.8/bits/stl_vector.h ****        *  thrown.
 747:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 748:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 749:/usr/include/c++/4.8/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 750:/usr/include/c++/4.8/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 751:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 752:/usr/include/c++/4.8/bits/stl_vector.h ****        *  and copying of %vector data.
 753:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 754:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 755:/usr/include/c++/4.8/bits/stl_vector.h ****       reserve(size_type __n);
 756:/usr/include/c++/4.8/bits/stl_vector.h **** 
 757:/usr/include/c++/4.8/bits/stl_vector.h ****       // element access
 758:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 759:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 760:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 761:/usr/include/c++/4.8/bits/stl_vector.h ****        *  accessed.
 762:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 763:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 764:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 765:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 766:/usr/include/c++/4.8/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 767:/usr/include/c++/4.8/bits/stl_vector.h ****        *  see at().)
 768:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 769:/usr/include/c++/4.8/bits/stl_vector.h ****       reference
 770:/usr/include/c++/4.8/bits/stl_vector.h ****       operator[](size_type __n)
 771:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 772:/usr/include/c++/4.8/bits/stl_vector.h **** 
 773:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 774:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 775:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 776:/usr/include/c++/4.8/bits/stl_vector.h ****        *  accessed.
 777:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 778:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 779:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 780:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 781:/usr/include/c++/4.8/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 782:/usr/include/c++/4.8/bits/stl_vector.h ****        *  see at().)
 783:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 784:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reference
 785:/usr/include/c++/4.8/bits/stl_vector.h ****       operator[](size_type __n) const
 786:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 787:/usr/include/c++/4.8/bits/stl_vector.h **** 
 788:/usr/include/c++/4.8/bits/stl_vector.h ****     protected:
 789:/usr/include/c++/4.8/bits/stl_vector.h ****       /// Safety check used only from at().
 790:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 791:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_range_check(size_type __n) const
 792:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 793:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (__n >= this->size())
 794:/usr/include/c++/4.8/bits/stl_vector.h **** 	  __throw_out_of_range(__N("vector::_M_range_check"));
 795:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 796:/usr/include/c++/4.8/bits/stl_vector.h **** 
 797:/usr/include/c++/4.8/bits/stl_vector.h ****     public:
 798:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 799:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 800:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 801:/usr/include/c++/4.8/bits/stl_vector.h ****        *  accessed.
 802:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 803:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 804:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 805:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 806:/usr/include/c++/4.8/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 807:/usr/include/c++/4.8/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 808:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 809:/usr/include/c++/4.8/bits/stl_vector.h ****       reference
 810:/usr/include/c++/4.8/bits/stl_vector.h ****       at(size_type __n)
 811:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 812:/usr/include/c++/4.8/bits/stl_vector.h **** 	_M_range_check(__n);
 813:/usr/include/c++/4.8/bits/stl_vector.h **** 	return (*this)[__n]; 
 814:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 815:/usr/include/c++/4.8/bits/stl_vector.h **** 
 816:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 817:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Provides access to the data contained in the %vector.
 818:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param __n The index of the element for which data should be
 819:/usr/include/c++/4.8/bits/stl_vector.h ****        *  accessed.
 820:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  Read-only (constant) reference to data.
 821:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @throw  std::out_of_range  If @a __n is an invalid index.
 822:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 823:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function provides for safer data access.  The parameter
 824:/usr/include/c++/4.8/bits/stl_vector.h ****        *  is first checked that it is in the range of the vector.  The
 825:/usr/include/c++/4.8/bits/stl_vector.h ****        *  function throws out_of_range if the check fails.
 826:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 827:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reference
 828:/usr/include/c++/4.8/bits/stl_vector.h ****       at(size_type __n) const
 829:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 830:/usr/include/c++/4.8/bits/stl_vector.h **** 	_M_range_check(__n);
 831:/usr/include/c++/4.8/bits/stl_vector.h **** 	return (*this)[__n];
 832:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 833:/usr/include/c++/4.8/bits/stl_vector.h **** 
 834:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 835:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the first
 836:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element of the %vector.
 837:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 838:/usr/include/c++/4.8/bits/stl_vector.h ****       reference
 839:/usr/include/c++/4.8/bits/stl_vector.h ****       front()
 840:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *begin(); }
 841:/usr/include/c++/4.8/bits/stl_vector.h **** 
 842:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 843:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the first
 844:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element of the %vector.
 845:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 846:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reference
 847:/usr/include/c++/4.8/bits/stl_vector.h ****       front() const
 848:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *begin(); }
 849:/usr/include/c++/4.8/bits/stl_vector.h **** 
 850:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 851:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read/write reference to the data at the last
 852:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element of the %vector.
 853:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 854:/usr/include/c++/4.8/bits/stl_vector.h ****       reference
 855:/usr/include/c++/4.8/bits/stl_vector.h ****       back()
 856:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(end() - 1); }
 857:/usr/include/c++/4.8/bits/stl_vector.h ****       
 858:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 859:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Returns a read-only (constant) reference to the data at the
 860:/usr/include/c++/4.8/bits/stl_vector.h ****        *  last element of the %vector.
 861:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 862:/usr/include/c++/4.8/bits/stl_vector.h ****       const_reference
 863:/usr/include/c++/4.8/bits/stl_vector.h ****       back() const
 864:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(end() - 1); }
 865:/usr/include/c++/4.8/bits/stl_vector.h **** 
 866:/usr/include/c++/4.8/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 867:/usr/include/c++/4.8/bits/stl_vector.h ****       // DR 464. Suggestion for new member functions in standard containers.
 868:/usr/include/c++/4.8/bits/stl_vector.h ****       // data access
 869:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 870:/usr/include/c++/4.8/bits/stl_vector.h ****        *   Returns a pointer such that [data(), data() + size()) is a valid
 871:/usr/include/c++/4.8/bits/stl_vector.h ****        *   range.  For a non-empty %vector, data() == &front().
 872:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 873:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 874:/usr/include/c++/4.8/bits/stl_vector.h ****       _Tp*
 875:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 876:/usr/include/c++/4.8/bits/stl_vector.h ****       pointer
 877:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 878:/usr/include/c++/4.8/bits/stl_vector.h ****       data() _GLIBCXX_NOEXCEPT
 879:/usr/include/c++/4.8/bits/stl_vector.h ****       { return std::__addressof(front()); }
 880:/usr/include/c++/4.8/bits/stl_vector.h **** 
 881:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 882:/usr/include/c++/4.8/bits/stl_vector.h ****       const _Tp*
 883:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 884:/usr/include/c++/4.8/bits/stl_vector.h ****       const_pointer
 885:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 886:/usr/include/c++/4.8/bits/stl_vector.h ****       data() const _GLIBCXX_NOEXCEPT
 887:/usr/include/c++/4.8/bits/stl_vector.h ****       { return std::__addressof(front()); }
 888:/usr/include/c++/4.8/bits/stl_vector.h **** 
 889:/usr/include/c++/4.8/bits/stl_vector.h ****       // [23.2.4.3] modifiers
 890:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 891:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Add data to the end of the %vector.
 892:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data to be added.
 893:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 894:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This is a typical stack operation.  The function creates an
 895:/usr/include/c++/4.8/bits/stl_vector.h ****        *  element at the end of the %vector and assigns the given data
 896:/usr/include/c++/4.8/bits/stl_vector.h ****        *  to it.  Due to the nature of a %vector this operation can be
 897:/usr/include/c++/4.8/bits/stl_vector.h ****        *  done in constant time if the %vector has preallocated space
 898:/usr/include/c++/4.8/bits/stl_vector.h ****        *  available.
 899:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 900:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 901:/usr/include/c++/4.8/bits/stl_vector.h ****       push_back(const value_type& __x)
 608              		.loc 5 901 0
 609              		.cfi_startproc
 610 0000 55       		pushq	%rbp
 611              		.cfi_def_cfa_offset 16
 612              		.cfi_offset 6, -16
 613 0001 4889E5   		movq	%rsp, %rbp
 614              		.cfi_def_cfa_register 6
 615 0004 4883EC10 		subq	$16, %rsp
 616 0008 48897DF8 		movq	%rdi, -8(%rbp)
 617 000c 488975F0 		movq	%rsi, -16(%rbp)
 902:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 903:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 618              		.loc 5 903 0
 619 0010 488B45F8 		movq	-8(%rbp), %rax
 620 0014 488B5008 		movq	8(%rax), %rdx
 621 0018 488B45F8 		movq	-8(%rbp), %rax
 622 001c 488B4010 		movq	16(%rax), %rax
 623 0020 4839C2   		cmpq	%rax, %rdx
 624 0023 7431     		je	.L36
 904:/usr/include/c++/4.8/bits/stl_vector.h **** 	  {
 905:/usr/include/c++/4.8/bits/stl_vector.h **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 906:/usr/include/c++/4.8/bits/stl_vector.h **** 	                             __x);
 625              		.loc 5 906 0
 626 0025 488B45F8 		movq	-8(%rbp), %rax
 627 0029 488B4808 		movq	8(%rax), %rcx
 628 002d 488B45F8 		movq	-8(%rbp), %rax
 905:/usr/include/c++/4.8/bits/stl_vector.h **** 	                             __x);
 629              		.loc 5 905 0
 630 0031 488B55F0 		movq	-16(%rbp), %rdx
 631 0035 4889CE   		movq	%rcx, %rsi
 632 0038 4889C7   		movq	%rax, %rdi
 633 003b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RK
 633      00
 907:/usr/include/c++/4.8/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 634              		.loc 5 907 0
 635 0040 488B45F8 		movq	-8(%rbp), %rax
 636 0044 488B4008 		movq	8(%rax), %rax
 637 0048 488D5038 		leaq	56(%rax), %rdx
 638 004c 488B45F8 		movq	-8(%rbp), %rax
 639 0050 48895008 		movq	%rdx, 8(%rax)
 640 0054 EB22     		jmp	.L35
 641              	.L36:
 908:/usr/include/c++/4.8/bits/stl_vector.h **** 	  }
 909:/usr/include/c++/4.8/bits/stl_vector.h **** 	else
 910:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 911:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_emplace_back_aux(__x);
 912:/usr/include/c++/4.8/bits/stl_vector.h **** #else
 913:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_insert_aux(end(), __x);
 642              		.loc 5 913 0
 643 0056 488B45F8 		movq	-8(%rbp), %rax
 644 005a 4889C7   		movq	%rax, %rdi
 645 005d E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 645      00
 646 0062 4889C1   		movq	%rax, %rcx
 647 0065 488B55F0 		movq	-16(%rbp), %rdx
 648 0069 488B45F8 		movq	-8(%rbp), %rax
 649 006d 4889CE   		movq	%rcx, %rsi
 650 0070 4889C7   		movq	%rax, %rdi
 651 0073 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_ite
 651      00
 652              	.L35:
 914:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 915:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 653              		.loc 5 915 0
 654 0078 C9       		leave
 655              		.cfi_def_cfa 7, 8
 656 0079 C3       		ret
 657              		.cfi_endproc
 658              	.LFE837:
 660              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv,"axG",@progbits,_ZNSt6v
 661              		.align 2
 662              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv
 664              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv:
 665              	.LFB838:
 855:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *(end() - 1); }
 666              		.loc 5 855 0
 667              		.cfi_startproc
 668 0000 55       		pushq	%rbp
 669              		.cfi_def_cfa_offset 16
 670              		.cfi_offset 6, -16
 671 0001 4889E5   		movq	%rsp, %rbp
 672              		.cfi_def_cfa_register 6
 673 0004 4883EC30 		subq	$48, %rsp
 674 0008 48897DD8 		movq	%rdi, -40(%rbp)
 856:/usr/include/c++/4.8/bits/stl_vector.h ****       
 675              		.loc 5 856 0
 676 000c 48C745F8 		movq	$1, -8(%rbp)
 676      01000000 
 677 0014 488B45D8 		movq	-40(%rbp), %rax
 678 0018 4889C7   		movq	%rax, %rdi
 679 001b E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv@PLT
 679      00
 680 0020 488945E0 		movq	%rax, -32(%rbp)
 681 0024 488D55F8 		leaq	-8(%rbp), %rdx
 682 0028 488D45E0 		leaq	-32(%rbp), %rax
 683 002c 4889D6   		movq	%rdx, %rsi
 684 002f 4889C7   		movq	%rax, %rdi
 685 0032 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiERK
 685      00
 686 0037 488945F0 		movq	%rax, -16(%rbp)
 687 003b 488D45F0 		leaq	-16(%rbp), %rax
 688 003f 4889C7   		movq	%rax, %rdi
 689 0042 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv@
 689      00
 690 0047 C9       		leave
 691              		.cfi_def_cfa 7, 8
 692 0048 C3       		ret
 693              		.cfi_endproc
 694              	.LFE838:
 696              		.section	.text._ZNSt4pairIiSsEC2ERKiRKSs,"axG",@progbits,_ZNSt4pairIiSsEC5ERKiRKSs,comdat
 697              		.align 2
 698              		.weak	_ZNSt4pairIiSsEC2ERKiRKSs
 700              	_ZNSt4pairIiSsEC2ERKiRKSs:
 701              	.LFB846:
  97:/usr/include/c++/4.8/bits/stl_pair.h ****     {
  98:/usr/include/c++/4.8/bits/stl_pair.h ****       typedef _T1 first_type;    /// @c first_type is the first bound type
  99:/usr/include/c++/4.8/bits/stl_pair.h ****       typedef _T2 second_type;   /// @c second_type is the second bound type
 100:/usr/include/c++/4.8/bits/stl_pair.h **** 
 101:/usr/include/c++/4.8/bits/stl_pair.h ****       _T1 first;                 /// @c first is a copy of the first object
 102:/usr/include/c++/4.8/bits/stl_pair.h ****       _T2 second;                /// @c second is a copy of the second object
 103:/usr/include/c++/4.8/bits/stl_pair.h **** 
 104:/usr/include/c++/4.8/bits/stl_pair.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 105:/usr/include/c++/4.8/bits/stl_pair.h ****       // 265.  std::pair::pair() effects overly restrictive
 106:/usr/include/c++/4.8/bits/stl_pair.h ****       /** The default constructor creates @c first and @c second using their
 107:/usr/include/c++/4.8/bits/stl_pair.h ****        *  respective default constructors.  */
 108:/usr/include/c++/4.8/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair()
 109:/usr/include/c++/4.8/bits/stl_pair.h ****       : first(), second() { }
 110:/usr/include/c++/4.8/bits/stl_pair.h **** 
 111:/usr/include/c++/4.8/bits/stl_pair.h ****       /** Two objects may be passed to a @c pair constructor to be copied.  */
 112:/usr/include/c++/4.8/bits/stl_pair.h ****       _GLIBCXX_CONSTEXPR pair(const _T1& __a, const _T2& __b)
 702              		.loc 4 112 0
 703              		.cfi_startproc
 704 0000 55       		pushq	%rbp
 705              		.cfi_def_cfa_offset 16
 706              		.cfi_offset 6, -16
 707 0001 4889E5   		movq	%rsp, %rbp
 708              		.cfi_def_cfa_register 6
 709 0004 4883EC20 		subq	$32, %rsp
 710 0008 48897DF8 		movq	%rdi, -8(%rbp)
 711 000c 488975F0 		movq	%rsi, -16(%rbp)
 712 0010 488955E8 		movq	%rdx, -24(%rbp)
 713              	.LBB7:
 113:/usr/include/c++/4.8/bits/stl_pair.h ****       : first(__a), second(__b) { }
 714              		.loc 4 113 0
 715 0014 488B45F0 		movq	-16(%rbp), %rax
 716 0018 8B10     		movl	(%rax), %edx
 717 001a 488B45F8 		movq	-8(%rbp), %rax
 718 001e 8910     		movl	%edx, (%rax)
 719 0020 488B45F8 		movq	-8(%rbp), %rax
 720 0024 488D5008 		leaq	8(%rax), %rdx
 721 0028 488B45E8 		movq	-24(%rbp), %rax
 722 002c 4889C6   		movq	%rax, %rsi
 723 002f 4889D7   		movq	%rdx, %rdi
 724 0032 E8000000 		call	_ZNSsC1ERKSs@PLT
 724      00
 725              	.LBE7:
 726 0037 C9       		leave
 727              		.cfi_def_cfa 7, 8
 728 0038 C3       		ret
 729              		.cfi_endproc
 730              	.LFE846:
 732              		.weak	_ZNSt4pairIiSsEC1ERKiRKSs
 733              		.set	_ZNSt4pairIiSsEC1ERKiRKSs,_ZNSt4pairIiSsEC2ERKiRKSs
 734              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_,"axG",@progbits,_ZNSt6vectorISt4p
 735              		.align 2
 736              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_
 738              	_ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_:
 739              	.LFB848:
 901:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 740              		.loc 5 901 0
 741              		.cfi_startproc
 742 0000 55       		pushq	%rbp
 743              		.cfi_def_cfa_offset 16
 744              		.cfi_offset 6, -16
 745 0001 4889E5   		movq	%rsp, %rbp
 746              		.cfi_def_cfa_register 6
 747 0004 4883EC10 		subq	$16, %rsp
 748 0008 48897DF8 		movq	%rdi, -8(%rbp)
 749 000c 488975F0 		movq	%rsi, -16(%rbp)
 903:/usr/include/c++/4.8/bits/stl_vector.h **** 	  {
 750              		.loc 5 903 0
 751 0010 488B45F8 		movq	-8(%rbp), %rax
 752 0014 488B5008 		movq	8(%rax), %rdx
 753 0018 488B45F8 		movq	-8(%rbp), %rax
 754 001c 488B4010 		movq	16(%rax), %rax
 755 0020 4839C2   		cmpq	%rax, %rdx
 756 0023 7431     		je	.L42
 906:/usr/include/c++/4.8/bits/stl_vector.h **** 	    ++this->_M_impl._M_finish;
 757              		.loc 5 906 0
 758 0025 488B45F8 		movq	-8(%rbp), %rax
 759 0029 488B4808 		movq	8(%rax), %rcx
 760 002d 488B45F8 		movq	-8(%rbp), %rax
 905:/usr/include/c++/4.8/bits/stl_vector.h **** 	                             __x);
 761              		.loc 5 905 0
 762 0031 488B55F0 		movq	-16(%rbp), %rdx
 763 0035 4889CE   		movq	%rcx, %rsi
 764 0038 4889C7   		movq	%rax, %rdi
 765 003b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_@PLT
 765      00
 907:/usr/include/c++/4.8/bits/stl_vector.h **** 	  }
 766              		.loc 5 907 0
 767 0040 488B45F8 		movq	-8(%rbp), %rax
 768 0044 488B4008 		movq	8(%rax), %rax
 769 0048 488D5010 		leaq	16(%rax), %rdx
 770 004c 488B45F8 		movq	-8(%rbp), %rax
 771 0050 48895008 		movq	%rdx, 8(%rax)
 772 0054 EB22     		jmp	.L41
 773              	.L42:
 913:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 774              		.loc 5 913 0
 775 0056 488B45F8 		movq	-8(%rbp), %rax
 776 005a 4889C7   		movq	%rax, %rdi
 777 005d E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 777      00
 778 0062 4889C1   		movq	%rax, %rcx
 779 0065 488B55F0 		movq	-16(%rbp), %rdx
 780 0069 488B45F8 		movq	-8(%rbp), %rax
 781 006d 4889CE   		movq	%rcx, %rsi
 782 0070 4889C7   		movq	%rax, %rdi
 783 0073 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1
 783      00
 784              	.L41:
 785              		.loc 5 915 0
 786 0078 C9       		leave
 787              		.cfi_def_cfa 7, 8
 788 0079 C3       		ret
 789              		.cfi_endproc
 790              	.LFE848:
 792              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_
 793              		.align 2
 794              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev
 796              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:
 797              	.LFB857:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 798              		.loc 5 79 0
 799              		.cfi_startproc
 800 0000 55       		pushq	%rbp
 801              		.cfi_def_cfa_offset 16
 802              		.cfi_offset 6, -16
 803 0001 4889E5   		movq	%rsp, %rbp
 804              		.cfi_def_cfa_register 6
 805 0004 4883EC10 		subq	$16, %rsp
 806 0008 48897DF8 		movq	%rdi, -8(%rbp)
 807              	.LBB8:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 808              		.loc 5 79 0
 809 000c 488B45F8 		movq	-8(%rbp), %rax
 810 0010 4889C7   		movq	%rax, %rdi
 811 0013 E8000000 		call	_ZNSaISt4pairIiSsEED2Ev@PLT
 811      00
 812              	.LBE8:
 813 0018 C9       		leave
 814              		.cfi_def_cfa 7, 8
 815 0019 C3       		ret
 816              		.cfi_endproc
 817              	.LFE857:
 819              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev
 820              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_baseISt4pairIiSsESa
 821              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseISt
 822              		.align 2
 823              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
 825              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:
 826              	.LFB859:
 159:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 827              		.loc 5 159 0
 828              		.cfi_startproc
 829              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 830              		.cfi_lsda 0x1b,.LLSDA859
 831 0000 55       		pushq	%rbp
 832              		.cfi_def_cfa_offset 16
 833              		.cfi_offset 6, -16
 834 0001 4889E5   		movq	%rsp, %rbp
 835              		.cfi_def_cfa_register 6
 836 0004 53       		pushq	%rbx
 837 0005 4883EC18 		subq	$24, %rsp
 838              		.cfi_offset 3, -24
 839 0009 48897DE8 		movq	%rdi, -24(%rbp)
 840              	.LBB9:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 841              		.loc 5 161 0
 842 000d 488B45E8 		movq	-24(%rbp), %rax
 843 0011 488B4010 		movq	16(%rax), %rax
 844 0015 4889C2   		movq	%rax, %rdx
 845 0018 488B45E8 		movq	-24(%rbp), %rax
 846 001c 488B00   		movq	(%rax), %rax
 847 001f 4829C2   		subq	%rax, %rdx
 848 0022 4889D0   		movq	%rdx, %rax
 849 0025 48C1F804 		sarq	$4, %rax
 850 0029 4889C2   		movq	%rax, %rdx
 851 002c 488B45E8 		movq	-24(%rbp), %rax
 852 0030 488B08   		movq	(%rax), %rcx
 160:/usr/include/c++/4.8/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 853              		.loc 5 160 0
 854 0033 488B45E8 		movq	-24(%rbp), %rax
 855 0037 4889CE   		movq	%rcx, %rsi
 856 003a 4889C7   		movq	%rax, %rdi
 857              	.LEHB20:
 858 003d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 858      00
 859              	.LEHE20:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 860              		.loc 5 161 0
 861 0042 488B45E8 		movq	-24(%rbp), %rax
 862 0046 4889C7   		movq	%rax, %rdi
 863 0049 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 863      00
 864 004e EB1A     		jmp	.L50
 865              	.L49:
 866 0050 4889C3   		movq	%rax, %rbx
 867 0053 488B45E8 		movq	-24(%rbp), %rax
 868 0057 4889C7   		movq	%rax, %rdi
 869 005a E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 869      00
 870 005f 4889D8   		movq	%rbx, %rax
 871 0062 4889C7   		movq	%rax, %rdi
 872              	.LEHB21:
 873 0065 E8000000 		call	_Unwind_Resume@PLT
 873      00
 874              	.LEHE21:
 875              	.L50:
 876              	.LBE9:
 877 006a 4883C418 		addq	$24, %rsp
 878 006e 5B       		popq	%rbx
 879 006f 5D       		popq	%rbp
 880              		.cfi_def_cfa 7, 8
 881 0070 C3       		ret
 882              		.cfi_endproc
 883              	.LFE859:
 884              		.section	.gcc_except_table
 885              	.LLSDA859:
 886 0052 FF       		.byte	0xff
 887 0053 FF       		.byte	0xff
 888 0054 01       		.byte	0x1
 889 0055 08       		.uleb128 .LLSDACSE859-.LLSDACSB859
 890              	.LLSDACSB859:
 891 0056 3D       		.uleb128 .LEHB20-.LFB859
 892 0057 05       		.uleb128 .LEHE20-.LEHB20
 893 0058 50       		.uleb128 .L49-.LFB859
 894 0059 00       		.uleb128 0
 895 005a 65       		.uleb128 .LEHB21-.LFB859
 896 005b 05       		.uleb128 .LEHE21-.LEHB21
 897 005c 00       		.uleb128 0
 898 005d 00       		.uleb128 0
 899              	.LLSDACSE859:
 900              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseISt
 902              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev
 903              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev,_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
 904              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZN
 905              		.align 2
 906              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
 908              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:
 909              	.LFB861:
 113:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 910              		.loc 5 113 0
 911              		.cfi_startproc
 912 0000 55       		pushq	%rbp
 913              		.cfi_def_cfa_offset 16
 914              		.cfi_offset 6, -16
 915 0001 4889E5   		movq	%rsp, %rbp
 916              		.cfi_def_cfa_register 6
 917 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.8/bits/stl_vector.h **** 
 918              		.loc 5 114 0
 919 0008 488B45F8 		movq	-8(%rbp), %rax
 920 000c 5D       		popq	%rbp
 921              		.cfi_def_cfa 7, 8
 922 000d C3       		ret
 923              		.cfi_endproc
 924              	.LFE861:
 926              		.section	.text._ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIPSt4pai
 927              		.weak	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E
 929              	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E:
 930              	.LFB862:
 931              		.file 6 "/usr/include/c++/4.8/bits/stl_construct.h"
   1:/usr/include/c++/4.8/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_construct.h **** 
   3:/usr/include/c++/4.8/bits/stl_construct.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_construct.h **** //
   5:/usr/include/c++/4.8/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_construct.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_construct.h **** 
  11:/usr/include/c++/4.8/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_construct.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_construct.h **** 
  16:/usr/include/c++/4.8/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_construct.h **** 
  20:/usr/include/c++/4.8/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_construct.h **** 
  25:/usr/include/c++/4.8/bits/stl_construct.h **** /*
  26:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  27:/usr/include/c++/4.8/bits/stl_construct.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_construct.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  30:/usr/include/c++/4.8/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_construct.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  38:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  39:/usr/include/c++/4.8/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.8/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_construct.h ****  *
  42:/usr/include/c++/4.8/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_construct.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_construct.h ****  */
  50:/usr/include/c++/4.8/bits/stl_construct.h **** 
  51:/usr/include/c++/4.8/bits/stl_construct.h **** /** @file bits/stl_construct.h
  52:/usr/include/c++/4.8/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/4.8/bits/stl_construct.h ****  */
  55:/usr/include/c++/4.8/bits/stl_construct.h **** 
  56:/usr/include/c++/4.8/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  57:/usr/include/c++/4.8/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  58:/usr/include/c++/4.8/bits/stl_construct.h **** 
  59:/usr/include/c++/4.8/bits/stl_construct.h **** #include <new>
  60:/usr/include/c++/4.8/bits/stl_construct.h **** #include <bits/move.h>
  61:/usr/include/c++/4.8/bits/stl_construct.h **** #include <ext/alloc_traits.h>
  62:/usr/include/c++/4.8/bits/stl_construct.h **** 
  63:/usr/include/c++/4.8/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  64:/usr/include/c++/4.8/bits/stl_construct.h **** {
  65:/usr/include/c++/4.8/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  66:/usr/include/c++/4.8/bits/stl_construct.h **** 
  67:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
  68:/usr/include/c++/4.8/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  69:/usr/include/c++/4.8/bits/stl_construct.h ****    * object's constructor with an initializer.
  70:/usr/include/c++/4.8/bits/stl_construct.h ****    */
  71:/usr/include/c++/4.8/bits/stl_construct.h **** #if __cplusplus >= 201103L
  72:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  73:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
  74:/usr/include/c++/4.8/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  75:/usr/include/c++/4.8/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  76:/usr/include/c++/4.8/bits/stl_construct.h **** #else
  77:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  78:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
  79:/usr/include/c++/4.8/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  80:/usr/include/c++/4.8/bits/stl_construct.h ****     {
  81:/usr/include/c++/4.8/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  82:/usr/include/c++/4.8/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  83:/usr/include/c++/4.8/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  84:/usr/include/c++/4.8/bits/stl_construct.h ****     }
  85:/usr/include/c++/4.8/bits/stl_construct.h **** #endif
  86:/usr/include/c++/4.8/bits/stl_construct.h **** 
  87:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
  88:/usr/include/c++/4.8/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  89:/usr/include/c++/4.8/bits/stl_construct.h ****    */
  90:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _Tp>
  91:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
  92:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  93:/usr/include/c++/4.8/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  94:/usr/include/c++/4.8/bits/stl_construct.h **** 
  95:/usr/include/c++/4.8/bits/stl_construct.h ****   template<bool>
  96:/usr/include/c++/4.8/bits/stl_construct.h ****     struct _Destroy_aux
  97:/usr/include/c++/4.8/bits/stl_construct.h ****     {
  98:/usr/include/c++/4.8/bits/stl_construct.h ****       template<typename _ForwardIterator>
  99:/usr/include/c++/4.8/bits/stl_construct.h ****         static void
 100:/usr/include/c++/4.8/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 101:/usr/include/c++/4.8/bits/stl_construct.h **** 	{
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 103:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 104:/usr/include/c++/4.8/bits/stl_construct.h **** 	}
 105:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 106:/usr/include/c++/4.8/bits/stl_construct.h **** 
 107:/usr/include/c++/4.8/bits/stl_construct.h ****   template<>
 108:/usr/include/c++/4.8/bits/stl_construct.h ****     struct _Destroy_aux<true>
 109:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 110:/usr/include/c++/4.8/bits/stl_construct.h ****       template<typename _ForwardIterator>
 111:/usr/include/c++/4.8/bits/stl_construct.h ****         static void
 112:/usr/include/c++/4.8/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 113:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 114:/usr/include/c++/4.8/bits/stl_construct.h **** 
 115:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
 116:/usr/include/c++/4.8/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 117:/usr/include/c++/4.8/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 118:/usr/include/c++/4.8/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 119:/usr/include/c++/4.8/bits/stl_construct.h ****    */
 120:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _ForwardIterator>
 121:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
 122:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 123:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 124:/usr/include/c++/4.8/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 125:/usr/include/c++/4.8/bits/stl_construct.h ****                        _Value_type;
 126:/usr/include/c++/4.8/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 127:/usr/include/c++/4.8/bits/stl_construct.h **** 	__destroy(__first, __last);
 128:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 129:/usr/include/c++/4.8/bits/stl_construct.h **** 
 130:/usr/include/c++/4.8/bits/stl_construct.h ****   /**
 131:/usr/include/c++/4.8/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 132:/usr/include/c++/4.8/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 133:/usr/include/c++/4.8/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 134:/usr/include/c++/4.8/bits/stl_construct.h ****    */
 135:/usr/include/c++/4.8/bits/stl_construct.h **** 
 136:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 137:/usr/include/c++/4.8/bits/stl_construct.h ****     void
 138:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 139:/usr/include/c++/4.8/bits/stl_construct.h **** 	     _Allocator& __alloc)
 140:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 141:/usr/include/c++/4.8/bits/stl_construct.h ****       typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 142:/usr/include/c++/4.8/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 143:/usr/include/c++/4.8/bits/stl_construct.h **** 	__traits::destroy(__alloc, std::__addressof(*__first));
 144:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 145:/usr/include/c++/4.8/bits/stl_construct.h **** 
 146:/usr/include/c++/4.8/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/4.8/bits/stl_construct.h ****     inline void
 148:/usr/include/c++/4.8/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 932              		.loc 6 148 0
 933              		.cfi_startproc
 934 0000 55       		pushq	%rbp
 935              		.cfi_def_cfa_offset 16
 936              		.cfi_offset 6, -16
 937 0001 4889E5   		movq	%rsp, %rbp
 938              		.cfi_def_cfa_register 6
 939 0004 4883EC20 		subq	$32, %rsp
 940 0008 48897DF8 		movq	%rdi, -8(%rbp)
 941 000c 488975F0 		movq	%rsi, -16(%rbp)
 942 0010 488955E8 		movq	%rdx, -24(%rbp)
 149:/usr/include/c++/4.8/bits/stl_construct.h **** 	     allocator<_Tp>&)
 150:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 151:/usr/include/c++/4.8/bits/stl_construct.h ****       _Destroy(__first, __last);
 943              		.loc 6 151 0
 944 0014 488B55F0 		movq	-16(%rbp), %rdx
 945 0018 488B45F8 		movq	-8(%rbp), %rax
 946 001c 4889D6   		movq	%rdx, %rsi
 947 001f 4889C7   		movq	%rax, %rdi
 948 0022 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_@PLT
 948      00
 152:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 949              		.loc 6 152 0
 950 0027 C9       		leave
 951              		.cfi_def_cfa 7, 8
 952 0028 C3       		ret
 953              		.cfi_endproc
 954              	.LFE862:
 956              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEv
 957              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_R
 959              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RKT_:
 960              	.LFB863:
 961              		.file 7 "/usr/include/c++/4.8/ext/alloc_traits.h"
   1:/usr/include/c++/4.8/ext/alloc_traits.h **** // Allocator traits -*- C++ -*-
   2:/usr/include/c++/4.8/ext/alloc_traits.h **** 
   3:/usr/include/c++/4.8/ext/alloc_traits.h **** // Copyright (C) 2011-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/ext/alloc_traits.h **** //
   5:/usr/include/c++/4.8/ext/alloc_traits.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/ext/alloc_traits.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/ext/alloc_traits.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/ext/alloc_traits.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/ext/alloc_traits.h **** // any later version.
  10:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  11:/usr/include/c++/4.8/ext/alloc_traits.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/ext/alloc_traits.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/ext/alloc_traits.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/ext/alloc_traits.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  16:/usr/include/c++/4.8/ext/alloc_traits.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/ext/alloc_traits.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/ext/alloc_traits.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  20:/usr/include/c++/4.8/ext/alloc_traits.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/ext/alloc_traits.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/ext/alloc_traits.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/ext/alloc_traits.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  25:/usr/include/c++/4.8/ext/alloc_traits.h **** /** @file ext/alloc_traits.h
  26:/usr/include/c++/4.8/ext/alloc_traits.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/4.8/ext/alloc_traits.h ****  */
  28:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  29:/usr/include/c++/4.8/ext/alloc_traits.h **** #ifndef _EXT_ALLOC_TRAITS_H
  30:/usr/include/c++/4.8/ext/alloc_traits.h **** #define _EXT_ALLOC_TRAITS_H 1
  31:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  32:/usr/include/c++/4.8/ext/alloc_traits.h **** #pragma GCC system_header
  33:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  34:/usr/include/c++/4.8/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  35:/usr/include/c++/4.8/ext/alloc_traits.h **** # include <bits/move.h>
  36:/usr/include/c++/4.8/ext/alloc_traits.h **** # include <bits/alloc_traits.h>
  37:/usr/include/c++/4.8/ext/alloc_traits.h **** #else
  38:/usr/include/c++/4.8/ext/alloc_traits.h **** # include <bits/allocator.h>  // for __alloc_swap
  39:/usr/include/c++/4.8/ext/alloc_traits.h **** #endif
  40:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  41:/usr/include/c++/4.8/ext/alloc_traits.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  42:/usr/include/c++/4.8/ext/alloc_traits.h **** {
  43:/usr/include/c++/4.8/ext/alloc_traits.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  44:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  45:/usr/include/c++/4.8/ext/alloc_traits.h **** #if __cplusplus >= 201103L
  46:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Alloc>
  47:/usr/include/c++/4.8/ext/alloc_traits.h ****     struct __allocator_always_compares_equal
  48:/usr/include/c++/4.8/ext/alloc_traits.h ****     { static const bool value = false; };
  49:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  50:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Alloc>
  51:/usr/include/c++/4.8/ext/alloc_traits.h ****     const bool __allocator_always_compares_equal<_Alloc>::value;
  52:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  53:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
  54:/usr/include/c++/4.8/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<std::allocator<_Tp>>
  55:/usr/include/c++/4.8/ext/alloc_traits.h ****     { static const bool value = true; };
  56:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  57:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
  58:/usr/include/c++/4.8/ext/alloc_traits.h ****     const bool __allocator_always_compares_equal<std::allocator<_Tp>>::value;
  59:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  60:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename, typename> struct array_allocator;
  61:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  62:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp, typename _Array>
  63:/usr/include/c++/4.8/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<array_allocator<_Tp, _Array>>
  64:/usr/include/c++/4.8/ext/alloc_traits.h ****     { static const bool value = true; };
  65:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  66:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp, typename _Array>
  67:/usr/include/c++/4.8/ext/alloc_traits.h ****     const bool
  68:/usr/include/c++/4.8/ext/alloc_traits.h ****     __allocator_always_compares_equal<array_allocator<_Tp, _Array>>::value;
  69:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  70:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename> struct bitmap_allocator;
  71:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  72:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
  73:/usr/include/c++/4.8/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<bitmap_allocator<_Tp>>
  74:/usr/include/c++/4.8/ext/alloc_traits.h ****     { static const bool value = true; };
  75:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  76:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
  77:/usr/include/c++/4.8/ext/alloc_traits.h ****     const bool __allocator_always_compares_equal<bitmap_allocator<_Tp>>::value;
  78:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  79:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename> struct malloc_allocator;
  80:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  81:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
  82:/usr/include/c++/4.8/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<malloc_allocator<_Tp>>
  83:/usr/include/c++/4.8/ext/alloc_traits.h ****     { static const bool value = true; };
  84:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  85:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
  86:/usr/include/c++/4.8/ext/alloc_traits.h ****     const bool __allocator_always_compares_equal<malloc_allocator<_Tp>>::value;
  87:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  88:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename> struct mt_allocator;
  89:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  90:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
  91:/usr/include/c++/4.8/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<mt_allocator<_Tp>>
  92:/usr/include/c++/4.8/ext/alloc_traits.h ****     { static const bool value = true; };
  93:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  94:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
  95:/usr/include/c++/4.8/ext/alloc_traits.h ****     const bool __allocator_always_compares_equal<mt_allocator<_Tp>>::value;
  96:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  97:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename> struct new_allocator;
  98:/usr/include/c++/4.8/ext/alloc_traits.h **** 
  99:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
 100:/usr/include/c++/4.8/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<new_allocator<_Tp>>
 101:/usr/include/c++/4.8/ext/alloc_traits.h ****     { static const bool value = true; };
 102:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 103:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
 104:/usr/include/c++/4.8/ext/alloc_traits.h ****     const bool __allocator_always_compares_equal<new_allocator<_Tp>>::value;
 105:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 106:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename> struct pool_allocator;
 107:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 108:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
 109:/usr/include/c++/4.8/ext/alloc_traits.h ****     struct __allocator_always_compares_equal<pool_allocator<_Tp>>
 110:/usr/include/c++/4.8/ext/alloc_traits.h ****     { static const bool value = true; };
 111:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 112:/usr/include/c++/4.8/ext/alloc_traits.h ****   template<typename _Tp>
 113:/usr/include/c++/4.8/ext/alloc_traits.h ****     const bool __allocator_always_compares_equal<pool_allocator<_Tp>>::value;
 114:/usr/include/c++/4.8/ext/alloc_traits.h **** #endif
 115:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 116:/usr/include/c++/4.8/ext/alloc_traits.h **** /**
 117:/usr/include/c++/4.8/ext/alloc_traits.h ****  * @brief  Uniform interface to C++98 and C++0x allocators.
 118:/usr/include/c++/4.8/ext/alloc_traits.h ****  * @ingroup allocators
 119:/usr/include/c++/4.8/ext/alloc_traits.h **** */
 120:/usr/include/c++/4.8/ext/alloc_traits.h **** template<typename _Alloc>
 121:/usr/include/c++/4.8/ext/alloc_traits.h ****   struct __alloc_traits
 122:/usr/include/c++/4.8/ext/alloc_traits.h **** #if __cplusplus >= 201103L
 123:/usr/include/c++/4.8/ext/alloc_traits.h ****   : std::allocator_traits<_Alloc>
 124:/usr/include/c++/4.8/ext/alloc_traits.h **** #endif
 125:/usr/include/c++/4.8/ext/alloc_traits.h ****   {
 126:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef _Alloc allocator_type;
 127:/usr/include/c++/4.8/ext/alloc_traits.h **** #if __cplusplus >= 201103L
 128:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef std::allocator_traits<_Alloc>           _Base_type;
 129:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Base_type::value_type         value_type;
 130:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Base_type::pointer            pointer;
 131:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Base_type::const_pointer      const_pointer;
 132:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Base_type::size_type          size_type;
 133:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Base_type::difference_type    difference_type;
 134:/usr/include/c++/4.8/ext/alloc_traits.h ****     // C++0x allocators do not define reference or const_reference
 135:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef value_type&                             reference;
 136:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef const value_type&                       const_reference;
 137:/usr/include/c++/4.8/ext/alloc_traits.h ****     using _Base_type::allocate;
 138:/usr/include/c++/4.8/ext/alloc_traits.h ****     using _Base_type::deallocate;
 139:/usr/include/c++/4.8/ext/alloc_traits.h ****     using _Base_type::construct;
 140:/usr/include/c++/4.8/ext/alloc_traits.h ****     using _Base_type::destroy;
 141:/usr/include/c++/4.8/ext/alloc_traits.h ****     using _Base_type::max_size;
 142:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 143:/usr/include/c++/4.8/ext/alloc_traits.h ****   private:
 144:/usr/include/c++/4.8/ext/alloc_traits.h ****     template<typename _Ptr>
 145:/usr/include/c++/4.8/ext/alloc_traits.h ****       struct __is_custom_pointer
 146:/usr/include/c++/4.8/ext/alloc_traits.h ****       : std::integral_constant<bool, std::is_same<pointer, _Ptr>::value
 147:/usr/include/c++/4.8/ext/alloc_traits.h ****                                      && !std::is_pointer<_Ptr>::value>
 148:/usr/include/c++/4.8/ext/alloc_traits.h ****       { };
 149:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 150:/usr/include/c++/4.8/ext/alloc_traits.h ****   public:
 151:/usr/include/c++/4.8/ext/alloc_traits.h ****     // overload construct for non-standard pointer types
 152:/usr/include/c++/4.8/ext/alloc_traits.h ****     template<typename _Ptr, typename... _Args>
 153:/usr/include/c++/4.8/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 154:/usr/include/c++/4.8/ext/alloc_traits.h ****       construct(_Alloc& __a, _Ptr __p, _Args&&... __args)
 155:/usr/include/c++/4.8/ext/alloc_traits.h ****       {
 156:/usr/include/c++/4.8/ext/alloc_traits.h **** 	_Base_type::construct(__a, std::addressof(*__p),
 157:/usr/include/c++/4.8/ext/alloc_traits.h **** 			      std::forward<_Args>(__args)...);
 158:/usr/include/c++/4.8/ext/alloc_traits.h ****       }
 159:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 160:/usr/include/c++/4.8/ext/alloc_traits.h ****     // overload destroy for non-standard pointer types
 161:/usr/include/c++/4.8/ext/alloc_traits.h ****     template<typename _Ptr>
 162:/usr/include/c++/4.8/ext/alloc_traits.h ****       static typename std::enable_if<__is_custom_pointer<_Ptr>::value>::type
 163:/usr/include/c++/4.8/ext/alloc_traits.h ****       destroy(_Alloc& __a, _Ptr __p)
 164:/usr/include/c++/4.8/ext/alloc_traits.h ****       { _Base_type::destroy(__a, std::addressof(*__p)); }
 165:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 166:/usr/include/c++/4.8/ext/alloc_traits.h ****     static _Alloc _S_select_on_copy(const _Alloc& __a)
 167:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return _Base_type::select_on_container_copy_construction(__a); }
 168:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 169:/usr/include/c++/4.8/ext/alloc_traits.h ****     static void _S_on_swap(_Alloc& __a, _Alloc& __b)
 170:/usr/include/c++/4.8/ext/alloc_traits.h ****     { std::__alloc_on_swap(__a, __b); }
 171:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 172:/usr/include/c++/4.8/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_copy_assign()
 173:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_copy_assignment::value; }
 174:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 175:/usr/include/c++/4.8/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_move_assign()
 176:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_move_assignment::value; }
 177:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 178:/usr/include/c++/4.8/ext/alloc_traits.h ****     static constexpr bool _S_propagate_on_swap()
 179:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return _Base_type::propagate_on_container_swap::value; }
 180:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 181:/usr/include/c++/4.8/ext/alloc_traits.h ****     static constexpr bool _S_always_equal()
 182:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return __allocator_always_compares_equal<_Alloc>::value; }
 183:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 184:/usr/include/c++/4.8/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_move()
 185:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return _S_propagate_on_move_assign() || _S_always_equal(); }
 186:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 187:/usr/include/c++/4.8/ext/alloc_traits.h ****     static constexpr bool _S_nothrow_swap()
 188:/usr/include/c++/4.8/ext/alloc_traits.h ****     {
 189:/usr/include/c++/4.8/ext/alloc_traits.h ****       using std::swap;
 190:/usr/include/c++/4.8/ext/alloc_traits.h ****       return !_S_propagate_on_swap()
 191:/usr/include/c++/4.8/ext/alloc_traits.h ****        	|| noexcept(swap(std::declval<_Alloc&>(), std::declval<_Alloc&>()));
 192:/usr/include/c++/4.8/ext/alloc_traits.h ****     }
 193:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 194:/usr/include/c++/4.8/ext/alloc_traits.h ****     template<typename _Tp>
 195:/usr/include/c++/4.8/ext/alloc_traits.h ****       struct rebind
 196:/usr/include/c++/4.8/ext/alloc_traits.h ****       { typedef typename _Base_type::template rebind_alloc<_Tp> other; };
 197:/usr/include/c++/4.8/ext/alloc_traits.h **** #else
 198:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 199:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Alloc::pointer                pointer;
 200:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Alloc::const_pointer          const_pointer;
 201:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Alloc::value_type             value_type;
 202:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Alloc::reference              reference;
 203:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Alloc::const_reference        const_reference;
 204:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Alloc::size_type              size_type;
 205:/usr/include/c++/4.8/ext/alloc_traits.h ****     typedef typename _Alloc::difference_type        difference_type;
 206:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 207:/usr/include/c++/4.8/ext/alloc_traits.h ****     static pointer
 208:/usr/include/c++/4.8/ext/alloc_traits.h ****     allocate(_Alloc& __a, size_type __n)
 209:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return __a.allocate(__n); }
 210:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 211:/usr/include/c++/4.8/ext/alloc_traits.h ****     static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 212:/usr/include/c++/4.8/ext/alloc_traits.h ****     { __a.deallocate(__p, __n); }
 213:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 214:/usr/include/c++/4.8/ext/alloc_traits.h ****     template<typename _Tp>
 215:/usr/include/c++/4.8/ext/alloc_traits.h ****       static void construct(_Alloc& __a, pointer __p, const _Tp& __arg)
 962              		.loc 7 215 0
 963              		.cfi_startproc
 964 0000 55       		pushq	%rbp
 965              		.cfi_def_cfa_offset 16
 966              		.cfi_offset 6, -16
 967 0001 4889E5   		movq	%rsp, %rbp
 968              		.cfi_def_cfa_register 6
 969 0004 4883EC20 		subq	$32, %rsp
 970 0008 48897DF8 		movq	%rdi, -8(%rbp)
 971 000c 488975F0 		movq	%rsi, -16(%rbp)
 972 0010 488955E8 		movq	%rdx, -24(%rbp)
 216:/usr/include/c++/4.8/ext/alloc_traits.h ****       { __a.construct(__p, __arg); }
 973              		.loc 7 216 0
 974 0014 488B55E8 		movq	-24(%rbp), %rdx
 975 0018 488B4DF0 		movq	-16(%rbp), %rcx
 976 001c 488B45F8 		movq	-8(%rbp), %rax
 977 0020 4889CE   		movq	%rcx, %rsi
 978 0023 4889C7   		movq	%rax, %rdi
 979 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_@PLT
 979      00
 980 002b C9       		leave
 981              		.cfi_def_cfa 7, 8
 982 002c C3       		ret
 983              		.cfi_endproc
 984              	.LFE863:
 986              		.section	.text._ZN8UnitTest18DeferredTestResultC2ERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 987              		.align 2
 988              		.weak	_ZN8UnitTest18DeferredTestResultC2ERKS0_
 990              	_ZN8UnitTest18DeferredTestResultC2ERKS0_:
 991              	.LFB866:
 992              		.loc 2 10 0
 993              		.cfi_startproc
 994              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 995              		.cfi_lsda 0x1b,.LLSDA866
 996 0000 55       		pushq	%rbp
 997              		.cfi_def_cfa_offset 16
 998              		.cfi_offset 6, -16
 999 0001 4889E5   		movq	%rsp, %rbp
 1000              		.cfi_def_cfa_register 6
 1001 0004 53       		pushq	%rbx
 1002 0005 4883EC18 		subq	$24, %rsp
 1003              		.cfi_offset 3, -24
 1004 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1005 000d 488975E0 		movq	%rsi, -32(%rbp)
 1006              	.LBB10:
 1007              		.loc 2 10 0
 1008 0011 488B55E0 		movq	-32(%rbp), %rdx
 1009 0015 488B45E8 		movq	-24(%rbp), %rax
 1010 0019 4889D6   		movq	%rdx, %rsi
 1011 001c 4889C7   		movq	%rax, %rdi
 1012              	.LEHB22:
 1013 001f E8000000 		call	_ZNSsC1ERKSs@PLT
 1013      00
 1014              	.LEHE22:
 1015 0024 488B45E0 		movq	-32(%rbp), %rax
 1016 0028 488D5008 		leaq	8(%rax), %rdx
 1017 002c 488B45E8 		movq	-24(%rbp), %rax
 1018 0030 4883C008 		addq	$8, %rax
 1019 0034 4889D6   		movq	%rdx, %rsi
 1020 0037 4889C7   		movq	%rax, %rdi
 1021              	.LEHB23:
 1022 003a E8000000 		call	_ZNSsC1ERKSs@PLT
 1022      00
 1023              	.LEHE23:
 1024              		.loc 2 10 0 is_stmt 0 discriminator 1
 1025 003f 488B45E0 		movq	-32(%rbp), %rax
 1026 0043 488D5010 		leaq	16(%rax), %rdx
 1027 0047 488B45E8 		movq	-24(%rbp), %rax
 1028 004b 4883C010 		addq	$16, %rax
 1029 004f 4889D6   		movq	%rdx, %rsi
 1030 0052 4889C7   		movq	%rax, %rdi
 1031              	.LEHB24:
 1032 0055 E8000000 		call	_ZNSsC1ERKSs@PLT
 1032      00
 1033              	.LEHE24:
 1034              		.loc 2 10 0 discriminator 2
 1035 005a 488B45E0 		movq	-32(%rbp), %rax
 1036 005e 488D5018 		leaq	24(%rax), %rdx
 1037 0062 488B45E8 		movq	-24(%rbp), %rax
 1038 0066 4883C018 		addq	$24, %rax
 1039 006a 4889D6   		movq	%rdx, %rsi
 1040 006d 4889C7   		movq	%rax, %rdi
 1041              	.LEHB25:
 1042 0070 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EEC1ERKS3_@PLT
 1042      00
 1043              	.LEHE25:
 1044              		.loc 2 10 0 discriminator 3
 1045 0075 488B45E0 		movq	-32(%rbp), %rax
 1046 0079 8B4030   		movl	48(%rax), %eax
 1047 007c 488B55E8 		movq	-24(%rbp), %rdx
 1048 0080 894230   		movl	%eax, 48(%rdx)
 1049 0083 488B45E0 		movq	-32(%rbp), %rax
 1050 0087 0FB65034 		movzbl	52(%rax), %edx
 1051 008b 488B45E8 		movq	-24(%rbp), %rax
 1052 008f 885034   		movb	%dl, 52(%rax)
 1053 0092 EB44     		jmp	.L62
 1054              	.L61:
 1055 0094 4889C3   		movq	%rax, %rbx
 1056              		.loc 2 10 0
 1057 0097 488B45E8 		movq	-24(%rbp), %rax
 1058 009b 4883C010 		addq	$16, %rax
 1059 009f 4889C7   		movq	%rax, %rdi
 1060 00a2 E8000000 		call	_ZNSsD1Ev@PLT
 1060      00
 1061 00a7 EB03     		jmp	.L57
 1062              	.L60:
 1063 00a9 4889C3   		movq	%rax, %rbx
 1064              	.L57:
 1065 00ac 488B45E8 		movq	-24(%rbp), %rax
 1066 00b0 4883C008 		addq	$8, %rax
 1067 00b4 4889C7   		movq	%rax, %rdi
 1068 00b7 E8000000 		call	_ZNSsD1Ev@PLT
 1068      00
 1069 00bc EB03     		jmp	.L58
 1070              	.L59:
 1071 00be 4889C3   		movq	%rax, %rbx
 1072              	.L58:
 1073 00c1 488B45E8 		movq	-24(%rbp), %rax
 1074 00c5 4889C7   		movq	%rax, %rdi
 1075 00c8 E8000000 		call	_ZNSsD1Ev@PLT
 1075      00
 1076 00cd 4889D8   		movq	%rbx, %rax
 1077 00d0 4889C7   		movq	%rax, %rdi
 1078              	.LEHB26:
 1079 00d3 E8000000 		call	_Unwind_Resume@PLT
 1079      00
 1080              	.LEHE26:
 1081              	.L62:
 1082              	.LBE10:
 1083 00d8 4883C418 		addq	$24, %rsp
 1084 00dc 5B       		popq	%rbx
 1085 00dd 5D       		popq	%rbp
 1086              		.cfi_def_cfa 7, 8
 1087 00de C3       		ret
 1088              		.cfi_endproc
 1089              	.LFE866:
 1090              		.section	.gcc_except_table
 1091              	.LLSDA866:
 1092 005e FF       		.byte	0xff
 1093 005f FF       		.byte	0xff
 1094 0060 01       		.byte	0x1
 1095 0061 18       		.uleb128 .LLSDACSE866-.LLSDACSB866
 1096              	.LLSDACSB866:
 1097 0062 1F       		.uleb128 .LEHB22-.LFB866
 1098 0063 05       		.uleb128 .LEHE22-.LEHB22
 1099 0064 00       		.uleb128 0
 1100 0065 00       		.uleb128 0
 1101 0066 3A       		.uleb128 .LEHB23-.LFB866
 1102 0067 05       		.uleb128 .LEHE23-.LEHB23
 1103 0068 BE01     		.uleb128 .L59-.LFB866
 1104 006a 00       		.uleb128 0
 1105 006b 55       		.uleb128 .LEHB24-.LFB866
 1106 006c 05       		.uleb128 .LEHE24-.LEHB24
 1107 006d A901     		.uleb128 .L60-.LFB866
 1108 006f 00       		.uleb128 0
 1109 0070 70       		.uleb128 .LEHB25-.LFB866
 1110 0071 05       		.uleb128 .LEHE25-.LEHB25
 1111 0072 9401     		.uleb128 .L61-.LFB866
 1112 0074 00       		.uleb128 0
 1113 0075 D301     		.uleb128 .LEHB26-.LFB866
 1114 0077 05       		.uleb128 .LEHE26-.LEHB26
 1115 0078 00       		.uleb128 0
 1116 0079 00       		.uleb128 0
 1117              	.LLSDACSE866:
 1118              		.section	.text._ZN8UnitTest18DeferredTestResultC2ERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 1120              		.weak	_ZN8UnitTest18DeferredTestResultC1ERKS0_
 1121              		.set	_ZN8UnitTest18DeferredTestResultC1ERKS0_,_ZN8UnitTest18DeferredTestResultC2ERKS0_
 1122              		.section	.text._ZN8UnitTest18DeferredTestResultaSERKS0_,"axG",@progbits,_ZN8UnitTest18DeferredTest
 1123              		.align 2
 1124              		.weak	_ZN8UnitTest18DeferredTestResultaSERKS0_
 1126              	_ZN8UnitTest18DeferredTestResultaSERKS0_:
 1127              	.LFB868:
 1128              		.loc 2 10 0 is_stmt 1
 1129              		.cfi_startproc
 1130 0000 55       		pushq	%rbp
 1131              		.cfi_def_cfa_offset 16
 1132              		.cfi_offset 6, -16
 1133 0001 4889E5   		movq	%rsp, %rbp
 1134              		.cfi_def_cfa_register 6
 1135 0004 4883EC10 		subq	$16, %rsp
 1136 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1137 000c 488975F0 		movq	%rsi, -16(%rbp)
 1138              		.loc 2 10 0
 1139 0010 488B55F0 		movq	-16(%rbp), %rdx
 1140 0014 488B45F8 		movq	-8(%rbp), %rax
 1141 0018 4889D6   		movq	%rdx, %rsi
 1142 001b 4889C7   		movq	%rax, %rdi
 1143 001e E8000000 		call	_ZNSsaSERKSs@PLT
 1143      00
 1144 0023 488B45F0 		movq	-16(%rbp), %rax
 1145 0027 488D5008 		leaq	8(%rax), %rdx
 1146 002b 488B45F8 		movq	-8(%rbp), %rax
 1147 002f 4883C008 		addq	$8, %rax
 1148 0033 4889D6   		movq	%rdx, %rsi
 1149 0036 4889C7   		movq	%rax, %rdi
 1150 0039 E8000000 		call	_ZNSsaSERKSs@PLT
 1150      00
 1151 003e 488B45F0 		movq	-16(%rbp), %rax
 1152 0042 488D5010 		leaq	16(%rax), %rdx
 1153 0046 488B45F8 		movq	-8(%rbp), %rax
 1154 004a 4883C010 		addq	$16, %rax
 1155 004e 4889D6   		movq	%rdx, %rsi
 1156 0051 4889C7   		movq	%rax, %rdi
 1157 0054 E8000000 		call	_ZNSsaSERKSs@PLT
 1157      00
 1158 0059 488B45F0 		movq	-16(%rbp), %rax
 1159 005d 488D5018 		leaq	24(%rax), %rdx
 1160 0061 488B45F8 		movq	-8(%rbp), %rax
 1161 0065 4883C018 		addq	$24, %rax
 1162 0069 4889D6   		movq	%rdx, %rsi
 1163 006c 4889C7   		movq	%rax, %rdi
 1164 006f E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_@PLT
 1164      00
 1165 0074 488B45F0 		movq	-16(%rbp), %rax
 1166 0078 8B4030   		movl	48(%rax), %eax
 1167 007b 488B55F8 		movq	-8(%rbp), %rdx
 1168 007f 894230   		movl	%eax, 48(%rdx)
 1169 0082 488B45F0 		movq	-16(%rbp), %rax
 1170 0086 0FB65034 		movzbl	52(%rax), %edx
 1171 008a 488B45F8 		movq	-8(%rbp), %rax
 1172 008e 885034   		movb	%dl, 52(%rax)
 1173 0091 488B45F8 		movq	-8(%rbp), %rax
 1174 0095 C9       		leave
 1175              		.cfi_def_cfa 7, 8
 1176 0096 C3       		ret
 1177              		.cfi_endproc
 1178              	.LFE868:
 1180              		.section	.rodata
 1181              	.LC0:
 1182 0000 76656374 		.string	"vector::_M_insert_aux"
 1182      6F723A3A 
 1182      5F4D5F69 
 1182      6E736572 
 1182      745F6175 
 1183              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__
 1184              		.align 2
 1185              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_it
 1187              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorI
 1188              	.LFB864:
 1189              		.file 8 "/usr/include/c++/4.8/bits/vector.tcc"
   1:/usr/include/c++/4.8/bits/vector.tcc **** // Vector implementation (out of line) -*- C++ -*-
   2:/usr/include/c++/4.8/bits/vector.tcc **** 
   3:/usr/include/c++/4.8/bits/vector.tcc **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/vector.tcc **** //
   5:/usr/include/c++/4.8/bits/vector.tcc **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/vector.tcc **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/vector.tcc **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/vector.tcc **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/vector.tcc **** // any later version.
  10:/usr/include/c++/4.8/bits/vector.tcc **** 
  11:/usr/include/c++/4.8/bits/vector.tcc **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/vector.tcc **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/vector.tcc **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/vector.tcc **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/vector.tcc **** 
  16:/usr/include/c++/4.8/bits/vector.tcc **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/vector.tcc **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/vector.tcc **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/vector.tcc **** 
  20:/usr/include/c++/4.8/bits/vector.tcc **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/vector.tcc **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/vector.tcc **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/vector.tcc **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/vector.tcc **** 
  25:/usr/include/c++/4.8/bits/vector.tcc **** /*
  26:/usr/include/c++/4.8/bits/vector.tcc ****  *
  27:/usr/include/c++/4.8/bits/vector.tcc ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/vector.tcc ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/vector.tcc ****  *
  30:/usr/include/c++/4.8/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/vector.tcc ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/vector.tcc ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/vector.tcc ****  *
  38:/usr/include/c++/4.8/bits/vector.tcc ****  *
  39:/usr/include/c++/4.8/bits/vector.tcc ****  * Copyright (c) 1996
  40:/usr/include/c++/4.8/bits/vector.tcc ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/vector.tcc ****  *
  42:/usr/include/c++/4.8/bits/vector.tcc ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/vector.tcc ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/vector.tcc ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/vector.tcc ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/vector.tcc ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/vector.tcc ****  * representations about the suitability of this  software for any
  48:/usr/include/c++/4.8/bits/vector.tcc ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/vector.tcc ****  */
  50:/usr/include/c++/4.8/bits/vector.tcc **** 
  51:/usr/include/c++/4.8/bits/vector.tcc **** /** @file bits/vector.tcc
  52:/usr/include/c++/4.8/bits/vector.tcc ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/vector.tcc ****  *  Do not attempt to use it directly. @headername{vector}
  54:/usr/include/c++/4.8/bits/vector.tcc ****  */
  55:/usr/include/c++/4.8/bits/vector.tcc **** 
  56:/usr/include/c++/4.8/bits/vector.tcc **** #ifndef _VECTOR_TCC
  57:/usr/include/c++/4.8/bits/vector.tcc **** #define _VECTOR_TCC 1
  58:/usr/include/c++/4.8/bits/vector.tcc **** 
  59:/usr/include/c++/4.8/bits/vector.tcc **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/4.8/bits/vector.tcc **** {
  61:/usr/include/c++/4.8/bits/vector.tcc **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  62:/usr/include/c++/4.8/bits/vector.tcc **** 
  63:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  64:/usr/include/c++/4.8/bits/vector.tcc ****     void
  65:/usr/include/c++/4.8/bits/vector.tcc ****     vector<_Tp, _Alloc>::
  66:/usr/include/c++/4.8/bits/vector.tcc ****     reserve(size_type __n)
  67:/usr/include/c++/4.8/bits/vector.tcc ****     {
  68:/usr/include/c++/4.8/bits/vector.tcc ****       if (__n > this->max_size())
  69:/usr/include/c++/4.8/bits/vector.tcc **** 	__throw_length_error(__N("vector::reserve"));
  70:/usr/include/c++/4.8/bits/vector.tcc ****       if (this->capacity() < __n)
  71:/usr/include/c++/4.8/bits/vector.tcc **** 	{
  72:/usr/include/c++/4.8/bits/vector.tcc **** 	  const size_type __old_size = size();
  73:/usr/include/c++/4.8/bits/vector.tcc **** 	  pointer __tmp = _M_allocate_and_copy(__n,
  74:/usr/include/c++/4.8/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_start),
  75:/usr/include/c++/4.8/bits/vector.tcc **** 	    _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(this->_M_impl._M_finish));
  76:/usr/include/c++/4.8/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
  77:/usr/include/c++/4.8/bits/vector.tcc **** 			_M_get_Tp_allocator());
  78:/usr/include/c++/4.8/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
  79:/usr/include/c++/4.8/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
  80:/usr/include/c++/4.8/bits/vector.tcc **** 			- this->_M_impl._M_start);
  81:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_start = __tmp;
  82:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_finish = __tmp + __old_size;
  83:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
  84:/usr/include/c++/4.8/bits/vector.tcc **** 	}
  85:/usr/include/c++/4.8/bits/vector.tcc ****     }
  86:/usr/include/c++/4.8/bits/vector.tcc **** 
  87:/usr/include/c++/4.8/bits/vector.tcc **** #if __cplusplus >= 201103L
  88:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
  89:/usr/include/c++/4.8/bits/vector.tcc ****     template<typename... _Args>
  90:/usr/include/c++/4.8/bits/vector.tcc ****       void
  91:/usr/include/c++/4.8/bits/vector.tcc ****       vector<_Tp, _Alloc>::
  92:/usr/include/c++/4.8/bits/vector.tcc ****       emplace_back(_Args&&... __args)
  93:/usr/include/c++/4.8/bits/vector.tcc ****       {
  94:/usr/include/c++/4.8/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
  95:/usr/include/c++/4.8/bits/vector.tcc **** 	  {
  96:/usr/include/c++/4.8/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
  97:/usr/include/c++/4.8/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
  98:/usr/include/c++/4.8/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
  99:/usr/include/c++/4.8/bits/vector.tcc **** 	  }
 100:/usr/include/c++/4.8/bits/vector.tcc **** 	else
 101:/usr/include/c++/4.8/bits/vector.tcc **** 	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
 102:/usr/include/c++/4.8/bits/vector.tcc ****       }
 103:/usr/include/c++/4.8/bits/vector.tcc **** #endif
 104:/usr/include/c++/4.8/bits/vector.tcc **** 
 105:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 106:/usr/include/c++/4.8/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 107:/usr/include/c++/4.8/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 108:/usr/include/c++/4.8/bits/vector.tcc ****     insert(iterator __position, const value_type& __x)
 109:/usr/include/c++/4.8/bits/vector.tcc ****     {
 110:/usr/include/c++/4.8/bits/vector.tcc ****       const size_type __n = __position - begin();
 111:/usr/include/c++/4.8/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 112:/usr/include/c++/4.8/bits/vector.tcc **** 	  && __position == end())
 113:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 114:/usr/include/c++/4.8/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish, __x);
 115:/usr/include/c++/4.8/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 116:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 117:/usr/include/c++/4.8/bits/vector.tcc ****       else
 118:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 119:/usr/include/c++/4.8/bits/vector.tcc **** #if __cplusplus >= 201103L
 120:/usr/include/c++/4.8/bits/vector.tcc **** 	  if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 121:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 122:/usr/include/c++/4.8/bits/vector.tcc **** 	      _Tp __x_copy = __x;
 123:/usr/include/c++/4.8/bits/vector.tcc **** 	      _M_insert_aux(__position, std::move(__x_copy));
 124:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 125:/usr/include/c++/4.8/bits/vector.tcc **** 	  else
 126:/usr/include/c++/4.8/bits/vector.tcc **** #endif
 127:/usr/include/c++/4.8/bits/vector.tcc **** 	    _M_insert_aux(__position, __x);
 128:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 129:/usr/include/c++/4.8/bits/vector.tcc ****       return iterator(this->_M_impl._M_start + __n);
 130:/usr/include/c++/4.8/bits/vector.tcc ****     }
 131:/usr/include/c++/4.8/bits/vector.tcc **** 
 132:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 133:/usr/include/c++/4.8/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 134:/usr/include/c++/4.8/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 135:/usr/include/c++/4.8/bits/vector.tcc ****     erase(iterator __position)
 136:/usr/include/c++/4.8/bits/vector.tcc ****     {
 137:/usr/include/c++/4.8/bits/vector.tcc ****       if (__position + 1 != end())
 138:/usr/include/c++/4.8/bits/vector.tcc **** 	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 139:/usr/include/c++/4.8/bits/vector.tcc ****       --this->_M_impl._M_finish;
 140:/usr/include/c++/4.8/bits/vector.tcc ****       _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 141:/usr/include/c++/4.8/bits/vector.tcc ****       return __position;
 142:/usr/include/c++/4.8/bits/vector.tcc ****     }
 143:/usr/include/c++/4.8/bits/vector.tcc **** 
 144:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 145:/usr/include/c++/4.8/bits/vector.tcc ****     typename vector<_Tp, _Alloc>::iterator
 146:/usr/include/c++/4.8/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 147:/usr/include/c++/4.8/bits/vector.tcc ****     erase(iterator __first, iterator __last)
 148:/usr/include/c++/4.8/bits/vector.tcc ****     {
 149:/usr/include/c++/4.8/bits/vector.tcc ****       if (__first != __last)
 150:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 151:/usr/include/c++/4.8/bits/vector.tcc **** 	  if (__last != end())
 152:/usr/include/c++/4.8/bits/vector.tcc **** 	    _GLIBCXX_MOVE3(__last, end(), __first);
 153:/usr/include/c++/4.8/bits/vector.tcc **** 	  _M_erase_at_end(__first.base() + (end() - __last));
 154:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 155:/usr/include/c++/4.8/bits/vector.tcc ****       return __first;
 156:/usr/include/c++/4.8/bits/vector.tcc ****     }
 157:/usr/include/c++/4.8/bits/vector.tcc **** 
 158:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 159:/usr/include/c++/4.8/bits/vector.tcc ****     vector<_Tp, _Alloc>&
 160:/usr/include/c++/4.8/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 161:/usr/include/c++/4.8/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 162:/usr/include/c++/4.8/bits/vector.tcc ****     {
 163:/usr/include/c++/4.8/bits/vector.tcc ****       if (&__x != this)
 164:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 165:/usr/include/c++/4.8/bits/vector.tcc **** #if __cplusplus >= 201103L
 166:/usr/include/c++/4.8/bits/vector.tcc **** 	  if (_Alloc_traits::_S_propagate_on_copy_assign())
 167:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 168:/usr/include/c++/4.8/bits/vector.tcc **** 	      if (!_Alloc_traits::_S_always_equal()
 169:/usr/include/c++/4.8/bits/vector.tcc **** 	          && _M_get_Tp_allocator() != __x._M_get_Tp_allocator())
 170:/usr/include/c++/4.8/bits/vector.tcc **** 	        {
 171:/usr/include/c++/4.8/bits/vector.tcc **** 		  // replacement allocator cannot free existing storage
 172:/usr/include/c++/4.8/bits/vector.tcc **** 		  this->clear();
 173:/usr/include/c++/4.8/bits/vector.tcc **** 		  _M_deallocate(this->_M_impl._M_start,
 174:/usr/include/c++/4.8/bits/vector.tcc **** 				this->_M_impl._M_end_of_storage
 175:/usr/include/c++/4.8/bits/vector.tcc **** 				- this->_M_impl._M_start);
 176:/usr/include/c++/4.8/bits/vector.tcc **** 		  this->_M_impl._M_start = nullptr;
 177:/usr/include/c++/4.8/bits/vector.tcc **** 		  this->_M_impl._M_finish = nullptr;
 178:/usr/include/c++/4.8/bits/vector.tcc **** 		  this->_M_impl._M_end_of_storage = nullptr;
 179:/usr/include/c++/4.8/bits/vector.tcc **** 		}
 180:/usr/include/c++/4.8/bits/vector.tcc **** 	      std::__alloc_on_copy(_M_get_Tp_allocator(),
 181:/usr/include/c++/4.8/bits/vector.tcc **** 				   __x._M_get_Tp_allocator());
 182:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 183:/usr/include/c++/4.8/bits/vector.tcc **** #endif
 184:/usr/include/c++/4.8/bits/vector.tcc **** 	  const size_type __xlen = __x.size();
 185:/usr/include/c++/4.8/bits/vector.tcc **** 	  if (__xlen > capacity())
 186:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 187:/usr/include/c++/4.8/bits/vector.tcc **** 	      pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
 188:/usr/include/c++/4.8/bits/vector.tcc **** 						   __x.end());
 189:/usr/include/c++/4.8/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 190:/usr/include/c++/4.8/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 191:/usr/include/c++/4.8/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 192:/usr/include/c++/4.8/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 193:/usr/include/c++/4.8/bits/vector.tcc **** 			    - this->_M_impl._M_start);
 194:/usr/include/c++/4.8/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 195:/usr/include/c++/4.8/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 196:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 197:/usr/include/c++/4.8/bits/vector.tcc **** 	  else if (size() >= __xlen)
 198:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 199:/usr/include/c++/4.8/bits/vector.tcc **** 	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 200:/usr/include/c++/4.8/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 201:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 202:/usr/include/c++/4.8/bits/vector.tcc **** 	  else
 203:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 204:/usr/include/c++/4.8/bits/vector.tcc **** 	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 205:/usr/include/c++/4.8/bits/vector.tcc **** 			this->_M_impl._M_start);
 206:/usr/include/c++/4.8/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 207:/usr/include/c++/4.8/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 208:/usr/include/c++/4.8/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 209:/usr/include/c++/4.8/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 210:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 211:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 212:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 213:/usr/include/c++/4.8/bits/vector.tcc ****       return *this;
 214:/usr/include/c++/4.8/bits/vector.tcc ****     }
 215:/usr/include/c++/4.8/bits/vector.tcc **** 
 216:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 217:/usr/include/c++/4.8/bits/vector.tcc ****     void
 218:/usr/include/c++/4.8/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 219:/usr/include/c++/4.8/bits/vector.tcc ****     _M_fill_assign(size_t __n, const value_type& __val)
 220:/usr/include/c++/4.8/bits/vector.tcc ****     {
 221:/usr/include/c++/4.8/bits/vector.tcc ****       if (__n > capacity())
 222:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 223:/usr/include/c++/4.8/bits/vector.tcc **** 	  vector __tmp(__n, __val, _M_get_Tp_allocator());
 224:/usr/include/c++/4.8/bits/vector.tcc **** 	  __tmp.swap(*this);
 225:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 226:/usr/include/c++/4.8/bits/vector.tcc ****       else if (__n > size())
 227:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 228:/usr/include/c++/4.8/bits/vector.tcc **** 	  std::fill(begin(), end(), __val);
 229:/usr/include/c++/4.8/bits/vector.tcc **** 	  std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 230:/usr/include/c++/4.8/bits/vector.tcc **** 					__n - size(), __val,
 231:/usr/include/c++/4.8/bits/vector.tcc **** 					_M_get_Tp_allocator());
 232:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_finish += __n - size();
 233:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 234:/usr/include/c++/4.8/bits/vector.tcc ****       else
 235:/usr/include/c++/4.8/bits/vector.tcc ****         _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
 236:/usr/include/c++/4.8/bits/vector.tcc ****     }
 237:/usr/include/c++/4.8/bits/vector.tcc **** 
 238:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 239:/usr/include/c++/4.8/bits/vector.tcc ****     template<typename _InputIterator>
 240:/usr/include/c++/4.8/bits/vector.tcc ****       void
 241:/usr/include/c++/4.8/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 242:/usr/include/c++/4.8/bits/vector.tcc ****       _M_assign_aux(_InputIterator __first, _InputIterator __last,
 243:/usr/include/c++/4.8/bits/vector.tcc **** 		    std::input_iterator_tag)
 244:/usr/include/c++/4.8/bits/vector.tcc ****       {
 245:/usr/include/c++/4.8/bits/vector.tcc **** 	pointer __cur(this->_M_impl._M_start);
 246:/usr/include/c++/4.8/bits/vector.tcc **** 	for (; __first != __last && __cur != this->_M_impl._M_finish;
 247:/usr/include/c++/4.8/bits/vector.tcc **** 	     ++__cur, ++__first)
 248:/usr/include/c++/4.8/bits/vector.tcc **** 	  *__cur = *__first;
 249:/usr/include/c++/4.8/bits/vector.tcc **** 	if (__first == __last)
 250:/usr/include/c++/4.8/bits/vector.tcc **** 	  _M_erase_at_end(__cur);
 251:/usr/include/c++/4.8/bits/vector.tcc **** 	else
 252:/usr/include/c++/4.8/bits/vector.tcc **** 	  insert(end(), __first, __last);
 253:/usr/include/c++/4.8/bits/vector.tcc ****       }
 254:/usr/include/c++/4.8/bits/vector.tcc **** 
 255:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 256:/usr/include/c++/4.8/bits/vector.tcc ****     template<typename _ForwardIterator>
 257:/usr/include/c++/4.8/bits/vector.tcc ****       void
 258:/usr/include/c++/4.8/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 259:/usr/include/c++/4.8/bits/vector.tcc ****       _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
 260:/usr/include/c++/4.8/bits/vector.tcc **** 		    std::forward_iterator_tag)
 261:/usr/include/c++/4.8/bits/vector.tcc ****       {
 262:/usr/include/c++/4.8/bits/vector.tcc **** 	const size_type __len = std::distance(__first, __last);
 263:/usr/include/c++/4.8/bits/vector.tcc **** 
 264:/usr/include/c++/4.8/bits/vector.tcc **** 	if (__len > capacity())
 265:/usr/include/c++/4.8/bits/vector.tcc **** 	  {
 266:/usr/include/c++/4.8/bits/vector.tcc **** 	    pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
 267:/usr/include/c++/4.8/bits/vector.tcc **** 	    std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 268:/usr/include/c++/4.8/bits/vector.tcc **** 			  _M_get_Tp_allocator());
 269:/usr/include/c++/4.8/bits/vector.tcc **** 	    _M_deallocate(this->_M_impl._M_start,
 270:/usr/include/c++/4.8/bits/vector.tcc **** 			  this->_M_impl._M_end_of_storage
 271:/usr/include/c++/4.8/bits/vector.tcc **** 			  - this->_M_impl._M_start);
 272:/usr/include/c++/4.8/bits/vector.tcc **** 	    this->_M_impl._M_start = __tmp;
 273:/usr/include/c++/4.8/bits/vector.tcc **** 	    this->_M_impl._M_finish = this->_M_impl._M_start + __len;
 274:/usr/include/c++/4.8/bits/vector.tcc **** 	    this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
 275:/usr/include/c++/4.8/bits/vector.tcc **** 	  }
 276:/usr/include/c++/4.8/bits/vector.tcc **** 	else if (size() >= __len)
 277:/usr/include/c++/4.8/bits/vector.tcc **** 	  _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 278:/usr/include/c++/4.8/bits/vector.tcc **** 	else
 279:/usr/include/c++/4.8/bits/vector.tcc **** 	  {
 280:/usr/include/c++/4.8/bits/vector.tcc **** 	    _ForwardIterator __mid = __first;
 281:/usr/include/c++/4.8/bits/vector.tcc **** 	    std::advance(__mid, size());
 282:/usr/include/c++/4.8/bits/vector.tcc **** 	    std::copy(__first, __mid, this->_M_impl._M_start);
 283:/usr/include/c++/4.8/bits/vector.tcc **** 	    this->_M_impl._M_finish =
 284:/usr/include/c++/4.8/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__mid, __last,
 285:/usr/include/c++/4.8/bits/vector.tcc **** 					  this->_M_impl._M_finish,
 286:/usr/include/c++/4.8/bits/vector.tcc **** 					  _M_get_Tp_allocator());
 287:/usr/include/c++/4.8/bits/vector.tcc **** 	  }
 288:/usr/include/c++/4.8/bits/vector.tcc ****       }
 289:/usr/include/c++/4.8/bits/vector.tcc **** 
 290:/usr/include/c++/4.8/bits/vector.tcc **** #if __cplusplus >= 201103L
 291:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 292:/usr/include/c++/4.8/bits/vector.tcc ****     template<typename... _Args>
 293:/usr/include/c++/4.8/bits/vector.tcc ****       typename vector<_Tp, _Alloc>::iterator
 294:/usr/include/c++/4.8/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 295:/usr/include/c++/4.8/bits/vector.tcc ****       emplace(iterator __position, _Args&&... __args)
 296:/usr/include/c++/4.8/bits/vector.tcc ****       {
 297:/usr/include/c++/4.8/bits/vector.tcc **** 	const size_type __n = __position - begin();
 298:/usr/include/c++/4.8/bits/vector.tcc **** 	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
 299:/usr/include/c++/4.8/bits/vector.tcc **** 	    && __position == end())
 300:/usr/include/c++/4.8/bits/vector.tcc **** 	  {
 301:/usr/include/c++/4.8/bits/vector.tcc **** 	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 302:/usr/include/c++/4.8/bits/vector.tcc **** 				     std::forward<_Args>(__args)...);
 303:/usr/include/c++/4.8/bits/vector.tcc **** 	    ++this->_M_impl._M_finish;
 304:/usr/include/c++/4.8/bits/vector.tcc **** 	  }
 305:/usr/include/c++/4.8/bits/vector.tcc **** 	else
 306:/usr/include/c++/4.8/bits/vector.tcc **** 	  _M_insert_aux(__position, std::forward<_Args>(__args)...);
 307:/usr/include/c++/4.8/bits/vector.tcc **** 	return iterator(this->_M_impl._M_start + __n);
 308:/usr/include/c++/4.8/bits/vector.tcc ****       }
 309:/usr/include/c++/4.8/bits/vector.tcc **** 
 310:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 311:/usr/include/c++/4.8/bits/vector.tcc ****     template<typename... _Args>
 312:/usr/include/c++/4.8/bits/vector.tcc ****       void
 313:/usr/include/c++/4.8/bits/vector.tcc ****       vector<_Tp, _Alloc>::
 314:/usr/include/c++/4.8/bits/vector.tcc ****       _M_insert_aux(iterator __position, _Args&&... __args)
 315:/usr/include/c++/4.8/bits/vector.tcc **** #else
 316:/usr/include/c++/4.8/bits/vector.tcc ****   template<typename _Tp, typename _Alloc>
 317:/usr/include/c++/4.8/bits/vector.tcc ****     void
 318:/usr/include/c++/4.8/bits/vector.tcc ****     vector<_Tp, _Alloc>::
 1190              		.loc 8 318 0
 1191              		.cfi_startproc
 1192              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1193              		.cfi_lsda 0x1b,.LLSDA864
 1194 0000 55       		pushq	%rbp
 1195              		.cfi_def_cfa_offset 16
 1196              		.cfi_offset 6, -16
 1197 0001 4889E5   		movq	%rsp, %rbp
 1198              		.cfi_def_cfa_register 6
 1199 0004 4154     		pushq	%r12
 1200 0006 53       		pushq	%rbx
 1201 0007 4883C480 		addq	$-128, %rsp
 1202              		.cfi_offset 12, -24
 1203              		.cfi_offset 3, -32
 1204 000b 48897D88 		movq	%rdi, -120(%rbp)
 1205 000f 48897580 		movq	%rsi, -128(%rbp)
 1206 0013 48899578 		movq	%rdx, -136(%rbp)
 1206      FFFFFF
 1207              	.LBB11:
 1208              	.LBB12:
 319:/usr/include/c++/4.8/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 320:/usr/include/c++/4.8/bits/vector.tcc **** #endif
 321:/usr/include/c++/4.8/bits/vector.tcc ****     {
 322:/usr/include/c++/4.8/bits/vector.tcc ****       if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 1209              		.loc 8 322 0
 1210 001a 488B4588 		movq	-120(%rbp), %rax
 1211 001e 488B5008 		movq	8(%rax), %rdx
 1212 0022 488B4588 		movq	-120(%rbp), %rax
 1213 0026 488B4010 		movq	16(%rax), %rax
 1214 002a 4839C2   		cmpq	%rax, %rdx
 1215 002d 0F84AE00 		je	.L66
 1215      0000
 1216              	.LBB13:
 323:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 324:/usr/include/c++/4.8/bits/vector.tcc **** 	  _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 325:/usr/include/c++/4.8/bits/vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 326:/usr/include/c++/4.8/bits/vector.tcc **** 				                   - 1)));
 1217              		.loc 8 326 0
 1218 0033 488B4588 		movq	-120(%rbp), %rax
 1219 0037 488B4008 		movq	8(%rax), %rax
 1220 003b 488D50C8 		leaq	-56(%rax), %rdx
 1221 003f 488B4588 		movq	-120(%rbp), %rax
 1222 0043 488B4808 		movq	8(%rax), %rcx
 1223 0047 488B4588 		movq	-120(%rbp), %rax
 324:/usr/include/c++/4.8/bits/vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 1224              		.loc 8 324 0
 1225 004b 4889CE   		movq	%rcx, %rsi
 1226 004e 4889C7   		movq	%rax, %rdi
 1227              	.LEHB27:
 1228 0051 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RK
 1228      00
 327:/usr/include/c++/4.8/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 1229              		.loc 8 327 0
 1230 0056 488B4588 		movq	-120(%rbp), %rax
 1231 005a 488B4008 		movq	8(%rax), %rax
 1232 005e 488D5038 		leaq	56(%rax), %rdx
 1233 0062 488B4588 		movq	-120(%rbp), %rax
 1234 0066 48895008 		movq	%rdx, 8(%rax)
 328:/usr/include/c++/4.8/bits/vector.tcc **** #if __cplusplus < 201103L
 329:/usr/include/c++/4.8/bits/vector.tcc **** 	  _Tp __x_copy = __x;
 1235              		.loc 8 329 0
 1236 006a 488B9578 		movq	-136(%rbp), %rdx
 1236      FFFFFF
 1237 0071 488D45B0 		leaq	-80(%rbp), %rax
 1238 0075 4889D6   		movq	%rdx, %rsi
 1239 0078 4889C7   		movq	%rax, %rdi
 1240 007b E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 1240      00
 1241              	.LEHE27:
 330:/usr/include/c++/4.8/bits/vector.tcc **** #endif
 331:/usr/include/c++/4.8/bits/vector.tcc **** 	  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 1242              		.loc 8 331 0
 1243 0080 488B4588 		movq	-120(%rbp), %rax
 1244 0084 488B4008 		movq	8(%rax), %rax
 1245 0088 4C8D60C8 		leaq	-56(%rax), %r12
 1246 008c 488B4588 		movq	-120(%rbp), %rax
 1247 0090 488B4008 		movq	8(%rax), %rax
 1248 0094 488D5890 		leaq	-112(%rax), %rbx
 1249 0098 488D4580 		leaq	-128(%rbp), %rax
 1250 009c 4889C7   		movq	%rax, %rdi
 1251              	.LEHB28:
 1252 009f E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1252      00
 1253 00a4 488B00   		movq	(%rax), %rax
 1254 00a7 4C89E2   		movq	%r12, %rdx
 1255 00aa 4889DE   		movq	%rbx, %rsi
 1256 00ad 4889C7   		movq	%rax, %rdi
 1257 00b0 E8000000 		call	_ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_@PLT
 1257      00
 332:/usr/include/c++/4.8/bits/vector.tcc **** 				  this->_M_impl._M_finish - 2,
 333:/usr/include/c++/4.8/bits/vector.tcc **** 				  this->_M_impl._M_finish - 1);
 334:/usr/include/c++/4.8/bits/vector.tcc **** #if __cplusplus < 201103L
 335:/usr/include/c++/4.8/bits/vector.tcc **** 	  *__position = __x_copy;
 1258              		.loc 8 335 0
 1259 00b5 488D4580 		leaq	-128(%rbp), %rax
 1260 00b9 4889C7   		movq	%rax, %rdi
 1261 00bc E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv@
 1261      00
 1262 00c1 488D55B0 		leaq	-80(%rbp), %rdx
 1263 00c5 4889D6   		movq	%rdx, %rsi
 1264 00c8 4889C7   		movq	%rax, %rdi
 1265 00cb E8000000 		call	_ZN8UnitTest18DeferredTestResultaSERKS0_@PLT
 1265      00
 1266              	.LEHE28:
 1267              		.loc 8 335 0 is_stmt 0 discriminator 2
 1268 00d0 488D45B0 		leaq	-80(%rbp), %rax
 1269 00d4 4889C7   		movq	%rax, %rdi
 1270              	.LEHB29:
 1271 00d7 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 1271      00
 1272              	.LBE13:
 1273 00dc E9660200 		jmp	.L65
 1273      00
 1274              	.L66:
 1275              	.LBB14:
 336:/usr/include/c++/4.8/bits/vector.tcc **** #else
 337:/usr/include/c++/4.8/bits/vector.tcc **** 	  *__position = _Tp(std::forward<_Args>(__args)...);
 338:/usr/include/c++/4.8/bits/vector.tcc **** #endif
 339:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 340:/usr/include/c++/4.8/bits/vector.tcc ****       else
 341:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 342:/usr/include/c++/4.8/bits/vector.tcc **** 	  const size_type __len =
 343:/usr/include/c++/4.8/bits/vector.tcc **** 	    _M_check_len(size_type(1), "vector::_M_insert_aux");
 1276              		.loc 8 343 0 is_stmt 1
 1277 00e1 488B4588 		movq	-120(%rbp), %rax
 1278 00e5 488D1500 		leaq	.LC0(%rip), %rdx
 1278      000000
 1279 00ec BE010000 		movl	$1, %esi
 1279      00
 1280 00f1 4889C7   		movq	%rax, %rdi
 1281 00f4 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc@PLT
 1281      00
 1282 00f9 48894598 		movq	%rax, -104(%rbp)
 344:/usr/include/c++/4.8/bits/vector.tcc **** 	  const size_type __elems_before = __position - begin();
 1283              		.loc 8 344 0
 1284 00fd 488B4588 		movq	-120(%rbp), %rax
 1285 0101 4889C7   		movq	%rax, %rdi
 1286 0104 E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv@PLT
 1286      00
 1287 0109 488945B0 		movq	%rax, -80(%rbp)
 1288 010d 488D55B0 		leaq	-80(%rbp), %rdx
 1289 0111 488D4580 		leaq	-128(%rbp), %rax
 1290 0115 4889D6   		movq	%rdx, %rsi
 1291 0118 4889C7   		movq	%rax, %rdi
 1292 011b E8000000 		call	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iterator
 1292      00
 1293 0120 488945A0 		movq	%rax, -96(%rbp)
 345:/usr/include/c++/4.8/bits/vector.tcc **** 	  pointer __new_start(this->_M_allocate(__len));
 1294              		.loc 8 345 0
 1295 0124 488B4588 		movq	-120(%rbp), %rax
 1296 0128 488B5598 		movq	-104(%rbp), %rdx
 1297 012c 4889D6   		movq	%rdx, %rsi
 1298 012f 4889C7   		movq	%rax, %rdi
 1299 0132 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm@PLT
 1299      00
 1300              	.LEHE29:
 1301 0137 488945A8 		movq	%rax, -88(%rbp)
 346:/usr/include/c++/4.8/bits/vector.tcc **** 	  pointer __new_finish(__new_start);
 1302              		.loc 8 346 0
 1303 013b 488B45A8 		movq	-88(%rbp), %rax
 1304 013f 48894590 		movq	%rax, -112(%rbp)
 347:/usr/include/c++/4.8/bits/vector.tcc **** 	  __try
 348:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 349:/usr/include/c++/4.8/bits/vector.tcc **** 	      // The order of the three operations is dictated by the C++0x
 350:/usr/include/c++/4.8/bits/vector.tcc **** 	      // case, where the moves could alter a new element belonging
 351:/usr/include/c++/4.8/bits/vector.tcc **** 	      // to the existing vector.  This is an issue only for callers
 352:/usr/include/c++/4.8/bits/vector.tcc **** 	      // taking the element by const lvalue ref (see 23.1/13).
 353:/usr/include/c++/4.8/bits/vector.tcc **** 	      _Alloc_traits::construct(this->_M_impl,
 354:/usr/include/c++/4.8/bits/vector.tcc **** 		                       __new_start + __elems_before,
 355:/usr/include/c++/4.8/bits/vector.tcc **** #if __cplusplus >= 201103L
 356:/usr/include/c++/4.8/bits/vector.tcc **** 				       std::forward<_Args>(__args)...);
 357:/usr/include/c++/4.8/bits/vector.tcc **** #else
 358:/usr/include/c++/4.8/bits/vector.tcc **** 	                               __x);
 1305              		.loc 8 358 0
 1306 0143 488B45A0 		movq	-96(%rbp), %rax
 1307 0147 48C1E003 		salq	$3, %rax
 1308 014b 488D14C5 		leaq	0(,%rax,8), %rdx
 1308      00000000 
 1309 0153 4829C2   		subq	%rax, %rdx
 1310 0156 488B45A8 		movq	-88(%rbp), %rax
 1311 015a 488D0C02 		leaq	(%rdx,%rax), %rcx
 1312 015e 488B4588 		movq	-120(%rbp), %rax
 353:/usr/include/c++/4.8/bits/vector.tcc **** 		                       __new_start + __elems_before,
 1313              		.loc 8 353 0
 1314 0162 488B9578 		movq	-136(%rbp), %rdx
 1314      FFFFFF
 1315 0169 4889CE   		movq	%rcx, %rsi
 1316 016c 4889C7   		movq	%rax, %rdi
 1317              	.LEHB30:
 1318 016f E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RK
 1318      00
 359:/usr/include/c++/4.8/bits/vector.tcc **** #endif
 360:/usr/include/c++/4.8/bits/vector.tcc **** 	      __new_finish = 0;
 1319              		.loc 8 360 0
 1320 0174 48C74590 		movq	$0, -112(%rbp)
 1320      00000000 
 361:/usr/include/c++/4.8/bits/vector.tcc **** 
 362:/usr/include/c++/4.8/bits/vector.tcc **** 	      __new_finish
 363:/usr/include/c++/4.8/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 364:/usr/include/c++/4.8/bits/vector.tcc **** 		(this->_M_impl._M_start, __position.base(),
 365:/usr/include/c++/4.8/bits/vector.tcc **** 		 __new_start, _M_get_Tp_allocator());
 1321              		.loc 8 365 0
 1322 017c 488B4588 		movq	-120(%rbp), %rax
 1323 0180 4889C7   		movq	%rax, %rdi
 1324 0183 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1324      00
 1325 0188 4889C3   		movq	%rax, %rbx
 1326 018b 488D4580 		leaq	-128(%rbp), %rax
 1327 018f 4889C7   		movq	%rax, %rdi
 1328 0192 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1328      00
 1329              		.loc 8 365 0 is_stmt 0 discriminator 1
 1330 0197 488B30   		movq	(%rax), %rsi
 1331 019a 488B4588 		movq	-120(%rbp), %rax
 1332 019e 488B00   		movq	(%rax), %rax
 362:/usr/include/c++/4.8/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1333              		.loc 8 362 0 is_stmt 1 discriminator 1
 1334 01a1 488B55A8 		movq	-88(%rbp), %rdx
 1335 01a5 4889D9   		movq	%rbx, %rcx
 1336 01a8 4889C7   		movq	%rax, %rdi
 1337 01ab E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S
 1337      00
 1338 01b0 48894590 		movq	%rax, -112(%rbp)
 366:/usr/include/c++/4.8/bits/vector.tcc **** 
 367:/usr/include/c++/4.8/bits/vector.tcc **** 	      ++__new_finish;
 1339              		.loc 8 367 0 discriminator 1
 1340 01b4 48834590 		addq	$56, -112(%rbp)
 1340      38
 368:/usr/include/c++/4.8/bits/vector.tcc **** 
 369:/usr/include/c++/4.8/bits/vector.tcc **** 	      __new_finish
 370:/usr/include/c++/4.8/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 371:/usr/include/c++/4.8/bits/vector.tcc **** 		(__position.base(), this->_M_impl._M_finish,
 372:/usr/include/c++/4.8/bits/vector.tcc **** 		 __new_finish, _M_get_Tp_allocator());
 1341              		.loc 8 372 0 discriminator 1
 1342 01b9 488B4588 		movq	-120(%rbp), %rax
 1343 01bd 4889C7   		movq	%rax, %rdi
 1344 01c0 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1344      00
 1345 01c5 4989C4   		movq	%rax, %r12
 1346 01c8 488B4588 		movq	-120(%rbp), %rax
 1347 01cc 488B5808 		movq	8(%rax), %rbx
 1348 01d0 488D4580 		leaq	-128(%rbp), %rax
 1349 01d4 4889C7   		movq	%rax, %rdi
 1350 01d7 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 1350      00
 1351 01dc 488B00   		movq	(%rax), %rax
 369:/usr/include/c++/4.8/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1352              		.loc 8 369 0 discriminator 1
 1353 01df 488B5590 		movq	-112(%rbp), %rdx
 1354 01e3 4C89E1   		movq	%r12, %rcx
 1355 01e6 4889DE   		movq	%rbx, %rsi
 1356 01e9 4889C7   		movq	%rax, %rdi
 1357 01ec E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S
 1357      00
 1358              	.LEHE30:
 1359 01f1 48894590 		movq	%rax, -112(%rbp)
 373:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 374:/usr/include/c++/4.8/bits/vector.tcc ****           __catch(...)
 375:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 376:/usr/include/c++/4.8/bits/vector.tcc **** 	      if (!__new_finish)
 377:/usr/include/c++/4.8/bits/vector.tcc **** 		_Alloc_traits::destroy(this->_M_impl,
 378:/usr/include/c++/4.8/bits/vector.tcc **** 		                       __new_start + __elems_before);
 379:/usr/include/c++/4.8/bits/vector.tcc **** 	      else
 380:/usr/include/c++/4.8/bits/vector.tcc **** 		std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
 381:/usr/include/c++/4.8/bits/vector.tcc **** 	      _M_deallocate(__new_start, __len);
 382:/usr/include/c++/4.8/bits/vector.tcc **** 	      __throw_exception_again;
 383:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 384:/usr/include/c++/4.8/bits/vector.tcc **** 	  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 385:/usr/include/c++/4.8/bits/vector.tcc **** 			_M_get_Tp_allocator());
 1360              		.loc 8 385 0 discriminator 1
 1361 01f5 488B4588 		movq	-120(%rbp), %rax
 1362 01f9 4889C7   		movq	%rax, %rdi
 1363              	.LEHB31:
 1364 01fc E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1364      00
 1365 0201 4889C2   		movq	%rax, %rdx
 1366 0204 488B4588 		movq	-120(%rbp), %rax
 1367 0208 488B4808 		movq	8(%rax), %rcx
 1368 020c 488B4588 		movq	-120(%rbp), %rax
 1369 0210 488B00   		movq	(%rax), %rax
 384:/usr/include/c++/4.8/bits/vector.tcc **** 			_M_get_Tp_allocator());
 1370              		.loc 8 384 0 discriminator 1
 1371 0213 4889CE   		movq	%rcx, %rsi
 1372 0216 4889C7   		movq	%rax, %rdi
 1373 0219 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1373      00
 386:/usr/include/c++/4.8/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 387:/usr/include/c++/4.8/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
 388:/usr/include/c++/4.8/bits/vector.tcc **** 			- this->_M_impl._M_start);
 1374              		.loc 8 388 0 discriminator 1
 1375 021e 488B4588 		movq	-120(%rbp), %rax
 1376 0222 488B4010 		movq	16(%rax), %rax
 1377 0226 4889C2   		movq	%rax, %rdx
 1378 0229 488B4588 		movq	-120(%rbp), %rax
 1379 022d 488B00   		movq	(%rax), %rax
 1380 0230 4829C2   		subq	%rax, %rdx
 1381 0233 4889D0   		movq	%rdx, %rax
 1382 0236 48C1F803 		sarq	$3, %rax
 1383 023a 4889C2   		movq	%rax, %rdx
 1384 023d 48B8B76D 		movabsq	$7905747460161236407, %rax
 1384      DBB66DDB 
 1384      B66D
 1385 0247 480FAFC2 		imulq	%rdx, %rax
 1386 024b 4889C2   		movq	%rax, %rdx
 1387 024e 488B4588 		movq	-120(%rbp), %rax
 1388 0252 488B08   		movq	(%rax), %rcx
 1389 0255 488B4588 		movq	-120(%rbp), %rax
 386:/usr/include/c++/4.8/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 1390              		.loc 8 386 0 discriminator 1
 1391 0259 4889CE   		movq	%rcx, %rsi
 1392 025c 4889C7   		movq	%rax, %rdi
 1393 025f E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 1393      00
 1394              	.LEHE31:
 389:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_start = __new_start;
 1395              		.loc 8 389 0 discriminator 1
 1396 0264 488B4588 		movq	-120(%rbp), %rax
 1397 0268 488B55A8 		movq	-88(%rbp), %rdx
 1398 026c 488910   		movq	%rdx, (%rax)
 390:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_finish = __new_finish;
 1399              		.loc 8 390 0 discriminator 1
 1400 026f 488B4588 		movq	-120(%rbp), %rax
 1401 0273 488B5590 		movq	-112(%rbp), %rdx
 1402 0277 48895008 		movq	%rdx, 8(%rax)
 391:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = __new_start + __len;
 1403              		.loc 8 391 0 discriminator 1
 1404 027b 488B4598 		movq	-104(%rbp), %rax
 1405 027f 48C1E003 		salq	$3, %rax
 1406 0283 488D14C5 		leaq	0(,%rax,8), %rdx
 1406      00000000 
 1407 028b 4829C2   		subq	%rax, %rdx
 1408 028e 488B45A8 		movq	-88(%rbp), %rax
 1409 0292 4801C2   		addq	%rax, %rdx
 1410 0295 488B4588 		movq	-120(%rbp), %rax
 1411 0299 48895010 		movq	%rdx, 16(%rax)
 1412              	.LBE14:
 1413              	.LBE12:
 1414              	.LBE11:
 392:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 393:/usr/include/c++/4.8/bits/vector.tcc ****     }
 1415              		.loc 8 393 0 discriminator 1
 1416 029d E9A50000 		jmp	.L65
 1416      00
 1417              	.L73:
 1418 02a2 4889C3   		movq	%rax, %rbx
 1419              	.LBB18:
 1420              	.LBB17:
 1421              	.LBB15:
 335:/usr/include/c++/4.8/bits/vector.tcc **** #else
 1422              		.loc 8 335 0
 1423 02a5 488D45B0 		leaq	-80(%rbp), %rax
 1424 02a9 4889C7   		movq	%rax, %rdi
 1425 02ac E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 1425      00
 1426 02b1 4889D8   		movq	%rbx, %rax
 1427 02b4 4889C7   		movq	%rax, %rdi
 1428              	.LEHB32:
 1429 02b7 E8000000 		call	_Unwind_Resume@PLT
 1429      00
 1430              	.LEHE32:
 1431              	.L75:
 1432 02bc 4889C3   		movq	%rax, %rbx
 1433              	.LBE15:
 1434              	.LBB16:
 374:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 1435              		.loc 8 374 0
 1436 02bf E8000000 		call	__cxa_end_catch@PLT
 1436      00
 1437 02c4 4889D8   		movq	%rbx, %rax
 1438 02c7 4889C7   		movq	%rax, %rdi
 1439              	.LEHB33:
 1440 02ca E8000000 		call	_Unwind_Resume@PLT
 1440      00
 1441              	.LEHE33:
 1442              	.L74:
 1443 02cf 4889C7   		movq	%rax, %rdi
 1444 02d2 E8000000 		call	__cxa_begin_catch@PLT
 1444      00
 376:/usr/include/c++/4.8/bits/vector.tcc **** 		_Alloc_traits::destroy(this->_M_impl,
 1445              		.loc 8 376 0
 1446 02d7 48837D90 		cmpq	$0, -112(%rbp)
 1446      00
 1447 02dc 752B     		jne	.L71
 378:/usr/include/c++/4.8/bits/vector.tcc **** 	      else
 1448              		.loc 8 378 0
 1449 02de 488B45A0 		movq	-96(%rbp), %rax
 1450 02e2 48C1E003 		salq	$3, %rax
 1451 02e6 488D14C5 		leaq	0(,%rax,8), %rdx
 1451      00000000 
 1452 02ee 4829C2   		subq	%rax, %rdx
 1453 02f1 488B45A8 		movq	-88(%rbp), %rax
 1454 02f5 4801C2   		addq	%rax, %rdx
 1455 02f8 488B4588 		movq	-120(%rbp), %rax
 377:/usr/include/c++/4.8/bits/vector.tcc **** 		                       __new_start + __elems_before);
 1456              		.loc 8 377 0
 1457 02fc 4889D6   		movq	%rdx, %rsi
 1458 02ff 4889C7   		movq	%rax, %rdi
 1459              	.LEHB34:
 1460 0302 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_@PLT
 1460      00
 1461 0307 EB22     		jmp	.L72
 1462              	.L71:
 380:/usr/include/c++/4.8/bits/vector.tcc **** 	      _M_deallocate(__new_start, __len);
 1463              		.loc 8 380 0
 1464 0309 488B4588 		movq	-120(%rbp), %rax
 1465 030d 4889C7   		movq	%rax, %rdi
 1466 0310 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1466      00
 1467 0315 4889C2   		movq	%rax, %rdx
 1468 0318 488B4D90 		movq	-112(%rbp), %rcx
 1469 031c 488B45A8 		movq	-88(%rbp), %rax
 1470 0320 4889CE   		movq	%rcx, %rsi
 1471 0323 4889C7   		movq	%rax, %rdi
 1472 0326 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 1472      00
 1473              	.L72:
 381:/usr/include/c++/4.8/bits/vector.tcc **** 	      __throw_exception_again;
 1474              		.loc 8 381 0
 1475 032b 488B4588 		movq	-120(%rbp), %rax
 1476 032f 488B5598 		movq	-104(%rbp), %rdx
 1477 0333 488B4DA8 		movq	-88(%rbp), %rcx
 1478 0337 4889CE   		movq	%rcx, %rsi
 1479 033a 4889C7   		movq	%rax, %rdi
 1480 033d E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 1480      00
 382:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 1481              		.loc 8 382 0
 1482 0342 E8000000 		call	__cxa_rethrow@PLT
 1482      00
 1483              	.LEHE34:
 1484              	.L65:
 1485              	.LBE16:
 1486              	.LBE17:
 1487              	.LBE18:
 1488              		.loc 8 393 0
 1489 0347 4883EC80 		subq	$-128, %rsp
 1490 034b 5B       		popq	%rbx
 1491 034c 415C     		popq	%r12
 1492 034e 5D       		popq	%rbp
 1493              		.cfi_def_cfa 7, 8
 1494 034f C3       		ret
 1495              		.cfi_endproc
 1496              	.LFE864:
 1497              		.section	.gcc_except_table
 1498 007a 0000     		.align 4
 1499              	.LLSDA864:
 1500 007c FF       		.byte	0xff
 1501 007d 9B       		.byte	0x9b
 1502 007e 35       		.uleb128 .LLSDATT864-.LLSDATTD864
 1503              	.LLSDATTD864:
 1504 007f 01       		.byte	0x1
 1505 0080 2B       		.uleb128 .LLSDACSE864-.LLSDACSB864
 1506              	.LLSDACSB864:
 1507 0081 51       		.uleb128 .LEHB27-.LFB864
 1508 0082 2F       		.uleb128 .LEHE27-.LEHB27
 1509 0083 00       		.uleb128 0
 1510 0084 00       		.uleb128 0
 1511 0085 9F01     		.uleb128 .LEHB28-.LFB864
 1512 0087 31       		.uleb128 .LEHE28-.LEHB28
 1513 0088 A205     		.uleb128 .L73-.LFB864
 1514 008a 00       		.uleb128 0
 1515 008b D701     		.uleb128 .LEHB29-.LFB864
 1516 008d 60       		.uleb128 .LEHE29-.LEHB29
 1517 008e 00       		.uleb128 0
 1518 008f 00       		.uleb128 0
 1519 0090 EF02     		.uleb128 .LEHB30-.LFB864
 1520 0092 8201     		.uleb128 .LEHE30-.LEHB30
 1521 0094 CF05     		.uleb128 .L74-.LFB864
 1522 0096 01       		.uleb128 0x1
 1523 0097 FC03     		.uleb128 .LEHB31-.LFB864
 1524 0099 68       		.uleb128 .LEHE31-.LEHB31
 1525 009a 00       		.uleb128 0
 1526 009b 00       		.uleb128 0
 1527 009c B705     		.uleb128 .LEHB32-.LFB864
 1528 009e 05       		.uleb128 .LEHE32-.LEHB32
 1529 009f 00       		.uleb128 0
 1530 00a0 00       		.uleb128 0
 1531 00a1 CA05     		.uleb128 .LEHB33-.LFB864
 1532 00a3 05       		.uleb128 .LEHE33-.LEHB33
 1533 00a4 00       		.uleb128 0
 1534 00a5 00       		.uleb128 0
 1535 00a6 8206     		.uleb128 .LEHB34-.LFB864
 1536 00a8 45       		.uleb128 .LEHE34-.LEHB34
 1537 00a9 BC05     		.uleb128 .L75-.LFB864
 1538 00ab 00       		.uleb128 0
 1539              	.LLSDACSE864:
 1540 00ac 01       		.byte	0x1
 1541 00ad 00       		.byte	0
 1542 00ae 0000     		.align 4
 1543 00b0 00000000 		.long	0
 1544              	
 1545              	.LLSDATT864:
 1546              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__
 1548              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv,"axG",@progbits,_ZNSt6ve
 1549              		.align 2
 1550              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
 1552              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:
 1553              	.LFB869:
 556:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 1554              		.loc 5 556 0
 1555              		.cfi_startproc
 1556 0000 55       		pushq	%rbp
 1557              		.cfi_def_cfa_offset 16
 1558              		.cfi_offset 6, -16
 1559 0001 4889E5   		movq	%rsp, %rbp
 1560              		.cfi_def_cfa_register 6
 1561 0004 4883EC20 		subq	$32, %rsp
 1562 0008 48897DE8 		movq	%rdi, -24(%rbp)
 557:/usr/include/c++/4.8/bits/stl_vector.h **** 
 1563              		.loc 5 557 0
 1564 000c 488B45E8 		movq	-24(%rbp), %rax
 1565 0010 488D5008 		leaq	8(%rax), %rdx
 1566 0014 488D45F0 		leaq	-16(%rbp), %rax
 1567 0018 4889D6   		movq	%rdx, %rsi
 1568 001b 4889C7   		movq	%rax, %rdi
 1569 001e E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 1569      00
 1570 0023 488B45F0 		movq	-16(%rbp), %rax
 1571 0027 C9       		leave
 1572              		.cfi_def_cfa 7, 8
 1573 0028 C3       		ret
 1574              		.cfi_endproc
 1575              	.LFE869:
 1577              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1578              		.align 2
 1579              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiER
 1581              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiERKl:
 1582              	.LFB870:
 1583              		.file 9 "/usr/include/c++/4.8/bits/stl_iterator.h"
   1:/usr/include/c++/4.8/bits/stl_iterator.h **** // Iterators -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_iterator.h **** 
   3:/usr/include/c++/4.8/bits/stl_iterator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_iterator.h **** //
   5:/usr/include/c++/4.8/bits/stl_iterator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_iterator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_iterator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_iterator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_iterator.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  11:/usr/include/c++/4.8/bits/stl_iterator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_iterator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_iterator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_iterator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  16:/usr/include/c++/4.8/bits/stl_iterator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_iterator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_iterator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  20:/usr/include/c++/4.8/bits/stl_iterator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_iterator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_iterator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_iterator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  25:/usr/include/c++/4.8/bits/stl_iterator.h **** /*
  26:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  27:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  30:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_iterator.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  38:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  39:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  42:/usr/include/c++/4.8/bits/stl_iterator.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_iterator.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_iterator.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_iterator.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_iterator.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_iterator.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_iterator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_iterator.h ****  */
  50:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  51:/usr/include/c++/4.8/bits/stl_iterator.h **** /** @file bits/stl_iterator.h
  52:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/4.8/bits/stl_iterator.h ****  *
  55:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  This file implements reverse_iterator, back_insert_iterator,
  56:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  front_insert_iterator, insert_iterator, __normal_iterator, and their
  57:/usr/include/c++/4.8/bits/stl_iterator.h ****  *  supporting functions and overloaded operators.
  58:/usr/include/c++/4.8/bits/stl_iterator.h ****  */
  59:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  60:/usr/include/c++/4.8/bits/stl_iterator.h **** #ifndef _STL_ITERATOR_H
  61:/usr/include/c++/4.8/bits/stl_iterator.h **** #define _STL_ITERATOR_H 1
  62:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  63:/usr/include/c++/4.8/bits/stl_iterator.h **** #include <bits/cpp_type_traits.h>
  64:/usr/include/c++/4.8/bits/stl_iterator.h **** #include <ext/type_traits.h>
  65:/usr/include/c++/4.8/bits/stl_iterator.h **** #include <bits/move.h>
  66:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  67:/usr/include/c++/4.8/bits/stl_iterator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  68:/usr/include/c++/4.8/bits/stl_iterator.h **** {
  69:/usr/include/c++/4.8/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  70:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  71:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
  72:/usr/include/c++/4.8/bits/stl_iterator.h ****    * @addtogroup iterators
  73:/usr/include/c++/4.8/bits/stl_iterator.h ****    * @{
  74:/usr/include/c++/4.8/bits/stl_iterator.h ****    */
  75:/usr/include/c++/4.8/bits/stl_iterator.h **** 
  76:/usr/include/c++/4.8/bits/stl_iterator.h ****   // 24.4.1 Reverse iterators
  77:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
  78:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Bidirectional and random access iterators have corresponding reverse
  79:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  %iterator adaptors that iterate through the data structure in the
  80:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  opposite direction.  They have the same signatures as the corresponding
  81:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  iterators.  The fundamental relation between a reverse %iterator and its
  82:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  corresponding %iterator @c i is established by the identity:
  83:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @code
  84:/usr/include/c++/4.8/bits/stl_iterator.h ****    *      &*(reverse_iterator(i)) == &*(i - 1)
  85:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @endcode
  86:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
  87:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  <em>This mapping is dictated by the fact that while there is always a
  88:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  pointer past the end of an array, there might not be a valid pointer
  89:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  before the beginning of an array.</em> [24.4.1]/1,2
  90:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
  91:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Reverse iterators can be tricky and surprising at first.  Their
  92:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  semantics make sense, however, and the trickiness is a side effect of
  93:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  the requirement that the iterators must be safe.
  94:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
  95:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
  96:/usr/include/c++/4.8/bits/stl_iterator.h ****     class reverse_iterator
  97:/usr/include/c++/4.8/bits/stl_iterator.h ****     : public iterator<typename iterator_traits<_Iterator>::iterator_category,
  98:/usr/include/c++/4.8/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::value_type,
  99:/usr/include/c++/4.8/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::difference_type,
 100:/usr/include/c++/4.8/bits/stl_iterator.h **** 		      typename iterator_traits<_Iterator>::pointer,
 101:/usr/include/c++/4.8/bits/stl_iterator.h ****                       typename iterator_traits<_Iterator>::reference>
 102:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 103:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 104:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Iterator current;
 105:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 106:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 107:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 108:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 109:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 110:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type	difference_type;
 111:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::pointer		pointer;
 112:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::reference		reference;
 113:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 114:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 115:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The default constructor value-initializes member @p current.
 116:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  If it is a pointer, that means it is zero-initialized.
 117:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 118:/usr/include/c++/4.8/bits/stl_iterator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 119:/usr/include/c++/4.8/bits/stl_iterator.h ****       // 235 No specification of default ctor for reverse_iterator
 120:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator() : current() { }
 121:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 122:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 123:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This %iterator will move in the opposite direction that @p x does.
 124:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 125:/usr/include/c++/4.8/bits/stl_iterator.h ****       explicit
 126:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator(iterator_type __x) : current(__x) { }
 127:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 128:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 129:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The copy constructor is normal.
 130:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 131:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator(const reverse_iterator& __x)
 132:/usr/include/c++/4.8/bits/stl_iterator.h ****       : current(__x.current) { }
 133:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 134:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 135:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  A %reverse_iterator across other types can be copied if the
 136:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  underlying %iterator can be converted to the type of @c current.
 137:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 138:/usr/include/c++/4.8/bits/stl_iterator.h ****       template<typename _Iter>
 139:/usr/include/c++/4.8/bits/stl_iterator.h ****         reverse_iterator(const reverse_iterator<_Iter>& __x)
 140:/usr/include/c++/4.8/bits/stl_iterator.h **** 	: current(__x.base()) { }
 141:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 142:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 143:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  @c current, the %iterator used for underlying work.
 144:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 145:/usr/include/c++/4.8/bits/stl_iterator.h ****       iterator_type
 146:/usr/include/c++/4.8/bits/stl_iterator.h ****       base() const
 147:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return current; }
 148:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 149:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 150:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A reference to the value at @c --current
 151:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 152:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 153:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 154:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @warning This implementation requires that for an iterator of the
 155:/usr/include/c++/4.8/bits/stl_iterator.h ****        *           underlying iterator type, @c x, a reference obtained by
 156:/usr/include/c++/4.8/bits/stl_iterator.h ****        *           @c *x remains valid after @c x has been modified or
 157:/usr/include/c++/4.8/bits/stl_iterator.h ****        *           destroyed. This is a bug: http://gcc.gnu.org/PR51823
 158:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 159:/usr/include/c++/4.8/bits/stl_iterator.h ****       reference
 160:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*() const
 161:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 162:/usr/include/c++/4.8/bits/stl_iterator.h **** 	_Iterator __tmp = current;
 163:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *--__tmp;
 164:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 165:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 166:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 167:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A pointer to the value at @c --current
 168:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 169:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This requires that @c --current is dereferenceable.
 170:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 171:/usr/include/c++/4.8/bits/stl_iterator.h ****       pointer
 172:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator->() const
 173:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return &(operator*()); }
 174:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 175:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 176:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  @c *this
 177:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 178:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 179:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 180:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator&
 181:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 182:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 183:/usr/include/c++/4.8/bits/stl_iterator.h **** 	--current;
 184:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 185:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 186:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 187:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 188:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  The original value of @c *this
 189:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 190:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Decrements the underlying iterator.
 191:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 192:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator
 193:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 194:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 195:/usr/include/c++/4.8/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 196:/usr/include/c++/4.8/bits/stl_iterator.h **** 	--current;
 197:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return __tmp;
 198:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 199:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 200:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 201:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  @c *this
 202:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 203:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 204:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 205:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator&
 206:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator--()
 207:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 208:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++current;
 209:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 210:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 211:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 212:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 213:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A reverse_iterator with the previous value of @c *this
 214:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 215:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Increments the underlying iterator.
 216:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 217:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator
 218:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator--(int)
 219:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 220:/usr/include/c++/4.8/bits/stl_iterator.h **** 	reverse_iterator __tmp = *this;
 221:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++current;
 222:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return __tmp;
 223:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 224:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 225:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 226:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 227:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 228:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 229:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 230:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator
 231:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator+(difference_type __n) const
 232:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return reverse_iterator(current - __n); }
 233:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 234:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 235:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  *this
 236:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 237:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Moves the underlying iterator backwards @a __n steps.
 238:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 239:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 240:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator&
 241:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator+=(difference_type __n)
 242:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 243:/usr/include/c++/4.8/bits/stl_iterator.h **** 	current -= __n;
 244:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 245:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 246:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 247:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 248:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  A reverse_iterator that refers to @c current - @a __n
 249:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 250:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 251:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 252:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator
 253:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator-(difference_type __n) const
 254:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return reverse_iterator(current + __n); }
 255:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 256:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 257:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  *this
 258:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 259:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  Moves the underlying iterator forwards @a __n steps.
 260:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 261:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 262:/usr/include/c++/4.8/bits/stl_iterator.h ****       reverse_iterator&
 263:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator-=(difference_type __n)
 264:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 265:/usr/include/c++/4.8/bits/stl_iterator.h **** 	current += __n;
 266:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 267:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 268:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 269:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 270:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  The value at @c current - @a __n - 1
 271:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 272:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The underlying iterator must be a Random Access Iterator.
 273:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 274:/usr/include/c++/4.8/bits/stl_iterator.h ****       reference
 275:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator[](difference_type __n) const
 276:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *(*this + __n); }
 277:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 278:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 279:/usr/include/c++/4.8/bits/stl_iterator.h ****   //@{
 280:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 281:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param  __x  A %reverse_iterator.
 282:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param  __y  A %reverse_iterator.
 283:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @return  A simple bool.
 284:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 285:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Reverse iterators forward many operations to their underlying base()
 286:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  iterators.  Others are implemented in terms of one another.
 287:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 288:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 289:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 290:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 291:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator==(const reverse_iterator<_Iterator>& __x,
 292:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 293:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 294:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 295:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 296:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 297:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<(const reverse_iterator<_Iterator>& __x,
 298:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 299:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 300:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 301:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 302:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 303:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_Iterator>& __x,
 304:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 305:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__x == __y); }
 306:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 307:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 308:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 309:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>(const reverse_iterator<_Iterator>& __x,
 310:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 311:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y < __x; }
 312:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 313:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 314:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 315:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_Iterator>& __x,
 316:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 317:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__y < __x); }
 318:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 319:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 320:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 321:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_Iterator>& __x,
 322:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_Iterator>& __y)
 323:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__x < __y); }
 324:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 325:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 326:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline typename reverse_iterator<_Iterator>::difference_type
 327:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator-(const reverse_iterator<_Iterator>& __x,
 328:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __y)
 329:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 330:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 331:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator>
 332:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline reverse_iterator<_Iterator>
 333:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator+(typename reverse_iterator<_Iterator>::difference_type __n,
 334:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_Iterator>& __x)
 335:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return reverse_iterator<_Iterator>(__x.base() - __n); }
 336:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 337:/usr/include/c++/4.8/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 338:/usr/include/c++/4.8/bits/stl_iterator.h ****   // DR 280. Comparison of reverse_iterator to const reverse_iterator.
 339:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 340:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 341:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator==(const reverse_iterator<_IteratorL>& __x,
 342:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 343:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __x.base() == __y.base(); }
 344:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 345:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 346:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 347:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<(const reverse_iterator<_IteratorL>& __x,
 348:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 349:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y.base() < __x.base(); }
 350:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 351:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 352:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 353:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator!=(const reverse_iterator<_IteratorL>& __x,
 354:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 355:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__x == __y); }
 356:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 357:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 358:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 359:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>(const reverse_iterator<_IteratorL>& __x,
 360:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 361:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y < __x; }
 362:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 363:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 364:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 365:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<=(const reverse_iterator<_IteratorL>& __x,
 366:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 367:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__y < __x); }
 368:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 369:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 370:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 371:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>=(const reverse_iterator<_IteratorL>& __x,
 372:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const reverse_iterator<_IteratorR>& __y)
 373:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return !(__x < __y); }
 374:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 375:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR>
 376:/usr/include/c++/4.8/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 377:/usr/include/c++/4.8/bits/stl_iterator.h ****     // DR 685.
 378:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline auto
 379:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 380:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 381:/usr/include/c++/4.8/bits/stl_iterator.h ****     -> decltype(__y.base() - __x.base())
 382:/usr/include/c++/4.8/bits/stl_iterator.h **** #else
 383:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline typename reverse_iterator<_IteratorL>::difference_type
 384:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator-(const reverse_iterator<_IteratorL>& __x,
 385:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const reverse_iterator<_IteratorR>& __y)
 386:/usr/include/c++/4.8/bits/stl_iterator.h **** #endif
 387:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __y.base() - __x.base(); }
 388:/usr/include/c++/4.8/bits/stl_iterator.h ****   //@}
 389:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 390:/usr/include/c++/4.8/bits/stl_iterator.h ****   // 24.4.2.2.1 back_insert_iterator
 391:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 392:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 393:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 394:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 395:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Assigning a T to the iterator appends it to the container using
 396:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  push_back.
 397:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 398:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Tip:  Using the back_inserter function to create these iterators can
 399:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  save typing.
 400:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 401:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 402:/usr/include/c++/4.8/bits/stl_iterator.h ****     class back_insert_iterator
 403:/usr/include/c++/4.8/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 404:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 405:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 406:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Container* container;
 407:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 408:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 409:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 410:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Container          container_type;
 411:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 412:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 413:/usr/include/c++/4.8/bits/stl_iterator.h ****       explicit
 414:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator(_Container& __x) : container(&__x) { }
 415:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 416:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 417:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 418:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 419:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 420:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 421:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 422:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 423:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 424:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  the end, if you like).  Assigning a value to the %iterator will
 425:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  always append the value to the end of the container.
 426:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 427:/usr/include/c++/4.8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 428:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 429:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 430:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 431:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_back(__value);
 432:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 433:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 434:/usr/include/c++/4.8/bits/stl_iterator.h **** #else
 435:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 436:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 437:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 438:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_back(__value);
 439:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 440:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 441:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 442:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 443:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 444:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 445:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_back(std::move(__value));
 446:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 447:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 448:/usr/include/c++/4.8/bits/stl_iterator.h **** #endif
 449:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 450:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.
 451:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 452:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*()
 453:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 454:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 455:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 456:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator&
 457:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 458:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 459:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 460:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 461:/usr/include/c++/4.8/bits/stl_iterator.h ****       back_insert_iterator
 462:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 463:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 464:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 465:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 466:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 467:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 468:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @return  An instance of back_insert_iterator working on @p __x.
 469:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 470:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  This wrapper function helps in creating back_insert_iterator instances.
 471:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 472:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 473:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 474:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 475:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  types for you.
 476:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 477:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 478:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline back_insert_iterator<_Container>
 479:/usr/include/c++/4.8/bits/stl_iterator.h ****     back_inserter(_Container& __x)
 480:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return back_insert_iterator<_Container>(__x); }
 481:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 482:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 483:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 484:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 485:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 486:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Assigning a T to the iterator prepends it to the container using
 487:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  push_front.
 488:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 489:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Tip:  Using the front_inserter function to create these iterators can
 490:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  save typing.
 491:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 492:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 493:/usr/include/c++/4.8/bits/stl_iterator.h ****     class front_insert_iterator
 494:/usr/include/c++/4.8/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 495:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 496:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 497:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Container* container;
 498:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 499:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 500:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 501:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Container          container_type;
 502:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 503:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// The only way to create this %iterator is with a container.
 504:/usr/include/c++/4.8/bits/stl_iterator.h ****       explicit front_insert_iterator(_Container& __x) : container(&__x) { }
 505:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 506:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 507:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 508:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 509:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 510:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 511:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 512:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This kind of %iterator doesn't really have a @a position in the
 513:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  container (you can think of the position as being permanently at
 514:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  the front, if you like).  Assigning a value to the %iterator will
 515:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  always prepend the value to the front of the container.
 516:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 517:/usr/include/c++/4.8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 518:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 519:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 520:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 521:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_front(__value);
 522:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 523:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 524:/usr/include/c++/4.8/bits/stl_iterator.h **** #else
 525:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 526:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 527:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 528:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_front(__value);
 529:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 530:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 531:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 532:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 533:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 534:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 535:/usr/include/c++/4.8/bits/stl_iterator.h **** 	container->push_front(std::move(__value));
 536:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 537:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 538:/usr/include/c++/4.8/bits/stl_iterator.h **** #endif
 539:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 540:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.
 541:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 542:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*()
 543:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 544:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 545:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 546:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator&
 547:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 548:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 549:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 550:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 551:/usr/include/c++/4.8/bits/stl_iterator.h ****       front_insert_iterator
 552:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 553:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 554:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 555:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 556:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 557:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param  __x  A container of arbitrary type.
 558:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @return  An instance of front_insert_iterator working on @p x.
 559:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 560:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  This wrapper function helps in creating front_insert_iterator instances.
 561:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 562:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 563:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 564:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 565:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  types for you.
 566:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 567:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 568:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline front_insert_iterator<_Container>
 569:/usr/include/c++/4.8/bits/stl_iterator.h ****     front_inserter(_Container& __x)
 570:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return front_insert_iterator<_Container>(__x); }
 571:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 572:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 573:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @brief  Turns assignment into insertion.
 574:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 575:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  These are output iterators, constructed from a container-of-T.
 576:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Assigning a T to the iterator inserts it in the container at the
 577:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  %iterator's position, rather than overwriting the value at that
 578:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  position.
 579:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 580:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  (Sequences will actually insert a @e copy of the value before the
 581:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  %iterator's position.)
 582:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 583:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Tip:  Using the inserter function to create these iterators can
 584:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  save typing.
 585:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 586:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container>
 587:/usr/include/c++/4.8/bits/stl_iterator.h ****     class insert_iterator
 588:/usr/include/c++/4.8/bits/stl_iterator.h ****     : public iterator<output_iterator_tag, void, void, void, void>
 589:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 590:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 591:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Container* container;
 592:/usr/include/c++/4.8/bits/stl_iterator.h ****       typename _Container::iterator iter;
 593:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 594:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 595:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// A nested typedef for the type of whatever container you used.
 596:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Container          container_type;
 597:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 598:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 599:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The only way to create this %iterator is with a container and an
 600:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  initial position (a normal %iterator into the container).
 601:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 602:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator(_Container& __x, typename _Container::iterator __i)
 603:/usr/include/c++/4.8/bits/stl_iterator.h ****       : container(&__x), iter(__i) {}
 604:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 605:/usr/include/c++/4.8/bits/stl_iterator.h ****       /**
 606:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @param  __value  An instance of whatever type
 607:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 container_type::const_reference is; presumably a
 608:/usr/include/c++/4.8/bits/stl_iterator.h ****        *                 reference-to-const T for container<T>.
 609:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @return  This %iterator, for chained operations.
 610:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 611:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  This kind of %iterator maintains its own position in the
 612:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  container.  Assigning a value to the %iterator will insert the
 613:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  value into the container at the place before the %iterator.
 614:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 615:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  The position is maintained such that subsequent assignments will
 616:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  insert values immediately after one another.  For example,
 617:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @code
 618:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     // vector v contains A and Z
 619:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 620:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     insert_iterator i (v, ++v.begin());
 621:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     i = 1;
 622:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     i = 2;
 623:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     i = 3;
 624:/usr/include/c++/4.8/bits/stl_iterator.h ****        *
 625:/usr/include/c++/4.8/bits/stl_iterator.h ****        *     // vector v contains A, 1, 2, 3, and Z
 626:/usr/include/c++/4.8/bits/stl_iterator.h ****        *  @endcode
 627:/usr/include/c++/4.8/bits/stl_iterator.h ****       */
 628:/usr/include/c++/4.8/bits/stl_iterator.h **** #if __cplusplus < 201103L
 629:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 630:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::const_reference __value)
 631:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 632:/usr/include/c++/4.8/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 633:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++iter;
 634:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 635:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 636:/usr/include/c++/4.8/bits/stl_iterator.h **** #else
 637:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 638:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(const typename _Container::value_type& __value)
 639:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 640:/usr/include/c++/4.8/bits/stl_iterator.h **** 	iter = container->insert(iter, __value);
 641:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++iter;
 642:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 643:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 644:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 645:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 646:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator=(typename _Container::value_type&& __value)
 647:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 648:/usr/include/c++/4.8/bits/stl_iterator.h **** 	iter = container->insert(iter, std::move(__value));
 649:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++iter;
 650:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 651:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 652:/usr/include/c++/4.8/bits/stl_iterator.h **** #endif
 653:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 654:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.
 655:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 656:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*()
 657:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 658:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 659:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 660:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 661:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 662:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 663:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 664:/usr/include/c++/4.8/bits/stl_iterator.h ****       /// Simply returns *this.  (This %iterator does not @a move.)
 665:/usr/include/c++/4.8/bits/stl_iterator.h ****       insert_iterator&
 666:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 667:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *this; }
 668:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 669:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 670:/usr/include/c++/4.8/bits/stl_iterator.h ****   /**
 671:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @param __x  A container of arbitrary type.
 672:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  @return  An instance of insert_iterator working on @p __x.
 673:/usr/include/c++/4.8/bits/stl_iterator.h ****    *
 674:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  This wrapper function helps in creating insert_iterator instances.
 675:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  Typing the name of the %iterator requires knowing the precise full
 676:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  type of the container, which can be tedious and impedes generic
 677:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  programming.  Using this function lets you take advantage of automatic
 678:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  template parameter deduction, making the compiler match the correct
 679:/usr/include/c++/4.8/bits/stl_iterator.h ****    *  types for you.
 680:/usr/include/c++/4.8/bits/stl_iterator.h ****   */
 681:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Container, typename _Iterator>
 682:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline insert_iterator<_Container>
 683:/usr/include/c++/4.8/bits/stl_iterator.h ****     inserter(_Container& __x, _Iterator __i)
 684:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 685:/usr/include/c++/4.8/bits/stl_iterator.h ****       return insert_iterator<_Container>(__x,
 686:/usr/include/c++/4.8/bits/stl_iterator.h **** 					 typename _Container::iterator(__i));
 687:/usr/include/c++/4.8/bits/stl_iterator.h ****     }
 688:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 689:/usr/include/c++/4.8/bits/stl_iterator.h ****   // @} group iterators
 690:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 691:/usr/include/c++/4.8/bits/stl_iterator.h **** _GLIBCXX_END_NAMESPACE_VERSION
 692:/usr/include/c++/4.8/bits/stl_iterator.h **** } // namespace
 693:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 694:/usr/include/c++/4.8/bits/stl_iterator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
 695:/usr/include/c++/4.8/bits/stl_iterator.h **** {
 696:/usr/include/c++/4.8/bits/stl_iterator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
 697:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 698:/usr/include/c++/4.8/bits/stl_iterator.h ****   // This iterator adapter is @a normal in the sense that it does not
 699:/usr/include/c++/4.8/bits/stl_iterator.h ****   // change the semantics of any of the operators of its iterator
 700:/usr/include/c++/4.8/bits/stl_iterator.h ****   // parameter.  Its primary purpose is to convert an iterator that is
 701:/usr/include/c++/4.8/bits/stl_iterator.h ****   // not a class, e.g. a pointer, into an iterator that is a class.
 702:/usr/include/c++/4.8/bits/stl_iterator.h ****   // The _Container parameter exists solely so that different containers
 703:/usr/include/c++/4.8/bits/stl_iterator.h ****   // using this template can instantiate different types, even if the
 704:/usr/include/c++/4.8/bits/stl_iterator.h ****   // _Iterator parameter is the same.
 705:/usr/include/c++/4.8/bits/stl_iterator.h ****   using std::iterator_traits;
 706:/usr/include/c++/4.8/bits/stl_iterator.h ****   using std::iterator;
 707:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 708:/usr/include/c++/4.8/bits/stl_iterator.h ****     class __normal_iterator
 709:/usr/include/c++/4.8/bits/stl_iterator.h ****     {
 710:/usr/include/c++/4.8/bits/stl_iterator.h ****     protected:
 711:/usr/include/c++/4.8/bits/stl_iterator.h ****       _Iterator _M_current;
 712:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 713:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef iterator_traits<_Iterator>		__traits_type;
 714:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 715:/usr/include/c++/4.8/bits/stl_iterator.h ****     public:
 716:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef _Iterator					iterator_type;
 717:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::iterator_category iterator_category;
 718:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::value_type  	value_type;
 719:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::difference_type 	difference_type;
 720:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::reference 	reference;
 721:/usr/include/c++/4.8/bits/stl_iterator.h ****       typedef typename __traits_type::pointer   	pointer;
 722:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 723:/usr/include/c++/4.8/bits/stl_iterator.h ****       _GLIBCXX_CONSTEXPR __normal_iterator() : _M_current(_Iterator()) { }
 724:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 725:/usr/include/c++/4.8/bits/stl_iterator.h ****       explicit
 726:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator(const _Iterator& __i) : _M_current(__i) { }
 727:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 728:/usr/include/c++/4.8/bits/stl_iterator.h ****       // Allow iterator to const_iterator conversion
 729:/usr/include/c++/4.8/bits/stl_iterator.h ****       template<typename _Iter>
 730:/usr/include/c++/4.8/bits/stl_iterator.h ****         __normal_iterator(const __normal_iterator<_Iter,
 731:/usr/include/c++/4.8/bits/stl_iterator.h **** 			  typename __enable_if<
 732:/usr/include/c++/4.8/bits/stl_iterator.h ****       	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
 733:/usr/include/c++/4.8/bits/stl_iterator.h **** 		      _Container>::__type>& __i)
 734:/usr/include/c++/4.8/bits/stl_iterator.h ****         : _M_current(__i.base()) { }
 735:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 736:/usr/include/c++/4.8/bits/stl_iterator.h ****       // Forward iterator requirements
 737:/usr/include/c++/4.8/bits/stl_iterator.h ****       reference
 738:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator*() const
 739:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *_M_current; }
 740:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 741:/usr/include/c++/4.8/bits/stl_iterator.h ****       pointer
 742:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator->() const
 743:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 744:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 745:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator&
 746:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++()
 747:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 748:/usr/include/c++/4.8/bits/stl_iterator.h **** 	++_M_current;
 749:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 750:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 751:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 752:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator
 753:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator++(int)
 754:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current++); }
 755:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 756:/usr/include/c++/4.8/bits/stl_iterator.h ****       // Bidirectional iterator requirements
 757:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator&
 758:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator--()
 759:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 760:/usr/include/c++/4.8/bits/stl_iterator.h **** 	--_M_current;
 761:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 762:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 763:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 764:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator
 765:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator--(int)
 766:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current--); }
 767:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 768:/usr/include/c++/4.8/bits/stl_iterator.h ****       // Random access iterator requirements
 769:/usr/include/c++/4.8/bits/stl_iterator.h ****       reference
 770:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator[](const difference_type& __n) const
 771:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current[__n]; }
 772:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 773:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator&
 774:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator+=(const difference_type& __n)
 775:/usr/include/c++/4.8/bits/stl_iterator.h ****       { _M_current += __n; return *this; }
 776:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 777:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator
 778:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator+(const difference_type& __n) const
 779:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current + __n); }
 780:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 781:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator&
 782:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator-=(const difference_type& __n)
 783:/usr/include/c++/4.8/bits/stl_iterator.h ****       { _M_current -= __n; return *this; }
 784:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 785:/usr/include/c++/4.8/bits/stl_iterator.h ****       __normal_iterator
 786:/usr/include/c++/4.8/bits/stl_iterator.h ****       operator-(const difference_type& __n) const
 1584              		.loc 9 786 0
 1585              		.cfi_startproc
 1586 0000 55       		pushq	%rbp
 1587              		.cfi_def_cfa_offset 16
 1588              		.cfi_offset 6, -16
 1589 0001 4889E5   		movq	%rsp, %rbp
 1590              		.cfi_def_cfa_register 6
 1591 0004 4883EC20 		subq	$32, %rsp
 1592 0008 48897DE8 		movq	%rdi, -24(%rbp)
 1593 000c 488975E0 		movq	%rsi, -32(%rbp)
 787:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return __normal_iterator(_M_current - __n); }
 1594              		.loc 9 787 0
 1595 0010 488B45E8 		movq	-24(%rbp), %rax
 1596 0014 488B10   		movq	(%rax), %rdx
 1597 0017 488B45E0 		movq	-32(%rbp), %rax
 1598 001b 488B00   		movq	(%rax), %rax
 1599 001e 48C1E003 		salq	$3, %rax
 1600 0022 488D0CC5 		leaq	0(,%rax,8), %rcx
 1600      00000000 
 1601 002a 4829C1   		subq	%rax, %rcx
 1602 002d 4889C8   		movq	%rcx, %rax
 1603 0030 48F7D8   		negq	%rax
 1604 0033 4801D0   		addq	%rdx, %rax
 1605 0036 488945F8 		movq	%rax, -8(%rbp)
 1606 003a 488D55F8 		leaq	-8(%rbp), %rdx
 1607 003e 488D45F0 		leaq	-16(%rbp), %rax
 1608 0042 4889D6   		movq	%rdx, %rsi
 1609 0045 4889C7   		movq	%rax, %rdi
 1610 0048 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 1610      00
 1611 004d 488B45F0 		movq	-16(%rbp), %rax
 1612 0051 C9       		leave
 1613              		.cfi_def_cfa 7, 8
 1614 0052 C3       		ret
 1615              		.cfi_endproc
 1616              	.LFE870:
 1618              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 1619              		.align 2
 1620              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
 1622              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:
 1623              	.LFB871:
 738:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *_M_current; }
 1624              		.loc 9 738 0
 1625              		.cfi_startproc
 1626 0000 55       		pushq	%rbp
 1627              		.cfi_def_cfa_offset 16
 1628              		.cfi_offset 6, -16
 1629 0001 4889E5   		movq	%rsp, %rbp
 1630              		.cfi_def_cfa_register 6
 1631 0004 48897DF8 		movq	%rdi, -8(%rbp)
 739:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 1632              		.loc 9 739 0
 1633 0008 488B45F8 		movq	-8(%rbp), %rax
 1634 000c 488B00   		movq	(%rax), %rax
 1635 000f 5D       		popq	%rbp
 1636              		.cfi_def_cfa 7, 8
 1637 0010 C3       		ret
 1638              		.cfi_endproc
 1639              	.LFE871:
 1641              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_,"axG",
 1642              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_
 1644              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_:
 1645              	.LFB878:
 215:/usr/include/c++/4.8/ext/alloc_traits.h ****       { __a.construct(__p, __arg); }
 1646              		.loc 7 215 0
 1647              		.cfi_startproc
 1648 0000 55       		pushq	%rbp
 1649              		.cfi_def_cfa_offset 16
 1650              		.cfi_offset 6, -16
 1651 0001 4889E5   		movq	%rsp, %rbp
 1652              		.cfi_def_cfa_register 6
 1653 0004 4883EC20 		subq	$32, %rsp
 1654 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1655 000c 488975F0 		movq	%rsi, -16(%rbp)
 1656 0010 488955E8 		movq	%rdx, -24(%rbp)
 1657              		.loc 7 216 0
 1658 0014 488B55E8 		movq	-24(%rbp), %rdx
 1659 0018 488B4DF0 		movq	-16(%rbp), %rcx
 1660 001c 488B45F8 		movq	-8(%rbp), %rax
 1661 0020 4889CE   		movq	%rcx, %rsi
 1662 0023 4889C7   		movq	%rax, %rdi
 1663 0026 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_@PLT
 1663      00
 1664 002b C9       		leave
 1665              		.cfi_def_cfa 7, 8
 1666 002c C3       		ret
 1667              		.cfi_endproc
 1668              	.LFE878:
 1670              		.section	.text._ZNSt4pairIiSsEC2ERKS0_,"axG",@progbits,_ZNSt4pairIiSsEC5ERKS0_,comdat
 1671              		.align 2
 1672              		.weak	_ZNSt4pairIiSsEC2ERKS0_
 1674              	_ZNSt4pairIiSsEC2ERKS0_:
 1675              	.LFB881:
  96:/usr/include/c++/4.8/bits/stl_pair.h ****     {
 1676              		.loc 4 96 0
 1677              		.cfi_startproc
 1678 0000 55       		pushq	%rbp
 1679              		.cfi_def_cfa_offset 16
 1680              		.cfi_offset 6, -16
 1681 0001 4889E5   		movq	%rsp, %rbp
 1682              		.cfi_def_cfa_register 6
 1683 0004 4883EC10 		subq	$16, %rsp
 1684 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1685 000c 488975F0 		movq	%rsi, -16(%rbp)
 1686              	.LBB19:
  96:/usr/include/c++/4.8/bits/stl_pair.h ****     {
 1687              		.loc 4 96 0
 1688 0010 488B45F0 		movq	-16(%rbp), %rax
 1689 0014 8B10     		movl	(%rax), %edx
 1690 0016 488B45F8 		movq	-8(%rbp), %rax
 1691 001a 8910     		movl	%edx, (%rax)
 1692 001c 488B45F0 		movq	-16(%rbp), %rax
 1693 0020 488D5008 		leaq	8(%rax), %rdx
 1694 0024 488B45F8 		movq	-8(%rbp), %rax
 1695 0028 4883C008 		addq	$8, %rax
 1696 002c 4889D6   		movq	%rdx, %rsi
 1697 002f 4889C7   		movq	%rax, %rdi
 1698 0032 E8000000 		call	_ZNSsC1ERKSs@PLT
 1698      00
 1699              	.LBE19:
 1700 0037 C9       		leave
 1701              		.cfi_def_cfa 7, 8
 1702 0038 C3       		ret
 1703              		.cfi_endproc
 1704              	.LFE881:
 1706              		.weak	_ZNSt4pairIiSsEC1ERKS0_
 1707              		.set	_ZNSt4pairIiSsEC1ERKS0_,_ZNSt4pairIiSsEC2ERKS0_
 1708              		.section	.text._ZNSt4pairIiSsEaSERKS0_,"axG",@progbits,_ZNSt4pairIiSsEaSERKS0_,comdat
 1709              		.align 2
 1710              		.weak	_ZNSt4pairIiSsEaSERKS0_
 1712              	_ZNSt4pairIiSsEaSERKS0_:
 1713              	.LFB883:
  96:/usr/include/c++/4.8/bits/stl_pair.h ****     {
 1714              		.loc 4 96 0
 1715              		.cfi_startproc
 1716 0000 55       		pushq	%rbp
 1717              		.cfi_def_cfa_offset 16
 1718              		.cfi_offset 6, -16
 1719 0001 4889E5   		movq	%rsp, %rbp
 1720              		.cfi_def_cfa_register 6
 1721 0004 4883EC10 		subq	$16, %rsp
 1722 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1723 000c 488975F0 		movq	%rsi, -16(%rbp)
  96:/usr/include/c++/4.8/bits/stl_pair.h ****     {
 1724              		.loc 4 96 0
 1725 0010 488B45F0 		movq	-16(%rbp), %rax
 1726 0014 8B10     		movl	(%rax), %edx
 1727 0016 488B45F8 		movq	-8(%rbp), %rax
 1728 001a 8910     		movl	%edx, (%rax)
 1729 001c 488B45F0 		movq	-16(%rbp), %rax
 1730 0020 488D5008 		leaq	8(%rax), %rdx
 1731 0024 488B45F8 		movq	-8(%rbp), %rax
 1732 0028 4883C008 		addq	$8, %rax
 1733 002c 4889D6   		movq	%rdx, %rsi
 1734 002f 4889C7   		movq	%rax, %rdi
 1735 0032 E8000000 		call	_ZNSsaSERKSs@PLT
 1735      00
 1736 0037 488B45F8 		movq	-8(%rbp), %rax
 1737 003b C9       		leave
 1738              		.cfi_def_cfa 7, 8
 1739 003c C3       		ret
 1740              		.cfi_endproc
 1741              	.LFE883:
 1743              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1
 1744              		.align 2
 1745              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS
 1747              	_ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:
 1748              	.LFB879:
 318:/usr/include/c++/4.8/bits/vector.tcc ****     _M_insert_aux(iterator __position, const _Tp& __x)
 1749              		.loc 8 318 0
 1750              		.cfi_startproc
 1751              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 1752              		.cfi_lsda 0x1b,.LLSDA879
 1753 0000 55       		pushq	%rbp
 1754              		.cfi_def_cfa_offset 16
 1755              		.cfi_offset 6, -16
 1756 0001 4889E5   		movq	%rsp, %rbp
 1757              		.cfi_def_cfa_register 6
 1758 0004 4154     		pushq	%r12
 1759 0006 53       		pushq	%rbx
 1760 0007 4883EC50 		subq	$80, %rsp
 1761              		.cfi_offset 12, -24
 1762              		.cfi_offset 3, -32
 1763 000b 48897DB8 		movq	%rdi, -72(%rbp)
 1764 000f 488975B0 		movq	%rsi, -80(%rbp)
 1765 0013 488955A8 		movq	%rdx, -88(%rbp)
 1766              	.LBB20:
 1767              	.LBB21:
 322:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 1768              		.loc 8 322 0
 1769 0017 488B45B8 		movq	-72(%rbp), %rax
 1770 001b 488B5008 		movq	8(%rax), %rdx
 1771 001f 488B45B8 		movq	-72(%rbp), %rax
 1772 0023 488B4010 		movq	16(%rax), %rax
 1773 0027 4839C2   		cmpq	%rax, %rdx
 1774 002a 0F84AB00 		je	.L87
 1774      0000
 1775              	.LBB22:
 326:/usr/include/c++/4.8/bits/vector.tcc **** 	  ++this->_M_impl._M_finish;
 1776              		.loc 8 326 0
 1777 0030 488B45B8 		movq	-72(%rbp), %rax
 1778 0034 488B4008 		movq	8(%rax), %rax
 1779 0038 488D50F0 		leaq	-16(%rax), %rdx
 1780 003c 488B45B8 		movq	-72(%rbp), %rax
 1781 0040 488B4808 		movq	8(%rax), %rcx
 1782 0044 488B45B8 		movq	-72(%rbp), %rax
 324:/usr/include/c++/4.8/bits/vector.tcc **** 			           _GLIBCXX_MOVE(*(this->_M_impl._M_finish
 1783              		.loc 8 324 0
 1784 0048 4889CE   		movq	%rcx, %rsi
 1785 004b 4889C7   		movq	%rax, %rdi
 1786              	.LEHB35:
 1787 004e E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_@PLT
 1787      00
 327:/usr/include/c++/4.8/bits/vector.tcc **** #if __cplusplus < 201103L
 1788              		.loc 8 327 0
 1789 0053 488B45B8 		movq	-72(%rbp), %rax
 1790 0057 488B4008 		movq	8(%rax), %rax
 1791 005b 488D5010 		leaq	16(%rax), %rdx
 1792 005f 488B45B8 		movq	-72(%rbp), %rax
 1793 0063 48895008 		movq	%rdx, 8(%rax)
 329:/usr/include/c++/4.8/bits/vector.tcc **** #endif
 1794              		.loc 8 329 0
 1795 0067 488B55A8 		movq	-88(%rbp), %rdx
 1796 006b 488D45E0 		leaq	-32(%rbp), %rax
 1797 006f 4889D6   		movq	%rdx, %rsi
 1798 0072 4889C7   		movq	%rax, %rdi
 1799 0075 E8000000 		call	_ZNSt4pairIiSsEC1ERKS0_@PLT
 1799      00
 1800              	.LEHE35:
 331:/usr/include/c++/4.8/bits/vector.tcc **** 				  this->_M_impl._M_finish - 2,
 1801              		.loc 8 331 0
 1802 007a 488B45B8 		movq	-72(%rbp), %rax
 1803 007e 488B4008 		movq	8(%rax), %rax
 1804 0082 4C8D60F0 		leaq	-16(%rax), %r12
 1805 0086 488B45B8 		movq	-72(%rbp), %rax
 1806 008a 488B4008 		movq	8(%rax), %rax
 1807 008e 488D58E0 		leaq	-32(%rax), %rbx
 1808 0092 488D45B0 		leaq	-80(%rbp), %rax
 1809 0096 4889C7   		movq	%rax, %rdi
 1810              	.LEHB36:
 1811 0099 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1811      00
 1812 009e 488B00   		movq	(%rax), %rax
 1813 00a1 4C89E2   		movq	%r12, %rdx
 1814 00a4 4889DE   		movq	%rbx, %rsi
 1815 00a7 4889C7   		movq	%rax, %rdi
 1816 00aa E8000000 		call	_ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_@PLT
 1816      00
 335:/usr/include/c++/4.8/bits/vector.tcc **** #else
 1817              		.loc 8 335 0
 1818 00af 488D45B0 		leaq	-80(%rbp), %rax
 1819 00b3 4889C7   		movq	%rax, %rdi
 1820 00b6 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv@PLT
 1820      00
 1821 00bb 488D55E0 		leaq	-32(%rbp), %rdx
 1822 00bf 4889D6   		movq	%rdx, %rsi
 1823 00c2 4889C7   		movq	%rax, %rdi
 1824 00c5 E8000000 		call	_ZNSt4pairIiSsEaSERKS0_@PLT
 1824      00
 1825              	.LEHE36:
 335:/usr/include/c++/4.8/bits/vector.tcc **** #else
 1826              		.loc 8 335 0 is_stmt 0 discriminator 2
 1827 00ca 488D45E0 		leaq	-32(%rbp), %rax
 1828 00ce 4889C7   		movq	%rax, %rdi
 1829              	.LEHB37:
 1830 00d1 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 1830      00
 1831              	.LBE22:
 1832 00d6 E93A0200 		jmp	.L86
 1832      00
 1833              	.L87:
 1834              	.LBB23:
 343:/usr/include/c++/4.8/bits/vector.tcc **** 	  const size_type __elems_before = __position - begin();
 1835              		.loc 8 343 0 is_stmt 1
 1836 00db 488B45B8 		movq	-72(%rbp), %rax
 1837 00df 488D1500 		leaq	.LC0(%rip), %rdx
 1837      000000
 1838 00e6 BE010000 		movl	$1, %esi
 1838      00
 1839 00eb 4889C7   		movq	%rax, %rdi
 1840 00ee E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc@PLT
 1840      00
 1841 00f3 488945C8 		movq	%rax, -56(%rbp)
 344:/usr/include/c++/4.8/bits/vector.tcc **** 	  pointer __new_start(this->_M_allocate(__len));
 1842              		.loc 8 344 0
 1843 00f7 488B45B8 		movq	-72(%rbp), %rax
 1844 00fb 4889C7   		movq	%rax, %rdi
 1845 00fe E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 1845      00
 1846 0103 488945E0 		movq	%rax, -32(%rbp)
 1847 0107 488D55E0 		leaq	-32(%rbp), %rdx
 1848 010b 488D45B0 		leaq	-80(%rbp), %rax
 1849 010f 4889D6   		movq	%rdx, %rsi
 1850 0112 4889C7   		movq	%rax, %rdi
 1851 0115 E8000000 		call	_ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference
 1851      00
 1852 011a 488945D0 		movq	%rax, -48(%rbp)
 345:/usr/include/c++/4.8/bits/vector.tcc **** 	  pointer __new_finish(__new_start);
 1853              		.loc 8 345 0
 1854 011e 488B45B8 		movq	-72(%rbp), %rax
 1855 0122 488B55C8 		movq	-56(%rbp), %rdx
 1856 0126 4889D6   		movq	%rdx, %rsi
 1857 0129 4889C7   		movq	%rax, %rdi
 1858 012c E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm@PLT
 1858      00
 1859              	.LEHE37:
 1860 0131 488945D8 		movq	%rax, -40(%rbp)
 346:/usr/include/c++/4.8/bits/vector.tcc **** 	  __try
 1861              		.loc 8 346 0
 1862 0135 488B45D8 		movq	-40(%rbp), %rax
 1863 0139 488945C0 		movq	%rax, -64(%rbp)
 358:/usr/include/c++/4.8/bits/vector.tcc **** #endif
 1864              		.loc 8 358 0
 1865 013d 488B45D0 		movq	-48(%rbp), %rax
 1866 0141 48C1E004 		salq	$4, %rax
 1867 0145 4889C2   		movq	%rax, %rdx
 1868 0148 488B45D8 		movq	-40(%rbp), %rax
 1869 014c 488D0C02 		leaq	(%rdx,%rax), %rcx
 1870 0150 488B45B8 		movq	-72(%rbp), %rax
 353:/usr/include/c++/4.8/bits/vector.tcc **** 		                       __new_start + __elems_before,
 1871              		.loc 8 353 0
 1872 0154 488B55A8 		movq	-88(%rbp), %rdx
 1873 0158 4889CE   		movq	%rcx, %rsi
 1874 015b 4889C7   		movq	%rax, %rdi
 1875              	.LEHB38:
 1876 015e E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_@PLT
 1876      00
 360:/usr/include/c++/4.8/bits/vector.tcc **** 
 1877              		.loc 8 360 0
 1878 0163 48C745C0 		movq	$0, -64(%rbp)
 1878      00000000 
 365:/usr/include/c++/4.8/bits/vector.tcc **** 
 1879              		.loc 8 365 0
 1880 016b 488B45B8 		movq	-72(%rbp), %rax
 1881 016f 4889C7   		movq	%rax, %rdi
 1882 0172 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1882      00
 1883 0177 4889C3   		movq	%rax, %rbx
 1884 017a 488D45B0 		leaq	-80(%rbp), %rax
 1885 017e 4889C7   		movq	%rax, %rdi
 1886 0181 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1886      00
 1887 0186 488B30   		movq	(%rax), %rsi
 1888 0189 488B45B8 		movq	-72(%rbp), %rax
 1889 018d 488B00   		movq	(%rax), %rax
 362:/usr/include/c++/4.8/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1890              		.loc 8 362 0
 1891 0190 488B55D8 		movq	-40(%rbp), %rdx
 1892 0194 4889D9   		movq	%rbx, %rcx
 1893 0197 4889C7   		movq	%rax, %rdi
 1894 019a E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_@PLT
 1894      00
 362:/usr/include/c++/4.8/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1895              		.loc 8 362 0 is_stmt 0 discriminator 1
 1896 019f 488945C0 		movq	%rax, -64(%rbp)
 367:/usr/include/c++/4.8/bits/vector.tcc **** 
 1897              		.loc 8 367 0 is_stmt 1 discriminator 1
 1898 01a3 488345C0 		addq	$16, -64(%rbp)
 1898      10
 372:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 1899              		.loc 8 372 0 discriminator 1
 1900 01a8 488B45B8 		movq	-72(%rbp), %rax
 1901 01ac 4889C7   		movq	%rax, %rdi
 1902 01af E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1902      00
 1903 01b4 4989C4   		movq	%rax, %r12
 1904 01b7 488B45B8 		movq	-72(%rbp), %rax
 1905 01bb 488B5808 		movq	8(%rax), %rbx
 1906 01bf 488D45B0 		leaq	-80(%rbp), %rax
 1907 01c3 4889C7   		movq	%rax, %rdi
 1908 01c6 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 1908      00
 1909 01cb 488B00   		movq	(%rax), %rax
 369:/usr/include/c++/4.8/bits/vector.tcc **** 		= std::__uninitialized_move_if_noexcept_a
 1910              		.loc 8 369 0 discriminator 1
 1911 01ce 488B55C0 		movq	-64(%rbp), %rdx
 1912 01d2 4C89E1   		movq	%r12, %rcx
 1913 01d5 4889DE   		movq	%rbx, %rsi
 1914 01d8 4889C7   		movq	%rax, %rdi
 1915 01db E8000000 		call	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_@PLT
 1915      00
 1916              	.LEHE38:
 1917 01e0 488945C0 		movq	%rax, -64(%rbp)
 385:/usr/include/c++/4.8/bits/vector.tcc **** 	  _M_deallocate(this->_M_impl._M_start,
 1918              		.loc 8 385 0 discriminator 1
 1919 01e4 488B45B8 		movq	-72(%rbp), %rax
 1920 01e8 4889C7   		movq	%rax, %rdi
 1921 01eb E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 1921      00
 1922 01f0 4889C2   		movq	%rax, %rdx
 1923 01f3 488B45B8 		movq	-72(%rbp), %rax
 1924 01f7 488B4808 		movq	8(%rax), %rcx
 1925 01fb 488B45B8 		movq	-72(%rbp), %rax
 1926 01ff 488B00   		movq	(%rax), %rax
 384:/usr/include/c++/4.8/bits/vector.tcc **** 			_M_get_Tp_allocator());
 1927              		.loc 8 384 0 discriminator 1
 1928 0202 4889CE   		movq	%rcx, %rsi
 1929 0205 4889C7   		movq	%rax, %rdi
 1930              	.LEHB39:
 1931 0208 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 1931      00
 388:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_start = __new_start;
 1932              		.loc 8 388 0 discriminator 1
 1933 020d 488B45B8 		movq	-72(%rbp), %rax
 1934 0211 488B4010 		movq	16(%rax), %rax
 1935 0215 4889C2   		movq	%rax, %rdx
 1936 0218 488B45B8 		movq	-72(%rbp), %rax
 1937 021c 488B00   		movq	(%rax), %rax
 1938 021f 4829C2   		subq	%rax, %rdx
 1939 0222 4889D0   		movq	%rdx, %rax
 1940 0225 48C1F804 		sarq	$4, %rax
 1941 0229 4889C2   		movq	%rax, %rdx
 1942 022c 488B45B8 		movq	-72(%rbp), %rax
 1943 0230 488B08   		movq	(%rax), %rcx
 1944 0233 488B45B8 		movq	-72(%rbp), %rax
 386:/usr/include/c++/4.8/bits/vector.tcc **** 			this->_M_impl._M_end_of_storage
 1945              		.loc 8 386 0 discriminator 1
 1946 0237 4889CE   		movq	%rcx, %rsi
 1947 023a 4889C7   		movq	%rax, %rdi
 1948 023d E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 1948      00
 1949              	.LEHE39:
 389:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_finish = __new_finish;
 1950              		.loc 8 389 0 discriminator 1
 1951 0242 488B45B8 		movq	-72(%rbp), %rax
 1952 0246 488B55D8 		movq	-40(%rbp), %rdx
 1953 024a 488910   		movq	%rdx, (%rax)
 390:/usr/include/c++/4.8/bits/vector.tcc **** 	  this->_M_impl._M_end_of_storage = __new_start + __len;
 1954              		.loc 8 390 0 discriminator 1
 1955 024d 488B45B8 		movq	-72(%rbp), %rax
 1956 0251 488B55C0 		movq	-64(%rbp), %rdx
 1957 0255 48895008 		movq	%rdx, 8(%rax)
 391:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 1958              		.loc 8 391 0 discriminator 1
 1959 0259 488B45C8 		movq	-56(%rbp), %rax
 1960 025d 48C1E004 		salq	$4, %rax
 1961 0261 4889C2   		movq	%rax, %rdx
 1962 0264 488B45D8 		movq	-40(%rbp), %rax
 1963 0268 4801C2   		addq	%rax, %rdx
 1964 026b 488B45B8 		movq	-72(%rbp), %rax
 1965 026f 48895010 		movq	%rdx, 16(%rax)
 1966              	.LBE23:
 1967              	.LBE21:
 1968              	.LBE20:
 1969              		.loc 8 393 0 discriminator 1
 1970 0273 E99D0000 		jmp	.L86
 1970      00
 1971              	.L94:
 1972 0278 4889C3   		movq	%rax, %rbx
 1973              	.LBB27:
 1974              	.LBB26:
 1975              	.LBB24:
 335:/usr/include/c++/4.8/bits/vector.tcc **** #else
 1976              		.loc 8 335 0
 1977 027b 488D45E0 		leaq	-32(%rbp), %rax
 1978 027f 4889C7   		movq	%rax, %rdi
 1979 0282 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 1979      00
 1980 0287 4889D8   		movq	%rbx, %rax
 1981 028a 4889C7   		movq	%rax, %rdi
 1982              	.LEHB40:
 1983 028d E8000000 		call	_Unwind_Resume@PLT
 1983      00
 1984              	.LEHE40:
 1985              	.L96:
 1986 0292 4889C3   		movq	%rax, %rbx
 1987              	.LBE24:
 1988              	.LBB25:
 374:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 1989              		.loc 8 374 0
 1990 0295 E8000000 		call	__cxa_end_catch@PLT
 1990      00
 1991 029a 4889D8   		movq	%rbx, %rax
 1992 029d 4889C7   		movq	%rax, %rdi
 1993              	.LEHB41:
 1994 02a0 E8000000 		call	_Unwind_Resume@PLT
 1994      00
 1995              	.LEHE41:
 1996              	.L95:
 1997 02a5 4889C7   		movq	%rax, %rdi
 1998 02a8 E8000000 		call	__cxa_begin_catch@PLT
 1998      00
 376:/usr/include/c++/4.8/bits/vector.tcc **** 		_Alloc_traits::destroy(this->_M_impl,
 1999              		.loc 8 376 0
 2000 02ad 48837DC0 		cmpq	$0, -64(%rbp)
 2000      00
 2001 02b2 7523     		jne	.L92
 378:/usr/include/c++/4.8/bits/vector.tcc **** 	      else
 2002              		.loc 8 378 0
 2003 02b4 488B45D0 		movq	-48(%rbp), %rax
 2004 02b8 48C1E004 		salq	$4, %rax
 2005 02bc 4889C2   		movq	%rax, %rdx
 2006 02bf 488B45D8 		movq	-40(%rbp), %rax
 2007 02c3 4801C2   		addq	%rax, %rdx
 2008 02c6 488B45B8 		movq	-72(%rbp), %rax
 377:/usr/include/c++/4.8/bits/vector.tcc **** 		                       __new_start + __elems_before);
 2009              		.loc 8 377 0
 2010 02ca 4889D6   		movq	%rdx, %rsi
 2011 02cd 4889C7   		movq	%rax, %rdi
 2012              	.LEHB42:
 2013 02d0 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_@PLT
 2013      00
 2014 02d5 EB22     		jmp	.L93
 2015              	.L92:
 380:/usr/include/c++/4.8/bits/vector.tcc **** 	      _M_deallocate(__new_start, __len);
 2016              		.loc 8 380 0
 2017 02d7 488B45B8 		movq	-72(%rbp), %rax
 2018 02db 4889C7   		movq	%rax, %rdi
 2019 02de E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2019      00
 2020 02e3 4889C2   		movq	%rax, %rdx
 2021 02e6 488B4DC0 		movq	-64(%rbp), %rcx
 2022 02ea 488B45D8 		movq	-40(%rbp), %rax
 2023 02ee 4889CE   		movq	%rcx, %rsi
 2024 02f1 4889C7   		movq	%rax, %rdi
 2025 02f4 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 2025      00
 2026              	.L93:
 381:/usr/include/c++/4.8/bits/vector.tcc **** 	      __throw_exception_again;
 2027              		.loc 8 381 0
 2028 02f9 488B45B8 		movq	-72(%rbp), %rax
 2029 02fd 488B55C8 		movq	-56(%rbp), %rdx
 2030 0301 488B4DD8 		movq	-40(%rbp), %rcx
 2031 0305 4889CE   		movq	%rcx, %rsi
 2032 0308 4889C7   		movq	%rax, %rdi
 2033 030b E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 2033      00
 382:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 2034              		.loc 8 382 0
 2035 0310 E8000000 		call	__cxa_rethrow@PLT
 2035      00
 2036              	.LEHE42:
 2037              	.L86:
 2038              	.LBE25:
 2039              	.LBE26:
 2040              	.LBE27:
 2041              		.loc 8 393 0
 2042 0315 4883C450 		addq	$80, %rsp
 2043 0319 5B       		popq	%rbx
 2044 031a 415C     		popq	%r12
 2045 031c 5D       		popq	%rbp
 2046              		.cfi_def_cfa 7, 8
 2047 031d C3       		ret
 2048              		.cfi_endproc
 2049              	.LFE879:
 2050              		.section	.gcc_except_table
 2051              		.align 4
 2052              	.LLSDA879:
 2053 00b4 FF       		.byte	0xff
 2054 00b5 9B       		.byte	0x9b
 2055 00b6 35       		.uleb128 .LLSDATT879-.LLSDATTD879
 2056              	.LLSDATTD879:
 2057 00b7 01       		.byte	0x1
 2058 00b8 2B       		.uleb128 .LLSDACSE879-.LLSDACSB879
 2059              	.LLSDACSB879:
 2060 00b9 4E       		.uleb128 .LEHB35-.LFB879
 2061 00ba 2C       		.uleb128 .LEHE35-.LEHB35
 2062 00bb 00       		.uleb128 0
 2063 00bc 00       		.uleb128 0
 2064 00bd 9901     		.uleb128 .LEHB36-.LFB879
 2065 00bf 31       		.uleb128 .LEHE36-.LEHB36
 2066 00c0 F804     		.uleb128 .L94-.LFB879
 2067 00c2 00       		.uleb128 0
 2068 00c3 D101     		.uleb128 .LEHB37-.LFB879
 2069 00c5 60       		.uleb128 .LEHE37-.LEHB37
 2070 00c6 00       		.uleb128 0
 2071 00c7 00       		.uleb128 0
 2072 00c8 DE02     		.uleb128 .LEHB38-.LFB879
 2073 00ca 8201     		.uleb128 .LEHE38-.LEHB38
 2074 00cc A505     		.uleb128 .L95-.LFB879
 2075 00ce 01       		.uleb128 0x1
 2076 00cf 8804     		.uleb128 .LEHB39-.LFB879
 2077 00d1 3A       		.uleb128 .LEHE39-.LEHB39
 2078 00d2 00       		.uleb128 0
 2079 00d3 00       		.uleb128 0
 2080 00d4 8D05     		.uleb128 .LEHB40-.LFB879
 2081 00d6 05       		.uleb128 .LEHE40-.LEHB40
 2082 00d7 00       		.uleb128 0
 2083 00d8 00       		.uleb128 0
 2084 00d9 A005     		.uleb128 .LEHB41-.LFB879
 2085 00db 05       		.uleb128 .LEHE41-.LEHB41
 2086 00dc 00       		.uleb128 0
 2087 00dd 00       		.uleb128 0
 2088 00de D005     		.uleb128 .LEHB42-.LFB879
 2089 00e0 45       		.uleb128 .LEHE42-.LEHB42
 2090 00e1 9205     		.uleb128 .L96-.LFB879
 2091 00e3 00       		.uleb128 0
 2092              	.LLSDACSE879:
 2093 00e4 01       		.byte	0x1
 2094 00e5 00       		.byte	0
 2095 00e6 0000     		.align 4
 2096 00e8 00000000 		.long	0
 2097              	
 2098              	.LLSDATT879:
 2099              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1
 2101              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv,"axG",@progbits,_ZNSt6vectorISt4pairIiSsESa
 2102              		.align 2
 2103              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv
 2105              	_ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv:
 2106              	.LFB884:
 556:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 2107              		.loc 5 556 0
 2108              		.cfi_startproc
 2109 0000 55       		pushq	%rbp
 2110              		.cfi_def_cfa_offset 16
 2111              		.cfi_offset 6, -16
 2112 0001 4889E5   		movq	%rsp, %rbp
 2113              		.cfi_def_cfa_register 6
 2114 0004 4883EC20 		subq	$32, %rsp
 2115 0008 48897DE8 		movq	%rdi, -24(%rbp)
 557:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2116              		.loc 5 557 0
 2117 000c 488B45E8 		movq	-24(%rbp), %rax
 2118 0010 488D5008 		leaq	8(%rax), %rdx
 2119 0014 488D45F0 		leaq	-16(%rbp), %rax
 2120 0018 4889D6   		movq	%rdx, %rsi
 2121 001b 4889C7   		movq	%rax, %rdi
 2122 001e E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_@PLT
 2122      00
 2123 0023 488B45F0 		movq	-16(%rbp), %rax
 2124 0027 C9       		leave
 2125              		.cfi_def_cfa 7, 8
 2126 0028 C3       		ret
 2127              		.cfi_endproc
 2128              	.LFE884:
 2130              		.section	.text._ZNSaISt4pairIiSsEED2Ev,"axG",@progbits,_ZNSaISt4pairIiSsEED5Ev,comdat
 2131              		.align 2
 2132              		.weak	_ZNSaISt4pairIiSsEED2Ev
 2134              	_ZNSaISt4pairIiSsEED2Ev:
 2135              	.LFB893:
 2136              		.file 10 "/usr/include/c++/4.8/bits/allocator.h"
   1:/usr/include/c++/4.8/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/4.8/bits/allocator.h **** 
   3:/usr/include/c++/4.8/bits/allocator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/allocator.h **** //
   5:/usr/include/c++/4.8/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/allocator.h **** // any later version.
  10:/usr/include/c++/4.8/bits/allocator.h **** 
  11:/usr/include/c++/4.8/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/allocator.h **** 
  16:/usr/include/c++/4.8/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/allocator.h **** 
  20:/usr/include/c++/4.8/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/allocator.h **** 
  25:/usr/include/c++/4.8/bits/allocator.h **** /*
  26:/usr/include/c++/4.8/bits/allocator.h ****  * Copyright (c) 1996-1997
  27:/usr/include/c++/4.8/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  28:/usr/include/c++/4.8/bits/allocator.h ****  *
  29:/usr/include/c++/4.8/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  30:/usr/include/c++/4.8/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  31:/usr/include/c++/4.8/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  32:/usr/include/c++/4.8/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  33:/usr/include/c++/4.8/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  34:/usr/include/c++/4.8/bits/allocator.h ****  * representations about the suitability of this software for any
  35:/usr/include/c++/4.8/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  36:/usr/include/c++/4.8/bits/allocator.h ****  */
  37:/usr/include/c++/4.8/bits/allocator.h **** 
  38:/usr/include/c++/4.8/bits/allocator.h **** /** @file bits/allocator.h
  39:/usr/include/c++/4.8/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  40:/usr/include/c++/4.8/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  41:/usr/include/c++/4.8/bits/allocator.h ****  */
  42:/usr/include/c++/4.8/bits/allocator.h **** 
  43:/usr/include/c++/4.8/bits/allocator.h **** #ifndef _ALLOCATOR_H
  44:/usr/include/c++/4.8/bits/allocator.h **** #define _ALLOCATOR_H 1
  45:/usr/include/c++/4.8/bits/allocator.h **** 
  46:/usr/include/c++/4.8/bits/allocator.h **** #include <bits/c++allocator.h> // Define the base class to std::allocator.
  47:/usr/include/c++/4.8/bits/allocator.h **** #include <bits/memoryfwd.h>
  48:/usr/include/c++/4.8/bits/allocator.h **** #if __cplusplus >= 201103L
  49:/usr/include/c++/4.8/bits/allocator.h **** #include <type_traits>
  50:/usr/include/c++/4.8/bits/allocator.h **** #endif
  51:/usr/include/c++/4.8/bits/allocator.h **** 
  52:/usr/include/c++/4.8/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  53:/usr/include/c++/4.8/bits/allocator.h **** {
  54:/usr/include/c++/4.8/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  55:/usr/include/c++/4.8/bits/allocator.h **** 
  56:/usr/include/c++/4.8/bits/allocator.h ****   /**
  57:/usr/include/c++/4.8/bits/allocator.h ****    *  @addtogroup allocators
  58:/usr/include/c++/4.8/bits/allocator.h ****    *  @{
  59:/usr/include/c++/4.8/bits/allocator.h ****    */
  60:/usr/include/c++/4.8/bits/allocator.h **** 
  61:/usr/include/c++/4.8/bits/allocator.h ****   /// allocator<void> specialization.
  62:/usr/include/c++/4.8/bits/allocator.h ****   template<>
  63:/usr/include/c++/4.8/bits/allocator.h ****     class allocator<void>
  64:/usr/include/c++/4.8/bits/allocator.h ****     {
  65:/usr/include/c++/4.8/bits/allocator.h ****     public:
  66:/usr/include/c++/4.8/bits/allocator.h ****       typedef size_t      size_type;
  67:/usr/include/c++/4.8/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  68:/usr/include/c++/4.8/bits/allocator.h ****       typedef void*       pointer;
  69:/usr/include/c++/4.8/bits/allocator.h ****       typedef const void* const_pointer;
  70:/usr/include/c++/4.8/bits/allocator.h ****       typedef void        value_type;
  71:/usr/include/c++/4.8/bits/allocator.h **** 
  72:/usr/include/c++/4.8/bits/allocator.h ****       template<typename _Tp1>
  73:/usr/include/c++/4.8/bits/allocator.h ****         struct rebind
  74:/usr/include/c++/4.8/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  75:/usr/include/c++/4.8/bits/allocator.h **** 
  76:/usr/include/c++/4.8/bits/allocator.h **** #if __cplusplus >= 201103L
  77:/usr/include/c++/4.8/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  78:/usr/include/c++/4.8/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
  79:/usr/include/c++/4.8/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
  80:/usr/include/c++/4.8/bits/allocator.h **** #endif
  81:/usr/include/c++/4.8/bits/allocator.h ****     };
  82:/usr/include/c++/4.8/bits/allocator.h **** 
  83:/usr/include/c++/4.8/bits/allocator.h ****   /**
  84:/usr/include/c++/4.8/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  85:/usr/include/c++/4.8/bits/allocator.h ****    *
  86:/usr/include/c++/4.8/bits/allocator.h ****    *  See http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html
  87:/usr/include/c++/4.8/bits/allocator.h ****    *  for further details.
  88:/usr/include/c++/4.8/bits/allocator.h ****    *
  89:/usr/include/c++/4.8/bits/allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  90:/usr/include/c++/4.8/bits/allocator.h ****    */
  91:/usr/include/c++/4.8/bits/allocator.h ****   template<typename _Tp>
  92:/usr/include/c++/4.8/bits/allocator.h ****     class allocator: public __allocator_base<_Tp>
  93:/usr/include/c++/4.8/bits/allocator.h ****     {
  94:/usr/include/c++/4.8/bits/allocator.h ****    public:
  95:/usr/include/c++/4.8/bits/allocator.h ****       typedef size_t     size_type;
  96:/usr/include/c++/4.8/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  97:/usr/include/c++/4.8/bits/allocator.h ****       typedef _Tp*       pointer;
  98:/usr/include/c++/4.8/bits/allocator.h ****       typedef const _Tp* const_pointer;
  99:/usr/include/c++/4.8/bits/allocator.h ****       typedef _Tp&       reference;
 100:/usr/include/c++/4.8/bits/allocator.h ****       typedef const _Tp& const_reference;
 101:/usr/include/c++/4.8/bits/allocator.h ****       typedef _Tp        value_type;
 102:/usr/include/c++/4.8/bits/allocator.h **** 
 103:/usr/include/c++/4.8/bits/allocator.h ****       template<typename _Tp1>
 104:/usr/include/c++/4.8/bits/allocator.h ****         struct rebind
 105:/usr/include/c++/4.8/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 106:/usr/include/c++/4.8/bits/allocator.h **** 
 107:/usr/include/c++/4.8/bits/allocator.h **** #if __cplusplus >= 201103L
 108:/usr/include/c++/4.8/bits/allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 109:/usr/include/c++/4.8/bits/allocator.h ****       // 2103. std::allocator propagate_on_container_move_assignment
 110:/usr/include/c++/4.8/bits/allocator.h ****       typedef true_type propagate_on_container_move_assignment;
 111:/usr/include/c++/4.8/bits/allocator.h **** #endif
 112:/usr/include/c++/4.8/bits/allocator.h **** 
 113:/usr/include/c++/4.8/bits/allocator.h ****       allocator() throw() { }
 114:/usr/include/c++/4.8/bits/allocator.h **** 
 115:/usr/include/c++/4.8/bits/allocator.h ****       allocator(const allocator& __a) throw()
 116:/usr/include/c++/4.8/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 117:/usr/include/c++/4.8/bits/allocator.h **** 
 118:/usr/include/c++/4.8/bits/allocator.h ****       template<typename _Tp1>
 119:/usr/include/c++/4.8/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
 120:/usr/include/c++/4.8/bits/allocator.h **** 
 121:/usr/include/c++/4.8/bits/allocator.h ****       ~allocator() throw() { }
 2137              		.loc 10 121 0
 2138              		.cfi_startproc
 2139 0000 55       		pushq	%rbp
 2140              		.cfi_def_cfa_offset 16
 2141              		.cfi_offset 6, -16
 2142 0001 4889E5   		movq	%rsp, %rbp
 2143              		.cfi_def_cfa_register 6
 2144 0004 4883EC10 		subq	$16, %rsp
 2145 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2146              	.LBB28:
 2147              		.loc 10 121 0
 2148 000c 488B45F8 		movq	-8(%rbp), %rax
 2149 0010 4889C7   		movq	%rax, %rdi
 2150 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev@PLT
 2150      00
 2151              	.LBE28:
 2152 0018 C9       		leave
 2153              		.cfi_def_cfa 7, 8
 2154 0019 C3       		ret
 2155              		.cfi_endproc
 2156              	.LFE893:
 2158              		.weak	_ZNSaISt4pairIiSsEED1Ev
 2159              		.set	_ZNSaISt4pairIiSsEED1Ev,_ZNSaISt4pairIiSsEED2Ev
 2160              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m,"axG",@progbits,_ZNSt
 2161              		.align 2
 2162              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m
 2164              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m:
 2165              	.LFB895:
 171:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 2166              		.loc 5 171 0
 2167              		.cfi_startproc
 2168 0000 55       		pushq	%rbp
 2169              		.cfi_def_cfa_offset 16
 2170              		.cfi_offset 6, -16
 2171 0001 4889E5   		movq	%rsp, %rbp
 2172              		.cfi_def_cfa_register 6
 2173 0004 4883EC20 		subq	$32, %rsp
 2174 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2175 000c 488975F0 		movq	%rsi, -16(%rbp)
 2176 0010 488955E8 		movq	%rdx, -24(%rbp)
 173:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 2177              		.loc 5 173 0
 2178 0014 48837DF0 		cmpq	$0, -16(%rbp)
 2178      00
 2179 0019 7417     		je	.L101
 174:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 2180              		.loc 5 174 0
 2181 001b 488B45F8 		movq	-8(%rbp), %rax
 2182 001f 488B55E8 		movq	-24(%rbp), %rdx
 2183 0023 488B4DF0 		movq	-16(%rbp), %rcx
 2184 0027 4889CE   		movq	%rcx, %rsi
 2185 002a 4889C7   		movq	%rax, %rdi
 2186 002d E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m@PLT
 2186      00
 2187              	.L101:
 175:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2188              		.loc 5 175 0
 2189 0032 C9       		leave
 2190              		.cfi_def_cfa 7, 8
 2191 0033 C3       		ret
 2192              		.cfi_endproc
 2193              	.LFE895:
 2195              		.section	.text._ZSt8_DestroyIPSt4pairIiSsEEvT_S3_,"axG",@progbits,_ZSt8_DestroyIPSt4pairIiSsEEvT_S
 2196              		.weak	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_
 2198              	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_:
 2199              	.LFB896:
 122:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 2200              		.loc 6 122 0
 2201              		.cfi_startproc
 2202 0000 55       		pushq	%rbp
 2203              		.cfi_def_cfa_offset 16
 2204              		.cfi_offset 6, -16
 2205 0001 4889E5   		movq	%rsp, %rbp
 2206              		.cfi_def_cfa_register 6
 2207 0004 4883EC10 		subq	$16, %rsp
 2208 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2209 000c 488975F0 		movq	%rsi, -16(%rbp)
 2210              	.LBB29:
 126:/usr/include/c++/4.8/bits/stl_construct.h **** 	__destroy(__first, __last);
 2211              		.loc 6 126 0
 2212 0010 488B55F0 		movq	-16(%rbp), %rdx
 2213 0014 488B45F8 		movq	-8(%rbp), %rax
 2214 0018 4889D6   		movq	%rdx, %rsi
 2215 001b 4889C7   		movq	%rax, %rdi
 2216 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_@PLT
 2216      00
 2217              	.LBE29:
 128:/usr/include/c++/4.8/bits/stl_construct.h **** 
 2218              		.loc 6 128 0
 2219 0023 C9       		leave
 2220              		.cfi_def_cfa 7, 8
 2221 0024 C3       		ret
 2222              		.cfi_endproc
 2223              	.LFE896:
 2225              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_,"
 2226              		.align 2
 2227              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_
 2229              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_:
 2230              	.LFB897:
 2231              		.file 11 "/usr/include/c++/4.8/ext/new_allocator.h"
   1:/usr/include/c++/4.8/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/4.8/ext/new_allocator.h **** 
   3:/usr/include/c++/4.8/ext/new_allocator.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/ext/new_allocator.h **** //
   5:/usr/include/c++/4.8/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/ext/new_allocator.h **** // any later version.
  10:/usr/include/c++/4.8/ext/new_allocator.h **** 
  11:/usr/include/c++/4.8/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/ext/new_allocator.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/ext/new_allocator.h **** 
  16:/usr/include/c++/4.8/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/ext/new_allocator.h **** 
  20:/usr/include/c++/4.8/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/ext/new_allocator.h **** 
  25:/usr/include/c++/4.8/ext/new_allocator.h **** /** @file ext/new_allocator.h
  26:/usr/include/c++/4.8/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  27:/usr/include/c++/4.8/ext/new_allocator.h ****  */
  28:/usr/include/c++/4.8/ext/new_allocator.h **** 
  29:/usr/include/c++/4.8/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  30:/usr/include/c++/4.8/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
  31:/usr/include/c++/4.8/ext/new_allocator.h **** 
  32:/usr/include/c++/4.8/ext/new_allocator.h **** #include <bits/c++config.h>
  33:/usr/include/c++/4.8/ext/new_allocator.h **** #include <new>
  34:/usr/include/c++/4.8/ext/new_allocator.h **** #include <bits/functexcept.h>
  35:/usr/include/c++/4.8/ext/new_allocator.h **** #include <bits/move.h>
  36:/usr/include/c++/4.8/ext/new_allocator.h **** #if __cplusplus >= 201103L
  37:/usr/include/c++/4.8/ext/new_allocator.h **** #include <type_traits>
  38:/usr/include/c++/4.8/ext/new_allocator.h **** #endif
  39:/usr/include/c++/4.8/ext/new_allocator.h **** 
  40:/usr/include/c++/4.8/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  41:/usr/include/c++/4.8/ext/new_allocator.h **** {
  42:/usr/include/c++/4.8/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  43:/usr/include/c++/4.8/ext/new_allocator.h **** 
  44:/usr/include/c++/4.8/ext/new_allocator.h ****   using std::size_t;
  45:/usr/include/c++/4.8/ext/new_allocator.h ****   using std::ptrdiff_t;
  46:/usr/include/c++/4.8/ext/new_allocator.h **** 
  47:/usr/include/c++/4.8/ext/new_allocator.h ****   /**
  48:/usr/include/c++/4.8/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  49:/usr/include/c++/4.8/ext/new_allocator.h ****    *  @ingroup allocators
  50:/usr/include/c++/4.8/ext/new_allocator.h ****    *
  51:/usr/include/c++/4.8/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  52:/usr/include/c++/4.8/ext/new_allocator.h ****    *    - all allocation calls operator new
  53:/usr/include/c++/4.8/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  54:/usr/include/c++/4.8/ext/new_allocator.h ****    *
  55:/usr/include/c++/4.8/ext/new_allocator.h ****    *  @tparam  _Tp  Type of allocated object.
  56:/usr/include/c++/4.8/ext/new_allocator.h ****    */
  57:/usr/include/c++/4.8/ext/new_allocator.h ****   template<typename _Tp>
  58:/usr/include/c++/4.8/ext/new_allocator.h ****     class new_allocator
  59:/usr/include/c++/4.8/ext/new_allocator.h ****     {
  60:/usr/include/c++/4.8/ext/new_allocator.h ****     public:
  61:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef size_t     size_type;
  62:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  63:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef _Tp*       pointer;
  64:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  65:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef _Tp&       reference;
  66:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  67:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef _Tp        value_type;
  68:/usr/include/c++/4.8/ext/new_allocator.h **** 
  69:/usr/include/c++/4.8/ext/new_allocator.h ****       template<typename _Tp1>
  70:/usr/include/c++/4.8/ext/new_allocator.h ****         struct rebind
  71:/usr/include/c++/4.8/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  72:/usr/include/c++/4.8/ext/new_allocator.h **** 
  73:/usr/include/c++/4.8/ext/new_allocator.h **** #if __cplusplus >= 201103L
  74:/usr/include/c++/4.8/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  75:/usr/include/c++/4.8/ext/new_allocator.h ****       // 2103. propagate_on_container_move_assignment
  76:/usr/include/c++/4.8/ext/new_allocator.h ****       typedef std::true_type propagate_on_container_move_assignment;
  77:/usr/include/c++/4.8/ext/new_allocator.h **** #endif
  78:/usr/include/c++/4.8/ext/new_allocator.h **** 
  79:/usr/include/c++/4.8/ext/new_allocator.h ****       new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  80:/usr/include/c++/4.8/ext/new_allocator.h **** 
  81:/usr/include/c++/4.8/ext/new_allocator.h ****       new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
  82:/usr/include/c++/4.8/ext/new_allocator.h **** 
  83:/usr/include/c++/4.8/ext/new_allocator.h ****       template<typename _Tp1>
  84:/usr/include/c++/4.8/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
  85:/usr/include/c++/4.8/ext/new_allocator.h **** 
  86:/usr/include/c++/4.8/ext/new_allocator.h ****       ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
  87:/usr/include/c++/4.8/ext/new_allocator.h **** 
  88:/usr/include/c++/4.8/ext/new_allocator.h ****       pointer
  89:/usr/include/c++/4.8/ext/new_allocator.h ****       address(reference __x) const _GLIBCXX_NOEXCEPT
  90:/usr/include/c++/4.8/ext/new_allocator.h ****       { return std::__addressof(__x); }
  91:/usr/include/c++/4.8/ext/new_allocator.h **** 
  92:/usr/include/c++/4.8/ext/new_allocator.h ****       const_pointer
  93:/usr/include/c++/4.8/ext/new_allocator.h ****       address(const_reference __x) const _GLIBCXX_NOEXCEPT
  94:/usr/include/c++/4.8/ext/new_allocator.h ****       { return std::__addressof(__x); }
  95:/usr/include/c++/4.8/ext/new_allocator.h **** 
  96:/usr/include/c++/4.8/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  97:/usr/include/c++/4.8/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  98:/usr/include/c++/4.8/ext/new_allocator.h ****       pointer
  99:/usr/include/c++/4.8/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
 100:/usr/include/c++/4.8/ext/new_allocator.h ****       { 
 101:/usr/include/c++/4.8/ext/new_allocator.h **** 	if (__n > this->max_size())
 102:/usr/include/c++/4.8/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 103:/usr/include/c++/4.8/ext/new_allocator.h **** 
 104:/usr/include/c++/4.8/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 105:/usr/include/c++/4.8/ext/new_allocator.h ****       }
 106:/usr/include/c++/4.8/ext/new_allocator.h **** 
 107:/usr/include/c++/4.8/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
 108:/usr/include/c++/4.8/ext/new_allocator.h ****       void
 109:/usr/include/c++/4.8/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 110:/usr/include/c++/4.8/ext/new_allocator.h ****       { ::operator delete(__p); }
 111:/usr/include/c++/4.8/ext/new_allocator.h **** 
 112:/usr/include/c++/4.8/ext/new_allocator.h ****       size_type
 113:/usr/include/c++/4.8/ext/new_allocator.h ****       max_size() const _GLIBCXX_USE_NOEXCEPT
 114:/usr/include/c++/4.8/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 115:/usr/include/c++/4.8/ext/new_allocator.h **** 
 116:/usr/include/c++/4.8/ext/new_allocator.h **** #if __cplusplus >= 201103L
 117:/usr/include/c++/4.8/ext/new_allocator.h ****       template<typename _Up, typename... _Args>
 118:/usr/include/c++/4.8/ext/new_allocator.h ****         void
 119:/usr/include/c++/4.8/ext/new_allocator.h ****         construct(_Up* __p, _Args&&... __args)
 120:/usr/include/c++/4.8/ext/new_allocator.h **** 	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 121:/usr/include/c++/4.8/ext/new_allocator.h **** 
 122:/usr/include/c++/4.8/ext/new_allocator.h ****       template<typename _Up>
 123:/usr/include/c++/4.8/ext/new_allocator.h ****         void 
 124:/usr/include/c++/4.8/ext/new_allocator.h ****         destroy(_Up* __p) { __p->~_Up(); }
 125:/usr/include/c++/4.8/ext/new_allocator.h **** #else
 126:/usr/include/c++/4.8/ext/new_allocator.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
 127:/usr/include/c++/4.8/ext/new_allocator.h ****       // 402. wrong new expression in [some_] allocator::construct
 128:/usr/include/c++/4.8/ext/new_allocator.h ****       void 
 129:/usr/include/c++/4.8/ext/new_allocator.h ****       construct(pointer __p, const _Tp& __val) 
 2232              		.loc 11 129 0
 2233              		.cfi_startproc
 2234              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2235              		.cfi_lsda 0x1b,.LLSDA897
 2236 0000 55       		pushq	%rbp
 2237              		.cfi_def_cfa_offset 16
 2238              		.cfi_offset 6, -16
 2239 0001 4889E5   		movq	%rsp, %rbp
 2240              		.cfi_def_cfa_register 6
 2241 0004 4155     		pushq	%r13
 2242 0006 4154     		pushq	%r12
 2243 0008 53       		pushq	%rbx
 2244 0009 4883EC28 		subq	$40, %rsp
 2245              		.cfi_offset 13, -24
 2246              		.cfi_offset 12, -32
 2247              		.cfi_offset 3, -40
 2248 000d 48897DD8 		movq	%rdi, -40(%rbp)
 2249 0011 488975D0 		movq	%rsi, -48(%rbp)
 2250 0015 488955C8 		movq	%rdx, -56(%rbp)
 130:/usr/include/c++/4.8/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 2251              		.loc 11 130 0
 2252 0019 4C8B65D0 		movq	-48(%rbp), %r12
 2253 001d 4C89E6   		movq	%r12, %rsi
 2254 0020 BF380000 		movl	$56, %edi
 2254      00
 2255 0025 E8000000 		call	_ZnwmPv@PLT
 2255      00
 2256 002a 4889C3   		movq	%rax, %rbx
 2257 002d 4885DB   		testq	%rbx, %rbx
 2258 0030 7411     		je	.L105
 2259              		.loc 11 130 0 is_stmt 0 discriminator 1
 2260 0032 488B45C8 		movq	-56(%rbp), %rax
 2261 0036 4889C6   		movq	%rax, %rsi
 2262 0039 4889DF   		movq	%rbx, %rdi
 2263              	.LEHB43:
 2264 003c E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 2264      00
 2265              	.LEHE43:
 2266 0041 EB1B     		jmp	.L104
 2267              	.L105:
 2268              		.loc 11 130 0 discriminator 2
 2269 0043 EB19     		jmp	.L104
 2270              	.L108:
 2271 0045 4989C5   		movq	%rax, %r13
 2272              		.loc 11 130 0
 2273 0048 4C89E6   		movq	%r12, %rsi
 2274 004b 4889DF   		movq	%rbx, %rdi
 2275 004e E8000000 		call	_ZdlPvS_@PLT
 2275      00
 2276 0053 4C89E8   		movq	%r13, %rax
 2277 0056 4889C7   		movq	%rax, %rdi
 2278              	.LEHB44:
 2279 0059 E8000000 		call	_Unwind_Resume@PLT
 2279      00
 2280              	.LEHE44:
 2281              	.L104:
 2282 005e 4883C428 		addq	$40, %rsp
 2283 0062 5B       		popq	%rbx
 2284 0063 415C     		popq	%r12
 2285 0065 415D     		popq	%r13
 2286 0067 5D       		popq	%rbp
 2287              		.cfi_def_cfa 7, 8
 2288 0068 C3       		ret
 2289              		.cfi_endproc
 2290              	.LFE897:
 2291              		.section	.gcc_except_table
 2292              	.LLSDA897:
 2293 00ec FF       		.byte	0xff
 2294 00ed FF       		.byte	0xff
 2295 00ee 01       		.byte	0x1
 2296 00ef 08       		.uleb128 .LLSDACSE897-.LLSDACSB897
 2297              	.LLSDACSB897:
 2298 00f0 3C       		.uleb128 .LEHB43-.LFB897
 2299 00f1 05       		.uleb128 .LEHE43-.LEHB43
 2300 00f2 45       		.uleb128 .L108-.LFB897
 2301 00f3 00       		.uleb128 0
 2302 00f4 59       		.uleb128 .LEHB44-.LFB897
 2303 00f5 05       		.uleb128 .LEHE44-.LEHB44
 2304 00f6 00       		.uleb128 0
 2305 00f7 00       		.uleb128 0
 2306              	.LLSDACSE897:
 2307              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_,"
 2309              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_,"axG",@progbits,_ZNSt6vectorISt4pairIiSsE
 2310              		.align 2
 2311              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_
 2313              	_ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_:
 2314              	.LFB899:
 310:/usr/include/c++/4.8/bits/stl_vector.h ****       : _Base(__x.size(),
 2315              		.loc 5 310 0 is_stmt 1
 2316              		.cfi_startproc
 2317              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 2318              		.cfi_lsda 0x1b,.LLSDA899
 2319 0000 55       		pushq	%rbp
 2320              		.cfi_def_cfa_offset 16
 2321              		.cfi_offset 6, -16
 2322 0001 4889E5   		movq	%rsp, %rbp
 2323              		.cfi_def_cfa_register 6
 2324 0004 4155     		pushq	%r13
 2325 0006 4154     		pushq	%r12
 2326 0008 53       		pushq	%rbx
 2327 0009 4883EC18 		subq	$24, %rsp
 2328              		.cfi_offset 13, -24
 2329              		.cfi_offset 12, -32
 2330              		.cfi_offset 3, -40
 2331 000d 48897DD8 		movq	%rdi, -40(%rbp)
 2332 0011 488975D0 		movq	%rsi, -48(%rbp)
 2333              	.LBB30:
 312:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 2334              		.loc 5 312 0
 2335 0015 488B45D0 		movq	-48(%rbp), %rax
 2336 0019 4889C7   		movq	%rax, %rdi
 2337              	.LEHB45:
 2338 001c E8000000 		call	_ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2338      00
 2339 0021 4889C7   		movq	%rax, %rdi
 2340 0024 E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_@PLT
 2340      00
 2341 0029 4889C3   		movq	%rax, %rbx
 2342 002c 488B45D0 		movq	-48(%rbp), %rax
 2343 0030 4889C7   		movq	%rax, %rdi
 2344 0033 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2344      00
 2345 0038 4889C1   		movq	%rax, %rcx
 2346 003b 488B45D8 		movq	-40(%rbp), %rax
 2347 003f 4889DA   		movq	%rbx, %rdx
 2348 0042 4889CE   		movq	%rcx, %rsi
 2349 0045 4889C7   		movq	%rax, %rdi
 2350 0048 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_@PLT
 2350      00
 2351              	.LEHE45:
 316:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 2352              		.loc 5 316 0
 2353 004d 488B45D8 		movq	-40(%rbp), %rax
 2354 0051 4889C7   		movq	%rax, %rdi
 2355 0054 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2355      00
 2356 0059 4989C5   		movq	%rax, %r13
 2357 005c 488B45D8 		movq	-40(%rbp), %rax
 2358 0060 4C8B20   		movq	(%rax), %r12
 2359 0063 488B45D0 		movq	-48(%rbp), %rax
 2360 0067 4889C7   		movq	%rax, %rdi
 2361              	.LEHB46:
 2362 006a E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 2362      00
 2363 006f 4889C3   		movq	%rax, %rbx
 2364 0072 488B45D0 		movq	-48(%rbp), %rax
 2365 0076 4889C7   		movq	%rax, %rdi
 2366 0079 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 2366      00
 316:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 2367              		.loc 5 316 0 is_stmt 0 discriminator 1
 2368 007e 4C89E9   		movq	%r13, %rcx
 2369 0081 4C89E2   		movq	%r12, %rdx
 2370 0084 4889DE   		movq	%rbx, %rsi
 2371 0087 4889C7   		movq	%rax, %rdi
 2372 008a E8000000 		call	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_
 2372      00
 2373              	.LEHE46:
 313:/usr/include/c++/4.8/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 2374              		.loc 5 313 0 is_stmt 1 discriminator 2
 2375 008f 488B55D8 		movq	-40(%rbp), %rdx
 2376 0093 48894208 		movq	%rax, 8(%rdx)
 2377 0097 EB1A     		jmp	.L112
 2378              	.L111:
 2379 0099 4889C3   		movq	%rax, %rbx
 312:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 2380              		.loc 5 312 0
 2381 009c 488B45D8 		movq	-40(%rbp), %rax
 2382 00a0 4889C7   		movq	%rax, %rdi
 2383 00a3 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev@PLT
 2383      00
 2384 00a8 4889D8   		movq	%rbx, %rax
 2385 00ab 4889C7   		movq	%rax, %rdi
 2386              	.LEHB47:
 2387 00ae E8000000 		call	_Unwind_Resume@PLT
 2387      00
 2388              	.LEHE47:
 2389              	.L112:
 2390              	.LBE30:
 317:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2391              		.loc 5 317 0
 2392 00b3 4883C418 		addq	$24, %rsp
 2393 00b7 5B       		popq	%rbx
 2394 00b8 415C     		popq	%r12
 2395 00ba 415D     		popq	%r13
 2396 00bc 5D       		popq	%rbp
 2397              		.cfi_def_cfa 7, 8
 2398 00bd C3       		ret
 2399              		.cfi_endproc
 2400              	.LFE899:
 2401              		.section	.gcc_except_table
 2402              	.LLSDA899:
 2403 00f8 FF       		.byte	0xff
 2404 00f9 FF       		.byte	0xff
 2405 00fa 01       		.byte	0x1
 2406 00fb 0E       		.uleb128 .LLSDACSE899-.LLSDACSB899
 2407              	.LLSDACSB899:
 2408 00fc 1C       		.uleb128 .LEHB45-.LFB899
 2409 00fd 31       		.uleb128 .LEHE45-.LEHB45
 2410 00fe 00       		.uleb128 0
 2411 00ff 00       		.uleb128 0
 2412 0100 6A       		.uleb128 .LEHB46-.LFB899
 2413 0101 25       		.uleb128 .LEHE46-.LEHB46
 2414 0102 9901     		.uleb128 .L111-.LFB899
 2415 0104 00       		.uleb128 0
 2416 0105 AE01     		.uleb128 .LEHB47-.LFB899
 2417 0107 05       		.uleb128 .LEHE47-.LEHB47
 2418 0108 00       		.uleb128 0
 2419 0109 00       		.uleb128 0
 2420              	.LLSDACSE899:
 2421              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_,"axG",@progbits,_ZNSt6vectorISt4pairIiSsE
 2423              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EEC1ERKS3_
 2424              		.set	_ZNSt6vectorISt4pairIiSsESaIS1_EEC1ERKS3_,_ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_
 2425              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS
 2426              		.align 2
 2427              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4bas
 2429              	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:
 2430              	.LFB901:
 788:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 789:/usr/include/c++/4.8/bits/stl_iterator.h ****       const _Iterator&
 790:/usr/include/c++/4.8/bits/stl_iterator.h ****       base() const
 2431              		.loc 9 790 0
 2432              		.cfi_startproc
 2433 0000 55       		pushq	%rbp
 2434              		.cfi_def_cfa_offset 16
 2435              		.cfi_offset 6, -16
 2436 0001 4889E5   		movq	%rsp, %rbp
 2437              		.cfi_def_cfa_register 6
 2438 0004 48897DF8 		movq	%rdi, -8(%rbp)
 791:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 2439              		.loc 9 791 0
 2440 0008 488B45F8 		movq	-8(%rbp), %rax
 2441 000c 5D       		popq	%rbp
 2442              		.cfi_def_cfa 7, 8
 2443 000d C3       		ret
 2444              		.cfi_endproc
 2445              	.LFE901:
 2447              		.section	.text._ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_,"axG",@progbits
 2448              		.weak	_ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
 2450              	_ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:
 2451              	.LFB902:
 2452              		.file 12 "/usr/include/c++/4.8/bits/stl_algobase.h"
   1:/usr/include/c++/4.8/bits/stl_algobase.h **** // Core algorithmic facilities -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_algobase.h **** 
   3:/usr/include/c++/4.8/bits/stl_algobase.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_algobase.h **** //
   5:/usr/include/c++/4.8/bits/stl_algobase.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_algobase.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_algobase.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_algobase.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_algobase.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  11:/usr/include/c++/4.8/bits/stl_algobase.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_algobase.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_algobase.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_algobase.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  16:/usr/include/c++/4.8/bits/stl_algobase.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_algobase.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_algobase.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  20:/usr/include/c++/4.8/bits/stl_algobase.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_algobase.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_algobase.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_algobase.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  25:/usr/include/c++/4.8/bits/stl_algobase.h **** /*
  26:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  27:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  30:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_algobase.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  38:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  39:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_algobase.h ****  *
  42:/usr/include/c++/4.8/bits/stl_algobase.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_algobase.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_algobase.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_algobase.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_algobase.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_algobase.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_algobase.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_algobase.h ****  */
  50:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  51:/usr/include/c++/4.8/bits/stl_algobase.h **** /** @file bits/stl_algobase.h
  52:/usr/include/c++/4.8/bits/stl_algobase.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_algobase.h ****  *  Do not attempt to use it directly. @headername{algorithm}
  54:/usr/include/c++/4.8/bits/stl_algobase.h ****  */
  55:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  56:/usr/include/c++/4.8/bits/stl_algobase.h **** #ifndef _STL_ALGOBASE_H
  57:/usr/include/c++/4.8/bits/stl_algobase.h **** #define _STL_ALGOBASE_H 1
  58:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  59:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/c++config.h>
  60:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/functexcept.h>
  61:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/cpp_type_traits.h>
  62:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <ext/type_traits.h>
  63:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <ext/numeric_traits.h>
  64:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/stl_pair.h>
  65:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/stl_iterator_base_types.h>
  66:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/stl_iterator_base_funcs.h>
  67:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/stl_iterator.h>
  68:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/concept_check.h>
  69:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <debug/debug.h>
  70:/usr/include/c++/4.8/bits/stl_algobase.h **** #include <bits/move.h> // For std::swap and _GLIBCXX_MOVE
  71:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  72:/usr/include/c++/4.8/bits/stl_algobase.h **** namespace std _GLIBCXX_VISIBILITY(default)
  73:/usr/include/c++/4.8/bits/stl_algobase.h **** {
  74:/usr/include/c++/4.8/bits/stl_algobase.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  75:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  76:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus < 201103L
  77:/usr/include/c++/4.8/bits/stl_algobase.h ****   // See http://gcc.gnu.org/ml/libstdc++/2004-08/msg00167.html: in a
  78:/usr/include/c++/4.8/bits/stl_algobase.h ****   // nutshell, we are partially implementing the resolution of DR 187,
  79:/usr/include/c++/4.8/bits/stl_algobase.h ****   // when it's safe, i.e., the value_types are equal.
  80:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _BoolType>
  81:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __iter_swap
  82:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
  83:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  84:/usr/include/c++/4.8/bits/stl_algobase.h ****         static void
  85:/usr/include/c++/4.8/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
  86:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
  87:/usr/include/c++/4.8/bits/stl_algobase.h ****           typedef typename iterator_traits<_ForwardIterator1>::value_type
  88:/usr/include/c++/4.8/bits/stl_algobase.h ****             _ValueType1;
  89:/usr/include/c++/4.8/bits/stl_algobase.h ****           _ValueType1 __tmp = _GLIBCXX_MOVE(*__a);
  90:/usr/include/c++/4.8/bits/stl_algobase.h ****           *__a = _GLIBCXX_MOVE(*__b);
  91:/usr/include/c++/4.8/bits/stl_algobase.h ****           *__b = _GLIBCXX_MOVE(__tmp);
  92:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
  93:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
  94:/usr/include/c++/4.8/bits/stl_algobase.h **** 
  95:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
  96:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __iter_swap<true>
  97:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
  98:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _ForwardIterator1, typename _ForwardIterator2>
  99:/usr/include/c++/4.8/bits/stl_algobase.h ****         static void 
 100:/usr/include/c++/4.8/bits/stl_algobase.h ****         iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 101:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 102:/usr/include/c++/4.8/bits/stl_algobase.h ****           swap(*__a, *__b);
 103:/usr/include/c++/4.8/bits/stl_algobase.h ****         }
 104:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 105:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 106:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 107:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 108:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Swaps the contents of two iterators.
 109:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 110:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  An iterator.
 111:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another iterator.
 112:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   Nothing.
 113:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 114:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This function swaps the values pointed to by two iterators, not the
 115:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  iterators themselves.
 116:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 117:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 118:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline void
 119:/usr/include/c++/4.8/bits/stl_algobase.h ****     iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
 120:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 121:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 122:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 123:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 124:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 125:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 126:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 127:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus < 201103L
 128:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::value_type
 129:/usr/include/c++/4.8/bits/stl_algobase.h **** 	_ValueType1;
 130:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::value_type
 131:/usr/include/c++/4.8/bits/stl_algobase.h **** 	_ValueType2;
 132:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 133:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType1,
 134:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ValueType2>)
 135:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<_ValueType2,
 136:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ValueType1>)
 137:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 138:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator1>::reference
 139:/usr/include/c++/4.8/bits/stl_algobase.h **** 	_ReferenceType1;
 140:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_ForwardIterator2>::reference
 141:/usr/include/c++/4.8/bits/stl_algobase.h **** 	_ReferenceType2;
 142:/usr/include/c++/4.8/bits/stl_algobase.h ****       std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 143:/usr/include/c++/4.8/bits/stl_algobase.h **** 	&& __are_same<_ValueType1&, _ReferenceType1>::__value
 144:/usr/include/c++/4.8/bits/stl_algobase.h **** 	&& __are_same<_ValueType2&, _ReferenceType2>::__value>::
 145:/usr/include/c++/4.8/bits/stl_algobase.h **** 	iter_swap(__a, __b);
 146:/usr/include/c++/4.8/bits/stl_algobase.h **** #else
 147:/usr/include/c++/4.8/bits/stl_algobase.h ****       swap(*__a, *__b);
 148:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 149:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 150:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 151:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 152:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Swap the elements of two sequences.
 153:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 154:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first1  A forward iterator.
 155:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last1   A forward iterator.
 156:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first2  A forward iterator.
 157:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   An iterator equal to @p first2+(last1-first1).
 158:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 159:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  Swaps each element in the range @p [first1,last1) with the
 160:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  corresponding element in the range @p [first2,(last1-first1)).
 161:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  The ranges must not overlap.
 162:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 163:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _ForwardIterator1, typename _ForwardIterator2>
 164:/usr/include/c++/4.8/bits/stl_algobase.h ****     _ForwardIterator2
 165:/usr/include/c++/4.8/bits/stl_algobase.h ****     swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
 166:/usr/include/c++/4.8/bits/stl_algobase.h **** 		_ForwardIterator2 __first2)
 167:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 168:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 169:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 170:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ForwardIterator1>)
 171:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
 172:/usr/include/c++/4.8/bits/stl_algobase.h **** 				  _ForwardIterator2>)
 173:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first1, __last1);
 174:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 175:/usr/include/c++/4.8/bits/stl_algobase.h ****       for (; __first1 != __last1; ++__first1, ++__first2)
 176:/usr/include/c++/4.8/bits/stl_algobase.h **** 	std::iter_swap(__first1, __first2);
 177:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __first2;
 178:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 179:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 180:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 181:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 182:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 183:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 184:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 185:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 186:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 187:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 188:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 189:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  preprocessor macro.
 190:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 191:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Tp>
 192:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline const _Tp&
 193:/usr/include/c++/4.8/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b)
 194:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 195:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 196:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 197:/usr/include/c++/4.8/bits/stl_algobase.h ****       //return __b < __a ? __b : __a;
 198:/usr/include/c++/4.8/bits/stl_algobase.h ****       if (__b < __a)
 199:/usr/include/c++/4.8/bits/stl_algobase.h **** 	return __b;
 200:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __a;
 201:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 202:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 203:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 204:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 205:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 206:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 207:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 208:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 209:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 210:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This is the simple classic generic implementation.  It will work on
 211:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  temporary expressions, since they are only evaluated once, unlike a
 212:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  preprocessor macro.
 213:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 214:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Tp>
 215:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline const _Tp&
 216:/usr/include/c++/4.8/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b)
 217:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 218:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 219:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
 220:/usr/include/c++/4.8/bits/stl_algobase.h ****       //return  __a < __b ? __b : __a;
 221:/usr/include/c++/4.8/bits/stl_algobase.h ****       if (__a < __b)
 222:/usr/include/c++/4.8/bits/stl_algobase.h **** 	return __b;
 223:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __a;
 224:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 225:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 226:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 227:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 228:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 229:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 230:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 231:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 232:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   The lesser of the parameters.
 233:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 234:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 235:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 236:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 237:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 238:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline const _Tp&
 239:/usr/include/c++/4.8/bits/stl_algobase.h ****     min(const _Tp& __a, const _Tp& __b, _Compare __comp)
 240:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 241:/usr/include/c++/4.8/bits/stl_algobase.h ****       //return __comp(__b, __a) ? __b : __a;
 242:/usr/include/c++/4.8/bits/stl_algobase.h ****       if (__comp(__b, __a))
 243:/usr/include/c++/4.8/bits/stl_algobase.h **** 	return __b;
 244:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __a;
 245:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 246:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 247:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 248:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief This does what you think it does.
 249:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup sorting_algorithms
 250:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __a  A thing of arbitrary type.
 251:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __b  Another thing of arbitrary type.
 252:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __comp  A @link comparison_functors comparison functor@endlink.
 253:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   The greater of the parameters.
 254:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 255:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This will work on temporary expressions, since they are only evaluated
 256:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  once, unlike a preprocessor macro.
 257:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 258:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Tp, typename _Compare>
 259:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline const _Tp&
 260:/usr/include/c++/4.8/bits/stl_algobase.h ****     max(const _Tp& __a, const _Tp& __b, _Compare __comp)
 261:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 262:/usr/include/c++/4.8/bits/stl_algobase.h ****       //return __comp(__a, __b) ? __b : __a;
 263:/usr/include/c++/4.8/bits/stl_algobase.h ****       if (__comp(__a, __b))
 264:/usr/include/c++/4.8/bits/stl_algobase.h **** 	return __b;
 265:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __a;
 266:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 267:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 268:/usr/include/c++/4.8/bits/stl_algobase.h ****   // If _Iterator is a __normal_iterator return its base (a plain pointer,
 269:/usr/include/c++/4.8/bits/stl_algobase.h ****   // normally) otherwise return it untouched.  See copy, fill, ... 
 270:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Iterator>
 271:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct _Niter_base
 272:/usr/include/c++/4.8/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_normal_iterator<_Iterator>::__value>
 273:/usr/include/c++/4.8/bits/stl_algobase.h ****     { };
 274:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 275:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Iterator>
 276:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename _Niter_base<_Iterator>::iterator_type
 277:/usr/include/c++/4.8/bits/stl_algobase.h ****     __niter_base(_Iterator __it)
 278:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 279:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 280:/usr/include/c++/4.8/bits/stl_algobase.h ****   // Likewise, for move_iterator.
 281:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Iterator>
 282:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct _Miter_base
 283:/usr/include/c++/4.8/bits/stl_algobase.h ****     : _Iter_base<_Iterator, __is_move_iterator<_Iterator>::__value>
 284:/usr/include/c++/4.8/bits/stl_algobase.h ****     { };
 285:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 286:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Iterator>
 287:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline typename _Miter_base<_Iterator>::iterator_type
 288:/usr/include/c++/4.8/bits/stl_algobase.h ****     __miter_base(_Iterator __it)
 289:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 290:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 291:/usr/include/c++/4.8/bits/stl_algobase.h ****   // All of these auxiliary structs serve two purposes.  (1) Replace
 292:/usr/include/c++/4.8/bits/stl_algobase.h ****   // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
 293:/usr/include/c++/4.8/bits/stl_algobase.h ****   // because the input and output ranges are permitted to overlap.)
 294:/usr/include/c++/4.8/bits/stl_algobase.h ****   // (2) If we're using random access iterators, then write the loop as
 295:/usr/include/c++/4.8/bits/stl_algobase.h ****   // a for loop with an explicit count.
 296:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 297:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool, bool, typename>
 298:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move
 299:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 300:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 301:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _OI
 302:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 303:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 304:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 305:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *__result = *__first;
 306:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 307:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 308:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 309:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 310:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 311:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Category>
 312:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move<true, false, _Category>
 313:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 314:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 315:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _OI
 316:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 317:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 318:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for (; __first != __last; ++__result, ++__first)
 319:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *__result = std::move(*__first);
 320:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 321:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 322:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 323:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 324:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 325:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
 326:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move<false, false, random_access_iterator_tag>
 327:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 328:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 329:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _OI
 330:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 331:/usr/include/c++/4.8/bits/stl_algobase.h ****         { 
 332:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 333:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 334:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 335:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      *__result = *__first;
 336:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__first;
 337:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__result;
 338:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    }
 339:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 340:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 341:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 342:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 343:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 344:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
 345:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move<true, false, random_access_iterator_tag>
 346:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 347:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _II, typename _OI>
 348:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _OI
 349:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(_II __first, _II __last, _OI __result)
 350:/usr/include/c++/4.8/bits/stl_algobase.h ****         { 
 351:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  typedef typename iterator_traits<_II>::difference_type _Distance;
 352:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for(_Distance __n = __last - __first; __n > 0; --__n)
 353:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 354:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      *__result = std::move(*__first);
 355:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__first;
 356:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__result;
 357:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    }
 358:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 359:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 360:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 361:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 362:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 363:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove>
 364:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move<_IsMove, true, random_access_iterator_tag>
 365:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 366:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _Tp>
 367:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _Tp*
 368:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 369:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 370:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 371:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  if (_Num)
 372:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 373:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result + _Num;
 374:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 375:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 376:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 377:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 378:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _OI
 379:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a(_II __first, _II __last, _OI __result)
 380:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 381:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::value_type _ValueTypeI;
 382:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
 383:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_II>::iterator_category _Category;
 384:/usr/include/c++/4.8/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueTypeI)
 385:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                     && __is_pointer<_II>::__value
 386:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                     && __is_pointer<_OI>::__value
 387:/usr/include/c++/4.8/bits/stl_algobase.h **** 			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 388:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 389:/usr/include/c++/4.8/bits/stl_algobase.h ****       return std::__copy_move<_IsMove, __simple,
 390:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                      _Category>::__copy_m(__first, __last, __result);
 391:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 392:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 393:/usr/include/c++/4.8/bits/stl_algobase.h ****   // Helpers for streambuf iterators (either istream or ostream).
 394:/usr/include/c++/4.8/bits/stl_algobase.h ****   // NB: avoid including <iosfwd>, relatively large.
 395:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _CharT>
 396:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct char_traits;
 397:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 398:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 399:/usr/include/c++/4.8/bits/stl_algobase.h ****     class istreambuf_iterator;
 400:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 401:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _CharT, typename _Traits>
 402:/usr/include/c++/4.8/bits/stl_algobase.h ****     class ostreambuf_iterator;
 403:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 404:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 405:/usr/include/c++/4.8/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 406:/usr/include/c++/4.8/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 407:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a2(_CharT*, _CharT*,
 408:/usr/include/c++/4.8/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 409:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 410:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 411:/usr/include/c++/4.8/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, 
 412:/usr/include/c++/4.8/bits/stl_algobase.h **** 	     ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
 413:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a2(const _CharT*, const _CharT*,
 414:/usr/include/c++/4.8/bits/stl_algobase.h **** 		   ostreambuf_iterator<_CharT, char_traits<_CharT> >);
 415:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 416:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _CharT>
 417:/usr/include/c++/4.8/bits/stl_algobase.h ****     typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
 418:/usr/include/c++/4.8/bits/stl_algobase.h **** 				    _CharT*>::__type
 419:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
 420:/usr/include/c++/4.8/bits/stl_algobase.h **** 		   istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);
 421:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 422:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _II, typename _OI>
 423:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _OI
 424:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_a2(_II __first, _II __last, _OI __result)
 425:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 426:/usr/include/c++/4.8/bits/stl_algobase.h ****       return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 427:/usr/include/c++/4.8/bits/stl_algobase.h **** 					     std::__niter_base(__last),
 428:/usr/include/c++/4.8/bits/stl_algobase.h **** 					     std::__niter_base(__result)));
 429:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 430:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 431:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 432:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 433:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 434:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 435:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 436:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 437:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   result + (first - last)
 438:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 439:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 440:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 441:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 442:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 443:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  [first,last); the copy_backward function should be used instead.
 444:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 445:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 446:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  within [first,last).
 447:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 448:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 449:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _OI
 450:/usr/include/c++/4.8/bits/stl_algobase.h ****     copy(_II __first, _II __last, _OI __result)
 451:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 452:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 453:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 454:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 455:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 456:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 457:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 458:/usr/include/c++/4.8/bits/stl_algobase.h ****       return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
 459:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 460:/usr/include/c++/4.8/bits/stl_algobase.h **** 	       __result));
 461:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 462:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 463:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 464:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 465:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Moves the range [first,last) into result.
 466:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 467:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first  An input iterator.
 468:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last   An input iterator.
 469:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __result An output iterator.
 470:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   result + (first - last)
 471:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 472:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 473:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 474:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 475:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  optimizations such as unrolling).  Result may not be contained within
 476:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  [first,last); the move_backward function should be used instead.
 477:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 478:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  Note that the end of the output range is permitted to be contained
 479:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  within [first,last).
 480:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 481:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _II, typename _OI>
 482:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _OI
 483:/usr/include/c++/4.8/bits/stl_algobase.h ****     move(_II __first, _II __last, _OI __result)
 484:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 485:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 486:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_InputIteratorConcept<_II>)
 487:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_OutputIteratorConcept<_OI,
 488:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_II>::value_type>)
 489:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 490:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 491:/usr/include/c++/4.8/bits/stl_algobase.h ****       return std::__copy_move_a2<true>(std::__miter_base(__first),
 492:/usr/include/c++/4.8/bits/stl_algobase.h **** 				       std::__miter_base(__last), __result);
 493:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 494:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 495:/usr/include/c++/4.8/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::move(_Tp, _Up, _Vp)
 496:/usr/include/c++/4.8/bits/stl_algobase.h **** #else
 497:/usr/include/c++/4.8/bits/stl_algobase.h **** #define _GLIBCXX_MOVE3(_Tp, _Up, _Vp) std::copy(_Tp, _Up, _Vp)
 498:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 499:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 500:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool, bool, typename>
 501:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward
 502:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 503:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 504:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _BI2
 505:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 506:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 507:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  while (__first != __last)
 508:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 509:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 510:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 511:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 512:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 513:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 514:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _Category>
 515:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, _Category>
 516:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 517:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 518:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _BI2
 519:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 520:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 521:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  while (__first != __last)
 522:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 523:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 524:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 525:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 526:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 527:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 528:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
 529:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward<false, false, random_access_iterator_tag>
 530:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 531:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 532:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _BI2
 533:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 534:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 535:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 536:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 537:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 538:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 539:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 540:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 541:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 542:/usr/include/c++/4.8/bits/stl_algobase.h **** #if __cplusplus >= 201103L
 543:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<>
 544:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward<true, false, random_access_iterator_tag>
 545:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 546:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _BI1, typename _BI2>
 547:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _BI2
 548:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 549:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 550:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  typename iterator_traits<_BI1>::difference_type __n;
 551:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  for (__n = __last - __first; __n > 0; --__n)
 552:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = std::move(*--__last);
 553:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 554:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 555:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 556:/usr/include/c++/4.8/bits/stl_algobase.h **** #endif
 557:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 558:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove>
 559:/usr/include/c++/4.8/bits/stl_algobase.h ****     struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
 560:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 561:/usr/include/c++/4.8/bits/stl_algobase.h ****       template<typename _Tp>
 562:/usr/include/c++/4.8/bits/stl_algobase.h ****         static _Tp*
 563:/usr/include/c++/4.8/bits/stl_algobase.h ****         __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 564:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 565:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  const ptrdiff_t _Num = __last - __first;
 566:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  if (_Num)
 567:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 568:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result - _Num;
 569:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 570:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 571:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 572:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 573:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _BI2
 574:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 575:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 576:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::value_type _ValueType1;
 577:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI2>::value_type _ValueType2;
 578:/usr/include/c++/4.8/bits/stl_algobase.h ****       typedef typename iterator_traits<_BI1>::iterator_category _Category;
 579:/usr/include/c++/4.8/bits/stl_algobase.h ****       const bool __simple = (__is_trivial(_ValueType1)
 580:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                     && __is_pointer<_BI1>::__value
 581:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                     && __is_pointer<_BI2>::__value
 582:/usr/include/c++/4.8/bits/stl_algobase.h **** 			     && __are_same<_ValueType1, _ValueType2>::__value);
 583:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 584:/usr/include/c++/4.8/bits/stl_algobase.h ****       return std::__copy_move_backward<_IsMove, __simple,
 585:/usr/include/c++/4.8/bits/stl_algobase.h **** 	                               _Category>::__copy_move_b(__first,
 586:/usr/include/c++/4.8/bits/stl_algobase.h **** 								 __last,
 587:/usr/include/c++/4.8/bits/stl_algobase.h **** 								 __result);
 588:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 589:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 590:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<bool _IsMove, typename _BI1, typename _BI2>
 591:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _BI2
 592:/usr/include/c++/4.8/bits/stl_algobase.h ****     __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 593:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 594:/usr/include/c++/4.8/bits/stl_algobase.h ****       return _BI2(std::__copy_move_backward_a<_IsMove>
 595:/usr/include/c++/4.8/bits/stl_algobase.h **** 		  (std::__niter_base(__first), std::__niter_base(__last),
 596:/usr/include/c++/4.8/bits/stl_algobase.h **** 		   std::__niter_base(__result)));
 597:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 598:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 599:/usr/include/c++/4.8/bits/stl_algobase.h ****   /**
 600:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @brief Copies the range [first,last) into result.
 601:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @ingroup mutating_algorithms
 602:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __first  A bidirectional iterator.
 603:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __last   A bidirectional iterator.
 604:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @param  __result A bidirectional iterator.
 605:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  @return   result - (first - last)
 606:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 607:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  The function has the same effect as copy, but starts at the end of the
 608:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  range and works its way to the start, returning the start of the result.
 609:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  This inline function will boil down to a call to @c memmove whenever
 610:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  possible.  Failing that, if random access iterators are passed, then the
 611:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  loop count will be known (and therefore a candidate for compiler
 612:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  optimizations such as unrolling).
 613:/usr/include/c++/4.8/bits/stl_algobase.h ****    *
 614:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  Result may not be in the range (first,last].  Use copy instead.  Note
 615:/usr/include/c++/4.8/bits/stl_algobase.h ****    *  that the start of the output range may overlap [first,last).
 616:/usr/include/c++/4.8/bits/stl_algobase.h ****   */
 617:/usr/include/c++/4.8/bits/stl_algobase.h ****   template<typename _BI1, typename _BI2>
 618:/usr/include/c++/4.8/bits/stl_algobase.h ****     inline _BI2
 619:/usr/include/c++/4.8/bits/stl_algobase.h ****     copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 2453              		.loc 12 619 0
 2454              		.cfi_startproc
 2455 0000 55       		pushq	%rbp
 2456              		.cfi_def_cfa_offset 16
 2457              		.cfi_offset 6, -16
 2458 0001 4889E5   		movq	%rsp, %rbp
 2459              		.cfi_def_cfa_register 6
 2460 0004 53       		pushq	%rbx
 2461 0005 4883EC28 		subq	$40, %rsp
 2462              		.cfi_offset 3, -24
 2463 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2464 000d 488975E0 		movq	%rsi, -32(%rbp)
 2465 0011 488955D8 		movq	%rdx, -40(%rbp)
 620:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 621:/usr/include/c++/4.8/bits/stl_algobase.h ****       // concept requirements
 622:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_BidirectionalIteratorConcept<_BI1>)
 623:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_Mutable_BidirectionalIteratorConcept<_BI2>)
 624:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_function_requires(_ConvertibleConcept<
 625:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_BI1>::value_type,
 626:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    typename iterator_traits<_BI2>::value_type>)
 627:/usr/include/c++/4.8/bits/stl_algobase.h ****       __glibcxx_requires_valid_range(__first, __last);
 628:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 629:/usr/include/c++/4.8/bits/stl_algobase.h ****       return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
 630:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      (std::__miter_base(__first), std::__miter_base(__last),
 631:/usr/include/c++/4.8/bits/stl_algobase.h **** 	       __result));
 2466              		.loc 12 631 0
 2467 0015 488B45E0 		movq	-32(%rbp), %rax
 2468 0019 4889C7   		movq	%rax, %rdi
 2469 001c E8000000 		call	_ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_@P
 2469      00
 2470 0021 4889C3   		movq	%rax, %rbx
 2471 0024 488B45E8 		movq	-24(%rbp), %rax
 2472 0028 4889C7   		movq	%rax, %rdi
 2473 002b E8000000 		call	_ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_@P
 2473      00
 2474 0030 488B55D8 		movq	-40(%rbp), %rdx
 2475 0034 4889DE   		movq	%rbx, %rsi
 2476 0037 4889C7   		movq	%rax, %rdi
 2477 003a E8000000 		call	_ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_@PLT
 2477      00
 632:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 2478              		.loc 12 632 0
 2479 003f 4883C428 		addq	$40, %rsp
 2480 0043 5B       		popq	%rbx
 2481 0044 5D       		popq	%rbp
 2482              		.cfi_def_cfa 7, 8
 2483 0045 C3       		ret
 2484              		.cfi_endproc
 2485              	.LFE902:
 2487              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_,"axG",@progbits,_ZNSt6vectorISt4pairIiSsE
 2488              		.align 2
 2489              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_
 2491              	_ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_:
 2492              	.LFB904:
 160:/usr/include/c++/4.8/bits/vector.tcc ****     operator=(const vector<_Tp, _Alloc>& __x)
 2493              		.loc 8 160 0
 2494              		.cfi_startproc
 2495 0000 55       		pushq	%rbp
 2496              		.cfi_def_cfa_offset 16
 2497              		.cfi_offset 6, -16
 2498 0001 4889E5   		movq	%rsp, %rbp
 2499              		.cfi_def_cfa_register 6
 2500 0004 4156     		pushq	%r14
 2501 0006 4155     		pushq	%r13
 2502 0008 4154     		pushq	%r12
 2503 000a 53       		pushq	%rbx
 2504 000b 4883EC20 		subq	$32, %rsp
 2505              		.cfi_offset 14, -24
 2506              		.cfi_offset 13, -32
 2507              		.cfi_offset 12, -40
 2508              		.cfi_offset 3, -48
 2509 000f 48897DC8 		movq	%rdi, -56(%rbp)
 2510 0013 488975C0 		movq	%rsi, -64(%rbp)
 2511              	.LBB31:
 2512              	.LBB32:
 163:/usr/include/c++/4.8/bits/vector.tcc **** 	{
 2513              		.loc 8 163 0
 2514 0017 488B45C0 		movq	-64(%rbp), %rax
 2515 001b 483B45C8 		cmpq	-56(%rbp), %rax
 2516 001f 0F840302 		je	.L118
 2516      0000
 2517              	.LBB33:
 184:/usr/include/c++/4.8/bits/vector.tcc **** 	  if (__xlen > capacity())
 2518              		.loc 8 184 0
 2519 0025 488B45C0 		movq	-64(%rbp), %rax
 2520 0029 4889C7   		movq	%rax, %rdi
 2521 002c E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2521      00
 2522 0031 488945D0 		movq	%rax, -48(%rbp)
 2523              	.LBB34:
 185:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 2524              		.loc 8 185 0
 2525 0035 488B45C8 		movq	-56(%rbp), %rax
 2526 0039 4889C7   		movq	%rax, %rdi
 2527 003c E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv@PLT
 2527      00
 2528 0041 483B45D0 		cmpq	-48(%rbp), %rax
 2529 0045 0F92C0   		setb	%al
 2530 0048 84C0     		testb	%al, %al
 2531 004a 0F84BD00 		je	.L119
 2531      0000
 2532              	.LBB35:
 188:/usr/include/c++/4.8/bits/vector.tcc **** 	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 2533              		.loc 8 188 0
 2534 0050 488B45C0 		movq	-64(%rbp), %rax
 2535 0054 4889C7   		movq	%rax, %rdi
 2536 0057 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 2536      00
 2537 005c 4889C3   		movq	%rax, %rbx
 2538 005f 488B45C0 		movq	-64(%rbp), %rax
 2539 0063 4889C7   		movq	%rax, %rdi
 2540 0066 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 2540      00
 2541 006b 4889C2   		movq	%rax, %rdx
 2542 006e 488B75D0 		movq	-48(%rbp), %rsi
 2543 0072 488B45C8 		movq	-56(%rbp), %rax
 2544 0076 4889D9   		movq	%rbx, %rcx
 2545 0079 4889C7   		movq	%rax, %rdi
 2546 007c E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S
 2546      00
 2547 0081 488945D8 		movq	%rax, -40(%rbp)
 190:/usr/include/c++/4.8/bits/vector.tcc **** 	      _M_deallocate(this->_M_impl._M_start,
 2548              		.loc 8 190 0
 2549 0085 488B45C8 		movq	-56(%rbp), %rax
 2550 0089 4889C7   		movq	%rax, %rdi
 2551 008c E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2551      00
 2552 0091 4889C2   		movq	%rax, %rdx
 2553 0094 488B45C8 		movq	-56(%rbp), %rax
 2554 0098 488B4808 		movq	8(%rax), %rcx
 2555 009c 488B45C8 		movq	-56(%rbp), %rax
 2556 00a0 488B00   		movq	(%rax), %rax
 189:/usr/include/c++/4.8/bits/vector.tcc **** 			    _M_get_Tp_allocator());
 2557              		.loc 8 189 0
 2558 00a3 4889CE   		movq	%rcx, %rsi
 2559 00a6 4889C7   		movq	%rax, %rdi
 2560 00a9 E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E@PLT
 2560      00
 193:/usr/include/c++/4.8/bits/vector.tcc **** 	      this->_M_impl._M_start = __tmp;
 2561              		.loc 8 193 0
 2562 00ae 488B45C8 		movq	-56(%rbp), %rax
 2563 00b2 488B4010 		movq	16(%rax), %rax
 2564 00b6 4889C2   		movq	%rax, %rdx
 2565 00b9 488B45C8 		movq	-56(%rbp), %rax
 2566 00bd 488B00   		movq	(%rax), %rax
 2567 00c0 4829C2   		subq	%rax, %rdx
 2568 00c3 4889D0   		movq	%rdx, %rax
 2569 00c6 48C1F804 		sarq	$4, %rax
 2570 00ca 4889C2   		movq	%rax, %rdx
 2571 00cd 488B45C8 		movq	-56(%rbp), %rax
 2572 00d1 488B08   		movq	(%rax), %rcx
 2573 00d4 488B45C8 		movq	-56(%rbp), %rax
 191:/usr/include/c++/4.8/bits/vector.tcc **** 			    this->_M_impl._M_end_of_storage
 2574              		.loc 8 191 0
 2575 00d8 4889CE   		movq	%rcx, %rsi
 2576 00db 4889C7   		movq	%rax, %rdi
 2577 00de E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 2577      00
 194:/usr/include/c++/4.8/bits/vector.tcc **** 	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 2578              		.loc 8 194 0
 2579 00e3 488B45C8 		movq	-56(%rbp), %rax
 2580 00e7 488B55D8 		movq	-40(%rbp), %rdx
 2581 00eb 488910   		movq	%rdx, (%rax)
 195:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 2582              		.loc 8 195 0
 2583 00ee 488B45C8 		movq	-56(%rbp), %rax
 2584 00f2 488B00   		movq	(%rax), %rax
 2585 00f5 488B55D0 		movq	-48(%rbp), %rdx
 2586 00f9 48C1E204 		salq	$4, %rdx
 2587 00fd 4801C2   		addq	%rax, %rdx
 2588 0100 488B45C8 		movq	-56(%rbp), %rax
 2589 0104 48895010 		movq	%rdx, 16(%rax)
 2590              	.LBE35:
 2591 0108 E9010100 		jmp	.L120
 2591      00
 2592              	.L119:
 197:/usr/include/c++/4.8/bits/vector.tcc **** 	    {
 2593              		.loc 8 197 0
 2594 010d 488B45C8 		movq	-56(%rbp), %rax
 2595 0111 4889C7   		movq	%rax, %rdi
 2596 0114 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2596      00
 2597 0119 483B45D0 		cmpq	-48(%rbp), %rax
 2598 011d 0F93C0   		setnb	%al
 2599 0120 84C0     		testb	%al, %al
 2600 0122 7469     		je	.L121
 200:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 2601              		.loc 8 200 0
 2602 0124 488B45C8 		movq	-56(%rbp), %rax
 2603 0128 4889C7   		movq	%rax, %rdi
 2604 012b E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2604      00
 2605 0130 4989C4   		movq	%rax, %r12
 2606 0133 488B45C8 		movq	-56(%rbp), %rax
 2607 0137 4889C7   		movq	%rax, %rdi
 2608 013a E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 2608      00
 2609 013f 4889C3   		movq	%rax, %rbx
 2610 0142 488B45C8 		movq	-56(%rbp), %rax
 2611 0146 4889C7   		movq	%rax, %rdi
 2612 0149 E8000000 		call	_ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 2612      00
 2613 014e 4989C6   		movq	%rax, %r14
 2614 0151 488B45C0 		movq	-64(%rbp), %rax
 2615 0155 4889C7   		movq	%rax, %rdi
 2616 0158 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv@PLT
 2616      00
 2617 015d 4989C5   		movq	%rax, %r13
 2618 0160 488B45C0 		movq	-64(%rbp), %rax
 2619 0164 4889C7   		movq	%rax, %rdi
 2620 0167 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv@PLT
 2620      00
 2621 016c 4C89F2   		movq	%r14, %rdx
 2622 016f 4C89EE   		movq	%r13, %rsi
 2623 0172 4889C7   		movq	%rax, %rdi
 2624 0175 E8000000 		call	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEE
 2624      00
 199:/usr/include/c++/4.8/bits/vector.tcc **** 			    end(), _M_get_Tp_allocator());
 2625              		.loc 8 199 0
 2626 017a 4C89E2   		movq	%r12, %rdx
 2627 017d 4889DE   		movq	%rbx, %rsi
 2628 0180 4889C7   		movq	%rax, %rdi
 2629 0183 E8000000 		call	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RS
 2629      00
 2630 0188 E9810000 		jmp	.L120
 2630      00
 2631              	.L121:
 205:/usr/include/c++/4.8/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 2632              		.loc 8 205 0
 2633 018d 488B45C8 		movq	-56(%rbp), %rax
 2634 0191 488B18   		movq	(%rax), %rbx
 2635 0194 488B45C0 		movq	-64(%rbp), %rax
 2636 0198 4C8B20   		movq	(%rax), %r12
 204:/usr/include/c++/4.8/bits/vector.tcc **** 			this->_M_impl._M_start);
 2637              		.loc 8 204 0
 2638 019b 488B45C8 		movq	-56(%rbp), %rax
 2639 019f 4889C7   		movq	%rax, %rdi
 2640 01a2 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2640      00
 205:/usr/include/c++/4.8/bits/vector.tcc **** 	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 2641              		.loc 8 205 0
 2642 01a7 48C1E004 		salq	$4, %rax
 2643 01ab 498D0C04 		leaq	(%r12,%rax), %rcx
 2644 01af 488B45C0 		movq	-64(%rbp), %rax
 2645 01b3 488B00   		movq	(%rax), %rax
 204:/usr/include/c++/4.8/bits/vector.tcc **** 			this->_M_impl._M_start);
 2646              		.loc 8 204 0
 2647 01b6 4889DA   		movq	%rbx, %rdx
 2648 01b9 4889CE   		movq	%rcx, %rsi
 2649 01bc 4889C7   		movq	%rax, %rdi
 2650 01bf E8000000 		call	_ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_@PLT
 2650      00
 209:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 2651              		.loc 8 209 0
 2652 01c4 488B45C8 		movq	-56(%rbp), %rax
 2653 01c8 4889C7   		movq	%rax, %rdi
 2654 01cb E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 2654      00
 2655 01d0 4989C5   		movq	%rax, %r13
 2656 01d3 488B45C8 		movq	-56(%rbp), %rax
 2657 01d7 4C8B6008 		movq	8(%rax), %r12
 2658 01db 488B45C0 		movq	-64(%rbp), %rax
 2659 01df 488B5808 		movq	8(%rax), %rbx
 2660 01e3 488B45C0 		movq	-64(%rbp), %rax
 2661 01e7 4C8B30   		movq	(%rax), %r14
 206:/usr/include/c++/4.8/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 2662              		.loc 8 206 0
 2663 01ea 488B45C8 		movq	-56(%rbp), %rax
 2664 01ee 4889C7   		movq	%rax, %rdi
 2665 01f1 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 2665      00
 209:/usr/include/c++/4.8/bits/vector.tcc **** 	    }
 2666              		.loc 8 209 0
 2667 01f6 48C1E004 		salq	$4, %rax
 2668 01fa 4C01F0   		addq	%r14, %rax
 206:/usr/include/c++/4.8/bits/vector.tcc **** 					  __x._M_impl._M_finish,
 2669              		.loc 8 206 0
 2670 01fd 4C89E9   		movq	%r13, %rcx
 2671 0200 4C89E2   		movq	%r12, %rdx
 2672 0203 4889DE   		movq	%rbx, %rsi
 2673 0206 4889C7   		movq	%rax, %rdi
 2674 0209 E8000000 		call	_ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E@PLT
 2674      00
 2675              	.L120:
 2676              	.LBE34:
 211:/usr/include/c++/4.8/bits/vector.tcc **** 	}
 2677              		.loc 8 211 0 discriminator 1
 2678 020e 488B45C8 		movq	-56(%rbp), %rax
 2679 0212 488B00   		movq	(%rax), %rax
 2680 0215 488B55D0 		movq	-48(%rbp), %rdx
 2681 0219 48C1E204 		salq	$4, %rdx
 2682 021d 4801C2   		addq	%rax, %rdx
 2683 0220 488B45C8 		movq	-56(%rbp), %rax
 2684 0224 48895008 		movq	%rdx, 8(%rax)
 2685              	.L118:
 2686              	.LBE33:
 2687              	.LBE32:
 213:/usr/include/c++/4.8/bits/vector.tcc ****     }
 2688              		.loc 8 213 0
 2689 0228 488B45C8 		movq	-56(%rbp), %rax
 2690              	.LBE31:
 214:/usr/include/c++/4.8/bits/vector.tcc **** 
 2691              		.loc 8 214 0
 2692 022c 4883C420 		addq	$32, %rsp
 2693 0230 5B       		popq	%rbx
 2694 0231 415C     		popq	%r12
 2695 0233 415D     		popq	%r13
 2696 0235 415E     		popq	%r14
 2697 0237 5D       		popq	%rbp
 2698              		.cfi_def_cfa 7, 8
 2699 0238 C3       		ret
 2700              		.cfi_endproc
 2701              	.LFE904:
 2703              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc,"axG",@pro
 2704              		.align 2
 2705              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc
 2707              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc:
 2708              	.LFB905:
 916:/usr/include/c++/4.8/bits/stl_vector.h **** 
 917:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 918:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 919:/usr/include/c++/4.8/bits/stl_vector.h ****       push_back(value_type&& __x)
 920:/usr/include/c++/4.8/bits/stl_vector.h ****       { emplace_back(std::move(__x)); }
 921:/usr/include/c++/4.8/bits/stl_vector.h **** 
 922:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename... _Args>
 923:/usr/include/c++/4.8/bits/stl_vector.h ****         void
 924:/usr/include/c++/4.8/bits/stl_vector.h ****         emplace_back(_Args&&... __args);
 925:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 926:/usr/include/c++/4.8/bits/stl_vector.h **** 
 927:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 928:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Removes last element.
 929:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 930:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This is a typical stack operation. It shrinks the %vector by one.
 931:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 932:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that no data is returned, and if the last element's
 933:/usr/include/c++/4.8/bits/stl_vector.h ****        *  data is needed, it should be retrieved before pop_back() is
 934:/usr/include/c++/4.8/bits/stl_vector.h ****        *  called.
 935:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 936:/usr/include/c++/4.8/bits/stl_vector.h ****       void
 937:/usr/include/c++/4.8/bits/stl_vector.h ****       pop_back()
 938:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 939:/usr/include/c++/4.8/bits/stl_vector.h **** 	--this->_M_impl._M_finish;
 940:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 941:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 942:/usr/include/c++/4.8/bits/stl_vector.h **** 
 943:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 944:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 945:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts an object in %vector before specified iterator.
 946:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 947:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __args  Arguments.
 948:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 949:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 950:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert an object of type T constructed
 951:/usr/include/c++/4.8/bits/stl_vector.h ****        *  with T(std::forward<Args>(args)...) before the specified location.
 952:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a %vector
 953:/usr/include/c++/4.8/bits/stl_vector.h ****        *  and if it is frequently used the user should consider using
 954:/usr/include/c++/4.8/bits/stl_vector.h ****        *  std::list.
 955:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 956:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename... _Args>
 957:/usr/include/c++/4.8/bits/stl_vector.h ****         iterator
 958:/usr/include/c++/4.8/bits/stl_vector.h ****         emplace(iterator __position, _Args&&... __args);
 959:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
 960:/usr/include/c++/4.8/bits/stl_vector.h **** 
 961:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 962:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts given value into %vector before specified iterator.
 963:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 964:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 965:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 966:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 967:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert a copy of the given value before
 968:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 969:/usr/include/c++/4.8/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 970:/usr/include/c++/4.8/bits/stl_vector.h ****        *  used the user should consider using std::list.
 971:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 972:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 973:/usr/include/c++/4.8/bits/stl_vector.h ****       insert(iterator __position, const value_type& __x);
 974:/usr/include/c++/4.8/bits/stl_vector.h **** 
 975:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
 976:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 977:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts given rvalue into %vector before specified iterator.
 978:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 979:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
 980:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator that points to the inserted data.
 981:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 982:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert a copy of the given rvalue before
 983:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the specified location.  Note that this kind of operation
 984:/usr/include/c++/4.8/bits/stl_vector.h ****        *  could be expensive for a %vector and if it is frequently
 985:/usr/include/c++/4.8/bits/stl_vector.h ****        *  used the user should consider using std::list.
 986:/usr/include/c++/4.8/bits/stl_vector.h ****        */
 987:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
 988:/usr/include/c++/4.8/bits/stl_vector.h ****       insert(iterator __position, value_type&& __x)
 989:/usr/include/c++/4.8/bits/stl_vector.h ****       { return emplace(__position, std::move(__x)); }
 990:/usr/include/c++/4.8/bits/stl_vector.h **** 
 991:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
 992:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts an initializer_list into the %vector.
 993:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
 994:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __l  An initializer_list.
 995:/usr/include/c++/4.8/bits/stl_vector.h ****        *
 996:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert copies of the data in the 
 997:/usr/include/c++/4.8/bits/stl_vector.h ****        *  initializer_list @a l into the %vector before the location
 998:/usr/include/c++/4.8/bits/stl_vector.h ****        *  specified by @a position.
 999:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1000:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1001:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1002:/usr/include/c++/4.8/bits/stl_vector.h ****        *  consider using std::list.
1003:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1004:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1005:/usr/include/c++/4.8/bits/stl_vector.h ****       insert(iterator __position, initializer_list<value_type> __l)
1006:/usr/include/c++/4.8/bits/stl_vector.h ****       { this->insert(__position, __l.begin(), __l.end()); }
1007:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1008:/usr/include/c++/4.8/bits/stl_vector.h **** 
1009:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1010:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts a number of copies of given data into the %vector.
1011:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1012:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __n  Number of elements to be inserted.
1013:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  Data to be inserted.
1014:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1015:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert a specified number of copies of
1016:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the given data before the location specified by @a position.
1017:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1018:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1019:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1020:/usr/include/c++/4.8/bits/stl_vector.h ****        *  consider using std::list.
1021:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1022:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1023:/usr/include/c++/4.8/bits/stl_vector.h ****       insert(iterator __position, size_type __n, const value_type& __x)
1024:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_fill_insert(__position, __n, __x); }
1025:/usr/include/c++/4.8/bits/stl_vector.h **** 
1026:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1027:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Inserts a range into the %vector.
1028:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  An iterator into the %vector.
1029:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  An input iterator.
1030:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last   An input iterator.
1031:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1032:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will insert copies of the data in the range
1033:/usr/include/c++/4.8/bits/stl_vector.h ****        *  [__first,__last) into the %vector before the location specified
1034:/usr/include/c++/4.8/bits/stl_vector.h ****        *  by @a pos.
1035:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1036:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that this kind of operation could be expensive for a
1037:/usr/include/c++/4.8/bits/stl_vector.h ****        *  %vector and if it is frequently used the user should
1038:/usr/include/c++/4.8/bits/stl_vector.h ****        *  consider using std::list.
1039:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1040:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
1041:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator,
1042:/usr/include/c++/4.8/bits/stl_vector.h **** 	       typename = std::_RequireInputIter<_InputIterator>>
1043:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1044:/usr/include/c++/4.8/bits/stl_vector.h ****         insert(iterator __position, _InputIterator __first,
1045:/usr/include/c++/4.8/bits/stl_vector.h **** 	       _InputIterator __last)
1046:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_insert_dispatch(__position, __first, __last, __false_type()); }
1047:/usr/include/c++/4.8/bits/stl_vector.h **** #else
1048:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1049:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1050:/usr/include/c++/4.8/bits/stl_vector.h ****         insert(iterator __position, _InputIterator __first,
1051:/usr/include/c++/4.8/bits/stl_vector.h **** 	       _InputIterator __last)
1052:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1053:/usr/include/c++/4.8/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
1054:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
1055:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_insert_dispatch(__position, __first, __last, _Integral());
1056:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1057:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1058:/usr/include/c++/4.8/bits/stl_vector.h **** 
1059:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1060:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Remove element at given position.
1061:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __position  Iterator pointing to element to be erased.
1062:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator pointing to the next element (or end()).
1063:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1064:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will erase the element at the given position and thus
1065:/usr/include/c++/4.8/bits/stl_vector.h ****        *  shorten the %vector by one.
1066:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1067:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1068:/usr/include/c++/4.8/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1069:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1070:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the element, and that if the element is itself a pointer,
1071:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the pointed-to memory is not touched in any way.  Managing
1072:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the pointer is the user's responsibility.
1073:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1074:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
1075:/usr/include/c++/4.8/bits/stl_vector.h ****       erase(iterator __position);
1076:/usr/include/c++/4.8/bits/stl_vector.h **** 
1077:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1078:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Remove a range of elements.
1079:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __first  Iterator pointing to the first element to be erased.
1080:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __last  Iterator pointing to one past the last element to be
1081:/usr/include/c++/4.8/bits/stl_vector.h ****        *                  erased.
1082:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @return  An iterator pointing to the element pointed to by @a __last
1083:/usr/include/c++/4.8/bits/stl_vector.h ****        *           prior to erasing (or end()).
1084:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1085:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This function will erase the elements in the range
1086:/usr/include/c++/4.8/bits/stl_vector.h ****        *  [__first,__last) and shorten the %vector accordingly.
1087:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1088:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note This operation could be expensive and if it is
1089:/usr/include/c++/4.8/bits/stl_vector.h ****        *  frequently used the user should consider using std::list.
1090:/usr/include/c++/4.8/bits/stl_vector.h ****        *  The user is also cautioned that this function only erases
1091:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the elements, and that if the elements themselves are
1092:/usr/include/c++/4.8/bits/stl_vector.h ****        *  pointers, the pointed-to memory is not touched in any way.
1093:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Managing the pointer is the user's responsibility.
1094:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1095:/usr/include/c++/4.8/bits/stl_vector.h ****       iterator
1096:/usr/include/c++/4.8/bits/stl_vector.h ****       erase(iterator __first, iterator __last);
1097:/usr/include/c++/4.8/bits/stl_vector.h **** 
1098:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1099:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @brief  Swaps data with another %vector.
1100:/usr/include/c++/4.8/bits/stl_vector.h ****        *  @param  __x  A %vector of the same element and allocator types.
1101:/usr/include/c++/4.8/bits/stl_vector.h ****        *
1102:/usr/include/c++/4.8/bits/stl_vector.h ****        *  This exchanges the elements between two vectors in constant time.
1103:/usr/include/c++/4.8/bits/stl_vector.h ****        *  (Three pointers, so it should be quite fast.)
1104:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Note that the global std::swap() function is specialized such that
1105:/usr/include/c++/4.8/bits/stl_vector.h ****        *  std::swap(v1,v2) will feed to this function.
1106:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1107:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1108:/usr/include/c++/4.8/bits/stl_vector.h ****       swap(vector& __x)
1109:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
1110:/usr/include/c++/4.8/bits/stl_vector.h **** 			noexcept(_Alloc_traits::_S_nothrow_swap())
1111:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1112:/usr/include/c++/4.8/bits/stl_vector.h ****       {
1113:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_swap_data(__x._M_impl);
1114:/usr/include/c++/4.8/bits/stl_vector.h **** 	_Alloc_traits::_S_on_swap(_M_get_Tp_allocator(),
1115:/usr/include/c++/4.8/bits/stl_vector.h **** 	                          __x._M_get_Tp_allocator());
1116:/usr/include/c++/4.8/bits/stl_vector.h ****       }
1117:/usr/include/c++/4.8/bits/stl_vector.h **** 
1118:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1119:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Erases all the elements.  Note that this function only erases the
1120:/usr/include/c++/4.8/bits/stl_vector.h ****        *  elements, and that if the elements themselves are pointers, the
1121:/usr/include/c++/4.8/bits/stl_vector.h ****        *  pointed-to memory is not touched in any way.  Managing the pointer is
1122:/usr/include/c++/4.8/bits/stl_vector.h ****        *  the user's responsibility.
1123:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1124:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1125:/usr/include/c++/4.8/bits/stl_vector.h ****       clear() _GLIBCXX_NOEXCEPT
1126:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_erase_at_end(this->_M_impl._M_start); }
1127:/usr/include/c++/4.8/bits/stl_vector.h **** 
1128:/usr/include/c++/4.8/bits/stl_vector.h ****     protected:
1129:/usr/include/c++/4.8/bits/stl_vector.h ****       /**
1130:/usr/include/c++/4.8/bits/stl_vector.h ****        *  Memory expansion handler.  Uses the member allocation function to
1131:/usr/include/c++/4.8/bits/stl_vector.h ****        *  obtain @a n bytes of memory, and then copies [first,last) into it.
1132:/usr/include/c++/4.8/bits/stl_vector.h ****        */
1133:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _ForwardIterator>
1134:/usr/include/c++/4.8/bits/stl_vector.h ****         pointer
1135:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_allocate_and_copy(size_type __n,
1136:/usr/include/c++/4.8/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
1137:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1138:/usr/include/c++/4.8/bits/stl_vector.h **** 	  pointer __result = this->_M_allocate(__n);
1139:/usr/include/c++/4.8/bits/stl_vector.h **** 	  __try
1140:/usr/include/c++/4.8/bits/stl_vector.h **** 	    {
1141:/usr/include/c++/4.8/bits/stl_vector.h **** 	      std::__uninitialized_copy_a(__first, __last, __result,
1142:/usr/include/c++/4.8/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
1143:/usr/include/c++/4.8/bits/stl_vector.h **** 	      return __result;
1144:/usr/include/c++/4.8/bits/stl_vector.h **** 	    }
1145:/usr/include/c++/4.8/bits/stl_vector.h **** 	  __catch(...)
1146:/usr/include/c++/4.8/bits/stl_vector.h **** 	    {
1147:/usr/include/c++/4.8/bits/stl_vector.h **** 	      _M_deallocate(__result, __n);
1148:/usr/include/c++/4.8/bits/stl_vector.h **** 	      __throw_exception_again;
1149:/usr/include/c++/4.8/bits/stl_vector.h **** 	    }
1150:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1151:/usr/include/c++/4.8/bits/stl_vector.h **** 
1152:/usr/include/c++/4.8/bits/stl_vector.h **** 
1153:/usr/include/c++/4.8/bits/stl_vector.h ****       // Internal constructor functions follow.
1154:/usr/include/c++/4.8/bits/stl_vector.h **** 
1155:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1156:/usr/include/c++/4.8/bits/stl_vector.h **** 
1157:/usr/include/c++/4.8/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1158:/usr/include/c++/4.8/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1159:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _Integer>
1160:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1161:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
1162:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1163:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
1164:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage =
1165:/usr/include/c++/4.8/bits/stl_vector.h **** 	    this->_M_impl._M_start + static_cast<size_type>(__n);
1166:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_fill_initialize(static_cast<size_type>(__n), __value);
1167:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1168:/usr/include/c++/4.8/bits/stl_vector.h **** 
1169:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the range constructor to implement [23.1.1]/9
1170:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1171:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1172:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
1173:/usr/include/c++/4.8/bits/stl_vector.h **** 			       __false_type)
1174:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1175:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1176:/usr/include/c++/4.8/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1177:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_range_initialize(__first, __last, _IterCategory());
1178:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1179:/usr/include/c++/4.8/bits/stl_vector.h **** 
1180:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1181:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1182:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1183:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_range_initialize(_InputIterator __first,
1184:/usr/include/c++/4.8/bits/stl_vector.h **** 			    _InputIterator __last, std::input_iterator_tag)
1185:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1186:/usr/include/c++/4.8/bits/stl_vector.h **** 	  for (; __first != __last; ++__first)
1187:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
1188:/usr/include/c++/4.8/bits/stl_vector.h **** 	    emplace_back(*__first);
1189:/usr/include/c++/4.8/bits/stl_vector.h **** #else
1190:/usr/include/c++/4.8/bits/stl_vector.h **** 	    push_back(*__first);
1191:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1192:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1193:/usr/include/c++/4.8/bits/stl_vector.h **** 
1194:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the second initialize_dispatch above
1195:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _ForwardIterator>
1196:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1197:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_range_initialize(_ForwardIterator __first,
1198:/usr/include/c++/4.8/bits/stl_vector.h **** 			    _ForwardIterator __last, std::forward_iterator_tag)
1199:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1200:/usr/include/c++/4.8/bits/stl_vector.h **** 	  const size_type __n = std::distance(__first, __last);
1201:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_start = this->_M_allocate(__n);
1202:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
1203:/usr/include/c++/4.8/bits/stl_vector.h **** 	  this->_M_impl._M_finish =
1204:/usr/include/c++/4.8/bits/stl_vector.h **** 	    std::__uninitialized_copy_a(__first, __last,
1205:/usr/include/c++/4.8/bits/stl_vector.h **** 					this->_M_impl._M_start,
1206:/usr/include/c++/4.8/bits/stl_vector.h **** 					_M_get_Tp_allocator());
1207:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1208:/usr/include/c++/4.8/bits/stl_vector.h **** 
1209:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the first initialize_dispatch above and by the
1210:/usr/include/c++/4.8/bits/stl_vector.h ****       // vector(n,value,a) constructor.
1211:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1212:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_fill_initialize(size_type __n, const value_type& __value)
1213:/usr/include/c++/4.8/bits/stl_vector.h ****       {
1214:/usr/include/c++/4.8/bits/stl_vector.h **** 	std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value, 
1215:/usr/include/c++/4.8/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
1216:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
1217:/usr/include/c++/4.8/bits/stl_vector.h ****       }
1218:/usr/include/c++/4.8/bits/stl_vector.h **** 
1219:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
1220:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the vector(n) constructor.
1221:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1222:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_default_initialize(size_type __n)
1223:/usr/include/c++/4.8/bits/stl_vector.h ****       {
1224:/usr/include/c++/4.8/bits/stl_vector.h **** 	std::__uninitialized_default_n_a(this->_M_impl._M_start, __n, 
1225:/usr/include/c++/4.8/bits/stl_vector.h **** 					 _M_get_Tp_allocator());
1226:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
1227:/usr/include/c++/4.8/bits/stl_vector.h ****       }
1228:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1229:/usr/include/c++/4.8/bits/stl_vector.h **** 
1230:/usr/include/c++/4.8/bits/stl_vector.h ****       // Internal assign functions follow.  The *_aux functions do the actual
1231:/usr/include/c++/4.8/bits/stl_vector.h ****       // assignment work for the range versions.
1232:/usr/include/c++/4.8/bits/stl_vector.h **** 
1233:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1234:/usr/include/c++/4.8/bits/stl_vector.h **** 
1235:/usr/include/c++/4.8/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1236:/usr/include/c++/4.8/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1237:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _Integer>
1238:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1239:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
1240:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_fill_assign(__n, __val); }
1241:/usr/include/c++/4.8/bits/stl_vector.h **** 
1242:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the range assign to implement [23.1.1]/9
1243:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1244:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1245:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
1246:/usr/include/c++/4.8/bits/stl_vector.h **** 			   __false_type)
1247:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1248:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1249:/usr/include/c++/4.8/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1250:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_assign_aux(__first, __last, _IterCategory());
1251:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1252:/usr/include/c++/4.8/bits/stl_vector.h **** 
1253:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1254:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1255:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1256:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_assign_aux(_InputIterator __first, _InputIterator __last,
1257:/usr/include/c++/4.8/bits/stl_vector.h **** 		      std::input_iterator_tag);
1258:/usr/include/c++/4.8/bits/stl_vector.h **** 
1259:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the second assign_dispatch above
1260:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _ForwardIterator>
1261:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1262:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
1263:/usr/include/c++/4.8/bits/stl_vector.h **** 		      std::forward_iterator_tag);
1264:/usr/include/c++/4.8/bits/stl_vector.h **** 
1265:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by assign(n,t), and the range assign when it turns out
1266:/usr/include/c++/4.8/bits/stl_vector.h ****       // to be the same thing.
1267:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1268:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_fill_assign(size_type __n, const value_type& __val);
1269:/usr/include/c++/4.8/bits/stl_vector.h **** 
1270:/usr/include/c++/4.8/bits/stl_vector.h **** 
1271:/usr/include/c++/4.8/bits/stl_vector.h ****       // Internal insert functions follow.
1272:/usr/include/c++/4.8/bits/stl_vector.h **** 
1273:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1274:/usr/include/c++/4.8/bits/stl_vector.h **** 
1275:/usr/include/c++/4.8/bits/stl_vector.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
1276:/usr/include/c++/4.8/bits/stl_vector.h ****       // 438. Ambiguity in the "do the right thing" clause
1277:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _Integer>
1278:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1279:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
1280:/usr/include/c++/4.8/bits/stl_vector.h **** 			   __true_type)
1281:/usr/include/c++/4.8/bits/stl_vector.h ****         { _M_fill_insert(__pos, __n, __val); }
1282:/usr/include/c++/4.8/bits/stl_vector.h **** 
1283:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the range insert to implement [23.1.1]/9
1284:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1285:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1286:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_insert_dispatch(iterator __pos, _InputIterator __first,
1287:/usr/include/c++/4.8/bits/stl_vector.h **** 			   _InputIterator __last, __false_type)
1288:/usr/include/c++/4.8/bits/stl_vector.h ****         {
1289:/usr/include/c++/4.8/bits/stl_vector.h **** 	  typedef typename std::iterator_traits<_InputIterator>::
1290:/usr/include/c++/4.8/bits/stl_vector.h **** 	    iterator_category _IterCategory;
1291:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_range_insert(__pos, __first, __last, _IterCategory());
1292:/usr/include/c++/4.8/bits/stl_vector.h **** 	}
1293:/usr/include/c++/4.8/bits/stl_vector.h **** 
1294:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1295:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _InputIterator>
1296:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1297:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _InputIterator __first,
1298:/usr/include/c++/4.8/bits/stl_vector.h **** 			_InputIterator __last, std::input_iterator_tag);
1299:/usr/include/c++/4.8/bits/stl_vector.h **** 
1300:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the second insert_dispatch above
1301:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename _ForwardIterator>
1302:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1303:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_range_insert(iterator __pos, _ForwardIterator __first,
1304:/usr/include/c++/4.8/bits/stl_vector.h **** 			_ForwardIterator __last, std::forward_iterator_tag);
1305:/usr/include/c++/4.8/bits/stl_vector.h **** 
1306:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by insert(p,n,x), and the range insert when it turns out to be
1307:/usr/include/c++/4.8/bits/stl_vector.h ****       // the same thing.
1308:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1309:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);
1310:/usr/include/c++/4.8/bits/stl_vector.h **** 
1311:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus >= 201103L
1312:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by resize(n).
1313:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1314:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_default_append(size_type __n);
1315:/usr/include/c++/4.8/bits/stl_vector.h **** 
1316:/usr/include/c++/4.8/bits/stl_vector.h ****       bool
1317:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_shrink_to_fit();
1318:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1319:/usr/include/c++/4.8/bits/stl_vector.h **** 
1320:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by insert(p,x)
1321:/usr/include/c++/4.8/bits/stl_vector.h **** #if __cplusplus < 201103L
1322:/usr/include/c++/4.8/bits/stl_vector.h ****       void
1323:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_insert_aux(iterator __position, const value_type& __x);
1324:/usr/include/c++/4.8/bits/stl_vector.h **** #else
1325:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename... _Args>
1326:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1327:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_insert_aux(iterator __position, _Args&&... __args);
1328:/usr/include/c++/4.8/bits/stl_vector.h **** 
1329:/usr/include/c++/4.8/bits/stl_vector.h ****       template<typename... _Args>
1330:/usr/include/c++/4.8/bits/stl_vector.h ****         void
1331:/usr/include/c++/4.8/bits/stl_vector.h ****         _M_emplace_back_aux(_Args&&... __args);
1332:/usr/include/c++/4.8/bits/stl_vector.h **** #endif
1333:/usr/include/c++/4.8/bits/stl_vector.h **** 
1334:/usr/include/c++/4.8/bits/stl_vector.h ****       // Called by the latter.
1335:/usr/include/c++/4.8/bits/stl_vector.h ****       size_type
1336:/usr/include/c++/4.8/bits/stl_vector.h ****       _M_check_len(size_type __n, const char* __s) const
 2709              		.loc 5 1336 0
 2710              		.cfi_startproc
 2711 0000 55       		pushq	%rbp
 2712              		.cfi_def_cfa_offset 16
 2713              		.cfi_offset 6, -16
 2714 0001 4889E5   		movq	%rsp, %rbp
 2715              		.cfi_def_cfa_register 6
 2716 0004 53       		pushq	%rbx
 2717 0005 4883EC38 		subq	$56, %rsp
 2718              		.cfi_offset 3, -24
 2719 0009 48897DD8 		movq	%rdi, -40(%rbp)
 2720 000d 488975D0 		movq	%rsi, -48(%rbp)
 2721 0011 488955C8 		movq	%rdx, -56(%rbp)
 2722              	.LBB36:
1337:/usr/include/c++/4.8/bits/stl_vector.h ****       {
1338:/usr/include/c++/4.8/bits/stl_vector.h **** 	if (max_size() - size() < __n)
 2723              		.loc 5 1338 0
 2724 0015 488B45D8 		movq	-40(%rbp), %rax
 2725 0019 4889C7   		movq	%rax, %rdi
 2726 001c E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2726      00
 2727 0021 4889C3   		movq	%rax, %rbx
 2728 0024 488B45D8 		movq	-40(%rbp), %rax
 2729 0028 4889C7   		movq	%rax, %rdi
 2730 002b E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2730      00
 2731 0030 4829C3   		subq	%rax, %rbx
 2732 0033 4889DA   		movq	%rbx, %rdx
 2733 0036 488B45D0 		movq	-48(%rbp), %rax
 2734 003a 4839C2   		cmpq	%rax, %rdx
 2735 003d 0F92C0   		setb	%al
 2736 0040 84C0     		testb	%al, %al
 2737 0042 740C     		je	.L124
1339:/usr/include/c++/4.8/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 2738              		.loc 5 1339 0
 2739 0044 488B45C8 		movq	-56(%rbp), %rax
 2740 0048 4889C7   		movq	%rax, %rdi
 2741 004b E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 2741      00
 2742              	.L124:
1340:/usr/include/c++/4.8/bits/stl_vector.h **** 
1341:/usr/include/c++/4.8/bits/stl_vector.h **** 	const size_type __len = size() + std::max(size(), __n);
 2743              		.loc 5 1341 0
 2744 0050 488B45D8 		movq	-40(%rbp), %rax
 2745 0054 4889C7   		movq	%rax, %rdi
 2746 0057 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2746      00
 2747 005c 4889C3   		movq	%rax, %rbx
 2748 005f 488B45D8 		movq	-40(%rbp), %rax
 2749 0063 4889C7   		movq	%rax, %rdi
 2750 0066 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2750      00
 2751 006b 488945E0 		movq	%rax, -32(%rbp)
 2752 006f 488D55D0 		leaq	-48(%rbp), %rdx
 2753 0073 488D45E0 		leaq	-32(%rbp), %rax
 2754 0077 4889D6   		movq	%rdx, %rsi
 2755 007a 4889C7   		movq	%rax, %rdi
 2756 007d E8000000 		call	_ZSt3maxImERKT_S2_S2_@PLT
 2756      00
 2757 0082 488B00   		movq	(%rax), %rax
 2758 0085 4801D8   		addq	%rbx, %rax
 2759 0088 488945E8 		movq	%rax, -24(%rbp)
1342:/usr/include/c++/4.8/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 2760              		.loc 5 1342 0
 2761 008c 488B45D8 		movq	-40(%rbp), %rax
 2762 0090 4889C7   		movq	%rax, %rdi
 2763 0093 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv@PLT
 2763      00
 2764 0098 483B45E8 		cmpq	-24(%rbp), %rax
 2765 009c 7712     		ja	.L125
 2766              		.loc 5 1342 0 is_stmt 0 discriminator 2
 2767 009e 488B45D8 		movq	-40(%rbp), %rax
 2768 00a2 4889C7   		movq	%rax, %rdi
 2769 00a5 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2769      00
 2770 00aa 483B45E8 		cmpq	-24(%rbp), %rax
 2771 00ae 730E     		jnb	.L126
 2772              	.L125:
 2773              		.loc 5 1342 0 discriminator 1
 2774 00b0 488B45D8 		movq	-40(%rbp), %rax
 2775 00b4 4889C7   		movq	%rax, %rdi
 2776 00b7 E8000000 		call	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv@PLT
 2776      00
 2777 00bc EB04     		jmp	.L127
 2778              	.L126:
 2779              		.loc 5 1342 0 discriminator 3
 2780 00be 488B45E8 		movq	-24(%rbp), %rax
 2781              	.L127:
 2782              	.LBE36:
1343:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 2783              		.loc 5 1343 0 is_stmt 1 discriminator 4
 2784 00c2 4883C438 		addq	$56, %rsp
 2785 00c6 5B       		popq	%rbx
 2786 00c7 5D       		popq	%rbp
 2787              		.cfi_def_cfa 7, 8
 2788 00c8 C3       		ret
 2789              		.cfi_endproc
 2790              	.LFE905:
 2792              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv,"axG",@progbits,_ZNSt6
 2793              		.align 2
 2794              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
 2796              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:
 2797              	.LFB906:
 538:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 2798              		.loc 5 538 0
 2799              		.cfi_startproc
 2800 0000 55       		pushq	%rbp
 2801              		.cfi_def_cfa_offset 16
 2802              		.cfi_offset 6, -16
 2803 0001 4889E5   		movq	%rsp, %rbp
 2804              		.cfi_def_cfa_register 6
 2805 0004 4883EC20 		subq	$32, %rsp
 2806 0008 48897DE8 		movq	%rdi, -24(%rbp)
 539:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2807              		.loc 5 539 0
 2808 000c 488B55E8 		movq	-24(%rbp), %rdx
 2809 0010 488D45F0 		leaq	-16(%rbp), %rax
 2810 0014 4889D6   		movq	%rdx, %rsi
 2811 0017 4889C7   		movq	%rax, %rdi
 2812 001a E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 2812      00
 2813 001f 488B45F0 		movq	-16(%rbp), %rax
 2814 0023 C9       		leave
 2815              		.cfi_def_cfa 7, 8
 2816 0024 C3       		ret
 2817              		.cfi_endproc
 2818              	.LFE906:
 2820              		.section	.text._ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__norma
 2821              		.weak	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iterato
 2823              	_ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_
 2824              	.LFB907:
 792:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 793:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 794:/usr/include/c++/4.8/bits/stl_iterator.h ****   // Note: In what follows, the left- and right-hand-side iterators are
 795:/usr/include/c++/4.8/bits/stl_iterator.h ****   // allowed to vary in types (conceptually in cv-qualification) so that
 796:/usr/include/c++/4.8/bits/stl_iterator.h ****   // comparison between cv-qualified and non-cv-qualified iterators be
 797:/usr/include/c++/4.8/bits/stl_iterator.h ****   // valid.  However, the greedy and unfriendly operators in std::rel_ops
 798:/usr/include/c++/4.8/bits/stl_iterator.h ****   // will make overload resolution ambiguous (when in scope) if we don't
 799:/usr/include/c++/4.8/bits/stl_iterator.h ****   // provide overloads whose operands are of the same type.  Can someone
 800:/usr/include/c++/4.8/bits/stl_iterator.h ****   // remind me what generic programming is about? -- Gaby
 801:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 802:/usr/include/c++/4.8/bits/stl_iterator.h ****   // Forward iterator requirements
 803:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 804:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 805:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 806:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 807:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 808:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 809:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 810:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 811:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 812:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 813:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() == __rhs.base(); }
 814:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 815:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 816:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 817:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 818:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 819:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 820:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 821:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 822:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 823:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 824:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 825:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() != __rhs.base(); }
 826:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 827:/usr/include/c++/4.8/bits/stl_iterator.h ****   // Random access iterator requirements
 828:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 829:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 830:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
 831:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 832:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 833:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 834:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 835:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 836:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
 837:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 838:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() < __rhs.base(); }
 839:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 840:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 841:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 842:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
 843:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 844:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 845:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 846:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 847:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 848:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
 849:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 850:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() > __rhs.base(); }
 851:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 852:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 853:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 854:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 855:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 856:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 857:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 858:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 859:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 860:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
 861:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 862:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() <= __rhs.base(); }
 863:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 864:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 865:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 866:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
 867:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_IteratorR, _Container>& __rhs)
 868:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 869:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 870:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 871:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline bool
 872:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
 873:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 874:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() >= __rhs.base(); }
 875:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 876:/usr/include/c++/4.8/bits/stl_iterator.h ****   // _GLIBCXX_RESOLVE_LIB_DEFECTS
 877:/usr/include/c++/4.8/bits/stl_iterator.h ****   // According to the resolution of DR179 not only the various comparison
 878:/usr/include/c++/4.8/bits/stl_iterator.h ****   // operators but also operator- must accept mixed iterator/const_iterator
 879:/usr/include/c++/4.8/bits/stl_iterator.h ****   // parameters.
 880:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _IteratorL, typename _IteratorR, typename _Container>
 881:/usr/include/c++/4.8/bits/stl_iterator.h **** #if __cplusplus >= 201103L
 882:/usr/include/c++/4.8/bits/stl_iterator.h ****     // DR 685.
 883:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline auto
 884:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 885:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 886:/usr/include/c++/4.8/bits/stl_iterator.h ****     -> decltype(__lhs.base() - __rhs.base())
 887:/usr/include/c++/4.8/bits/stl_iterator.h **** #else
 888:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline typename __normal_iterator<_IteratorL, _Container>::difference_type
 889:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
 890:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const __normal_iterator<_IteratorR, _Container>& __rhs)
 891:/usr/include/c++/4.8/bits/stl_iterator.h **** #endif
 892:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 893:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 894:/usr/include/c++/4.8/bits/stl_iterator.h ****   template<typename _Iterator, typename _Container>
 895:/usr/include/c++/4.8/bits/stl_iterator.h ****     inline typename __normal_iterator<_Iterator, _Container>::difference_type
 896:/usr/include/c++/4.8/bits/stl_iterator.h ****     operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 2825              		.loc 9 896 0
 2826              		.cfi_startproc
 2827 0000 55       		pushq	%rbp
 2828              		.cfi_def_cfa_offset 16
 2829              		.cfi_offset 6, -16
 2830 0001 4889E5   		movq	%rsp, %rbp
 2831              		.cfi_def_cfa_register 6
 2832 0004 53       		pushq	%rbx
 2833 0005 4883EC18 		subq	$24, %rsp
 2834              		.cfi_offset 3, -24
 2835 0009 48897DE8 		movq	%rdi, -24(%rbp)
 2836 000d 488975E0 		movq	%rsi, -32(%rbp)
 897:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 898:/usr/include/c++/4.8/bits/stl_iterator.h ****     { return __lhs.base() - __rhs.base(); }
 2837              		.loc 9 898 0
 2838 0011 488B45E8 		movq	-24(%rbp), %rax
 2839 0015 4889C7   		movq	%rax, %rdi
 2840 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 2840      00
 2841 001d 488B00   		movq	(%rax), %rax
 2842 0020 4889C3   		movq	%rax, %rbx
 2843 0023 488B45E0 		movq	-32(%rbp), %rax
 2844 0027 4889C7   		movq	%rax, %rdi
 2845 002a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4base
 2845      00
 2846 002f 488B00   		movq	(%rax), %rax
 2847 0032 4829C3   		subq	%rax, %rbx
 2848 0035 4889D8   		movq	%rbx, %rax
 2849 0038 48C1F803 		sarq	$3, %rax
 2850 003c 4889C2   		movq	%rax, %rdx
 2851 003f 48B8B76D 		movabsq	$7905747460161236407, %rax
 2851      DBB66DDB 
 2851      B66D
 2852 0049 480FAFC2 		imulq	%rdx, %rax
 2853 004d 4883C418 		addq	$24, %rsp
 2854 0051 5B       		popq	%rbx
 2855 0052 5D       		popq	%rbp
 2856              		.cfi_def_cfa 7, 8
 2857 0053 C3       		ret
 2858              		.cfi_endproc
 2859              	.LFE907:
 2861              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm,"axG",@p
 2862              		.align 2
 2863              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm
 2865              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm:
 2866              	.LFB908:
 167:/usr/include/c++/4.8/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 2867              		.loc 5 167 0
 2868              		.cfi_startproc
 2869 0000 55       		pushq	%rbp
 2870              		.cfi_def_cfa_offset 16
 2871              		.cfi_offset 6, -16
 2872 0001 4889E5   		movq	%rsp, %rbp
 2873              		.cfi_def_cfa_register 6
 2874 0004 4883EC10 		subq	$16, %rsp
 2875 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2876 000c 488975F0 		movq	%rsi, -16(%rbp)
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2877              		.loc 5 168 0
 2878 0010 48837DF0 		cmpq	$0, -16(%rbp)
 2878      00
 2879 0015 741A     		je	.L134
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2880              		.loc 5 168 0 is_stmt 0 discriminator 1
 2881 0017 488B45F8 		movq	-8(%rbp), %rax
 2882 001b 488B4DF0 		movq	-16(%rbp), %rcx
 2883 001f BA000000 		movl	$0, %edx
 2883      00
 2884 0024 4889CE   		movq	%rcx, %rsi
 2885 0027 4889C7   		movq	%rax, %rdi
 2886 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv@PLT
 2886      00
 2887 002f EB05     		jmp	.L135
 2888              	.L134:
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2889              		.loc 5 168 0 discriminator 2
 2890 0031 B8000000 		movl	$0, %eax
 2890      00
 2891              	.L135:
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2892              		.loc 5 168 0 discriminator 3
 2893 0036 C9       		leave
 2894              		.cfi_def_cfa 7, 8
 2895 0037 C3       		ret
 2896              		.cfi_endproc
 2897              	.LFE908:
 2899              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv,
 2900              		.align 2
 2901              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 2903              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 2904              	.LFB909:
 113:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 2905              		.loc 5 113 0 is_stmt 1
 2906              		.cfi_startproc
 2907 0000 55       		pushq	%rbp
 2908              		.cfi_def_cfa_offset 16
 2909              		.cfi_offset 6, -16
 2910 0001 4889E5   		movq	%rsp, %rbp
 2911              		.cfi_def_cfa_register 6
 2912 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.8/bits/stl_vector.h **** 
 2913              		.loc 5 114 0
 2914 0008 488B45F8 		movq	-8(%rbp), %rax
 2915 000c 5D       		popq	%rbp
 2916              		.cfi_def_cfa 7, 8
 2917 000d C3       		ret
 2918              		.cfi_endproc
 2919              	.LFE909:
 2921              		.section	.text._ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_E
 2922              		.weak	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_
 2924              	_ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_
 2925              	.LFB910:
 2926              		.file 13 "/usr/include/c++/4.8/bits/stl_uninitialized.h"
   1:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // Raw memory manipulators -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
   3:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_uninitialized.h **** //
   5:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  11:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  16:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  20:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_uninitialized.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  25:/usr/include/c++/4.8/bits/stl_uninitialized.h **** /*
  26:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  27:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  30:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  38:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  39:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Copyright (c) 1996,1997
  40:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *
  42:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  */
  50:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  51:/usr/include/c++/4.8/bits/stl_uninitialized.h **** /** @file bits/stl_uninitialized.h
  52:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  *  Do not attempt to use it directly. @headername{memory}
  54:/usr/include/c++/4.8/bits/stl_uninitialized.h ****  */
  55:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  56:/usr/include/c++/4.8/bits/stl_uninitialized.h **** #ifndef _STL_UNINITIALIZED_H
  57:/usr/include/c++/4.8/bits/stl_uninitialized.h **** #define _STL_UNINITIALIZED_H 1
  58:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  59:/usr/include/c++/4.8/bits/stl_uninitialized.h **** namespace std _GLIBCXX_VISIBILITY(default)
  60:/usr/include/c++/4.8/bits/stl_uninitialized.h **** {
  61:/usr/include/c++/4.8/bits/stl_uninitialized.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  62:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  63:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<bool _TrivialValueTypes>
  64:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_copy
  65:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
  66:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  67:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static _ForwardIterator
  68:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  69:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  70:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         {
  71:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __result;
  72:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __try
  73:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      for (; __first != __last; ++__first, ++__cur)
  75:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
  76:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      return __cur;
  77:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
  78:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __catch(...)
  79:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
  80:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      std::_Destroy(__result, __cur);
  81:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      __throw_exception_again;
  82:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
  83:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
  84:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
  85:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  86:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<>
  87:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_copy<true>
  88:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
  89:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _InputIterator, typename _ForwardIterator>
  90:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static _ForwardIterator
  91:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_copy(_InputIterator __first, _InputIterator __last,
  92:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
  93:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         { return std::copy(__first, __last, __result); }
  94:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
  95:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
  96:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   /**
  97:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @brief Copies the range [first,last) into result.
  98:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
  99:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 100:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __result An output iterator.
 101:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @return   __result + (__first - __last)
 102:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *
 103:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  Like copy(), but does not require an initialized output range.
 104:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   */
 105:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator>
 106:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline _ForwardIterator
 107:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     uninitialized_copy(_InputIterator __first, _InputIterator __last,
 108:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 109:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 110:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_InputIterator>::value_type
 111:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	_ValueType1;
 112:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 113:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	_ValueType2;
 114:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 115:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       return std::__uninitialized_copy<(__is_trivial(_ValueType1)
 116:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 					&& __is_trivial(_ValueType2))>::
 117:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	__uninit_copy(__first, __last, __result);
 118:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 119:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 120:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 121:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 122:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_fill
 123:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 124:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 125:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static void
 126:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 127:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 128:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         {
 129:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 130:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __try
 131:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 132:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      for (; __cur != __last; ++__cur)
 133:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 134:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 135:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __catch(...)
 136:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 137:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 138:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 139:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 140:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 141:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 142:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 143:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<>
 144:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_fill<true>
 145:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 146:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Tp>
 147:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static void
 148:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_fill(_ForwardIterator __first, _ForwardIterator __last,
 149:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      const _Tp& __x)
 150:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         { std::fill(__first, __last, __x); }
 151:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 152:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 153:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   /**
 154:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,last).
 155:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 156:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __last   An input iterator.
 157:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 158:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @return   Nothing.
 159:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *
 160:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  Like fill(), but does not require an initialized output range.
 161:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   */
 162:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Tp>
 163:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline void
 164:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
 165:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		       const _Tp& __x)
 166:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 167:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 168:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	_ValueType;
 169:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 170:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       std::__uninitialized_fill<__is_trivial(_ValueType)>::
 171:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	__uninit_fill(__first, __last, __x);
 172:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 173:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 174:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 175:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<bool _TrivialValueType>
 176:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n
 177:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 178:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 179:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static void
 180:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 181:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			const _Tp& __x)
 182:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         {
 183:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  _ForwardIterator __cur = __first;
 184:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __try
 185:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 186:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      for (; __n > 0; --__n, ++__cur)
 187:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), __x);
 188:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 189:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __catch(...)
 190:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 191:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      std::_Destroy(__first, __cur);
 192:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 193:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 194:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 195:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 196:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 197:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<>
 198:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     struct __uninitialized_fill_n<true>
 199:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 200:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       template<typename _ForwardIterator, typename _Size, typename _Tp>
 201:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         static void
 202:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         __uninit_fill_n(_ForwardIterator __first, _Size __n,
 203:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			const _Tp& __x)
 204:/usr/include/c++/4.8/bits/stl_uninitialized.h ****         { std::fill_n(__first, __n, __x); }
 205:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 206:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 207:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   /**
 208:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @brief Copies the value x into the range [first,first+n).
 209:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __first  An input iterator.
 210:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __n      The number of copies to make.
 211:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @param  __x      The source value.
 212:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  @return   Nothing.
 213:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *
 214:/usr/include/c++/4.8/bits/stl_uninitialized.h ****    *  Like fill_n(), but does not require an initialized output range.
 215:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   */
 216:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _ForwardIterator, typename _Size, typename _Tp>
 217:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline void
 218:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 219:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 220:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 221:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	_ValueType;
 222:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 223:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       std::__uninitialized_fill_n<__is_trivial(_ValueType)>::
 224:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	__uninit_fill_n(__first, __n, __x);
 225:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 226:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 227:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   // Extensions: versions of uninitialized_copy, uninitialized_fill,
 228:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   //  and uninitialized_fill_n that take an allocator parameter.
 229:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   //  We dispatch back to the standard versions when we're given the
 230:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   //  default allocator.  For nondefault allocators we do not use 
 231:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   //  any of the POD optimizations.
 232:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 233:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 234:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	   typename _Allocator>
 235:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     _ForwardIterator
 236:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 237:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 238:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 239:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       _ForwardIterator __cur = __result;
 240:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       __try
 241:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	{
 242:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
 243:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  for (; __first != __last; ++__first, ++__cur)
 244:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    __traits::construct(__alloc, std::__addressof(*__cur), *__first);
 245:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  return __cur;
 246:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 247:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       __catch(...)
 248:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	{
 249:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  std::_Destroy(__result, __cur, __alloc);
 250:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __throw_exception_again;
 251:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	}
 252:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 253:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 254:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
 255:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline _ForwardIterator
 256:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 257:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 258:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     { return std::uninitialized_copy(__first, __last, __result); }
 259:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 260:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 261:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	   typename _Allocator>
 262:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline _ForwardIterator
 263:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 264:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, _Allocator& __alloc)
 265:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 266:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a(_GLIBCXX_MAKE_MOVE_ITERATOR(__first),
 267:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 					 _GLIBCXX_MAKE_MOVE_ITERATOR(__last),
 268:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 					 __result, __alloc);
 269:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 270:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 271:/usr/include/c++/4.8/bits/stl_uninitialized.h ****   template<typename _InputIterator, typename _ForwardIterator,
 272:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	   typename _Allocator>
 273:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     inline _ForwardIterator
 274:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     __uninitialized_move_if_noexcept_a(_InputIterator __first,
 2927              		.loc 13 274 0
 2928              		.cfi_startproc
 2929 0000 55       		pushq	%rbp
 2930              		.cfi_def_cfa_offset 16
 2931              		.cfi_offset 6, -16
 2932 0001 4889E5   		movq	%rsp, %rbp
 2933              		.cfi_def_cfa_register 6
 2934 0004 4883EC20 		subq	$32, %rsp
 2935 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2936 000c 488975F0 		movq	%rsi, -16(%rbp)
 2937 0010 488955E8 		movq	%rdx, -24(%rbp)
 2938 0014 48894DE0 		movq	%rcx, -32(%rbp)
 275:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 276:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 				       _ForwardIterator __result,
 277:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 				       _Allocator& __alloc)
 278:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     {
 279:/usr/include/c++/4.8/bits/stl_uninitialized.h ****       return std::__uninitialized_copy_a
 280:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 281:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 2939              		.loc 13 281 0
 2940 0018 488B4DE0 		movq	-32(%rbp), %rcx
 2941 001c 488B55E8 		movq	-24(%rbp), %rdx
 2942 0020 488B75F0 		movq	-16(%rbp), %rsi
 2943 0024 488B45F8 		movq	-8(%rbp), %rax
 2944 0028 4889C7   		movq	%rax, %rdi
 2945 002b E8000000 		call	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E@PLT
 2945      00
 282:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 2946              		.loc 13 282 0
 2947 0030 C9       		leave
 2948              		.cfi_def_cfa 7, 8
 2949 0031 C3       		ret
 2950              		.cfi_endproc
 2951              	.LFE910:
 2953              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_
 2954              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_
 2956              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_:
 2957              	.LFB911:
 217:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 218:/usr/include/c++/4.8/ext/alloc_traits.h ****     static void destroy(_Alloc& __a, pointer __p)
 2958              		.loc 7 218 0
 2959              		.cfi_startproc
 2960 0000 55       		pushq	%rbp
 2961              		.cfi_def_cfa_offset 16
 2962              		.cfi_offset 6, -16
 2963 0001 4889E5   		movq	%rsp, %rbp
 2964              		.cfi_def_cfa_register 6
 2965 0004 4883EC10 		subq	$16, %rsp
 2966 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2967 000c 488975F0 		movq	%rsi, -16(%rbp)
 219:/usr/include/c++/4.8/ext/alloc_traits.h ****     { __a.destroy(__p); }
 2968              		.loc 7 219 0
 2969 0010 488B55F0 		movq	-16(%rbp), %rdx
 2970 0014 488B45F8 		movq	-8(%rbp), %rax
 2971 0018 4889D6   		movq	%rdx, %rsi
 2972 001b 4889C7   		movq	%rax, %rdi
 2973 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_@PLT
 2973      00
 2974 0023 C9       		leave
 2975              		.cfi_def_cfa 7, 8
 2976 0024 C3       		ret
 2977              		.cfi_endproc
 2978              	.LFE911:
 2980              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E,"axG",@progbits,_Z
 2981              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
 2983              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:
 2984              	.LFB912:
 148:/usr/include/c++/4.8/bits/stl_construct.h **** 	     allocator<_Tp>&)
 2985              		.loc 6 148 0
 2986              		.cfi_startproc
 2987 0000 55       		pushq	%rbp
 2988              		.cfi_def_cfa_offset 16
 2989              		.cfi_offset 6, -16
 2990 0001 4889E5   		movq	%rsp, %rbp
 2991              		.cfi_def_cfa_register 6
 2992 0004 4883EC20 		subq	$32, %rsp
 2993 0008 48897DF8 		movq	%rdi, -8(%rbp)
 2994 000c 488975F0 		movq	%rsi, -16(%rbp)
 2995 0010 488955E8 		movq	%rdx, -24(%rbp)
 151:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 2996              		.loc 6 151 0
 2997 0014 488B55F0 		movq	-16(%rbp), %rdx
 2998 0018 488B45F8 		movq	-8(%rbp), %rax
 2999 001c 4889D6   		movq	%rdx, %rsi
 3000 001f 4889C7   		movq	%rax, %rdi
 3001 0022 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 3001      00
 3002              		.loc 6 152 0
 3003 0027 C9       		leave
 3004              		.cfi_def_cfa 7, 8
 3005 0028 C3       		ret
 3006              		.cfi_endproc
 3007              	.LFE912:
 3009              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m,"a
 3010              		.align 2
 3011              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
 3013              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:
 3014              	.LFB913:
 171:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 3015              		.loc 5 171 0
 3016              		.cfi_startproc
 3017 0000 55       		pushq	%rbp
 3018              		.cfi_def_cfa_offset 16
 3019              		.cfi_offset 6, -16
 3020 0001 4889E5   		movq	%rsp, %rbp
 3021              		.cfi_def_cfa_register 6
 3022 0004 4883EC20 		subq	$32, %rsp
 3023 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3024 000c 488975F0 		movq	%rsi, -16(%rbp)
 3025 0010 488955E8 		movq	%rdx, -24(%rbp)
 173:/usr/include/c++/4.8/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 3026              		.loc 5 173 0
 3027 0014 48837DF0 		cmpq	$0, -16(%rbp)
 3027      00
 3028 0019 7417     		je	.L143
 174:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 3029              		.loc 5 174 0
 3030 001b 488B45F8 		movq	-8(%rbp), %rax
 3031 001f 488B55E8 		movq	-24(%rbp), %rdx
 3032 0023 488B4DF0 		movq	-16(%rbp), %rcx
 3033 0027 4889CE   		movq	%rcx, %rsi
 3034 002a 4889C7   		movq	%rax, %rdi
 3035 002d E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m@PLT
 3035      00
 3036              	.L143:
 175:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3037              		.loc 5 175 0
 3038 0032 C9       		leave
 3039              		.cfi_def_cfa 7, 8
 3040 0033 C3       		ret
 3041              		.cfi_endproc
 3042              	.LFE913:
 3044              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2
 3045              		.align 2
 3046              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERK
 3048              	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:
 3049              	.LFB915:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 3050              		.loc 9 726 0
 3051              		.cfi_startproc
 3052 0000 55       		pushq	%rbp
 3053              		.cfi_def_cfa_offset 16
 3054              		.cfi_offset 6, -16
 3055 0001 4889E5   		movq	%rsp, %rbp
 3056              		.cfi_def_cfa_register 6
 3057 0004 48897DF8 		movq	%rdi, -8(%rbp)
 3058 0008 488975F0 		movq	%rsi, -16(%rbp)
 3059              	.LBB37:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 3060              		.loc 9 726 0
 3061 000c 488B45F0 		movq	-16(%rbp), %rax
 3062 0010 488B10   		movq	(%rax), %rdx
 3063 0013 488B45F8 		movq	-8(%rbp), %rax
 3064 0017 488910   		movq	%rdx, (%rax)
 3065              	.LBE37:
 3066 001a 5D       		popq	%rbp
 3067              		.cfi_def_cfa 7, 8
 3068 001b C3       		ret
 3069              		.cfi_endproc
 3070              	.LFE915:
 3072              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERK
 3073              		.set	_ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS
 3074              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_,"axG",@progbits,_ZN9
 3075              		.align 2
 3076              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_
 3078              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_:
 3079              	.LFB917:
 129:/usr/include/c++/4.8/ext/new_allocator.h ****       { ::new((void *)__p) _Tp(__val); }
 3080              		.loc 11 129 0
 3081              		.cfi_startproc
 3082              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3083              		.cfi_lsda 0x1b,.LLSDA917
 3084 0000 55       		pushq	%rbp
 3085              		.cfi_def_cfa_offset 16
 3086              		.cfi_offset 6, -16
 3087 0001 4889E5   		movq	%rsp, %rbp
 3088              		.cfi_def_cfa_register 6
 3089 0004 4155     		pushq	%r13
 3090 0006 4154     		pushq	%r12
 3091 0008 53       		pushq	%rbx
 3092 0009 4883EC28 		subq	$40, %rsp
 3093              		.cfi_offset 13, -24
 3094              		.cfi_offset 12, -32
 3095              		.cfi_offset 3, -40
 3096 000d 48897DD8 		movq	%rdi, -40(%rbp)
 3097 0011 488975D0 		movq	%rsi, -48(%rbp)
 3098 0015 488955C8 		movq	%rdx, -56(%rbp)
 3099              		.loc 11 130 0
 3100 0019 4C8B65D0 		movq	-48(%rbp), %r12
 3101 001d 4C89E6   		movq	%r12, %rsi
 3102 0020 BF100000 		movl	$16, %edi
 3102      00
 3103 0025 E8000000 		call	_ZnwmPv@PLT
 3103      00
 3104 002a 4889C3   		movq	%rax, %rbx
 3105 002d 4885DB   		testq	%rbx, %rbx
 3106 0030 7411     		je	.L147
 3107              		.loc 11 130 0 is_stmt 0 discriminator 1
 3108 0032 488B45C8 		movq	-56(%rbp), %rax
 3109 0036 4889C6   		movq	%rax, %rsi
 3110 0039 4889DF   		movq	%rbx, %rdi
 3111              	.LEHB48:
 3112 003c E8000000 		call	_ZNSt4pairIiSsEC1ERKS0_@PLT
 3112      00
 3113              	.LEHE48:
 3114 0041 EB1B     		jmp	.L146
 3115              	.L147:
 3116              		.loc 11 130 0 discriminator 2
 3117 0043 EB19     		jmp	.L146
 3118              	.L150:
 3119 0045 4989C5   		movq	%rax, %r13
 3120              		.loc 11 130 0
 3121 0048 4C89E6   		movq	%r12, %rsi
 3122 004b 4889DF   		movq	%rbx, %rdi
 3123 004e E8000000 		call	_ZdlPvS_@PLT
 3123      00
 3124 0053 4C89E8   		movq	%r13, %rax
 3125 0056 4889C7   		movq	%rax, %rdi
 3126              	.LEHB49:
 3127 0059 E8000000 		call	_Unwind_Resume@PLT
 3127      00
 3128              	.LEHE49:
 3129              	.L146:
 3130 005e 4883C428 		addq	$40, %rsp
 3131 0062 5B       		popq	%rbx
 3132 0063 415C     		popq	%r12
 3133 0065 415D     		popq	%r13
 3134 0067 5D       		popq	%rbp
 3135              		.cfi_def_cfa 7, 8
 3136 0068 C3       		ret
 3137              		.cfi_endproc
 3138              	.LFE917:
 3139              		.section	.gcc_except_table
 3140              	.LLSDA917:
 3141 010a FF       		.byte	0xff
 3142 010b FF       		.byte	0xff
 3143 010c 01       		.byte	0x1
 3144 010d 08       		.uleb128 .LLSDACSE917-.LLSDACSB917
 3145              	.LLSDACSB917:
 3146 010e 3C       		.uleb128 .LEHB48-.LFB917
 3147 010f 05       		.uleb128 .LEHE48-.LEHB48
 3148 0110 45       		.uleb128 .L150-.LFB917
 3149 0111 00       		.uleb128 0
 3150 0112 59       		.uleb128 .LEHB49-.LFB917
 3151 0113 05       		.uleb128 .LEHE49-.LEHB49
 3152 0114 00       		.uleb128 0
 3153 0115 00       		.uleb128 0
 3154              	.LLSDACSE917:
 3155              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_,"axG",@progbits,_ZN9
 3157              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv,"axG",
 3158              		.align 2
 3159              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
 3161              	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:
 3162              	.LFB918:
 790:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 3163              		.loc 9 790 0 is_stmt 1
 3164              		.cfi_startproc
 3165 0000 55       		pushq	%rbp
 3166              		.cfi_def_cfa_offset 16
 3167              		.cfi_offset 6, -16
 3168 0001 4889E5   		movq	%rsp, %rbp
 3169              		.cfi_def_cfa_register 6
 3170 0004 48897DF8 		movq	%rdi, -8(%rbp)
 791:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 3171              		.loc 9 791 0
 3172 0008 488B45F8 		movq	-8(%rbp), %rax
 3173 000c 5D       		popq	%rbp
 3174              		.cfi_def_cfa 7, 8
 3175 000d C3       		ret
 3176              		.cfi_endproc
 3177              	.LFE918:
 3179              		.section	.text._ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_,"axG",@progbits,_ZSt13copy_backwar
 3180              		.weak	_ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_
 3182              	_ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_:
 3183              	.LFB919:
 619:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 3184              		.loc 12 619 0
 3185              		.cfi_startproc
 3186 0000 55       		pushq	%rbp
 3187              		.cfi_def_cfa_offset 16
 3188              		.cfi_offset 6, -16
 3189 0001 4889E5   		movq	%rsp, %rbp
 3190              		.cfi_def_cfa_register 6
 3191 0004 53       		pushq	%rbx
 3192 0005 4883EC28 		subq	$40, %rsp
 3193              		.cfi_offset 3, -24
 3194 0009 48897DE8 		movq	%rdi, -24(%rbp)
 3195 000d 488975E0 		movq	%rsi, -32(%rbp)
 3196 0011 488955D8 		movq	%rdx, -40(%rbp)
 631:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 3197              		.loc 12 631 0
 3198 0015 488B45E0 		movq	-32(%rbp), %rax
 3199 0019 4889C7   		movq	%rax, %rdi
 3200 001c E8000000 		call	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_@PLT
 3200      00
 3201 0021 4889C3   		movq	%rax, %rbx
 3202 0024 488B45E8 		movq	-24(%rbp), %rax
 3203 0028 4889C7   		movq	%rax, %rdi
 3204 002b E8000000 		call	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_@PLT
 3204      00
 3205 0030 488B55D8 		movq	-40(%rbp), %rdx
 3206 0034 4889DE   		movq	%rbx, %rsi
 3207 0037 4889C7   		movq	%rax, %rdi
 3208 003a E8000000 		call	_ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_@PLT
 3208      00
 3209              		.loc 12 632 0
 3210 003f 4883C428 		addq	$40, %rsp
 3211 0043 5B       		popq	%rbx
 3212 0044 5D       		popq	%rbp
 3213              		.cfi_def_cfa 7, 8
 3214 0045 C3       		ret
 3215              		.cfi_endproc
 3216              	.LFE919:
 3218              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv,"axG",@pr
 3219              		.align 2
 3220              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv
 3222              	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv:
 3223              	.LFB920:
 738:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *_M_current; }
 3224              		.loc 9 738 0
 3225              		.cfi_startproc
 3226 0000 55       		pushq	%rbp
 3227              		.cfi_def_cfa_offset 16
 3228              		.cfi_offset 6, -16
 3229 0001 4889E5   		movq	%rsp, %rbp
 3230              		.cfi_def_cfa_register 6
 3231 0004 48897DF8 		movq	%rdi, -8(%rbp)
 739:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 3232              		.loc 9 739 0
 3233 0008 488B45F8 		movq	-8(%rbp), %rax
 3234 000c 488B00   		movq	(%rax), %rax
 3235 000f 5D       		popq	%rbp
 3236              		.cfi_def_cfa 7, 8
 3237 0010 C3       		ret
 3238              		.cfi_endproc
 3239              	.LFE920:
 3241              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc,"axG",@progbits,_ZNKSt6vector
 3242              		.align 2
 3243              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc
 3245              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc:
 3246              	.LFB921:
1336:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 3247              		.loc 5 1336 0
 3248              		.cfi_startproc
 3249 0000 55       		pushq	%rbp
 3250              		.cfi_def_cfa_offset 16
 3251              		.cfi_offset 6, -16
 3252 0001 4889E5   		movq	%rsp, %rbp
 3253              		.cfi_def_cfa_register 6
 3254 0004 53       		pushq	%rbx
 3255 0005 4883EC38 		subq	$56, %rsp
 3256              		.cfi_offset 3, -24
 3257 0009 48897DD8 		movq	%rdi, -40(%rbp)
 3258 000d 488975D0 		movq	%rsi, -48(%rbp)
 3259 0011 488955C8 		movq	%rdx, -56(%rbp)
 3260              	.LBB38:
1338:/usr/include/c++/4.8/bits/stl_vector.h **** 	  __throw_length_error(__N(__s));
 3261              		.loc 5 1338 0
 3262 0015 488B45D8 		movq	-40(%rbp), %rax
 3263 0019 4889C7   		movq	%rax, %rdi
 3264 001c E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv@PLT
 3264      00
 3265 0021 4889C3   		movq	%rax, %rbx
 3266 0024 488B45D8 		movq	-40(%rbp), %rax
 3267 0028 4889C7   		movq	%rax, %rdi
 3268 002b E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 3268      00
 3269 0030 4829C3   		subq	%rax, %rbx
 3270 0033 4889DA   		movq	%rbx, %rdx
 3271 0036 488B45D0 		movq	-48(%rbp), %rax
 3272 003a 4839C2   		cmpq	%rax, %rdx
 3273 003d 0F92C0   		setb	%al
 3274 0040 84C0     		testb	%al, %al
 3275 0042 740C     		je	.L158
1339:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3276              		.loc 5 1339 0
 3277 0044 488B45C8 		movq	-56(%rbp), %rax
 3278 0048 4889C7   		movq	%rax, %rdi
 3279 004b E8000000 		call	_ZSt20__throw_length_errorPKc@PLT
 3279      00
 3280              	.L158:
1341:/usr/include/c++/4.8/bits/stl_vector.h **** 	return (__len < size() || __len > max_size()) ? max_size() : __len;
 3281              		.loc 5 1341 0
 3282 0050 488B45D8 		movq	-40(%rbp), %rax
 3283 0054 4889C7   		movq	%rax, %rdi
 3284 0057 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 3284      00
 3285 005c 4889C3   		movq	%rax, %rbx
 3286 005f 488B45D8 		movq	-40(%rbp), %rax
 3287 0063 4889C7   		movq	%rax, %rdi
 3288 0066 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 3288      00
 3289 006b 488945E0 		movq	%rax, -32(%rbp)
 3290 006f 488D55D0 		leaq	-48(%rbp), %rdx
 3291 0073 488D45E0 		leaq	-32(%rbp), %rax
 3292 0077 4889D6   		movq	%rdx, %rsi
 3293 007a 4889C7   		movq	%rax, %rdi
 3294 007d E8000000 		call	_ZSt3maxImERKT_S2_S2_@PLT
 3294      00
 3295 0082 488B00   		movq	(%rax), %rax
 3296 0085 4801D8   		addq	%rbx, %rax
 3297 0088 488945E8 		movq	%rax, -24(%rbp)
1342:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 3298              		.loc 5 1342 0
 3299 008c 488B45D8 		movq	-40(%rbp), %rax
 3300 0090 4889C7   		movq	%rax, %rdi
 3301 0093 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv@PLT
 3301      00
 3302 0098 483B45E8 		cmpq	-24(%rbp), %rax
 3303 009c 7712     		ja	.L159
1342:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 3304              		.loc 5 1342 0 is_stmt 0 discriminator 2
 3305 009e 488B45D8 		movq	-40(%rbp), %rax
 3306 00a2 4889C7   		movq	%rax, %rdi
 3307 00a5 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv@PLT
 3307      00
 3308 00aa 483B45E8 		cmpq	-24(%rbp), %rax
 3309 00ae 730E     		jnb	.L160
 3310              	.L159:
1342:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 3311              		.loc 5 1342 0 discriminator 1
 3312 00b0 488B45D8 		movq	-40(%rbp), %rax
 3313 00b4 4889C7   		movq	%rax, %rdi
 3314 00b7 E8000000 		call	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv@PLT
 3314      00
 3315 00bc EB04     		jmp	.L161
 3316              	.L160:
1342:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 3317              		.loc 5 1342 0 discriminator 3
 3318 00be 488B45E8 		movq	-24(%rbp), %rax
 3319              	.L161:
 3320              	.LBE38:
 3321              		.loc 5 1343 0 is_stmt 1 discriminator 4
 3322 00c2 4883C438 		addq	$56, %rsp
 3323 00c6 5B       		popq	%rbx
 3324 00c7 5D       		popq	%rbp
 3325              		.cfi_def_cfa 7, 8
 3326 00c8 C3       		ret
 3327              		.cfi_endproc
 3328              	.LFE921:
 3330              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv,"axG",@progbits,_ZNSt6vectorISt4pairIiSsE
 3331              		.align 2
 3332              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv
 3334              	_ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv:
 3335              	.LFB922:
 538:/usr/include/c++/4.8/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 3336              		.loc 5 538 0
 3337              		.cfi_startproc
 3338 0000 55       		pushq	%rbp
 3339              		.cfi_def_cfa_offset 16
 3340              		.cfi_offset 6, -16
 3341 0001 4889E5   		movq	%rsp, %rbp
 3342              		.cfi_def_cfa_register 6
 3343 0004 4883EC20 		subq	$32, %rsp
 3344 0008 48897DE8 		movq	%rdi, -24(%rbp)
 539:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3345              		.loc 5 539 0
 3346 000c 488B55E8 		movq	-24(%rbp), %rdx
 3347 0010 488D45F0 		leaq	-16(%rbp), %rax
 3348 0014 4889D6   		movq	%rdx, %rsi
 3349 0017 4889C7   		movq	%rax, %rdi
 3350 001a E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_@PLT
 3350      00
 3351 001f 488B45F0 		movq	-16(%rbp), %rax
 3352 0023 C9       		leave
 3353              		.cfi_def_cfa 7, 8
 3354 0024 C3       		ret
 3355              		.cfi_endproc
 3356              	.LFE922:
 3358              		.section	.text._ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15
 3359              		.weak	_ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15differenc
 3361              	_ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeE
 3362              	.LFB923:
 896:/usr/include/c++/4.8/bits/stl_iterator.h **** 	      const __normal_iterator<_Iterator, _Container>& __rhs)
 3363              		.loc 9 896 0
 3364              		.cfi_startproc
 3365 0000 55       		pushq	%rbp
 3366              		.cfi_def_cfa_offset 16
 3367              		.cfi_offset 6, -16
 3368 0001 4889E5   		movq	%rsp, %rbp
 3369              		.cfi_def_cfa_register 6
 3370 0004 53       		pushq	%rbx
 3371 0005 4883EC18 		subq	$24, %rsp
 3372              		.cfi_offset 3, -24
 3373 0009 48897DE8 		movq	%rdi, -24(%rbp)
 3374 000d 488975E0 		movq	%rsi, -32(%rbp)
 3375              		.loc 9 898 0
 3376 0011 488B45E8 		movq	-24(%rbp), %rax
 3377 0015 4889C7   		movq	%rax, %rdi
 3378 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 3378      00
 3379 001d 488B00   		movq	(%rax), %rax
 3380 0020 4889C3   		movq	%rax, %rbx
 3381 0023 488B45E0 		movq	-32(%rbp), %rax
 3382 0027 4889C7   		movq	%rax, %rdi
 3383 002a E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 3383      00
 3384 002f 488B00   		movq	(%rax), %rax
 3385 0032 4829C3   		subq	%rax, %rbx
 3386 0035 4889D8   		movq	%rbx, %rax
 3387 0038 48C1F804 		sarq	$4, %rax
 3388 003c 4883C418 		addq	$24, %rsp
 3389 0040 5B       		popq	%rbx
 3390 0041 5D       		popq	%rbp
 3391              		.cfi_def_cfa 7, 8
 3392 0042 C3       		ret
 3393              		.cfi_endproc
 3394              	.LFE923:
 3396              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm,"axG",@progbits,_ZNSt12_Vec
 3397              		.align 2
 3398              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm
 3400              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm:
 3401              	.LFB924:
 167:/usr/include/c++/4.8/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 3402              		.loc 5 167 0
 3403              		.cfi_startproc
 3404 0000 55       		pushq	%rbp
 3405              		.cfi_def_cfa_offset 16
 3406              		.cfi_offset 6, -16
 3407 0001 4889E5   		movq	%rsp, %rbp
 3408              		.cfi_def_cfa_register 6
 3409 0004 4883EC10 		subq	$16, %rsp
 3410 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3411 000c 488975F0 		movq	%rsi, -16(%rbp)
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3412              		.loc 5 168 0
 3413 0010 48837DF0 		cmpq	$0, -16(%rbp)
 3413      00
 3414 0015 741A     		je	.L168
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3415              		.loc 5 168 0 is_stmt 0 discriminator 1
 3416 0017 488B45F8 		movq	-8(%rbp), %rax
 3417 001b 488B4DF0 		movq	-16(%rbp), %rcx
 3418 001f BA000000 		movl	$0, %edx
 3418      00
 3419 0024 4889CE   		movq	%rcx, %rsi
 3420 0027 4889C7   		movq	%rax, %rdi
 3421 002a E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv@PLT
 3421      00
 3422 002f EB05     		jmp	.L169
 3423              	.L168:
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3424              		.loc 5 168 0 discriminator 2
 3425 0031 B8000000 		movl	$0, %eax
 3425      00
 3426              	.L169:
 168:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3427              		.loc 5 168 0 discriminator 3
 3428 0036 C9       		leave
 3429              		.cfi_def_cfa 7, 8
 3430 0037 C3       		ret
 3431              		.cfi_endproc
 3432              	.LFE924:
 3434              		.section	.text._ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_,"a
 3435              		.weak	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_
 3437              	_ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_:
 3438              	.LFB925:
 274:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 				       _InputIterator __last,
 3439              		.loc 13 274 0 is_stmt 1
 3440              		.cfi_startproc
 3441 0000 55       		pushq	%rbp
 3442              		.cfi_def_cfa_offset 16
 3443              		.cfi_offset 6, -16
 3444 0001 4889E5   		movq	%rsp, %rbp
 3445              		.cfi_def_cfa_register 6
 3446 0004 4883EC20 		subq	$32, %rsp
 3447 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3448 000c 488975F0 		movq	%rsi, -16(%rbp)
 3449 0010 488955E8 		movq	%rdx, -24(%rbp)
 3450 0014 48894DE0 		movq	%rcx, -32(%rbp)
 281:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 3451              		.loc 13 281 0
 3452 0018 488B4DE0 		movq	-32(%rbp), %rcx
 3453 001c 488B55E8 		movq	-24(%rbp), %rdx
 3454 0020 488B75F0 		movq	-16(%rbp), %rsi
 3455 0024 488B45F8 		movq	-8(%rbp), %rax
 3456 0028 4889C7   		movq	%rax, %rdi
 3457 002b E8000000 		call	_ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E@PLT
 3457      00
 3458              		.loc 13 282 0
 3459 0030 C9       		leave
 3460              		.cfi_def_cfa 7, 8
 3461 0031 C3       		ret
 3462              		.cfi_endproc
 3463              	.LFE925:
 3465              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_,"axG",@progbits,_Z
 3466              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_
 3468              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_:
 3469              	.LFB926:
 218:/usr/include/c++/4.8/ext/alloc_traits.h ****     { __a.destroy(__p); }
 3470              		.loc 7 218 0
 3471              		.cfi_startproc
 3472 0000 55       		pushq	%rbp
 3473              		.cfi_def_cfa_offset 16
 3474              		.cfi_offset 6, -16
 3475 0001 4889E5   		movq	%rsp, %rbp
 3476              		.cfi_def_cfa_register 6
 3477 0004 4883EC10 		subq	$16, %rsp
 3478 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3479 000c 488975F0 		movq	%rsi, -16(%rbp)
 3480              		.loc 7 219 0
 3481 0010 488B55F0 		movq	-16(%rbp), %rdx
 3482 0014 488B45F8 		movq	-8(%rbp), %rax
 3483 0018 4889D6   		movq	%rdx, %rsi
 3484 001b 4889C7   		movq	%rax, %rdi
 3485 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_@PLT
 3485      00
 3486 0023 C9       		leave
 3487              		.cfi_def_cfa 7, 8
 3488 0024 C3       		ret
 3489              		.cfi_endproc
 3490              	.LFE926:
 3492              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_,"axG",
 3493              		.align 2
 3494              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_
 3496              	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_:
 3497              	.LFB928:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 3498              		.loc 9 726 0
 3499              		.cfi_startproc
 3500 0000 55       		pushq	%rbp
 3501              		.cfi_def_cfa_offset 16
 3502              		.cfi_offset 6, -16
 3503 0001 4889E5   		movq	%rsp, %rbp
 3504              		.cfi_def_cfa_register 6
 3505 0004 48897DF8 		movq	%rdi, -8(%rbp)
 3506 0008 488975F0 		movq	%rsi, -16(%rbp)
 3507              	.LBB39:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 3508              		.loc 9 726 0
 3509 000c 488B45F0 		movq	-16(%rbp), %rax
 3510 0010 488B10   		movq	(%rax), %rdx
 3511 0013 488B45F8 		movq	-8(%rbp), %rax
 3512 0017 488910   		movq	%rdx, (%rax)
 3513              	.LBE39:
 3514 001a 5D       		popq	%rbp
 3515              		.cfi_def_cfa 7, 8
 3516 001b C3       		ret
 3517              		.cfi_endproc
 3518              	.LFE928:
 3520              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_
 3521              		.set	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_,_ZN9__gnu_cxx17_
 3522              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_a
 3523              		.align 2
 3524              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
 3526              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:
 3527              	.LFB934:
  86:/usr/include/c++/4.8/ext/new_allocator.h **** 
 3528              		.loc 11 86 0
 3529              		.cfi_startproc
 3530 0000 55       		pushq	%rbp
 3531              		.cfi_def_cfa_offset 16
 3532              		.cfi_offset 6, -16
 3533 0001 4889E5   		movq	%rsp, %rbp
 3534              		.cfi_def_cfa_register 6
 3535 0004 48897DF8 		movq	%rdi, -8(%rbp)
  86:/usr/include/c++/4.8/ext/new_allocator.h **** 
 3536              		.loc 11 86 0
 3537 0008 5D       		popq	%rbp
 3538              		.cfi_def_cfa 7, 8
 3539 0009 C3       		ret
 3540              		.cfi_endproc
 3541              	.LFE934:
 3543              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev
 3544              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev,_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
 3545              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m,"axG",@progbits,_ZN9__
 3546              		.align 2
 3547              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m
 3549              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m:
 3550              	.LFB936:
 109:/usr/include/c++/4.8/ext/new_allocator.h ****       { ::operator delete(__p); }
 3551              		.loc 11 109 0
 3552              		.cfi_startproc
 3553 0000 55       		pushq	%rbp
 3554              		.cfi_def_cfa_offset 16
 3555              		.cfi_offset 6, -16
 3556 0001 4889E5   		movq	%rsp, %rbp
 3557              		.cfi_def_cfa_register 6
 3558 0004 4883EC20 		subq	$32, %rsp
 3559 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3560 000c 488975F0 		movq	%rsi, -16(%rbp)
 3561 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/4.8/ext/new_allocator.h **** 
 3562              		.loc 11 110 0
 3563 0014 488B45F0 		movq	-16(%rbp), %rax
 3564 0018 4889C7   		movq	%rax, %rdi
 3565 001b E8000000 		call	_ZdlPv@PLT
 3565      00
 3566 0020 C9       		leave
 3567              		.cfi_def_cfa 7, 8
 3568 0021 C3       		ret
 3569              		.cfi_endproc
 3570              	.LFE936:
 3572              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_,"axG",@progbits,_ZNSt12_D
 3573              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_
 3575              	_ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_:
 3576              	.LFB937:
 100:/usr/include/c++/4.8/bits/stl_construct.h **** 	{
 3577              		.loc 6 100 0
 3578              		.cfi_startproc
 3579 0000 55       		pushq	%rbp
 3580              		.cfi_def_cfa_offset 16
 3581              		.cfi_offset 6, -16
 3582 0001 4889E5   		movq	%rsp, %rbp
 3583              		.cfi_def_cfa_register 6
 3584 0004 4883EC10 		subq	$16, %rsp
 3585 0008 48897DF8 		movq	%rdi, -8(%rbp)
 3586 000c 488975F0 		movq	%rsi, -16(%rbp)
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3587              		.loc 6 102 0
 3588 0010 EB19     		jmp	.L179
 3589              	.L180:
 103:/usr/include/c++/4.8/bits/stl_construct.h **** 	}
 3590              		.loc 6 103 0 discriminator 2
 3591 0012 488B45F8 		movq	-8(%rbp), %rax
 3592 0016 4889C7   		movq	%rax, %rdi
 3593 0019 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 3593      00
 3594 001e 4889C7   		movq	%rax, %rdi
 3595 0021 E8000000 		call	_ZSt8_DestroyISt4pairIiSsEEvPT_@PLT
 3595      00
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3596              		.loc 6 102 0 discriminator 2
 3597 0026 488345F8 		addq	$16, -8(%rbp)
 3597      10
 3598              	.L179:
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 3599              		.loc 6 102 0 is_stmt 0 discriminator 1
 3600 002b 488B45F8 		movq	-8(%rbp), %rax
 3601 002f 483B45F0 		cmpq	-16(%rbp), %rax
 3602 0033 75DD     		jne	.L180
 104:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 3603              		.loc 6 104 0 is_stmt 1
 3604 0035 C9       		leave
 3605              		.cfi_def_cfa 7, 8
 3606 0036 C3       		ret
 3607              		.cfi_endproc
 3608              	.LFE937:
 3610              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiSs
 3611              		.align 2
 3612              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv
 3614              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv:
 3615              	.LFB938:
 645:/usr/include/c++/4.8/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 3616              		.loc 5 645 0
 3617              		.cfi_startproc
 3618 0000 55       		pushq	%rbp
 3619              		.cfi_def_cfa_offset 16
 3620              		.cfi_offset 6, -16
 3621 0001 4889E5   		movq	%rsp, %rbp
 3622              		.cfi_def_cfa_register 6
 3623 0004 48897DF8 		movq	%rdi, -8(%rbp)
 646:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3624              		.loc 5 646 0
 3625 0008 488B45F8 		movq	-8(%rbp), %rax
 3626 000c 488B4008 		movq	8(%rax), %rax
 3627 0010 4889C2   		movq	%rax, %rdx
 3628 0013 488B45F8 		movq	-8(%rbp), %rax
 3629 0017 488B00   		movq	(%rax), %rax
 3630 001a 4829C2   		subq	%rax, %rdx
 3631 001d 4889D0   		movq	%rdx, %rax
 3632 0020 48C1F804 		sarq	$4, %rax
 3633 0024 5D       		popq	%rbp
 3634              		.cfi_def_cfa 7, 8
 3635 0025 C3       		ret
 3636              		.cfi_endproc
 3637              	.LFE938:
 3639              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_,"axG",@pro
 3640              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_
 3642              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_:
 3643              	.LFB939:
 220:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 221:/usr/include/c++/4.8/ext/alloc_traits.h ****     static size_type max_size(const _Alloc& __a)
 222:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return __a.max_size(); }
 223:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 224:/usr/include/c++/4.8/ext/alloc_traits.h ****     static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
 3644              		.loc 7 224 0
 3645              		.cfi_startproc
 3646 0000 55       		pushq	%rbp
 3647              		.cfi_def_cfa_offset 16
 3648              		.cfi_offset 6, -16
 3649 0001 4889E5   		movq	%rsp, %rbp
 3650              		.cfi_def_cfa_register 6
 3651 0004 48897DF8 		movq	%rdi, -8(%rbp)
 3652              		.loc 7 224 0
 3653 0008 488B45F8 		movq	-8(%rbp), %rax
 3654 000c 5D       		popq	%rbp
 3655              		.cfi_def_cfa 7, 8
 3656 000d C3       		ret
 3657              		.cfi_endproc
 3658              	.LFE939:
 3660              		.section	.text._ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_Z
 3661              		.align 2
 3662              		.weak	_ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
 3664              	_ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:
 3665              	.LFB940:
 117:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 3666              		.loc 5 117 0
 3667              		.cfi_startproc
 3668 0000 55       		pushq	%rbp
 3669              		.cfi_def_cfa_offset 16
 3670              		.cfi_offset 6, -16
 3671 0001 4889E5   		movq	%rsp, %rbp
 3672              		.cfi_def_cfa_register 6
 3673 0004 48897DF8 		movq	%rdi, -8(%rbp)
 118:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3674              		.loc 5 118 0
 3675 0008 488B45F8 		movq	-8(%rbp), %rax
 3676 000c 5D       		popq	%rbp
 3677              		.cfi_def_cfa 7, 8
 3678 000d C3       		ret
 3679              		.cfi_endproc
 3680              	.LFE940:
 3682              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_,"axG",@progbits,_ZNSt12_Vector_ba
 3683              		.align 2
 3684              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_
 3686              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_:
 3687              	.LFB942:
 134:/usr/include/c++/4.8/bits/stl_vector.h ****       : _M_impl(__a)
 3688              		.loc 5 134 0
 3689              		.cfi_startproc
 3690              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3691              		.cfi_lsda 0x1b,.LLSDA942
 3692 0000 55       		pushq	%rbp
 3693              		.cfi_def_cfa_offset 16
 3694              		.cfi_offset 6, -16
 3695 0001 4889E5   		movq	%rsp, %rbp
 3696              		.cfi_def_cfa_register 6
 3697 0004 53       		pushq	%rbx
 3698 0005 4883EC28 		subq	$40, %rsp
 3699              		.cfi_offset 3, -24
 3700 0009 48897DE8 		movq	%rdi, -24(%rbp)
 3701 000d 488975E0 		movq	%rsi, -32(%rbp)
 3702 0011 488955D8 		movq	%rdx, -40(%rbp)
 3703              	.LBB40:
 135:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 3704              		.loc 5 135 0
 3705 0015 488B45E8 		movq	-24(%rbp), %rax
 3706 0019 488B55D8 		movq	-40(%rbp), %rdx
 3707 001d 4889D6   		movq	%rdx, %rsi
 3708 0020 4889C7   		movq	%rax, %rdi
 3709              	.LEHB50:
 3710 0023 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC1ERKS2_@PLT
 3710      00
 3711              	.LEHE50:
 136:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3712              		.loc 5 136 0
 3713 0028 488B55E0 		movq	-32(%rbp), %rdx
 3714 002c 488B45E8 		movq	-24(%rbp), %rax
 3715 0030 4889D6   		movq	%rdx, %rsi
 3716 0033 4889C7   		movq	%rax, %rdi
 3717              	.LEHB51:
 3718 0036 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm@PLT
 3718      00
 3719              	.LEHE51:
 3720              	.LBE40:
 3721 003b EB1A     		jmp	.L190
 3722              	.L189:
 3723 003d 4889C3   		movq	%rax, %rbx
 3724              	.LBB41:
 135:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_create_storage(__n); }
 3725              		.loc 5 135 0
 3726 0040 488B45E8 		movq	-24(%rbp), %rax
 3727 0044 4889C7   		movq	%rax, %rdi
 3728 0047 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev@PLT
 3728      00
 3729 004c 4889D8   		movq	%rbx, %rax
 3730 004f 4889C7   		movq	%rax, %rdi
 3731              	.LEHB52:
 3732 0052 E8000000 		call	_Unwind_Resume@PLT
 3732      00
 3733              	.LEHE52:
 3734              	.L190:
 3735              	.LBE41:
 136:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3736              		.loc 5 136 0
 3737 0057 4883C428 		addq	$40, %rsp
 3738 005b 5B       		popq	%rbx
 3739 005c 5D       		popq	%rbp
 3740              		.cfi_def_cfa 7, 8
 3741 005d C3       		ret
 3742              		.cfi_endproc
 3743              	.LFE942:
 3744              		.section	.gcc_except_table
 3745              	.LLSDA942:
 3746 0116 FF       		.byte	0xff
 3747 0117 FF       		.byte	0xff
 3748 0118 01       		.byte	0x1
 3749 0119 0C       		.uleb128 .LLSDACSE942-.LLSDACSB942
 3750              	.LLSDACSB942:
 3751 011a 23       		.uleb128 .LEHB50-.LFB942
 3752 011b 05       		.uleb128 .LEHE50-.LEHB50
 3753 011c 00       		.uleb128 0
 3754 011d 00       		.uleb128 0
 3755 011e 36       		.uleb128 .LEHB51-.LFB942
 3756 011f 05       		.uleb128 .LEHE51-.LEHB51
 3757 0120 3D       		.uleb128 .L189-.LFB942
 3758 0121 00       		.uleb128 0
 3759 0122 52       		.uleb128 .LEHB52-.LFB942
 3760 0123 05       		.uleb128 .LEHE52-.LEHB52
 3761 0124 00       		.uleb128 0
 3762 0125 00       		.uleb128 0
 3763              	.LLSDACSE942:
 3764              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_,"axG",@progbits,_ZNSt12_Vector_ba
 3766              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC1EmRKS2_
 3767              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC1EmRKS2_,_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2E
 3768              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiS
 3769              		.align 2
 3770              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv
 3772              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv:
 3773              	.LFB944:
 547:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 3774              		.loc 5 547 0
 3775              		.cfi_startproc
 3776 0000 55       		pushq	%rbp
 3777              		.cfi_def_cfa_offset 16
 3778              		.cfi_offset 6, -16
 3779 0001 4889E5   		movq	%rsp, %rbp
 3780              		.cfi_def_cfa_register 6
 3781 0004 4883EC20 		subq	$32, %rsp
 3782 0008 48897DE8 		movq	%rdi, -24(%rbp)
 548:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3783              		.loc 5 548 0
 3784 000c 488B45E8 		movq	-24(%rbp), %rax
 3785 0010 488B00   		movq	(%rax), %rax
 3786 0013 488945F8 		movq	%rax, -8(%rbp)
 3787 0017 488D55F8 		leaq	-8(%rbp), %rdx
 3788 001b 488D45F0 		leaq	-16(%rbp), %rax
 3789 001f 4889D6   		movq	%rdx, %rsi
 3790 0022 4889C7   		movq	%rax, %rdi
 3791 0025 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_@PLT
 3791      00
 3792 002a 488B45F0 		movq	-16(%rbp), %rax
 3793 002e C9       		leave
 3794              		.cfi_def_cfa 7, 8
 3795 002f C3       		ret
 3796              		.cfi_endproc
 3797              	.LFE944:
 3799              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv,"axG",@progbits,_ZNKSt6vectorISt4pairIiSsE
 3800              		.align 2
 3801              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv
 3803              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv:
 3804              	.LFB945:
 565:/usr/include/c++/4.8/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 3805              		.loc 5 565 0
 3806              		.cfi_startproc
 3807 0000 55       		pushq	%rbp
 3808              		.cfi_def_cfa_offset 16
 3809              		.cfi_offset 6, -16
 3810 0001 4889E5   		movq	%rsp, %rbp
 3811              		.cfi_def_cfa_register 6
 3812 0004 4883EC20 		subq	$32, %rsp
 3813 0008 48897DE8 		movq	%rdi, -24(%rbp)
 566:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3814              		.loc 5 566 0
 3815 000c 488B45E8 		movq	-24(%rbp), %rax
 3816 0010 488B4008 		movq	8(%rax), %rax
 3817 0014 488945F8 		movq	%rax, -8(%rbp)
 3818 0018 488D55F8 		leaq	-8(%rbp), %rdx
 3819 001c 488D45F0 		leaq	-16(%rbp), %rax
 3820 0020 4889D6   		movq	%rdx, %rsi
 3821 0023 4889C7   		movq	%rax, %rdi
 3822 0026 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_@PLT
 3822      00
 3823 002b 488B45F0 		movq	-16(%rbp), %rax
 3824 002f C9       		leave
 3825              		.cfi_def_cfa 7, 8
 3826 0030 C3       		ret
 3827              		.cfi_endproc
 3828              	.LFE945:
 3830              		.section	.text._ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vector
 3831              		.weak	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3
 3833              	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS
 3834              	.LFB946:
 256:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 3835              		.loc 13 256 0
 3836              		.cfi_startproc
 3837 0000 55       		pushq	%rbp
 3838              		.cfi_def_cfa_offset 16
 3839              		.cfi_offset 6, -16
 3840 0001 4889E5   		movq	%rsp, %rbp
 3841              		.cfi_def_cfa_register 6
 3842 0004 4883EC20 		subq	$32, %rsp
 3843 0008 48897DF0 		movq	%rdi, -16(%rbp)
 3844 000c 488975E0 		movq	%rsi, -32(%rbp)
 3845 0010 488955E8 		movq	%rdx, -24(%rbp)
 3846 0014 48894DF8 		movq	%rcx, -8(%rbp)
 258:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 3847              		.loc 13 258 0
 3848 0018 488B55E8 		movq	-24(%rbp), %rdx
 3849 001c 488B4DE0 		movq	-32(%rbp), %rcx
 3850 0020 488B45F0 		movq	-16(%rbp), %rax
 3851 0024 4889CE   		movq	%rcx, %rsi
 3852 0027 4889C7   		movq	%rax, %rdi
 3853 002a E8000000 		call	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEE
 3853      00
 3854 002f C9       		leave
 3855              		.cfi_def_cfa 7, 8
 3856 0030 C3       		ret
 3857              		.cfi_endproc
 3858              	.LFE946:
 3860              		.section	.text._ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_
 3861              		.weak	_ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_
 3863              	_ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_:
 3864              	.LFB947:
 288:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 3865              		.loc 12 288 0
 3866              		.cfi_startproc
 3867 0000 55       		pushq	%rbp
 3868              		.cfi_def_cfa_offset 16
 3869              		.cfi_offset 6, -16
 3870 0001 4889E5   		movq	%rsp, %rbp
 3871              		.cfi_def_cfa_register 6
 3872 0004 4883EC10 		subq	$16, %rsp
 3873 0008 48897DF8 		movq	%rdi, -8(%rbp)
 289:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 3874              		.loc 12 289 0
 3875 000c 488B45F8 		movq	-8(%rbp), %rax
 3876 0010 4889C7   		movq	%rax, %rdi
 3877 0013 E8000000 		call	_ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_@PLT
 3877      00
 3878 0018 C9       		leave
 3879              		.cfi_def_cfa 7, 8
 3880 0019 C3       		ret
 3881              		.cfi_endproc
 3882              	.LFE947:
 3884              		.section	.text._ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_,
 3885              		.weak	_ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_
 3887              	_ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_:
 3888              	.LFB948:
 592:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 3889              		.loc 12 592 0
 3890              		.cfi_startproc
 3891 0000 55       		pushq	%rbp
 3892              		.cfi_def_cfa_offset 16
 3893              		.cfi_offset 6, -16
 3894 0001 4889E5   		movq	%rsp, %rbp
 3895              		.cfi_def_cfa_register 6
 3896 0004 4154     		pushq	%r12
 3897 0006 53       		pushq	%rbx
 3898 0007 4883EC20 		subq	$32, %rsp
 3899              		.cfi_offset 12, -24
 3900              		.cfi_offset 3, -32
 3901 000b 48897DE8 		movq	%rdi, -24(%rbp)
 3902 000f 488975E0 		movq	%rsi, -32(%rbp)
 3903 0013 488955D8 		movq	%rdx, -40(%rbp)
 596:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 3904              		.loc 12 596 0
 3905 0017 488B45D8 		movq	-40(%rbp), %rax
 3906 001b 4889C7   		movq	%rax, %rdi
 3907 001e E8000000 		call	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_@P
 3907      00
 3908 0023 4989C4   		movq	%rax, %r12
 3909 0026 488B45E0 		movq	-32(%rbp), %rax
 3910 002a 4889C7   		movq	%rax, %rdi
 3911 002d E8000000 		call	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_@P
 3911      00
 3912 0032 4889C3   		movq	%rax, %rbx
 3913 0035 488B45E8 		movq	-24(%rbp), %rax
 3914 0039 4889C7   		movq	%rax, %rdi
 3915 003c E8000000 		call	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_@P
 3915      00
 3916 0041 4C89E2   		movq	%r12, %rdx
 3917 0044 4889DE   		movq	%rbx, %rsi
 3918 0047 4889C7   		movq	%rax, %rdi
 3919 004a E8000000 		call	_ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_@PLT
 3919      00
 597:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 3920              		.loc 12 597 0
 3921 004f 4883C420 		addq	$32, %rsp
 3922 0053 5B       		popq	%rbx
 3923 0054 415C     		popq	%r12
 3924 0056 5D       		popq	%rbp
 3925              		.cfi_def_cfa 7, 8
 3926 0057 C3       		ret
 3927              		.cfi_endproc
 3928              	.LFE948:
 3930              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv,"axG",@progbits,_ZNKSt6vectorISt4pair
 3931              		.align 2
 3932              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv
 3934              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv:
 3935              	.LFB949:
 725:/usr/include/c++/4.8/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 3936              		.loc 5 725 0
 3937              		.cfi_startproc
 3938 0000 55       		pushq	%rbp
 3939              		.cfi_def_cfa_offset 16
 3940              		.cfi_offset 6, -16
 3941 0001 4889E5   		movq	%rsp, %rbp
 3942              		.cfi_def_cfa_register 6
 3943 0004 48897DF8 		movq	%rdi, -8(%rbp)
 727:/usr/include/c++/4.8/bits/stl_vector.h **** 
 3944              		.loc 5 727 0
 3945 0008 488B45F8 		movq	-8(%rbp), %rax
 3946 000c 488B4010 		movq	16(%rax), %rax
 3947 0010 4889C2   		movq	%rax, %rdx
 3948 0013 488B45F8 		movq	-8(%rbp), %rax
 3949 0017 488B00   		movq	(%rax), %rax
 3950 001a 4829C2   		subq	%rax, %rdx
 3951 001d 4889D0   		movq	%rdx, %rax
 3952 0020 48C1F804 		sarq	$4, %rax
 3953 0024 5D       		popq	%rbp
 3954              		.cfi_def_cfa 7, 8
 3955 0025 C3       		ret
 3956              		.cfi_endproc
 3957              	.LFE949:
 3959              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_itera
 3960              		.align 2
 3961              		.weak	_ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_
 3963              	_ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEE
 3964              	.LFB950:
1135:/usr/include/c++/4.8/bits/stl_vector.h **** 			     _ForwardIterator __first, _ForwardIterator __last)
 3965              		.loc 5 1135 0
 3966              		.cfi_startproc
 3967              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 3968              		.cfi_lsda 0x1b,.LLSDA950
 3969 0000 55       		pushq	%rbp
 3970              		.cfi_def_cfa_offset 16
 3971              		.cfi_offset 6, -16
 3972 0001 4889E5   		movq	%rsp, %rbp
 3973              		.cfi_def_cfa_register 6
 3974 0004 53       		pushq	%rbx
 3975 0005 4883EC48 		subq	$72, %rsp
 3976              		.cfi_offset 3, -24
 3977 0009 48897DD8 		movq	%rdi, -40(%rbp)
 3978 000d 488975D0 		movq	%rsi, -48(%rbp)
 3979 0011 488955C0 		movq	%rdx, -64(%rbp)
 3980 0015 48894DB0 		movq	%rcx, -80(%rbp)
 3981              	.LBB42:
1138:/usr/include/c++/4.8/bits/stl_vector.h **** 	  __try
 3982              		.loc 5 1138 0
 3983 0019 488B45D8 		movq	-40(%rbp), %rax
 3984 001d 488B55D0 		movq	-48(%rbp), %rdx
 3985 0021 4889D6   		movq	%rdx, %rsi
 3986 0024 4889C7   		movq	%rax, %rdi
 3987              	.LEHB53:
 3988 0027 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm@PLT
 3988      00
 3989              	.LEHE53:
 3990 002c 488945E8 		movq	%rax, -24(%rbp)
1142:/usr/include/c++/4.8/bits/stl_vector.h **** 	      return __result;
 3991              		.loc 5 1142 0
 3992 0030 488B45D8 		movq	-40(%rbp), %rax
 3993 0034 4889C7   		movq	%rax, %rdi
 3994 0037 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 3994      00
 3995 003c 4889C1   		movq	%rax, %rcx
1141:/usr/include/c++/4.8/bits/stl_vector.h **** 					  _M_get_Tp_allocator());
 3996              		.loc 5 1141 0
 3997 003f 488B55E8 		movq	-24(%rbp), %rdx
 3998 0043 488B75B0 		movq	-80(%rbp), %rsi
 3999 0047 488B45C0 		movq	-64(%rbp), %rax
 4000 004b 4889C7   		movq	%rax, %rdi
 4001              	.LEHB54:
 4002 004e E8000000 		call	_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_
 4002      00
 4003              	.LEHE54:
1143:/usr/include/c++/4.8/bits/stl_vector.h **** 	    }
 4004              		.loc 5 1143 0
 4005 0053 488B45E8 		movq	-24(%rbp), %rax
 4006 0057 EB37     		jmp	.L209
 4007              	.L208:
 4008 0059 4889C3   		movq	%rax, %rbx
1145:/usr/include/c++/4.8/bits/stl_vector.h **** 	    {
 4009              		.loc 5 1145 0
 4010 005c E8000000 		call	__cxa_end_catch@PLT
 4010      00
 4011 0061 4889D8   		movq	%rbx, %rax
 4012 0064 4889C7   		movq	%rax, %rdi
 4013              	.LEHB55:
 4014 0067 E8000000 		call	_Unwind_Resume@PLT
 4014      00
 4015              	.LEHE55:
 4016              	.L207:
 4017 006c 4889C7   		movq	%rax, %rdi
 4018 006f E8000000 		call	__cxa_begin_catch@PLT
 4018      00
1147:/usr/include/c++/4.8/bits/stl_vector.h **** 	      __throw_exception_again;
 4019              		.loc 5 1147 0
 4020 0074 488B45D8 		movq	-40(%rbp), %rax
 4021 0078 488B55D0 		movq	-48(%rbp), %rdx
 4022 007c 488B4DE8 		movq	-24(%rbp), %rcx
 4023 0080 4889CE   		movq	%rcx, %rsi
 4024 0083 4889C7   		movq	%rax, %rdi
 4025              	.LEHB56:
 4026 0086 E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m@PLT
 4026      00
1148:/usr/include/c++/4.8/bits/stl_vector.h **** 	    }
 4027              		.loc 5 1148 0
 4028 008b E8000000 		call	__cxa_rethrow@PLT
 4028      00
 4029              	.LEHE56:
 4030              	.L209:
 4031              	.LBE42:
1150:/usr/include/c++/4.8/bits/stl_vector.h **** 
 4032              		.loc 5 1150 0
 4033 0090 4883C448 		addq	$72, %rsp
 4034 0094 5B       		popq	%rbx
 4035 0095 5D       		popq	%rbp
 4036              		.cfi_def_cfa 7, 8
 4037 0096 C3       		ret
 4038              		.cfi_endproc
 4039              	.LFE950:
 4040              		.section	.gcc_except_table
 4041 0126 0000     		.align 4
 4042              	.LLSDA950:
 4043 0128 FF       		.byte	0xff
 4044 0129 9B       		.byte	0x9b
 4045 012a 19       		.uleb128 .LLSDATT950-.LLSDATTD950
 4046              	.LLSDATTD950:
 4047 012b 01       		.byte	0x1
 4048 012c 11       		.uleb128 .LLSDACSE950-.LLSDACSB950
 4049              	.LLSDACSB950:
 4050 012d 27       		.uleb128 .LEHB53-.LFB950
 4051 012e 05       		.uleb128 .LEHE53-.LEHB53
 4052 012f 00       		.uleb128 0
 4053 0130 00       		.uleb128 0
 4054 0131 4E       		.uleb128 .LEHB54-.LFB950
 4055 0132 05       		.uleb128 .LEHE54-.LEHB54
 4056 0133 6C       		.uleb128 .L207-.LFB950
 4057 0134 01       		.uleb128 0x1
 4058 0135 67       		.uleb128 .LEHB55-.LFB950
 4059 0136 05       		.uleb128 .LEHE55-.LEHB55
 4060 0137 00       		.uleb128 0
 4061 0138 00       		.uleb128 0
 4062 0139 8601     		.uleb128 .LEHB56-.LFB950
 4063 013b 0A       		.uleb128 .LEHE56-.LEHB56
 4064 013c 59       		.uleb128 .L208-.LFB950
 4065 013d 00       		.uleb128 0
 4066              	.LLSDACSE950:
 4067 013e 01       		.byte	0x1
 4068 013f 00       		.byte	0
 4069              		.align 4
 4070 0140 00000000 		.long	0
 4071              	
 4072              	.LLSDATT950:
 4073              		.section	.text._ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_itera
 4075              		.section	.text._ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_I
 4076              		.weak	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EE
 4078              	_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_S
 4079              	.LFB951:
 450:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 4080              		.loc 12 450 0
 4081              		.cfi_startproc
 4082 0000 55       		pushq	%rbp
 4083              		.cfi_def_cfa_offset 16
 4084              		.cfi_offset 6, -16
 4085 0001 4889E5   		movq	%rsp, %rbp
 4086              		.cfi_def_cfa_register 6
 4087 0004 53       		pushq	%rbx
 4088 0005 4883EC38 		subq	$56, %rsp
 4089              		.cfi_offset 3, -24
 4090 0009 48897DE0 		movq	%rdi, -32(%rbp)
 4091 000d 488975D0 		movq	%rsi, -48(%rbp)
 4092 0011 488955C0 		movq	%rdx, -64(%rbp)
 460:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 4093              		.loc 12 460 0
 4094 0015 488B45D0 		movq	-48(%rbp), %rax
 4095 0019 4889C7   		movq	%rax, %rdi
 4096 001c E8000000 		call	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 4096      00
 4097 0021 4889C3   		movq	%rax, %rbx
 4098 0024 488B45E0 		movq	-32(%rbp), %rax
 4099 0028 4889C7   		movq	%rax, %rdi
 4100 002b E8000000 		call	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 4100      00
 4101 0030 488B55C0 		movq	-64(%rbp), %rdx
 4102 0034 4889DE   		movq	%rbx, %rsi
 4103 0037 4889C7   		movq	%rax, %rdi
 4104 003a E8000000 		call	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEE
 4104      00
 461:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4105              		.loc 12 461 0
 4106 003f 4883C438 		addq	$56, %rsp
 4107 0043 5B       		popq	%rbx
 4108 0044 5D       		popq	%rbp
 4109              		.cfi_def_cfa 7, 8
 4110 0045 C3       		ret
 4111              		.cfi_endproc
 4112              	.LFE951:
 4114              		.section	.text._ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3
 4115              		.weak	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_R
 4117              	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E
 4118              	.LFB952:
 148:/usr/include/c++/4.8/bits/stl_construct.h **** 	     allocator<_Tp>&)
 4119              		.loc 6 148 0
 4120              		.cfi_startproc
 4121 0000 55       		pushq	%rbp
 4122              		.cfi_def_cfa_offset 16
 4123              		.cfi_offset 6, -16
 4124 0001 4889E5   		movq	%rsp, %rbp
 4125              		.cfi_def_cfa_register 6
 4126 0004 4883EC20 		subq	$32, %rsp
 4127 0008 48897DF0 		movq	%rdi, -16(%rbp)
 4128 000c 488975E0 		movq	%rsi, -32(%rbp)
 4129 0010 488955E8 		movq	%rdx, -24(%rbp)
 151:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 4130              		.loc 6 151 0
 4131 0014 488B55E0 		movq	-32(%rbp), %rdx
 4132 0018 488B45F0 		movq	-16(%rbp), %rax
 4133 001c 4889D6   		movq	%rdx, %rsi
 4134 001f 4889C7   		movq	%rax, %rdi
 4135 0022 E8000000 		call	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_@PLT
 4135      00
 4136              		.loc 6 152 0
 4137 0027 C9       		leave
 4138              		.cfi_def_cfa 7, 8
 4139 0028 C3       		ret
 4140              		.cfi_endproc
 4141              	.LFE952:
 4143              		.section	.text._ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_,"axG",@progbits,_ZSt4copyIPSt4pairIiSsES2_ET
 4144              		.weak	_ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_
 4146              	_ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_:
 4147              	.LFB953:
 450:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 4148              		.loc 12 450 0
 4149              		.cfi_startproc
 4150 0000 55       		pushq	%rbp
 4151              		.cfi_def_cfa_offset 16
 4152              		.cfi_offset 6, -16
 4153 0001 4889E5   		movq	%rsp, %rbp
 4154              		.cfi_def_cfa_register 6
 4155 0004 53       		pushq	%rbx
 4156 0005 4883EC28 		subq	$40, %rsp
 4157              		.cfi_offset 3, -24
 4158 0009 48897DE8 		movq	%rdi, -24(%rbp)
 4159 000d 488975E0 		movq	%rsi, -32(%rbp)
 4160 0011 488955D8 		movq	%rdx, -40(%rbp)
 460:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 4161              		.loc 12 460 0
 4162 0015 488B45E0 		movq	-32(%rbp), %rax
 4163 0019 4889C7   		movq	%rax, %rdi
 4164 001c E8000000 		call	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_@PLT
 4164      00
 4165 0021 4889C3   		movq	%rax, %rbx
 4166 0024 488B45E8 		movq	-24(%rbp), %rax
 4167 0028 4889C7   		movq	%rax, %rdi
 4168 002b E8000000 		call	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_@PLT
 4168      00
 4169 0030 488B55D8 		movq	-40(%rbp), %rdx
 4170 0034 4889DE   		movq	%rbx, %rsi
 4171 0037 4889C7   		movq	%rax, %rdi
 4172 003a E8000000 		call	_ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_@PLT
 4172      00
 461:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4173              		.loc 12 461 0
 4174 003f 4883C428 		addq	$40, %rsp
 4175 0043 5B       		popq	%rbx
 4176 0044 5D       		popq	%rbp
 4177              		.cfi_def_cfa 7, 8
 4178 0045 C3       		ret
 4179              		.cfi_endproc
 4180              	.LFE953:
 4182              		.section	.text._ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E,"axG",@progbit
 4183              		.weak	_ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E
 4185              	_ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E:
 4186              	.LFB954:
 256:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 4187              		.loc 13 256 0
 4188              		.cfi_startproc
 4189 0000 55       		pushq	%rbp
 4190              		.cfi_def_cfa_offset 16
 4191              		.cfi_offset 6, -16
 4192 0001 4889E5   		movq	%rsp, %rbp
 4193              		.cfi_def_cfa_register 6
 4194 0004 4883EC20 		subq	$32, %rsp
 4195 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4196 000c 488975F0 		movq	%rsi, -16(%rbp)
 4197 0010 488955E8 		movq	%rdx, -24(%rbp)
 4198 0014 48894DE0 		movq	%rcx, -32(%rbp)
 258:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 4199              		.loc 13 258 0
 4200 0018 488B55E8 		movq	-24(%rbp), %rdx
 4201 001c 488B4DF0 		movq	-16(%rbp), %rcx
 4202 0020 488B45F8 		movq	-8(%rbp), %rax
 4203 0024 4889CE   		movq	%rcx, %rsi
 4204 0027 4889C7   		movq	%rax, %rdi
 4205 002a E8000000 		call	_ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_@PLT
 4205      00
 4206 002f C9       		leave
 4207              		.cfi_def_cfa 7, 8
 4208 0030 C3       		ret
 4209              		.cfi_endproc
 4210              	.LFE954:
 4212              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv,"axG",@progbits,_ZNKSt
 4213              		.align 2
 4214              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv
 4216              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv:
 4217              	.LFB955:
 645:/usr/include/c++/4.8/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 4218              		.loc 5 645 0
 4219              		.cfi_startproc
 4220 0000 55       		pushq	%rbp
 4221              		.cfi_def_cfa_offset 16
 4222              		.cfi_offset 6, -16
 4223 0001 4889E5   		movq	%rsp, %rbp
 4224              		.cfi_def_cfa_register 6
 4225 0004 48897DF8 		movq	%rdi, -8(%rbp)
 646:/usr/include/c++/4.8/bits/stl_vector.h **** 
 4226              		.loc 5 646 0
 4227 0008 488B45F8 		movq	-8(%rbp), %rax
 4228 000c 488B4008 		movq	8(%rax), %rax
 4229 0010 4889C2   		movq	%rax, %rdx
 4230 0013 488B45F8 		movq	-8(%rbp), %rax
 4231 0017 488B00   		movq	(%rax), %rax
 4232 001a 4829C2   		subq	%rax, %rdx
 4233 001d 4889D0   		movq	%rdx, %rax
 4234 0020 48C1F803 		sarq	$3, %rax
 4235 0024 4889C2   		movq	%rax, %rdx
 4236 0027 48B8B76D 		movabsq	$7905747460161236407, %rax
 4236      DBB66DDB 
 4236      B66D
 4237 0031 480FAFC2 		imulq	%rdx, %rax
 4238 0035 5D       		popq	%rbp
 4239              		.cfi_def_cfa 7, 8
 4240 0036 C3       		ret
 4241              		.cfi_endproc
 4242              	.LFE955:
 4244              		.section	.text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv,"axG",@progbits,_Z
 4245              		.align 2
 4246              		.weak	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv
 4248              	_ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv:
 4249              	.LFB956:
 650:/usr/include/c++/4.8/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 4250              		.loc 5 650 0
 4251              		.cfi_startproc
 4252 0000 55       		pushq	%rbp
 4253              		.cfi_def_cfa_offset 16
 4254              		.cfi_offset 6, -16
 4255 0001 4889E5   		movq	%rsp, %rbp
 4256              		.cfi_def_cfa_register 6
 4257 0004 4883EC10 		subq	$16, %rsp
 4258 0008 48897DF8 		movq	%rdi, -8(%rbp)
 651:/usr/include/c++/4.8/bits/stl_vector.h **** 
 4259              		.loc 5 651 0
 4260 000c 488B45F8 		movq	-8(%rbp), %rax
 4261 0010 4889C7   		movq	%rax, %rdi
 4262 0013 E8000000 		call	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 4262      00
 4263 0018 4889C7   		movq	%rax, %rdi
 4264 001b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_@PLT
 4264      00
 4265 0020 C9       		leave
 4266              		.cfi_def_cfa 7, 8
 4267 0021 C3       		ret
 4268              		.cfi_endproc
 4269              	.LFE956:
 4271              		.section	.text._ZSt3maxImERKT_S2_S2_,"axG",@progbits,_ZSt3maxImERKT_S2_S2_,comdat
 4272              		.weak	_ZSt3maxImERKT_S2_S2_
 4274              	_ZSt3maxImERKT_S2_S2_:
 4275              	.LFB957:
 216:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 4276              		.loc 12 216 0
 4277              		.cfi_startproc
 4278 0000 55       		pushq	%rbp
 4279              		.cfi_def_cfa_offset 16
 4280              		.cfi_offset 6, -16
 4281 0001 4889E5   		movq	%rsp, %rbp
 4282              		.cfi_def_cfa_register 6
 4283 0004 48897DF8 		movq	%rdi, -8(%rbp)
 4284 0008 488975F0 		movq	%rsi, -16(%rbp)
 221:/usr/include/c++/4.8/bits/stl_algobase.h **** 	return __b;
 4285              		.loc 12 221 0
 4286 000c 488B45F8 		movq	-8(%rbp), %rax
 4287 0010 488B10   		movq	(%rax), %rdx
 4288 0013 488B45F0 		movq	-16(%rbp), %rax
 4289 0017 488B00   		movq	(%rax), %rax
 4290 001a 4839C2   		cmpq	%rax, %rdx
 4291 001d 7306     		jnb	.L222
 222:/usr/include/c++/4.8/bits/stl_algobase.h ****       return __a;
 4292              		.loc 12 222 0
 4293 001f 488B45F0 		movq	-16(%rbp), %rax
 4294 0023 EB04     		jmp	.L223
 4295              	.L222:
 223:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 4296              		.loc 12 223 0
 4297 0025 488B45F8 		movq	-8(%rbp), %rax
 4298              	.L223:
 224:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4299              		.loc 12 224 0
 4300 0029 5D       		popq	%rbp
 4301              		.cfi_def_cfa 7, 8
 4302 002a C3       		ret
 4303              		.cfi_endproc
 4304              	.LFE957:
 4306              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv,"axG",@
 4307              		.align 2
 4308              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv
 4310              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv:
 4311              	.LFB958:
  99:/usr/include/c++/4.8/ext/new_allocator.h ****       { 
 4312              		.loc 11 99 0
 4313              		.cfi_startproc
 4314 0000 55       		pushq	%rbp
 4315              		.cfi_def_cfa_offset 16
 4316              		.cfi_offset 6, -16
 4317 0001 4889E5   		movq	%rsp, %rbp
 4318              		.cfi_def_cfa_register 6
 4319 0004 4883EC20 		subq	$32, %rsp
 4320 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4321 000c 488975F0 		movq	%rsi, -16(%rbp)
 4322 0010 488955E8 		movq	%rdx, -24(%rbp)
 101:/usr/include/c++/4.8/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 4323              		.loc 11 101 0
 4324 0014 488B45F8 		movq	-8(%rbp), %rax
 4325 0018 4889C7   		movq	%rax, %rdi
 4326 001b E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv@PLT
 4326      00
 4327 0020 483B45F0 		cmpq	-16(%rbp), %rax
 4328 0024 0F92C0   		setb	%al
 4329 0027 84C0     		testb	%al, %al
 4330 0029 7405     		je	.L225
 102:/usr/include/c++/4.8/ext/new_allocator.h **** 
 4331              		.loc 11 102 0
 4332 002b E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 4332      00
 4333              	.L225:
 104:/usr/include/c++/4.8/ext/new_allocator.h ****       }
 4334              		.loc 11 104 0
 4335 0030 488B45F0 		movq	-16(%rbp), %rax
 4336 0034 48C1E003 		salq	$3, %rax
 4337 0038 488D14C5 		leaq	0(,%rax,8), %rdx
 4337      00000000 
 4338 0040 4829C2   		subq	%rax, %rdx
 4339 0043 4889D0   		movq	%rdx, %rax
 4340 0046 4889C7   		movq	%rax, %rdi
 4341 0049 E8000000 		call	_Znwm@PLT
 4341      00
 105:/usr/include/c++/4.8/ext/new_allocator.h **** 
 4342              		.loc 11 105 0
 4343 004e C9       		leave
 4344              		.cfi_def_cfa 7, 8
 4345 004f C3       		ret
 4346              		.cfi_endproc
 4347              	.LFE958:
 4349              		.section	.text._ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaI
 4350              		.weak	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E
 4352              	_ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E:
 4353              	.LFB959:
 256:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 			   _ForwardIterator __result, allocator<_Tp>&)
 4354              		.loc 13 256 0
 4355              		.cfi_startproc
 4356 0000 55       		pushq	%rbp
 4357              		.cfi_def_cfa_offset 16
 4358              		.cfi_offset 6, -16
 4359 0001 4889E5   		movq	%rsp, %rbp
 4360              		.cfi_def_cfa_register 6
 4361 0004 4883EC20 		subq	$32, %rsp
 4362 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4363 000c 488975F0 		movq	%rsi, -16(%rbp)
 4364 0010 488955E8 		movq	%rdx, -24(%rbp)
 4365 0014 48894DE0 		movq	%rcx, -32(%rbp)
 258:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 4366              		.loc 13 258 0
 4367 0018 488B55E8 		movq	-24(%rbp), %rdx
 4368 001c 488B4DF0 		movq	-16(%rbp), %rcx
 4369 0020 488B45F8 		movq	-8(%rbp), %rax
 4370 0024 4889CE   		movq	%rcx, %rsi
 4371 0027 4889C7   		movq	%rax, %rdi
 4372 002a E8000000 		call	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_@PLT
 4372      00
 4373 002f C9       		leave
 4374              		.cfi_def_cfa 7, 8
 4375 0030 C3       		ret
 4376              		.cfi_endproc
 4377              	.LFE959:
 4379              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_,"axG",@p
 4380              		.align 2
 4381              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_
 4383              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_:
 4384              	.LFB960:
 131:/usr/include/c++/4.8/ext/new_allocator.h **** 
 132:/usr/include/c++/4.8/ext/new_allocator.h ****       void 
 133:/usr/include/c++/4.8/ext/new_allocator.h ****       destroy(pointer __p) { __p->~_Tp(); }
 4385              		.loc 11 133 0
 4386              		.cfi_startproc
 4387 0000 55       		pushq	%rbp
 4388              		.cfi_def_cfa_offset 16
 4389              		.cfi_offset 6, -16
 4390 0001 4889E5   		movq	%rsp, %rbp
 4391              		.cfi_def_cfa_register 6
 4392 0004 4883EC10 		subq	$16, %rsp
 4393 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4394 000c 488975F0 		movq	%rsi, -16(%rbp)
 4395              		.loc 11 133 0
 4396 0010 488B45F0 		movq	-16(%rbp), %rax
 4397 0014 4889C7   		movq	%rax, %rdi
 4398 0017 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 4398      00
 4399 001c C9       		leave
 4400              		.cfi_def_cfa 7, 8
 4401 001d C3       		ret
 4402              		.cfi_endproc
 4403              	.LFE960:
 4405              		.section	.text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_,"axG",@progbits,_ZSt8_Destroy
 4406              		.weak	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
 4408              	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:
 4409              	.LFB961:
 122:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 4410              		.loc 6 122 0
 4411              		.cfi_startproc
 4412 0000 55       		pushq	%rbp
 4413              		.cfi_def_cfa_offset 16
 4414              		.cfi_offset 6, -16
 4415 0001 4889E5   		movq	%rsp, %rbp
 4416              		.cfi_def_cfa_register 6
 4417 0004 4883EC10 		subq	$16, %rsp
 4418 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4419 000c 488975F0 		movq	%rsi, -16(%rbp)
 4420              	.LBB43:
 126:/usr/include/c++/4.8/bits/stl_construct.h **** 	__destroy(__first, __last);
 4421              		.loc 6 126 0
 4422 0010 488B55F0 		movq	-16(%rbp), %rdx
 4423 0014 488B45F8 		movq	-8(%rbp), %rax
 4424 0018 4889D6   		movq	%rdx, %rsi
 4425 001b 4889C7   		movq	%rax, %rdi
 4426 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_@PLT
 4426      00
 4427              	.LBE43:
 128:/usr/include/c++/4.8/bits/stl_construct.h **** 
 4428              		.loc 6 128 0
 4429 0023 C9       		leave
 4430              		.cfi_def_cfa 7, 8
 4431 0024 C3       		ret
 4432              		.cfi_endproc
 4433              	.LFE961:
 4435              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m,"ax
 4436              		.align 2
 4437              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
 4439              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:
 4440              	.LFB962:
 109:/usr/include/c++/4.8/ext/new_allocator.h ****       { ::operator delete(__p); }
 4441              		.loc 11 109 0
 4442              		.cfi_startproc
 4443 0000 55       		pushq	%rbp
 4444              		.cfi_def_cfa_offset 16
 4445              		.cfi_offset 6, -16
 4446 0001 4889E5   		movq	%rsp, %rbp
 4447              		.cfi_def_cfa_register 6
 4448 0004 4883EC20 		subq	$32, %rsp
 4449 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4450 000c 488975F0 		movq	%rsi, -16(%rbp)
 4451 0010 488955E8 		movq	%rdx, -24(%rbp)
 110:/usr/include/c++/4.8/ext/new_allocator.h **** 
 4452              		.loc 11 110 0
 4453 0014 488B45F0 		movq	-16(%rbp), %rax
 4454 0018 4889C7   		movq	%rax, %rdi
 4455 001b E8000000 		call	_ZdlPv@PLT
 4455      00
 4456 0020 C9       		leave
 4457              		.cfi_def_cfa 7, 8
 4458 0021 C3       		ret
 4459              		.cfi_endproc
 4460              	.LFE962:
 4462              		.section	.text._ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_,"axG",@pro
 4463              		.weak	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_
 4465              	_ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_:
 4466              	.LFB963:
 288:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 4467              		.loc 12 288 0
 4468              		.cfi_startproc
 4469 0000 55       		pushq	%rbp
 4470              		.cfi_def_cfa_offset 16
 4471              		.cfi_offset 6, -16
 4472 0001 4889E5   		movq	%rsp, %rbp
 4473              		.cfi_def_cfa_register 6
 4474 0004 4883EC10 		subq	$16, %rsp
 4475 0008 48897DF8 		movq	%rdi, -8(%rbp)
 289:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4476              		.loc 12 289 0
 4477 000c 488B45F8 		movq	-8(%rbp), %rax
 4478 0010 4889C7   		movq	%rax, %rdi
 4479 0013 E8000000 		call	_ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_@PLT
 4479      00
 4480 0018 C9       		leave
 4481              		.cfi_def_cfa 7, 8
 4482 0019 C3       		ret
 4483              		.cfi_endproc
 4484              	.LFE963:
 4486              		.section	.text._ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_,"axG",@progbits,_ZS
 4487              		.weak	_ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
 4489              	_ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:
 4490              	.LFB964:
 592:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 4491              		.loc 12 592 0
 4492              		.cfi_startproc
 4493 0000 55       		pushq	%rbp
 4494              		.cfi_def_cfa_offset 16
 4495              		.cfi_offset 6, -16
 4496 0001 4889E5   		movq	%rsp, %rbp
 4497              		.cfi_def_cfa_register 6
 4498 0004 4154     		pushq	%r12
 4499 0006 53       		pushq	%rbx
 4500 0007 4883EC20 		subq	$32, %rsp
 4501              		.cfi_offset 12, -24
 4502              		.cfi_offset 3, -32
 4503 000b 48897DE8 		movq	%rdi, -24(%rbp)
 4504 000f 488975E0 		movq	%rsi, -32(%rbp)
 4505 0013 488955D8 		movq	%rdx, -40(%rbp)
 596:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 4506              		.loc 12 596 0
 4507 0017 488B45D8 		movq	-40(%rbp), %rax
 4508 001b 4889C7   		movq	%rax, %rdi
 4509 001e E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 4509      00
 4510 0023 4989C4   		movq	%rax, %r12
 4511 0026 488B45E0 		movq	-32(%rbp), %rax
 4512 002a 4889C7   		movq	%rax, %rdi
 4513 002d E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 4513      00
 4514 0032 4889C3   		movq	%rax, %rbx
 4515 0035 488B45E8 		movq	-24(%rbp), %rax
 4516 0039 4889C7   		movq	%rax, %rdi
 4517 003c E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 4517      00
 4518 0041 4C89E2   		movq	%r12, %rdx
 4519 0044 4889DE   		movq	%rbx, %rsi
 4520 0047 4889C7   		movq	%rax, %rdi
 4521 004a E8000000 		call	_ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_@PLT
 4521      00
 597:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4522              		.loc 12 597 0
 4523 004f 4883C420 		addq	$32, %rsp
 4524 0053 5B       		popq	%rbx
 4525 0054 415C     		popq	%r12
 4526 0056 5D       		popq	%rbp
 4527              		.cfi_def_cfa 7, 8
 4528 0057 C3       		ret
 4529              		.cfi_endproc
 4530              	.LFE964:
 4532              		.section	.text._ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv,"axG",@progbits,_ZNKSt6vectorISt4pair
 4533              		.align 2
 4534              		.weak	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv
 4536              	_ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv:
 4537              	.LFB965:
 650:/usr/include/c++/4.8/bits/stl_vector.h ****       { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 4538              		.loc 5 650 0
 4539              		.cfi_startproc
 4540 0000 55       		pushq	%rbp
 4541              		.cfi_def_cfa_offset 16
 4542              		.cfi_offset 6, -16
 4543 0001 4889E5   		movq	%rsp, %rbp
 4544              		.cfi_def_cfa_register 6
 4545 0004 4883EC10 		subq	$16, %rsp
 4546 0008 48897DF8 		movq	%rdi, -8(%rbp)
 651:/usr/include/c++/4.8/bits/stl_vector.h **** 
 4547              		.loc 5 651 0
 4548 000c 488B45F8 		movq	-8(%rbp), %rax
 4549 0010 4889C7   		movq	%rax, %rdi
 4550 0013 E8000000 		call	_ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 4550      00
 4551 0018 4889C7   		movq	%rax, %rdi
 4552 001b E8000000 		call	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_@PLT
 4552      00
 4553 0020 C9       		leave
 4554              		.cfi_def_cfa 7, 8
 4555 0021 C3       		ret
 4556              		.cfi_endproc
 4557              	.LFE965:
 4559              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv,"axG",@progbits,_ZN9__gnu_
 4560              		.align 2
 4561              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv
 4563              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv:
 4564              	.LFB966:
  99:/usr/include/c++/4.8/ext/new_allocator.h ****       { 
 4565              		.loc 11 99 0
 4566              		.cfi_startproc
 4567 0000 55       		pushq	%rbp
 4568              		.cfi_def_cfa_offset 16
 4569              		.cfi_offset 6, -16
 4570 0001 4889E5   		movq	%rsp, %rbp
 4571              		.cfi_def_cfa_register 6
 4572 0004 4883EC20 		subq	$32, %rsp
 4573 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4574 000c 488975F0 		movq	%rsi, -16(%rbp)
 4575 0010 488955E8 		movq	%rdx, -24(%rbp)
 101:/usr/include/c++/4.8/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
 4576              		.loc 11 101 0
 4577 0014 488B45F8 		movq	-8(%rbp), %rax
 4578 0018 4889C7   		movq	%rax, %rdi
 4579 001b E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv@PLT
 4579      00
 4580 0020 483B45F0 		cmpq	-16(%rbp), %rax
 4581 0024 0F92C0   		setb	%al
 4582 0027 84C0     		testb	%al, %al
 4583 0029 7405     		je	.L239
 102:/usr/include/c++/4.8/ext/new_allocator.h **** 
 4584              		.loc 11 102 0
 4585 002b E8000000 		call	_ZSt17__throw_bad_allocv@PLT
 4585      00
 4586              	.L239:
 104:/usr/include/c++/4.8/ext/new_allocator.h ****       }
 4587              		.loc 11 104 0
 4588 0030 488B45F0 		movq	-16(%rbp), %rax
 4589 0034 48C1E004 		salq	$4, %rax
 4590 0038 4889C7   		movq	%rax, %rdi
 4591 003b E8000000 		call	_Znwm@PLT
 4591      00
 105:/usr/include/c++/4.8/ext/new_allocator.h **** 
 4592              		.loc 11 105 0
 4593 0040 C9       		leave
 4594              		.cfi_def_cfa 7, 8
 4595 0041 C3       		ret
 4596              		.cfi_endproc
 4597              	.LFE966:
 4599              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_,"axG",@progbits,_ZN9__gnu_c
 4600              		.align 2
 4601              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_
 4603              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_:
 4604              	.LFB967:
 4605              		.loc 11 133 0
 4606              		.cfi_startproc
 4607 0000 55       		pushq	%rbp
 4608              		.cfi_def_cfa_offset 16
 4609              		.cfi_offset 6, -16
 4610 0001 4889E5   		movq	%rsp, %rbp
 4611              		.cfi_def_cfa_register 6
 4612 0004 4883EC10 		subq	$16, %rsp
 4613 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4614 000c 488975F0 		movq	%rsi, -16(%rbp)
 4615              		.loc 11 133 0
 4616 0010 488B45F0 		movq	-16(%rbp), %rax
 4617 0014 4889C7   		movq	%rax, %rdi
 4618 0017 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 4618      00
 4619 001c C9       		leave
 4620              		.cfi_def_cfa 7, 8
 4621 001d C3       		ret
 4622              		.cfi_endproc
 4623              	.LFE967:
 4625              		.section	.text._ZSt11__addressofISt4pairIiSsEEPT_RS2_,"axG",@progbits,_ZSt11__addressofISt4pairIiS
 4626              		.weak	_ZSt11__addressofISt4pairIiSsEEPT_RS2_
 4628              	_ZSt11__addressofISt4pairIiSsEEPT_RS2_:
 4629              	.LFB968:
 4630              		.file 14 "/usr/include/c++/4.8/bits/move.h"
   1:/usr/include/c++/4.8/bits/move.h **** // Move, forward and identity for C++0x + swap -*- C++ -*-
   2:/usr/include/c++/4.8/bits/move.h **** 
   3:/usr/include/c++/4.8/bits/move.h **** // Copyright (C) 2007-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/move.h **** //
   5:/usr/include/c++/4.8/bits/move.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/move.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/move.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/move.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/move.h **** // any later version.
  10:/usr/include/c++/4.8/bits/move.h **** 
  11:/usr/include/c++/4.8/bits/move.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/move.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/move.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/move.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/move.h **** 
  16:/usr/include/c++/4.8/bits/move.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/move.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/move.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/move.h **** 
  20:/usr/include/c++/4.8/bits/move.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/move.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/move.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/move.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/move.h **** 
  25:/usr/include/c++/4.8/bits/move.h **** /** @file bits/move.h
  26:/usr/include/c++/4.8/bits/move.h ****  *  This is an internal header file, included by other library headers.
  27:/usr/include/c++/4.8/bits/move.h ****  *  Do not attempt to use it directly. @headername{utility}
  28:/usr/include/c++/4.8/bits/move.h ****  */
  29:/usr/include/c++/4.8/bits/move.h **** 
  30:/usr/include/c++/4.8/bits/move.h **** #ifndef _MOVE_H
  31:/usr/include/c++/4.8/bits/move.h **** #define _MOVE_H 1
  32:/usr/include/c++/4.8/bits/move.h **** 
  33:/usr/include/c++/4.8/bits/move.h **** #include <bits/c++config.h>
  34:/usr/include/c++/4.8/bits/move.h **** #include <bits/concept_check.h>
  35:/usr/include/c++/4.8/bits/move.h **** 
  36:/usr/include/c++/4.8/bits/move.h **** namespace std _GLIBCXX_VISIBILITY(default)
  37:/usr/include/c++/4.8/bits/move.h **** {
  38:/usr/include/c++/4.8/bits/move.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  39:/usr/include/c++/4.8/bits/move.h **** 
  40:/usr/include/c++/4.8/bits/move.h ****   // Used, in C++03 mode too, by allocators, etc.
  41:/usr/include/c++/4.8/bits/move.h ****   /**
  42:/usr/include/c++/4.8/bits/move.h ****    *  @brief Same as C++11 std::addressof
  43:/usr/include/c++/4.8/bits/move.h ****    *  @ingroup utilities
  44:/usr/include/c++/4.8/bits/move.h ****    */
  45:/usr/include/c++/4.8/bits/move.h ****   template<typename _Tp>
  46:/usr/include/c++/4.8/bits/move.h ****     inline _Tp*
  47:/usr/include/c++/4.8/bits/move.h ****     __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 4631              		.loc 14 47 0
 4632              		.cfi_startproc
 4633 0000 55       		pushq	%rbp
 4634              		.cfi_def_cfa_offset 16
 4635              		.cfi_offset 6, -16
 4636 0001 4889E5   		movq	%rsp, %rbp
 4637              		.cfi_def_cfa_register 6
 4638 0004 48897DF8 		movq	%rdi, -8(%rbp)
  48:/usr/include/c++/4.8/bits/move.h ****     {
  49:/usr/include/c++/4.8/bits/move.h ****       return reinterpret_cast<_Tp*>
  50:/usr/include/c++/4.8/bits/move.h **** 	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 4639              		.loc 14 50 0
 4640 0008 488B45F8 		movq	-8(%rbp), %rax
  51:/usr/include/c++/4.8/bits/move.h ****     }
 4641              		.loc 14 51 0
 4642 000c 5D       		popq	%rbp
 4643              		.cfi_def_cfa 7, 8
 4644 000d C3       		ret
 4645              		.cfi_endproc
 4646              	.LFE968:
 4648              		.section	.text._ZSt8_DestroyISt4pairIiSsEEvPT_,"axG",@progbits,_ZSt8_DestroyISt4pairIiSsEEvPT_,com
 4649              		.weak	_ZSt8_DestroyISt4pairIiSsEEvPT_
 4651              	_ZSt8_DestroyISt4pairIiSsEEvPT_:
 4652              	.LFB969:
  92:/usr/include/c++/4.8/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 4653              		.loc 6 92 0
 4654              		.cfi_startproc
 4655 0000 55       		pushq	%rbp
 4656              		.cfi_def_cfa_offset 16
 4657              		.cfi_offset 6, -16
 4658 0001 4889E5   		movq	%rsp, %rbp
 4659              		.cfi_def_cfa_register 6
 4660 0004 4883EC10 		subq	$16, %rsp
 4661 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/4.8/bits/stl_construct.h **** 
 4662              		.loc 6 93 0
 4663 000c 488B45F8 		movq	-8(%rbp), %rax
 4664 0010 4889C7   		movq	%rax, %rdi
 4665 0013 E8000000 		call	_ZNSt4pairIiSsED1Ev@PLT
 4665      00
 4666 0018 C9       		leave
 4667              		.cfi_def_cfa 7, 8
 4668 0019 C3       		ret
 4669              		.cfi_endproc
 4670              	.LFE969:
 4672              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_,"axG",@progbits,_ZNS
 4673              		.align 2
 4674              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_
 4676              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_:
 4677              	.LFB971:
  90:/usr/include/c++/4.8/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 4678              		.loc 5 90 0
 4679              		.cfi_startproc
 4680 0000 55       		pushq	%rbp
 4681              		.cfi_def_cfa_offset 16
 4682              		.cfi_offset 6, -16
 4683 0001 4889E5   		movq	%rsp, %rbp
 4684              		.cfi_def_cfa_register 6
 4685 0004 4883EC10 		subq	$16, %rsp
 4686 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4687 000c 488975F0 		movq	%rsi, -16(%rbp)
 4688              	.LBB44:
  91:/usr/include/c++/4.8/bits/stl_vector.h **** 	{ }
 4689              		.loc 5 91 0
 4690 0010 488B55F0 		movq	-16(%rbp), %rdx
 4691 0014 488B45F8 		movq	-8(%rbp), %rax
 4692 0018 4889D6   		movq	%rdx, %rsi
 4693 001b 4889C7   		movq	%rax, %rdi
 4694 001e E8000000 		call	_ZNSaISt4pairIiSsEEC2ERKS1_@PLT
 4694      00
 4695 0023 488B45F8 		movq	-8(%rbp), %rax
 4696 0027 48C70000 		movq	$0, (%rax)
 4696      000000
 4697 002e 488B45F8 		movq	-8(%rbp), %rax
 4698 0032 48C74008 		movq	$0, 8(%rax)
 4698      00000000 
 4699 003a 488B45F8 		movq	-8(%rbp), %rax
 4700 003e 48C74010 		movq	$0, 16(%rax)
 4700      00000000 
 4701              	.LBE44:
  92:/usr/include/c++/4.8/bits/stl_vector.h **** 
 4702              		.loc 5 92 0
 4703 0046 C9       		leave
 4704              		.cfi_def_cfa 7, 8
 4705 0047 C3       		ret
 4706              		.cfi_endproc
 4707              	.LFE971:
 4709              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC1ERKS2_
 4710              		.set	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC1ERKS2_,_ZNSt12_Vector_baseISt4pairIiS
 4711              		.section	.text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm,"axG",@progbits,_ZNSt
 4712              		.align 2
 4713              		.weak	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm
 4715              	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm:
 4716              	.LFB973:
 179:/usr/include/c++/4.8/bits/stl_vector.h ****       {
 4717              		.loc 5 179 0
 4718              		.cfi_startproc
 4719 0000 55       		pushq	%rbp
 4720              		.cfi_def_cfa_offset 16
 4721              		.cfi_offset 6, -16
 4722 0001 4889E5   		movq	%rsp, %rbp
 4723              		.cfi_def_cfa_register 6
 4724 0004 4883EC10 		subq	$16, %rsp
 4725 0008 48897DF8 		movq	%rdi, -8(%rbp)
 4726 000c 488975F0 		movq	%rsi, -16(%rbp)
 181:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 4727              		.loc 5 181 0
 4728 0010 488B55F0 		movq	-16(%rbp), %rdx
 4729 0014 488B45F8 		movq	-8(%rbp), %rax
 4730 0018 4889D6   		movq	%rdx, %rsi
 4731 001b 4889C7   		movq	%rax, %rdi
 4732 001e E8000000 		call	_ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm@PLT
 4732      00
 4733 0023 488B55F8 		movq	-8(%rbp), %rdx
 4734 0027 488902   		movq	%rax, (%rdx)
 182:/usr/include/c++/4.8/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 4735              		.loc 5 182 0
 4736 002a 488B45F8 		movq	-8(%rbp), %rax
 4737 002e 488B10   		movq	(%rax), %rdx
 4738 0031 488B45F8 		movq	-8(%rbp), %rax
 4739 0035 48895008 		movq	%rdx, 8(%rax)
 183:/usr/include/c++/4.8/bits/stl_vector.h ****       }
 4740              		.loc 5 183 0
 4741 0039 488B45F8 		movq	-8(%rbp), %rax
 4742 003d 488B00   		movq	(%rax), %rax
 4743 0040 488B55F0 		movq	-16(%rbp), %rdx
 4744 0044 48C1E204 		salq	$4, %rdx
 4745 0048 4801C2   		addq	%rax, %rdx
 4746 004b 488B45F8 		movq	-8(%rbp), %rax
 4747 004f 48895010 		movq	%rdx, 16(%rax)
 184:/usr/include/c++/4.8/bits/stl_vector.h ****     };
 4748              		.loc 5 184 0
 4749 0053 C9       		leave
 4750              		.cfi_def_cfa 7, 8
 4751 0054 C3       		ret
 4752              		.cfi_endproc
 4753              	.LFE973:
 4755              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_,"axG"
 4756              		.align 2
 4757              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_
 4759              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:
 4760              	.LFB975:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 4761              		.loc 9 726 0
 4762              		.cfi_startproc
 4763 0000 55       		pushq	%rbp
 4764              		.cfi_def_cfa_offset 16
 4765              		.cfi_offset 6, -16
 4766 0001 4889E5   		movq	%rsp, %rbp
 4767              		.cfi_def_cfa_register 6
 4768 0004 48897DF8 		movq	%rdi, -8(%rbp)
 4769 0008 488975F0 		movq	%rsi, -16(%rbp)
 4770              	.LBB45:
 726:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 4771              		.loc 9 726 0
 4772 000c 488B45F0 		movq	-16(%rbp), %rax
 4773 0010 488B10   		movq	(%rax), %rdx
 4774 0013 488B45F8 		movq	-8(%rbp), %rax
 4775 0017 488910   		movq	%rdx, (%rax)
 4776              	.LBE45:
 4777 001a 5D       		popq	%rbp
 4778              		.cfi_def_cfa 7, 8
 4779 001b C3       		ret
 4780              		.cfi_endproc
 4781              	.LFE975:
 4783              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_
 4784              		.set	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_,_ZN9__gnu_cxx17
 4785              		.section	.text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_
 4786              		.weak	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEE
 4788              	_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_ET
 4789              	.LFB977:
 107:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 4790              		.loc 13 107 0
 4791              		.cfi_startproc
 4792 0000 55       		pushq	%rbp
 4793              		.cfi_def_cfa_offset 16
 4794              		.cfi_offset 6, -16
 4795 0001 4889E5   		movq	%rsp, %rbp
 4796              		.cfi_def_cfa_register 6
 4797 0004 4883EC20 		subq	$32, %rsp
 4798 0008 48897DF0 		movq	%rdi, -16(%rbp)
 4799 000c 488975E0 		movq	%rsi, -32(%rbp)
 4800 0010 488955E8 		movq	%rdx, -24(%rbp)
 4801              	.LBB46:
 117:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 4802              		.loc 13 117 0
 4803 0014 488B55E8 		movq	-24(%rbp), %rdx
 4804 0018 488B4DE0 		movq	-32(%rbp), %rcx
 4805 001c 488B45F0 		movq	-16(%rbp), %rax
 4806 0020 4889CE   		movq	%rcx, %rsi
 4807 0023 4889C7   		movq	%rax, %rdi
 4808 0026 E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSs
 4808      00
 4809              	.LBE46:
 118:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 4810              		.loc 13 118 0
 4811 002b C9       		leave
 4812              		.cfi_def_cfa 7, 8
 4813 002c C3       		ret
 4814              		.cfi_endproc
 4815              	.LFE977:
 4817              		.section	.text._ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_,"axG",@progbits
 4818              		.weak	_ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_
 4820              	_ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_:
 4821              	.LFB978:
 4822              		.file 15 "/usr/include/c++/4.8/bits/stl_iterator_base_types.h"
   1:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // Types used in iterator implementation -*- C++ -*-
   2:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
   3:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // Copyright (C) 2001-2013 Free Software Foundation, Inc.
   4:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** //
   5:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   6:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // software; you can redistribute it and/or modify it under the
   7:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // terms of the GNU General Public License as published by the
   8:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // Free Software Foundation; either version 3, or (at your option)
   9:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // any later version.
  10:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  11:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // This library is distributed in the hope that it will be useful,
  12:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // GNU General Public License for more details.
  15:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  16:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // Under Section 7 of GPL version 3, you are granted additional
  17:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // permissions described in the GCC Runtime Library Exception, version
  18:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // 3.1, as published by the Free Software Foundation.
  19:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  20:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // You should have received a copy of the GNU General Public License and
  21:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // a copy of the GCC Runtime Library Exception along with this program;
  22:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  23:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** // <http://www.gnu.org/licenses/>.
  24:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  25:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** /*
  26:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  27:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Copyright (c) 1994
  28:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Hewlett-Packard Company
  29:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  30:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  35:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  38:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  39:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Copyright (c) 1996-1998
  40:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Silicon Graphics Computer Systems, Inc.
  41:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  42:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * Permission to use, copy, modify, distribute and sell this software
  43:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * and its documentation for any purpose is hereby granted without fee,
  44:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * provided that the above copyright notice appear in all copies and
  45:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * that both that copyright notice and this permission notice appear
  46:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * in supporting documentation.  Silicon Graphics makes no
  47:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * representations about the suitability of this software for any
  48:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  49:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  */
  50:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  51:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** /** @file bits/stl_iterator_base_types.h
  52:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *  This is an internal header file, included by other library headers.
  53:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *  Do not attempt to use it directly. @headername{iterator}
  54:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *
  55:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *  This file contains all of the general iterator-related utility types,
  56:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  *  such as iterator_traits and struct iterator.
  57:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****  */
  58:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  59:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #ifndef _STL_ITERATOR_BASE_TYPES_H
  60:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #define _STL_ITERATOR_BASE_TYPES_H 1
  61:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  62:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #pragma GCC system_header
  63:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  64:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #include <bits/c++config.h>
  65:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  66:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
  67:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** # include <type_traits>  // For _GLIBCXX_HAS_NESTED_TYPE, is_convertible
  68:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #endif
  69:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  70:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** namespace std _GLIBCXX_VISIBILITY(default)
  71:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** {
  72:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  73:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  74:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
  75:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  @defgroup iterators Iterators
  76:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  Abstractions for uniform iterating through various underlying types.
  77:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
  78:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   //@{ 
  79:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  80:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
  81:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  @defgroup iterator_tags Iterator Tags
  82:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  These are empty types, used to distinguish different iterators.  The
  83:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  distinction is not made by what they contain, but simply by what they
  84:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  are.  Different underlying algorithms can then be used based on the
  85:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  different operations supported by different iterator types.
  86:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
  87:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   //@{ 
  88:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   ///  Marking input iterators.
  89:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct input_iterator_tag { };
  90:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  91:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   ///  Marking output iterators.
  92:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct output_iterator_tag { };
  93:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  94:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Forward iterators support a superset of input iterator operations.
  95:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct forward_iterator_tag : public input_iterator_tag { };
  96:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
  97:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Bidirectional iterators support a superset of forward iterator
  98:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// operations.
  99:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct bidirectional_iterator_tag : public forward_iterator_tag { };
 100:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 101:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Random-access iterators support a superset of bidirectional
 102:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// iterator operations.
 103:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   struct random_access_iterator_tag : public bidirectional_iterator_tag { };
 104:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   //@}
 105:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 106:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
 107:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  @brief  Common %iterator class.
 108:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *
 109:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  %Iterator classes
 110:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  can inherit from this class to save some work.  The typedefs are then
 111:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  used in specializations and overloading.
 112:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *
 113:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  In particular, there are no default implementations of requirements
 114:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  such as @c operator++ and the like.  (How could there be?)
 115:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
 116:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
 117:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****            typename _Pointer = _Tp*, typename _Reference = _Tp&>
 118:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator
 119:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 120:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// One of the @link iterator_tags tag types@endlink.
 121:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Category  iterator_category;
 122:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// The type "pointed to" by the iterator.
 123:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp        value_type;
 124:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// Distance between iterators is represented as this type.
 125:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Distance  difference_type;
 126:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// This type represents a pointer-to-value_type.
 127:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Pointer   pointer;
 128:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       /// This type represents a reference-to-value_type.
 129:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Reference reference;
 130:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 131:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 132:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
 133:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  @brief  Traits class for iterators.
 134:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *
 135:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  This class does nothing but define nested typedefs.  The general
 136:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  version simply @a forwards the nested typedefs from the Iterator
 137:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  argument.  Specialized versions for pointers and pointers-to-const
 138:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  provide tighter, more correct semantics.
 139:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
 140:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #if __cplusplus >= 201103L
 141:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 142:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** _GLIBCXX_HAS_NESTED_TYPE(iterator_category)
 143:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 144:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator,
 145:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 	   bool = __has_iterator_category<_Iterator>::value>
 146:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct __iterator_traits { };
 147:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 148:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 149:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct __iterator_traits<_Iterator, true>
 150:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 151:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 152:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 153:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 154:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 155:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 156:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 157:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 158:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 159:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator_traits
 160:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     : public __iterator_traits<_Iterator> { };
 161:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #else
 162:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 163:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator_traits
 164:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 165:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_category iterator_category;
 166:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::value_type        value_type;
 167:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::difference_type   difference_type;
 168:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::pointer           pointer;
 169:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::reference         reference;
 170:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 171:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** #endif
 172:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 173:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Partial specialization for pointer types.
 174:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 175:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator_traits<_Tp*>
 176:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 177:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 178:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 179:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 180:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp*                        pointer;
 181:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp&                        reference;
 182:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 183:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 184:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /// Partial specialization for const pointer types.
 185:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Tp>
 186:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct iterator_traits<const _Tp*>
 187:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 188:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef random_access_iterator_tag iterator_category;
 189:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Tp                         value_type;
 190:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef ptrdiff_t                   difference_type;
 191:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef const _Tp*                  pointer;
 192:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef const _Tp&                  reference;
 193:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 194:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 195:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   /**
 196:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  This function is not a part of the C++ standard but is syntactic
 197:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****    *  sugar for internal library use only.
 198:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   */
 199:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iter>
 200:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     inline typename iterator_traits<_Iter>::iterator_category
 201:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     __iterator_category(const _Iter&)
 202:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     { return typename iterator_traits<_Iter>::iterator_category(); }
 203:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 204:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   //@}
 205:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 206:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   // If _Iterator has a base returns it otherwise _Iterator is returned
 207:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   // untouched
 208:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator, bool _HasBase>
 209:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct _Iter_base
 210:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 211:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef _Iterator iterator_type;
 212:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       static iterator_type _S_base(_Iterator __it)
 4823              		.loc 15 212 0
 4824              		.cfi_startproc
 4825 0000 55       		pushq	%rbp
 4826              		.cfi_def_cfa_offset 16
 4827              		.cfi_offset 6, -16
 4828 0001 4889E5   		movq	%rsp, %rbp
 4829              		.cfi_def_cfa_register 6
 4830 0004 48897DF8 		movq	%rdi, -8(%rbp)
 213:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       { return __it; }
 4831              		.loc 15 213 0
 4832 0008 488B45F8 		movq	-8(%rbp), %rax
 4833 000c 5D       		popq	%rbp
 4834              		.cfi_def_cfa 7, 8
 4835 000d C3       		ret
 4836              		.cfi_endproc
 4837              	.LFE978:
 4839              		.section	.text._ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_
 4840              		.weak	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_
 4842              	_ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_:
 4843              	.LFB979:
 277:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 4844              		.loc 12 277 0
 4845              		.cfi_startproc
 4846 0000 55       		pushq	%rbp
 4847              		.cfi_def_cfa_offset 16
 4848              		.cfi_offset 6, -16
 4849 0001 4889E5   		movq	%rsp, %rbp
 4850              		.cfi_def_cfa_register 6
 4851 0004 4883EC10 		subq	$16, %rsp
 4852 0008 48897DF8 		movq	%rdi, -8(%rbp)
 278:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4853              		.loc 12 278 0
 4854 000c 488B45F8 		movq	-8(%rbp), %rax
 4855 0010 4889C7   		movq	%rax, %rdi
 4856 0013 E8000000 		call	_ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_@PLT
 4856      00
 4857 0018 C9       		leave
 4858              		.cfi_def_cfa 7, 8
 4859 0019 C3       		ret
 4860              		.cfi_endproc
 4861              	.LFE979:
 4863              		.section	.text._ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_,"
 4864              		.weak	_ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_
 4866              	_ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_:
 4867              	.LFB980:
 574:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 4868              		.loc 12 574 0
 4869              		.cfi_startproc
 4870 0000 55       		pushq	%rbp
 4871              		.cfi_def_cfa_offset 16
 4872              		.cfi_offset 6, -16
 4873 0001 4889E5   		movq	%rsp, %rbp
 4874              		.cfi_def_cfa_register 6
 4875 0004 4883EC30 		subq	$48, %rsp
 4876 0008 48897DE8 		movq	%rdi, -24(%rbp)
 4877 000c 488975E0 		movq	%rsi, -32(%rbp)
 4878 0010 488955D8 		movq	%rdx, -40(%rbp)
 4879              	.LBB47:
 582:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4880              		.loc 12 582 0
 4881 0014 C645FF00 		movb	$0, -1(%rbp)
 587:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 4882              		.loc 12 587 0
 4883 0018 488B55D8 		movq	-40(%rbp), %rdx
 4884 001c 488B4DE0 		movq	-32(%rbp), %rcx
 4885 0020 488B45E8 		movq	-24(%rbp), %rax
 4886 0024 4889CE   		movq	%rcx, %rsi
 4887 0027 4889C7   		movq	%rax, %rdi
 4888 002a E8000000 		call	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTes
 4888      00
 4889              	.LBE47:
 588:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4890              		.loc 12 588 0
 4891 002f C9       		leave
 4892              		.cfi_def_cfa 7, 8
 4893 0030 C3       		ret
 4894              		.cfi_endproc
 4895              	.LFE980:
 4897              		.section	.text._ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_
 4898              		.weak	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt1
 4900              	_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Miter
 4901              	.LFB981:
 288:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Miter_base<_Iterator>::_S_base(__it); }
 4902              		.loc 12 288 0
 4903              		.cfi_startproc
 4904 0000 55       		pushq	%rbp
 4905              		.cfi_def_cfa_offset 16
 4906              		.cfi_offset 6, -16
 4907 0001 4889E5   		movq	%rsp, %rbp
 4908              		.cfi_def_cfa_register 6
 4909 0004 4883EC10 		subq	$16, %rsp
 4910 0008 48897DF0 		movq	%rdi, -16(%rbp)
 289:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4911              		.loc 12 289 0
 4912 000c 488B45F0 		movq	-16(%rbp), %rax
 4913 0010 4889C7   		movq	%rax, %rdi
 4914 0013 E8000000 		call	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7_
 4914      00
 4915 0018 C9       		leave
 4916              		.cfi_def_cfa 7, 8
 4917 0019 C3       		ret
 4918              		.cfi_endproc
 4919              	.LFE981:
 4921              		.section	.text._ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_
 4922              		.weak	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEE
 4924              	_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IP
 4925              	.LFB982:
 424:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 4926              		.loc 12 424 0
 4927              		.cfi_startproc
 4928 0000 55       		pushq	%rbp
 4929              		.cfi_def_cfa_offset 16
 4930              		.cfi_offset 6, -16
 4931 0001 4889E5   		movq	%rsp, %rbp
 4932              		.cfi_def_cfa_register 6
 4933 0004 4154     		pushq	%r12
 4934 0006 53       		pushq	%rbx
 4935 0007 4883EC40 		subq	$64, %rsp
 4936              		.cfi_offset 12, -24
 4937              		.cfi_offset 3, -32
 4938 000b 48897DD0 		movq	%rdi, -48(%rbp)
 4939 000f 488975C0 		movq	%rsi, -64(%rbp)
 4940 0013 488955B0 		movq	%rdx, -80(%rbp)
 428:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 4941              		.loc 12 428 0
 4942 0017 488B45B0 		movq	-80(%rbp), %rax
 4943 001b 4889C7   		movq	%rax, %rdi
 4944 001e E8000000 		call	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_
 4944      00
 4945 0023 4989C4   		movq	%rax, %r12
 4946 0026 488B45C0 		movq	-64(%rbp), %rax
 4947 002a 4889C7   		movq	%rax, %rdi
 4948 002d E8000000 		call	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 4948      00
 4949 0032 4889C3   		movq	%rax, %rbx
 4950 0035 488B45D0 		movq	-48(%rbp), %rax
 4951 0039 4889C7   		movq	%rax, %rdi
 4952 003c E8000000 		call	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 4952      00
 4953 0041 4C89E2   		movq	%r12, %rdx
 4954 0044 4889DE   		movq	%rbx, %rsi
 4955 0047 4889C7   		movq	%rax, %rdi
 4956 004a E8000000 		call	_ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_@PLT
 4956      00
 4957 004f 488945E8 		movq	%rax, -24(%rbp)
 4958 0053 488D55E8 		leaq	-24(%rbp), %rdx
 4959 0057 488D45E0 		leaq	-32(%rbp), %rax
 4960 005b 4889D6   		movq	%rdx, %rsi
 4961 005e 4889C7   		movq	%rax, %rdi
 4962 0061 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_@PLT
 4962      00
 4963 0066 488B45E0 		movq	-32(%rbp), %rax
 429:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 4964              		.loc 12 429 0
 4965 006a 4883C440 		addq	$64, %rsp
 4966 006e 5B       		popq	%rbx
 4967 006f 415C     		popq	%r12
 4968 0071 5D       		popq	%rbp
 4969              		.cfi_def_cfa 7, 8
 4970 0072 C3       		ret
 4971              		.cfi_endproc
 4972              	.LFE982:
 4974              		.section	.text._ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEv
 4975              		.weak	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_
 4977              	_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_:
 4978              	.LFB983:
 122:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 4979              		.loc 6 122 0
 4980              		.cfi_startproc
 4981 0000 55       		pushq	%rbp
 4982              		.cfi_def_cfa_offset 16
 4983              		.cfi_offset 6, -16
 4984 0001 4889E5   		movq	%rsp, %rbp
 4985              		.cfi_def_cfa_register 6
 4986 0004 4883EC20 		subq	$32, %rsp
 4987 0008 48897DF0 		movq	%rdi, -16(%rbp)
 4988 000c 488975E0 		movq	%rsi, -32(%rbp)
 4989              	.LBB48:
 126:/usr/include/c++/4.8/bits/stl_construct.h **** 	__destroy(__first, __last);
 4990              		.loc 6 126 0
 4991 0010 488B55E0 		movq	-32(%rbp), %rdx
 4992 0014 488B45F0 		movq	-16(%rbp), %rax
 4993 0018 4889D6   		movq	%rdx, %rsi
 4994 001b 4889C7   		movq	%rax, %rdi
 4995 001e E8000000 		call	_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5_
 4995      00
 4996              	.LBE48:
 128:/usr/include/c++/4.8/bits/stl_construct.h **** 
 4997              		.loc 6 128 0
 4998 0023 C9       		leave
 4999              		.cfi_def_cfa 7, 8
 5000 0024 C3       		ret
 5001              		.cfi_endproc
 5002              	.LFE983:
 5004              		.section	.text._ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_,"axG",@progbits,_ZSt14__copy
 5005              		.weak	_ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
 5007              	_ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:
 5008              	.LFB984:
 424:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 5009              		.loc 12 424 0
 5010              		.cfi_startproc
 5011 0000 55       		pushq	%rbp
 5012              		.cfi_def_cfa_offset 16
 5013              		.cfi_offset 6, -16
 5014 0001 4889E5   		movq	%rsp, %rbp
 5015              		.cfi_def_cfa_register 6
 5016 0004 4154     		pushq	%r12
 5017 0006 53       		pushq	%rbx
 5018 0007 4883EC20 		subq	$32, %rsp
 5019              		.cfi_offset 12, -24
 5020              		.cfi_offset 3, -32
 5021 000b 48897DE8 		movq	%rdi, -24(%rbp)
 5022 000f 488975E0 		movq	%rsi, -32(%rbp)
 5023 0013 488955D8 		movq	%rdx, -40(%rbp)
 428:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 5024              		.loc 12 428 0
 5025 0017 488B45D8 		movq	-40(%rbp), %rax
 5026 001b 4889C7   		movq	%rax, %rdi
 5027 001e E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 5027      00
 5028 0023 4989C4   		movq	%rax, %r12
 5029 0026 488B45E0 		movq	-32(%rbp), %rax
 5030 002a 4889C7   		movq	%rax, %rdi
 5031 002d E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 5031      00
 5032 0032 4889C3   		movq	%rax, %rbx
 5033 0035 488B45E8 		movq	-24(%rbp), %rax
 5034 0039 4889C7   		movq	%rax, %rdi
 5035 003c E8000000 		call	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_@PLT
 5035      00
 5036 0041 4C89E2   		movq	%r12, %rdx
 5037 0044 4889DE   		movq	%rbx, %rsi
 5038 0047 4889C7   		movq	%rax, %rdi
 5039 004a E8000000 		call	_ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_@PLT
 5039      00
 429:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5040              		.loc 12 429 0
 5041 004f 4883C420 		addq	$32, %rsp
 5042 0053 5B       		popq	%rbx
 5043 0054 415C     		popq	%r12
 5044 0056 5D       		popq	%rbp
 5045              		.cfi_def_cfa 7, 8
 5046 0057 C3       		ret
 5047              		.cfi_endproc
 5048              	.LFE984:
 5050              		.section	.text._ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_,"axG",@progbits,_ZSt18uniniti
 5051              		.weak	_ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_
 5053              	_ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_:
 5054              	.LFB985:
 107:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 5055              		.loc 13 107 0
 5056              		.cfi_startproc
 5057 0000 55       		pushq	%rbp
 5058              		.cfi_def_cfa_offset 16
 5059              		.cfi_offset 6, -16
 5060 0001 4889E5   		movq	%rsp, %rbp
 5061              		.cfi_def_cfa_register 6
 5062 0004 4883EC20 		subq	$32, %rsp
 5063 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5064 000c 488975F0 		movq	%rsi, -16(%rbp)
 5065 0010 488955E8 		movq	%rdx, -24(%rbp)
 5066              	.LBB49:
 117:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 5067              		.loc 13 117 0
 5068 0014 488B55E8 		movq	-24(%rbp), %rdx
 5069 0018 488B4DF0 		movq	-16(%rbp), %rcx
 5070 001c 488B45F8 		movq	-8(%rbp), %rax
 5071 0020 4889CE   		movq	%rcx, %rsi
 5072 0023 4889C7   		movq	%rax, %rdi
 5073 0026 E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_@PLT
 5073      00
 5074              	.LBE49:
 118:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 5075              		.loc 13 118 0
 5076 002b C9       		leave
 5077              		.cfi_def_cfa 7, 8
 5078 002c C3       		ret
 5079              		.cfi_endproc
 5080              	.LFE985:
 5082              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_,"
 5083              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_
 5085              	_ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_:
 5086              	.LFB986:
 221:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return __a.max_size(); }
 5087              		.loc 7 221 0
 5088              		.cfi_startproc
 5089 0000 55       		pushq	%rbp
 5090              		.cfi_def_cfa_offset 16
 5091              		.cfi_offset 6, -16
 5092 0001 4889E5   		movq	%rsp, %rbp
 5093              		.cfi_def_cfa_register 6
 5094 0004 4883EC10 		subq	$16, %rsp
 5095 0008 48897DF8 		movq	%rdi, -8(%rbp)
 222:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 5096              		.loc 7 222 0
 5097 000c 488B45F8 		movq	-8(%rbp), %rax
 5098 0010 4889C7   		movq	%rax, %rdi
 5099 0013 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv@PLT
 5099      00
 5100 0018 C9       		leave
 5101              		.cfi_def_cfa 7, 8
 5102 0019 C3       		ret
 5103              		.cfi_endproc
 5104              	.LFE986:
 5106              		.section	.text._ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 5107              		.align 2
 5108              		.weak	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
 5110              	_ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:
 5111              	.LFB987:
 117:/usr/include/c++/4.8/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 5112              		.loc 5 117 0
 5113              		.cfi_startproc
 5114 0000 55       		pushq	%rbp
 5115              		.cfi_def_cfa_offset 16
 5116              		.cfi_offset 6, -16
 5117 0001 4889E5   		movq	%rsp, %rbp
 5118              		.cfi_def_cfa_register 6
 5119 0004 48897DF8 		movq	%rdi, -8(%rbp)
 118:/usr/include/c++/4.8/bits/stl_vector.h **** 
 5120              		.loc 5 118 0
 5121 0008 488B45F8 		movq	-8(%rbp), %rax
 5122 000c 5D       		popq	%rbp
 5123              		.cfi_def_cfa 7, 8
 5124 000d C3       		ret
 5125              		.cfi_endproc
 5126              	.LFE987:
 5128              		.section	.text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv,"axG",@pr
 5129              		.align 2
 5130              		.weak	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv
 5132              	_ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv:
 5133              	.LFB988:
 113:/usr/include/c++/4.8/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 5134              		.loc 11 113 0
 5135              		.cfi_startproc
 5136 0000 55       		pushq	%rbp
 5137              		.cfi_def_cfa_offset 16
 5138              		.cfi_offset 6, -16
 5139 0001 4889E5   		movq	%rsp, %rbp
 5140              		.cfi_def_cfa_register 6
 5141 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.8/ext/new_allocator.h **** 
 5142              		.loc 11 114 0
 5143 0008 48B89224 		movabsq	$329406144173384850, %rax
 5143      49922449 
 5143      9204
 5144 0012 5D       		popq	%rbp
 5145              		.cfi_def_cfa 7, 8
 5146 0013 C3       		ret
 5147              		.cfi_endproc
 5148              	.LFE988:
 5150              		.section	.text._ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_,"axG",@pro
 5151              		.weak	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
 5153              	_ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:
 5154              	.LFB989:
 107:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		       _ForwardIterator __result)
 5155              		.loc 13 107 0
 5156              		.cfi_startproc
 5157 0000 55       		pushq	%rbp
 5158              		.cfi_def_cfa_offset 16
 5159              		.cfi_offset 6, -16
 5160 0001 4889E5   		movq	%rsp, %rbp
 5161              		.cfi_def_cfa_register 6
 5162 0004 4883EC20 		subq	$32, %rsp
 5163 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5164 000c 488975F0 		movq	%rsi, -16(%rbp)
 5165 0010 488955E8 		movq	%rdx, -24(%rbp)
 5166              	.LBB50:
 117:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     }
 5167              		.loc 13 117 0
 5168 0014 488B55E8 		movq	-24(%rbp), %rdx
 5169 0018 488B4DF0 		movq	-16(%rbp), %rcx
 5170 001c 488B45F8 		movq	-8(%rbp), %rax
 5171 0020 4889CE   		movq	%rcx, %rsi
 5172 0023 4889C7   		movq	%rax, %rdi
 5173 0026 E8000000 		call	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6
 5173      00
 5174              	.LBE50:
 118:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 
 5175              		.loc 13 118 0
 5176 002b C9       		leave
 5177              		.cfi_def_cfa 7, 8
 5178 002c C3       		ret
 5179              		.cfi_endproc
 5180              	.LFE989:
 5182              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_,"axG",
 5183              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
 5185              	_ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:
 5186              	.LFB990:
 100:/usr/include/c++/4.8/bits/stl_construct.h **** 	{
 5187              		.loc 6 100 0
 5188              		.cfi_startproc
 5189 0000 55       		pushq	%rbp
 5190              		.cfi_def_cfa_offset 16
 5191              		.cfi_offset 6, -16
 5192 0001 4889E5   		movq	%rsp, %rbp
 5193              		.cfi_def_cfa_register 6
 5194 0004 4883EC10 		subq	$16, %rsp
 5195 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5196 000c 488975F0 		movq	%rsi, -16(%rbp)
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5197              		.loc 6 102 0
 5198 0010 EB19     		jmp	.L274
 5199              	.L275:
 103:/usr/include/c++/4.8/bits/stl_construct.h **** 	}
 5200              		.loc 6 103 0 discriminator 2
 5201 0012 488B45F8 		movq	-8(%rbp), %rax
 5202 0016 4889C7   		movq	%rax, %rdi
 5203 0019 E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 5203      00
 5204 001e 4889C7   		movq	%rax, %rdi
 5205 0021 E8000000 		call	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_@PLT
 5205      00
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5206              		.loc 6 102 0 discriminator 2
 5207 0026 488345F8 		addq	$56, -8(%rbp)
 5207      38
 5208              	.L274:
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5209              		.loc 6 102 0 is_stmt 0 discriminator 1
 5210 002b 488B45F8 		movq	-8(%rbp), %rax
 5211 002f 483B45F0 		cmpq	-16(%rbp), %rax
 5212 0033 75DD     		jne	.L275
 104:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 5213              		.loc 6 104 0 is_stmt 1
 5214 0035 C9       		leave
 5215              		.cfi_def_cfa 7, 8
 5216 0036 C3       		ret
 5217              		.cfi_endproc
 5218              	.LFE990:
 5220              		.section	.text._ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_,"axG",@progbits,_ZNSt10_Iter_baseI
 5221              		.weak	_ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_
 5223              	_ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_:
 5224              	.LFB991:
 212:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       { return __it; }
 5225              		.loc 15 212 0
 5226              		.cfi_startproc
 5227 0000 55       		pushq	%rbp
 5228              		.cfi_def_cfa_offset 16
 5229              		.cfi_offset 6, -16
 5230 0001 4889E5   		movq	%rsp, %rbp
 5231              		.cfi_def_cfa_register 6
 5232 0004 48897DF8 		movq	%rdi, -8(%rbp)
 5233              		.loc 15 213 0
 5234 0008 488B45F8 		movq	-8(%rbp), %rax
 5235 000c 5D       		popq	%rbp
 5236              		.cfi_def_cfa 7, 8
 5237 000d C3       		ret
 5238              		.cfi_endproc
 5239              	.LFE991:
 5241              		.section	.text._ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_,"axG",@pro
 5242              		.weak	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_
 5244              	_ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_:
 5245              	.LFB992:
 277:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 5246              		.loc 12 277 0
 5247              		.cfi_startproc
 5248 0000 55       		pushq	%rbp
 5249              		.cfi_def_cfa_offset 16
 5250              		.cfi_offset 6, -16
 5251 0001 4889E5   		movq	%rsp, %rbp
 5252              		.cfi_def_cfa_register 6
 5253 0004 4883EC10 		subq	$16, %rsp
 5254 0008 48897DF8 		movq	%rdi, -8(%rbp)
 278:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5255              		.loc 12 278 0
 5256 000c 488B45F8 		movq	-8(%rbp), %rax
 5257 0010 4889C7   		movq	%rax, %rdi
 5258 0013 E8000000 		call	_ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_@PLT
 5258      00
 5259 0018 C9       		leave
 5260              		.cfi_def_cfa 7, 8
 5261 0019 C3       		ret
 5262              		.cfi_endproc
 5263              	.LFE992:
 5265              		.section	.text._ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_,"axG",@progbits,_ZSt
 5266              		.weak	_ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
 5268              	_ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:
 5269              	.LFB993:
 574:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 5270              		.loc 12 574 0
 5271              		.cfi_startproc
 5272 0000 55       		pushq	%rbp
 5273              		.cfi_def_cfa_offset 16
 5274              		.cfi_offset 6, -16
 5275 0001 4889E5   		movq	%rsp, %rbp
 5276              		.cfi_def_cfa_register 6
 5277 0004 4883EC30 		subq	$48, %rsp
 5278 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5279 000c 488975E0 		movq	%rsi, -32(%rbp)
 5280 0010 488955D8 		movq	%rdx, -40(%rbp)
 5281              	.LBB51:
 582:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5282              		.loc 12 582 0
 5283 0014 C645FF00 		movb	$0, -1(%rbp)
 587:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 5284              		.loc 12 587 0
 5285 0018 488B55D8 		movq	-40(%rbp), %rdx
 5286 001c 488B4DE0 		movq	-32(%rbp), %rcx
 5287 0020 488B45E8 		movq	-24(%rbp), %rax
 5288 0024 4889CE   		movq	%rcx, %rsi
 5289 0027 4889C7   		movq	%rax, %rdi
 5290 002a E8000000 		call	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIi
 5290      00
 5291              	.LBE51:
 588:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5292              		.loc 12 588 0
 5293 002f C9       		leave
 5294              		.cfi_def_cfa 7, 8
 5295 0030 C3       		ret
 5296              		.cfi_endproc
 5297              	.LFE993:
 5299              		.section	.text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_,"axG",@progbits,_ZN9
 5300              		.weak	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_
 5302              	_ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_:
 5303              	.LFB994:
 221:/usr/include/c++/4.8/ext/alloc_traits.h ****     { return __a.max_size(); }
 5304              		.loc 7 221 0
 5305              		.cfi_startproc
 5306 0000 55       		pushq	%rbp
 5307              		.cfi_def_cfa_offset 16
 5308              		.cfi_offset 6, -16
 5309 0001 4889E5   		movq	%rsp, %rbp
 5310              		.cfi_def_cfa_register 6
 5311 0004 4883EC10 		subq	$16, %rsp
 5312 0008 48897DF8 		movq	%rdi, -8(%rbp)
 222:/usr/include/c++/4.8/ext/alloc_traits.h **** 
 5313              		.loc 7 222 0
 5314 000c 488B45F8 		movq	-8(%rbp), %rax
 5315 0010 4889C7   		movq	%rax, %rdi
 5316 0013 E8000000 		call	_ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv@PLT
 5316      00
 5317 0018 C9       		leave
 5318              		.cfi_def_cfa 7, 8
 5319 0019 C3       		ret
 5320              		.cfi_endproc
 5321              	.LFE994:
 5323              		.section	.text._ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv,"axG",@progbits,_ZNK9__gnu_c
 5324              		.align 2
 5325              		.weak	_ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv
 5327              	_ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv:
 5328              	.LFB995:
 113:/usr/include/c++/4.8/ext/new_allocator.h ****       { return size_t(-1) / sizeof(_Tp); }
 5329              		.loc 11 113 0
 5330              		.cfi_startproc
 5331 0000 55       		pushq	%rbp
 5332              		.cfi_def_cfa_offset 16
 5333              		.cfi_offset 6, -16
 5334 0001 4889E5   		movq	%rsp, %rbp
 5335              		.cfi_def_cfa_register 6
 5336 0004 48897DF8 		movq	%rdi, -8(%rbp)
 114:/usr/include/c++/4.8/ext/new_allocator.h **** 
 5337              		.loc 11 114 0
 5338 0008 48B8FFFF 		movabsq	$1152921504606846975, %rax
 5338      FFFFFFFF 
 5338      FF0F
 5339 0012 5D       		popq	%rbp
 5340              		.cfi_def_cfa 7, 8
 5341 0013 C3       		ret
 5342              		.cfi_endproc
 5343              	.LFE995:
 5345              		.section	.text._ZNSaISt4pairIiSsEEC2ERKS1_,"axG",@progbits,_ZNSaISt4pairIiSsEEC5ERKS1_,comdat
 5346              		.align 2
 5347              		.weak	_ZNSaISt4pairIiSsEEC2ERKS1_
 5349              	_ZNSaISt4pairIiSsEEC2ERKS1_:
 5350              	.LFB997:
 115:/usr/include/c++/4.8/bits/allocator.h ****       : __allocator_base<_Tp>(__a) { }
 5351              		.loc 10 115 0
 5352              		.cfi_startproc
 5353 0000 55       		pushq	%rbp
 5354              		.cfi_def_cfa_offset 16
 5355              		.cfi_offset 6, -16
 5356 0001 4889E5   		movq	%rsp, %rbp
 5357              		.cfi_def_cfa_register 6
 5358 0004 4883EC10 		subq	$16, %rsp
 5359 0008 48897DF8 		movq	%rdi, -8(%rbp)
 5360 000c 488975F0 		movq	%rsi, -16(%rbp)
 5361              	.LBB52:
 116:/usr/include/c++/4.8/bits/allocator.h **** 
 5362              		.loc 10 116 0
 5363 0010 488B55F0 		movq	-16(%rbp), %rdx
 5364 0014 488B45F8 		movq	-8(%rbp), %rax
 5365 0018 4889D6   		movq	%rdx, %rsi
 5366 001b 4889C7   		movq	%rax, %rdi
 5367 001e E8000000 		call	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_@PLT
 5367      00
 5368              	.LBE52:
 5369 0023 C9       		leave
 5370              		.cfi_def_cfa 7, 8
 5371 0024 C3       		ret
 5372              		.cfi_endproc
 5373              	.LFE997:
 5375              		.weak	_ZNSaISt4pairIiSsEEC1ERKS1_
 5376              		.set	_ZNSaISt4pairIiSsEEC1ERKS1_,_ZNSaISt4pairIiSsEEC2ERKS1_
 5377              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKS
 5378              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiS
 5380              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6ve
 5381              	.LFB999:
  68:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 5382              		.loc 13 68 0
 5383              		.cfi_startproc
 5384              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5385              		.cfi_lsda 0x1b,.LLSDA999
 5386 0000 55       		pushq	%rbp
 5387              		.cfi_def_cfa_offset 16
 5388              		.cfi_offset 6, -16
 5389 0001 4889E5   		movq	%rsp, %rbp
 5390              		.cfi_def_cfa_register 6
 5391 0004 53       		pushq	%rbx
 5392 0005 4883EC38 		subq	$56, %rsp
 5393              		.cfi_offset 3, -24
 5394 0009 48897DD0 		movq	%rdi, -48(%rbp)
 5395 000d 488975C0 		movq	%rsi, -64(%rbp)
 5396 0011 488955C8 		movq	%rdx, -56(%rbp)
 5397              	.LBB53:
  71:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __try
 5398              		.loc 13 71 0
 5399 0015 488B45C8 		movq	-56(%rbp), %rax
 5400 0019 488945E8 		movq	%rax, -24(%rbp)
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5401              		.loc 13 74 0
 5402 001d EB37     		jmp	.L288
 5403              	.L289:
  75:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      return __cur;
 5404              		.loc 13 75 0
 5405 001f 488D45D0 		leaq	-48(%rbp), %rax
 5406 0023 4889C7   		movq	%rax, %rdi
 5407              	.LEHB57:
 5408 0026 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv@PLT
 5408      00
 5409 002b 4889C3   		movq	%rax, %rbx
 5410 002e 488B45E8 		movq	-24(%rbp), %rax
 5411 0032 4889C7   		movq	%rax, %rdi
 5412 0035 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 5412      00
 5413 003a 4889DE   		movq	%rbx, %rsi
 5414 003d 4889C7   		movq	%rax, %rdi
 5415 0040 E8000000 		call	_ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_@PLT
 5415      00
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5416              		.loc 13 74 0
 5417 0045 488D45D0 		leaq	-48(%rbp), %rax
 5418 0049 4889C7   		movq	%rax, %rdi
 5419 004c E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv@PLT
 5419      00
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5420              		.loc 13 74 0 is_stmt 0 discriminator 2
 5421 0051 488345E8 		addq	$16, -24(%rbp)
 5421      10
 5422              	.L288:
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5423              		.loc 13 74 0 discriminator 1
 5424 0056 488D55C0 		leaq	-64(%rbp), %rdx
 5425 005a 488D45D0 		leaq	-48(%rbp), %rax
 5426 005e 4889D6   		movq	%rdx, %rsi
 5427 0061 4889C7   		movq	%rax, %rdi
 5428 0064 E8000000 		call	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_@PLT
 5428      00
 5429              	.LEHE57:
 5430 0069 84C0     		testb	%al, %al
 5431 006b 75B2     		jne	.L289
  76:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 5432              		.loc 13 76 0 is_stmt 1
 5433 006d 488B45E8 		movq	-24(%rbp), %rax
 5434 0071 EB33     		jmp	.L295
 5435              	.L293:
 5436 0073 4889C3   		movq	%rax, %rbx
  78:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 5437              		.loc 13 78 0
 5438 0076 E8000000 		call	__cxa_end_catch@PLT
 5438      00
 5439 007b 4889D8   		movq	%rbx, %rax
 5440 007e 4889C7   		movq	%rax, %rdi
 5441              	.LEHB58:
 5442 0081 E8000000 		call	_Unwind_Resume@PLT
 5442      00
 5443              	.LEHE58:
 5444              	.L294:
 5445 0086 4889C7   		movq	%rax, %rdi
 5446 0089 E8000000 		call	__cxa_begin_catch@PLT
 5446      00
  80:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 5447              		.loc 13 80 0
 5448 008e 488B55E8 		movq	-24(%rbp), %rdx
 5449 0092 488B45C8 		movq	-56(%rbp), %rax
 5450 0096 4889D6   		movq	%rdx, %rsi
 5451 0099 4889C7   		movq	%rax, %rdi
 5452              	.LEHB59:
 5453 009c E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_@PLT
 5453      00
  81:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 5454              		.loc 13 81 0
 5455 00a1 E8000000 		call	__cxa_rethrow@PLT
 5455      00
 5456              	.LEHE59:
 5457              	.L295:
 5458              	.LBE53:
  83:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 5459              		.loc 13 83 0
 5460 00a6 4883C438 		addq	$56, %rsp
 5461 00aa 5B       		popq	%rbx
 5462 00ab 5D       		popq	%rbp
 5463              		.cfi_def_cfa 7, 8
 5464 00ac C3       		ret
 5465              		.cfi_endproc
 5466              	.LFE999:
 5467              		.section	.gcc_except_table
 5468              		.align 4
 5469              	.LLSDA999:
 5470 0144 FF       		.byte	0xff
 5471 0145 9B       		.byte	0x9b
 5472 0146 19       		.uleb128 .LLSDATT999-.LLSDATTD999
 5473              	.LLSDATTD999:
 5474 0147 01       		.byte	0x1
 5475 0148 0F       		.uleb128 .LLSDACSE999-.LLSDACSB999
 5476              	.LLSDACSB999:
 5477 0149 26       		.uleb128 .LEHB57-.LFB999
 5478 014a 43       		.uleb128 .LEHE57-.LEHB57
 5479 014b 8601     		.uleb128 .L294-.LFB999
 5480 014d 01       		.uleb128 0x1
 5481 014e 8101     		.uleb128 .LEHB58-.LFB999
 5482 0150 05       		.uleb128 .LEHE58-.LEHB58
 5483 0151 00       		.uleb128 0
 5484 0152 00       		.uleb128 0
 5485 0153 9C01     		.uleb128 .LEHB59-.LFB999
 5486 0155 0A       		.uleb128 .LEHE59-.LEHB59
 5487 0156 73       		.uleb128 .L293-.LFB999
 5488 0157 00       		.uleb128 0
 5489              	.LLSDACSE999:
 5490 0158 01       		.byte	0x1
 5491 0159 00       		.byte	0
 5492 015a 0000     		.align 4
 5493 015c 00000000 		.long	0
 5494              	
 5495              	.LLSDATT999:
 5496              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKS
 5498              		.section	.text._ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bI
 5499              		.weak	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTe
 5501              	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTest18Def
 5502              	.LFB1000:
 533:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 5503              		.loc 12 533 0
 5504              		.cfi_startproc
 5505 0000 55       		pushq	%rbp
 5506              		.cfi_def_cfa_offset 16
 5507              		.cfi_offset 6, -16
 5508 0001 4889E5   		movq	%rsp, %rbp
 5509              		.cfi_def_cfa_register 6
 5510 0004 4883EC30 		subq	$48, %rsp
 5511 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5512 000c 488975E0 		movq	%rsi, -32(%rbp)
 5513 0010 488955D8 		movq	%rdx, -40(%rbp)
 5514              	.LBB54:
 536:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 5515              		.loc 12 536 0
 5516 0014 488B55E0 		movq	-32(%rbp), %rdx
 5517 0018 488B45E8 		movq	-24(%rbp), %rax
 5518 001c 4829C2   		subq	%rax, %rdx
 5519 001f 4889D0   		movq	%rdx, %rax
 5520 0022 48C1F803 		sarq	$3, %rax
 5521 0026 4889C2   		movq	%rax, %rdx
 5522 0029 48B8B76D 		movabsq	$7905747460161236407, %rax
 5522      DBB66DDB 
 5522      B66D
 5523 0033 480FAFC2 		imulq	%rdx, %rax
 5524 0037 488945F8 		movq	%rax, -8(%rbp)
 5525 003b EB22     		jmp	.L297
 5526              	.L298:
 537:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 5527              		.loc 12 537 0 discriminator 2
 5528 003d 48836DE0 		subq	$56, -32(%rbp)
 5528      38
 5529 0042 48836DD8 		subq	$56, -40(%rbp)
 5529      38
 5530 0047 488B55E0 		movq	-32(%rbp), %rdx
 5531 004b 488B45D8 		movq	-40(%rbp), %rax
 5532 004f 4889D6   		movq	%rdx, %rsi
 5533 0052 4889C7   		movq	%rax, %rdi
 5534 0055 E8000000 		call	_ZN8UnitTest18DeferredTestResultaSERKS0_@PLT
 5534      00
 536:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 5535              		.loc 12 536 0 discriminator 2
 5536 005a 48836DF8 		subq	$1, -8(%rbp)
 5536      01
 5537              	.L297:
 536:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 5538              		.loc 12 536 0 is_stmt 0 discriminator 1
 5539 005f 48837DF8 		cmpq	$0, -8(%rbp)
 5539      00
 5540 0064 7FD7     		jg	.L298
 538:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 5541              		.loc 12 538 0 is_stmt 1
 5542 0066 488B45D8 		movq	-40(%rbp), %rax
 5543              	.LBE54:
 539:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 5544              		.loc 12 539 0
 5545 006a C9       		leave
 5546              		.cfi_def_cfa 7, 8
 5547 006b C3       		ret
 5548              		.cfi_endproc
 5549              	.LFE1000:
 5551              		.section	.text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_E
 5552              		.weak	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7
 5554              	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7_S_base
 5555              	.LFB1001:
 212:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       { return __it; }
 5556              		.loc 15 212 0
 5557              		.cfi_startproc
 5558 0000 55       		pushq	%rbp
 5559              		.cfi_def_cfa_offset 16
 5560              		.cfi_offset 6, -16
 5561 0001 4889E5   		movq	%rsp, %rbp
 5562              		.cfi_def_cfa_register 6
 5563 0004 48897DF0 		movq	%rdi, -16(%rbp)
 5564              		.loc 15 213 0
 5565 0008 488B45F0 		movq	-16(%rbp), %rax
 5566 000c 5D       		popq	%rbp
 5567              		.cfi_def_cfa 7, 8
 5568 000d C3       		ret
 5569              		.cfi_endproc
 5570              	.LFE1001:
 5572              		.section	.text._ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_
 5573              		.weak	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt1
 5575              	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter
 5576              	.LFB1002:
 277:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 5577              		.loc 12 277 0
 5578              		.cfi_startproc
 5579 0000 55       		pushq	%rbp
 5580              		.cfi_def_cfa_offset 16
 5581              		.cfi_offset 6, -16
 5582 0001 4889E5   		movq	%rsp, %rbp
 5583              		.cfi_def_cfa_register 6
 5584 0004 4883EC10 		subq	$16, %rsp
 5585 0008 48897DF0 		movq	%rdi, -16(%rbp)
 278:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5586              		.loc 12 278 0
 5587 000c 488B45F0 		movq	-16(%rbp), %rax
 5588 0010 4889C7   		movq	%rax, %rdi
 5589 0013 E8000000 		call	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_
 5589      00
 5590 0018 C9       		leave
 5591              		.cfi_def_cfa 7, 8
 5592 0019 C3       		ret
 5593              		.cfi_endproc
 5594              	.LFE1002:
 5596              		.section	.text._ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_E
 5597              		.weak	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11
 5599              	_ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_
 5600              	.LFB1003:
 277:/usr/include/c++/4.8/bits/stl_algobase.h ****     { return std::_Niter_base<_Iterator>::_S_base(__it); }
 5601              		.loc 12 277 0
 5602              		.cfi_startproc
 5603 0000 55       		pushq	%rbp
 5604              		.cfi_def_cfa_offset 16
 5605              		.cfi_offset 6, -16
 5606 0001 4889E5   		movq	%rsp, %rbp
 5607              		.cfi_def_cfa_register 6
 5608 0004 4883EC10 		subq	$16, %rsp
 5609 0008 48897DF0 		movq	%rdi, -16(%rbp)
 278:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5610              		.loc 12 278 0
 5611 000c 488B45F0 		movq	-16(%rbp), %rax
 5612 0010 4889C7   		movq	%rax, %rdi
 5613 0013 E8000000 		call	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S
 5613      00
 5614 0018 C9       		leave
 5615              		.cfi_def_cfa 7, 8
 5616 0019 C3       		ret
 5617              		.cfi_endproc
 5618              	.LFE1003:
 5620              		.section	.text._ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_,"axG",@progbits,_ZSt13__cop
 5621              		.weak	_ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_
 5623              	_ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_:
 5624              	.LFB1004:
 379:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 5625              		.loc 12 379 0
 5626              		.cfi_startproc
 5627 0000 55       		pushq	%rbp
 5628              		.cfi_def_cfa_offset 16
 5629              		.cfi_offset 6, -16
 5630 0001 4889E5   		movq	%rsp, %rbp
 5631              		.cfi_def_cfa_register 6
 5632 0004 4883EC30 		subq	$48, %rsp
 5633 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5634 000c 488975E0 		movq	%rsi, -32(%rbp)
 5635 0010 488955D8 		movq	%rdx, -40(%rbp)
 5636              	.LBB55:
 387:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5637              		.loc 12 387 0
 5638 0014 C645FF00 		movb	$0, -1(%rbp)
 390:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 5639              		.loc 12 390 0
 5640 0018 488B55D8 		movq	-40(%rbp), %rdx
 5641 001c 488B4DE0 		movq	-32(%rbp), %rcx
 5642 0020 488B45E8 		movq	-24(%rbp), %rax
 5643 0024 4889CE   		movq	%rcx, %rsi
 5644 0027 4889C7   		movq	%rax, %rdi
 5645 002a E8000000 		call	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T_
 5645      00
 5646              	.LBE55:
 391:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5647              		.loc 12 391 0
 5648 002f C9       		leave
 5649              		.cfi_def_cfa 7, 8
 5650 0030 C3       		ret
 5651              		.cfi_endproc
 5652              	.LFE1004:
 5654              		.section	.text._ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6
 5655              		.weak	_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5
 5657              	_ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5_SaIS5_
 5658              	.LFB1005:
 100:/usr/include/c++/4.8/bits/stl_construct.h **** 	{
 5659              		.loc 6 100 0
 5660              		.cfi_startproc
 5661 0000 55       		pushq	%rbp
 5662              		.cfi_def_cfa_offset 16
 5663              		.cfi_offset 6, -16
 5664 0001 4889E5   		movq	%rsp, %rbp
 5665              		.cfi_def_cfa_register 6
 5666 0004 4883EC20 		subq	$32, %rsp
 5667 0008 48897DF0 		movq	%rdi, -16(%rbp)
 5668 000c 488975E0 		movq	%rsi, -32(%rbp)
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5669              		.loc 6 102 0
 5670 0010 EB28     		jmp	.L309
 5671              	.L310:
 103:/usr/include/c++/4.8/bits/stl_construct.h **** 	}
 5672              		.loc 6 103 0 discriminator 2
 5673 0012 488D45F0 		leaq	-16(%rbp), %rax
 5674 0016 4889C7   		movq	%rax, %rdi
 5675 0019 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv@PLT
 5675      00
 5676 001e 4889C7   		movq	%rax, %rdi
 5677 0021 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 5677      00
 5678 0026 4889C7   		movq	%rax, %rdi
 5679 0029 E8000000 		call	_ZSt8_DestroyISt4pairIiSsEEvPT_@PLT
 5679      00
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5680              		.loc 6 102 0 discriminator 2
 5681 002e 488D45F0 		leaq	-16(%rbp), %rax
 5682 0032 4889C7   		movq	%rax, %rdi
 5683 0035 E8000000 		call	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv@PLT
 5683      00
 5684              	.L309:
 102:/usr/include/c++/4.8/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 5685              		.loc 6 102 0 is_stmt 0 discriminator 1
 5686 003a 488D55E0 		leaq	-32(%rbp), %rdx
 5687 003e 488D45F0 		leaq	-16(%rbp), %rax
 5688 0042 4889D6   		movq	%rdx, %rsi
 5689 0045 4889C7   		movq	%rax, %rdi
 5690 0048 E8000000 		call	_ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_@PLT
 5690      00
 5691 004d 84C0     		testb	%al, %al
 5692 004f 75C1     		jne	.L310
 104:/usr/include/c++/4.8/bits/stl_construct.h ****     };
 5693              		.loc 6 104 0 is_stmt 1
 5694 0051 C9       		leave
 5695              		.cfi_def_cfa 7, 8
 5696 0052 C3       		ret
 5697              		.cfi_endproc
 5698              	.LFE1005:
 5700              		.section	.text._ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_,"axG",@progbits,_ZSt13__copy_
 5701              		.weak	_ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
 5703              	_ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:
 5704              	.LFB1006:
 379:/usr/include/c++/4.8/bits/stl_algobase.h ****     {
 5705              		.loc 12 379 0
 5706              		.cfi_startproc
 5707 0000 55       		pushq	%rbp
 5708              		.cfi_def_cfa_offset 16
 5709              		.cfi_offset 6, -16
 5710 0001 4889E5   		movq	%rsp, %rbp
 5711              		.cfi_def_cfa_register 6
 5712 0004 4883EC30 		subq	$48, %rsp
 5713 0008 48897DE8 		movq	%rdi, -24(%rbp)
 5714 000c 488975E0 		movq	%rsi, -32(%rbp)
 5715 0010 488955D8 		movq	%rdx, -40(%rbp)
 5716              	.LBB56:
 387:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5717              		.loc 12 387 0
 5718 0014 C645FF00 		movb	$0, -1(%rbp)
 390:/usr/include/c++/4.8/bits/stl_algobase.h ****     }
 5719              		.loc 12 390 0
 5720 0018 488B55D8 		movq	-40(%rbp), %rdx
 5721 001c 488B4DE0 		movq	-32(%rbp), %rcx
 5722 0020 488B45E8 		movq	-24(%rbp), %rax
 5723 0024 4889CE   		movq	%rcx, %rsi
 5724 0027 4889C7   		movq	%rax, %rdi
 5725 002a E8000000 		call	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S7
 5725      00
 5726              	.LBE56:
 391:/usr/include/c++/4.8/bits/stl_algobase.h **** 
 5727              		.loc 12 391 0
 5728 002f C9       		leave
 5729              		.cfi_def_cfa 7, 8
 5730 0030 C3       		ret
 5731              		.cfi_endproc
 5732              	.LFE1006:
 5734              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_,"axG
 5735              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_
 5737              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_:
 5738              	.LFB1007:
  68:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 5739              		.loc 13 68 0
 5740              		.cfi_startproc
 5741              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5742              		.cfi_lsda 0x1b,.LLSDA1007
 5743 0000 55       		pushq	%rbp
 5744              		.cfi_def_cfa_offset 16
 5745              		.cfi_offset 6, -16
 5746 0001 4889E5   		movq	%rsp, %rbp
 5747              		.cfi_def_cfa_register 6
 5748 0004 53       		pushq	%rbx
 5749 0005 4883EC38 		subq	$56, %rsp
 5750              		.cfi_offset 3, -24
 5751 0009 48897DD8 		movq	%rdi, -40(%rbp)
 5752 000d 488975D0 		movq	%rsi, -48(%rbp)
 5753 0011 488955C8 		movq	%rdx, -56(%rbp)
 5754              	.LBB57:
  71:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __try
 5755              		.loc 13 71 0
 5756 0015 488B45C8 		movq	-56(%rbp), %rax
 5757 0019 488945E8 		movq	%rax, -24(%rbp)
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5758              		.loc 13 74 0
 5759 001d EB25     		jmp	.L314
 5760              	.L315:
  75:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      return __cur;
 5761              		.loc 13 75 0
 5762 001f 488B45E8 		movq	-24(%rbp), %rax
 5763 0023 4889C7   		movq	%rax, %rdi
 5764 0026 E8000000 		call	_ZSt11__addressofISt4pairIiSsEEPT_RS2_@PLT
 5764      00
 5765 002b 488B55D8 		movq	-40(%rbp), %rdx
 5766 002f 4889D6   		movq	%rdx, %rsi
 5767 0032 4889C7   		movq	%rax, %rdi
 5768              	.LEHB60:
 5769 0035 E8000000 		call	_ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_@PLT
 5769      00
 5770              	.LEHE60:
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5771              		.loc 13 74 0
 5772 003a 488345D8 		addq	$16, -40(%rbp)
 5772      10
 5773 003f 488345E8 		addq	$16, -24(%rbp)
 5773      10
 5774              	.L314:
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5775              		.loc 13 74 0 is_stmt 0 discriminator 1
 5776 0044 488B45D8 		movq	-40(%rbp), %rax
 5777 0048 483B45D0 		cmpq	-48(%rbp), %rax
 5778 004c 75D1     		jne	.L315
  76:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 5779              		.loc 13 76 0 is_stmt 1
 5780 004e 488B45E8 		movq	-24(%rbp), %rax
 5781 0052 EB33     		jmp	.L321
 5782              	.L320:
 5783 0054 4889C3   		movq	%rax, %rbx
  78:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 5784              		.loc 13 78 0
 5785 0057 E8000000 		call	__cxa_end_catch@PLT
 5785      00
 5786 005c 4889D8   		movq	%rbx, %rax
 5787 005f 4889C7   		movq	%rax, %rdi
 5788              	.LEHB61:
 5789 0062 E8000000 		call	_Unwind_Resume@PLT
 5789      00
 5790              	.LEHE61:
 5791              	.L319:
 5792 0067 4889C7   		movq	%rax, %rdi
 5793 006a E8000000 		call	__cxa_begin_catch@PLT
 5793      00
  80:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 5794              		.loc 13 80 0
 5795 006f 488B55E8 		movq	-24(%rbp), %rdx
 5796 0073 488B45C8 		movq	-56(%rbp), %rax
 5797 0077 4889D6   		movq	%rdx, %rsi
 5798 007a 4889C7   		movq	%rax, %rdi
 5799              	.LEHB62:
 5800 007d E8000000 		call	_ZSt8_DestroyIPSt4pairIiSsEEvT_S3_@PLT
 5800      00
  81:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 5801              		.loc 13 81 0
 5802 0082 E8000000 		call	__cxa_rethrow@PLT
 5802      00
 5803              	.LEHE62:
 5804              	.L321:
 5805              	.LBE57:
  83:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 5806              		.loc 13 83 0
 5807 0087 4883C438 		addq	$56, %rsp
 5808 008b 5B       		popq	%rbx
 5809 008c 5D       		popq	%rbp
 5810              		.cfi_def_cfa 7, 8
 5811 008d C3       		ret
 5812              		.cfi_endproc
 5813              	.LFE1007:
 5814              		.section	.gcc_except_table
 5815              		.align 4
 5816              	.LLSDA1007:
 5817 0160 FF       		.byte	0xff
 5818 0161 9B       		.byte	0x9b
 5819 0162 15       		.uleb128 .LLSDATT1007-.LLSDATTD1007
 5820              	.LLSDATTD1007:
 5821 0163 01       		.byte	0x1
 5822 0164 0C       		.uleb128 .LLSDACSE1007-.LLSDACSB1007
 5823              	.LLSDACSB1007:
 5824 0165 35       		.uleb128 .LEHB60-.LFB1007
 5825 0166 05       		.uleb128 .LEHE60-.LEHB60
 5826 0167 67       		.uleb128 .L319-.LFB1007
 5827 0168 01       		.uleb128 0x1
 5828 0169 62       		.uleb128 .LEHB61-.LFB1007
 5829 016a 05       		.uleb128 .LEHE61-.LEHB61
 5830 016b 00       		.uleb128 0
 5831 016c 00       		.uleb128 0
 5832 016d 7D       		.uleb128 .LEHB62-.LFB1007
 5833 016e 0A       		.uleb128 .LEHE62-.LEHB62
 5834 016f 54       		.uleb128 .L320-.LFB1007
 5835 0170 00       		.uleb128 0
 5836              	.LLSDACSE1007:
 5837 0171 01       		.byte	0x1
 5838 0172 00       		.byte	0
 5839 0173 00       		.align 4
 5840 0174 00000000 		.long	0
 5841              	
 5842              	.LLSDATT1007:
 5843              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_,"axG
 5845              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4
 5846              		.weak	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S
 5848              	_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_:
 5849              	.LFB1008:
  68:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		      _ForwardIterator __result)
 5850              		.loc 13 68 0
 5851              		.cfi_startproc
 5852              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 5853              		.cfi_lsda 0x1b,.LLSDA1008
 5854 0000 55       		pushq	%rbp
 5855              		.cfi_def_cfa_offset 16
 5856              		.cfi_offset 6, -16
 5857 0001 4889E5   		movq	%rsp, %rbp
 5858              		.cfi_def_cfa_register 6
 5859 0004 53       		pushq	%rbx
 5860 0005 4883EC38 		subq	$56, %rsp
 5861              		.cfi_offset 3, -24
 5862 0009 48897DD8 		movq	%rdi, -40(%rbp)
 5863 000d 488975D0 		movq	%rsi, -48(%rbp)
 5864 0011 488955C8 		movq	%rdx, -56(%rbp)
 5865              	.LBB58:
  71:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	  __try
 5866              		.loc 13 71 0
 5867 0015 488B45C8 		movq	-56(%rbp), %rax
 5868 0019 488945E8 		movq	%rax, -24(%rbp)
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5869              		.loc 13 74 0
 5870 001d EB25     		jmp	.L323
 5871              	.L324:
  75:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      return __cur;
 5872              		.loc 13 75 0
 5873 001f 488B45E8 		movq	-24(%rbp), %rax
 5874 0023 4889C7   		movq	%rax, %rdi
 5875              	.LEHB63:
 5876 0026 E8000000 		call	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_@PLT
 5876      00
 5877 002b 488B55D8 		movq	-40(%rbp), %rdx
 5878 002f 4889D6   		movq	%rdx, %rsi
 5879 0032 4889C7   		movq	%rax, %rdi
 5880 0035 E8000000 		call	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_@PLT
 5880      00
 5881              	.LEHE63:
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5882              		.loc 13 74 0
 5883 003a 488345D8 		addq	$56, -40(%rbp)
 5883      38
 5884 003f 488345E8 		addq	$56, -24(%rbp)
 5884      38
 5885              	.L323:
  74:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 		std::_Construct(std::__addressof(*__cur), *__first);
 5886              		.loc 13 74 0 is_stmt 0 discriminator 1
 5887 0044 488B45D8 		movq	-40(%rbp), %rax
 5888 0048 483B45D0 		cmpq	-48(%rbp), %rax
 5889 004c 75D1     		jne	.L324
  76:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 5890              		.loc 13 76 0 is_stmt 1
 5891 004e 488B45E8 		movq	-24(%rbp), %rax
 5892 0052 EB33     		jmp	.L330
 5893              	.L328:
 5894 0054 4889C3   		movq	%rax, %rbx
  78:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    {
 5895              		.loc 13 78 0
 5896 0057 E8000000 		call	__cxa_end_catch@PLT
 5896      00
 5897 005c 4889D8   		movq	%rbx, %rax
 5898 005f 4889C7   		movq	%rax, %rdi
 5899              	.LEHB64:
 5900 0062 E8000000 		call	_Unwind_Resume@PLT
 5900      00
 5901              	.LEHE64:
 5902              	.L329:
 5903 0067 4889C7   		movq	%rax, %rdi
 5904 006a E8000000 		call	__cxa_begin_catch@PLT
 5904      00
  80:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	      __throw_exception_again;
 5905              		.loc 13 80 0
 5906 006f 488B55E8 		movq	-24(%rbp), %rdx
 5907 0073 488B45C8 		movq	-56(%rbp), %rax
 5908 0077 4889D6   		movq	%rdx, %rsi
 5909 007a 4889C7   		movq	%rax, %rdi
 5910              	.LEHB65:
 5911 007d E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_@PLT
 5911      00
  81:/usr/include/c++/4.8/bits/stl_uninitialized.h **** 	    }
 5912              		.loc 13 81 0
 5913 0082 E8000000 		call	__cxa_rethrow@PLT
 5913      00
 5914              	.LEHE65:
 5915              	.L330:
 5916              	.LBE58:
  83:/usr/include/c++/4.8/bits/stl_uninitialized.h ****     };
 5917              		.loc 13 83 0
 5918 0087 4883C438 		addq	$56, %rsp
 5919 008b 5B       		popq	%rbx
 5920 008c 5D       		popq	%rbp
 5921              		.cfi_def_cfa 7, 8
 5922 008d C3       		ret
 5923              		.cfi_endproc
 5924              	.LFE1008:
 5925              		.section	.gcc_except_table
 5926              		.align 4
 5927              	.LLSDA1008:
 5928 0178 FF       		.byte	0xff
 5929 0179 9B       		.byte	0x9b
 5930 017a 15       		.uleb128 .LLSDATT1008-.LLSDATTD1008
 5931              	.LLSDATTD1008:
 5932 017b 01       		.byte	0x1
 5933 017c 0C       		.uleb128 .LLSDACSE1008-.LLSDACSB1008
 5934              	.LLSDACSB1008:
 5935 017d 26       		.uleb128 .LEHB63-.LFB1008
 5936 017e 14       		.uleb128 .LEHE63-.LEHB63
 5937 017f 67       		.uleb128 .L329-.LFB1008
 5938 0180 01       		.uleb128 0x1
 5939 0181 62       		.uleb128 .LEHB64-.LFB1008
 5940 0182 05       		.uleb128 .LEHE64-.LEHB64
 5941 0183 00       		.uleb128 0
 5942 0184 00       		.uleb128 0
 5943 0185 7D       		.uleb128 .LEHB65-.LFB1008
 5944 0186 0A       		.uleb128 .LEHE65-.LEHB65
 5945 0187 54       		.uleb128 .L328-.LFB1008
 5946 0188 00       		.uleb128 0
 5947              	.LLSDACSE1008:
 5948 0189 01       		.byte	0x1
 5949 018a 00       		.byte	0
 5950 018b 00       		.align 4
 5951 018c 00000000 		.long	0
 5952              	
 5953              	.LLSDATT1008:
 5954              		.section	.text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4
 5956              		.section	.text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_,"axG",@progbits,_ZSt11__a
 5957              		.weak	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
 5959              	_ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:
 5960              	.LFB1009:
  47:/usr/include/c++/4.8/bits/move.h ****     {
 5961              		.loc 14 47 0
 5962              		.cfi_startproc
 5963 0000 55       		pushq	%rbp
 5964              		.cfi_def_cfa_offset 16
 5965              		.cfi_offset 6, -16
 5966 0001 4889E5   		movq	%rsp, %rbp
 5967              		.cfi_def_cfa_register 6
 5968 0004 48897DF8 		movq	%rdi, -8(%rbp)
  50:/usr/include/c++/4.8/bits/move.h ****     }
 5969              		.loc 14 50 0
 5970 0008 488B45F8 		movq	-8(%rbp), %rax
 5971              		.loc 14 51 0
 5972 000c 5D       		popq	%rbp
 5973              		.cfi_def_cfa 7, 8
 5974 000d C3       		ret
 5975              		.cfi_endproc
 5976              	.LFE1009:
 5978              		.section	.text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_,"axG",@progbits,_ZSt8_DestroyIN8
 5979              		.weak	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
 5981              	_ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:
 5982              	.LFB1010:
  92:/usr/include/c++/4.8/bits/stl_construct.h ****     { __pointer->~_Tp(); }
 5983              		.loc 6 92 0
 5984              		.cfi_startproc
 5985 0000 55       		pushq	%rbp
 5986              		.cfi_def_cfa_offset 16
 5987              		.cfi_offset 6, -16
 5988 0001 4889E5   		movq	%rsp, %rbp
 5989              		.cfi_def_cfa_register 6
 5990 0004 4883EC10 		subq	$16, %rsp
 5991 0008 48897DF8 		movq	%rdi, -8(%rbp)
  93:/usr/include/c++/4.8/bits/stl_construct.h **** 
 5992              		.loc 6 93 0
 5993 000c 488B45F8 		movq	-8(%rbp), %rax
 5994 0010 4889C7   		movq	%rax, %rdi
 5995 0013 E8000000 		call	_ZN8UnitTest18DeferredTestResultD1Ev@PLT
 5995      00
 5996 0018 C9       		leave
 5997              		.cfi_def_cfa 7, 8
 5998 0019 C3       		ret
 5999              		.cfi_endproc
 6000              	.LFE1010:
 6002              		.section	.text._ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bI
 6003              		.weak	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairI
 6005              	_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIiSsES5_
 6006              	.LFB1011:
 533:/usr/include/c++/4.8/bits/stl_algobase.h ****         {
 6007              		.loc 12 533 0
 6008              		.cfi_startproc
 6009 0000 55       		pushq	%rbp
 6010              		.cfi_def_cfa_offset 16
 6011              		.cfi_offset 6, -16
 6012 0001 4889E5   		movq	%rsp, %rbp
 6013              		.cfi_def_cfa_register 6
 6014 0004 4883EC30 		subq	$48, %rsp
 6015 0008 48897DE8 		movq	%rdi, -24(%rbp)
 6016 000c 488975E0 		movq	%rsi, -32(%rbp)
 6017 0010 488955D8 		movq	%rdx, -40(%rbp)
 6018              	.LBB59:
 536:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 6019              		.loc 12 536 0
 6020 0014 488B55E0 		movq	-32(%rbp), %rdx
 6021 0018 488B45E8 		movq	-24(%rbp), %rax
 6022 001c 4829C2   		subq	%rax, %rdx
 6023 001f 4889D0   		movq	%rdx, %rax
 6024 0022 48C1F804 		sarq	$4, %rax
 6025 0026 488945F8 		movq	%rax, -8(%rbp)
 6026 002a EB22     		jmp	.L335
 6027              	.L336:
 537:/usr/include/c++/4.8/bits/stl_algobase.h **** 	  return __result;
 6028              		.loc 12 537 0 discriminator 2
 6029 002c 48836DE0 		subq	$16, -32(%rbp)
 6029      10
 6030 0031 48836DD8 		subq	$16, -40(%rbp)
 6030      10
 6031 0036 488B55E0 		movq	-32(%rbp), %rdx
 6032 003a 488B45D8 		movq	-40(%rbp), %rax
 6033 003e 4889D6   		movq	%rdx, %rsi
 6034 0041 4889C7   		movq	%rax, %rdi
 6035 0044 E8000000 		call	_ZNSt4pairIiSsEaSERKS0_@PLT
 6035      00
 536:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 6036              		.loc 12 536 0 discriminator 2
 6037 0049 48836DF8 		subq	$1, -8(%rbp)
 6037      01
 6038              	.L335:
 536:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    *--__result = *--__last;
 6039              		.loc 12 536 0 is_stmt 0 discriminator 1
 6040 004e 48837DF8 		cmpq	$0, -8(%rbp)
 6040      00
 6041 0053 7FD7     		jg	.L336
 538:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 6042              		.loc 12 538 0 is_stmt 1
 6043 0055 488B45D8 		movq	-40(%rbp), %rax
 6044              	.LBE59:
 539:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 6045              		.loc 12 539 0
 6046 0059 C9       		leave
 6047              		.cfi_def_cfa 7, 8
 6048 005a C3       		ret
 6049              		.cfi_endproc
 6050              	.LFE1011:
 6052              		.section	.text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_,"axG",@progbits,_ZN9__gnu_cxx13n
 6053              		.align 2
 6054              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_
 6056              	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_:
 6057              	.LFB1013:
  81:/usr/include/c++/4.8/ext/new_allocator.h **** 
 6058              		.loc 11 81 0
 6059              		.cfi_startproc
 6060 0000 55       		pushq	%rbp
 6061              		.cfi_def_cfa_offset 16
 6062              		.cfi_offset 6, -16
 6063 0001 4889E5   		movq	%rsp, %rbp
 6064              		.cfi_def_cfa_register 6
 6065 0004 48897DF8 		movq	%rdi, -8(%rbp)
 6066 0008 488975F0 		movq	%rsi, -16(%rbp)
  81:/usr/include/c++/4.8/ext/new_allocator.h **** 
 6067              		.loc 11 81 0
 6068 000c 5D       		popq	%rbp
 6069              		.cfi_def_cfa 7, 8
 6070 000d C3       		ret
 6071              		.cfi_endproc
 6072              	.LFE1013:
 6074              		.weak	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC1ERKS3_
 6075              		.set	_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC1ERKS3_,_ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE
 6076              		.section	.text._ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0
 6077              		.weak	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
 6079              	_ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:
 6080              	.LFB1015:
 823:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 6081              		.loc 9 823 0
 6082              		.cfi_startproc
 6083 0000 55       		pushq	%rbp
 6084              		.cfi_def_cfa_offset 16
 6085              		.cfi_offset 6, -16
 6086 0001 4889E5   		movq	%rsp, %rbp
 6087              		.cfi_def_cfa_register 6
 6088 0004 53       		pushq	%rbx
 6089 0005 4883EC18 		subq	$24, %rsp
 6090              		.cfi_offset 3, -24
 6091 0009 48897DE8 		movq	%rdi, -24(%rbp)
 6092 000d 488975E0 		movq	%rsi, -32(%rbp)
 825:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 6093              		.loc 9 825 0
 6094 0011 488B45E8 		movq	-24(%rbp), %rax
 6095 0015 4889C7   		movq	%rax, %rdi
 6096 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6096      00
 6097 001d 488B18   		movq	(%rax), %rbx
 6098 0020 488B45E0 		movq	-32(%rbp), %rax
 6099 0024 4889C7   		movq	%rax, %rdi
 6100 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6100      00
 6101 002c 488B00   		movq	(%rax), %rax
 6102 002f 4839C3   		cmpq	%rax, %rbx
 6103 0032 0F95C0   		setne	%al
 6104 0035 4883C418 		addq	$24, %rsp
 6105 0039 5B       		popq	%rbx
 6106 003a 5D       		popq	%rbp
 6107              		.cfi_def_cfa 7, 8
 6108 003b C3       		ret
 6109              		.cfi_endproc
 6110              	.LFE1015:
 6112              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv,"axG",@pr
 6113              		.align 2
 6114              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
 6116              	_ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:
 6117              	.LFB1016:
 746:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 6118              		.loc 9 746 0
 6119              		.cfi_startproc
 6120 0000 55       		pushq	%rbp
 6121              		.cfi_def_cfa_offset 16
 6122              		.cfi_offset 6, -16
 6123 0001 4889E5   		movq	%rsp, %rbp
 6124              		.cfi_def_cfa_register 6
 6125 0004 48897DF8 		movq	%rdi, -8(%rbp)
 748:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 6126              		.loc 9 748 0
 6127 0008 488B45F8 		movq	-8(%rbp), %rax
 6128 000c 488B00   		movq	(%rax), %rax
 6129 000f 488D5010 		leaq	16(%rax), %rdx
 6130 0013 488B45F8 		movq	-8(%rbp), %rax
 6131 0017 488910   		movq	%rdx, (%rax)
 749:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 6132              		.loc 9 749 0
 6133 001a 488B45F8 		movq	-8(%rbp), %rax
 750:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 6134              		.loc 9 750 0
 6135 001e 5D       		popq	%rbp
 6136              		.cfi_def_cfa 7, 8
 6137 001f C3       		ret
 6138              		.cfi_endproc
 6139              	.LFE1016:
 6141              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv,"axG",@p
 6142              		.align 2
 6143              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv
 6145              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv:
 6146              	.LFB1017:
 738:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return *_M_current; }
 6147              		.loc 9 738 0
 6148              		.cfi_startproc
 6149 0000 55       		pushq	%rbp
 6150              		.cfi_def_cfa_offset 16
 6151              		.cfi_offset 6, -16
 6152 0001 4889E5   		movq	%rsp, %rbp
 6153              		.cfi_def_cfa_register 6
 6154 0004 48897DF8 		movq	%rdi, -8(%rbp)
 739:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 6155              		.loc 9 739 0
 6156 0008 488B45F8 		movq	-8(%rbp), %rax
 6157 000c 488B00   		movq	(%rax), %rax
 6158 000f 5D       		popq	%rbp
 6159              		.cfi_def_cfa 7, 8
 6160 0010 C3       		ret
 6161              		.cfi_endproc
 6162              	.LFE1017:
 6164              		.section	.text._ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_,"axG",@progbits,_ZSt10_ConstructISt4pair
 6165              		.weak	_ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_
 6167              	_ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_:
 6168              	.LFB1018:
  79:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 6169              		.loc 6 79 0
 6170              		.cfi_startproc
 6171              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6172              		.cfi_lsda 0x1b,.LLSDA1018
 6173 0000 55       		pushq	%rbp
 6174              		.cfi_def_cfa_offset 16
 6175              		.cfi_offset 6, -16
 6176 0001 4889E5   		movq	%rsp, %rbp
 6177              		.cfi_def_cfa_register 6
 6178 0004 4155     		pushq	%r13
 6179 0006 4154     		pushq	%r12
 6180 0008 53       		pushq	%rbx
 6181 0009 4883EC18 		subq	$24, %rsp
 6182              		.cfi_offset 13, -24
 6183              		.cfi_offset 12, -32
 6184              		.cfi_offset 3, -40
 6185 000d 48897DD8 		movq	%rdi, -40(%rbp)
 6186 0011 488975D0 		movq	%rsi, -48(%rbp)
  83:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 6187              		.loc 6 83 0
 6188 0015 4C8B65D8 		movq	-40(%rbp), %r12
 6189 0019 4C89E6   		movq	%r12, %rsi
 6190 001c BF100000 		movl	$16, %edi
 6190      00
 6191 0021 E8000000 		call	_ZnwmPv@PLT
 6191      00
 6192 0026 4889C3   		movq	%rax, %rbx
 6193 0029 4885DB   		testq	%rbx, %rbx
 6194 002c 7411     		je	.L346
  83:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 6195              		.loc 6 83 0 is_stmt 0 discriminator 1
 6196 002e 488B45D0 		movq	-48(%rbp), %rax
 6197 0032 4889C6   		movq	%rax, %rsi
 6198 0035 4889DF   		movq	%rbx, %rdi
 6199              	.LEHB66:
 6200 0038 E8000000 		call	_ZNSt4pairIiSsEC1ERKS0_@PLT
 6200      00
 6201              	.LEHE66:
 6202 003d EB1B     		jmp	.L345
 6203              	.L346:
  84:/usr/include/c++/4.8/bits/stl_construct.h **** #endif
 6204              		.loc 6 84 0 is_stmt 1 discriminator 2
 6205 003f EB19     		jmp	.L345
 6206              	.L349:
 6207 0041 4989C5   		movq	%rax, %r13
  83:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 6208              		.loc 6 83 0
 6209 0044 4C89E6   		movq	%r12, %rsi
 6210 0047 4889DF   		movq	%rbx, %rdi
 6211 004a E8000000 		call	_ZdlPvS_@PLT
 6211      00
 6212 004f 4C89E8   		movq	%r13, %rax
 6213 0052 4889C7   		movq	%rax, %rdi
 6214              	.LEHB67:
 6215 0055 E8000000 		call	_Unwind_Resume@PLT
 6215      00
 6216              	.LEHE67:
 6217              	.L345:
  84:/usr/include/c++/4.8/bits/stl_construct.h **** #endif
 6218              		.loc 6 84 0
 6219 005a 4883C418 		addq	$24, %rsp
 6220 005e 5B       		popq	%rbx
 6221 005f 415C     		popq	%r12
 6222 0061 415D     		popq	%r13
 6223 0063 5D       		popq	%rbp
 6224              		.cfi_def_cfa 7, 8
 6225 0064 C3       		ret
 6226              		.cfi_endproc
 6227              	.LFE1018:
 6228              		.section	.gcc_except_table
 6229              	.LLSDA1018:
 6230 0190 FF       		.byte	0xff
 6231 0191 FF       		.byte	0xff
 6232 0192 01       		.byte	0x1
 6233 0193 08       		.uleb128 .LLSDACSE1018-.LLSDACSB1018
 6234              	.LLSDACSB1018:
 6235 0194 38       		.uleb128 .LEHB66-.LFB1018
 6236 0195 05       		.uleb128 .LEHE66-.LEHB66
 6237 0196 41       		.uleb128 .L349-.LFB1018
 6238 0197 00       		.uleb128 0
 6239 0198 55       		.uleb128 .LEHB67-.LFB1018
 6240 0199 05       		.uleb128 .LEHE67-.LEHB67
 6241 019a 00       		.uleb128 0
 6242 019b 00       		.uleb128 0
 6243              	.LLSDACSE1018:
 6244              		.section	.text._ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_,"axG",@progbits,_ZSt10_ConstructISt4pair
 6246              		.section	.text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_E
 6247              		.weak	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7
 6249              	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_base
 6250              	.LFB1019:
 214:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     };
 215:/usr/include/c++/4.8/bits/stl_iterator_base_types.h **** 
 216:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****   template<typename _Iterator>
 217:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     struct _Iter_base<_Iterator, true>
 218:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****     {
 219:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       typedef typename _Iterator::iterator_type iterator_type;
 220:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       static iterator_type _S_base(_Iterator __it)
 6251              		.loc 15 220 0
 6252              		.cfi_startproc
 6253 0000 55       		pushq	%rbp
 6254              		.cfi_def_cfa_offset 16
 6255              		.cfi_offset 6, -16
 6256 0001 4889E5   		movq	%rsp, %rbp
 6257              		.cfi_def_cfa_register 6
 6258 0004 4883EC10 		subq	$16, %rsp
 6259 0008 48897DF0 		movq	%rdi, -16(%rbp)
 221:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       { return __it.base(); }
 6260              		.loc 15 221 0
 6261 000c 488D45F0 		leaq	-16(%rbp), %rax
 6262 0010 4889C7   		movq	%rax, %rdi
 6263 0013 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6263      00
 6264 0018 488B00   		movq	(%rax), %rax
 6265 001b C9       		leave
 6266              		.cfi_def_cfa 7, 8
 6267 001c C3       		ret
 6268              		.cfi_endproc
 6269              	.LFE1019:
 6271              		.section	.text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EE
 6272              		.weak	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_
 6274              	_ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseE
 6275              	.LFB1020:
 220:/usr/include/c++/4.8/bits/stl_iterator_base_types.h ****       { return __it.base(); }
 6276              		.loc 15 220 0
 6277              		.cfi_startproc
 6278 0000 55       		pushq	%rbp
 6279              		.cfi_def_cfa_offset 16
 6280              		.cfi_offset 6, -16
 6281 0001 4889E5   		movq	%rsp, %rbp
 6282              		.cfi_def_cfa_register 6
 6283 0004 4883EC10 		subq	$16, %rsp
 6284 0008 48897DF0 		movq	%rdi, -16(%rbp)
 6285              		.loc 15 221 0
 6286 000c 488D45F0 		leaq	-16(%rbp), %rax
 6287 0010 4889C7   		movq	%rax, %rdi
 6288 0013 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6288      00
 6289 0018 488B00   		movq	(%rax), %rax
 6290 001b C9       		leave
 6291              		.cfi_def_cfa 7, 8
 6292 001c C3       		ret
 6293              		.cfi_endproc
 6294              	.LFE1020:
 6296              		.section	.text._ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEP
 6297              		.weak	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T
 6299              	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T_S9_S8_
 6300              	.LFB1021:
 330:/usr/include/c++/4.8/bits/stl_algobase.h ****         { 
 6301              		.loc 12 330 0
 6302              		.cfi_startproc
 6303 0000 55       		pushq	%rbp
 6304              		.cfi_def_cfa_offset 16
 6305              		.cfi_offset 6, -16
 6306 0001 4889E5   		movq	%rsp, %rbp
 6307              		.cfi_def_cfa_register 6
 6308 0004 4883EC30 		subq	$48, %rsp
 6309 0008 48897DE8 		movq	%rdi, -24(%rbp)
 6310 000c 488975E0 		movq	%rsi, -32(%rbp)
 6311 0010 488955D8 		movq	%rdx, -40(%rbp)
 6312              	.LBB60:
 6313              	.LBB61:
 333:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 6314              		.loc 12 333 0
 6315 0014 488B55E0 		movq	-32(%rbp), %rdx
 6316 0018 488B45E8 		movq	-24(%rbp), %rax
 6317 001c 4829C2   		subq	%rax, %rdx
 6318 001f 4889D0   		movq	%rdx, %rax
 6319 0022 48C1F804 		sarq	$4, %rax
 6320 0026 488945F8 		movq	%rax, -8(%rbp)
 6321 002a EB22     		jmp	.L355
 6322              	.L356:
 335:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__first;
 6323              		.loc 12 335 0 discriminator 2
 6324 002c 488B55E8 		movq	-24(%rbp), %rdx
 6325 0030 488B45D8 		movq	-40(%rbp), %rax
 6326 0034 4889D6   		movq	%rdx, %rsi
 6327 0037 4889C7   		movq	%rax, %rdi
 6328 003a E8000000 		call	_ZNSt4pairIiSsEaSERKS0_@PLT
 6328      00
 336:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__result;
 6329              		.loc 12 336 0 discriminator 2
 6330 003f 488345E8 		addq	$16, -24(%rbp)
 6330      10
 337:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    }
 6331              		.loc 12 337 0 discriminator 2
 6332 0044 488345D8 		addq	$16, -40(%rbp)
 6332      10
 333:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 6333              		.loc 12 333 0 discriminator 2
 6334 0049 48836DF8 		subq	$1, -8(%rbp)
 6334      01
 6335              	.L355:
 333:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 6336              		.loc 12 333 0 is_stmt 0 discriminator 1
 6337 004e 48837DF8 		cmpq	$0, -8(%rbp)
 6337      00
 6338 0053 7FD7     		jg	.L356
 6339              	.LBE61:
 339:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 6340              		.loc 12 339 0 is_stmt 1
 6341 0055 488B45D8 		movq	-40(%rbp), %rax
 6342              	.LBE60:
 340:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 6343              		.loc 12 340 0
 6344 0059 C9       		leave
 6345              		.cfi_def_cfa 7, 8
 6346 005a C3       		ret
 6347              		.cfi_endproc
 6348              	.LFE1021:
 6350              		.section	.text._ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_
 6351              		.weak	_ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
 6353              	_ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:
 6354              	.LFB1022:
 823:/usr/include/c++/4.8/bits/stl_iterator.h **** 	       const __normal_iterator<_Iterator, _Container>& __rhs)
 6355              		.loc 9 823 0
 6356              		.cfi_startproc
 6357 0000 55       		pushq	%rbp
 6358              		.cfi_def_cfa_offset 16
 6359              		.cfi_offset 6, -16
 6360 0001 4889E5   		movq	%rsp, %rbp
 6361              		.cfi_def_cfa_register 6
 6362 0004 53       		pushq	%rbx
 6363 0005 4883EC18 		subq	$24, %rsp
 6364              		.cfi_offset 3, -24
 6365 0009 48897DE8 		movq	%rdi, -24(%rbp)
 6366 000d 488975E0 		movq	%rsi, -32(%rbp)
 825:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 6367              		.loc 9 825 0
 6368 0011 488B45E8 		movq	-24(%rbp), %rax
 6369 0015 4889C7   		movq	%rax, %rdi
 6370 0018 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6370      00
 6371 001d 488B18   		movq	(%rax), %rbx
 6372 0020 488B45E0 		movq	-32(%rbp), %rax
 6373 0024 4889C7   		movq	%rax, %rdi
 6374 0027 E8000000 		call	_ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv@PLT
 6374      00
 6375 002c 488B00   		movq	(%rax), %rax
 6376 002f 4839C3   		cmpq	%rax, %rbx
 6377 0032 0F95C0   		setne	%al
 6378 0035 4883C418 		addq	$24, %rsp
 6379 0039 5B       		popq	%rbx
 6380 003a 5D       		popq	%rbp
 6381              		.cfi_def_cfa 7, 8
 6382 003b C3       		ret
 6383              		.cfi_endproc
 6384              	.LFE1022:
 6386              		.section	.text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv,"axG",@pro
 6387              		.align 2
 6388              		.weak	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
 6390              	_ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:
 6391              	.LFB1023:
 746:/usr/include/c++/4.8/bits/stl_iterator.h ****       {
 6392              		.loc 9 746 0
 6393              		.cfi_startproc
 6394 0000 55       		pushq	%rbp
 6395              		.cfi_def_cfa_offset 16
 6396              		.cfi_offset 6, -16
 6397 0001 4889E5   		movq	%rsp, %rbp
 6398              		.cfi_def_cfa_register 6
 6399 0004 48897DF8 		movq	%rdi, -8(%rbp)
 748:/usr/include/c++/4.8/bits/stl_iterator.h **** 	return *this;
 6400              		.loc 9 748 0
 6401 0008 488B45F8 		movq	-8(%rbp), %rax
 6402 000c 488B00   		movq	(%rax), %rax
 6403 000f 488D5010 		leaq	16(%rax), %rdx
 6404 0013 488B45F8 		movq	-8(%rbp), %rax
 6405 0017 488910   		movq	%rdx, (%rax)
 749:/usr/include/c++/4.8/bits/stl_iterator.h ****       }
 6406              		.loc 9 749 0
 6407 001a 488B45F8 		movq	-8(%rbp), %rax
 750:/usr/include/c++/4.8/bits/stl_iterator.h **** 
 6408              		.loc 9 750 0
 6409 001e 5D       		popq	%rbp
 6410              		.cfi_def_cfa 7, 8
 6411 001f C3       		ret
 6412              		.cfi_endproc
 6413              	.LFE1023:
 6415              		.section	.text._ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5
 6416              		.weak	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S
 6418              	_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S7_S6_:
 6419              	.LFB1024:
 330:/usr/include/c++/4.8/bits/stl_algobase.h ****         { 
 6420              		.loc 12 330 0
 6421              		.cfi_startproc
 6422 0000 55       		pushq	%rbp
 6423              		.cfi_def_cfa_offset 16
 6424              		.cfi_offset 6, -16
 6425 0001 4889E5   		movq	%rsp, %rbp
 6426              		.cfi_def_cfa_register 6
 6427 0004 4883EC30 		subq	$48, %rsp
 6428 0008 48897DE8 		movq	%rdi, -24(%rbp)
 6429 000c 488975E0 		movq	%rsi, -32(%rbp)
 6430 0010 488955D8 		movq	%rdx, -40(%rbp)
 6431              	.LBB62:
 6432              	.LBB63:
 333:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 6433              		.loc 12 333 0
 6434 0014 488B55E0 		movq	-32(%rbp), %rdx
 6435 0018 488B45E8 		movq	-24(%rbp), %rax
 6436 001c 4829C2   		subq	%rax, %rdx
 6437 001f 4889D0   		movq	%rdx, %rax
 6438 0022 48C1F804 		sarq	$4, %rax
 6439 0026 488945F8 		movq	%rax, -8(%rbp)
 6440 002a EB22     		jmp	.L363
 6441              	.L364:
 335:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__first;
 6442              		.loc 12 335 0 discriminator 2
 6443 002c 488B55E8 		movq	-24(%rbp), %rdx
 6444 0030 488B45D8 		movq	-40(%rbp), %rax
 6445 0034 4889D6   		movq	%rdx, %rsi
 6446 0037 4889C7   		movq	%rax, %rdi
 6447 003a E8000000 		call	_ZNSt4pairIiSsEaSERKS0_@PLT
 6447      00
 336:/usr/include/c++/4.8/bits/stl_algobase.h **** 	      ++__result;
 6448              		.loc 12 336 0 discriminator 2
 6449 003f 488345E8 		addq	$16, -24(%rbp)
 6449      10
 337:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    }
 6450              		.loc 12 337 0 discriminator 2
 6451 0044 488345D8 		addq	$16, -40(%rbp)
 6451      10
 333:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 6452              		.loc 12 333 0 discriminator 2
 6453 0049 48836DF8 		subq	$1, -8(%rbp)
 6453      01
 6454              	.L363:
 333:/usr/include/c++/4.8/bits/stl_algobase.h **** 	    {
 6455              		.loc 12 333 0 is_stmt 0 discriminator 1
 6456 004e 48837DF8 		cmpq	$0, -8(%rbp)
 6456      00
 6457 0053 7FD7     		jg	.L364
 6458              	.LBE63:
 339:/usr/include/c++/4.8/bits/stl_algobase.h **** 	}
 6459              		.loc 12 339 0 is_stmt 1
 6460 0055 488B45D8 		movq	-40(%rbp), %rax
 6461              	.LBE62:
 340:/usr/include/c++/4.8/bits/stl_algobase.h ****     };
 6462              		.loc 12 340 0
 6463 0059 C9       		leave
 6464              		.cfi_def_cfa 7, 8
 6465 005a C3       		ret
 6466              		.cfi_endproc
 6467              	.LFE1024:
 6469              		.section	.text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_,"axG",@progbits,_ZSt1
 6470              		.weak	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_
 6472              	_ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_:
 6473              	.LFB1025:
  79:/usr/include/c++/4.8/bits/stl_construct.h ****     {
 6474              		.loc 6 79 0
 6475              		.cfi_startproc
 6476              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6477              		.cfi_lsda 0x1b,.LLSDA1025
 6478 0000 55       		pushq	%rbp
 6479              		.cfi_def_cfa_offset 16
 6480              		.cfi_offset 6, -16
 6481 0001 4889E5   		movq	%rsp, %rbp
 6482              		.cfi_def_cfa_register 6
 6483 0004 4155     		pushq	%r13
 6484 0006 4154     		pushq	%r12
 6485 0008 53       		pushq	%rbx
 6486 0009 4883EC18 		subq	$24, %rsp
 6487              		.cfi_offset 13, -24
 6488              		.cfi_offset 12, -32
 6489              		.cfi_offset 3, -40
 6490 000d 48897DD8 		movq	%rdi, -40(%rbp)
 6491 0011 488975D0 		movq	%rsi, -48(%rbp)
  83:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 6492              		.loc 6 83 0
 6493 0015 4C8B65D8 		movq	-40(%rbp), %r12
 6494 0019 4C89E6   		movq	%r12, %rsi
 6495 001c BF380000 		movl	$56, %edi
 6495      00
 6496 0021 E8000000 		call	_ZnwmPv@PLT
 6496      00
 6497 0026 4889C3   		movq	%rax, %rbx
 6498 0029 4885DB   		testq	%rbx, %rbx
 6499 002c 7411     		je	.L367
  83:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 6500              		.loc 6 83 0 is_stmt 0 discriminator 1
 6501 002e 488B45D0 		movq	-48(%rbp), %rax
 6502 0032 4889C6   		movq	%rax, %rsi
 6503 0035 4889DF   		movq	%rbx, %rdi
 6504              	.LEHB68:
 6505 0038 E8000000 		call	_ZN8UnitTest18DeferredTestResultC1ERKS0_@PLT
 6505      00
 6506              	.LEHE68:
 6507 003d EB1B     		jmp	.L366
 6508              	.L367:
  84:/usr/include/c++/4.8/bits/stl_construct.h **** #endif
 6509              		.loc 6 84 0 is_stmt 1 discriminator 2
 6510 003f EB19     		jmp	.L366
 6511              	.L370:
 6512 0041 4989C5   		movq	%rax, %r13
  83:/usr/include/c++/4.8/bits/stl_construct.h ****     }
 6513              		.loc 6 83 0
 6514 0044 4C89E6   		movq	%r12, %rsi
 6515 0047 4889DF   		movq	%rbx, %rdi
 6516 004a E8000000 		call	_ZdlPvS_@PLT
 6516      00
 6517 004f 4C89E8   		movq	%r13, %rax
 6518 0052 4889C7   		movq	%rax, %rdi
 6519              	.LEHB69:
 6520 0055 E8000000 		call	_Unwind_Resume@PLT
 6520      00
 6521              	.LEHE69:
 6522              	.L366:
  84:/usr/include/c++/4.8/bits/stl_construct.h **** #endif
 6523              		.loc 6 84 0
 6524 005a 4883C418 		addq	$24, %rsp
 6525 005e 5B       		popq	%rbx
 6526 005f 415C     		popq	%r12
 6527 0061 415D     		popq	%r13
 6528 0063 5D       		popq	%rbp
 6529              		.cfi_def_cfa 7, 8
 6530 0064 C3       		ret
 6531              		.cfi_endproc
 6532              	.LFE1025:
 6533              		.section	.gcc_except_table
 6534              	.LLSDA1025:
 6535 019c FF       		.byte	0xff
 6536 019d FF       		.byte	0xff
 6537 019e 01       		.byte	0x1
 6538 019f 08       		.uleb128 .LLSDACSE1025-.LLSDACSB1025
 6539              	.LLSDACSB1025:
 6540 01a0 38       		.uleb128 .LEHB68-.LFB1025
 6541 01a1 05       		.uleb128 .LEHE68-.LEHB68
 6542 01a2 41       		.uleb128 .L370-.LFB1025
 6543 01a3 00       		.uleb128 0
 6544 01a4 55       		.uleb128 .LEHB69-.LFB1025
 6545 01a5 05       		.uleb128 .LEHE69-.LEHB69
 6546 01a6 00       		.uleb128 0
 6547 01a7 00       		.uleb128 0
 6548              	.LLSDACSE1025:
 6549              		.section	.text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_,"axG",@progbits,_ZSt1
 6551              		.section	.text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv,"axG"
 6552              		.align 2
 6553              		.weak	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
 6555              	_ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:
 6556              	.LFB1026:
 790:/usr/include/c++/4.8/bits/stl_iterator.h ****       { return _M_current; }
 6557              		.loc 9 790 0
 6558              		.cfi_startproc
 6559 0000 55       		pushq	%rbp
 6560              		.cfi_def_cfa_offset 16
 6561              		.cfi_offset 6, -16
 6562 0001 4889E5   		movq	%rsp, %rbp
 6563              		.cfi_def_cfa_register 6
 6564 0004 48897DF8 		movq	%rdi, -8(%rbp)
 791:/usr/include/c++/4.8/bits/stl_iterator.h ****     };
 6565              		.loc 9 791 0
 6566 0008 488B45F8 		movq	-8(%rbp), %rax
 6567 000c 5D       		popq	%rbp
 6568              		.cfi_def_cfa 7, 8
 6569 000d C3       		ret
 6570              		.cfi_endproc
 6571              	.LFE1026:
 6573              		.weak	_ZTVN8UnitTest20DeferredTestReporterE
 6574              		.section	.data.rel.ro._ZTVN8UnitTest20DeferredTestReporterE,"awG",@progbits,_ZTVN8UnitTest20Deferr
 6575              		.align 32
 6578              	_ZTVN8UnitTest20DeferredTestReporterE:
 6579 0000 00000000 		.quad	0
 6579      00000000 
 6580 0008 00000000 		.quad	_ZTIN8UnitTest20DeferredTestReporterE
 6580      00000000 
 6581 0010 00000000 		.quad	_ZN8UnitTest20DeferredTestReporterD1Ev
 6581      00000000 
 6582 0018 00000000 		.quad	_ZN8UnitTest20DeferredTestReporterD0Ev
 6582      00000000 
 6583 0020 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
 6583      00000000 
 6584 0028 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
 6584      00000000 
 6585 0030 00000000 		.quad	_ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
 6585      00000000 
 6586 0038 00000000 		.quad	__cxa_pure_virtual
 6586      00000000 
 6587              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 6588              		.align 2
 6589              		.weak	_ZN8UnitTest20DeferredTestReporterD2Ev
 6591              	_ZN8UnitTest20DeferredTestReporterD2Ev:
 6592              	.LFB1028:
 6593              		.file 16 "DeferredTestReporter.h"
   1:DeferredTestReporter.h **** #ifndef UNITTEST_DEFERREDTESTREPORTER_H
   2:DeferredTestReporter.h **** #define UNITTEST_DEFERREDTESTREPORTER_H
   3:DeferredTestReporter.h **** 
   4:DeferredTestReporter.h **** #include "TestReporter.h"
   5:DeferredTestReporter.h **** #include "DeferredTestResult.h"
   6:DeferredTestReporter.h **** 
   7:DeferredTestReporter.h **** #include <vector>
   8:DeferredTestReporter.h **** 
   9:DeferredTestReporter.h **** namespace UnitTest
  10:DeferredTestReporter.h **** {
  11:DeferredTestReporter.h **** 
  12:DeferredTestReporter.h **** class DeferredTestReporter : public TestReporter
 6594              		.loc 16 12 0
 6595              		.cfi_startproc
 6596              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6597              		.cfi_lsda 0x1b,.LLSDA1028
 6598 0000 55       		pushq	%rbp
 6599              		.cfi_def_cfa_offset 16
 6600              		.cfi_offset 6, -16
 6601 0001 4889E5   		movq	%rsp, %rbp
 6602              		.cfi_def_cfa_register 6
 6603 0004 53       		pushq	%rbx
 6604 0005 4883EC18 		subq	$24, %rsp
 6605              		.cfi_offset 3, -24
 6606 0009 48897DE8 		movq	%rdi, -24(%rbp)
 6607              	.LBB64:
 6608              		.loc 16 12 0
 6609 000d 488B45E8 		movq	-24(%rbp), %rax
 6610 0011 488B1500 		movq	_ZTVN8UnitTest20DeferredTestReporterE@GOTPCREL(%rip), %rdx
 6610      000000
 6611 0018 488D5210 		leaq	16(%rdx), %rdx
 6612 001c 488910   		movq	%rdx, (%rax)
 6613 001f 488B45E8 		movq	-24(%rbp), %rax
 6614 0023 4883C008 		addq	$8, %rax
 6615 0027 4889C7   		movq	%rax, %rdi
 6616              	.LEHB70:
 6617 002a E8000000 		call	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev@PLT
 6617      00
 6618              	.LEHE70:
 6619              		.loc 16 12 0 is_stmt 0 discriminator 1
 6620 002f 488B45E8 		movq	-24(%rbp), %rax
 6621 0033 4889C7   		movq	%rax, %rdi
 6622              	.LEHB71:
 6623 0036 E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 6623      00
 6624              	.LEHE71:
 6625              	.LBE64:
 6626 003b B8000000 		movl	$0, %eax
 6626      00
 6627 0040 85C0     		testl	%eax, %eax
 6628 0042 7428     		je	.L378
 6629 0044 488B45E8 		movq	-24(%rbp), %rax
 6630 0048 4889C7   		movq	%rax, %rdi
 6631 004b E8000000 		call	_ZdlPv@PLT
 6631      00
 6632 0050 EB1A     		jmp	.L378
 6633              	.L377:
 6634 0052 4889C3   		movq	%rax, %rbx
 6635              	.LBB65:
 6636              		.loc 16 12 0
 6637 0055 488B45E8 		movq	-24(%rbp), %rax
 6638 0059 4889C7   		movq	%rax, %rdi
 6639 005c E8000000 		call	_ZN8UnitTest12TestReporterD2Ev@PLT
 6639      00
 6640 0061 4889D8   		movq	%rbx, %rax
 6641 0064 4889C7   		movq	%rax, %rdi
 6642              	.LEHB72:
 6643 0067 E8000000 		call	_Unwind_Resume@PLT
 6643      00
 6644              	.LEHE72:
 6645              	.L378:
 6646              	.LBE65:
 6647 006c 4883C418 		addq	$24, %rsp
 6648 0070 5B       		popq	%rbx
 6649 0071 5D       		popq	%rbp
 6650              		.cfi_def_cfa 7, 8
 6651 0072 C3       		ret
 6652              		.cfi_endproc
 6653              	.LFE1028:
 6654              		.section	.gcc_except_table
 6655              	.LLSDA1028:
 6656 01a8 FF       		.byte	0xff
 6657 01a9 FF       		.byte	0xff
 6658 01aa 01       		.byte	0x1
 6659 01ab 0C       		.uleb128 .LLSDACSE1028-.LLSDACSB1028
 6660              	.LLSDACSB1028:
 6661 01ac 2A       		.uleb128 .LEHB70-.LFB1028
 6662 01ad 05       		.uleb128 .LEHE70-.LEHB70
 6663 01ae 52       		.uleb128 .L377-.LFB1028
 6664 01af 00       		.uleb128 0
 6665 01b0 36       		.uleb128 .LEHB71-.LFB1028
 6666 01b1 05       		.uleb128 .LEHE71-.LEHB71
 6667 01b2 00       		.uleb128 0
 6668 01b3 00       		.uleb128 0
 6669 01b4 67       		.uleb128 .LEHB72-.LFB1028
 6670 01b5 05       		.uleb128 .LEHE72-.LEHB72
 6671 01b6 00       		.uleb128 0
 6672 01b7 00       		.uleb128 0
 6673              	.LLSDACSE1028:
 6674              		.section	.text._ZN8UnitTest20DeferredTestReporterD2Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 6676              		.weak	_ZN8UnitTest20DeferredTestReporterD1Ev
 6677              		.set	_ZN8UnitTest20DeferredTestReporterD1Ev,_ZN8UnitTest20DeferredTestReporterD2Ev
 6678              		.section	.text._ZN8UnitTest20DeferredTestReporterD0Ev,"axG",@progbits,_ZN8UnitTest20DeferredTestRe
 6679              		.align 2
 6680              		.weak	_ZN8UnitTest20DeferredTestReporterD0Ev
 6682              	_ZN8UnitTest20DeferredTestReporterD0Ev:
 6683              	.LFB1030:
 6684              		.loc 16 12 0 is_stmt 1
 6685              		.cfi_startproc
 6686 0000 55       		pushq	%rbp
 6687              		.cfi_def_cfa_offset 16
 6688              		.cfi_offset 6, -16
 6689 0001 4889E5   		movq	%rsp, %rbp
 6690              		.cfi_def_cfa_register 6
 6691 0004 4883EC10 		subq	$16, %rsp
 6692 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6693              		.loc 16 12 0
 6694 000c 488B45F8 		movq	-8(%rbp), %rax
 6695 0010 4889C7   		movq	%rax, %rdi
 6696 0013 E8000000 		call	_ZN8UnitTest20DeferredTestReporterD1Ev@PLT
 6696      00
 6697 0018 488B45F8 		movq	-8(%rbp), %rax
 6698 001c 4889C7   		movq	%rax, %rdi
 6699 001f E8000000 		call	_ZdlPv@PLT
 6699      00
 6700 0024 C9       		leave
 6701              		.cfi_def_cfa 7, 8
 6702 0025 C3       		ret
 6703              		.cfi_endproc
 6704              	.LFE1030:
 6706              		.weak	_ZTIN8UnitTest20DeferredTestReporterE
 6707              		.section	.data.rel.ro._ZTIN8UnitTest20DeferredTestReporterE,"awG",@progbits,_ZTIN8UnitTest20Deferr
 6708              		.align 16
 6711              	_ZTIN8UnitTest20DeferredTestReporterE:
 6712 0000 00000000 		.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 6712      00000000 
 6713 0008 00000000 		.quad	_ZTSN8UnitTest20DeferredTestReporterE
 6713      00000000 
 6714 0010 00000000 		.quad	_ZTIN8UnitTest12TestReporterE
 6714      00000000 
 6715              		.weak	_ZTSN8UnitTest20DeferredTestReporterE
 6716              		.section	.rodata._ZTSN8UnitTest20DeferredTestReporterE,"aG",@progbits,_ZTSN8UnitTest20DeferredTest
 6717              		.align 32
 6720              	_ZTSN8UnitTest20DeferredTestReporterE:
 6721 0000 4E38556E 		.string	"N8UnitTest20DeferredTestReporterE"
 6721      69745465 
 6721      73743230 
 6721      44656665 
 6721      72726564 
 6722              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 6723              		.align 2
 6724              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 6726              	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 6727              	.LFB1032:
 414:/usr/include/c++/4.8/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 6728              		.loc 5 414 0
 6729              		.cfi_startproc
 6730              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6731              		.cfi_lsda 0x1b,.LLSDA1032
 6732 0000 55       		pushq	%rbp
 6733              		.cfi_def_cfa_offset 16
 6734              		.cfi_offset 6, -16
 6735 0001 4889E5   		movq	%rsp, %rbp
 6736              		.cfi_def_cfa_register 6
 6737 0004 53       		pushq	%rbx
 6738 0005 4883EC18 		subq	$24, %rsp
 6739              		.cfi_offset 3, -24
 6740 0009 48897DE8 		movq	%rdi, -24(%rbp)
 6741              	.LBB66:
 416:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6742              		.loc 5 416 0
 6743 000d 488B45E8 		movq	-24(%rbp), %rax
 6744 0011 4889C7   		movq	%rax, %rdi
 6745 0014 E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv@PLT
 6745      00
 6746 0019 4889C2   		movq	%rax, %rdx
 6747 001c 488B45E8 		movq	-24(%rbp), %rax
 6748 0020 488B4808 		movq	8(%rax), %rcx
 6749 0024 488B45E8 		movq	-24(%rbp), %rax
 6750 0028 488B00   		movq	(%rax), %rax
 415:/usr/include/c++/4.8/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 6751              		.loc 5 415 0
 6752 002b 4889CE   		movq	%rcx, %rsi
 6753 002e 4889C7   		movq	%rax, %rdi
 6754              	.LEHB73:
 6755 0031 E8000000 		call	_ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E@PLT
 6755      00
 6756              	.LEHE73:
 416:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6757              		.loc 5 416 0
 6758 0036 488B45E8 		movq	-24(%rbp), %rax
 6759 003a 4889C7   		movq	%rax, %rdi
 6760              	.LEHB74:
 6761 003d E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 6761      00
 6762              	.LEHE74:
 6763 0042 EB1A     		jmp	.L385
 6764              	.L384:
 6765 0044 4889C3   		movq	%rax, %rbx
 6766 0047 488B45E8 		movq	-24(%rbp), %rax
 6767 004b 4889C7   		movq	%rax, %rdi
 6768 004e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev@PLT
 6768      00
 6769 0053 4889D8   		movq	%rbx, %rax
 6770 0056 4889C7   		movq	%rax, %rdi
 6771              	.LEHB75:
 6772 0059 E8000000 		call	_Unwind_Resume@PLT
 6772      00
 6773              	.LEHE75:
 6774              	.L385:
 6775              	.LBE66:
 6776 005e 4883C418 		addq	$24, %rsp
 6777 0062 5B       		popq	%rbx
 6778 0063 5D       		popq	%rbp
 6779              		.cfi_def_cfa 7, 8
 6780 0064 C3       		ret
 6781              		.cfi_endproc
 6782              	.LFE1032:
 6783              		.section	.gcc_except_table
 6784              	.LLSDA1032:
 6785 01b8 FF       		.byte	0xff
 6786 01b9 FF       		.byte	0xff
 6787 01ba 01       		.byte	0x1
 6788 01bb 0C       		.uleb128 .LLSDACSE1032-.LLSDACSB1032
 6789              	.LLSDACSB1032:
 6790 01bc 31       		.uleb128 .LEHB73-.LFB1032
 6791 01bd 05       		.uleb128 .LEHE73-.LEHB73
 6792 01be 44       		.uleb128 .L384-.LFB1032
 6793 01bf 00       		.uleb128 0
 6794 01c0 3D       		.uleb128 .LEHB74-.LFB1032
 6795 01c1 05       		.uleb128 .LEHE74-.LEHB74
 6796 01c2 00       		.uleb128 0
 6797 01c3 00       		.uleb128 0
 6798 01c4 59       		.uleb128 .LEHB75-.LFB1032
 6799 01c5 05       		.uleb128 .LEHE75-.LEHB75
 6800 01c6 00       		.uleb128 0
 6801 01c7 00       		.uleb128 0
 6802              	.LLSDACSE1032:
 6803              		.section	.text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZNSt6vect
 6805              		.weak	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 6806              		.set	_ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt6vectorIN8UnitTest18DeferredTes
 6807              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev,"axG"
 6808              		.align 2
 6809              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
 6811              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:
 6812              	.LFB1036:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 6813              		.loc 5 79 0
 6814              		.cfi_startproc
 6815 0000 55       		pushq	%rbp
 6816              		.cfi_def_cfa_offset 16
 6817              		.cfi_offset 6, -16
 6818 0001 4889E5   		movq	%rsp, %rbp
 6819              		.cfi_def_cfa_register 6
 6820 0004 4883EC10 		subq	$16, %rsp
 6821 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6822              	.LBB67:
  79:/usr/include/c++/4.8/bits/stl_vector.h ****       : public _Tp_alloc_type
 6823              		.loc 5 79 0
 6824 000c 488B45F8 		movq	-8(%rbp), %rax
 6825 0010 4889C7   		movq	%rax, %rdi
 6826 0013 E8000000 		call	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev@PLT
 6826      00
 6827              	.LBE67:
 6828 0018 C9       		leave
 6829              		.cfi_def_cfa 7, 8
 6830 0019 C3       		ret
 6831              		.cfi_endproc
 6832              	.LFE1036:
 6834              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
 6835              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev,_ZNSt12_Vector_
 6836              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 6837              		.align 2
 6838              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
 6840              	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:
 6841              	.LFB1038:
 159:/usr/include/c++/4.8/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 6842              		.loc 5 159 0
 6843              		.cfi_startproc
 6844              		.cfi_personality 0x9b,DW.ref.__gxx_personality_v0
 6845              		.cfi_lsda 0x1b,.LLSDA1038
 6846 0000 55       		pushq	%rbp
 6847              		.cfi_def_cfa_offset 16
 6848              		.cfi_offset 6, -16
 6849 0001 4889E5   		movq	%rsp, %rbp
 6850              		.cfi_def_cfa_register 6
 6851 0004 53       		pushq	%rbx
 6852 0005 4883EC18 		subq	$24, %rsp
 6853              		.cfi_offset 3, -24
 6854 0009 48897DE8 		movq	%rdi, -24(%rbp)
 6855              	.LBB68:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6856              		.loc 5 161 0
 6857 000d 488B45E8 		movq	-24(%rbp), %rax
 6858 0011 488B4010 		movq	16(%rax), %rax
 6859 0015 4889C2   		movq	%rax, %rdx
 6860 0018 488B45E8 		movq	-24(%rbp), %rax
 6861 001c 488B00   		movq	(%rax), %rax
 6862 001f 4829C2   		subq	%rax, %rdx
 6863 0022 4889D0   		movq	%rdx, %rax
 6864 0025 48C1F803 		sarq	$3, %rax
 6865 0029 4889C2   		movq	%rax, %rdx
 6866 002c 48B8B76D 		movabsq	$7905747460161236407, %rax
 6866      DBB66DDB 
 6866      B66D
 6867 0036 480FAFC2 		imulq	%rdx, %rax
 6868 003a 4889C2   		movq	%rax, %rdx
 6869 003d 488B45E8 		movq	-24(%rbp), %rax
 6870 0041 488B08   		movq	(%rax), %rcx
 160:/usr/include/c++/4.8/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 6871              		.loc 5 160 0
 6872 0044 488B45E8 		movq	-24(%rbp), %rax
 6873 0048 4889CE   		movq	%rcx, %rsi
 6874 004b 4889C7   		movq	%rax, %rdi
 6875              	.LEHB76:
 6876 004e E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m@PLT
 6876      00
 6877              	.LEHE76:
 161:/usr/include/c++/4.8/bits/stl_vector.h **** 
 6878              		.loc 5 161 0
 6879 0053 488B45E8 		movq	-24(%rbp), %rax
 6880 0057 4889C7   		movq	%rax, %rdi
 6881 005a E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 6881      00
 6882 005f EB1A     		jmp	.L392
 6883              	.L391:
 6884 0061 4889C3   		movq	%rax, %rbx
 6885 0064 488B45E8 		movq	-24(%rbp), %rax
 6886 0068 4889C7   		movq	%rax, %rdi
 6887 006b E8000000 		call	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev@PLT
 6887      00
 6888 0070 4889D8   		movq	%rbx, %rax
 6889 0073 4889C7   		movq	%rax, %rdi
 6890              	.LEHB77:
 6891 0076 E8000000 		call	_Unwind_Resume@PLT
 6891      00
 6892              	.LEHE77:
 6893              	.L392:
 6894              	.LBE68:
 6895 007b 4883C418 		addq	$24, %rsp
 6896 007f 5B       		popq	%rbx
 6897 0080 5D       		popq	%rbp
 6898              		.cfi_def_cfa 7, 8
 6899 0081 C3       		ret
 6900              		.cfi_endproc
 6901              	.LFE1038:
 6902              		.section	.gcc_except_table
 6903              	.LLSDA1038:
 6904 01c8 FF       		.byte	0xff
 6905 01c9 FF       		.byte	0xff
 6906 01ca 01       		.byte	0x1
 6907 01cb 08       		.uleb128 .LLSDACSE1038-.LLSDACSB1038
 6908              	.LLSDACSB1038:
 6909 01cc 4E       		.uleb128 .LEHB76-.LFB1038
 6910 01cd 05       		.uleb128 .LEHE76-.LEHB76
 6911 01ce 61       		.uleb128 .L391-.LFB1038
 6912 01cf 00       		.uleb128 0
 6913 01d0 76       		.uleb128 .LEHB77-.LFB1038
 6914 01d1 05       		.uleb128 .LEHE77-.LEHB77
 6915 01d2 00       		.uleb128 0
 6916 01d3 00       		.uleb128 0
 6917              	.LLSDACSE1038:
 6918              		.section	.text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev,"axG",@progbits,_ZN
 6920              		.weak	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
 6921              		.set	_ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev,_ZNSt12_Vector_baseIN8UnitTes
 6922              		.section	.text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_ZNSaIN8UnitTest18Deferr
 6923              		.align 2
 6924              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 6926              	_ZNSaIN8UnitTest18DeferredTestResultEED2Ev:
 6927              	.LFB1041:
 6928              		.loc 10 121 0
 6929              		.cfi_startproc
 6930 0000 55       		pushq	%rbp
 6931              		.cfi_def_cfa_offset 16
 6932              		.cfi_offset 6, -16
 6933 0001 4889E5   		movq	%rsp, %rbp
 6934              		.cfi_def_cfa_register 6
 6935 0004 4883EC10 		subq	$16, %rsp
 6936 0008 48897DF8 		movq	%rdi, -8(%rbp)
 6937              	.LBB69:
 6938              		.loc 10 121 0
 6939 000c 488B45F8 		movq	-8(%rbp), %rax
 6940 0010 4889C7   		movq	%rax, %rdi
 6941 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev@PLT
 6941      00
 6942              	.LBE69:
 6943 0018 C9       		leave
 6944              		.cfi_def_cfa 7, 8
 6945 0019 C3       		ret
 6946              		.cfi_endproc
 6947              	.LFE1041:
 6949              		.weak	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev
 6950              		.set	_ZNSaIN8UnitTest18DeferredTestResultEED1Ev,_ZNSaIN8UnitTest18DeferredTestResultEED2Ev
 6951              		.section	.text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev,"axG",@progbits,_
 6952              		.align 2
 6953              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
 6955              	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:
 6956              	.LFB1044:
  86:/usr/include/c++/4.8/ext/new_allocator.h **** 
 6957              		.loc 11 86 0
 6958              		.cfi_startproc
 6959 0000 55       		pushq	%rbp
 6960              		.cfi_def_cfa_offset 16
 6961              		.cfi_offset 6, -16
 6962 0001 4889E5   		movq	%rsp, %rbp
 6963              		.cfi_def_cfa_register 6
 6964 0004 48897DF8 		movq	%rdi, -8(%rbp)
  86:/usr/include/c++/4.8/ext/new_allocator.h **** 
 6965              		.loc 11 86 0
 6966 0008 5D       		popq	%rbp
 6967              		.cfi_def_cfa 7, 8
 6968 0009 C3       		ret
 6969              		.cfi_endproc
 6970              	.LFE1044:
 6972              		.weak	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
 6973              		.set	_ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev,_ZN9__gnu_cxx13new_allocato
 6974              		.section	.data.rel.ro.local,"aw",@progbits
 6975              		.align 8
 6978              	_ZZL18__gthread_active_pvE20__gthread_active_ptr:
 6979 0000 00000000 		.quad	_ZL28__gthrw___pthread_key_createPjPFvPvE
 6979      00000000 
 6980              		.weakref	_ZL28__gthrw___pthread_key_createPjPFvPvE,__pthread_key_create
 6981              		.text
 6982              	.Letext0:
 6983              		.file 17 "/usr/include/c++/4.8/bits/cpp_type_traits.h"
 6984              		.file 18 "/usr/include/c++/4.8/cwchar"
 6985              		.file 19 "/usr/include/c++/4.8/bits/char_traits.h"
 6986              		.file 20 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/c++config.h"
 6987              		.file 21 "/usr/include/c++/4.8/clocale"
 6988              		.file 22 "/usr/include/c++/4.8/bits/basic_string.h"
 6989              		.file 23 "/usr/include/c++/4.8/bits/basic_string.tcc"
 6990              		.file 24 "/usr/include/c++/4.8/bits/stringfwd.h"
 6991              		.file 25 "/usr/include/c++/4.8/ext/numeric_traits.h"
 6992              		.file 26 "/usr/include/c++/4.8/debug/debug.h"
 6993              		.file 27 "/usr/include/stdio.h"
 6994              		.file 28 "<built-in>"
 6995              		.file 29 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 6996              		.file 30 "/usr/include/wchar.h"
 6997              		.file 31 "/usr/include/time.h"
 6998              		.file 32 "/usr/include/locale.h"
 6999              		.file 33 "/usr/include/x86_64-linux-gnu/c++/4.8/bits/atomic_word.h"
 7000              		.file 34 "TestReporter.h"
 7001              		.file 35 "TestDetails.h"
 25670              		.align 8
 25673              	DW.ref.__gxx_personality_v0:
 25674 0000 00000000 		.quad	__gxx_personality_v0
 25674      00000000 
 25675              		.ident	"GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4"
 25676              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 DeferredTestReporter.cpp
     /tmp/ccDoPSPu.s:7      .text._ZnwmPv:0000000000000000 _ZnwmPv
     /tmp/ccDoPSPu.s:30     .text._ZdlPvS_:0000000000000000 _ZdlPvS_
     /tmp/ccDoPSPu.s:52     .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD2Ev
     /tmp/ccDoPSPu.s:25673  .data.DW.ref.__gxx_personality_v0:0000000000000000 DW.ref.__gxx_personality_v0
     /tmp/ccDoPSPu.s:520    .text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED1Ev
     /tmp/ccDoPSPu.s:52     .text._ZN8UnitTest18DeferredTestResultD2Ev:0000000000000000 _ZN8UnitTest18DeferredTestResultD1Ev
     /tmp/ccDoPSPu.s:170    .text:0000000000000000 _ZN8UnitTest20DeferredTestReporter15ReportTestStartERKNS_11TestDetailsE
     /tmp/ccDoPSPu.s:606    .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE9push_backERKS1_
     /tmp/ccDoPSPu.s:263    .text._ZNSt4pairIiSsED2Ev:0000000000000000 _ZNSt4pairIiSsED2Ev
     /tmp/ccDoPSPu.s:263    .text._ZNSt4pairIiSsED2Ev:0000000000000000 _ZNSt4pairIiSsED1Ev
     /tmp/ccDoPSPu.s:294    .text:0000000000000076 _ZN8UnitTest20DeferredTestReporter13ReportFailureERKNS_11TestDetailsEPKc
     /tmp/ccDoPSPu.s:664    .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4backEv
     /tmp/ccDoPSPu.s:700    .text._ZNSt4pairIiSsEC2ERKiRKSs:0000000000000000 _ZNSt4pairIiSsEC1ERKiRKSs
     /tmp/ccDoPSPu.s:738    .text._ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE9push_backERKS1_
     /tmp/ccDoPSPu.s:461    .text:0000000000000180 _ZN8UnitTest20DeferredTestReporter16ReportTestFinishERKNS_11TestDetailsEf
     /tmp/ccDoPSPu.s:496    .text:00000000000001b6 _ZN8UnitTest20DeferredTestReporter10GetResultsEv
     /tmp/ccDoPSPu.s:520    .text._ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED2Ev
     /tmp/ccDoPSPu.s:908    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccDoPSPu.s:929    .text._ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPSt4pairIiSsES1_EvT_S3_RSaIT0_E
     /tmp/ccDoPSPu.s:825    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev
     /tmp/ccDoPSPu.s:959    .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RKT_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE9constructIS2_EEvRS3_PS2_RKT_
     /tmp/ccDoPSPu.s:1552   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE3endEv
     /tmp/ccDoPSPu.s:1187   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
     /tmp/ccDoPSPu.s:1581   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiERKl:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEmiERKl
     /tmp/ccDoPSPu.s:1622   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccDoPSPu.s:700    .text._ZNSt4pairIiSsEC2ERKiRKSs:0000000000000000 _ZNSt4pairIiSsEC2ERKiRKSs
     /tmp/ccDoPSPu.s:1644   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE9constructIS2_EEvRS3_PS2_RKT_
     /tmp/ccDoPSPu.s:2105   .text._ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE3endEv
     /tmp/ccDoPSPu.s:1747   .text._ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE13_M_insert_auxEN9__gnu_cxx17__normal_iteratorIPS1_S3_EERKS1_
     /tmp/ccDoPSPu.s:796    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev
     /tmp/ccDoPSPu.s:2134   .text._ZNSaISt4pairIiSsEED2Ev:0000000000000000 _ZNSaISt4pairIiSsEED2Ev
     /tmp/ccDoPSPu.s:796    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD1Ev
     /tmp/ccDoPSPu.s:2164   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccDoPSPu.s:825    .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED1Ev
     /tmp/ccDoPSPu.s:2198   .text._ZSt8_DestroyIPSt4pairIiSsEEvT_S3_:0000000000000000 _ZSt8_DestroyIPSt4pairIiSsEEvT_S3_
     /tmp/ccDoPSPu.s:2229   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE9constructEPS2_RKS2_
     /tmp/ccDoPSPu.s:990    .text._ZN8UnitTest18DeferredTestResultC2ERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultC2ERKS0_
     /tmp/ccDoPSPu.s:2313   .text._ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EEC1ERKS3_
     /tmp/ccDoPSPu.s:990    .text._ZN8UnitTest18DeferredTestResultC2ERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultC1ERKS0_
     /tmp/ccDoPSPu.s:1126   .text._ZN8UnitTest18DeferredTestResultaSERKS0_:0000000000000000 _ZN8UnitTest18DeferredTestResultaSERKS0_
     /tmp/ccDoPSPu.s:2491   .text._ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EEaSERKS3_
     /tmp/ccDoPSPu.s:2429   .text._ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccDoPSPu.s:2450   .text._ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:0000000000000000 _ZSt13copy_backwardIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
     /tmp/ccDoPSPu.s:2707   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE12_M_check_lenEmPKc
     /tmp/ccDoPSPu.s:2796   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE5beginEv
     /tmp/ccDoPSPu.s:2823   .text._ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_:0000000000000000 _ZN9__gnu_cxxmiIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_
     /tmp/ccDoPSPu.s:2865   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE11_M_allocateEm
     /tmp/ccDoPSPu.s:2903   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccDoPSPu.s:2924   .text._ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_:0000000000000000 _ZSt34__uninitialized_move_if_noexcept_aIPN8UnitTest18DeferredTestResultES2_SaIS1_EET0_T_S5_S4_RT1_
     /tmp/ccDoPSPu.s:2983   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultES1_EvT_S3_RSaIT0_E
     /tmp/ccDoPSPu.s:3013   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE13_M_deallocateEPS1_m
     /tmp/ccDoPSPu.s:2956   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE7destroyERS3_PS2_
     /tmp/ccDoPSPu.s:3048   .text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC1ERKS3_
     /tmp/ccDoPSPu.s:3078   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE9constructEPS2_RKS2_
     /tmp/ccDoPSPu.s:1674   .text._ZNSt4pairIiSsEC2ERKS0_:0000000000000000 _ZNSt4pairIiSsEC2ERKS0_
     /tmp/ccDoPSPu.s:1674   .text._ZNSt4pairIiSsEC2ERKS0_:0000000000000000 _ZNSt4pairIiSsEC1ERKS0_
     /tmp/ccDoPSPu.s:1712   .text._ZNSt4pairIiSsEaSERKS0_:0000000000000000 _ZNSt4pairIiSsEaSERKS0_
     /tmp/ccDoPSPu.s:3161   .text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccDoPSPu.s:3182   .text._ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_:0000000000000000 _ZSt13copy_backwardIPSt4pairIiSsES2_ET0_T_S4_S3_
     /tmp/ccDoPSPu.s:3222   .text._ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccDoPSPu.s:3245   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE12_M_check_lenEmPKc
     /tmp/ccDoPSPu.s:3334   .text._ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE5beginEv
     /tmp/ccDoPSPu.s:3361   .text._ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_:0000000000000000 _ZN9__gnu_cxxmiIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_
     /tmp/ccDoPSPu.s:3400   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE11_M_allocateEm
     /tmp/ccDoPSPu.s:3437   .text._ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_:0000000000000000 _ZSt34__uninitialized_move_if_noexcept_aIPSt4pairIiSsES2_SaIS1_EET0_T_S5_S4_RT1_
     /tmp/ccDoPSPu.s:3468   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE7destroyERS3_PS2_
     /tmp/ccDoPSPu.s:3496   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS3_
     /tmp/ccDoPSPu.s:3526   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev
     /tmp/ccDoPSPu.s:2134   .text._ZNSaISt4pairIiSsEED2Ev:0000000000000000 _ZNSaISt4pairIiSsEED1Ev
     /tmp/ccDoPSPu.s:3549   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE10deallocateEPS2_m
     /tmp/ccDoPSPu.s:3575   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPSt4pairIiSsEEEvT_S5_
     /tmp/ccDoPSPu.s:2313   .text._ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EEC2ERKS3_
     /tmp/ccDoPSPu.s:3664   .text._ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNKSt12_Vector_baseISt4pairIiSsESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccDoPSPu.s:3642   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE17_S_select_on_copyERKS3_
     /tmp/ccDoPSPu.s:3614   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE4sizeEv
     /tmp/ccDoPSPu.s:3686   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_
     /tmp/ccDoPSPu.s:3803   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE3endEv
     /tmp/ccDoPSPu.s:3772   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE5beginEv
     /tmp/ccDoPSPu.s:3833   .text._ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_S3_ET0_T_SC_SB_RSaIT1_E
     /tmp/ccDoPSPu.s:3863   .text._ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_:0000000000000000 _ZSt12__miter_baseIPN8UnitTest18DeferredTestResultEENSt11_Miter_baseIT_E13iterator_typeES4_
     /tmp/ccDoPSPu.s:3887   .text._ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_:0000000000000000 _ZSt23__copy_move_backward_a2ILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_
     /tmp/ccDoPSPu.s:3934   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE8capacityEv
     /tmp/ccDoPSPu.s:3963   .text._ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKS1_S3_EEEEPS1_mT_SB_
     /tmp/ccDoPSPu.s:4078   .text._ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_:0000000000000000 _ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET0_T_SD_SC_
     /tmp/ccDoPSPu.s:4117   .text._ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E:0000000000000000 _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEES3_EvT_S9_RSaIT0_E
     /tmp/ccDoPSPu.s:4146   .text._ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_:0000000000000000 _ZSt4copyIPSt4pairIiSsES2_ET0_T_S4_S3_
     /tmp/ccDoPSPu.s:4185   .text._ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIPSt4pairIiSsES2_S1_ET0_T_S4_S3_RSaIT1_E
     /tmp/ccDoPSPu.s:4248   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE8max_sizeEv
     /tmp/ccDoPSPu.s:4216   .text._ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv:0000000000000000 _ZNKSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EE4sizeEv
     /tmp/ccDoPSPu.s:4274   .text._ZSt3maxImERKT_S2_S2_:0000000000000000 _ZSt3maxImERKT_S2_S2_
     /tmp/ccDoPSPu.s:4310   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8allocateEmPKv
     /tmp/ccDoPSPu.s:4352   .text._ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E:0000000000000000 _ZSt22__uninitialized_copy_aIPN8UnitTest18DeferredTestResultES2_S1_ET0_T_S4_S3_RSaIT1_E
     /tmp/ccDoPSPu.s:4383   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE7destroyEPS2_
     /tmp/ccDoPSPu.s:4408   .text._ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_:0000000000000000 _ZSt8_DestroyIPN8UnitTest18DeferredTestResultEEvT_S3_
     /tmp/ccDoPSPu.s:4439   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE10deallocateEPS2_m
     /tmp/ccDoPSPu.s:3048   .text._ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC2ERKS3_
     /tmp/ccDoPSPu.s:4465   .text._ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_:0000000000000000 _ZSt12__miter_baseIPSt4pairIiSsEENSt11_Miter_baseIT_E13iterator_typeES4_
     /tmp/ccDoPSPu.s:4489   .text._ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:0000000000000000 _ZSt23__copy_move_backward_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
     /tmp/ccDoPSPu.s:4536   .text._ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv:0000000000000000 _ZNKSt6vectorISt4pairIiSsESaIS1_EE8max_sizeEv
     /tmp/ccDoPSPu.s:4563   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE8allocateEmPKv
     /tmp/ccDoPSPu.s:4603   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEE7destroyEPS2_
     /tmp/ccDoPSPu.s:3496   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS3_
     /tmp/ccDoPSPu.s:3526   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED1Ev
     /tmp/ccDoPSPu.s:4628   .text._ZSt11__addressofISt4pairIiSsEEPT_RS2_:0000000000000000 _ZSt11__addressofISt4pairIiSsEEPT_RS2_
     /tmp/ccDoPSPu.s:4651   .text._ZSt8_DestroyISt4pairIiSsEEvPT_:0000000000000000 _ZSt8_DestroyISt4pairIiSsEEvPT_
     /tmp/ccDoPSPu.s:4676   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC1ERKS2_
     /tmp/ccDoPSPu.s:4715   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE17_M_create_storageEm
     /tmp/ccDoPSPu.s:3686   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC2EmRKS2_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC1EmRKS2_
     /tmp/ccDoPSPu.s:4759   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC1ERKS4_
     /tmp/ccDoPSPu.s:4788   .text._ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_:0000000000000000 _ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEPS3_ET0_T_SC_SB_
     /tmp/ccDoPSPu.s:4820   .text._ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_:0000000000000000 _ZNSt10_Iter_baseIPN8UnitTest18DeferredTestResultELb0EE7_S_baseES2_
     /tmp/ccDoPSPu.s:4842   .text._ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_:0000000000000000 _ZSt12__niter_baseIPN8UnitTest18DeferredTestResultEENSt11_Niter_baseIT_E13iterator_typeES4_
     /tmp/ccDoPSPu.s:4866   .text._ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_:0000000000000000 _ZSt22__copy_move_backward_aILb0EPN8UnitTest18DeferredTestResultES2_ET1_T0_S4_S3_
     /tmp/ccDoPSPu.s:4900   .text._ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Miter_baseIT_E13iterator_typeESB_:0000000000000000 _ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Miter_baseIT_E13iterator_typeESB_
     /tmp/ccDoPSPu.s:4924   .text._ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_:0000000000000000 _ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEENS1_IPS3_S8_EEET1_T0_SD_SC_
     /tmp/ccDoPSPu.s:4977   .text._ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_:0000000000000000 _ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEEvT_S9_
     /tmp/ccDoPSPu.s:5007   .text._ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:0000000000000000 _ZSt14__copy_move_a2ILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
     /tmp/ccDoPSPu.s:5053   .text._ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_:0000000000000000 _ZSt18uninitialized_copyIPSt4pairIiSsES2_ET0_T_S4_S3_
     /tmp/ccDoPSPu.s:5110   .text._ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNKSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE19_M_get_Tp_allocatorEv
     /tmp/ccDoPSPu.s:5085   .text._ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaIN8UnitTest18DeferredTestResultEEE8max_sizeERKS3_
     /tmp/ccDoPSPu.s:5132   .text._ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEE8max_sizeEv
     /tmp/ccDoPSPu.s:5153   .text._ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_:0000000000000000 _ZSt18uninitialized_copyIPN8UnitTest18DeferredTestResultES2_ET0_T_S4_S3_
     /tmp/ccDoPSPu.s:5185   .text._ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIPN8UnitTest18DeferredTestResultEEEvT_S5_
     /tmp/ccDoPSPu.s:5223   .text._ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_:0000000000000000 _ZNSt10_Iter_baseIPSt4pairIiSsELb0EE7_S_baseES2_
     /tmp/ccDoPSPu.s:5244   .text._ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_:0000000000000000 _ZSt12__niter_baseIPSt4pairIiSsEENSt11_Niter_baseIT_E13iterator_typeES4_
     /tmp/ccDoPSPu.s:5268   .text._ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:0000000000000000 _ZSt22__copy_move_backward_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
     /tmp/ccDoPSPu.s:5302   .text._ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_:0000000000000000 _ZN9__gnu_cxx14__alloc_traitsISaISt4pairIiSsEEE8max_sizeERKS3_
     /tmp/ccDoPSPu.s:5327   .text._ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv:0000000000000000 _ZNK9__gnu_cxx13new_allocatorISt4pairIiSsEE8max_sizeEv
     /tmp/ccDoPSPu.s:4676   .text._ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC2ERKS2_
     /tmp/ccDoPSPu.s:5349   .text._ZNSaISt4pairIiSsEEC2ERKS1_:0000000000000000 _ZNSaISt4pairIiSsEEC2ERKS1_
     /tmp/ccDoPSPu.s:4759   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC2ERKS4_
     /tmp/ccDoPSPu.s:5380   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS5_SaIS5_EEEEPS5_EET0_T_SE_SD_
     /tmp/ccDoPSPu.s:5501   .text._ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTest18DeferredTestResultES5_EET0_T_S7_S6_:0000000000000000 _ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPN8UnitTest18DeferredTestResultES5_EET0_T_S7_S6_
     /tmp/ccDoPSPu.s:5554   .text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7_S_baseES9_:0000000000000000 _ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb0EE7_S_baseES9_
     /tmp/ccDoPSPu.s:5599   .text._ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_baseIT_E13iterator_typeESA_:0000000000000000 _ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_baseIT_E13iterator_typeESA_
     /tmp/ccDoPSPu.s:5575   .text._ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_baseIT_E13iterator_typeESB_:0000000000000000 _ZSt12__niter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEEENSt11_Niter_baseIT_E13iterator_typeESB_
     /tmp/ccDoPSPu.s:5623   .text._ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_:0000000000000000 _ZSt13__copy_move_aILb0EPKSt4pairIiSsEPS1_ET1_T0_S6_S5_
     /tmp/ccDoPSPu.s:5657   .text._ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5_SaIS5_EEEEEEvT_SB_:0000000000000000 _ZNSt12_Destroy_auxILb0EE9__destroyIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS5_SaIS5_EEEEEEvT_SB_
     /tmp/ccDoPSPu.s:5703   .text._ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_:0000000000000000 _ZSt13__copy_move_aILb0EPSt4pairIiSsES2_ET1_T0_S4_S3_
     /tmp/ccDoPSPu.s:5737   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt4pairIiSsES4_EET0_T_S6_S5_
     /tmp/ccDoPSPu.s:5848   .text._ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_:0000000000000000 _ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPN8UnitTest18DeferredTestResultES4_EET0_T_S6_S5_
     /tmp/ccDoPSPu.s:5959   .text._ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_:0000000000000000 _ZSt11__addressofIN8UnitTest18DeferredTestResultEEPT_RS2_
     /tmp/ccDoPSPu.s:5981   .text._ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_:0000000000000000 _ZSt8_DestroyIN8UnitTest18DeferredTestResultEEvPT_
     /tmp/ccDoPSPu.s:6005   .text._ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIiSsES5_EET0_T_S7_S6_:0000000000000000 _ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt4pairIiSsES5_EET0_T_S7_S6_
     /tmp/ccDoPSPu.s:6056   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_
     /tmp/ccDoPSPu.s:5349   .text._ZNSaISt4pairIiSsEEC2ERKS1_:0000000000000000 _ZNSaISt4pairIiSsEEC1ERKS1_
     /tmp/ccDoPSPu.s:6145   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEdeEv
     /tmp/ccDoPSPu.s:6167   .text._ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_:0000000000000000 _ZSt10_ConstructISt4pairIiSsES1_EvPT_RKT0_
     /tmp/ccDoPSPu.s:6116   .text._ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccDoPSPu.s:6079   .text._ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_:0000000000000000 _ZN9__gnu_cxxneIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_
     /tmp/ccDoPSPu.s:6249   .text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseES9_:0000000000000000 _ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseES9_
     /tmp/ccDoPSPu.s:6274   .text._ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseES8_:0000000000000000 _ZNSt10_Iter_baseIN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS3_SaIS3_EEEELb1EE7_S_baseES8_
     /tmp/ccDoPSPu.s:6299   .text._ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T_S9_S8_:0000000000000000 _ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPKSt4pairIiSsEPS4_EET0_T_S9_S8_
     /tmp/ccDoPSPu.s:6390   .text._ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEppEv
     /tmp/ccDoPSPu.s:6353   .text._ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_:0000000000000000 _ZN9__gnu_cxxneIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_
     /tmp/ccDoPSPu.s:6418   .text._ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S7_S6_:0000000000000000 _ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPSt4pairIiSsES5_EET0_T_S7_S6_
     /tmp/ccDoPSPu.s:6472   .text._ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_:0000000000000000 _ZSt10_ConstructIN8UnitTest18DeferredTestResultES1_EvPT_RKT0_
     /tmp/ccDoPSPu.s:6056   .text._ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC2ERKS3_:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC1ERKS3_
     /tmp/ccDoPSPu.s:6555   .text._ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv:0000000000000000 _ZNK9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEE4baseEv
     /tmp/ccDoPSPu.s:6578   .data.rel.ro._ZTVN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTVN8UnitTest20DeferredTestReporterE
     /tmp/ccDoPSPu.s:6711   .data.rel.ro._ZTIN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTIN8UnitTest20DeferredTestReporterE
     /tmp/ccDoPSPu.s:6591   .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD1Ev
     /tmp/ccDoPSPu.s:6682   .text._ZN8UnitTest20DeferredTestReporterD0Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD0Ev
     /tmp/ccDoPSPu.s:6591   .text._ZN8UnitTest20DeferredTestReporterD2Ev:0000000000000000 _ZN8UnitTest20DeferredTestReporterD2Ev
     /tmp/ccDoPSPu.s:6726   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccDoPSPu.s:6720   .rodata._ZTSN8UnitTest20DeferredTestReporterE:0000000000000000 _ZTSN8UnitTest20DeferredTestReporterE
     /tmp/ccDoPSPu.s:6726   .text._ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccDoPSPu.s:6840   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev
     /tmp/ccDoPSPu.s:6811   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev
     /tmp/ccDoPSPu.s:6926   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccDoPSPu.s:6811   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD1Ev
     /tmp/ccDoPSPu.s:6840   .text._ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED2Ev:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED1Ev
     /tmp/ccDoPSPu.s:6955   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev
     /tmp/ccDoPSPu.s:6926   .text._ZNSaIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccDoPSPu.s:6955   .text._ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED1Ev
     /tmp/ccDoPSPu.s:6978   .data.rel.ro.local:0000000000000000 _ZZL18__gthread_active_pvE20__gthread_active_ptr
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultD5Ev
                           .group:0000000000000000 _ZNSt4pairIiSsED5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt4pairIiSsEC5ERKiRKSs
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EED5Ev
                           .group:0000000000000000 _ZN8UnitTest18DeferredTestResultC5ERKS0_
                           .group:0000000000000000 _ZNSt4pairIiSsEC5ERKS0_
                           .group:0000000000000000 _ZNSaISt4pairIiSsEED5Ev
                           .group:0000000000000000 _ZNSt6vectorISt4pairIiSsESaIS1_EEC5ERKS3_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPN8UnitTest18DeferredTestResultESt6vectorIS2_SaIS2_EEEC5ERKS3_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPSt4pairIiSsESt6vectorIS2_SaIS2_EEEC5ERKS3_
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EEC5EmRKS2_
                           .group:0000000000000000 _ZNSt12_Vector_baseISt4pairIiSsESaIS1_EE12_Vector_implC5ERKS2_
                           .group:0000000000000000 _ZN9__gnu_cxx17__normal_iteratorIPKSt4pairIiSsESt6vectorIS2_SaIS2_EEEC5ERKS4_
                           .group:0000000000000000 _ZNSaISt4pairIiSsEEC5ERKS1_
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorISt4pairIiSsEEC5ERKS3_
                           .group:0000000000000000 _ZN8UnitTest20DeferredTestReporterD5Ev
                           .group:0000000000000000 _ZNSt6vectorIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseIN8UnitTest18DeferredTestResultESaIS1_EED5Ev
                           .group:0000000000000000 _ZNSaIN8UnitTest18DeferredTestResultEED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorIN8UnitTest18DeferredTestResultEED5Ev

UNDEFINED SYMBOLS
_GLOBAL_OFFSET_TABLE_
_ZNSsD1Ev
_Unwind_Resume
__gxx_personality_v0
_ZN8UnitTest18DeferredTestResultC1EPKcS2_
_ZNSaIcEC1Ev
_ZNSsC1EPKcRKSaIcE
_ZNSaIcED1Ev
_ZNSsaSEPKc
_ZNSsC1ERKSs
_ZNSsaSERKSs
__cxa_end_catch
__cxa_begin_catch
__cxa_rethrow
_ZSt20__throw_length_errorPKc
_ZdlPv
_ZSt17__throw_bad_allocv
_Znwm
__cxa_pure_virtual
_ZN8UnitTest12TestReporterD2Ev
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN8UnitTest12TestReporterE
__pthread_key_create
