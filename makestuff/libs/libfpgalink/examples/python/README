CALLING FPGALINK FROM PYTHON

The examples below assume your device is a 1200K Digilent Nexys2. For other boards,
remove the "-d" option, replace "1443:0005" with whatever your board enumerates as
and choose an appropriate XSVF/CSVF file.

  FPGALink Python FLCLI Example Copyright (C) 2011-2014 Chris McClelland

  usage: flcli.py [-h] [-i <VID:PID>] -v <VID:PID> [-d <port+>] [-q <jtagPorts>]
                  [-p <config>] [-c <conduit>] [-f <dataFile>]

  Load FX2LP firmware, load the FPGA, interact with the FPGA.

  optional arguments:
    -h, --help      show this help message and exit
    -i <VID:PID>    vendor ID and product ID (e.g 04B4:8613)
    -v <VID:PID>    VID, PID and opt. dev ID (e.g 1D50:602B:0001)
    -d <port+>      read/write digital ports (e.g B13+,C1-,B2?)
    -q <jtagPorts>  query the JTAG chain
    -p <config>     program a device
    -c <conduit>    which comm conduit to choose (default 0x01)
    -f <dataFile>   binary data to write to channel 0


NONINTERACTIVE EXECUTION

Linux x64:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  LD_LIBRARY_PATH=../../lin.x64/rel ./flcli.py \
    -i 1443:0005 -v 1d50:602b:0002 -d D7+ -q D0D2D3D4 \
    -p J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf \
    -f /var/tmp/foo.dat

Linux x86:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  LD_LIBRARY_PATH=../../lin.x86/rel ./flcli.py \
    -i 1443:0005 -v 1d50:602b:0002 -d D7+ -q D0D2D3D4 \
    -p J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf \
    -f /var/tmp/foo.dat

Linux armel:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  LD_LIBRARY_PATH=../../lin.armel/rel ./flcli.py \
    -i 1443:0005 -v 1d50:602b:0002 -d D7+ -q D0D2D3D4 \
    -p J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf \
    -f /var/tmp/foo.dat

Linux armhf:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  LD_LIBRARY_PATH=../../lin.armhf/rel ./flcli.py \
    -i 1443:0005 -v 1d50:602b:0002 -d D7+ -q D0D2D3D4 \
    -p J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf \
    -f /var/tmp/foo.dat

Linux ppc:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  LD_LIBRARY_PATH=../../lin.ppc/rel ./flcli.py \
    -i 1443:0005 -v 1d50:602b:0002 -d D7+ -q D0D2D3D4 \
    -p J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf \
    -f /var/tmp/foo.dat

MacOSX:
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  DYLD_LIBRARY_PATH=../../osx/rel ./flcli.py \
    -i 1443:0005 -v 1d50:602b:0002 -d D7+ -q D0D2D3D4 \
    -p J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf \
    -f /var/tmp/foo.dat

Windows MSVC x64 (assuming you're running from http://bit.ly/makestuff):
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  PATH=../../msvc.x64/rel:$PATH ./flcli.py \
    -i 1443:0005 -v 1d50:602b:0002 -d D7+ -q D0D2D3D4 \
    -p J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf \
    -f /var/tmp/foo.dat

Windows MSVC x86 (assuming you're running from http://bit.ly/makestuff):
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  PATH=../../msvc.x86/rel:$PATH ./flcli.py \
    -i 1443:0005 -v 1d50:602b:0002 -d D7+ -q D0D2D3D4 \
    -p J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf \
    -f /var/tmp/foo.dat

Windows MinGW x86 (assuming you're running from http://bit.ly/makestuff):
  dd of=/var/tmp/foo.dat if=/dev/urandom bs=65536 count=160
  PATH=../../mingw.x86/rel:$PATH ./flcli.py \
    -i 1443:0005 -v 1d50:602b:0002 -d D7+ -q D0D2D3D4 \
    -p J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf \
    -f /var/tmp/foo.dat

This connects to the device at 1443:0005 (hopefully a 1200K Digilent Nexys2),
loads the onboard FX2LP chip with a new firmware, loads the cksum design into
the board's FPGA, and then does some register reads and writes. The changes to
the board are lost on the next power cycle, so it's safe to try.


INTERACTIVE EXECUTION

You can also use it in interactive mode (Linux x64):
  chris@linx64$ LD_LIBRARY_PATH=../../lin.x64/rel python
  Python 2.7.3 (default, Apr 10 2013, 06:20:15) 
  [GCC 4.6.3] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import fl
  >>> fl.flInitialise(0)
  >>> fl.flLoadStandardFirmware("1443:0005", "1D50:602B:0002")
  >>> handle = fl.flOpen("1D50:602B:0002")
  >>> bits = fl.flMultiBitPortAccess(handle, "D7+")
  >>> print("{:0{}b}".format(bits, 32))
  00000000000000000000000000000001
  >>> chain = fl.jtagScanChain(handle, "D0D2D3D4")
  >>> for id in chain:
  ...   print("0x{:08X}".format(id))
  ... 
  0x21C2E093
  0xF5046093
  >>> fl.flProgram(handle, "J:D0D2D3D4:../../../../hdlmake/apps/makestuff/swled/cksum/vhdl/fpga.xsvf")
  >>> fl.flSelectConduit(handle, 1)
  >>> bytes = [0xCA, 0xFE, 0xBA, 0xBE, 0xDE, 0xAD, 0xF0, 0x0D]
  >>> fl.flWriteChannel(handle, 0x00, bytearray(bytes))
  >>> hex((fl.flReadChannel(handle, 0x01) << 8) + fl.flReadChannel(handle, 0x02))
  '0x5c8'
  >>> hex(sum(bytes))
  '0x5c8'
  >>> fl.flClose(handle)
  >>> quit()
  chris@linx64$ 

And the same on Linux x86:
  chris@linx86$ LD_LIBRARY_PATH=../../lin.x86/rel python

And Linux armel:
  chris@linarmel$ LD_LIBRARY_PATH=../../lin.armel/rel python

And Linux armhf:
  chris@linarmhf$ LD_LIBRARY_PATH=../../lin.armhf/rel python

And Linux ppc:
  chris@linppc$ LD_LIBRARY_PATH=../../lin.ppc/rel python

And MacOS:
  chris@osx$ DYLD_LIBRARY_PATH=../../osx/rel python

And Windows MSVC x64 (assuming you're running from http://bit.ly/makestuff):
  chris@winx64$ PATH=../../msvc.x64/rel:$PATH python

And Windows MSVC x86 (assuming you're running from http://bit.ly/makestuff):
  chris@winx86$ PATH=../../msvc.x86/rel:$PATH python

And Windows MinGW x86 (assuming you're running from http://bit.ly/makestuff):
  chris@winx86$ PATH=../../mingw.x86/rel:$PATH python
