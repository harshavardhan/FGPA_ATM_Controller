   1              		.file	"main.c"
   2              		.text
   3              	.Ltext0:
   4              		.comm	dataFromCSV,1600080,32
   5              		.globl	numLines
   6              		.bss
   7              		.align 4
  10              	numLines:
  11 0000 00000000 		.zero	4
  12              		.local	ptr
  13              		.comm	ptr,8,8
  14              		.local	enableBenchmarking
  15              		.comm	enableBenchmarking,1,1
  16              		.text
  17              		.globl	decrypt
  19              	decrypt:
  20              	.LFB6:
  21              		.file 1 "main.c"
   1:main.c        **** /*
   2:main.c        ****    Original 64 bit -> | User 16-bit | Password 16-bit | 2k 8-bit | 1k 8-bit | 500 8-bit | 100 8-bit
   3:main.c        ****    (in VHDL before encryption)  8 7 6 5 4 3 2 1	
   4:main.c        **** */
   5:main.c        **** #define _GNU_SOURCE
   6:main.c        **** #include <stdint.h>
   7:main.c        **** #include <stdbool.h>
   8:main.c        **** #include <stdio.h>
   9:main.c        **** #include <stdlib.h>
  10:main.c        **** #include <string.h>
  11:main.c        **** #include <errno.h>
  12:main.c        **** #include <makestuff.h>
  13:main.c        **** #include <libfpgalink.h>
  14:main.c        **** #include <libbuffer.h>
  15:main.c        **** #include <liberror.h>
  16:main.c        **** #include <libdump.h>
  17:main.c        **** #include <argtable2.h>
  18:main.c        **** #include <readline/readline.h>
  19:main.c        **** #include <readline/history.h>
  20:main.c        **** #ifdef WIN32
  21:main.c        **** #include <Windows.h>
  22:main.c        **** #else
  23:main.c        **** #include <sys/time.h>
  24:main.c        **** #endif
  25:main.c        **** #define N 100005
  26:main.c        **** 
  27:main.c        **** int dataFromCSV[N][4];
  28:main.c        **** int numLines = 0;
  29:main.c        **** bool sigIsRaised(void);
  30:main.c        **** void sigRegisterHandler(void);
  31:main.c        **** 
  32:main.c        **** static const char *ptr;
  33:main.c        **** static bool enableBenchmarking = false;
  34:main.c        **** 
  35:main.c        **** /* Adapted from tiny encryption algorithm wikipedia */
  36:main.c        **** void decrypt(uint32_t * v,uint32_t * k) {
  22              		.loc 1 36 0
  23              		.cfi_startproc
  24 0000 55       		pushq	%rbp
  25              		.cfi_def_cfa_offset 16
  26              		.cfi_offset 6, -16
  27 0001 4889E5   		movq	%rsp, %rbp
  28              		.cfi_def_cfa_register 6
  29 0004 48897DC8 		movq	%rdi, -56(%rbp)
  30 0008 488975C0 		movq	%rsi, -64(%rbp)
  37:main.c        ****     uint32_t v0=v[0], v1=v[1], sum=0xC6EF3720, i;  /* set up */
  31              		.loc 1 37 0
  32 000c 488B45C8 		movq	-56(%rbp), %rax
  33 0010 8B00     		movl	(%rax), %eax
  34 0012 8945DC   		movl	%eax, -36(%rbp)
  35 0015 488B45C8 		movq	-56(%rbp), %rax
  36 0019 8B4004   		movl	4(%rax), %eax
  37 001c 8945E0   		movl	%eax, -32(%rbp)
  38 001f C745E420 		movl	$-957401312, -28(%rbp)
  38      37EFC6
  38:main.c        ****     uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
  39              		.loc 1 38 0
  40 0026 C745ECB9 		movl	$-1640531527, -20(%rbp)
  40      79379E
  39:main.c        ****     uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
  41              		.loc 1 39 0
  42 002d 488B45C0 		movq	-64(%rbp), %rax
  43 0031 8B00     		movl	(%rax), %eax
  44 0033 8945F0   		movl	%eax, -16(%rbp)
  45 0036 488B45C0 		movq	-64(%rbp), %rax
  46 003a 8B4004   		movl	4(%rax), %eax
  47 003d 8945F4   		movl	%eax, -12(%rbp)
  48 0040 488B45C0 		movq	-64(%rbp), %rax
  49 0044 8B4008   		movl	8(%rax), %eax
  50 0047 8945F8   		movl	%eax, -8(%rbp)
  51 004a 488B45C0 		movq	-64(%rbp), %rax
  52 004e 8B400C   		movl	12(%rax), %eax
  53 0051 8945FC   		movl	%eax, -4(%rbp)
  40:main.c        ****     /* basic cycle start */
  41:main.c        ****     for (i=0; i<32; i++) {                         
  54              		.loc 1 41 0
  55 0054 C745E800 		movl	$0, -24(%rbp)
  55      000000
  56 005b EB62     		jmp	.L2
  57              	.L3:
  42:main.c        ****         v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
  58              		.loc 1 42 0 discriminator 2
  59 005d 8B45DC   		movl	-36(%rbp), %eax
  60 0060 C1E004   		sall	$4, %eax
  61 0063 89C2     		movl	%eax, %edx
  62 0065 8B45F8   		movl	-8(%rbp), %eax
  63 0068 8D0C02   		leal	(%rdx,%rax), %ecx
  64 006b 8B45E4   		movl	-28(%rbp), %eax
  65 006e 8B55DC   		movl	-36(%rbp), %edx
  66 0071 01D0     		addl	%edx, %eax
  67 0073 31C1     		xorl	%eax, %ecx
  68 0075 89CA     		movl	%ecx, %edx
  69 0077 8B45DC   		movl	-36(%rbp), %eax
  70 007a C1E805   		shrl	$5, %eax
  71 007d 89C1     		movl	%eax, %ecx
  72 007f 8B45FC   		movl	-4(%rbp), %eax
  73 0082 01C8     		addl	%ecx, %eax
  74 0084 31D0     		xorl	%edx, %eax
  75 0086 2945E0   		subl	%eax, -32(%rbp)
  43:main.c        ****         v0 -= ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
  76              		.loc 1 43 0 discriminator 2
  77 0089 8B45E0   		movl	-32(%rbp), %eax
  78 008c C1E004   		sall	$4, %eax
  79 008f 89C2     		movl	%eax, %edx
  80 0091 8B45F0   		movl	-16(%rbp), %eax
  81 0094 8D0C02   		leal	(%rdx,%rax), %ecx
  82 0097 8B45E4   		movl	-28(%rbp), %eax
  83 009a 8B55E0   		movl	-32(%rbp), %edx
  84 009d 01D0     		addl	%edx, %eax
  85 009f 31C1     		xorl	%eax, %ecx
  86 00a1 89CA     		movl	%ecx, %edx
  87 00a3 8B45E0   		movl	-32(%rbp), %eax
  88 00a6 C1E805   		shrl	$5, %eax
  89 00a9 89C1     		movl	%eax, %ecx
  90 00ab 8B45F4   		movl	-12(%rbp), %eax
  91 00ae 01C8     		addl	%ecx, %eax
  92 00b0 31D0     		xorl	%edx, %eax
  93 00b2 2945DC   		subl	%eax, -36(%rbp)
  44:main.c        ****         sum -= delta;
  94              		.loc 1 44 0 discriminator 2
  95 00b5 8B45EC   		movl	-20(%rbp), %eax
  96 00b8 2945E4   		subl	%eax, -28(%rbp)
  41:main.c        ****         v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
  97              		.loc 1 41 0 discriminator 2
  98 00bb 8345E801 		addl	$1, -24(%rbp)
  99              	.L2:
  41:main.c        ****         v1 -= ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
 100              		.loc 1 41 0 is_stmt 0 discriminator 1
 101 00bf 837DE81F 		cmpl	$31, -24(%rbp)
 102 00c3 7698     		jbe	.L3
  45:main.c        ****     }
  46:main.c        ****     /* end cycle */
  47:main.c        ****     v[0]=v0; v[1]=v1;
 103              		.loc 1 47 0 is_stmt 1
 104 00c5 488B45C8 		movq	-56(%rbp), %rax
 105 00c9 8B55DC   		movl	-36(%rbp), %edx
 106 00cc 8910     		movl	%edx, (%rax)
 107 00ce 488B45C8 		movq	-56(%rbp), %rax
 108 00d2 488D5004 		leaq	4(%rax), %rdx
 109 00d6 8B45E0   		movl	-32(%rbp), %eax
 110 00d9 8902     		movl	%eax, (%rdx)
  48:main.c        **** }
 111              		.loc 1 48 0
 112 00db 5D       		popq	%rbp
 113              		.cfi_def_cfa 7, 8
 114 00dc C3       		ret
 115              		.cfi_endproc
 116              	.LFE6:
 118              		.globl	encrypt
 120              	encrypt:
 121              	.LFB7:
  49:main.c        **** 
  50:main.c        **** /* Adapted from tiny encryption algorithm wikipedia */
  51:main.c        **** void encrypt (uint32_t* v, uint32_t* k) {
 122              		.loc 1 51 0
 123              		.cfi_startproc
 124 00dd 55       		pushq	%rbp
 125              		.cfi_def_cfa_offset 16
 126              		.cfi_offset 6, -16
 127 00de 4889E5   		movq	%rsp, %rbp
 128              		.cfi_def_cfa_register 6
 129 00e1 48897DC8 		movq	%rdi, -56(%rbp)
 130 00e5 488975C0 		movq	%rsi, -64(%rbp)
  52:main.c        ****     uint32_t v0=v[0], v1=v[1], sum=0, i;           /* set up */
 131              		.loc 1 52 0
 132 00e9 488B45C8 		movq	-56(%rbp), %rax
 133 00ed 8B00     		movl	(%rax), %eax
 134 00ef 8945DC   		movl	%eax, -36(%rbp)
 135 00f2 488B45C8 		movq	-56(%rbp), %rax
 136 00f6 8B4004   		movl	4(%rax), %eax
 137 00f9 8945E0   		movl	%eax, -32(%rbp)
 138 00fc C745E400 		movl	$0, -28(%rbp)
 138      000000
  53:main.c        ****     uint32_t delta=0x9e3779b9;                     /* a key schedule constant */
 139              		.loc 1 53 0
 140 0103 C745ECB9 		movl	$-1640531527, -20(%rbp)
 140      79379E
  54:main.c        ****     uint32_t k0=k[0], k1=k[1], k2=k[2], k3=k[3];   /* cache key */
 141              		.loc 1 54 0
 142 010a 488B45C0 		movq	-64(%rbp), %rax
 143 010e 8B00     		movl	(%rax), %eax
 144 0110 8945F0   		movl	%eax, -16(%rbp)
 145 0113 488B45C0 		movq	-64(%rbp), %rax
 146 0117 8B4004   		movl	4(%rax), %eax
 147 011a 8945F4   		movl	%eax, -12(%rbp)
 148 011d 488B45C0 		movq	-64(%rbp), %rax
 149 0121 8B4008   		movl	8(%rax), %eax
 150 0124 8945F8   		movl	%eax, -8(%rbp)
 151 0127 488B45C0 		movq	-64(%rbp), %rax
 152 012b 8B400C   		movl	12(%rax), %eax
 153 012e 8945FC   		movl	%eax, -4(%rbp)
  55:main.c        **** 	/* basic cycle start */
  56:main.c        ****     for (i=0; i < 32; i++) {
 154              		.loc 1 56 0
 155 0131 C745E800 		movl	$0, -24(%rbp)
 155      000000
 156 0138 EB62     		jmp	.L5
 157              	.L6:
  57:main.c        ****         sum += delta;
 158              		.loc 1 57 0 discriminator 2
 159 013a 8B45EC   		movl	-20(%rbp), %eax
 160 013d 0145E4   		addl	%eax, -28(%rbp)
  58:main.c        ****         v0 += ((v1<<4) + k0) ^ (v1 + sum) ^ ((v1>>5) + k1);
 161              		.loc 1 58 0 discriminator 2
 162 0140 8B45E0   		movl	-32(%rbp), %eax
 163 0143 C1E004   		sall	$4, %eax
 164 0146 89C2     		movl	%eax, %edx
 165 0148 8B45F0   		movl	-16(%rbp), %eax
 166 014b 8D0C02   		leal	(%rdx,%rax), %ecx
 167 014e 8B45E4   		movl	-28(%rbp), %eax
 168 0151 8B55E0   		movl	-32(%rbp), %edx
 169 0154 01D0     		addl	%edx, %eax
 170 0156 31C1     		xorl	%eax, %ecx
 171 0158 89CA     		movl	%ecx, %edx
 172 015a 8B45E0   		movl	-32(%rbp), %eax
 173 015d C1E805   		shrl	$5, %eax
 174 0160 89C1     		movl	%eax, %ecx
 175 0162 8B45F4   		movl	-12(%rbp), %eax
 176 0165 01C8     		addl	%ecx, %eax
 177 0167 31D0     		xorl	%edx, %eax
 178 0169 0145DC   		addl	%eax, -36(%rbp)
  59:main.c        ****         v1 += ((v0<<4) + k2) ^ (v0 + sum) ^ ((v0>>5) + k3);
 179              		.loc 1 59 0 discriminator 2
 180 016c 8B45DC   		movl	-36(%rbp), %eax
 181 016f C1E004   		sall	$4, %eax
 182 0172 89C2     		movl	%eax, %edx
 183 0174 8B45F8   		movl	-8(%rbp), %eax
 184 0177 8D0C02   		leal	(%rdx,%rax), %ecx
 185 017a 8B45E4   		movl	-28(%rbp), %eax
 186 017d 8B55DC   		movl	-36(%rbp), %edx
 187 0180 01D0     		addl	%edx, %eax
 188 0182 31C1     		xorl	%eax, %ecx
 189 0184 89CA     		movl	%ecx, %edx
 190 0186 8B45DC   		movl	-36(%rbp), %eax
 191 0189 C1E805   		shrl	$5, %eax
 192 018c 89C1     		movl	%eax, %ecx
 193 018e 8B45FC   		movl	-4(%rbp), %eax
 194 0191 01C8     		addl	%ecx, %eax
 195 0193 31D0     		xorl	%edx, %eax
 196 0195 0145E0   		addl	%eax, -32(%rbp)
  56:main.c        ****         sum += delta;
 197              		.loc 1 56 0 discriminator 2
 198 0198 8345E801 		addl	$1, -24(%rbp)
 199              	.L5:
  56:main.c        ****         sum += delta;
 200              		.loc 1 56 0 is_stmt 0 discriminator 1
 201 019c 837DE81F 		cmpl	$31, -24(%rbp)
 202 01a0 7698     		jbe	.L6
  60:main.c        ****     }
  61:main.c        ****     /* end cycle */
  62:main.c        ****     v[0]=v0; v[1]=v1;
 203              		.loc 1 62 0 is_stmt 1
 204 01a2 488B45C8 		movq	-56(%rbp), %rax
 205 01a6 8B55DC   		movl	-36(%rbp), %edx
 206 01a9 8910     		movl	%edx, (%rax)
 207 01ab 488B45C8 		movq	-56(%rbp), %rax
 208 01af 488D5004 		leaq	4(%rax), %rdx
 209 01b3 8B45E0   		movl	-32(%rbp), %eax
 210 01b6 8902     		movl	%eax, (%rdx)
  63:main.c        **** }
 211              		.loc 1 63 0
 212 01b8 5D       		popq	%rbp
 213              		.cfi_def_cfa 7, 8
 214 01b9 C3       		ret
 215              		.cfi_endproc
 216              	.LFE7:
 218              		.globl	decrypt64
 220              	decrypt64:
 221              	.LFB8:
  64:main.c        **** 
  65:main.c        **** void decrypt64(uint32_t * inpData) {
 222              		.loc 1 65 0
 223              		.cfi_startproc
 224 01ba 55       		pushq	%rbp
 225              		.cfi_def_cfa_offset 16
 226              		.cfi_offset 6, -16
 227 01bb 4889E5   		movq	%rsp, %rbp
 228              		.cfi_def_cfa_register 6
 229 01be 4883EC18 		subq	$24, %rsp
 230 01c2 48897DE8 		movq	%rdi, -24(%rbp)
  66:main.c        **** 	uint32_t key[4];
  67:main.c        **** 	key[0] = 0x2927c18c; key[1] = 0x75f8c48f; key[2] = 0x43fd99f7; key[3] = 0xff0f7457;
 231              		.loc 1 67 0
 232 01c6 C745F08C 		movl	$690471308, -16(%rbp)
 232      C12729
 233 01cd C745F48F 		movl	$1979237519, -12(%rbp)
 233      C4F875
 234 01d4 C745F8F7 		movl	$1140693495, -8(%rbp)
 234      99FD43
 235 01db C745FC57 		movl	$-15764393, -4(%rbp)
 235      740FFF
  68:main.c        **** 	decrypt(inpData,key);
 236              		.loc 1 68 0
 237 01e2 488D55F0 		leaq	-16(%rbp), %rdx
 238 01e6 488B45E8 		movq	-24(%rbp), %rax
 239 01ea 4889D6   		movq	%rdx, %rsi
 240 01ed 4889C7   		movq	%rax, %rdi
 241 01f0 E8000000 		call	decrypt
 241      00
  69:main.c        **** }
 242              		.loc 1 69 0
 243 01f5 C9       		leave
 244              		.cfi_def_cfa 7, 8
 245 01f6 C3       		ret
 246              		.cfi_endproc
 247              	.LFE8:
 249              		.globl	encrypt64
 251              	encrypt64:
 252              	.LFB9:
  70:main.c        **** 
  71:main.c        **** void encrypt64(uint32_t * inpData) {
 253              		.loc 1 71 0
 254              		.cfi_startproc
 255 01f7 55       		pushq	%rbp
 256              		.cfi_def_cfa_offset 16
 257              		.cfi_offset 6, -16
 258 01f8 4889E5   		movq	%rsp, %rbp
 259              		.cfi_def_cfa_register 6
 260 01fb 4883EC18 		subq	$24, %rsp
 261 01ff 48897DE8 		movq	%rdi, -24(%rbp)
  72:main.c        **** 	uint32_t key[4];
  73:main.c        **** 	key[0] = 0x2927c18c; key[1] = 0x75f8c48f; key[2] = 0x43fd99f7; key[3] = 0xff0f7457;
 262              		.loc 1 73 0
 263 0203 C745F08C 		movl	$690471308, -16(%rbp)
 263      C12729
 264 020a C745F48F 		movl	$1979237519, -12(%rbp)
 264      C4F875
 265 0211 C745F8F7 		movl	$1140693495, -8(%rbp)
 265      99FD43
 266 0218 C745FC57 		movl	$-15764393, -4(%rbp)
 266      740FFF
  74:main.c        **** 	encrypt(inpData,key);
 267              		.loc 1 74 0
 268 021f 488D55F0 		leaq	-16(%rbp), %rdx
 269 0223 488B45E8 		movq	-24(%rbp), %rax
 270 0227 4889D6   		movq	%rdx, %rsi
 271 022a 4889C7   		movq	%rax, %rdi
 272 022d E8000000 		call	encrypt
 272      00
  75:main.c        **** }
 273              		.loc 1 75 0
 274 0232 C9       		leave
 275              		.cfi_def_cfa 7, 8
 276 0233 C3       		ret
 277              		.cfi_endproc
 278              	.LFE9:
 280              		.globl	myHash
 282              	myHash:
 283              	.LFB10:
  76:main.c        **** 
  77:main.c        **** uint16_t myHash(uint16_t befHash) {
 284              		.loc 1 77 0
 285              		.cfi_startproc
 286 0234 55       		pushq	%rbp
 287              		.cfi_def_cfa_offset 16
 288              		.cfi_offset 6, -16
 289 0235 4889E5   		movq	%rsp, %rbp
 290              		.cfi_def_cfa_register 6
 291 0238 89F8     		movl	%edi, %eax
 292 023a 668945EC 		movw	%ax, -20(%rbp)
  78:main.c        **** 	uint16_t ret = 0;
 293              		.loc 1 78 0
 294 023e 66C745FA 		movw	$0, -6(%rbp)
 294      0000
 295              	.LBB2:
  79:main.c        **** 	for(uint16_t i=0;i<=15;i++) {
 296              		.loc 1 79 0
 297 0244 66C745FC 		movw	$0, -4(%rbp)
 297      0000
 298 024a EB4F     		jmp	.L10
 299              	.L12:
  80:main.c        **** 		if((befHash & (1 << i)) != 0) {
 300              		.loc 1 80 0
 301 024c 0FB755EC 		movzwl	-20(%rbp), %edx
 302 0250 0FB745FC 		movzwl	-4(%rbp), %eax
 303 0254 89C1     		movl	%eax, %ecx
 304 0256 D3FA     		sarl	%cl, %edx
 305 0258 89D0     		movl	%edx, %eax
 306 025a 83E001   		andl	$1, %eax
 307 025d 85C0     		testl	%eax, %eax
 308 025f 742F     		je	.L11
 309              	.LBB3:
  81:main.c        **** 			uint16_t j = ((i+11)%16);
 310              		.loc 1 81 0
 311 0261 0FB745FC 		movzwl	-4(%rbp), %eax
 312 0265 8D500B   		leal	11(%rax), %edx
 313 0268 89D0     		movl	%edx, %eax
 314 026a C1F81F   		sarl	$31, %eax
 315 026d C1E81C   		shrl	$28, %eax
 316 0270 01C2     		addl	%eax, %edx
 317 0272 83E20F   		andl	$15, %edx
 318 0275 29C2     		subl	%eax, %edx
 319 0277 89D0     		movl	%edx, %eax
 320 0279 668945FE 		movw	%ax, -2(%rbp)
  82:main.c        **** 			ret += (1 << j);
 321              		.loc 1 82 0
 322 027d 0FB745FE 		movzwl	-2(%rbp), %eax
 323 0281 BA010000 		movl	$1, %edx
 323      00
 324 0286 89C1     		movl	%eax, %ecx
 325 0288 D3E2     		sall	%cl, %edx
 326 028a 89D0     		movl	%edx, %eax
 327 028c 660145FA 		addw	%ax, -6(%rbp)
 328              	.L11:
 329              	.LBE3:
  79:main.c        **** 		if((befHash & (1 << i)) != 0) {
 330              		.loc 1 79 0
 331 0290 0FB745FC 		movzwl	-4(%rbp), %eax
 332 0294 83C001   		addl	$1, %eax
 333 0297 668945FC 		movw	%ax, -4(%rbp)
 334              	.L10:
  79:main.c        **** 		if((befHash & (1 << i)) != 0) {
 335              		.loc 1 79 0 is_stmt 0 discriminator 1
 336 029b 66837DFC 		cmpw	$15, -4(%rbp)
 336      0F
 337 02a0 76AA     		jbe	.L12
 338              	.LBE2:
  83:main.c        **** 		}
  84:main.c        **** 	}
  85:main.c        **** 	return ret;
 339              		.loc 1 85 0 is_stmt 1
 340 02a2 0FB745FA 		movzwl	-6(%rbp), %eax
  86:main.c        **** }
 341              		.loc 1 86 0
 342 02a6 5D       		popq	%rbp
 343              		.cfi_def_cfa 7, 8
 344 02a7 C3       		ret
 345              		.cfi_endproc
 346              	.LFE10:
 348              		.section	.rodata
 349              	.LC0:
 350 0000 2C00     		.string	","
 351              	.LC1:
 352 0002 256400   		.string	"%d"
 353              		.text
 354              		.globl	format
 356              	format:
 357              	.LFB11:
  87:main.c        **** 
  88:main.c        **** void format(char * line) {
 358              		.loc 1 88 0
 359              		.cfi_startproc
 360 02a8 55       		pushq	%rbp
 361              		.cfi_def_cfa_offset 16
 362              		.cfi_offset 6, -16
 363 02a9 4889E5   		movq	%rsp, %rbp
 364              		.cfi_def_cfa_register 6
 365 02ac 4883EC20 		subq	$32, %rsp
 366 02b0 48897DE8 		movq	%rdi, -24(%rbp)
  89:main.c        ****     char * wordPtr;   
  90:main.c        ****     wordPtr = strtok(line,",");
 367              		.loc 1 90 0
 368 02b4 488B45E8 		movq	-24(%rbp), %rax
 369 02b8 BE000000 		movl	$.LC0, %esi
 369      00
 370 02bd 4889C7   		movq	%rax, %rdi
 371 02c0 E8000000 		call	strtok
 371      00
 372 02c5 488945F8 		movq	%rax, -8(%rbp)
  91:main.c        ****     int cnt = 0;
 373              		.loc 1 91 0
 374 02c9 C745F400 		movl	$0, -12(%rbp)
 374      000000
  92:main.c        ****     while( wordPtr != NULL ) {
 375              		.loc 1 92 0
 376 02d0 EB4D     		jmp	.L15
 377              	.L16:
  93:main.c        ****         sscanf(wordPtr, "%d",&dataFromCSV[numLines][cnt]);
 378              		.loc 1 93 0
 379 02d2 8B150000 		movl	numLines(%rip), %edx
 379      0000
 380 02d8 8B45F4   		movl	-12(%rbp), %eax
 381 02db 4898     		cltq
 382 02dd 4863D2   		movslq	%edx, %rdx
 383 02e0 48C1E202 		salq	$2, %rdx
 384 02e4 4801D0   		addq	%rdx, %rax
 385 02e7 48C1E002 		salq	$2, %rax
 386 02eb 488D9000 		leaq	dataFromCSV(%rax), %rdx
 386      000000
 387 02f2 488B45F8 		movq	-8(%rbp), %rax
 388 02f6 BE000000 		movl	$.LC1, %esi
 388      00
 389 02fb 4889C7   		movq	%rax, %rdi
 390 02fe B8000000 		movl	$0, %eax
 390      00
 391 0303 E8000000 		call	sscanf
 391      00
  94:main.c        ****         // printf("%d\n",dataFromCSV[numLines][cnt]);
  95:main.c        ****         wordPtr = strtok(NULL,",");
 392              		.loc 1 95 0
 393 0308 BE000000 		movl	$.LC0, %esi
 393      00
 394 030d BF000000 		movl	$0, %edi
 394      00
 395 0312 E8000000 		call	strtok
 395      00
 396 0317 488945F8 		movq	%rax, -8(%rbp)
  96:main.c        ****         cnt++;
 397              		.loc 1 96 0
 398 031b 8345F401 		addl	$1, -12(%rbp)
 399              	.L15:
  92:main.c        ****         sscanf(wordPtr, "%d",&dataFromCSV[numLines][cnt]);
 400              		.loc 1 92 0 discriminator 1
 401 031f 48837DF8 		cmpq	$0, -8(%rbp)
 401      00
 402 0324 75AC     		jne	.L16
  97:main.c        ****     }
  98:main.c        **** }
 403              		.loc 1 98 0
 404 0326 C9       		leave
 405              		.cfi_def_cfa 7, 8
 406 0327 C3       		ret
 407              		.cfi_endproc
 408              	.LFE11:
 410              		.globl	find
 412              	find:
 413              	.LFB12:
  99:main.c        **** 
 100:main.c        **** bool find(uint16_t userID,uint16_t hashedPin,bool * isAdmin,int * bal,int * inLineNum) {
 414              		.loc 1 100 0
 415              		.cfi_startproc
 416 0328 55       		pushq	%rbp
 417              		.cfi_def_cfa_offset 16
 418              		.cfi_offset 6, -16
 419 0329 4889E5   		movq	%rsp, %rbp
 420              		.cfi_def_cfa_register 6
 421 032c 89F0     		movl	%esi, %eax
 422 032e 488955E0 		movq	%rdx, -32(%rbp)
 423 0332 48894DD8 		movq	%rcx, -40(%rbp)
 424 0336 4C8945D0 		movq	%r8, -48(%rbp)
 425 033a 66897DEC 		movw	%di, -20(%rbp)
 426 033e 668945E8 		movw	%ax, -24(%rbp)
 101:main.c        **** 	bool pos = false;
 427              		.loc 1 101 0
 428 0342 C645FB00 		movb	$0, -5(%rbp)
 429              	.LBB4:
 102:main.c        **** 	for(int i=1;i <= numLines;i++) {
 430              		.loc 1 102 0
 431 0346 C745FC01 		movl	$1, -4(%rbp)
 431      000000
 432 034d EB75     		jmp	.L18
 433              	.L22:
 103:main.c        **** 		if(userID == (uint16_t)dataFromCSV[i][0] && hashedPin == (uint16_t)dataFromCSV[i][1]) {
 434              		.loc 1 103 0
 435 034f 8B45FC   		movl	-4(%rbp), %eax
 436 0352 4898     		cltq
 437 0354 48C1E004 		salq	$4, %rax
 438 0358 48050000 		addq	$dataFromCSV, %rax
 438      0000
 439 035e 8B00     		movl	(%rax), %eax
 440 0360 663B45EC 		cmpw	-20(%rbp), %ax
 441 0364 755A     		jne	.L19
 442              		.loc 1 103 0 is_stmt 0 discriminator 1
 443 0366 8B45FC   		movl	-4(%rbp), %eax
 444 0369 4898     		cltq
 445 036b 48C1E004 		salq	$4, %rax
 446 036f 48050000 		addq	$dataFromCSV+4, %rax
 446      0000
 447 0375 8B00     		movl	(%rax), %eax
 448 0377 663B45E8 		cmpw	-24(%rbp), %ax
 449 037b 7543     		jne	.L19
 104:main.c        **** 			pos = true;
 450              		.loc 1 104 0 is_stmt 1
 451 037d C645FB01 		movb	$1, -5(%rbp)
 105:main.c        **** 			if(dataFromCSV[i][2] == 1) *isAdmin = true;
 452              		.loc 1 105 0
 453 0381 8B45FC   		movl	-4(%rbp), %eax
 454 0384 4898     		cltq
 455 0386 48C1E004 		salq	$4, %rax
 456 038a 48050000 		addq	$dataFromCSV+8, %rax
 456      0000
 457 0390 8B00     		movl	(%rax), %eax
 458 0392 83F801   		cmpl	$1, %eax
 459 0395 7507     		jne	.L20
 460              		.loc 1 105 0 is_stmt 0 discriminator 1
 461 0397 488B45E0 		movq	-32(%rbp), %rax
 462 039b C60001   		movb	$1, (%rax)
 463              	.L20:
 106:main.c        **** 			*bal = dataFromCSV[i][3]; *inLineNum = i;
 464              		.loc 1 106 0 is_stmt 1
 465 039e 8B45FC   		movl	-4(%rbp), %eax
 466 03a1 4898     		cltq
 467 03a3 48C1E004 		salq	$4, %rax
 468 03a7 48050000 		addq	$dataFromCSV+12, %rax
 468      0000
 469 03ad 8B10     		movl	(%rax), %edx
 470 03af 488B45D8 		movq	-40(%rbp), %rax
 471 03b3 8910     		movl	%edx, (%rax)
 472 03b5 488B45D0 		movq	-48(%rbp), %rax
 473 03b9 8B55FC   		movl	-4(%rbp), %edx
 474 03bc 8910     		movl	%edx, (%rax)
 107:main.c        **** 			break;
 475              		.loc 1 107 0
 476 03be EB0F     		jmp	.L21
 477              	.L19:
 102:main.c        **** 		if(userID == (uint16_t)dataFromCSV[i][0] && hashedPin == (uint16_t)dataFromCSV[i][1]) {
 478              		.loc 1 102 0
 479 03c0 8345FC01 		addl	$1, -4(%rbp)
 480              	.L18:
 102:main.c        **** 		if(userID == (uint16_t)dataFromCSV[i][0] && hashedPin == (uint16_t)dataFromCSV[i][1]) {
 481              		.loc 1 102 0 is_stmt 0 discriminator 1
 482 03c4 8B050000 		movl	numLines(%rip), %eax
 482      0000
 483 03ca 3945FC   		cmpl	%eax, -4(%rbp)
 484 03cd 7E80     		jle	.L22
 485              	.L21:
 486              	.LBE4:
 108:main.c        **** 		}
 109:main.c        **** 	}
 110:main.c        ****     return pos; 
 487              		.loc 1 110 0 is_stmt 1
 488 03cf 0FB645FB 		movzbl	-5(%rbp), %eax
 111:main.c        **** }
 489              		.loc 1 111 0
 490 03d3 5D       		popq	%rbp
 491              		.cfi_def_cfa 7, 8
 492 03d4 C3       		ret
 493              		.cfi_endproc
 494              	.LFE12:
 496              		.globl	suffBal
 498              	suffBal:
 499              	.LFB13:
 112:main.c        **** 
 113:main.c        **** bool suffBal(int bal,int * reqAmo,uint8_t num_100,uint8_t num_500,uint8_t num_1000,uint8_t num_2000
 500              		.loc 1 113 0
 501              		.cfi_startproc
 502 03d5 55       		pushq	%rbp
 503              		.cfi_def_cfa_offset 16
 504              		.cfi_offset 6, -16
 505 03d6 4889E5   		movq	%rsp, %rbp
 506              		.cfi_def_cfa_register 6
 507 03d9 897DEC   		movl	%edi, -20(%rbp)
 508 03dc 488975E0 		movq	%rsi, -32(%rbp)
 509 03e0 89C8     		movl	%ecx, %eax
 510 03e2 4489C6   		movl	%r8d, %esi
 511 03e5 4489C9   		movl	%r9d, %ecx
 512 03e8 8855E8   		movb	%dl, -24(%rbp)
 513 03eb 8845DC   		movb	%al, -36(%rbp)
 514 03ee 408875D8 		movb	%sil, -40(%rbp)
 515 03f2 884DD4   		movb	%cl, -44(%rbp)
 114:main.c        **** 	bool hasSuffBal = true;
 516              		.loc 1 114 0
 517 03f5 C645FF01 		movb	$1, -1(%rbp)
 115:main.c        **** 	*reqAmo += 100*((int)num_100);
 518              		.loc 1 115 0
 519 03f9 488B45E0 		movq	-32(%rbp), %rax
 520 03fd 8B10     		movl	(%rax), %edx
 521 03ff 0FB645E8 		movzbl	-24(%rbp), %eax
 522 0403 6BC064   		imull	$100, %eax, %eax
 523 0406 01C2     		addl	%eax, %edx
 524 0408 488B45E0 		movq	-32(%rbp), %rax
 525 040c 8910     		movl	%edx, (%rax)
 116:main.c        **** 	*reqAmo += 500*((int)num_500);
 526              		.loc 1 116 0
 527 040e 488B45E0 		movq	-32(%rbp), %rax
 528 0412 8B10     		movl	(%rax), %edx
 529 0414 0FB645DC 		movzbl	-36(%rbp), %eax
 530 0418 69C0F401 		imull	$500, %eax, %eax
 530      0000
 531 041e 01C2     		addl	%eax, %edx
 532 0420 488B45E0 		movq	-32(%rbp), %rax
 533 0424 8910     		movl	%edx, (%rax)
 117:main.c        **** 	*reqAmo += 1000*((int)num_1000);
 534              		.loc 1 117 0
 535 0426 488B45E0 		movq	-32(%rbp), %rax
 536 042a 8B10     		movl	(%rax), %edx
 537 042c 0FB645D8 		movzbl	-40(%rbp), %eax
 538 0430 69C0E803 		imull	$1000, %eax, %eax
 538      0000
 539 0436 01C2     		addl	%eax, %edx
 540 0438 488B45E0 		movq	-32(%rbp), %rax
 541 043c 8910     		movl	%edx, (%rax)
 118:main.c        **** 	*reqAmo += 2000*((int)num_2000);
 542              		.loc 1 118 0
 543 043e 488B45E0 		movq	-32(%rbp), %rax
 544 0442 8B10     		movl	(%rax), %edx
 545 0444 0FB645D4 		movzbl	-44(%rbp), %eax
 546 0448 69C0D007 		imull	$2000, %eax, %eax
 546      0000
 547 044e 01C2     		addl	%eax, %edx
 548 0450 488B45E0 		movq	-32(%rbp), %rax
 549 0454 8910     		movl	%edx, (%rax)
 119:main.c        **** 	if(*reqAmo > bal) hasSuffBal = false;
 550              		.loc 1 119 0
 551 0456 488B45E0 		movq	-32(%rbp), %rax
 552 045a 8B00     		movl	(%rax), %eax
 553 045c 3B45EC   		cmpl	-20(%rbp), %eax
 554 045f 7E04     		jle	.L25
 555              		.loc 1 119 0 is_stmt 0 discriminator 1
 556 0461 C645FF00 		movb	$0, -1(%rbp)
 557              	.L25:
 120:main.c        **** 	return hasSuffBal;
 558              		.loc 1 120 0 is_stmt 1
 559 0465 0FB645FF 		movzbl	-1(%rbp), %eax
 121:main.c        **** }
 560              		.loc 1 121 0
 561 0469 5D       		popq	%rbp
 562              		.cfi_def_cfa 7, 8
 563 046a C3       		ret
 564              		.cfi_endproc
 565              	.LFE13:
 568              	isHexDigit:
 569              	.LFB14:
 122:main.c        **** 
 123:main.c        **** static bool isHexDigit(char ch) {
 570              		.loc 1 123 0
 571              		.cfi_startproc
 572 046b 55       		pushq	%rbp
 573              		.cfi_def_cfa_offset 16
 574              		.cfi_offset 6, -16
 575 046c 4889E5   		movq	%rsp, %rbp
 576              		.cfi_def_cfa_register 6
 577 046f 89F8     		movl	%edi, %eax
 578 0471 8845FC   		movb	%al, -4(%rbp)
 124:main.c        **** 	return
 125:main.c        **** 		(ch >= '0' && ch <= '9') ||
 126:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 579              		.loc 1 126 0
 580 0474 807DFC2F 		cmpb	$47, -4(%rbp)
 581 0478 7E06     		jle	.L28
 125:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 582              		.loc 1 125 0
 583 047a 807DFC39 		cmpb	$57, -4(%rbp)
 584 047e 7E18     		jle	.L29
 585              	.L28:
 125:main.c        **** 		(ch >= 'a' && ch <= 'f') ||
 586              		.loc 1 125 0 is_stmt 0 discriminator 1
 587 0480 807DFC60 		cmpb	$96, -4(%rbp)
 588 0484 7E06     		jle	.L30
 589              		.loc 1 126 0 is_stmt 1
 590 0486 807DFC66 		cmpb	$102, -4(%rbp)
 591 048a 7E0C     		jle	.L29
 592              	.L30:
 593              		.loc 1 126 0 is_stmt 0 discriminator 2
 594 048c 807DFC40 		cmpb	$64, -4(%rbp)
 595 0490 7E0D     		jle	.L31
 127:main.c        **** 		(ch >= 'A' && ch <= 'F');
 596              		.loc 1 127 0 is_stmt 1
 597 0492 807DFC46 		cmpb	$70, -4(%rbp)
 598 0496 7F07     		jg	.L31
 599              	.L29:
 126:main.c        **** 		(ch >= 'A' && ch <= 'F');
 600              		.loc 1 126 0 discriminator 1
 601 0498 B8010000 		movl	$1, %eax
 601      00
 602 049d EB05     		jmp	.L32
 603              	.L31:
 604 049f B8000000 		movl	$0, %eax
 604      00
 605              	.L32:
 124:main.c        **** 		(ch >= '0' && ch <= '9') ||
 606              		.loc 1 124 0
 607 04a4 83E001   		andl	$1, %eax
 128:main.c        **** }
 608              		.loc 1 128 0
 609 04a7 5D       		popq	%rbp
 610              		.cfi_def_cfa 7, 8
 611 04a8 C3       		ret
 612              		.cfi_endproc
 613              	.LFE14:
 616              	calcChecksum:
 617              	.LFB15:
 129:main.c        **** 
 130:main.c        **** static uint16 calcChecksum(const uint8 *data, size_t length) {
 618              		.loc 1 130 0
 619              		.cfi_startproc
 620 04a9 55       		pushq	%rbp
 621              		.cfi_def_cfa_offset 16
 622              		.cfi_offset 6, -16
 623 04aa 4889E5   		movq	%rsp, %rbp
 624              		.cfi_def_cfa_register 6
 625 04ad 48897DE8 		movq	%rdi, -24(%rbp)
 626 04b1 488975E0 		movq	%rsi, -32(%rbp)
 131:main.c        **** 	uint16 cksum = 0x0000;
 627              		.loc 1 131 0
 628 04b5 66C745FE 		movw	$0, -2(%rbp)
 628      0000
 132:main.c        **** 	while ( length-- ) {
 629              		.loc 1 132 0
 630 04bb EB16     		jmp	.L35
 631              	.L36:
 133:main.c        **** 		cksum = (uint16)(cksum + *data++);
 632              		.loc 1 133 0
 633 04bd 488B45E8 		movq	-24(%rbp), %rax
 634 04c1 488D5001 		leaq	1(%rax), %rdx
 635 04c5 488955E8 		movq	%rdx, -24(%rbp)
 636 04c9 0FB600   		movzbl	(%rax), %eax
 637 04cc 0FB6C0   		movzbl	%al, %eax
 638 04cf 660145FE 		addw	%ax, -2(%rbp)
 639              	.L35:
 132:main.c        **** 	while ( length-- ) {
 640              		.loc 1 132 0 discriminator 1
 641 04d3 488B45E0 		movq	-32(%rbp), %rax
 642 04d7 488D50FF 		leaq	-1(%rax), %rdx
 643 04db 488955E0 		movq	%rdx, -32(%rbp)
 644 04df 4885C0   		testq	%rax, %rax
 645 04e2 75D9     		jne	.L36
 134:main.c        **** 	}
 135:main.c        **** 	return cksum;
 646              		.loc 1 135 0
 647 04e4 0FB745FE 		movzwl	-2(%rbp), %eax
 136:main.c        **** }
 648              		.loc 1 136 0
 649 04e8 5D       		popq	%rbp
 650              		.cfi_def_cfa 7, 8
 651 04e9 C3       		ret
 652              		.cfi_endproc
 653              	.LFE15:
 656              	getHexNibble:
 657              	.LFB16:
 137:main.c        **** 
 138:main.c        **** static bool getHexNibble(char hexDigit, uint8 *nibble) {
 658              		.loc 1 138 0
 659              		.cfi_startproc
 660 04ea 55       		pushq	%rbp
 661              		.cfi_def_cfa_offset 16
 662              		.cfi_offset 6, -16
 663 04eb 4889E5   		movq	%rsp, %rbp
 664              		.cfi_def_cfa_register 6
 665 04ee 89F8     		movl	%edi, %eax
 666 04f0 488975F0 		movq	%rsi, -16(%rbp)
 667 04f4 8845FC   		movb	%al, -4(%rbp)
 139:main.c        **** 	if ( hexDigit >= '0' && hexDigit <= '9' ) {
 668              		.loc 1 139 0
 669 04f7 807DFC2F 		cmpb	$47, -4(%rbp)
 670 04fb 7E1A     		jle	.L39
 671              		.loc 1 139 0 is_stmt 0 discriminator 1
 672 04fd 807DFC39 		cmpb	$57, -4(%rbp)
 673 0501 7F14     		jg	.L39
 140:main.c        **** 		*nibble = (uint8)(hexDigit - '0');
 674              		.loc 1 140 0 is_stmt 1
 675 0503 0FB645FC 		movzbl	-4(%rbp), %eax
 676 0507 8D50D0   		leal	-48(%rax), %edx
 677 050a 488B45F0 		movq	-16(%rbp), %rax
 678 050e 8810     		movb	%dl, (%rax)
 141:main.c        **** 		return false;
 679              		.loc 1 141 0
 680 0510 B8000000 		movl	$0, %eax
 680      00
 681 0515 EB45     		jmp	.L40
 682              	.L39:
 142:main.c        **** 	} else if ( hexDigit >= 'a' && hexDigit <= 'f' ) {
 683              		.loc 1 142 0
 684 0517 807DFC60 		cmpb	$96, -4(%rbp)
 685 051b 7E1A     		jle	.L41
 686              		.loc 1 142 0 is_stmt 0 discriminator 1
 687 051d 807DFC66 		cmpb	$102, -4(%rbp)
 688 0521 7F14     		jg	.L41
 143:main.c        **** 		*nibble = (uint8)(hexDigit - 'a' + 10);
 689              		.loc 1 143 0 is_stmt 1
 690 0523 0FB645FC 		movzbl	-4(%rbp), %eax
 691 0527 8D50A9   		leal	-87(%rax), %edx
 692 052a 488B45F0 		movq	-16(%rbp), %rax
 693 052e 8810     		movb	%dl, (%rax)
 144:main.c        **** 		return false;
 694              		.loc 1 144 0
 695 0530 B8000000 		movl	$0, %eax
 695      00
 696 0535 EB25     		jmp	.L40
 697              	.L41:
 145:main.c        **** 	} else if ( hexDigit >= 'A' && hexDigit <= 'F' ) {
 698              		.loc 1 145 0
 699 0537 807DFC40 		cmpb	$64, -4(%rbp)
 700 053b 7E1A     		jle	.L42
 701              		.loc 1 145 0 is_stmt 0 discriminator 1
 702 053d 807DFC46 		cmpb	$70, -4(%rbp)
 703 0541 7F14     		jg	.L42
 146:main.c        **** 		*nibble = (uint8)(hexDigit - 'A' + 10);
 704              		.loc 1 146 0 is_stmt 1
 705 0543 0FB645FC 		movzbl	-4(%rbp), %eax
 706 0547 8D50C9   		leal	-55(%rax), %edx
 707 054a 488B45F0 		movq	-16(%rbp), %rax
 708 054e 8810     		movb	%dl, (%rax)
 147:main.c        **** 		return false;
 709              		.loc 1 147 0
 710 0550 B8000000 		movl	$0, %eax
 710      00
 711 0555 EB05     		jmp	.L40
 712              	.L42:
 148:main.c        **** 	} else {
 149:main.c        **** 		return true;
 713              		.loc 1 149 0
 714 0557 B8010000 		movl	$1, %eax
 714      00
 715              	.L40:
 150:main.c        **** 	}
 151:main.c        **** }
 716              		.loc 1 151 0
 717 055c 5D       		popq	%rbp
 718              		.cfi_def_cfa 7, 8
 719 055d C3       		ret
 720              		.cfi_endproc
 721              	.LFE16:
 724              	getHexByte:
 725              	.LFB17:
 152:main.c        **** 
 153:main.c        **** static int getHexByte(uint8 *byte) {
 726              		.loc 1 153 0
 727              		.cfi_startproc
 728 055e 55       		pushq	%rbp
 729              		.cfi_def_cfa_offset 16
 730              		.cfi_offset 6, -16
 731 055f 4889E5   		movq	%rsp, %rbp
 732              		.cfi_def_cfa_register 6
 733 0562 4883EC18 		subq	$24, %rsp
 734 0566 48897DE8 		movq	%rdi, -24(%rbp)
 154:main.c        **** 	uint8 upperNibble;
 155:main.c        **** 	uint8 lowerNibble;
 156:main.c        **** 	if ( !getHexNibble(ptr[0], &upperNibble) && !getHexNibble(ptr[1], &lowerNibble) ) {
 735              		.loc 1 156 0
 736 056a 488B0500 		movq	ptr(%rip), %rax
 736      000000
 737 0571 0FB600   		movzbl	(%rax), %eax
 738 0574 0FBEC0   		movsbl	%al, %eax
 739 0577 488D55FE 		leaq	-2(%rbp), %rdx
 740 057b 4889D6   		movq	%rdx, %rsi
 741 057e 89C7     		movl	%eax, %edi
 742 0580 E865FFFF 		call	getHexNibble
 742      FF
 743 0585 83F001   		xorl	$1, %eax
 744 0588 84C0     		testb	%al, %al
 745 058a 744C     		je	.L44
 746              		.loc 1 156 0 is_stmt 0 discriminator 1
 747 058c 488B0500 		movq	ptr(%rip), %rax
 747      000000
 748 0593 4883C001 		addq	$1, %rax
 749 0597 0FB600   		movzbl	(%rax), %eax
 750 059a 0FBEC0   		movsbl	%al, %eax
 751 059d 488D55FF 		leaq	-1(%rbp), %rdx
 752 05a1 4889D6   		movq	%rdx, %rsi
 753 05a4 89C7     		movl	%eax, %edi
 754 05a6 E83FFFFF 		call	getHexNibble
 754      FF
 755 05ab 83F001   		xorl	$1, %eax
 756 05ae 84C0     		testb	%al, %al
 757 05b0 7426     		je	.L44
 157:main.c        **** 		*byte = (uint8)((upperNibble << 4) | lowerNibble);
 758              		.loc 1 157 0 is_stmt 1
 759 05b2 0FB645FE 		movzbl	-2(%rbp), %eax
 760 05b6 0FB6C0   		movzbl	%al, %eax
 761 05b9 C1E004   		sall	$4, %eax
 762 05bc 89C2     		movl	%eax, %edx
 763 05be 0FB645FF 		movzbl	-1(%rbp), %eax
 764 05c2 09D0     		orl	%edx, %eax
 765 05c4 89C2     		movl	%eax, %edx
 766 05c6 488B45E8 		movq	-24(%rbp), %rax
 767 05ca 8810     		movb	%dl, (%rax)
 158:main.c        **** 		byte += 2;
 768              		.loc 1 158 0
 769 05cc 488345E8 		addq	$2, -24(%rbp)
 769      02
 159:main.c        **** 		return 0;
 770              		.loc 1 159 0
 771 05d1 B8000000 		movl	$0, %eax
 771      00
 772 05d6 EB05     		jmp	.L46
 773              	.L44:
 160:main.c        **** 	} else {
 161:main.c        **** 		return 1;
 774              		.loc 1 161 0
 775 05d8 B8010000 		movl	$1, %eax
 775      00
 776              	.L46:
 162:main.c        **** 	}
 163:main.c        **** }
 777              		.loc 1 163 0
 778 05dd C9       		leave
 779              		.cfi_def_cfa 7, 8
 780 05de C3       		ret
 781              		.cfi_endproc
 782              	.LFE17:
 784              		.section	.rodata
 785              	.LC2:
 786 0005 556E7061 		.string	"Unparseable hex number"
 786      72736561 
 786      626C6520 
 786      68657820 
 786      6E756D62 
 787              	.LC3:
 788 001c 4368616E 		.string	"Channel out of range"
 788      6E656C20 
 788      6F757420 
 788      6F662072 
 788      616E6765 
 789              	.LC4:
 790 0031 436F6E64 		.string	"Conduit out of range"
 790      75697420 
 790      6F757420 
 790      6F662072 
 790      616E6765 
 791              	.LC5:
 792 0046 496C6C65 		.string	"Illegal character"
 792      67616C20 
 792      63686172 
 792      61637465 
 792      7200
 793              	.LC6:
 794 0058 556E7465 		.string	"Unterminated string"
 794      726D696E 
 794      61746564 
 794      20737472 
 794      696E6700 
 795              	.LC7:
 796 006c 4E6F206D 		.string	"No memory"
 796      656D6F72 
 796      7900
 797              	.LC8:
 798 0076 456D7074 		.string	"Empty string"
 798      79207374 
 798      72696E67 
 798      00
 799              	.LC9:
 800 0083 4F646420 		.string	"Odd number of digits"
 800      6E756D62 
 800      6572206F 
 800      66206469 
 800      67697473 
 801              	.LC10:
 802 0098 43616E6E 		.string	"Cannot load file"
 802      6F74206C 
 802      6F616420 
 802      66696C65 
 802      00
 803              	.LC11:
 804 00a9 43616E6E 		.string	"Cannot save file"
 804      6F742073 
 804      61766520 
 804      66696C65 
 804      00
 805              	.LC12:
 806 00ba 42616420 		.string	"Bad arguments"
 806      61726775 
 806      6D656E74 
 806      7300
 807 00c8 00000000 		.align 32
 807      00000000 
 807      00000000 
 807      00000000 
 807      00000000 
 810              	errMessages:
 811 00e0 00000000 		.quad	0
 811      00000000 
 812 00e8 00000000 		.quad	0
 812      00000000 
 813 00f0 00000000 		.quad	.LC2
 813      00000000 
 814 00f8 00000000 		.quad	.LC3
 814      00000000 
 815 0100 00000000 		.quad	.LC4
 815      00000000 
 816 0108 00000000 		.quad	.LC5
 816      00000000 
 817 0110 00000000 		.quad	.LC6
 817      00000000 
 818 0118 00000000 		.quad	.LC7
 818      00000000 
 819 0120 00000000 		.quad	.LC8
 819      00000000 
 820 0128 00000000 		.quad	.LC9
 820      00000000 
 821 0130 00000000 		.quad	.LC10
 821      00000000 
 822 0138 00000000 		.quad	.LC11
 822      00000000 
 823 0140 00000000 		.quad	.LC12
 823      00000000 
 824              	.LC13:
 825 0148 646F5265 		.string	"doRead()"
 825      61642829 
 825      00
 826              		.text
 828              	doRead:
 829              	.LFB18:
 164:main.c        **** 
 165:main.c        **** static const char *const errMessages[] = {
 166:main.c        **** 	NULL,
 167:main.c        **** 	NULL,
 168:main.c        **** 	"Unparseable hex number",
 169:main.c        **** 	"Channel out of range",
 170:main.c        **** 	"Conduit out of range",
 171:main.c        **** 	"Illegal character",
 172:main.c        **** 	"Unterminated string",
 173:main.c        **** 	"No memory",
 174:main.c        **** 	"Empty string",
 175:main.c        **** 	"Odd number of digits",
 176:main.c        **** 	"Cannot load file",
 177:main.c        **** 	"Cannot save file",
 178:main.c        **** 	"Bad arguments"
 179:main.c        **** };
 180:main.c        **** 
 181:main.c        **** typedef enum {
 182:main.c        **** 	FLP_SUCCESS,
 183:main.c        **** 	FLP_LIBERR,
 184:main.c        **** 	FLP_BAD_HEX,
 185:main.c        **** 	FLP_CHAN_RANGE,
 186:main.c        **** 	FLP_CONDUIT_RANGE,
 187:main.c        **** 	FLP_ILL_CHAR,
 188:main.c        **** 	FLP_UNTERM_STRING,
 189:main.c        **** 	FLP_NO_MEMORY,
 190:main.c        **** 	FLP_EMPTY_STRING,
 191:main.c        **** 	FLP_ODD_DIGITS,
 192:main.c        **** 	FLP_CANNOT_LOAD,
 193:main.c        **** 	FLP_CANNOT_SAVE,
 194:main.c        **** 	FLP_ARGS
 195:main.c        **** } ReturnCode;
 196:main.c        **** 
 197:main.c        **** static ReturnCode doRead(
 198:main.c        **** 	struct FLContext *handle, uint8 chan, uint32 length, FILE *destFile, uint16 *checksum,
 199:main.c        **** 	const char **error)
 200:main.c        **** {
 830              		.loc 1 200 0
 831              		.cfi_startproc
 832 05df 55       		pushq	%rbp
 833              		.cfi_def_cfa_offset 16
 834              		.cfi_offset 6, -16
 835 05e0 4889E5   		movq	%rsp, %rbp
 836              		.cfi_def_cfa_register 6
 837 05e3 4883EC60 		subq	$96, %rsp
 838 05e7 48897DC8 		movq	%rdi, -56(%rbp)
 839 05eb 89F0     		movl	%esi, %eax
 840 05ed 8955C0   		movl	%edx, -64(%rbp)
 841 05f0 48894DB8 		movq	%rcx, -72(%rbp)
 842 05f4 4C8945B0 		movq	%r8, -80(%rbp)
 843 05f8 4C894DA8 		movq	%r9, -88(%rbp)
 844 05fc 8845C4   		movb	%al, -60(%rbp)
 201:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 845              		.loc 1 201 0
 846 05ff C745E000 		movl	$0, -32(%rbp)
 846      000000
 202:main.c        **** 	uint32 bytesWritten;
 203:main.c        **** 	FLStatus fStatus;
 204:main.c        **** 	uint32 chunkSize;
 205:main.c        **** 	const uint8 *recvData;
 206:main.c        **** 	uint32 actualLength;
 207:main.c        **** 	const uint8 *ptr;
 208:main.c        **** 	uint16 csVal = 0x0000;
 847              		.loc 1 208 0
 848 0606 66C745DA 		movw	$0, -38(%rbp)
 848      0000
 209:main.c        **** 	#define READ_MAX 65536
 210:main.c        **** 
 211:main.c        **** 	// Read first chunk
 212:main.c        **** 	chunkSize = length >= READ_MAX ? READ_MAX : length;
 849              		.loc 1 212 0
 850 060c B8000001 		movl	$65536, %eax
 850      00
 851 0611 817DC000 		cmpl	$65536, -64(%rbp)
 851      000100
 852 0618 0F4645C0 		cmovbe	-64(%rbp), %eax
 853 061c 8945E4   		movl	%eax, -28(%rbp)
 213:main.c        **** 	fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 854              		.loc 1 213 0
 855 061f 0FB675C4 		movzbl	-60(%rbp), %esi
 856 0623 488B4DA8 		movq	-88(%rbp), %rcx
 857 0627 8B55E4   		movl	-28(%rbp), %edx
 858 062a 488B45C8 		movq	-56(%rbp), %rax
 859 062e 4989C8   		movq	%rcx, %r8
 860 0631 B9000000 		movl	$0, %ecx
 860      00
 861 0636 4889C7   		movq	%rax, %rdi
 862 0639 E8000000 		call	flReadChannelAsyncSubmit
 862      00
 863 063e 8945E8   		movl	%eax, -24(%rbp)
 214:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 864              		.loc 1 214 0
 865 0641 837DE800 		cmpl	$0, -24(%rbp)
 866 0645 741D     		je	.L48
 867              		.loc 1 214 0 is_stmt 0 discriminator 1
 868 0647 488B45A8 		movq	-88(%rbp), %rax
 869 064b BE000000 		movl	$.LC13, %esi
 869      00
 870 0650 4889C7   		movq	%rax, %rdi
 871 0653 E8000000 		call	errPrefix
 871      00
 872 0658 C745E001 		movl	$1, -32(%rbp)
 872      000000
 873 065f E9EC0100 		jmp	.L49
 873      00
 874              	.L48:
 215:main.c        **** 	length = length - chunkSize;
 875              		.loc 1 215 0 is_stmt 1
 876 0664 8B45E4   		movl	-28(%rbp), %eax
 877 0667 2945C0   		subl	%eax, -64(%rbp)
 216:main.c        **** 
 217:main.c        **** 	while ( length ) {
 878              		.loc 1 217 0
 879 066a E9180100 		jmp	.L50
 879      00
 880              	.L56:
 218:main.c        **** 		// Read chunk N
 219:main.c        **** 		chunkSize = length >= READ_MAX ? READ_MAX : length;
 881              		.loc 1 219 0
 882 066f B8000001 		movl	$65536, %eax
 882      00
 883 0674 817DC000 		cmpl	$65536, -64(%rbp)
 883      000100
 884 067b 0F4645C0 		cmovbe	-64(%rbp), %eax
 885 067f 8945E4   		movl	%eax, -28(%rbp)
 220:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, chan, chunkSize, NULL, error);
 886              		.loc 1 220 0
 887 0682 0FB675C4 		movzbl	-60(%rbp), %esi
 888 0686 488B4DA8 		movq	-88(%rbp), %rcx
 889 068a 8B55E4   		movl	-28(%rbp), %edx
 890 068d 488B45C8 		movq	-56(%rbp), %rax
 891 0691 4989C8   		movq	%rcx, %r8
 892 0694 B9000000 		movl	$0, %ecx
 892      00
 893 0699 4889C7   		movq	%rax, %rdi
 894 069c E8000000 		call	flReadChannelAsyncSubmit
 894      00
 895 06a1 8945E8   		movl	%eax, -24(%rbp)
 221:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 896              		.loc 1 221 0
 897 06a4 837DE800 		cmpl	$0, -24(%rbp)
 898 06a8 741D     		je	.L51
 899              		.loc 1 221 0 is_stmt 0 discriminator 1
 900 06aa 488B45A8 		movq	-88(%rbp), %rax
 901 06ae BE000000 		movl	$.LC13, %esi
 901      00
 902 06b3 4889C7   		movq	%rax, %rdi
 903 06b6 E8000000 		call	errPrefix
 903      00
 904 06bb C745E001 		movl	$1, -32(%rbp)
 904      000000
 905 06c2 E9890100 		jmp	.L49
 905      00
 906              	.L51:
 222:main.c        **** 		length = length - chunkSize;
 907              		.loc 1 222 0 is_stmt 1
 908 06c7 8B45E4   		movl	-28(%rbp), %eax
 909 06ca 2945C0   		subl	%eax, -64(%rbp)
 223:main.c        **** 		
 224:main.c        **** 		// Await chunk N-1
 225:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 910              		.loc 1 225 0
 911 06cd 488B7DA8 		movq	-88(%rbp), %rdi
 912 06d1 488D4DDC 		leaq	-36(%rbp), %rcx
 913 06d5 488D55DC 		leaq	-36(%rbp), %rdx
 914 06d9 488D75F0 		leaq	-16(%rbp), %rsi
 915 06dd 488B45C8 		movq	-56(%rbp), %rax
 916 06e1 4989F8   		movq	%rdi, %r8
 917 06e4 4889C7   		movq	%rax, %rdi
 918 06e7 E8000000 		call	flReadChannelAsyncAwait
 918      00
 919 06ec 8945E8   		movl	%eax, -24(%rbp)
 226:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 920              		.loc 1 226 0
 921 06ef 837DE800 		cmpl	$0, -24(%rbp)
 922 06f3 741D     		je	.L52
 923              		.loc 1 226 0 is_stmt 0 discriminator 1
 924 06f5 488B45A8 		movq	-88(%rbp), %rax
 925 06f9 BE000000 		movl	$.LC13, %esi
 925      00
 926 06fe 4889C7   		movq	%rax, %rdi
 927 0701 E8000000 		call	errPrefix
 927      00
 928 0706 C745E001 		movl	$1, -32(%rbp)
 928      000000
 929 070d E93E0100 		jmp	.L49
 929      00
 930              	.L52:
 227:main.c        **** 
 228:main.c        **** 		// Write chunk N-1 to file
 229:main.c        **** 		bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 931              		.loc 1 229 0 is_stmt 1
 932 0712 8B45DC   		movl	-36(%rbp), %eax
 933 0715 89C2     		movl	%eax, %edx
 934 0717 488B45F0 		movq	-16(%rbp), %rax
 935 071b 488B4DB8 		movq	-72(%rbp), %rcx
 936 071f BE010000 		movl	$1, %esi
 936      00
 937 0724 4889C7   		movq	%rax, %rdi
 938 0727 E8000000 		call	fwrite
 938      00
 939 072c 8945EC   		movl	%eax, -20(%rbp)
 230:main.c        **** 		CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 940              		.loc 1 230 0
 941 072f 8B45DC   		movl	-36(%rbp), %eax
 942 0732 3945EC   		cmpl	%eax, -20(%rbp)
 943 0735 741D     		je	.L53
 944              		.loc 1 230 0 is_stmt 0 discriminator 1
 945 0737 488B45A8 		movq	-88(%rbp), %rax
 946 073b BE000000 		movl	$.LC13, %esi
 946      00
 947 0740 4889C7   		movq	%rax, %rdi
 948 0743 E8000000 		call	errPrefix
 948      00
 949 0748 C745E00B 		movl	$11, -32(%rbp)
 949      000000
 950 074f E9FC0000 		jmp	.L49
 950      00
 951              	.L53:
 231:main.c        **** 
 232:main.c        **** 		// Checksum chunk N-1
 233:main.c        **** 		chunkSize = actualLength;
 952              		.loc 1 233 0 is_stmt 1
 953 0754 8B45DC   		movl	-36(%rbp), %eax
 954 0757 8945E4   		movl	%eax, -28(%rbp)
 234:main.c        **** 		ptr = recvData;
 955              		.loc 1 234 0
 956 075a 488B45F0 		movq	-16(%rbp), %rax
 957 075e 488945F8 		movq	%rax, -8(%rbp)
 235:main.c        **** 		while ( chunkSize-- ) {
 958              		.loc 1 235 0
 959 0762 EB16     		jmp	.L54
 960              	.L55:
 236:main.c        **** 			csVal = (uint16)(csVal + *ptr++);
 961              		.loc 1 236 0
 962 0764 488B45F8 		movq	-8(%rbp), %rax
 963 0768 488D5001 		leaq	1(%rax), %rdx
 964 076c 488955F8 		movq	%rdx, -8(%rbp)
 965 0770 0FB600   		movzbl	(%rax), %eax
 966 0773 0FB6C0   		movzbl	%al, %eax
 967 0776 660145DA 		addw	%ax, -38(%rbp)
 968              	.L54:
 235:main.c        **** 		while ( chunkSize-- ) {
 969              		.loc 1 235 0 discriminator 1
 970 077a 8B45E4   		movl	-28(%rbp), %eax
 971 077d 8D50FF   		leal	-1(%rax), %edx
 972 0780 8955E4   		movl	%edx, -28(%rbp)
 973 0783 85C0     		testl	%eax, %eax
 974 0785 75DD     		jne	.L55
 975              	.L50:
 217:main.c        **** 		// Read chunk N
 976              		.loc 1 217 0 discriminator 1
 977 0787 837DC000 		cmpl	$0, -64(%rbp)
 978 078b 0F85DEFE 		jne	.L56
 978      FFFF
 237:main.c        **** 		}
 238:main.c        **** 	}
 239:main.c        **** 
 240:main.c        **** 	// Await last chunk
 241:main.c        **** 	fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, error);
 979              		.loc 1 241 0
 980 0791 488B7DA8 		movq	-88(%rbp), %rdi
 981 0795 488D4DDC 		leaq	-36(%rbp), %rcx
 982 0799 488D55DC 		leaq	-36(%rbp), %rdx
 983 079d 488D75F0 		leaq	-16(%rbp), %rsi
 984 07a1 488B45C8 		movq	-56(%rbp), %rax
 985 07a5 4989F8   		movq	%rdi, %r8
 986 07a8 4889C7   		movq	%rax, %rdi
 987 07ab E8000000 		call	flReadChannelAsyncAwait
 987      00
 988 07b0 8945E8   		movl	%eax, -24(%rbp)
 242:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doRead()");
 989              		.loc 1 242 0
 990 07b3 837DE800 		cmpl	$0, -24(%rbp)
 991 07b7 741A     		je	.L57
 992              		.loc 1 242 0 is_stmt 0 discriminator 1
 993 07b9 488B45A8 		movq	-88(%rbp), %rax
 994 07bd BE000000 		movl	$.LC13, %esi
 994      00
 995 07c2 4889C7   		movq	%rax, %rdi
 996 07c5 E8000000 		call	errPrefix
 996      00
 997 07ca C745E001 		movl	$1, -32(%rbp)
 997      000000
 998 07d1 EB7D     		jmp	.L49
 999              	.L57:
 243:main.c        **** 	
 244:main.c        **** 	// Write last chunk to file
 245:main.c        **** 	bytesWritten = (uint32)fwrite(recvData, 1, actualLength, destFile);
 1000              		.loc 1 245 0 is_stmt 1
 1001 07d3 8B45DC   		movl	-36(%rbp), %eax
 1002 07d6 89C2     		movl	%eax, %edx
 1003 07d8 488B45F0 		movq	-16(%rbp), %rax
 1004 07dc 488B4DB8 		movq	-72(%rbp), %rcx
 1005 07e0 BE010000 		movl	$1, %esi
 1005      00
 1006 07e5 4889C7   		movq	%rax, %rdi
 1007 07e8 E8000000 		call	fwrite
 1007      00
 1008 07ed 8945EC   		movl	%eax, -20(%rbp)
 246:main.c        **** 	CHECK_STATUS(bytesWritten != actualLength, FLP_CANNOT_SAVE, cleanup, "doRead()");
 1009              		.loc 1 246 0
 1010 07f0 8B45DC   		movl	-36(%rbp), %eax
 1011 07f3 3945EC   		cmpl	%eax, -20(%rbp)
 1012 07f6 741A     		je	.L58
 1013              		.loc 1 246 0 is_stmt 0 discriminator 1
 1014 07f8 488B45A8 		movq	-88(%rbp), %rax
 1015 07fc BE000000 		movl	$.LC13, %esi
 1015      00
 1016 0801 4889C7   		movq	%rax, %rdi
 1017 0804 E8000000 		call	errPrefix
 1017      00
 1018 0809 C745E00B 		movl	$11, -32(%rbp)
 1018      000000
 1019 0810 EB3E     		jmp	.L49
 1020              	.L58:
 247:main.c        **** 
 248:main.c        **** 	// Checksum last chunk
 249:main.c        **** 	chunkSize = actualLength;
 1021              		.loc 1 249 0 is_stmt 1
 1022 0812 8B45DC   		movl	-36(%rbp), %eax
 1023 0815 8945E4   		movl	%eax, -28(%rbp)
 250:main.c        **** 	ptr = recvData;
 1024              		.loc 1 250 0
 1025 0818 488B45F0 		movq	-16(%rbp), %rax
 1026 081c 488945F8 		movq	%rax, -8(%rbp)
 251:main.c        **** 	while ( chunkSize-- ) {
 1027              		.loc 1 251 0
 1028 0820 EB16     		jmp	.L59
 1029              	.L60:
 252:main.c        **** 		csVal = (uint16)(csVal + *ptr++);
 1030              		.loc 1 252 0
 1031 0822 488B45F8 		movq	-8(%rbp), %rax
 1032 0826 488D5001 		leaq	1(%rax), %rdx
 1033 082a 488955F8 		movq	%rdx, -8(%rbp)
 1034 082e 0FB600   		movzbl	(%rax), %eax
 1035 0831 0FB6C0   		movzbl	%al, %eax
 1036 0834 660145DA 		addw	%ax, -38(%rbp)
 1037              	.L59:
 251:main.c        **** 	while ( chunkSize-- ) {
 1038              		.loc 1 251 0 discriminator 1
 1039 0838 8B45E4   		movl	-28(%rbp), %eax
 1040 083b 8D50FF   		leal	-1(%rax), %edx
 1041 083e 8955E4   		movl	%edx, -28(%rbp)
 1042 0841 85C0     		testl	%eax, %eax
 1043 0843 75DD     		jne	.L60
 253:main.c        **** 	}
 254:main.c        **** 	
 255:main.c        **** 	// Return checksum to caller
 256:main.c        **** 	*checksum = csVal;
 1044              		.loc 1 256 0
 1045 0845 488B45B0 		movq	-80(%rbp), %rax
 1046 0849 0FB755DA 		movzwl	-38(%rbp), %edx
 1047 084d 668910   		movw	%dx, (%rax)
 1048              	.L49:
 257:main.c        **** cleanup:
 258:main.c        **** 	return retVal;
 1049              		.loc 1 258 0
 1050 0850 8B45E0   		movl	-32(%rbp), %eax
 259:main.c        **** }
 1051              		.loc 1 259 0
 1052 0853 C9       		leave
 1053              		.cfi_def_cfa 7, 8
 1054 0854 C3       		ret
 1055              		.cfi_endproc
 1056              	.LFE18:
 1058              		.section	.rodata
 1059              	.LC14:
 1060 0151 646F5772 		.string	"doWrite()"
 1060      69746528 
 1060      2900
 1061              		.text
 1063              	doWrite:
 1064              	.LFB19:
 260:main.c        **** 
 261:main.c        **** static ReturnCode doWrite(
 262:main.c        **** 	struct FLContext *handle, uint8 chan, FILE *srcFile, size_t *length, uint16 *checksum,
 263:main.c        **** 	const char **error)
 264:main.c        **** {
 1065              		.loc 1 264 0
 1066              		.cfi_startproc
 1067 0855 55       		pushq	%rbp
 1068              		.cfi_def_cfa_offset 16
 1069              		.cfi_offset 6, -16
 1070 0856 4889E5   		movq	%rsp, %rbp
 1071              		.cfi_def_cfa_register 6
 1072 0859 53       		pushq	%rbx
 1073 085a 4881EC78 		subq	$65656, %rsp
 1073      000100
 1074              		.cfi_offset 3, -24
 1075 0861 4889BDA8 		movq	%rdi, -65624(%rbp)
 1075      FFFEFF
 1076 0868 89F0     		movl	%esi, %eax
 1077 086a 48899598 		movq	%rdx, -65640(%rbp)
 1077      FFFEFF
 1078 0871 48898D90 		movq	%rcx, -65648(%rbp)
 1078      FFFEFF
 1079 0878 4C898588 		movq	%r8, -65656(%rbp)
 1079      FFFEFF
 1080 087f 4C898D80 		movq	%r9, -65664(%rbp)
 1080      FFFEFF
 1081 0886 8885A4FF 		movb	%al, -65628(%rbp)
 1081      FEFF
 1082              		.loc 1 264 0
 1083 088c 64488B04 		movq	%fs:40, %rax
 1083      25280000 
 1083      00
 1084 0895 488945E8 		movq	%rax, -24(%rbp)
 1085 0899 31C0     		xorl	%eax, %eax
 265:main.c        **** 	ReturnCode retVal = FLP_SUCCESS;
 1086              		.loc 1 265 0
 1087 089b C785B8FF 		movl	$0, -65608(%rbp)
 1087      FEFF0000 
 1087      0000
 266:main.c        **** 	size_t bytesRead, i;
 267:main.c        **** 	FLStatus fStatus;
 268:main.c        **** 	const uint8 *ptr;
 269:main.c        **** 	uint16 csVal = 0x0000;
 1088              		.loc 1 269 0
 1089 08a5 66C785B6 		movw	$0, -65610(%rbp)
 1089      FFFEFF00 
 1089      00
 270:main.c        **** 	size_t lenVal = 0;
 1090              		.loc 1 270 0
 1091 08ae 48C785D0 		movq	$0, -65584(%rbp)
 1091      FFFEFF00 
 1091      000000
 1092              	.L68:
 271:main.c        **** 	#define WRITE_MAX (65536 - 5)
 272:main.c        **** 	uint8 buffer[WRITE_MAX];
 273:main.c        **** 
 274:main.c        **** 	do {
 275:main.c        **** 		// Read Nth chunk
 276:main.c        **** 		bytesRead = fread(buffer, 1, WRITE_MAX, srcFile);
 1093              		.loc 1 276 0
 1094 08b9 488B9598 		movq	-65640(%rbp), %rdx
 1094      FFFEFF
 1095 08c0 488D85E0 		leaq	-65568(%rbp), %rax
 1095      FFFEFF
 1096 08c7 4889D1   		movq	%rdx, %rcx
 1097 08ca BAFBFF00 		movl	$65531, %edx
 1097      00
 1098 08cf BE010000 		movl	$1, %esi
 1098      00
 1099 08d4 4889C7   		movq	%rax, %rdi
 1100 08d7 E8000000 		call	fread
 1100      00
 1101 08dc 488985D8 		movq	%rax, -65576(%rbp)
 1101      FFFEFF
 277:main.c        **** 		if ( bytesRead ) {
 1102              		.loc 1 277 0
 1103 08e3 4883BDD8 		cmpq	$0, -65576(%rbp)
 1103      FFFEFF00 
 1104 08eb 0F84C200 		je	.L63
 1104      0000
 278:main.c        **** 			// Update running total
 279:main.c        **** 			lenVal = lenVal + bytesRead;
 1105              		.loc 1 279 0
 1106 08f1 488B85D8 		movq	-65576(%rbp), %rax
 1106      FFFEFF
 1107 08f8 480185D0 		addq	%rax, -65584(%rbp)
 1107      FFFEFF
 280:main.c        **** 
 281:main.c        **** 			// Submit Nth chunk
 282:main.c        **** 			fStatus = flWriteChannelAsync(handle, chan, bytesRead, buffer, error);
 1108              		.loc 1 282 0
 1109 08ff 0FB6B5A4 		movzbl	-65628(%rbp), %esi
 1109      FFFEFF
 1110 0906 488BBD80 		movq	-65664(%rbp), %rdi
 1110      FFFEFF
 1111 090d 488D8DE0 		leaq	-65568(%rbp), %rcx
 1111      FFFEFF
 1112 0914 488B95D8 		movq	-65576(%rbp), %rdx
 1112      FFFEFF
 1113 091b 488B85A8 		movq	-65624(%rbp), %rax
 1113      FFFEFF
 1114 0922 4989F8   		movq	%rdi, %r8
 1115 0925 4889C7   		movq	%rax, %rdi
 1116 0928 E8000000 		call	flWriteChannelAsync
 1116      00
 1117 092d 8985BCFF 		movl	%eax, -65604(%rbp)
 1117      FEFF
 283:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1118              		.loc 1 283 0
 1119 0933 83BDBCFF 		cmpl	$0, -65604(%rbp)
 1119      FEFF00
 1120 093a 7423     		je	.L64
 1121              		.loc 1 283 0 is_stmt 0 discriminator 1
 1122 093c 488B8580 		movq	-65664(%rbp), %rax
 1122      FFFEFF
 1123 0943 BE000000 		movl	$.LC14, %esi
 1123      00
 1124 0948 4889C7   		movq	%rax, %rdi
 1125 094b E8000000 		call	errPrefix
 1125      00
 1126 0950 C785B8FF 		movl	$1, -65608(%rbp)
 1126      FEFF0100 
 1126      0000
 1127 095a E9CF0000 		jmp	.L65
 1127      00
 1128              	.L64:
 284:main.c        **** 
 285:main.c        **** 			// Checksum Nth chunk
 286:main.c        **** 			i = bytesRead;
 1129              		.loc 1 286 0 is_stmt 1
 1130 095f 488B85D8 		movq	-65576(%rbp), %rax
 1130      FFFEFF
 1131 0966 488985C0 		movq	%rax, -65600(%rbp)
 1131      FFFEFF
 287:main.c        **** 			ptr = buffer;
 1132              		.loc 1 287 0
 1133 096d 488D85E0 		leaq	-65568(%rbp), %rax
 1133      FFFEFF
 1134 0974 488985C8 		movq	%rax, -65592(%rbp)
 1134      FFFEFF
 288:main.c        **** 			while ( i-- ) {
 1135              		.loc 1 288 0
 1136 097b EB1F     		jmp	.L66
 1137              	.L67:
 289:main.c        **** 				csVal = (uint16)(csVal + *ptr++);
 1138              		.loc 1 289 0
 1139 097d 488B85C8 		movq	-65592(%rbp), %rax
 1139      FFFEFF
 1140 0984 488D5001 		leaq	1(%rax), %rdx
 1141 0988 488995C8 		movq	%rdx, -65592(%rbp)
 1141      FFFEFF
 1142 098f 0FB600   		movzbl	(%rax), %eax
 1143 0992 0FB6C0   		movzbl	%al, %eax
 1144 0995 660185B6 		addw	%ax, -65610(%rbp)
 1144      FFFEFF
 1145              	.L66:
 288:main.c        **** 			while ( i-- ) {
 1146              		.loc 1 288 0 discriminator 1
 1147 099c 488B85C0 		movq	-65600(%rbp), %rax
 1147      FFFEFF
 1148 09a3 488D50FF 		leaq	-1(%rax), %rdx
 1149 09a7 488995C0 		movq	%rdx, -65600(%rbp)
 1149      FFFEFF
 1150 09ae 4885C0   		testq	%rax, %rax
 1151 09b1 75CA     		jne	.L67
 1152              	.L63:
 290:main.c        **** 			}
 291:main.c        **** 		}
 292:main.c        **** 	} while ( bytesRead == WRITE_MAX );
 1153              		.loc 1 292 0
 1154 09b3 4881BDD8 		cmpq	$65531, -65576(%rbp)
 1154      FFFEFFFB 
 1154      FF0000
 1155 09be 0F84F5FE 		je	.L68
 1155      FFFF
 293:main.c        **** 
 294:main.c        **** 	// Wait for writes to be received. This is optional, but it's only fair if we're benchmarking to
 295:main.c        **** 	// actually wait for the work to be completed.
 296:main.c        **** 	fStatus = flAwaitAsyncWrites(handle, error);
 1156              		.loc 1 296 0
 1157 09c4 488B9580 		movq	-65664(%rbp), %rdx
 1157      FFFEFF
 1158 09cb 488B85A8 		movq	-65624(%rbp), %rax
 1158      FFFEFF
 1159 09d2 4889D6   		movq	%rdx, %rsi
 1160 09d5 4889C7   		movq	%rax, %rdi
 1161 09d8 E8000000 		call	flAwaitAsyncWrites
 1161      00
 1162 09dd 8985BCFF 		movl	%eax, -65604(%rbp)
 1162      FEFF
 297:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup, "doWrite()");
 1163              		.loc 1 297 0
 1164 09e3 83BDBCFF 		cmpl	$0, -65604(%rbp)
 1164      FEFF00
 1165 09ea 7420     		je	.L69
 1166              		.loc 1 297 0 is_stmt 0 discriminator 1
 1167 09ec 488B8580 		movq	-65664(%rbp), %rax
 1167      FFFEFF
 1168 09f3 BE000000 		movl	$.LC14, %esi
 1168      00
 1169 09f8 4889C7   		movq	%rax, %rdi
 1170 09fb E8000000 		call	errPrefix
 1170      00
 1171 0a00 C785B8FF 		movl	$1, -65608(%rbp)
 1171      FEFF0100 
 1171      0000
 1172 0a0a EB22     		jmp	.L65
 1173              	.L69:
 298:main.c        **** 
 299:main.c        **** 	// Return checksum & length to caller
 300:main.c        **** 	*checksum = csVal;
 1174              		.loc 1 300 0 is_stmt 1
 1175 0a0c 488B8588 		movq	-65656(%rbp), %rax
 1175      FFFEFF
 1176 0a13 0FB795B6 		movzwl	-65610(%rbp), %edx
 1176      FFFEFF
 1177 0a1a 668910   		movw	%dx, (%rax)
 301:main.c        **** 	*length = lenVal;
 1178              		.loc 1 301 0
 1179 0a1d 488B8590 		movq	-65648(%rbp), %rax
 1179      FFFEFF
 1180 0a24 488B95D0 		movq	-65584(%rbp), %rdx
 1180      FFFEFF
 1181 0a2b 488910   		movq	%rdx, (%rax)
 1182              	.L65:
 302:main.c        **** cleanup:
 303:main.c        **** 	return retVal;
 1183              		.loc 1 303 0
 1184 0a2e 8B85B8FF 		movl	-65608(%rbp), %eax
 1184      FEFF
 304:main.c        **** }
 1185              		.loc 1 304 0
 1186 0a34 488B5DE8 		movq	-24(%rbp), %rbx
 1187 0a38 6448331C 		xorq	%fs:40, %rbx
 1187      25280000 
 1187      00
 1188 0a41 7405     		je	.L71
 1189 0a43 E8000000 		call	__stack_chk_fail
 1189      00
 1190              	.L71:
 1191 0a48 4881C478 		addq	$65656, %rsp
 1191      000100
 1192 0a4f 5B       		popq	%rbx
 1193 0a50 5D       		popq	%rbp
 1194              		.cfi_def_cfa 7, 8
 1195 0a51 C3       		ret
 1196              		.cfi_endproc
 1197              	.LFE19:
 1199              		.section	.rodata
 1200              	.LC15:
 1201 015b 776200   		.string	"wb"
 1202 015e 0000     		.align 8
 1203              	.LC18:
 1204 0160 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 1204      20256420 
 1204      62797465 
 1204      73202863 
 1204      6865636B 
 1205              	.LC19:
 1206 019d 726200   		.string	"rb"
 1207              		.align 8
 1208              	.LC20:
 1209 01a0 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 1209      6520257A 
 1209      75206279 
 1209      74657320 
 1209      28636865 
 1210              	.LC21:
 1211 01de 25732061 		.string	"%s at column %d\n  %s\n  "
 1211      7420636F 
 1211      6C756D6E 
 1211      2025640A 
 1211      20202573 
 1212              	.LC22:
 1213 01f6 5E0A00   		.string	"^\n"
 1214              		.text
 1216              	parseLine:
 1217              	.LFB20:
 305:main.c        **** 
 306:main.c        **** static int parseLine(struct FLContext *handle, const char *line, const char **error) {
 1218              		.loc 1 306 0
 1219              		.cfi_startproc
 1220 0a52 55       		pushq	%rbp
 1221              		.cfi_def_cfa_offset 16
 1222              		.cfi_offset 6, -16
 1223 0a53 4889E5   		movq	%rsp, %rbp
 1224              		.cfi_def_cfa_register 6
 1225 0a56 4881EC00 		subq	$256, %rsp
 1225      010000
 1226 0a5d 4889BD18 		movq	%rdi, -232(%rbp)
 1226      FFFFFF
 1227 0a64 4889B510 		movq	%rsi, -240(%rbp)
 1227      FFFFFF
 1228 0a6b 48899508 		movq	%rdx, -248(%rbp)
 1228      FFFFFF
 307:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, status;
 1229              		.loc 1 307 0
 1230 0a72 C78524FF 		movl	$0, -220(%rbp)
 1230      FFFF0000 
 1230      0000
 308:main.c        **** 	FLStatus fStatus;
 309:main.c        **** 	struct Buffer dataFromFPGA = {0,};
 1231              		.loc 1 309 0
 1232 0a7c 48C745E0 		movq	$0, -32(%rbp)
 1232      00000000 
 1233 0a84 48C745E8 		movq	$0, -24(%rbp)
 1233      00000000 
 1234 0a8c 48C745F0 		movq	$0, -16(%rbp)
 1234      00000000 
 1235 0a94 48C745F8 		movq	$0, -8(%rbp)
 1235      00000000 
 310:main.c        **** 	BufferStatus bStatus;
 311:main.c        **** 	uint8 *data = NULL;
 1236              		.loc 1 311 0
 1237 0a9c 48C78558 		movq	$0, -168(%rbp)
 1237      FFFFFF00 
 1237      000000
 312:main.c        **** 	char *fileName = NULL;
 1238              		.loc 1 312 0
 1239 0aa7 48C78560 		movq	$0, -160(%rbp)
 1239      FFFFFF00 
 1239      000000
 313:main.c        **** 	FILE *file = NULL;
 1240              		.loc 1 313 0
 1241 0ab2 48C78568 		movq	$0, -152(%rbp)
 1241      FFFFFF00 
 1241      000000
 314:main.c        **** 	double totalTime, speed;
 315:main.c        **** 	#ifdef WIN32
 316:main.c        **** 		LARGE_INTEGER tvStart, tvEnd, freq;
 317:main.c        **** 		DWORD_PTR mask = 1;
 318:main.c        **** 		SetThreadAffinityMask(GetCurrentThread(), mask);
 319:main.c        **** 		QueryPerformanceFrequency(&freq);
 320:main.c        **** 	#else
 321:main.c        **** 		struct timeval tvStart, tvEnd;
 322:main.c        **** 		long long startTime, endTime;
 323:main.c        **** 	#endif
 324:main.c        **** 	bStatus = bufInitialise(&dataFromFPGA, 1024, 0x00, error);
 1242              		.loc 1 324 0
 1243 0abd 488B9508 		movq	-248(%rbp), %rdx
 1243      FFFFFF
 1244 0ac4 488D45E0 		leaq	-32(%rbp), %rax
 1245 0ac8 4889D1   		movq	%rdx, %rcx
 1246 0acb BA000000 		movl	$0, %edx
 1246      00
 1247 0ad0 BE000400 		movl	$1024, %esi
 1247      00
 1248 0ad5 4889C7   		movq	%rax, %rdi
 1249 0ad8 E8000000 		call	bufInitialise
 1249      00
 1250 0add 898530FF 		movl	%eax, -208(%rbp)
 1250      FFFF
 325:main.c        **** 	CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1251              		.loc 1 325 0
 1252 0ae3 83BD30FF 		cmpl	$0, -208(%rbp)
 1252      FFFF00
 1253 0aea 740F     		je	.L73
 1254              		.loc 1 325 0 is_stmt 0 discriminator 1
 1255 0aec C78524FF 		movl	$1, -220(%rbp)
 1255      FFFF0100 
 1255      0000
 1256 0af6 E9A10E00 		jmp	.L74
 1256      00
 1257              	.L73:
 326:main.c        **** 	ptr = line;
 1258              		.loc 1 326 0 is_stmt 1
 1259 0afb 488B8510 		movq	-240(%rbp), %rax
 1259      FFFFFF
 1260 0b02 48890500 		movq	%rax, ptr(%rip)
 1260      000000
 327:main.c        **** 	do {
 328:main.c        **** 		while ( *ptr == ';' ) {
 1261              		.loc 1 328 0
 1262 0b09 EB14     		jmp	.L75
 1263              	.L142:
 1264 0b0b EB12     		jmp	.L75
 1265              	.L76:
 329:main.c        **** 			ptr++;
 1266              		.loc 1 329 0
 1267 0b0d 488B0500 		movq	ptr(%rip), %rax
 1267      000000
 1268 0b14 4883C001 		addq	$1, %rax
 1269 0b18 48890500 		movq	%rax, ptr(%rip)
 1269      000000
 1270              	.L75:
 328:main.c        **** 			ptr++;
 1271              		.loc 1 328 0 discriminator 1
 1272 0b1f 488B0500 		movq	ptr(%rip), %rax
 1272      000000
 1273 0b26 0FB600   		movzbl	(%rax), %eax
 1274 0b29 3C3B     		cmpb	$59, %al
 1275 0b2b 74E0     		je	.L76
 330:main.c        **** 		}
 331:main.c        **** 		switch ( *ptr ) {
 1276              		.loc 1 331 0
 1277 0b2d 488B0500 		movq	ptr(%rip), %rax
 1277      000000
 1278 0b34 0FB600   		movzbl	(%rax), %eax
 1279 0b37 0FBEC0   		movsbl	%al, %eax
 1280 0b3a 83F872   		cmpl	$114, %eax
 1281 0b3d 7417     		je	.L78
 1282 0b3f 83F877   		cmpl	$119, %eax
 1283 0b42 0F84BC06 		je	.L79
 1283      0000
 1284 0b48 83F82B   		cmpl	$43, %eax
 1285 0b4b 0F84120D 		je	.L80
 1285      0000
 1286 0b51 E9F90D00 		jmp	.L149
 1286      00
 1287              	.L78:
 1288              	.LBB5:
 332:main.c        **** 		case 'r':{
 333:main.c        **** 			uint32 chan;
 334:main.c        **** 			uint32 length = 1;
 1289              		.loc 1 334 0
 1290 0b56 C78528FF 		movl	$1, -216(%rbp)
 1290      FFFF0100 
 1290      0000
 335:main.c        **** 			char *end;
 336:main.c        **** 			ptr++;
 1291              		.loc 1 336 0
 1292 0b60 488B0500 		movq	ptr(%rip), %rax
 1292      000000
 1293 0b67 4883C001 		addq	$1, %rax
 1294 0b6b 48890500 		movq	%rax, ptr(%rip)
 1294      000000
 337:main.c        **** 			
 338:main.c        **** 			// Get the channel to be read:
 339:main.c        **** 			errno = 0;
 1295              		.loc 1 339 0
 1296 0b72 E8000000 		call	__errno_location
 1296      00
 1297 0b77 C7000000 		movl	$0, (%rax)
 1297      0000
 340:main.c        **** 			chan = (uint32)strtoul(ptr, &end, 16);
 1298              		.loc 1 340 0
 1299 0b7d 488B0500 		movq	ptr(%rip), %rax
 1299      000000
 1300 0b84 488D8D50 		leaq	-176(%rbp), %rcx
 1300      FFFFFF
 1301 0b8b BA100000 		movl	$16, %edx
 1301      00
 1302 0b90 4889CE   		movq	%rcx, %rsi
 1303 0b93 4889C7   		movq	%rax, %rdi
 1304 0b96 E8000000 		call	strtoul
 1304      00
 1305 0b9b 898534FF 		movl	%eax, -204(%rbp)
 1305      FFFF
 341:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1306              		.loc 1 341 0
 1307 0ba1 E8000000 		call	__errno_location
 1307      00
 1308 0ba6 8B00     		movl	(%rax), %eax
 1309 0ba8 85C0     		testl	%eax, %eax
 1310 0baa 740F     		je	.L81
 1311              		.loc 1 341 0 is_stmt 0 discriminator 1
 1312 0bac C78524FF 		movl	$2, -220(%rbp)
 1312      FFFF0200 
 1312      0000
 1313 0bb6 E9E10D00 		jmp	.L74
 1313      00
 1314              	.L81:
 342:main.c        **** 
 343:main.c        **** 			// Ensure that it's 0-127
 344:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1315              		.loc 1 344 0 is_stmt 1
 1316 0bbb 83BD34FF 		cmpl	$127, -204(%rbp)
 1316      FFFF7F
 1317 0bc2 760F     		jbe	.L83
 1318              		.loc 1 344 0 is_stmt 0 discriminator 1
 1319 0bc4 C78524FF 		movl	$3, -220(%rbp)
 1319      FFFF0300 
 1319      0000
 1320 0bce E9C90D00 		jmp	.L74
 1320      00
 1321              	.L83:
 345:main.c        **** 			ptr = end;
 1322              		.loc 1 345 0 is_stmt 1
 1323 0bd3 488B8550 		movq	-176(%rbp), %rax
 1323      FFFFFF
 1324 0bda 48890500 		movq	%rax, ptr(%rip)
 1324      000000
 346:main.c        **** 
 347:main.c        **** 			// Only three valid chars at this point:
 348:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 1325              		.loc 1 348 0
 1326 0be1 488B0500 		movq	ptr(%rip), %rax
 1326      000000
 1327 0be8 0FB600   		movzbl	(%rax), %eax
 1328 0beb 84C0     		testb	%al, %al
 1329 0bed 742B     		je	.L84
 1330              		.loc 1 348 0 is_stmt 0 discriminator 1
 1331 0bef 488B0500 		movq	ptr(%rip), %rax
 1331      000000
 1332 0bf6 0FB600   		movzbl	(%rax), %eax
 1333 0bf9 3C3B     		cmpb	$59, %al
 1334 0bfb 741D     		je	.L84
 1335 0bfd 488B0500 		movq	ptr(%rip), %rax
 1335      000000
 1336 0c04 0FB600   		movzbl	(%rax), %eax
 1337 0c07 3C20     		cmpb	$32, %al
 1338 0c09 740F     		je	.L84
 1339 0c0b C78524FF 		movl	$5, -220(%rbp)
 1339      FFFF0500 
 1339      0000
 1340 0c15 E9820D00 		jmp	.L74
 1340      00
 1341              	.L84:
 349:main.c        **** 
 350:main.c        **** 			if ( *ptr == ' ' ) {
 1342              		.loc 1 350 0 is_stmt 1
 1343 0c1a 488B0500 		movq	ptr(%rip), %rax
 1343      000000
 1344 0c21 0FB600   		movzbl	(%rax), %eax
 1345 0c24 3C20     		cmpb	$32, %al
 1346 0c26 0F852602 		jne	.L85
 1346      0000
 351:main.c        **** 				ptr++;
 1347              		.loc 1 351 0
 1348 0c2c 488B0500 		movq	ptr(%rip), %rax
 1348      000000
 1349 0c33 4883C001 		addq	$1, %rax
 1350 0c37 48890500 		movq	%rax, ptr(%rip)
 1350      000000
 352:main.c        **** 
 353:main.c        **** 				// Get the read count:
 354:main.c        **** 				errno = 0;
 1351              		.loc 1 354 0
 1352 0c3e E8000000 		call	__errno_location
 1352      00
 1353 0c43 C7000000 		movl	$0, (%rax)
 1353      0000
 355:main.c        **** 				length = (uint32)strtoul(ptr, &end, 16);
 1354              		.loc 1 355 0
 1355 0c49 488B0500 		movq	ptr(%rip), %rax
 1355      000000
 1356 0c50 488D8D50 		leaq	-176(%rbp), %rcx
 1356      FFFFFF
 1357 0c57 BA100000 		movl	$16, %edx
 1357      00
 1358 0c5c 4889CE   		movq	%rcx, %rsi
 1359 0c5f 4889C7   		movq	%rax, %rdi
 1360 0c62 E8000000 		call	strtoul
 1360      00
 1361 0c67 898528FF 		movl	%eax, -216(%rbp)
 1361      FFFF
 356:main.c        **** 				CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1362              		.loc 1 356 0
 1363 0c6d E8000000 		call	__errno_location
 1363      00
 1364 0c72 8B00     		movl	(%rax), %eax
 1365 0c74 85C0     		testl	%eax, %eax
 1366 0c76 740F     		je	.L86
 1367              		.loc 1 356 0 is_stmt 0 discriminator 1
 1368 0c78 C78524FF 		movl	$2, -220(%rbp)
 1368      FFFF0200 
 1368      0000
 1369 0c82 E9150D00 		jmp	.L74
 1369      00
 1370              	.L86:
 357:main.c        **** 				ptr = end;
 1371              		.loc 1 357 0 is_stmt 1
 1372 0c87 488B8550 		movq	-176(%rbp), %rax
 1372      FFFFFF
 1373 0c8e 48890500 		movq	%rax, ptr(%rip)
 1373      000000
 358:main.c        **** 				
 359:main.c        **** 				// Only three valid chars at this point:
 360:main.c        **** 				CHECK_STATUS(*ptr != '\0' && *ptr != ';' && *ptr != ' ', FLP_ILL_CHAR, cleanup);
 1374              		.loc 1 360 0
 1375 0c95 488B0500 		movq	ptr(%rip), %rax
 1375      000000
 1376 0c9c 0FB600   		movzbl	(%rax), %eax
 1377 0c9f 84C0     		testb	%al, %al
 1378 0ca1 742B     		je	.L87
 1379              		.loc 1 360 0 is_stmt 0 discriminator 1
 1380 0ca3 488B0500 		movq	ptr(%rip), %rax
 1380      000000
 1381 0caa 0FB600   		movzbl	(%rax), %eax
 1382 0cad 3C3B     		cmpb	$59, %al
 1383 0caf 741D     		je	.L87
 1384 0cb1 488B0500 		movq	ptr(%rip), %rax
 1384      000000
 1385 0cb8 0FB600   		movzbl	(%rax), %eax
 1386 0cbb 3C20     		cmpb	$32, %al
 1387 0cbd 740F     		je	.L87
 1388 0cbf C78524FF 		movl	$5, -220(%rbp)
 1388      FFFF0500 
 1388      0000
 1389 0cc9 E9CE0C00 		jmp	.L74
 1389      00
 1390              	.L87:
 361:main.c        **** 				if ( *ptr == ' ' ) {
 1391              		.loc 1 361 0 is_stmt 1
 1392 0cce 488B0500 		movq	ptr(%rip), %rax
 1392      000000
 1393 0cd5 0FB600   		movzbl	(%rax), %eax
 1394 0cd8 3C20     		cmpb	$32, %al
 1395 0cda 0F857201 		jne	.L85
 1395      0000
 1396              	.LBB6:
 362:main.c        **** 					const char *p;
 363:main.c        **** 					const char quoteChar = *++ptr;
 1397              		.loc 1 363 0
 1398 0ce0 488B0500 		movq	ptr(%rip), %rax
 1398      000000
 1399 0ce7 4883C001 		addq	$1, %rax
 1400 0ceb 48890500 		movq	%rax, ptr(%rip)
 1400      000000
 1401 0cf2 488B0500 		movq	ptr(%rip), %rax
 1401      000000
 1402 0cf9 0FB600   		movzbl	(%rax), %eax
 1403 0cfc 888520FF 		movb	%al, -224(%rbp)
 1403      FFFF
 364:main.c        **** 					CHECK_STATUS(
 1404              		.loc 1 364 0
 1405 0d02 80BD20FF 		cmpb	$34, -224(%rbp)
 1405      FFFF22
 1406 0d09 7418     		je	.L88
 1407              		.loc 1 364 0 is_stmt 0 discriminator 1
 1408 0d0b 80BD20FF 		cmpb	$39, -224(%rbp)
 1408      FFFF27
 1409 0d12 740F     		je	.L88
 1410 0d14 C78524FF 		movl	$5, -220(%rbp)
 1410      FFFF0500 
 1410      0000
 1411 0d1e E9790C00 		jmp	.L74
 1411      00
 1412              	.L88:
 365:main.c        **** 						(quoteChar != '"' && quoteChar != '\''),
 366:main.c        **** 						FLP_ILL_CHAR, cleanup);
 367:main.c        **** 					
 368:main.c        **** 					// Get the file to write bytes to:
 369:main.c        **** 					ptr++;
 1413              		.loc 1 369 0 is_stmt 1
 1414 0d23 488B0500 		movq	ptr(%rip), %rax
 1414      000000
 1415 0d2a 4883C001 		addq	$1, %rax
 1416 0d2e 48890500 		movq	%rax, ptr(%rip)
 1416      000000
 370:main.c        **** 					p = ptr;
 1417              		.loc 1 370 0
 1418 0d35 488B0500 		movq	ptr(%rip), %rax
 1418      000000
 1419 0d3c 48898570 		movq	%rax, -144(%rbp)
 1419      FFFFFF
 371:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1420              		.loc 1 371 0
 1421 0d43 EB08     		jmp	.L89
 1422              	.L91:
 372:main.c        **** 						p++;
 1423              		.loc 1 372 0
 1424 0d45 48838570 		addq	$1, -144(%rbp)
 1424      FFFFFF01 
 1425              	.L89:
 371:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1426              		.loc 1 371 0 discriminator 1
 1427 0d4d 488B8570 		movq	-144(%rbp), %rax
 1427      FFFFFF
 1428 0d54 0FB600   		movzbl	(%rax), %eax
 1429 0d57 3A8520FF 		cmpb	-224(%rbp), %al
 1429      FFFF
 1430 0d5d 740E     		je	.L90
 371:main.c        **** 					while ( *p != quoteChar && *p != '\0' ) {
 1431              		.loc 1 371 0 is_stmt 0 discriminator 2
 1432 0d5f 488B8570 		movq	-144(%rbp), %rax
 1432      FFFFFF
 1433 0d66 0FB600   		movzbl	(%rax), %eax
 1434 0d69 84C0     		testb	%al, %al
 1435 0d6b 75D8     		jne	.L91
 1436              	.L90:
 373:main.c        **** 					}
 374:main.c        **** 					CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1437              		.loc 1 374 0 is_stmt 1
 1438 0d6d 488B8570 		movq	-144(%rbp), %rax
 1438      FFFFFF
 1439 0d74 0FB600   		movzbl	(%rax), %eax
 1440 0d77 84C0     		testb	%al, %al
 1441 0d79 750F     		jne	.L92
 1442              		.loc 1 374 0 is_stmt 0 discriminator 1
 1443 0d7b C78524FF 		movl	$6, -220(%rbp)
 1443      FFFF0600 
 1443      0000
 1444 0d85 E9120C00 		jmp	.L74
 1444      00
 1445              	.L92:
 375:main.c        **** 					fileName = malloc((size_t)(p - ptr + 1));
 1446              		.loc 1 375 0 is_stmt 1
 1447 0d8a 488B9570 		movq	-144(%rbp), %rdx
 1447      FFFFFF
 1448 0d91 488B0500 		movq	ptr(%rip), %rax
 1448      000000
 1449 0d98 4829C2   		subq	%rax, %rdx
 1450 0d9b 4889D0   		movq	%rdx, %rax
 1451 0d9e 4883C001 		addq	$1, %rax
 1452 0da2 4889C7   		movq	%rax, %rdi
 1453 0da5 E8000000 		call	malloc
 1453      00
 1454 0daa 48898560 		movq	%rax, -160(%rbp)
 1454      FFFFFF
 376:main.c        **** 					CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1455              		.loc 1 376 0
 1456 0db1 4883BD60 		cmpq	$0, -160(%rbp)
 1456      FFFFFF00 
 1457 0db9 750F     		jne	.L93
 1458              		.loc 1 376 0 is_stmt 0 discriminator 1
 1459 0dbb C78524FF 		movl	$7, -220(%rbp)
 1459      FFFF0700 
 1459      0000
 1460 0dc5 E9D20B00 		jmp	.L74
 1460      00
 1461              	.L93:
 377:main.c        **** 					CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1462              		.loc 1 377 0 is_stmt 1
 1463 0dca 488B9570 		movq	-144(%rbp), %rdx
 1463      FFFFFF
 1464 0dd1 488B0500 		movq	ptr(%rip), %rax
 1464      000000
 1465 0dd8 4839C2   		cmpq	%rax, %rdx
 1466 0ddb 750F     		jne	.L94
 1467              		.loc 1 377 0 is_stmt 0 discriminator 1
 1468 0ddd C78524FF 		movl	$8, -220(%rbp)
 1468      FFFF0800 
 1468      0000
 1469 0de7 E9B00B00 		jmp	.L74
 1469      00
 1470              	.L94:
 378:main.c        **** 					strncpy(fileName, ptr, (size_t)(p - ptr));
 1471              		.loc 1 378 0 is_stmt 1
 1472 0dec 488B9570 		movq	-144(%rbp), %rdx
 1472      FFFFFF
 1473 0df3 488B0500 		movq	ptr(%rip), %rax
 1473      000000
 1474 0dfa 4829C2   		subq	%rax, %rdx
 1475 0dfd 4889D0   		movq	%rdx, %rax
 1476 0e00 4889C2   		movq	%rax, %rdx
 1477 0e03 488B0D00 		movq	ptr(%rip), %rcx
 1477      000000
 1478 0e0a 488B8560 		movq	-160(%rbp), %rax
 1478      FFFFFF
 1479 0e11 4889CE   		movq	%rcx, %rsi
 1480 0e14 4889C7   		movq	%rax, %rdi
 1481 0e17 E8000000 		call	strncpy
 1481      00
 379:main.c        **** 					fileName[p - ptr] = '\0';
 1482              		.loc 1 379 0
 1483 0e1c 488B9570 		movq	-144(%rbp), %rdx
 1483      FFFFFF
 1484 0e23 488B0500 		movq	ptr(%rip), %rax
 1484      000000
 1485 0e2a 4829C2   		subq	%rax, %rdx
 1486 0e2d 4889D0   		movq	%rdx, %rax
 1487 0e30 4889C2   		movq	%rax, %rdx
 1488 0e33 488B8560 		movq	-160(%rbp), %rax
 1488      FFFFFF
 1489 0e3a 4801D0   		addq	%rdx, %rax
 1490 0e3d C60000   		movb	$0, (%rax)
 380:main.c        **** 					ptr = p + 1;
 1491              		.loc 1 380 0
 1492 0e40 488B8570 		movq	-144(%rbp), %rax
 1492      FFFFFF
 1493 0e47 4883C001 		addq	$1, %rax
 1494 0e4b 48890500 		movq	%rax, ptr(%rip)
 1494      000000
 1495              	.L85:
 1496              	.LBE6:
 381:main.c        **** 				}
 382:main.c        **** 			}
 383:main.c        **** 			if ( fileName ) {
 1497              		.loc 1 383 0
 1498 0e52 4883BD60 		cmpq	$0, -160(%rbp)
 1498      FFFFFF00 
 1499 0e5a 0F84E201 		je	.L95
 1499      0000
 1500              	.LBB7:
 384:main.c        **** 				uint16 checksum = 0x0000;
 1501              		.loc 1 384 0
 1502 0e60 66C78548 		movw	$0, -184(%rbp)
 1502      FFFFFF00 
 1502      00
 385:main.c        **** 
 386:main.c        **** 				// Open file for writing
 387:main.c        **** 				file = fopen(fileName, "wb");
 1503              		.loc 1 387 0
 1504 0e69 488B8560 		movq	-160(%rbp), %rax
 1504      FFFFFF
 1505 0e70 BE000000 		movl	$.LC15, %esi
 1505      00
 1506 0e75 4889C7   		movq	%rax, %rdi
 1507 0e78 E8000000 		call	fopen
 1507      00
 1508 0e7d 48898568 		movq	%rax, -152(%rbp)
 1508      FFFFFF
 388:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 1509              		.loc 1 388 0
 1510 0e84 4883BD68 		cmpq	$0, -152(%rbp)
 1510      FFFFFF00 
 1511 0e8c 750F     		jne	.L96
 1512              		.loc 1 388 0 is_stmt 0 discriminator 1
 1513 0e8e C78524FF 		movl	$11, -220(%rbp)
 1513      FFFF0B00 
 1513      0000
 1514 0e98 E9FF0A00 		jmp	.L74
 1514      00
 1515              	.L96:
 389:main.c        **** 				free(fileName);
 1516              		.loc 1 389 0 is_stmt 1
 1517 0e9d 488B8560 		movq	-160(%rbp), %rax
 1517      FFFFFF
 1518 0ea4 4889C7   		movq	%rax, %rdi
 1519 0ea7 E8000000 		call	free
 1519      00
 390:main.c        **** 				fileName = NULL;
 1520              		.loc 1 390 0
 1521 0eac 48C78560 		movq	$0, -160(%rbp)
 1521      FFFFFF00 
 1521      000000
 391:main.c        **** 
 392:main.c        **** 				#ifdef WIN32
 393:main.c        **** 					QueryPerformanceCounter(&tvStart);
 394:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 395:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 396:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 397:main.c        **** 					totalTime /= freq.QuadPart;
 398:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 399:main.c        **** 				#else
 400:main.c        **** 					gettimeofday(&tvStart, NULL);
 1522              		.loc 1 400 0
 1523 0eb7 488D45C0 		leaq	-64(%rbp), %rax
 1524 0ebb BE000000 		movl	$0, %esi
 1524      00
 1525 0ec0 4889C7   		movq	%rax, %rdi
 1526 0ec3 E8000000 		call	gettimeofday
 1526      00
 401:main.c        **** 					status = doRead(handle, (uint8)chan, length, file, &checksum, error);
 1527              		.loc 1 401 0
 1528 0ec8 8B8534FF 		movl	-204(%rbp), %eax
 1528      FFFF
 1529 0ece 0FB6F0   		movzbl	%al, %esi
 1530 0ed1 4C8B8508 		movq	-248(%rbp), %r8
 1530      FFFFFF
 1531 0ed8 488DBD48 		leaq	-184(%rbp), %rdi
 1531      FFFFFF
 1532 0edf 488B8D68 		movq	-152(%rbp), %rcx
 1532      FFFFFF
 1533 0ee6 8B9528FF 		movl	-216(%rbp), %edx
 1533      FFFF
 1534 0eec 488B8518 		movq	-232(%rbp), %rax
 1534      FFFFFF
 1535 0ef3 4D89C1   		movq	%r8, %r9
 1536 0ef6 4989F8   		movq	%rdi, %r8
 1537 0ef9 4889C7   		movq	%rax, %rdi
 1538 0efc E8DEF6FF 		call	doRead
 1538      FF
 1539 0f01 898538FF 		movl	%eax, -200(%rbp)
 1539      FFFF
 402:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1540              		.loc 1 402 0
 1541 0f07 488D45D0 		leaq	-48(%rbp), %rax
 1542 0f0b BE000000 		movl	$0, %esi
 1542      00
 1543 0f10 4889C7   		movq	%rax, %rdi
 1544 0f13 E8000000 		call	gettimeofday
 1544      00
 403:main.c        **** 					startTime = tvStart.tv_sec;
 1545              		.loc 1 403 0
 1546 0f18 488B45C0 		movq	-64(%rbp), %rax
 1547 0f1c 48894590 		movq	%rax, -112(%rbp)
 404:main.c        **** 					startTime *= 1000000;
 1548              		.loc 1 404 0
 1549 0f20 488B4590 		movq	-112(%rbp), %rax
 1550 0f24 4869C040 		imulq	$1000000, %rax, %rax
 1550      420F00
 1551 0f2b 48894590 		movq	%rax, -112(%rbp)
 405:main.c        **** 					startTime += tvStart.tv_usec;
 1552              		.loc 1 405 0
 1553 0f2f 488B45C8 		movq	-56(%rbp), %rax
 1554 0f33 48014590 		addq	%rax, -112(%rbp)
 406:main.c        **** 					endTime = tvEnd.tv_sec;
 1555              		.loc 1 406 0
 1556 0f37 488B45D0 		movq	-48(%rbp), %rax
 1557 0f3b 48894598 		movq	%rax, -104(%rbp)
 407:main.c        **** 					endTime *= 1000000;
 1558              		.loc 1 407 0
 1559 0f3f 488B4598 		movq	-104(%rbp), %rax
 1560 0f43 4869C040 		imulq	$1000000, %rax, %rax
 1560      420F00
 1561 0f4a 48894598 		movq	%rax, -104(%rbp)
 408:main.c        **** 					endTime += tvEnd.tv_usec;
 1562              		.loc 1 408 0
 1563 0f4e 488B45D8 		movq	-40(%rbp), %rax
 1564 0f52 48014598 		addq	%rax, -104(%rbp)
 409:main.c        **** 					totalTime = (double)(endTime - startTime);
 1565              		.loc 1 409 0
 1566 0f56 488B4590 		movq	-112(%rbp), %rax
 1567 0f5a 488B5598 		movq	-104(%rbp), %rdx
 1568 0f5e 4829C2   		subq	%rax, %rdx
 1569 0f61 4889D0   		movq	%rdx, %rax
 1570 0f64 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1570      C0
 1571 0f69 F20F1145 		movsd	%xmm0, -96(%rbp)
 1571      A0
 410:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1572              		.loc 1 410 0
 1573 0f6e F20F1045 		movsd	-96(%rbp), %xmm0
 1573      A0
 1574 0f73 F20F100D 		movsd	.LC16(%rip), %xmm1
 1574      00000000 
 1575 0f7b F20F5EC1 		divsd	%xmm1, %xmm0
 1576 0f7f F20F1145 		movsd	%xmm0, -96(%rbp)
 1576      A0
 411:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1577              		.loc 1 411 0
 1578 0f84 8B8528FF 		movl	-216(%rbp), %eax
 1578      FFFF
 1579 0f8a 4885C0   		testq	%rax, %rax
 1580 0f8d 7807     		js	.L98
 1581 0f8f F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1581      C0
 1582 0f94 EB15     		jmp	.L99
 1583              	.L98:
 1584 0f96 4889C2   		movq	%rax, %rdx
 1585 0f99 48D1EA   		shrq	%rdx
 1586 0f9c 83E001   		andl	$1, %eax
 1587 0f9f 4809C2   		orq	%rax, %rdx
 1588 0fa2 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1588      C2
 1589 0fa7 F20F58C0 		addsd	%xmm0, %xmm0
 1590              	.L99:
 1591 0fab F20F1055 		movsd	-96(%rbp), %xmm2
 1591      A0
 1592 0fb0 F20F100D 		movsd	.LC17(%rip), %xmm1
 1592      00000000 
 1593 0fb8 F20F59CA 		mulsd	%xmm2, %xmm1
 1594 0fbc F20F5EC1 		divsd	%xmm1, %xmm0
 1595 0fc0 F20F1145 		movsd	%xmm0, -88(%rbp)
 1595      A8
 412:main.c        **** 				#endif
 413:main.c        **** 				if ( enableBenchmarking ) {
 1596              		.loc 1 413 0
 1597 0fc5 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1597      000000
 1598 0fcc 84C0     		testb	%al, %al
 1599 0fce 7438     		je	.L100
 414:main.c        **** 					printf(
 1600              		.loc 1 414 0
 1601 0fd0 0FB78548 		movzwl	-184(%rbp), %eax
 1601      FFFFFF
 1602 0fd7 0FB7D0   		movzwl	%ax, %edx
 1603 0fda 488B45A8 		movq	-88(%rbp), %rax
 1604 0fde 8B8D34FF 		movl	-204(%rbp), %ecx
 1604      FFFF
 1605 0fe4 8BB528FF 		movl	-216(%rbp), %esi
 1605      FFFF
 1606 0fea 48898500 		movq	%rax, -256(%rbp)
 1606      FFFFFF
 1607 0ff1 F20F1085 		movsd	-256(%rbp), %xmm0
 1607      00FFFFFF 
 1608 0ff9 BF000000 		movl	$.LC18, %edi
 1608      00
 1609 0ffe B8010000 		movl	$1, %eax
 1609      00
 1610 1003 E8000000 		call	printf
 1610      00
 1611              	.L100:
 415:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 416:main.c        **** 						length, checksum, chan, speed);
 417:main.c        **** 				}
 418:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 1612              		.loc 1 418 0
 1613 1008 83BD38FF 		cmpl	$0, -200(%rbp)
 1613      FFFF00
 1614 100f 7412     		je	.L101
 1615              		.loc 1 418 0 is_stmt 0 discriminator 1
 1616 1011 8B8538FF 		movl	-200(%rbp), %eax
 1616      FFFF
 1617 1017 898524FF 		movl	%eax, -220(%rbp)
 1617      FFFF
 1618 101d 90       		nop
 1619              	.LBE7:
 341:main.c        **** 
 1620              		.loc 1 341 0 is_stmt 1 discriminator 1
 1621 101e E9790900 		jmp	.L74
 1621      00
 1622              	.L101:
 1623              	.LBB8:
 419:main.c        **** 
 420:main.c        **** 				// Close the file
 421:main.c        **** 				fclose(file);
 1624              		.loc 1 421 0
 1625 1023 488B8568 		movq	-152(%rbp), %rax
 1625      FFFFFF
 1626 102a 4889C7   		movq	%rax, %rdi
 1627 102d E8000000 		call	fclose
 1627      00
 422:main.c        **** 				file = NULL;
 1628              		.loc 1 422 0
 1629 1032 48C78568 		movq	$0, -152(%rbp)
 1629      FFFFFF00 
 1629      000000
 1630              	.LBE8:
 1631 103d E9190900 		jmp	.L107
 1631      00
 1632              	.L95:
 1633              	.LBB9:
 423:main.c        **** 			} else {
 424:main.c        **** 				size_t oldLength = dataFromFPGA.length;
 1634              		.loc 1 424 0
 1635 1042 488B45E8 		movq	-24(%rbp), %rax
 1636 1046 488945B0 		movq	%rax, -80(%rbp)
 425:main.c        **** 				bStatus = bufAppendConst(&dataFromFPGA, 0x00, length, error);
 1637              		.loc 1 425 0
 1638 104a 8B9528FF 		movl	-216(%rbp), %edx
 1638      FFFF
 1639 1050 488B8D08 		movq	-248(%rbp), %rcx
 1639      FFFFFF
 1640 1057 488D45E0 		leaq	-32(%rbp), %rax
 1641 105b BE000000 		movl	$0, %esi
 1641      00
 1642 1060 4889C7   		movq	%rax, %rdi
 1643 1063 E8000000 		call	bufAppendConst
 1643      00
 1644 1068 898530FF 		movl	%eax, -208(%rbp)
 1644      FFFF
 426:main.c        **** 				CHECK_STATUS(bStatus, FLP_LIBERR, cleanup);
 1645              		.loc 1 426 0
 1646 106e 83BD30FF 		cmpl	$0, -208(%rbp)
 1646      FFFF00
 1647 1075 740F     		je	.L103
 1648              		.loc 1 426 0 is_stmt 0 discriminator 1
 1649 1077 C78524FF 		movl	$1, -220(%rbp)
 1649      FFFF0100 
 1649      0000
 1650 1081 E9160900 		jmp	.L74
 1650      00
 1651              	.L103:
 427:main.c        **** 				#ifdef WIN32
 428:main.c        **** 					QueryPerformanceCounter(&tvStart);
 429:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 430:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 431:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 432:main.c        **** 					totalTime /= freq.QuadPart;
 433:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 434:main.c        **** 				#else
 435:main.c        **** 					gettimeofday(&tvStart, NULL);
 1652              		.loc 1 435 0 is_stmt 1
 1653 1086 488D45C0 		leaq	-64(%rbp), %rax
 1654 108a BE000000 		movl	$0, %esi
 1654      00
 1655 108f 4889C7   		movq	%rax, %rdi
 1656 1092 E8000000 		call	gettimeofday
 1656      00
 436:main.c        **** 					fStatus = flReadChannel(handle, (uint8)chan, length, dataFromFPGA.data + oldLength, error);
 1657              		.loc 1 436 0
 1658 1097 488B55E0 		movq	-32(%rbp), %rdx
 1659 109b 488B45B0 		movq	-80(%rbp), %rax
 1660 109f 488D0C02 		leaq	(%rdx,%rax), %rcx
 1661 10a3 8B9528FF 		movl	-216(%rbp), %edx
 1661      FFFF
 1662 10a9 8B8534FF 		movl	-204(%rbp), %eax
 1662      FFFF
 1663 10af 0FB6F0   		movzbl	%al, %esi
 1664 10b2 488BBD08 		movq	-248(%rbp), %rdi
 1664      FFFFFF
 1665 10b9 488B8518 		movq	-232(%rbp), %rax
 1665      FFFFFF
 1666 10c0 4989F8   		movq	%rdi, %r8
 1667 10c3 4889C7   		movq	%rax, %rdi
 1668 10c6 E8000000 		call	flReadChannel
 1668      00
 1669 10cb 89853CFF 		movl	%eax, -196(%rbp)
 1669      FFFF
 437:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1670              		.loc 1 437 0
 1671 10d1 488D45D0 		leaq	-48(%rbp), %rax
 1672 10d5 BE000000 		movl	$0, %esi
 1672      00
 1673 10da 4889C7   		movq	%rax, %rdi
 1674 10dd E8000000 		call	gettimeofday
 1674      00
 438:main.c        **** 					startTime = tvStart.tv_sec;
 1675              		.loc 1 438 0
 1676 10e2 488B45C0 		movq	-64(%rbp), %rax
 1677 10e6 48894590 		movq	%rax, -112(%rbp)
 439:main.c        **** 					startTime *= 1000000;
 1678              		.loc 1 439 0
 1679 10ea 488B4590 		movq	-112(%rbp), %rax
 1680 10ee 4869C040 		imulq	$1000000, %rax, %rax
 1680      420F00
 1681 10f5 48894590 		movq	%rax, -112(%rbp)
 440:main.c        **** 					startTime += tvStart.tv_usec;
 1682              		.loc 1 440 0
 1683 10f9 488B45C8 		movq	-56(%rbp), %rax
 1684 10fd 48014590 		addq	%rax, -112(%rbp)
 441:main.c        **** 					endTime = tvEnd.tv_sec;
 1685              		.loc 1 441 0
 1686 1101 488B45D0 		movq	-48(%rbp), %rax
 1687 1105 48894598 		movq	%rax, -104(%rbp)
 442:main.c        **** 					endTime *= 1000000;
 1688              		.loc 1 442 0
 1689 1109 488B4598 		movq	-104(%rbp), %rax
 1690 110d 4869C040 		imulq	$1000000, %rax, %rax
 1690      420F00
 1691 1114 48894598 		movq	%rax, -104(%rbp)
 443:main.c        **** 					endTime += tvEnd.tv_usec;
 1692              		.loc 1 443 0
 1693 1118 488B45D8 		movq	-40(%rbp), %rax
 1694 111c 48014598 		addq	%rax, -104(%rbp)
 444:main.c        **** 					totalTime = (double)(endTime - startTime);
 1695              		.loc 1 444 0
 1696 1120 488B4590 		movq	-112(%rbp), %rax
 1697 1124 488B5598 		movq	-104(%rbp), %rdx
 1698 1128 4829C2   		subq	%rax, %rdx
 1699 112b 4889D0   		movq	%rdx, %rax
 1700 112e F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1700      C0
 1701 1133 F20F1145 		movsd	%xmm0, -96(%rbp)
 1701      A0
 445:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1702              		.loc 1 445 0
 1703 1138 F20F1045 		movsd	-96(%rbp), %xmm0
 1703      A0
 1704 113d F20F100D 		movsd	.LC16(%rip), %xmm1
 1704      00000000 
 1705 1145 F20F5EC1 		divsd	%xmm1, %xmm0
 1706 1149 F20F1145 		movsd	%xmm0, -96(%rbp)
 1706      A0
 446:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1707              		.loc 1 446 0
 1708 114e 8B8528FF 		movl	-216(%rbp), %eax
 1708      FFFF
 1709 1154 4885C0   		testq	%rax, %rax
 1710 1157 7807     		js	.L104
 1711 1159 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1711      C0
 1712 115e EB15     		jmp	.L105
 1713              	.L104:
 1714 1160 4889C2   		movq	%rax, %rdx
 1715 1163 48D1EA   		shrq	%rdx
 1716 1166 83E001   		andl	$1, %eax
 1717 1169 4809C2   		orq	%rax, %rdx
 1718 116c F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1718      C2
 1719 1171 F20F58C0 		addsd	%xmm0, %xmm0
 1720              	.L105:
 1721 1175 F20F1055 		movsd	-96(%rbp), %xmm2
 1721      A0
 1722 117a F20F100D 		movsd	.LC17(%rip), %xmm1
 1722      00000000 
 1723 1182 F20F59CA 		mulsd	%xmm2, %xmm1
 1724 1186 F20F5EC1 		divsd	%xmm1, %xmm0
 1725 118a F20F1145 		movsd	%xmm0, -88(%rbp)
 1725      A8
 447:main.c        **** 				#endif
 448:main.c        **** 				if ( enableBenchmarking ) {
 1726              		.loc 1 448 0
 1727 118f 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1727      000000
 1728 1196 84C0     		testb	%al, %al
 1729 1198 744D     		je	.L106
 449:main.c        **** 					printf(
 450:main.c        **** 						"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n",
 451:main.c        **** 						length, calcChecksum(dataFromFPGA.data + oldLength, length), chan, speed);
 1730              		.loc 1 451 0
 1731 119a 8B8528FF 		movl	-216(%rbp), %eax
 1731      FFFF
 1732 11a0 488B4DE0 		movq	-32(%rbp), %rcx
 1733 11a4 488B55B0 		movq	-80(%rbp), %rdx
 1734 11a8 4801CA   		addq	%rcx, %rdx
 1735 11ab 4889C6   		movq	%rax, %rsi
 1736 11ae 4889D7   		movq	%rdx, %rdi
 1737 11b1 E8F3F2FF 		call	calcChecksum
 1737      FF
 449:main.c        **** 					printf(
 1738              		.loc 1 449 0
 1739 11b6 0FB7D0   		movzwl	%ax, %edx
 1740 11b9 488B45A8 		movq	-88(%rbp), %rax
 1741 11bd 8B8D34FF 		movl	-204(%rbp), %ecx
 1741      FFFF
 1742 11c3 8BB528FF 		movl	-216(%rbp), %esi
 1742      FFFF
 1743 11c9 48898500 		movq	%rax, -256(%rbp)
 1743      FFFFFF
 1744 11d0 F20F1085 		movsd	-256(%rbp), %xmm0
 1744      00FFFFFF 
 1745 11d8 BF000000 		movl	$.LC18, %edi
 1745      00
 1746 11dd B8010000 		movl	$1, %eax
 1746      00
 1747 11e2 E8000000 		call	printf
 1747      00
 1748              	.L106:
 452:main.c        **** 				}
 453:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 1749              		.loc 1 453 0
 1750 11e7 83BD3CFF 		cmpl	$0, -196(%rbp)
 1750      FFFF00
 1751 11ee 0F846707 		je	.L107
 1751      0000
 1752              		.loc 1 453 0 is_stmt 0 discriminator 1
 1753 11f4 C78524FF 		movl	$1, -220(%rbp)
 1753      FFFF0100 
 1753      0000
 1754 11fe 90       		nop
 1755 11ff E9980700 		jmp	.L74
 1755      00
 1756              	.L79:
 1757              	.LBE9:
 1758              	.LBE5:
 1759              	.LBB10:
 454:main.c        **** 			}
 455:main.c        **** 			break;
 456:main.c        **** 		}
 457:main.c        **** 		case 'w':{
 458:main.c        **** 			unsigned long int chan;
 459:main.c        **** 			size_t length = 1, i;
 1760              		.loc 1 459 0 is_stmt 1
 1761 1204 48C78548 		movq	$1, -184(%rbp)
 1761      FFFFFF01 
 1761      000000
 460:main.c        **** 			char *end, ch;
 461:main.c        **** 			const char *p;
 462:main.c        **** 			ptr++;
 1762              		.loc 1 462 0
 1763 120f 488B0500 		movq	ptr(%rip), %rax
 1763      000000
 1764 1216 4883C001 		addq	$1, %rax
 1765 121a 48890500 		movq	%rax, ptr(%rip)
 1765      000000
 463:main.c        **** 			
 464:main.c        **** 			// Get the channel to be written:
 465:main.c        **** 			errno = 0;
 1766              		.loc 1 465 0
 1767 1221 E8000000 		call	__errno_location
 1767      00
 1768 1226 C7000000 		movl	$0, (%rax)
 1768      0000
 466:main.c        **** 			chan = strtoul(ptr, &end, 16);
 1769              		.loc 1 466 0
 1770 122c 488B0500 		movq	ptr(%rip), %rax
 1770      000000
 1771 1233 488D8D50 		leaq	-176(%rbp), %rcx
 1771      FFFFFF
 1772 123a BA100000 		movl	$16, %edx
 1772      00
 1773 123f 4889CE   		movq	%rcx, %rsi
 1774 1242 4889C7   		movq	%rax, %rdi
 1775 1245 E8000000 		call	strtoul
 1775      00
 1776 124a 488945B8 		movq	%rax, -72(%rbp)
 467:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 1777              		.loc 1 467 0
 1778 124e E8000000 		call	__errno_location
 1778      00
 1779 1253 8B00     		movl	(%rax), %eax
 1780 1255 85C0     		testl	%eax, %eax
 1781 1257 740F     		je	.L108
 1782              		.loc 1 467 0 is_stmt 0 discriminator 1
 1783 1259 C78524FF 		movl	$2, -220(%rbp)
 1783      FFFF0200 
 1783      0000
 1784 1263 E9340700 		jmp	.L74
 1784      00
 1785              	.L108:
 468:main.c        **** 
 469:main.c        **** 			// Ensure that it's 0-127
 470:main.c        **** 			CHECK_STATUS(chan > 127, FLP_CHAN_RANGE, cleanup);
 1786              		.loc 1 470 0 is_stmt 1
 1787 1268 48837DB8 		cmpq	$127, -72(%rbp)
 1787      7F
 1788 126d 760F     		jbe	.L110
 1789              		.loc 1 470 0 is_stmt 0 discriminator 1
 1790 126f C78524FF 		movl	$3, -220(%rbp)
 1790      FFFF0300 
 1790      0000
 1791 1279 E91E0700 		jmp	.L74
 1791      00
 1792              	.L110:
 471:main.c        **** 			ptr = end;
 1793              		.loc 1 471 0 is_stmt 1
 1794 127e 488B8550 		movq	-176(%rbp), %rax
 1794      FFFFFF
 1795 1285 48890500 		movq	%rax, ptr(%rip)
 1795      000000
 472:main.c        **** 
 473:main.c        **** 			// There must be a space now:
 474:main.c        **** 			CHECK_STATUS(*ptr != ' ', FLP_ILL_CHAR, cleanup);
 1796              		.loc 1 474 0
 1797 128c 488B0500 		movq	ptr(%rip), %rax
 1797      000000
 1798 1293 0FB600   		movzbl	(%rax), %eax
 1799 1296 3C20     		cmpb	$32, %al
 1800 1298 740F     		je	.L111
 1801              		.loc 1 474 0 is_stmt 0 discriminator 1
 1802 129a C78524FF 		movl	$5, -220(%rbp)
 1802      FFFF0500 
 1802      0000
 1803 12a4 E9F30600 		jmp	.L74
 1803      00
 1804              	.L111:
 475:main.c        **** 
 476:main.c        **** 			// Now either a quote or a hex digit
 477:main.c        **** 		   ch = *++ptr;
 1805              		.loc 1 477 0 is_stmt 1
 1806 12a9 488B0500 		movq	ptr(%rip), %rax
 1806      000000
 1807 12b0 4883C001 		addq	$1, %rax
 1808 12b4 48890500 		movq	%rax, ptr(%rip)
 1808      000000
 1809 12bb 488B0500 		movq	ptr(%rip), %rax
 1809      000000
 1810 12c2 0FB600   		movzbl	(%rax), %eax
 1811 12c5 888521FF 		movb	%al, -223(%rbp)
 1811      FFFF
 478:main.c        **** 			if ( ch == '"' || ch == '\'' ) {
 1812              		.loc 1 478 0
 1813 12cb 80BD21FF 		cmpb	$34, -223(%rbp)
 1813      FFFF22
 1814 12d2 740D     		je	.L112
 1815              		.loc 1 478 0 is_stmt 0 discriminator 1
 1816 12d4 80BD21FF 		cmpb	$39, -223(%rbp)
 1816      FFFF27
 1817 12db 0F85F302 		jne	.L113
 1817      0000
 1818              	.L112:
 1819              	.LBB11:
 479:main.c        **** 				uint16 checksum = 0x0000;
 1820              		.loc 1 479 0 is_stmt 1
 1821 12e1 66C78522 		movw	$0, -222(%rbp)
 1821      FFFFFF00 
 1821      00
 480:main.c        **** 
 481:main.c        **** 				// Get the file to read bytes from:
 482:main.c        **** 				ptr++;
 1822              		.loc 1 482 0
 1823 12ea 488B0500 		movq	ptr(%rip), %rax
 1823      000000
 1824 12f1 4883C001 		addq	$1, %rax
 1825 12f5 48890500 		movq	%rax, ptr(%rip)
 1825      000000
 483:main.c        **** 				p = ptr;
 1826              		.loc 1 483 0
 1827 12fc 488B0500 		movq	ptr(%rip), %rax
 1827      000000
 1828 1303 48894580 		movq	%rax, -128(%rbp)
 484:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1829              		.loc 1 484 0
 1830 1307 EB05     		jmp	.L114
 1831              	.L116:
 485:main.c        **** 					p++;
 1832              		.loc 1 485 0
 1833 1309 48834580 		addq	$1, -128(%rbp)
 1833      01
 1834              	.L114:
 484:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1835              		.loc 1 484 0 discriminator 1
 1836 130e 488B4580 		movq	-128(%rbp), %rax
 1837 1312 0FB600   		movzbl	(%rax), %eax
 1838 1315 3A8521FF 		cmpb	-223(%rbp), %al
 1838      FFFF
 1839 131b 740B     		je	.L115
 484:main.c        **** 				while ( *p != ch && *p != '\0' ) {
 1840              		.loc 1 484 0 is_stmt 0 discriminator 2
 1841 131d 488B4580 		movq	-128(%rbp), %rax
 1842 1321 0FB600   		movzbl	(%rax), %eax
 1843 1324 84C0     		testb	%al, %al
 1844 1326 75E1     		jne	.L116
 1845              	.L115:
 486:main.c        **** 				}
 487:main.c        **** 				CHECK_STATUS(*p == '\0', FLP_UNTERM_STRING, cleanup);
 1846              		.loc 1 487 0 is_stmt 1
 1847 1328 488B4580 		movq	-128(%rbp), %rax
 1848 132c 0FB600   		movzbl	(%rax), %eax
 1849 132f 84C0     		testb	%al, %al
 1850 1331 750F     		jne	.L117
 1851              		.loc 1 487 0 is_stmt 0 discriminator 1
 1852 1333 C78524FF 		movl	$6, -220(%rbp)
 1852      FFFF0600 
 1852      0000
 1853 133d E95A0600 		jmp	.L74
 1853      00
 1854              	.L117:
 488:main.c        **** 				fileName = malloc((size_t)(p - ptr + 1));
 1855              		.loc 1 488 0 is_stmt 1
 1856 1342 488B5580 		movq	-128(%rbp), %rdx
 1857 1346 488B0500 		movq	ptr(%rip), %rax
 1857      000000
 1858 134d 4829C2   		subq	%rax, %rdx
 1859 1350 4889D0   		movq	%rdx, %rax
 1860 1353 4883C001 		addq	$1, %rax
 1861 1357 4889C7   		movq	%rax, %rdi
 1862 135a E8000000 		call	malloc
 1862      00
 1863 135f 48898560 		movq	%rax, -160(%rbp)
 1863      FFFFFF
 489:main.c        **** 				CHECK_STATUS(!fileName, FLP_NO_MEMORY, cleanup);
 1864              		.loc 1 489 0
 1865 1366 4883BD60 		cmpq	$0, -160(%rbp)
 1865      FFFFFF00 
 1866 136e 750F     		jne	.L119
 1867              		.loc 1 489 0 is_stmt 0 discriminator 1
 1868 1370 C78524FF 		movl	$7, -220(%rbp)
 1868      FFFF0700 
 1868      0000
 1869 137a E9500200 		jmp	.L118
 1869      00
 1870              	.L119:
 490:main.c        **** 				CHECK_STATUS(p - ptr == 0, FLP_EMPTY_STRING, cleanup);
 1871              		.loc 1 490 0 is_stmt 1
 1872 137f 488B5580 		movq	-128(%rbp), %rdx
 1873 1383 488B0500 		movq	ptr(%rip), %rax
 1873      000000
 1874 138a 4839C2   		cmpq	%rax, %rdx
 1875 138d 750F     		jne	.L120
 1876              		.loc 1 490 0 is_stmt 0 discriminator 1
 1877 138f C78524FF 		movl	$8, -220(%rbp)
 1877      FFFF0800 
 1877      0000
 1878 1399 E9310200 		jmp	.L118
 1878      00
 1879              	.L120:
 491:main.c        **** 				strncpy(fileName, ptr, (size_t)(p - ptr));
 1880              		.loc 1 491 0 is_stmt 1
 1881 139e 488B5580 		movq	-128(%rbp), %rdx
 1882 13a2 488B0500 		movq	ptr(%rip), %rax
 1882      000000
 1883 13a9 4829C2   		subq	%rax, %rdx
 1884 13ac 4889D0   		movq	%rdx, %rax
 1885 13af 4889C2   		movq	%rax, %rdx
 1886 13b2 488B0D00 		movq	ptr(%rip), %rcx
 1886      000000
 1887 13b9 488B8560 		movq	-160(%rbp), %rax
 1887      FFFFFF
 1888 13c0 4889CE   		movq	%rcx, %rsi
 1889 13c3 4889C7   		movq	%rax, %rdi
 1890 13c6 E8000000 		call	strncpy
 1890      00
 492:main.c        **** 				fileName[p - ptr] = '\0';
 1891              		.loc 1 492 0
 1892 13cb 488B5580 		movq	-128(%rbp), %rdx
 1893 13cf 488B0500 		movq	ptr(%rip), %rax
 1893      000000
 1894 13d6 4829C2   		subq	%rax, %rdx
 1895 13d9 4889D0   		movq	%rdx, %rax
 1896 13dc 4889C2   		movq	%rax, %rdx
 1897 13df 488B8560 		movq	-160(%rbp), %rax
 1897      FFFFFF
 1898 13e6 4801D0   		addq	%rdx, %rax
 1899 13e9 C60000   		movb	$0, (%rax)
 493:main.c        **** 				ptr = p + 1;  // skip over closing quote
 1900              		.loc 1 493 0
 1901 13ec 488B4580 		movq	-128(%rbp), %rax
 1902 13f0 4883C001 		addq	$1, %rax
 1903 13f4 48890500 		movq	%rax, ptr(%rip)
 1903      000000
 494:main.c        **** 
 495:main.c        **** 				// Open file for reading
 496:main.c        **** 				file = fopen(fileName, "rb");
 1904              		.loc 1 496 0
 1905 13fb 488B8560 		movq	-160(%rbp), %rax
 1905      FFFFFF
 1906 1402 BE000000 		movl	$.LC19, %esi
 1906      00
 1907 1407 4889C7   		movq	%rax, %rdi
 1908 140a E8000000 		call	fopen
 1908      00
 1909 140f 48898568 		movq	%rax, -152(%rbp)
 1909      FFFFFF
 497:main.c        **** 				CHECK_STATUS(!file, FLP_CANNOT_LOAD, cleanup);
 1910              		.loc 1 497 0
 1911 1416 4883BD68 		cmpq	$0, -152(%rbp)
 1911      FFFFFF00 
 1912 141e 750F     		jne	.L121
 1913              		.loc 1 497 0 is_stmt 0 discriminator 1
 1914 1420 C78524FF 		movl	$10, -220(%rbp)
 1914      FFFF0A00 
 1914      0000
 1915 142a E9A00100 		jmp	.L118
 1915      00
 1916              	.L121:
 498:main.c        **** 				free(fileName);
 1917              		.loc 1 498 0 is_stmt 1
 1918 142f 488B8560 		movq	-160(%rbp), %rax
 1918      FFFFFF
 1919 1436 4889C7   		movq	%rax, %rdi
 1920 1439 E8000000 		call	free
 1920      00
 499:main.c        **** 				fileName = NULL;
 1921              		.loc 1 499 0
 1922 143e 48C78560 		movq	$0, -160(%rbp)
 1922      FFFFFF00 
 1922      000000
 500:main.c        **** 				
 501:main.c        **** 				#ifdef WIN32
 502:main.c        **** 					QueryPerformanceCounter(&tvStart);
 503:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 504:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 505:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 506:main.c        **** 					totalTime /= freq.QuadPart;
 507:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 508:main.c        **** 				#else
 509:main.c        **** 					gettimeofday(&tvStart, NULL);
 1923              		.loc 1 509 0
 1924 1449 488D45C0 		leaq	-64(%rbp), %rax
 1925 144d BE000000 		movl	$0, %esi
 1925      00
 1926 1452 4889C7   		movq	%rax, %rdi
 1927 1455 E8000000 		call	gettimeofday
 1927      00
 510:main.c        **** 					status = doWrite(handle, (uint8)chan, file, &length, &checksum, error);
 1928              		.loc 1 510 0
 1929 145a 488B45B8 		movq	-72(%rbp), %rax
 1930 145e 0FB6F0   		movzbl	%al, %esi
 1931 1461 4C8B8508 		movq	-248(%rbp), %r8
 1931      FFFFFF
 1932 1468 488DBD22 		leaq	-222(%rbp), %rdi
 1932      FFFFFF
 1933 146f 488D8D48 		leaq	-184(%rbp), %rcx
 1933      FFFFFF
 1934 1476 488B9568 		movq	-152(%rbp), %rdx
 1934      FFFFFF
 1935 147d 488B8518 		movq	-232(%rbp), %rax
 1935      FFFFFF
 1936 1484 4D89C1   		movq	%r8, %r9
 1937 1487 4989F8   		movq	%rdi, %r8
 1938 148a 4889C7   		movq	%rax, %rdi
 1939 148d E8C3F3FF 		call	doWrite
 1939      FF
 1940 1492 898538FF 		movl	%eax, -200(%rbp)
 1940      FFFF
 511:main.c        **** 					gettimeofday(&tvEnd, NULL);
 1941              		.loc 1 511 0
 1942 1498 488D45D0 		leaq	-48(%rbp), %rax
 1943 149c BE000000 		movl	$0, %esi
 1943      00
 1944 14a1 4889C7   		movq	%rax, %rdi
 1945 14a4 E8000000 		call	gettimeofday
 1945      00
 512:main.c        **** 					startTime = tvStart.tv_sec;
 1946              		.loc 1 512 0
 1947 14a9 488B45C0 		movq	-64(%rbp), %rax
 1948 14ad 48894590 		movq	%rax, -112(%rbp)
 513:main.c        **** 					startTime *= 1000000;
 1949              		.loc 1 513 0
 1950 14b1 488B4590 		movq	-112(%rbp), %rax
 1951 14b5 4869C040 		imulq	$1000000, %rax, %rax
 1951      420F00
 1952 14bc 48894590 		movq	%rax, -112(%rbp)
 514:main.c        **** 					startTime += tvStart.tv_usec;
 1953              		.loc 1 514 0
 1954 14c0 488B45C8 		movq	-56(%rbp), %rax
 1955 14c4 48014590 		addq	%rax, -112(%rbp)
 515:main.c        **** 					endTime = tvEnd.tv_sec;
 1956              		.loc 1 515 0
 1957 14c8 488B45D0 		movq	-48(%rbp), %rax
 1958 14cc 48894598 		movq	%rax, -104(%rbp)
 516:main.c        **** 					endTime *= 1000000;
 1959              		.loc 1 516 0
 1960 14d0 488B4598 		movq	-104(%rbp), %rax
 1961 14d4 4869C040 		imulq	$1000000, %rax, %rax
 1961      420F00
 1962 14db 48894598 		movq	%rax, -104(%rbp)
 517:main.c        **** 					endTime += tvEnd.tv_usec;
 1963              		.loc 1 517 0
 1964 14df 488B45D8 		movq	-40(%rbp), %rax
 1965 14e3 48014598 		addq	%rax, -104(%rbp)
 518:main.c        **** 					totalTime = (double)(endTime - startTime);
 1966              		.loc 1 518 0
 1967 14e7 488B4590 		movq	-112(%rbp), %rax
 1968 14eb 488B5598 		movq	-104(%rbp), %rdx
 1969 14ef 4829C2   		subq	%rax, %rdx
 1970 14f2 4889D0   		movq	%rdx, %rax
 1971 14f5 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1971      C0
 1972 14fa F20F1145 		movsd	%xmm0, -96(%rbp)
 1972      A0
 519:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 1973              		.loc 1 519 0
 1974 14ff F20F1045 		movsd	-96(%rbp), %xmm0
 1974      A0
 1975 1504 F20F100D 		movsd	.LC16(%rip), %xmm1
 1975      00000000 
 1976 150c F20F5EC1 		divsd	%xmm1, %xmm0
 1977 1510 F20F1145 		movsd	%xmm0, -96(%rbp)
 1977      A0
 520:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 1978              		.loc 1 520 0
 1979 1515 488B8548 		movq	-184(%rbp), %rax
 1979      FFFFFF
 1980 151c 4885C0   		testq	%rax, %rax
 1981 151f 7807     		js	.L122
 1982 1521 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 1982      C0
 1983 1526 EB15     		jmp	.L123
 1984              	.L122:
 1985 1528 4889C2   		movq	%rax, %rdx
 1986 152b 48D1EA   		shrq	%rdx
 1987 152e 83E001   		andl	$1, %eax
 1988 1531 4809C2   		orq	%rax, %rdx
 1989 1534 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 1989      C2
 1990 1539 F20F58C0 		addsd	%xmm0, %xmm0
 1991              	.L123:
 1992 153d F20F1055 		movsd	-96(%rbp), %xmm2
 1992      A0
 1993 1542 F20F100D 		movsd	.LC17(%rip), %xmm1
 1993      00000000 
 1994 154a F20F59CA 		mulsd	%xmm2, %xmm1
 1995 154e F20F5EC1 		divsd	%xmm1, %xmm0
 1996 1552 F20F1145 		movsd	%xmm0, -88(%rbp)
 1996      A8
 521:main.c        **** 				#endif
 522:main.c        **** 				if ( enableBenchmarking ) {
 1997              		.loc 1 522 0
 1998 1557 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 1998      000000
 1999 155e 84C0     		testb	%al, %al
 2000 1560 7437     		je	.L124
 523:main.c        **** 					printf(
 2001              		.loc 1 523 0
 2002 1562 0FB78522 		movzwl	-222(%rbp), %eax
 2002      FFFFFF
 2003 1569 0FB7D0   		movzwl	%ax, %edx
 2004 156c 488BB548 		movq	-184(%rbp), %rsi
 2004      FFFFFF
 2005 1573 488B45A8 		movq	-88(%rbp), %rax
 2006 1577 488B4DB8 		movq	-72(%rbp), %rcx
 2007 157b 48898500 		movq	%rax, -256(%rbp)
 2007      FFFFFF
 2008 1582 F20F1085 		movsd	-256(%rbp), %xmm0
 2008      00FFFFFF 
 2009 158a BF000000 		movl	$.LC20, %edi
 2009      00
 2010 158f B8010000 		movl	$1, %eax
 2010      00
 2011 1594 E8000000 		call	printf
 2011      00
 2012              	.L124:
 524:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 525:main.c        **** 						length, checksum, chan, speed);
 526:main.c        **** 				}
 527:main.c        **** 				CHECK_STATUS(status, status, cleanup);
 2013              		.loc 1 527 0
 2014 1599 83BD38FF 		cmpl	$0, -200(%rbp)
 2014      FFFF00
 2015 15a0 740E     		je	.L125
 2016              		.loc 1 527 0 is_stmt 0 discriminator 1
 2017 15a2 8B8538FF 		movl	-200(%rbp), %eax
 2017      FFFF
 2018 15a8 898524FF 		movl	%eax, -220(%rbp)
 2018      FFFF
 2019 15ae EB1F     		jmp	.L118
 2020              	.L125:
 528:main.c        **** 
 529:main.c        **** 				// Close the file
 530:main.c        **** 				fclose(file);
 2021              		.loc 1 530 0 is_stmt 1
 2022 15b0 488B8568 		movq	-152(%rbp), %rax
 2022      FFFFFF
 2023 15b7 4889C7   		movq	%rax, %rdi
 2024 15ba E8000000 		call	fclose
 2024      00
 531:main.c        **** 				file = NULL;
 2025              		.loc 1 531 0
 2026 15bf 48C78568 		movq	$0, -152(%rbp)
 2026      FFFFFF00 
 2026      000000
 2027              	.LBE11:
 478:main.c        **** 				uint16 checksum = 0x0000;
 2028              		.loc 1 478 0
 2029 15ca E98C0300 		jmp	.L107
 2029      00
 2030              	.L118:
 467:main.c        **** 
 2031              		.loc 1 467 0 discriminator 1
 2032 15cf E9C80300 		jmp	.L74
 2032      00
 2033              	.L113:
 532:main.c        **** 			} else if ( isHexDigit(ch) ) {
 2034              		.loc 1 532 0
 2035 15d4 0FBE8521 		movsbl	-223(%rbp), %eax
 2035      FFFFFF
 2036 15db 89C7     		movl	%eax, %edi
 2037 15dd E889EEFF 		call	isHexDigit
 2037      FF
 2038 15e2 84C0     		testb	%al, %al
 2039 15e4 0F846902 		je	.L127
 2039      0000
 2040              	.LBB12:
 533:main.c        **** 				// Read a sequence of hex bytes to write
 534:main.c        **** 				uint8 *dataPtr;
 535:main.c        **** 				p = ptr + 1;
 2041              		.loc 1 535 0
 2042 15ea 488B0500 		movq	ptr(%rip), %rax
 2042      000000
 2043 15f1 4883C001 		addq	$1, %rax
 2044 15f5 48894580 		movq	%rax, -128(%rbp)
 536:main.c        **** 				while ( isHexDigit(*p) ) {
 2045              		.loc 1 536 0
 2046 15f9 EB05     		jmp	.L128
 2047              	.L129:
 537:main.c        **** 					p++;
 2048              		.loc 1 537 0
 2049 15fb 48834580 		addq	$1, -128(%rbp)
 2049      01
 2050              	.L128:
 536:main.c        **** 				while ( isHexDigit(*p) ) {
 2051              		.loc 1 536 0 discriminator 1
 2052 1600 488B4580 		movq	-128(%rbp), %rax
 2053 1604 0FB600   		movzbl	(%rax), %eax
 2054 1607 0FBEC0   		movsbl	%al, %eax
 2055 160a 89C7     		movl	%eax, %edi
 2056 160c E85AEEFF 		call	isHexDigit
 2056      FF
 2057 1611 84C0     		testb	%al, %al
 2058 1613 75E6     		jne	.L129
 538:main.c        **** 				}
 539:main.c        **** 				CHECK_STATUS((p - ptr) & 1, FLP_ODD_DIGITS, cleanup);
 2059              		.loc 1 539 0
 2060 1615 488B5580 		movq	-128(%rbp), %rdx
 2061 1619 488B0500 		movq	ptr(%rip), %rax
 2061      000000
 2062 1620 4829C2   		subq	%rax, %rdx
 2063 1623 4889D0   		movq	%rdx, %rax
 2064 1626 83E001   		andl	$1, %eax
 2065 1629 4885C0   		testq	%rax, %rax
 2066 162c 740F     		je	.L130
 2067              		.loc 1 539 0 is_stmt 0 discriminator 1
 2068 162e C78524FF 		movl	$9, -220(%rbp)
 2068      FFFF0900 
 2068      0000
 2069 1638 E95F0300 		jmp	.L74
 2069      00
 2070              	.L130:
 540:main.c        **** 				length = (size_t)(p - ptr) / 2;
 2071              		.loc 1 540 0 is_stmt 1
 2072 163d 488B5580 		movq	-128(%rbp), %rdx
 2073 1641 488B0500 		movq	ptr(%rip), %rax
 2073      000000
 2074 1648 4829C2   		subq	%rax, %rdx
 2075 164b 4889D0   		movq	%rdx, %rax
 2076 164e 48D1E8   		shrq	%rax
 2077 1651 48898548 		movq	%rax, -184(%rbp)
 2077      FFFFFF
 541:main.c        **** 				data = malloc(length);
 2078              		.loc 1 541 0
 2079 1658 488B8548 		movq	-184(%rbp), %rax
 2079      FFFFFF
 2080 165f 4889C7   		movq	%rax, %rdi
 2081 1662 E8000000 		call	malloc
 2081      00
 2082 1667 48898558 		movq	%rax, -168(%rbp)
 2082      FFFFFF
 542:main.c        **** 				dataPtr = data;
 2083              		.loc 1 542 0
 2084 166e 488B8558 		movq	-168(%rbp), %rax
 2084      FFFFFF
 2085 1675 48894588 		movq	%rax, -120(%rbp)
 543:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2086              		.loc 1 543 0
 2087 1679 48C78578 		movq	$0, -136(%rbp)
 2087      FFFFFF00 
 2087      000000
 2088 1684 EB2E     		jmp	.L131
 2089              	.L132:
 544:main.c        **** 					getHexByte(dataPtr++);
 2090              		.loc 1 544 0 discriminator 2
 2091 1686 488B4588 		movq	-120(%rbp), %rax
 2092 168a 488D5001 		leaq	1(%rax), %rdx
 2093 168e 48895588 		movq	%rdx, -120(%rbp)
 2094 1692 4889C7   		movq	%rax, %rdi
 2095 1695 E8C4EEFF 		call	getHexByte
 2095      FF
 545:main.c        **** 					ptr += 2;
 2096              		.loc 1 545 0 discriminator 2
 2097 169a 488B0500 		movq	ptr(%rip), %rax
 2097      000000
 2098 16a1 4883C002 		addq	$2, %rax
 2099 16a5 48890500 		movq	%rax, ptr(%rip)
 2099      000000
 543:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2100              		.loc 1 543 0 discriminator 2
 2101 16ac 48838578 		addq	$1, -136(%rbp)
 2101      FFFFFF01 
 2102              	.L131:
 543:main.c        **** 				for ( i = 0; i < length; i++ ) {
 2103              		.loc 1 543 0 is_stmt 0 discriminator 1
 2104 16b4 488B8548 		movq	-184(%rbp), %rax
 2104      FFFFFF
 2105 16bb 48398578 		cmpq	%rax, -136(%rbp)
 2105      FFFFFF
 2106 16c2 72C2     		jb	.L132
 546:main.c        **** 				}
 547:main.c        **** 				#ifdef WIN32
 548:main.c        **** 					QueryPerformanceCounter(&tvStart);
 549:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 550:main.c        **** 					QueryPerformanceCounter(&tvEnd);
 551:main.c        **** 					totalTime = (double)(tvEnd.QuadPart - tvStart.QuadPart);
 552:main.c        **** 					totalTime /= freq.QuadPart;
 553:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 554:main.c        **** 				#else
 555:main.c        **** 					gettimeofday(&tvStart, NULL);
 2107              		.loc 1 555 0 is_stmt 1
 2108 16c4 488D45C0 		leaq	-64(%rbp), %rax
 2109 16c8 BE000000 		movl	$0, %esi
 2109      00
 2110 16cd 4889C7   		movq	%rax, %rdi
 2111 16d0 E8000000 		call	gettimeofday
 2111      00
 556:main.c        **** 					fStatus = flWriteChannel(handle, (uint8)chan, length, data, error);
 2112              		.loc 1 556 0
 2113 16d5 488B9548 		movq	-184(%rbp), %rdx
 2113      FFFFFF
 2114 16dc 488B45B8 		movq	-72(%rbp), %rax
 2115 16e0 0FB6F0   		movzbl	%al, %esi
 2116 16e3 488BBD08 		movq	-248(%rbp), %rdi
 2116      FFFFFF
 2117 16ea 488B8D58 		movq	-168(%rbp), %rcx
 2117      FFFFFF
 2118 16f1 488B8518 		movq	-232(%rbp), %rax
 2118      FFFFFF
 2119 16f8 4989F8   		movq	%rdi, %r8
 2120 16fb 4889C7   		movq	%rax, %rdi
 2121 16fe E8000000 		call	flWriteChannel
 2121      00
 2122 1703 89853CFF 		movl	%eax, -196(%rbp)
 2122      FFFF
 557:main.c        **** 					gettimeofday(&tvEnd, NULL);
 2123              		.loc 1 557 0
 2124 1709 488D45D0 		leaq	-48(%rbp), %rax
 2125 170d BE000000 		movl	$0, %esi
 2125      00
 2126 1712 4889C7   		movq	%rax, %rdi
 2127 1715 E8000000 		call	gettimeofday
 2127      00
 558:main.c        **** 					startTime = tvStart.tv_sec;
 2128              		.loc 1 558 0
 2129 171a 488B45C0 		movq	-64(%rbp), %rax
 2130 171e 48894590 		movq	%rax, -112(%rbp)
 559:main.c        **** 					startTime *= 1000000;
 2131              		.loc 1 559 0
 2132 1722 488B4590 		movq	-112(%rbp), %rax
 2133 1726 4869C040 		imulq	$1000000, %rax, %rax
 2133      420F00
 2134 172d 48894590 		movq	%rax, -112(%rbp)
 560:main.c        **** 					startTime += tvStart.tv_usec;
 2135              		.loc 1 560 0
 2136 1731 488B45C8 		movq	-56(%rbp), %rax
 2137 1735 48014590 		addq	%rax, -112(%rbp)
 561:main.c        **** 					endTime = tvEnd.tv_sec;
 2138              		.loc 1 561 0
 2139 1739 488B45D0 		movq	-48(%rbp), %rax
 2140 173d 48894598 		movq	%rax, -104(%rbp)
 562:main.c        **** 					endTime *= 1000000;
 2141              		.loc 1 562 0
 2142 1741 488B4598 		movq	-104(%rbp), %rax
 2143 1745 4869C040 		imulq	$1000000, %rax, %rax
 2143      420F00
 2144 174c 48894598 		movq	%rax, -104(%rbp)
 563:main.c        **** 					endTime += tvEnd.tv_usec;
 2145              		.loc 1 563 0
 2146 1750 488B45D8 		movq	-40(%rbp), %rax
 2147 1754 48014598 		addq	%rax, -104(%rbp)
 564:main.c        **** 					totalTime = (double)(endTime - startTime);
 2148              		.loc 1 564 0
 2149 1758 488B4590 		movq	-112(%rbp), %rax
 2150 175c 488B5598 		movq	-104(%rbp), %rdx
 2151 1760 4829C2   		subq	%rax, %rdx
 2152 1763 4889D0   		movq	%rdx, %rax
 2153 1766 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2153      C0
 2154 176b F20F1145 		movsd	%xmm0, -96(%rbp)
 2154      A0
 565:main.c        **** 					totalTime /= 1000000;  // convert from uS to S.
 2155              		.loc 1 565 0
 2156 1770 F20F1045 		movsd	-96(%rbp), %xmm0
 2156      A0
 2157 1775 F20F100D 		movsd	.LC16(%rip), %xmm1
 2157      00000000 
 2158 177d F20F5EC1 		divsd	%xmm1, %xmm0
 2159 1781 F20F1145 		movsd	%xmm0, -96(%rbp)
 2159      A0
 566:main.c        **** 					speed = (double)length / (1024*1024*totalTime);
 2160              		.loc 1 566 0
 2161 1786 488B8548 		movq	-184(%rbp), %rax
 2161      FFFFFF
 2162 178d 4885C0   		testq	%rax, %rax
 2163 1790 7807     		js	.L133
 2164 1792 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 2164      C0
 2165 1797 EB15     		jmp	.L134
 2166              	.L133:
 2167 1799 4889C2   		movq	%rax, %rdx
 2168 179c 48D1EA   		shrq	%rdx
 2169 179f 83E001   		andl	$1, %eax
 2170 17a2 4809C2   		orq	%rax, %rdx
 2171 17a5 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 2171      C2
 2172 17aa F20F58C0 		addsd	%xmm0, %xmm0
 2173              	.L134:
 2174 17ae F20F1055 		movsd	-96(%rbp), %xmm2
 2174      A0
 2175 17b3 F20F100D 		movsd	.LC17(%rip), %xmm1
 2175      00000000 
 2176 17bb F20F59CA 		mulsd	%xmm2, %xmm1
 2177 17bf F20F5EC1 		divsd	%xmm1, %xmm0
 2178 17c3 F20F1145 		movsd	%xmm0, -88(%rbp)
 2178      A8
 567:main.c        **** 				#endif
 568:main.c        **** 				if ( enableBenchmarking ) {
 2179              		.loc 1 568 0
 2180 17c8 0FB60500 		movzbl	enableBenchmarking(%rip), %eax
 2180      000000
 2181 17cf 84C0     		testb	%al, %al
 2182 17d1 7449     		je	.L135
 569:main.c        **** 					printf(
 570:main.c        **** 						"Wrote "PFSZD" bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n",
 571:main.c        **** 						length, calcChecksum(data, length), chan, speed);
 2183              		.loc 1 571 0
 2184 17d3 488B9548 		movq	-184(%rbp), %rdx
 2184      FFFFFF
 2185 17da 488B8558 		movq	-168(%rbp), %rax
 2185      FFFFFF
 2186 17e1 4889D6   		movq	%rdx, %rsi
 2187 17e4 4889C7   		movq	%rax, %rdi
 2188 17e7 E8BDECFF 		call	calcChecksum
 2188      FF
 569:main.c        **** 					printf(
 2189              		.loc 1 569 0
 2190 17ec 0FB7D0   		movzwl	%ax, %edx
 2191 17ef 488BB548 		movq	-184(%rbp), %rsi
 2191      FFFFFF
 2192 17f6 488B45A8 		movq	-88(%rbp), %rax
 2193 17fa 488B4DB8 		movq	-72(%rbp), %rcx
 2194 17fe 48898500 		movq	%rax, -256(%rbp)
 2194      FFFFFF
 2195 1805 F20F1085 		movsd	-256(%rbp), %xmm0
 2195      00FFFFFF 
 2196 180d BF000000 		movl	$.LC20, %edi
 2196      00
 2197 1812 B8010000 		movl	$1, %eax
 2197      00
 2198 1817 E8000000 		call	printf
 2198      00
 2199              	.L135:
 572:main.c        **** 				}
 573:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2200              		.loc 1 573 0
 2201 181c 83BD3CFF 		cmpl	$0, -196(%rbp)
 2201      FFFF00
 2202 1823 740F     		je	.L136
 2203              		.loc 1 573 0 is_stmt 0 discriminator 1
 2204 1825 C78524FF 		movl	$1, -220(%rbp)
 2204      FFFF0100 
 2204      0000
 2205 182f E9680100 		jmp	.L74
 2205      00
 2206              	.L136:
 574:main.c        **** 				free(data);
 2207              		.loc 1 574 0 is_stmt 1
 2208 1834 488B8558 		movq	-168(%rbp), %rax
 2208      FFFFFF
 2209 183b 4889C7   		movq	%rax, %rdi
 2210 183e E8000000 		call	free
 2210      00
 575:main.c        **** 				data = NULL;
 2211              		.loc 1 575 0
 2212 1843 48C78558 		movq	$0, -168(%rbp)
 2212      FFFFFF00 
 2212      000000
 2213              	.LBE12:
 2214 184e E9080100 		jmp	.L107
 2214      00
 2215              	.L127:
 576:main.c        **** 			} else {
 577:main.c        **** 				FAIL(FLP_ILL_CHAR, cleanup);
 2216              		.loc 1 577 0
 2217 1853 C78524FF 		movl	$5, -220(%rbp)
 2217      FFFF0500 
 2217      0000
 2218 185d 90       		nop
 2219 185e E9390100 		jmp	.L74
 2219      00
 2220              	.L80:
 2221              	.LBE10:
 2222              	.LBB13:
 578:main.c        **** 			}
 579:main.c        **** 			break;
 580:main.c        **** 		}
 581:main.c        **** 		case '+':{
 582:main.c        **** 			uint32 conduit;
 583:main.c        **** 			char *end;
 584:main.c        **** 			ptr++;
 2223              		.loc 1 584 0
 2224 1863 488B0500 		movq	ptr(%rip), %rax
 2224      000000
 2225 186a 4883C001 		addq	$1, %rax
 2226 186e 48890500 		movq	%rax, ptr(%rip)
 2226      000000
 585:main.c        **** 
 586:main.c        **** 			// Get the conduit
 587:main.c        **** 			errno = 0;
 2227              		.loc 1 587 0
 2228 1875 E8000000 		call	__errno_location
 2228      00
 2229 187a C7000000 		movl	$0, (%rax)
 2229      0000
 588:main.c        **** 			conduit = (uint32)strtoul(ptr, &end, 16);
 2230              		.loc 1 588 0
 2231 1880 488B0500 		movq	ptr(%rip), %rax
 2231      000000
 2232 1887 488D8D50 		leaq	-176(%rbp), %rcx
 2232      FFFFFF
 2233 188e BA100000 		movl	$16, %edx
 2233      00
 2234 1893 4889CE   		movq	%rcx, %rsi
 2235 1896 4889C7   		movq	%rax, %rdi
 2236 1899 E8000000 		call	strtoul
 2236      00
 2237 189e 898540FF 		movl	%eax, -192(%rbp)
 2237      FFFF
 589:main.c        **** 			CHECK_STATUS(errno, FLP_BAD_HEX, cleanup);
 2238              		.loc 1 589 0
 2239 18a4 E8000000 		call	__errno_location
 2239      00
 2240 18a9 8B00     		movl	(%rax), %eax
 2241 18ab 85C0     		testl	%eax, %eax
 2242 18ad 740F     		je	.L137
 2243              		.loc 1 589 0 is_stmt 0 discriminator 1
 2244 18af C78524FF 		movl	$2, -220(%rbp)
 2244      FFFF0200 
 2244      0000
 2245 18b9 E9DE0000 		jmp	.L74
 2245      00
 2246              	.L137:
 590:main.c        **** 
 591:main.c        **** 			// Ensure that it's 0-127
 592:main.c        **** 			CHECK_STATUS(conduit > 255, FLP_CONDUIT_RANGE, cleanup);
 2247              		.loc 1 592 0 is_stmt 1
 2248 18be 81BD40FF 		cmpl	$255, -192(%rbp)
 2248      FFFFFF00 
 2248      0000
 2249 18c8 760F     		jbe	.L139
 2250              		.loc 1 592 0 is_stmt 0 discriminator 1
 2251 18ca C78524FF 		movl	$4, -220(%rbp)
 2251      FFFF0400 
 2251      0000
 2252 18d4 E9C30000 		jmp	.L74
 2252      00
 2253              	.L139:
 593:main.c        **** 			ptr = end;
 2254              		.loc 1 593 0 is_stmt 1
 2255 18d9 488B8550 		movq	-176(%rbp), %rax
 2255      FFFFFF
 2256 18e0 48890500 		movq	%rax, ptr(%rip)
 2256      000000
 594:main.c        **** 
 595:main.c        **** 			// Only two valid chars at this point:
 596:main.c        **** 			CHECK_STATUS(*ptr != '\0' && *ptr != ';', FLP_ILL_CHAR, cleanup);
 2257              		.loc 1 596 0
 2258 18e7 488B0500 		movq	ptr(%rip), %rax
 2258      000000
 2259 18ee 0FB600   		movzbl	(%rax), %eax
 2260 18f1 84C0     		testb	%al, %al
 2261 18f3 741D     		je	.L140
 2262              		.loc 1 596 0 is_stmt 0 discriminator 1
 2263 18f5 488B0500 		movq	ptr(%rip), %rax
 2263      000000
 2264 18fc 0FB600   		movzbl	(%rax), %eax
 2265 18ff 3C3B     		cmpb	$59, %al
 2266 1901 740F     		je	.L140
 2267 1903 C78524FF 		movl	$5, -220(%rbp)
 2267      FFFF0500 
 2267      0000
 2268 190d E98A0000 		jmp	.L74
 2268      00
 2269              	.L140:
 597:main.c        **** 
 598:main.c        **** 			fStatus = flSelectConduit(handle, (uint8)conduit, error);
 2270              		.loc 1 598 0 is_stmt 1
 2271 1912 8B8540FF 		movl	-192(%rbp), %eax
 2271      FFFF
 2272 1918 0FB6C8   		movzbl	%al, %ecx
 2273 191b 488B9508 		movq	-248(%rbp), %rdx
 2273      FFFFFF
 2274 1922 488B8518 		movq	-232(%rbp), %rax
 2274      FFFFFF
 2275 1929 89CE     		movl	%ecx, %esi
 2276 192b 4889C7   		movq	%rax, %rdi
 2277 192e E8000000 		call	flSelectConduit
 2277      00
 2278 1933 89853CFF 		movl	%eax, -196(%rbp)
 2278      FFFF
 599:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2279              		.loc 1 599 0
 2280 1939 83BD3CFF 		cmpl	$0, -196(%rbp)
 2280      FFFF00
 2281 1940 7419     		je	.L107
 2282              		.loc 1 599 0 is_stmt 0 discriminator 1
 2283 1942 C78524FF 		movl	$1, -220(%rbp)
 2283      FFFF0100 
 2283      0000
 2284 194c 90       		nop
 2285 194d EB4D     		jmp	.L74
 2286              	.L149:
 2287              	.LBE13:
 600:main.c        **** 			break;
 601:main.c        **** 		}
 602:main.c        **** 		default:
 603:main.c        **** 			FAIL(FLP_ILL_CHAR, cleanup);
 2288              		.loc 1 603 0 is_stmt 1
 2289 194f C78524FF 		movl	$5, -220(%rbp)
 2289      FFFF0500 
 2289      0000
 2290 1959 EB41     		jmp	.L74
 2291              	.L107:
 604:main.c        **** 		}
 605:main.c        **** 	} while ( *ptr == ';' );
 2292              		.loc 1 605 0
 2293 195b 488B0500 		movq	ptr(%rip), %rax
 2293      000000
 2294 1962 0FB600   		movzbl	(%rax), %eax
 2295 1965 3C3B     		cmpb	$59, %al
 2296 1967 0F849EF1 		je	.L142
 2296      FFFF
 606:main.c        **** 	CHECK_STATUS(*ptr != '\0', FLP_ILL_CHAR, cleanup);
 2297              		.loc 1 606 0
 2298 196d 488B0500 		movq	ptr(%rip), %rax
 2298      000000
 2299 1974 0FB600   		movzbl	(%rax), %eax
 2300 1977 84C0     		testb	%al, %al
 2301 1979 740C     		je	.L143
 2302              		.loc 1 606 0 is_stmt 0 discriminator 1
 2303 197b C78524FF 		movl	$5, -220(%rbp)
 2303      FFFF0500 
 2303      0000
 2304 1985 EB15     		jmp	.L74
 2305              	.L143:
 607:main.c        **** 
 608:main.c        **** 	dump(0x00000000, dataFromFPGA.data, dataFromFPGA.length);
 2306              		.loc 1 608 0 is_stmt 1
 2307 1987 488B55E8 		movq	-24(%rbp), %rdx
 2308 198b 488B45E0 		movq	-32(%rbp), %rax
 2309 198f 4889C6   		movq	%rax, %rsi
 2310 1992 BF000000 		movl	$0, %edi
 2310      00
 2311 1997 E8000000 		call	dump
 2311      00
 2312              	.L74:
 609:main.c        **** 
 610:main.c        **** cleanup:
 611:main.c        **** 	bufDestroy(&dataFromFPGA);
 2313              		.loc 1 611 0
 2314 199c 488D45E0 		leaq	-32(%rbp), %rax
 2315 19a0 4889C7   		movq	%rax, %rdi
 2316 19a3 E8000000 		call	bufDestroy
 2316      00
 612:main.c        **** 	if ( file ) {
 2317              		.loc 1 612 0
 2318 19a8 4883BD68 		cmpq	$0, -152(%rbp)
 2318      FFFFFF00 
 2319 19b0 740F     		je	.L144
 613:main.c        **** 		fclose(file);
 2320              		.loc 1 613 0
 2321 19b2 488B8568 		movq	-152(%rbp), %rax
 2321      FFFFFF
 2322 19b9 4889C7   		movq	%rax, %rdi
 2323 19bc E8000000 		call	fclose
 2323      00
 2324              	.L144:
 614:main.c        **** 	}
 615:main.c        **** 	free(fileName);
 2325              		.loc 1 615 0
 2326 19c1 488B8560 		movq	-160(%rbp), %rax
 2326      FFFFFF
 2327 19c8 4889C7   		movq	%rax, %rdi
 2328 19cb E8000000 		call	free
 2328      00
 616:main.c        **** 	free(data);
 2329              		.loc 1 616 0
 2330 19d0 488B8558 		movq	-168(%rbp), %rax
 2330      FFFFFF
 2331 19d7 4889C7   		movq	%rax, %rdi
 2332 19da E8000000 		call	free
 2332      00
 617:main.c        **** 	if ( retVal > FLP_LIBERR ) {
 2333              		.loc 1 617 0
 2334 19df 83BD24FF 		cmpl	$1, -220(%rbp)
 2334      FFFF01
 2335 19e6 0F86A700 		jbe	.L145
 2335      0000
 2336              	.LBB14:
 618:main.c        **** 		const int column = (int)(ptr - line);
 2337              		.loc 1 618 0
 2338 19ec 488B0500 		movq	ptr(%rip), %rax
 2338      000000
 2339 19f3 4889C2   		movq	%rax, %rdx
 2340 19f6 488B8510 		movq	-240(%rbp), %rax
 2340      FFFFFF
 2341 19fd 4829C2   		subq	%rax, %rdx
 2342 1a00 4889D0   		movq	%rdx, %rax
 2343 1a03 898544FF 		movl	%eax, -188(%rbp)
 2343      FFFF
 619:main.c        **** 		int i;
 620:main.c        **** 		fprintf(stderr, "%s at column %d\n  %s\n  ", errMessages[retVal], column, line);
 2344              		.loc 1 620 0
 2345 1a09 8B8524FF 		movl	-220(%rbp), %eax
 2345      FFFF
 2346 1a0f 488B14C5 		movq	errMessages(,%rax,8), %rdx
 2346      00000000 
 2347 1a17 488B0500 		movq	stderr(%rip), %rax
 2347      000000
 2348 1a1e 488BB510 		movq	-240(%rbp), %rsi
 2348      FFFFFF
 2349 1a25 8B8D44FF 		movl	-188(%rbp), %ecx
 2349      FFFF
 2350 1a2b 4989F0   		movq	%rsi, %r8
 2351 1a2e BE000000 		movl	$.LC21, %esi
 2351      00
 2352 1a33 4889C7   		movq	%rax, %rdi
 2353 1a36 B8000000 		movl	$0, %eax
 2353      00
 2354 1a3b E8000000 		call	fprintf
 2354      00
 621:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2355              		.loc 1 621 0
 2356 1a40 C7852CFF 		movl	$0, -212(%rbp)
 2356      FFFF0000 
 2356      0000
 2357 1a4a EB1B     		jmp	.L146
 2358              	.L147:
 622:main.c        **** 			fprintf(stderr, " ");
 2359              		.loc 1 622 0 discriminator 2
 2360 1a4c 488B0500 		movq	stderr(%rip), %rax
 2360      000000
 2361 1a53 4889C6   		movq	%rax, %rsi
 2362 1a56 BF200000 		movl	$32, %edi
 2362      00
 2363 1a5b E8000000 		call	fputc
 2363      00
 621:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2364              		.loc 1 621 0 discriminator 2
 2365 1a60 83852CFF 		addl	$1, -212(%rbp)
 2365      FFFF01
 2366              	.L146:
 621:main.c        **** 		for ( i = 0; i < column; i++ ) {
 2367              		.loc 1 621 0 is_stmt 0 discriminator 1
 2368 1a67 8B852CFF 		movl	-212(%rbp), %eax
 2368      FFFF
 2369 1a6d 3B8544FF 		cmpl	-188(%rbp), %eax
 2369      FFFF
 2370 1a73 7CD7     		jl	.L147
 623:main.c        **** 		}
 624:main.c        **** 		fprintf(stderr, "^\n");
 2371              		.loc 1 624 0 is_stmt 1
 2372 1a75 488B0500 		movq	stderr(%rip), %rax
 2372      000000
 2373 1a7c 4889C1   		movq	%rax, %rcx
 2374 1a7f BA020000 		movl	$2, %edx
 2374      00
 2375 1a84 BE010000 		movl	$1, %esi
 2375      00
 2376 1a89 BF000000 		movl	$.LC22, %edi
 2376      00
 2377 1a8e E8000000 		call	fwrite
 2377      00
 2378              	.L145:
 2379              	.LBE14:
 625:main.c        **** 	}
 626:main.c        **** 	return retVal;
 2380              		.loc 1 626 0
 2381 1a93 8B8524FF 		movl	-220(%rbp), %eax
 2381      FFFF
 627:main.c        **** }
 2382              		.loc 1 627 0
 2383 1a99 C9       		leave
 2384              		.cfi_def_cfa 7, 8
 2385 1a9a C3       		ret
 2386              		.cfi_endproc
 2387              	.LFE20:
 2389              		.section	.rodata
 2390              	.LC23:
 2391 01f9 30303030 		.string	"0000"
 2391      00
 2392              	.LC24:
 2393 01fe 30303031 		.string	"0001"
 2393      00
 2394              	.LC25:
 2395 0203 30303130 		.string	"0010"
 2395      00
 2396              	.LC26:
 2397 0208 30303131 		.string	"0011"
 2397      00
 2398              	.LC27:
 2399 020d 30313030 		.string	"0100"
 2399      00
 2400              	.LC28:
 2401 0212 30313031 		.string	"0101"
 2401      00
 2402              	.LC29:
 2403 0217 30313130 		.string	"0110"
 2403      00
 2404              	.LC30:
 2405 021c 30313131 		.string	"0111"
 2405      00
 2406              	.LC31:
 2407 0221 31303030 		.string	"1000"
 2407      00
 2408              	.LC32:
 2409 0226 31303031 		.string	"1001"
 2409      00
 2410              	.LC33:
 2411 022b 58585858 		.string	"XXXX"
 2411      00
 2412              	.LC34:
 2413 0230 31303130 		.string	"1010"
 2413      00
 2414              	.LC35:
 2415 0235 31303131 		.string	"1011"
 2415      00
 2416              	.LC36:
 2417 023a 31313030 		.string	"1100"
 2417      00
 2418              	.LC37:
 2419 023f 31313031 		.string	"1101"
 2419      00
 2420              	.LC38:
 2421 0244 31313130 		.string	"1110"
 2421      00
 2422              	.LC39:
 2423 0249 31313131 		.string	"1111"
 2423      00
 2424              		.data
 2425              		.align 32
 2428              	nibbles:
 2429 0000 00000000 		.quad	.LC23
 2429      00000000 
 2430 0008 00000000 		.quad	.LC24
 2430      00000000 
 2431 0010 00000000 		.quad	.LC25
 2431      00000000 
 2432 0018 00000000 		.quad	.LC26
 2432      00000000 
 2433 0020 00000000 		.quad	.LC27
 2433      00000000 
 2434 0028 00000000 		.quad	.LC28
 2434      00000000 
 2435 0030 00000000 		.quad	.LC29
 2435      00000000 
 2436 0038 00000000 		.quad	.LC30
 2436      00000000 
 2437 0040 00000000 		.quad	.LC31
 2437      00000000 
 2438 0048 00000000 		.quad	.LC32
 2438      00000000 
 2439 0050 00000000 		.quad	.LC33
 2439      00000000 
 2440 0058 00000000 		.quad	.LC33
 2440      00000000 
 2441 0060 00000000 		.quad	.LC33
 2441      00000000 
 2442 0068 00000000 		.quad	.LC33
 2442      00000000 
 2443 0070 00000000 		.quad	.LC33
 2443      00000000 
 2444 0078 00000000 		.quad	.LC33
 2444      00000000 
 2445 0080 00000000 		.quad	.LC33
 2445      00000000 
 2446 0088 00000000 		.quad	.LC34
 2446      00000000 
 2447 0090 00000000 		.quad	.LC35
 2447      00000000 
 2448 0098 00000000 		.quad	.LC36
 2448      00000000 
 2449 00a0 00000000 		.quad	.LC37
 2449      00000000 
 2450 00a8 00000000 		.quad	.LC38
 2450      00000000 
 2451 00b0 00000000 		.quad	.LC39
 2451      00000000 
 2452              		.section	.rodata
 2453 024e 0000     		.align 8
 2454              	.LC40:
 2455 0250 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 2455      20202020 
 2455      20202020 
 2455      76656E64 
 2455      6F722049 
 2456              	.LC41:
 2457 0285 3C564944 		.string	"<VID:PID>"
 2457      3A504944 
 2457      3E00
 2458              	.LC42:
 2459 028f 69767000 		.string	"ivp"
 2460              	.LC43:
 2461 0293 6900     		.string	"i"
 2462 0295 000000   		.align 8
 2463              	.LC44:
 2464 0298 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 2464      20202056 
 2464      49442C20 
 2464      50494420 
 2464      616E6420 
 2465              	.LC45:
 2466 02cd 3C564944 		.string	"<VID:PID[:DID]>"
 2466      3A504944 
 2466      5B3A4449 
 2466      445D3E00 
 2467              	.LC46:
 2468 02dd 767000   		.string	"vp"
 2469              	.LC47:
 2470 02e0 7600     		.string	"v"
 2471 02e2 00000000 		.align 8
 2471      0000
 2472              	.LC48:
 2473 02e8 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 2473      20202020 
 2473      6669726D 
 2473      77617265 
 2473      20746F20 
 2474              	.LC49:
 2475 0315 3C666972 		.string	"<firmware.hex>"
 2475      6D776172 
 2475      652E6865 
 2475      783E00
 2476              	.LC50:
 2477 0324 667700   		.string	"fw"
 2478              	.LC51:
 2479 0327 6600     		.string	"f"
 2480 0329 00000000 		.align 8
 2480      000000
 2481              	.LC52:
 2482 0330 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 2482      642F7772 
 2482      69746520 
 2482      64696769 
 2482      74616C20 
 2483              	.LC53:
 2484 035d 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 2484      4366675B 
 2484      2C626974 
 2484      4366675D 
 2484      2A3E00
 2485              	.LC54:
 2486 0370 706F7274 		.string	"ports"
 2486      7300
 2487              	.LC55:
 2488 0376 6400     		.string	"d"
 2489              	.LC56:
 2490 0378 20202020 		.string	"         query the JTAG chain"
 2490      20202020 
 2490      20717565 
 2490      72792074 
 2490      6865204A 
 2491              	.LC57:
 2492 0396 3C6A7461 		.string	"<jtagBits>"
 2492      67426974 
 2492      733E00
 2493              	.LC58:
 2494 03a1 71756572 		.string	"query"
 2494      7900
 2495              	.LC59:
 2496 03a7 7100     		.string	"q"
 2497              	.LC60:
 2498 03a9 20202020 		.string	"         program a device"
 2498      20202020 
 2498      2070726F 
 2498      6772616D 
 2498      20612064 
 2499              	.LC61:
 2500 03c3 3C636F6E 		.string	"<config>"
 2500      6669673E 
 2500      00
 2501              	.LC62:
 2502 03cc 70726F67 		.string	"program"
 2502      72616D00 
 2503              	.LC63:
 2504 03d4 7000     		.string	"p"
 2505 03d6 0000     		.align 8
 2506              	.LC64:
 2507 03d8 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 2507      20202020 
 2507      77686963 
 2507      6820636F 
 2507      6D6D2063 
 2508              	.LC65:
 2509 040c 3C636F6E 		.string	"<conduit>"
 2509      64756974 
 2509      3E00
 2510              	.LC66:
 2511 0416 636F6E64 		.string	"conduit"
 2511      75697400 
 2512              	.LC67:
 2513 041e 6300     		.string	"c"
 2514              		.align 8
 2515              	.LC68:
 2516 0420 20202020 		.string	"    a series of CommFPGA actions"
 2516      61207365 
 2516      72696573 
 2516      206F6620 
 2516      436F6D6D 
 2517              	.LC69:
 2518 0441 3C616374 		.string	"<actionString>"
 2518      696F6E53 
 2518      7472696E 
 2518      673E00
 2519              	.LC70:
 2520 0450 61637469 		.string	"action"
 2520      6F6E00
 2521              	.LC71:
 2522 0457 6100     		.string	"a"
 2523 0459 00000000 		.align 8
 2523      000000
 2524              	.LC72:
 2525 0460 20202020 		.string	"                    start up an interactive CommFPGA session"
 2525      20202020 
 2525      20202020 
 2525      20202020 
 2525      20202020 
 2526              	.LC73:
 2527 049d 7368656C 		.string	"shell"
 2527      6C00
 2528              	.LC74:
 2529 04a3 7300     		.string	"s"
 2530 04a5 000000   		.align 8
 2531              	.LC75:
 2532 04a8 20202020 		.string	"                enable benchmarking & checksumming"
 2532      20202020 
 2532      20202020 
 2532      20202020 
 2532      656E6162 
 2533              	.LC76:
 2534 04db 62656E63 		.string	"benchmark"
 2534      686D6172 
 2534      6B00
 2535              	.LC77:
 2536 04e5 6200     		.string	"b"
 2537 04e7 00       		.align 8
 2538              	.LC78:
 2539 04e8 20202020 		.string	"                    reset the bulk endpoints"
 2539      20202020 
 2539      20202020 
 2539      20202020 
 2539      20202020 
 2540              	.LC79:
 2541 0515 72657365 		.string	"reset"
 2541      7400
 2542              	.LC80:
 2543 051b 7200     		.string	"r"
 2544 051d 000000   		.align 8
 2545              	.LC81:
 2546 0520 20202077 		.string	"   write data from channel ch to file"
 2546      72697465 
 2546      20646174 
 2546      61206672 
 2546      6F6D2063 
 2547              	.LC82:
 2548 0546 3C63683A 		.string	"<ch:file.bin>"
 2548      66696C65 
 2548      2E62696E 
 2548      3E00
 2549              	.LC83:
 2550 0554 64756D70 		.string	"dumploop"
 2550      6C6F6F70 
 2550      00
 2551              	.LC84:
 2552 055d 6C00     		.string	"l"
 2553 055f 00       		.align 8
 2554              	.LC85:
 2555 0560 20202020 		.string	"                     print this help and exit"
 2555      20202020 
 2555      20202020 
 2555      20202020 
 2555      20202020 
 2556              	.LC86:
 2557 058e 68656C70 		.string	"help"
 2557      00
 2558              	.LC87:
 2559 0593 6800     		.string	"h"
 2560 0595 000000   		.align 8
 2561              	.LC88:
 2562 0598 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 2562      72697465 
 2562      20666972 
 2562      6D776172 
 2562      6520746F 
 2563              	.LC89:
 2564 05bf 3C737464 		.string	"<std|fw.hex|fw.iic>"
 2564      7C66772E 
 2564      6865787C 
 2564      66772E69 
 2564      69633E00 
 2565              	.LC90:
 2566 05d3 65657072 		.string	"eeprom"
 2566      6F6D00
 2567 05da 00000000 		.align 8
 2567      0000
 2568              	.LC91:
 2569 05e0 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 2569      20626163 
 2569      6B757020 
 2569      46583227 
 2569      73204545 
 2570              	.LC92:
 2571 060b 3C6B6269 		.string	"<kbitSize:fw.iic>"
 2571      7453697A 
 2571      653A6677 
 2571      2E696963 
 2571      3E00
 2572              	.LC93:
 2573 061d 6261636B 		.string	"backup"
 2573      757000
 2574 0624 00000000 		.align 8
 2575              	.LC94:
 2576 0628 20202020 		.string	"                    communicates with the atm module"
 2576      20202020 
 2576      20202020 
 2576      20202020 
 2576      20202020 
 2577              	.LC95:
 2578 065d 6C6F6F70 		.string	"loopy"
 2578      7900
 2579              	.LC96:
 2580 0663 7900     		.string	"y"
 2581              	.LC97:
 2582 0665 666C636C 		.string	"flcli"
 2582      6900
 2583              	.LC98:
 2584 066b 25733A20 		.string	"%s: insufficient memory\n"
 2584      696E7375 
 2584      66666963 
 2584      69656E74 
 2584      206D656D 
 2585 0684 00000000 		.align 8
 2586              	.LC99:
 2587 0688 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 2587      4C696E6B 
 2587      20436F6D 
 2587      6D616E64 
 2587      2D4C696E 
 2588              	.LC100:
 2589 06dc 0A00     		.string	"\n"
 2590 06de 0000     		.align 8
 2591              	.LC101:
 2592 06e0 0A496E74 		.string	"\nInteract with an FPGALink device.\n"
 2592      65726163 
 2592      74207769 
 2592      74682061 
 2592      6E204650 
 2593              	.LC102:
 2594 0704 2020252D 		.string	"  %-10s %s\n"
 2594      31307320 
 2594      25730A00 
 2595              		.align 8
 2596              	.LC103:
 2597 0710 54727920 		.string	"Try '%s --help' for more information.\n"
 2597      27257320 
 2597      2D2D6865 
 2597      6C702720 
 2597      666F7220 
 2598 0737 00       		.align 8
 2599              	.LC104:
 2600 0738 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 2600      6D707469 
 2600      6E672074 
 2600      6F206F70 
 2600      656E2063 
 2601              	.LC105:
 2602 0770 4C6F6164 		.string	"Loading firmware into %s...\n"
 2602      696E6720 
 2602      6669726D 
 2602      77617265 
 2602      20696E74 
 2603              	.LC106:
 2604 078d 41776169 		.string	"Awaiting renumeration"
 2604      74696E67 
 2604      2072656E 
 2604      756D6572 
 2604      6174696F 
 2605 07a3 00000000 		.align 8
 2605      00
 2606              	.LC107:
 2607 07a8 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 2607      4C696E6B 
 2607      20646576 
 2607      69636520 
 2607      64696420 
 2608 07db 00000000 		.align 8
 2608      00
 2609              	.LC108:
 2610 07e0 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 2610      6D707469 
 2610      6E672074 
 2610      6F206F70 
 2610      656E2063 
 2611 081d 000000   		.align 8
 2612              	.LC109:
 2613 0820 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 2613      64206E6F 
 2613      74206F70 
 2613      656E2046 
 2613      5047414C 
 2614 086a 00000000 		.align 8
 2614      0000
 2615              	.LC110:
 2616 0870 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 2616      65637465 
 2616      6420746F 
 2616      20465047 
 2616      414C696E 
 2617              	.LC111:
 2618 08bf 73746400 		.string	"std"
 2619 08c3 00000000 		.align 8
 2619      00
 2620              	.LC112:
 2621 08c8 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM..."
 2621      696E6720 
 2621      74686520 
 2621      7374616E 
 2621      64617264 
 2622 0906 0000     		.align 8
 2623              	.LC113:
 2624 0908 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 2624      696E6720 
 2624      63757374 
 2624      6F6D2046 
 2624      5047414C 
 2625 0949 00000000 		.align 8
 2625      000000
 2626              	.LC114:
 2627 0950 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 2627      696E7661 
 2627      6C696420 
 2627      61726775 
 2627      6D656E74 
 2628 098b 00000000 		.align 8
 2628      00
 2629              	.LC115:
 2630 0990 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 2630      6E672061 
 2630      20626163 
 2630      6B757020 
 2630      6F662025 
 2631              	.LC116:
 2632 09cb 436F6E66 		.string	"Configuring ports..."
 2632      69677572 
 2632      696E6720 
 2632      706F7274 
 2632      732E2E2E 
 2633              	.LC117:
 2634 09e0 25303858 		.string	"%08X"
 2634      00
 2635 09e5 000000   		.align 8
 2636              	.LC118:
 2637 09e8 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 2637      6261636B 
 2637      3A202020 
 2637      32382020 
 2637      20323420 
 2638              	.LC119:
 2639 0a28 20257300 		.string	" %s"
 2640              	.LC120:
 2641 0a2c 20202573 		.string	"  %s"
 2641      00
 2642              	.LC121:
 2643 0a31 2025730A 		.string	" %s\n"
 2643      00
 2644 0a36 0000     		.align 8
 2645              	.LC122:
 2646 0a38 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 2646      46504741 
 2646      4C696E6B 
 2646      20646576 
 2646      69636520 
 2647              	.LC123:
 2648 0a75 20203078 		.string	"  0x%08X\n"
 2648      25303858 
 2648      0A00
 2649 0a7f 00       		.align 8
 2650              	.LC124:
 2651 0a80 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 2651      46504741 
 2651      4C696E6B 
 2651      20646576 
 2651      69636520 
 2652              		.align 8
 2653              	.LC125:
 2654 0ad8 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 2654      20636861 
 2654      696E2073 
 2654      63616E20 
 2654      72657175 
 2655              	.LC126:
 2656 0b27 50726F67 		.string	"Programming device..."
 2656      72616D6D 
 2656      696E6720 
 2656      64657669 
 2656      63652E2E 
 2657 0b3d 000000   		.align 8
 2658              	.LC127:
 2659 0b40 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 2659      72616D20 
 2659      6F706572 
 2659      6174696F 
 2659      6E207265 
 2660              		.align 8
 2661              	.LC128:
 2662 0b88 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 2662      7574696E 
 2662      6720436F 
 2662      6D6D4650 
 2662      47412061 
 2663 0bbd 000000   		.align 8
 2664              	.LC129:
 2665 0bc0 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 2665      46504741 
 2665      4C696E6B 
 2665      20646576 
 2665      69636520 
 2666 0c0c 00000000 		.align 8
 2667              	.LC130:
 2668 0c10 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 2668      6F6E2072 
 2668      65717565 
 2668      73746564 
 2668      20627574 
 2669 0c4d 000000   		.align 8
 2670              	.LC131:
 2671 0c50 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 2671      696E7661 
 2671      6C696420 
 2671      61726775 
 2671      6D656E74 
 2672 0c8c 00000000 		.align 8
 2673              	.LC132:
 2674 0c90 436F7079 		.string	"Copying from channel %lu to %s"
 2674      696E6720 
 2674      66726F6D 
 2674      20636861 
 2674      6E6E656C 
 2675              	.LC133:
 2676 0caf 0A436175 		.string	"\nCaught SIGINT, quitting..."
 2676      67687420 
 2676      53494749 
 2676      4E542C20 
 2676      71756974 
 2677 0ccb 00000000 		.align 8
 2677      00
 2678              	.LC134:
 2679 0cd0 0A456E74 		.string	"\nEntering CommFPGA command-line mode:"
 2679      6572696E 
 2679      6720436F 
 2679      6D6D4650 
 2679      47412063 
 2680              	.LC135:
 2681 0cf6 3E2000   		.string	"> "
 2682 0cf9 00000000 		.align 8
 2682      000000
 2683              	.LC136:
 2684 0d00 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 2684      46504741 
 2684      4C696E6B 
 2684      20646576 
 2684      69636520 
 2685 0d49 00000000 		.align 8
 2685      000000
 2686              	.LC137:
 2687 0d50 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 2687      6C207265 
 2687      71756573 
 2687      74656420 
 2687      62757420 
 2688              	.LC138:
 2689 0d8c 722B00   		.string	"r+"
 2690              	.LC139:
 2691 0d8f 43737620 		.string	"Csv doesn't exist "
 2691      646F6573 
 2691      6E277420 
 2691      65786973 
 2691      742000
 2692              	.LC140:
 2693 0da2 64617461 		.string	"data in channel 0 = %u \n"
 2693      20696E20 
 2693      6368616E 
 2693      6E656C20 
 2693      30203D20 
 2694              	.LC141:
 2695 0dbb 64617461 		.string	"data in channel %u = %u \n"
 2695      20696E20 
 2695      6368616E 
 2695      6E656C20 
 2695      2575203D 
 2696              	.LC142:
 2697 0dd5 56616C69 		.string	"Valid user found "
 2697      64207573 
 2697      65722066 
 2697      6F756E64 
 2697      2000
 2698              	.LC143:
 2699 0de7 772B00   		.string	"w+"
 2700 0dea 00000000 		.align 8
 2700      0000
 2701              	.LC144:
 2702 0df0 22557365 		.string	"\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (decimal)\""
 2702      72204944 
 2702      20286465 
 2702      63696D61 
 2702      6C29222C 
 2703              	.LC145:
 2704 0e35 55736572 		.string	"User has admin privileges "
 2704      20686173 
 2704      2061646D 
 2704      696E2070 
 2704      72697669 
 2705              	.LC146:
 2706 0e50 496E7661 		.string	"Invalid user "
 2706      6C696420 
 2706      75736572 
 2706      2000
 2707              	.LC147:
 2708 0e5e 25730A00 		.string	"%s\n"
 2709              		.text
 2710              		.globl	main
 2712              	main:
 2713              	.LFB21:
 628:main.c        **** 
 629:main.c        **** static const char *nibbles[] = {
 630:main.c        **** 	"0000",  // '0'
 631:main.c        **** 	"0001",  // '1'
 632:main.c        **** 	"0010",  // '2'
 633:main.c        **** 	"0011",  // '3'
 634:main.c        **** 	"0100",  // '4'
 635:main.c        **** 	"0101",  // '5'
 636:main.c        **** 	"0110",  // '6'
 637:main.c        **** 	"0111",  // '7'
 638:main.c        **** 	"1000",  // '8'
 639:main.c        **** 	"1001",  // '9'
 640:main.c        **** 
 641:main.c        **** 	"XXXX",  // ':'
 642:main.c        **** 	"XXXX",  // ';'
 643:main.c        **** 	"XXXX",  // '<'
 644:main.c        **** 	"XXXX",  // '='
 645:main.c        **** 	"XXXX",  // '>'
 646:main.c        **** 	"XXXX",  // '?'
 647:main.c        **** 	"XXXX",  // '@'
 648:main.c        **** 
 649:main.c        **** 	"1010",  // 'A'
 650:main.c        **** 	"1011",  // 'B'
 651:main.c        **** 	"1100",  // 'C'
 652:main.c        **** 	"1101",  // 'D'
 653:main.c        **** 	"1110",  // 'E'
 654:main.c        **** 	"1111"   // 'F'
 655:main.c        **** };
 656:main.c        **** 
 657:main.c        **** int main(int argc, char *argv[]) {
 2714              		.loc 1 657 0
 2715              		.cfi_startproc
 2716 1a9b 55       		pushq	%rbp
 2717              		.cfi_def_cfa_offset 16
 2718              		.cfi_offset 6, -16
 2719 1a9c 4889E5   		movq	%rsp, %rbp
 2720              		.cfi_def_cfa_register 6
 2721 1a9f 53       		pushq	%rbx
 2722 1aa0 4881EC08 		subq	$776, %rsp
 2722      030000
 2723              		.cfi_offset 3, -24
 2724 1aa7 89BDFCFC 		movl	%edi, -772(%rbp)
 2724      FFFF
 2725 1aad 4889B5F0 		movq	%rsi, -784(%rbp)
 2725      FCFFFF
 2726              		.loc 1 657 0
 2727 1ab4 64488B04 		movq	%fs:40, %rax
 2727      25280000 
 2727      00
 2728 1abd 488945E8 		movq	%rax, -24(%rbp)
 2729 1ac1 31C0     		xorl	%eax, %eax
 658:main.c        **** 	ReturnCode retVal = FLP_SUCCESS, pStatus;
 2730              		.loc 1 658 0
 2731 1ac3 C78538FD 		movl	$0, -712(%rbp)
 2731      FFFF0000 
 2731      0000
 659:main.c        **** 	struct arg_str *ivpOpt = arg_str0("i", "ivp", "<VID:PID>", "            vendor ID and product ID (
 2732              		.loc 1 659 0
 2733 1acd B9000000 		movl	$.LC40, %ecx
 2733      00
 2734 1ad2 BA000000 		movl	$.LC41, %edx
 2734      00
 2735 1ad7 BE000000 		movl	$.LC42, %esi
 2735      00
 2736 1adc BF000000 		movl	$.LC43, %edi
 2736      00
 2737 1ae1 E8000000 		call	arg_str0
 2737      00
 2738 1ae6 488985C8 		movq	%rax, -568(%rbp)
 2738      FDFFFF
 660:main.c        **** 	struct arg_str *vpOpt = arg_str1("v", "vp", "<VID:PID[:DID]>", "       VID, PID and opt. dev ID (e
 2739              		.loc 1 660 0
 2740 1aed B9000000 		movl	$.LC44, %ecx
 2740      00
 2741 1af2 BA000000 		movl	$.LC45, %edx
 2741      00
 2742 1af7 BE000000 		movl	$.LC46, %esi
 2742      00
 2743 1afc BF000000 		movl	$.LC47, %edi
 2743      00
 2744 1b01 E8000000 		call	arg_str1
 2744      00
 2745 1b06 488985D0 		movq	%rax, -560(%rbp)
 2745      FDFFFF
 661:main.c        **** 	struct arg_str *fwOpt = arg_str0("f", "fw", "<firmware.hex>", "        firmware to RAM-load (or us
 2746              		.loc 1 661 0
 2747 1b0d B9000000 		movl	$.LC48, %ecx
 2747      00
 2748 1b12 BA000000 		movl	$.LC49, %edx
 2748      00
 2749 1b17 BE000000 		movl	$.LC50, %esi
 2749      00
 2750 1b1c BF000000 		movl	$.LC51, %edi
 2750      00
 2751 1b21 E8000000 		call	arg_str0
 2751      00
 2752 1b26 488985D8 		movq	%rax, -552(%rbp)
 2752      FDFFFF
 662:main.c        **** 	struct arg_str *portOpt = arg_str0("d", "ports", "<bitCfg[,bitCfg]*>", " read/write digital ports 
 2753              		.loc 1 662 0
 2754 1b2d B9000000 		movl	$.LC52, %ecx
 2754      00
 2755 1b32 BA000000 		movl	$.LC53, %edx
 2755      00
 2756 1b37 BE000000 		movl	$.LC54, %esi
 2756      00
 2757 1b3c BF000000 		movl	$.LC55, %edi
 2757      00
 2758 1b41 E8000000 		call	arg_str0
 2758      00
 2759 1b46 488985E0 		movq	%rax, -544(%rbp)
 2759      FDFFFF
 663:main.c        **** 	struct arg_str *queryOpt = arg_str0("q", "query", "<jtagBits>", "         query the JTAG chain");
 2760              		.loc 1 663 0
 2761 1b4d B9000000 		movl	$.LC56, %ecx
 2761      00
 2762 1b52 BA000000 		movl	$.LC57, %edx
 2762      00
 2763 1b57 BE000000 		movl	$.LC58, %esi
 2763      00
 2764 1b5c BF000000 		movl	$.LC59, %edi
 2764      00
 2765 1b61 E8000000 		call	arg_str0
 2765      00
 2766 1b66 488985E8 		movq	%rax, -536(%rbp)
 2766      FDFFFF
 664:main.c        **** 	struct arg_str *progOpt = arg_str0("p", "program", "<config>", "         program a device");
 2767              		.loc 1 664 0
 2768 1b6d B9000000 		movl	$.LC60, %ecx
 2768      00
 2769 1b72 BA000000 		movl	$.LC61, %edx
 2769      00
 2770 1b77 BE000000 		movl	$.LC62, %esi
 2770      00
 2771 1b7c BF000000 		movl	$.LC63, %edi
 2771      00
 2772 1b81 E8000000 		call	arg_str0
 2772      00
 2773 1b86 488985F0 		movq	%rax, -528(%rbp)
 2773      FDFFFF
 665:main.c        **** 	struct arg_uint *conOpt = arg_uint0("c", "conduit", "<conduit>", "        which comm conduit to ch
 2774              		.loc 1 665 0
 2775 1b8d B9000000 		movl	$.LC64, %ecx
 2775      00
 2776 1b92 BA000000 		movl	$.LC65, %edx
 2776      00
 2777 1b97 BE000000 		movl	$.LC66, %esi
 2777      00
 2778 1b9c BF000000 		movl	$.LC67, %edi
 2778      00
 2779 1ba1 E8000000 		call	arg_uint0
 2779      00
 2780 1ba6 488985F8 		movq	%rax, -520(%rbp)
 2780      FDFFFF
 666:main.c        **** 	struct arg_str *actOpt = arg_str0("a", "action", "<actionString>", "    a series of CommFPGA actio
 2781              		.loc 1 666 0
 2782 1bad B9000000 		movl	$.LC68, %ecx
 2782      00
 2783 1bb2 BA000000 		movl	$.LC69, %edx
 2783      00
 2784 1bb7 BE000000 		movl	$.LC70, %esi
 2784      00
 2785 1bbc BF000000 		movl	$.LC71, %edi
 2785      00
 2786 1bc1 E8000000 		call	arg_str0
 2786      00
 2787 1bc6 48898500 		movq	%rax, -512(%rbp)
 2787      FEFFFF
 667:main.c        **** 	struct arg_lit *shellOpt  = arg_lit0("s", "shell", "                    start up an interactive Co
 2788              		.loc 1 667 0
 2789 1bcd BA000000 		movl	$.LC72, %edx
 2789      00
 2790 1bd2 BE000000 		movl	$.LC73, %esi
 2790      00
 2791 1bd7 BF000000 		movl	$.LC74, %edi
 2791      00
 2792 1bdc E8000000 		call	arg_lit0
 2792      00
 2793 1be1 48898508 		movq	%rax, -504(%rbp)
 2793      FEFFFF
 668:main.c        **** 	struct arg_lit *benOpt  = arg_lit0("b", "benchmark", "                enable benchmarking & checks
 2794              		.loc 1 668 0
 2795 1be8 BA000000 		movl	$.LC75, %edx
 2795      00
 2796 1bed BE000000 		movl	$.LC76, %esi
 2796      00
 2797 1bf2 BF000000 		movl	$.LC77, %edi
 2797      00
 2798 1bf7 E8000000 		call	arg_lit0
 2798      00
 2799 1bfc 48898510 		movq	%rax, -496(%rbp)
 2799      FEFFFF
 669:main.c        **** 	struct arg_lit *rstOpt  = arg_lit0("r", "reset", "                    reset the bulk endpoints");
 2800              		.loc 1 669 0
 2801 1c03 BA000000 		movl	$.LC78, %edx
 2801      00
 2802 1c08 BE000000 		movl	$.LC79, %esi
 2802      00
 2803 1c0d BF000000 		movl	$.LC80, %edi
 2803      00
 2804 1c12 E8000000 		call	arg_lit0
 2804      00
 2805 1c17 48898518 		movq	%rax, -488(%rbp)
 2805      FEFFFF
 670:main.c        **** 	struct arg_str *dumpOpt = arg_str0("l", "dumploop", "<ch:file.bin>", "   write data from channel c
 2806              		.loc 1 670 0
 2807 1c1e B9000000 		movl	$.LC81, %ecx
 2807      00
 2808 1c23 BA000000 		movl	$.LC82, %edx
 2808      00
 2809 1c28 BE000000 		movl	$.LC83, %esi
 2809      00
 2810 1c2d BF000000 		movl	$.LC84, %edi
 2810      00
 2811 1c32 E8000000 		call	arg_str0
 2811      00
 2812 1c37 48898520 		movq	%rax, -480(%rbp)
 2812      FEFFFF
 671:main.c        **** 	struct arg_lit *helpOpt  = arg_lit0("h", "help", "                     print this help and exit");
 2813              		.loc 1 671 0
 2814 1c3e BA000000 		movl	$.LC85, %edx
 2814      00
 2815 1c43 BE000000 		movl	$.LC86, %esi
 2815      00
 2816 1c48 BF000000 		movl	$.LC87, %edi
 2816      00
 2817 1c4d E8000000 		call	arg_lit0
 2817      00
 2818 1c52 48898528 		movq	%rax, -472(%rbp)
 2818      FEFFFF
 672:main.c        **** 	struct arg_str *eepromOpt  = arg_str0(NULL, "eeprom", "<std|fw.hex|fw.iic>", "   write firmware to
 2819              		.loc 1 672 0
 2820 1c59 B9000000 		movl	$.LC88, %ecx
 2820      00
 2821 1c5e BA000000 		movl	$.LC89, %edx
 2821      00
 2822 1c63 BE000000 		movl	$.LC90, %esi
 2822      00
 2823 1c68 BF000000 		movl	$0, %edi
 2823      00
 2824 1c6d E8000000 		call	arg_str0
 2824      00
 2825 1c72 48898530 		movq	%rax, -464(%rbp)
 2825      FEFFFF
 673:main.c        **** 	struct arg_str *backupOpt  = arg_str0(NULL, "backup", "<kbitSize:fw.iic>", "     backup FX2's EEPR
 2826              		.loc 1 673 0
 2827 1c79 B9000000 		movl	$.LC91, %ecx
 2827      00
 2828 1c7e BA000000 		movl	$.LC92, %edx
 2828      00
 2829 1c83 BE000000 		movl	$.LC93, %esi
 2829      00
 2830 1c88 BF000000 		movl	$0, %edi
 2830      00
 2831 1c8d E8000000 		call	arg_str0
 2831      00
 2832 1c92 48898538 		movq	%rax, -456(%rbp)
 2832      FEFFFF
 674:main.c        **** 	struct arg_end *endOpt   = arg_end(20);
 2833              		.loc 1 674 0
 2834 1c99 BF140000 		movl	$20, %edi
 2834      00
 2835 1c9e E8000000 		call	arg_end
 2835      00
 2836 1ca3 48898540 		movq	%rax, -448(%rbp)
 2836      FEFFFF
 675:main.c        **** 	struct arg_lit *loopOpt  = arg_lit0("y","loopy", "                    communicates with the atm mo
 2837              		.loc 1 675 0
 2838 1caa BA000000 		movl	$.LC94, %edx
 2838      00
 2839 1caf BE000000 		movl	$.LC95, %esi
 2839      00
 2840 1cb4 BF000000 		movl	$.LC96, %edi
 2840      00
 2841 1cb9 E8000000 		call	arg_lit0
 2841      00
 2842 1cbe 48898548 		movq	%rax, -440(%rbp)
 2842      FEFFFF
 676:main.c        **** 
 677:main.c        **** 	void *argTable[] = {
 2843              		.loc 1 677 0
 2844 1cc5 488B85C8 		movq	-568(%rbp), %rax
 2844      FDFFFF
 2845 1ccc 488985E0 		movq	%rax, -288(%rbp)
 2845      FEFFFF
 2846 1cd3 488B85D0 		movq	-560(%rbp), %rax
 2846      FDFFFF
 2847 1cda 488985E8 		movq	%rax, -280(%rbp)
 2847      FEFFFF
 2848 1ce1 488B85D8 		movq	-552(%rbp), %rax
 2848      FDFFFF
 2849 1ce8 488985F0 		movq	%rax, -272(%rbp)
 2849      FEFFFF
 2850 1cef 488B85E0 		movq	-544(%rbp), %rax
 2850      FDFFFF
 2851 1cf6 488985F8 		movq	%rax, -264(%rbp)
 2851      FEFFFF
 2852 1cfd 488B85E8 		movq	-536(%rbp), %rax
 2852      FDFFFF
 2853 1d04 48898500 		movq	%rax, -256(%rbp)
 2853      FFFFFF
 2854 1d0b 488B85F0 		movq	-528(%rbp), %rax
 2854      FDFFFF
 2855 1d12 48898508 		movq	%rax, -248(%rbp)
 2855      FFFFFF
 2856 1d19 488B85F8 		movq	-520(%rbp), %rax
 2856      FDFFFF
 2857 1d20 48898510 		movq	%rax, -240(%rbp)
 2857      FFFFFF
 2858 1d27 488B8500 		movq	-512(%rbp), %rax
 2858      FEFFFF
 2859 1d2e 48898518 		movq	%rax, -232(%rbp)
 2859      FFFFFF
 2860 1d35 488B8508 		movq	-504(%rbp), %rax
 2860      FEFFFF
 2861 1d3c 48898520 		movq	%rax, -224(%rbp)
 2861      FFFFFF
 2862 1d43 488B8510 		movq	-496(%rbp), %rax
 2862      FEFFFF
 2863 1d4a 48898528 		movq	%rax, -216(%rbp)
 2863      FFFFFF
 2864 1d51 488B8518 		movq	-488(%rbp), %rax
 2864      FEFFFF
 2865 1d58 48898530 		movq	%rax, -208(%rbp)
 2865      FFFFFF
 2866 1d5f 488B8520 		movq	-480(%rbp), %rax
 2866      FEFFFF
 2867 1d66 48898538 		movq	%rax, -200(%rbp)
 2867      FFFFFF
 2868 1d6d 488B8548 		movq	-440(%rbp), %rax
 2868      FEFFFF
 2869 1d74 48898540 		movq	%rax, -192(%rbp)
 2869      FFFFFF
 2870 1d7b 488B8528 		movq	-472(%rbp), %rax
 2870      FEFFFF
 2871 1d82 48898548 		movq	%rax, -184(%rbp)
 2871      FFFFFF
 2872 1d89 488B8530 		movq	-464(%rbp), %rax
 2872      FEFFFF
 2873 1d90 48898550 		movq	%rax, -176(%rbp)
 2873      FFFFFF
 2874 1d97 488B8538 		movq	-456(%rbp), %rax
 2874      FEFFFF
 2875 1d9e 48898558 		movq	%rax, -168(%rbp)
 2875      FFFFFF
 2876 1da5 488B8540 		movq	-448(%rbp), %rax
 2876      FEFFFF
 2877 1dac 48898560 		movq	%rax, -160(%rbp)
 2877      FFFFFF
 678:main.c        **** 		ivpOpt, vpOpt, fwOpt, portOpt, queryOpt, progOpt, conOpt, actOpt,
 679:main.c        **** 		shellOpt, benOpt, rstOpt, dumpOpt, loopOpt, helpOpt, eepromOpt, backupOpt, endOpt
 680:main.c        **** 	};
 681:main.c        **** 	const char *progName = "flcli";
 2878              		.loc 1 681 0
 2879 1db3 48C78550 		movq	$.LC97, -432(%rbp)
 2879      FEFFFF00 
 2879      000000
 682:main.c        **** 	int numErrors;
 683:main.c        **** 	struct FLContext *handle = NULL;
 2880              		.loc 1 683 0
 2881 1dbe 48C785A0 		movq	$0, -608(%rbp)
 2881      FDFFFF00 
 2881      000000
 684:main.c        **** 	FLStatus fStatus;
 685:main.c        **** 	const char *error = NULL;
 2882              		.loc 1 685 0
 2883 1dc9 48C785A8 		movq	$0, -600(%rbp)
 2883      FDFFFF00 
 2883      000000
 686:main.c        **** 	const char *ivp = NULL;
 2884              		.loc 1 686 0
 2885 1dd4 48C78558 		movq	$0, -424(%rbp)
 2885      FEFFFF00 
 2885      000000
 687:main.c        **** 	const char *vp = NULL;
 2886              		.loc 1 687 0
 2887 1ddf 48C78560 		movq	$0, -416(%rbp)
 2887      FEFFFF00 
 2887      000000
 688:main.c        **** 	bool isNeroCapable, isCommCapable;
 689:main.c        **** 	uint32 numDevices, scanChain[16], i;
 690:main.c        **** 	const char *line = NULL;
 2888              		.loc 1 690 0
 2889 1dea 48C785C0 		movq	$0, -576(%rbp)
 2889      FDFFFF00 
 2889      000000
 691:main.c        **** 	uint8 conduit = 0x01;
 2890              		.loc 1 691 0
 2891 1df5 C68509FD 		movb	$1, -759(%rbp)
 2891      FFFF01
 692:main.c        **** 
 693:main.c        **** 	if ( arg_nullcheck(argTable) != 0 ) {
 2892              		.loc 1 693 0
 2893 1dfc 488D85E0 		leaq	-288(%rbp), %rax
 2893      FEFFFF
 2894 1e03 4889C7   		movq	%rax, %rdi
 2895 1e06 E8000000 		call	arg_nullcheck
 2895      00
 2896 1e0b 85C0     		testl	%eax, %eax
 2897 1e0d 742F     		je	.L151
 694:main.c        **** 		fprintf(stderr, "%s: insufficient memory\n", progName);
 2898              		.loc 1 694 0
 2899 1e0f 488B0500 		movq	stderr(%rip), %rax
 2899      000000
 2900 1e16 488B9550 		movq	-432(%rbp), %rdx
 2900      FEFFFF
 2901 1e1d BE000000 		movl	$.LC98, %esi
 2901      00
 2902 1e22 4889C7   		movq	%rax, %rdi
 2903 1e25 B8000000 		movl	$0, %eax
 2903      00
 2904 1e2a E8000000 		call	fprintf
 2904      00
 695:main.c        **** 		FAIL(1, cleanup);
 2905              		.loc 1 695 0
 2906 1e2f C78538FD 		movl	$1, -712(%rbp)
 2906      FFFF0100 
 2906      0000
 2907 1e39 E99B2300 		jmp	.L152
 2907      00
 2908              	.L151:
 696:main.c        **** 	}
 697:main.c        **** 
 698:main.c        **** 	numErrors = arg_parse(argc, argv, argTable);
 2909              		.loc 1 698 0
 2910 1e3e 488D95E0 		leaq	-288(%rbp), %rdx
 2910      FEFFFF
 2911 1e45 488B8DF0 		movq	-784(%rbp), %rcx
 2911      FCFFFF
 2912 1e4c 8B85FCFC 		movl	-772(%rbp), %eax
 2912      FFFF
 2913 1e52 4889CE   		movq	%rcx, %rsi
 2914 1e55 89C7     		movl	%eax, %edi
 2915 1e57 E8000000 		call	arg_parse
 2915      00
 2916 1e5c 898570FD 		movl	%eax, -656(%rbp)
 2916      FFFF
 699:main.c        **** 
 700:main.c        **** 	if ( helpOpt->count > 0 ) {
 2917              		.loc 1 700 0
 2918 1e62 488B8528 		movq	-472(%rbp), %rax
 2918      FEFFFF
 2919 1e69 8B4060   		movl	96(%rax), %eax
 2920 1e6c 85C0     		testl	%eax, %eax
 2921 1e6e 7E6E     		jle	.L153
 701:main.c        **** 		printf("FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s", p
 2922              		.loc 1 701 0
 2923 1e70 488B8550 		movq	-432(%rbp), %rax
 2923      FEFFFF
 2924 1e77 4889C6   		movq	%rax, %rsi
 2925 1e7a BF000000 		movl	$.LC99, %edi
 2925      00
 2926 1e7f B8000000 		movl	$0, %eax
 2926      00
 2927 1e84 E8000000 		call	printf
 2927      00
 702:main.c        **** 		arg_print_syntax(stdout, argTable, "\n");
 2928              		.loc 1 702 0
 2929 1e89 488B0500 		movq	stdout(%rip), %rax
 2929      000000
 2930 1e90 488D8DE0 		leaq	-288(%rbp), %rcx
 2930      FEFFFF
 2931 1e97 BA000000 		movl	$.LC100, %edx
 2931      00
 2932 1e9c 4889CE   		movq	%rcx, %rsi
 2933 1e9f 4889C7   		movq	%rax, %rdi
 2934 1ea2 E8000000 		call	arg_print_syntax
 2934      00
 703:main.c        **** 		printf("\nInteract with an FPGALink device.\n\n");
 2935              		.loc 1 703 0
 2936 1ea7 BF000000 		movl	$.LC101, %edi
 2936      00
 2937 1eac E8000000 		call	puts
 2937      00
 704:main.c        **** 		arg_print_glossary(stdout, argTable,"  %-10s %s\n");
 2938              		.loc 1 704 0
 2939 1eb1 488B0500 		movq	stdout(%rip), %rax
 2939      000000
 2940 1eb8 488D8DE0 		leaq	-288(%rbp), %rcx
 2940      FEFFFF
 2941 1ebf BA000000 		movl	$.LC102, %edx
 2941      00
 2942 1ec4 4889CE   		movq	%rcx, %rsi
 2943 1ec7 4889C7   		movq	%rax, %rdi
 2944 1eca E8000000 		call	arg_print_glossary
 2944      00
 705:main.c        **** 		FAIL(FLP_SUCCESS, cleanup);
 2945              		.loc 1 705 0
 2946 1ecf C78538FD 		movl	$0, -712(%rbp)
 2946      FFFF0000 
 2946      0000
 2947 1ed9 E9FB2200 		jmp	.L152
 2947      00
 2948              	.L153:
 706:main.c        **** 	}
 707:main.c        **** 
 708:main.c        **** 	if ( numErrors > 0 ) {
 2949              		.loc 1 708 0
 2950 1ede 83BD70FD 		cmpl	$0, -656(%rbp)
 2950      FFFF00
 2951 1ee5 7E4F     		jle	.L154
 709:main.c        **** 		arg_print_errors(stdout, endOpt, progName);
 2952              		.loc 1 709 0
 2953 1ee7 488B0500 		movq	stdout(%rip), %rax
 2953      000000
 2954 1eee 488B9550 		movq	-432(%rbp), %rdx
 2954      FEFFFF
 2955 1ef5 488B8D40 		movq	-448(%rbp), %rcx
 2955      FEFFFF
 2956 1efc 4889CE   		movq	%rcx, %rsi
 2957 1eff 4889C7   		movq	%rax, %rdi
 2958 1f02 E8000000 		call	arg_print_errors
 2958      00
 710:main.c        **** 		fprintf(stderr, "Try '%s --help' for more information.\n", progName);
 2959              		.loc 1 710 0
 2960 1f07 488B0500 		movq	stderr(%rip), %rax
 2960      000000
 2961 1f0e 488B9550 		movq	-432(%rbp), %rdx
 2961      FEFFFF
 2962 1f15 BE000000 		movl	$.LC103, %esi
 2962      00
 2963 1f1a 4889C7   		movq	%rax, %rdi
 2964 1f1d B8000000 		movl	$0, %eax
 2964      00
 2965 1f22 E8000000 		call	fprintf
 2965      00
 711:main.c        **** 		FAIL(FLP_ARGS, cleanup);
 2966              		.loc 1 711 0
 2967 1f27 C78538FD 		movl	$12, -712(%rbp)
 2967      FFFF0C00 
 2967      0000
 2968 1f31 E9A32200 		jmp	.L152
 2968      00
 2969              	.L154:
 712:main.c        **** 	}
 713:main.c        **** 
 714:main.c        **** 	fStatus = flInitialise(0, &error);
 2970              		.loc 1 714 0
 2971 1f36 488D85A8 		leaq	-600(%rbp), %rax
 2971      FDFFFF
 2972 1f3d 4889C6   		movq	%rax, %rsi
 2973 1f40 BF000000 		movl	$0, %edi
 2973      00
 2974 1f45 E8000000 		call	flInitialise
 2974      00
 2975 1f4a 89853CFD 		movl	%eax, -708(%rbp)
 2975      FFFF
 715:main.c        **** 	CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 2976              		.loc 1 715 0
 2977 1f50 83BD3CFD 		cmpl	$0, -708(%rbp)
 2977      FFFF00
 2978 1f57 740F     		je	.L155
 2979              		.loc 1 715 0 is_stmt 0 discriminator 1
 2980 1f59 C78538FD 		movl	$1, -712(%rbp)
 2980      FFFF0100 
 2980      0000
 2981 1f63 E9712200 		jmp	.L152
 2981      00
 2982              	.L155:
 716:main.c        **** 
 717:main.c        **** 	vp = vpOpt->sval[0];
 2983              		.loc 1 717 0 is_stmt 1
 2984 1f68 488B85D0 		movq	-560(%rbp), %rax
 2984      FDFFFF
 2985 1f6f 488B4068 		movq	104(%rax), %rax
 2986 1f73 488B00   		movq	(%rax), %rax
 2987 1f76 48898560 		movq	%rax, -416(%rbp)
 2987      FEFFFF
 718:main.c        **** 
 719:main.c        **** 	printf("Attempting to open connection to FPGALink device %s...\n", vp);
 2988              		.loc 1 719 0
 2989 1f7d 488B8560 		movq	-416(%rbp), %rax
 2989      FEFFFF
 2990 1f84 4889C6   		movq	%rax, %rsi
 2991 1f87 BF000000 		movl	$.LC104, %edi
 2991      00
 2992 1f8c B8000000 		movl	$0, %eax
 2992      00
 2993 1f91 E8000000 		call	printf
 2993      00
 720:main.c        **** 	fStatus = flOpen(vp, &handle, NULL);
 2994              		.loc 1 720 0
 2995 1f96 488D8DA0 		leaq	-608(%rbp), %rcx
 2995      FDFFFF
 2996 1f9d 488B8560 		movq	-416(%rbp), %rax
 2996      FEFFFF
 2997 1fa4 BA000000 		movl	$0, %edx
 2997      00
 2998 1fa9 4889CE   		movq	%rcx, %rsi
 2999 1fac 4889C7   		movq	%rax, %rdi
 3000 1faf E8000000 		call	flOpen
 3000      00
 3001 1fb4 89853CFD 		movl	%eax, -708(%rbp)
 3001      FFFF
 721:main.c        **** 	if ( fStatus ) {
 3002              		.loc 1 721 0
 3003 1fba 83BD3CFD 		cmpl	$0, -708(%rbp)
 3003      FFFF00
 3004 1fc1 0F842702 		je	.L156
 3004      0000
 722:main.c        **** 		if ( ivpOpt->count ) {
 3005              		.loc 1 722 0
 3006 1fc7 488B85C8 		movq	-568(%rbp), %rax
 3006      FDFFFF
 3007 1fce 8B4060   		movl	96(%rax), %eax
 3008 1fd1 85C0     		testl	%eax, %eax
 3009 1fd3 0F84E601 		je	.L157
 3009      0000
 3010              	.LBB15:
 723:main.c        **** 			int count = 60;
 3011              		.loc 1 723 0
 3012 1fd9 C78544FD 		movl	$60, -700(%rbp)
 3012      FFFF3C00 
 3012      0000
 724:main.c        **** 			uint8 flag;
 725:main.c        **** 			ivp = ivpOpt->sval[0];
 3013              		.loc 1 725 0
 3014 1fe3 488B85C8 		movq	-568(%rbp), %rax
 3014      FDFFFF
 3015 1fea 488B4068 		movq	104(%rax), %rax
 3016 1fee 488B00   		movq	(%rax), %rax
 3017 1ff1 48898558 		movq	%rax, -424(%rbp)
 3017      FEFFFF
 726:main.c        **** 			printf("Loading firmware into %s...\n", ivp);
 3018              		.loc 1 726 0
 3019 1ff8 488B8558 		movq	-424(%rbp), %rax
 3019      FEFFFF
 3020 1fff 4889C6   		movq	%rax, %rsi
 3021 2002 BF000000 		movl	$.LC105, %edi
 3021      00
 3022 2007 B8000000 		movl	$0, %eax
 3022      00
 3023 200c E8000000 		call	printf
 3023      00
 727:main.c        **** 			if ( fwOpt->count ) {
 3024              		.loc 1 727 0
 3025 2011 488B85D8 		movq	-552(%rbp), %rax
 3025      FDFFFF
 3026 2018 8B4060   		movl	96(%rax), %eax
 3027 201b 85C0     		testl	%eax, %eax
 3028 201d 742F     		je	.L158
 728:main.c        **** 				fStatus = flLoadCustomFirmware(ivp, fwOpt->sval[0], &error);
 3029              		.loc 1 728 0
 3030 201f 488B85D8 		movq	-552(%rbp), %rax
 3030      FDFFFF
 3031 2026 488B4068 		movq	104(%rax), %rax
 3032 202a 488B08   		movq	(%rax), %rcx
 3033 202d 488D95A8 		leaq	-600(%rbp), %rdx
 3033      FDFFFF
 3034 2034 488B8558 		movq	-424(%rbp), %rax
 3034      FEFFFF
 3035 203b 4889CE   		movq	%rcx, %rsi
 3036 203e 4889C7   		movq	%rax, %rdi
 3037 2041 E8000000 		call	flLoadCustomFirmware
 3037      00
 3038 2046 89853CFD 		movl	%eax, -708(%rbp)
 3038      FFFF
 3039 204c EB26     		jmp	.L159
 3040              	.L158:
 729:main.c        **** 			} else {
 730:main.c        **** 				fStatus = flLoadStandardFirmware(ivp, vp, &error);
 3041              		.loc 1 730 0
 3042 204e 488D95A8 		leaq	-600(%rbp), %rdx
 3042      FDFFFF
 3043 2055 488B8D60 		movq	-416(%rbp), %rcx
 3043      FEFFFF
 3044 205c 488B8558 		movq	-424(%rbp), %rax
 3044      FEFFFF
 3045 2063 4889CE   		movq	%rcx, %rsi
 3046 2066 4889C7   		movq	%rax, %rdi
 3047 2069 E8000000 		call	flLoadStandardFirmware
 3047      00
 3048 206e 89853CFD 		movl	%eax, -708(%rbp)
 3048      FFFF
 3049              	.L159:
 731:main.c        **** 			}
 732:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3050              		.loc 1 732 0
 3051 2074 83BD3CFD 		cmpl	$0, -708(%rbp)
 3051      FFFF00
 3052 207b 740F     		je	.L160
 3053              		.loc 1 732 0 is_stmt 0 discriminator 1
 3054 207d C78538FD 		movl	$1, -712(%rbp)
 3054      FFFF0100 
 3054      0000
 3055 2087 E94D2100 		jmp	.L152
 3055      00
 3056              	.L160:
 733:main.c        **** 			
 734:main.c        **** 			printf("Awaiting renumeration");
 3057              		.loc 1 734 0 is_stmt 1
 3058 208c BF000000 		movl	$.LC106, %edi
 3058      00
 3059 2091 B8000000 		movl	$0, %eax
 3059      00
 3060 2096 E8000000 		call	printf
 3060      00
 735:main.c        **** 			flSleep(1000);
 3061              		.loc 1 735 0
 3062 209b BFE80300 		movl	$1000, %edi
 3062      00
 3063 20a0 E8000000 		call	flSleep
 3063      00
 3064              	.L164:
 736:main.c        **** 			do {
 737:main.c        **** 				printf(".");
 3065              		.loc 1 737 0
 3066 20a5 BF2E0000 		movl	$46, %edi
 3066      00
 3067 20aa E8000000 		call	putchar
 3067      00
 738:main.c        **** 				fflush(stdout);
 3068              		.loc 1 738 0
 3069 20af 488B0500 		movq	stdout(%rip), %rax
 3069      000000
 3070 20b6 4889C7   		movq	%rax, %rdi
 3071 20b9 E8000000 		call	fflush
 3071      00
 739:main.c        **** 				fStatus = flIsDeviceAvailable(vp, &flag, &error);
 3072              		.loc 1 739 0
 3073 20be 488D95A8 		leaq	-600(%rbp), %rdx
 3073      FDFFFF
 3074 20c5 488D8DA0 		leaq	-352(%rbp), %rcx
 3074      FEFFFF
 3075 20cc 488B8560 		movq	-416(%rbp), %rax
 3075      FEFFFF
 3076 20d3 4889CE   		movq	%rcx, %rsi
 3077 20d6 4889C7   		movq	%rax, %rdi
 3078 20d9 E8000000 		call	flIsDeviceAvailable
 3078      00
 3079 20de 89853CFD 		movl	%eax, -708(%rbp)
 3079      FFFF
 740:main.c        **** 				CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3080              		.loc 1 740 0
 3081 20e4 83BD3CFD 		cmpl	$0, -708(%rbp)
 3081      FFFF00
 3082 20eb 740F     		je	.L162
 3083              		.loc 1 740 0 is_stmt 0 discriminator 1
 3084 20ed C78538FD 		movl	$1, -712(%rbp)
 3084      FFFF0100 
 3084      0000
 3085 20f7 E9DD2000 		jmp	.L152
 3085      00
 3086              	.L162:
 741:main.c        **** 				flSleep(250);
 3087              		.loc 1 741 0 is_stmt 1
 3088 20fc BFFA0000 		movl	$250, %edi
 3088      00
 3089 2101 E8000000 		call	flSleep
 3089      00
 742:main.c        **** 				count--;
 3090              		.loc 1 742 0
 3091 2106 83AD44FD 		subl	$1, -700(%rbp)
 3091      FFFF01
 743:main.c        **** 			} while ( !flag && count );
 3092              		.loc 1 743 0
 3093 210d 0FB685A0 		movzbl	-352(%rbp), %eax
 3093      FEFFFF
 3094 2114 84C0     		testb	%al, %al
 3095 2116 7509     		jne	.L163
 3096              		.loc 1 743 0 is_stmt 0 discriminator 1
 3097 2118 83BD44FD 		cmpl	$0, -700(%rbp)
 3097      FFFF00
 3098 211f 7584     		jne	.L164
 3099              	.L163:
 744:main.c        **** 			printf("\n");
 3100              		.loc 1 744 0 is_stmt 1
 3101 2121 BF0A0000 		movl	$10, %edi
 3101      00
 3102 2126 E8000000 		call	putchar
 3102      00
 745:main.c        **** 			if ( !flag ) {
 3103              		.loc 1 745 0
 3104 212b 0FB685A0 		movzbl	-352(%rbp), %eax
 3104      FEFFFF
 3105 2132 84C0     		testb	%al, %al
 3106 2134 752F     		jne	.L165
 746:main.c        **** 				fprintf(stderr, "FPGALink device did not renumerate properly as %s\n", vp);
 3107              		.loc 1 746 0
 3108 2136 488B0500 		movq	stderr(%rip), %rax
 3108      000000
 3109 213d 488B9560 		movq	-416(%rbp), %rdx
 3109      FEFFFF
 3110 2144 BE000000 		movl	$.LC107, %esi
 3110      00
 3111 2149 4889C7   		movq	%rax, %rdi
 3112 214c B8000000 		movl	$0, %eax
 3112      00
 3113 2151 E8000000 		call	fprintf
 3113      00
 747:main.c        **** 				FAIL(FLP_LIBERR, cleanup);
 3114              		.loc 1 747 0
 3115 2156 C78538FD 		movl	$1, -712(%rbp)
 3115      FFFF0100 
 3115      0000
 3116 2160 E9742000 		jmp	.L152
 3116      00
 3117              	.L165:
 748:main.c        **** 			}
 749:main.c        **** 
 750:main.c        **** 			printf("Attempting to open connection to FPGLink device %s again...\n", vp);
 3118              		.loc 1 750 0
 3119 2165 488B8560 		movq	-416(%rbp), %rax
 3119      FEFFFF
 3120 216c 4889C6   		movq	%rax, %rsi
 3121 216f BF000000 		movl	$.LC108, %edi
 3121      00
 3122 2174 B8000000 		movl	$0, %eax
 3122      00
 3123 2179 E8000000 		call	printf
 3123      00
 751:main.c        **** 			fStatus = flOpen(vp, &handle, &error);
 3124              		.loc 1 751 0
 3125 217e 488D95A8 		leaq	-600(%rbp), %rdx
 3125      FDFFFF
 3126 2185 488D8DA0 		leaq	-608(%rbp), %rcx
 3126      FDFFFF
 3127 218c 488B8560 		movq	-416(%rbp), %rax
 3127      FEFFFF
 3128 2193 4889CE   		movq	%rcx, %rsi
 3129 2196 4889C7   		movq	%rax, %rdi
 3130 2199 E8000000 		call	flOpen
 3130      00
 3131 219e 89853CFD 		movl	%eax, -708(%rbp)
 3131      FFFF
 752:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3132              		.loc 1 752 0
 3133 21a4 83BD3CFD 		cmpl	$0, -708(%rbp)
 3133      FFFF00
 3134 21ab 7410     		je	.L166
 3135              		.loc 1 752 0 is_stmt 0 discriminator 1
 3136 21ad C78538FD 		movl	$1, -712(%rbp)
 3136      FFFF0100 
 3136      0000
 3137 21b7 90       		nop
 3138 21b8 E91C2000 		jmp	.L152
 3138      00
 3139              	.L166:
 3140              	.LBE15:
 3141 21bd EB2F     		jmp	.L156
 3142              	.L157:
 753:main.c        **** 		} else {
 754:main.c        **** 			fprintf(stderr, "Could not open FPGALink device at %s and no initial VID:PID was supplied\n", vp
 3143              		.loc 1 754 0 is_stmt 1
 3144 21bf 488B0500 		movq	stderr(%rip), %rax
 3144      000000
 3145 21c6 488B9560 		movq	-416(%rbp), %rdx
 3145      FEFFFF
 3146 21cd BE000000 		movl	$.LC109, %esi
 3146      00
 3147 21d2 4889C7   		movq	%rax, %rdi
 3148 21d5 B8000000 		movl	$0, %eax
 3148      00
 3149 21da E8000000 		call	fprintf
 3149      00
 755:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3150              		.loc 1 755 0
 3151 21df C78538FD 		movl	$12, -712(%rbp)
 3151      FFFF0C00 
 3151      0000
 3152 21e9 E9EB1F00 		jmp	.L152
 3152      00
 3153              	.L156:
 756:main.c        **** 		}
 757:main.c        **** 	}
 758:main.c        **** 
 759:main.c        **** 	printf(
 3154              		.loc 1 759 0
 3155 21ee 488B85A0 		movq	-608(%rbp), %rax
 3155      FDFFFF
 3156 21f5 4889C7   		movq	%rax, %rdi
 3157 21f8 E8000000 		call	flGetFirmwareVersion
 3157      00
 3158 21fd 89C3     		movl	%eax, %ebx
 760:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 761:main.c        **** 		vp, flGetFirmwareID(handle), flGetFirmwareVersion(handle)
 3159              		.loc 1 761 0
 3160 21ff 488B85A0 		movq	-608(%rbp), %rax
 3160      FDFFFF
 3161 2206 4889C7   		movq	%rax, %rdi
 3162 2209 E8000000 		call	flGetFirmwareID
 3162      00
 759:main.c        **** 		"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n",
 3163              		.loc 1 759 0
 3164 220e 0FB7D0   		movzwl	%ax, %edx
 3165 2211 488B8560 		movq	-416(%rbp), %rax
 3165      FEFFFF
 3166 2218 89D9     		movl	%ebx, %ecx
 3167 221a 4889C6   		movq	%rax, %rsi
 3168 221d BF000000 		movl	$.LC110, %edi
 3168      00
 3169 2222 B8000000 		movl	$0, %eax
 3169      00
 3170 2227 E8000000 		call	printf
 3170      00
 762:main.c        **** 	);
 763:main.c        **** 
 764:main.c        **** 	if ( eepromOpt->count ) {
 3171              		.loc 1 764 0
 3172 222c 488B8530 		movq	-464(%rbp), %rax
 3172      FEFFFF
 3173 2233 8B4060   		movl	96(%rax), %eax
 3174 2236 85C0     		testl	%eax, %eax
 3175 2238 0F84B600 		je	.L167
 3175      0000
 765:main.c        **** 		if ( !strcmp("std", eepromOpt->sval[0]) ) {
 3176              		.loc 1 765 0
 3177 223e 488B8530 		movq	-464(%rbp), %rax
 3177      FEFFFF
 3178 2245 488B4068 		movq	104(%rax), %rax
 3179 2249 488B00   		movq	(%rax), %rax
 3180 224c 4889C6   		movq	%rax, %rsi
 3181 224f BF000000 		movl	$.LC111, %edi
 3181      00
 3182 2254 E8000000 		call	strcmp
 3182      00
 3183 2259 85C0     		testl	%eax, %eax
 3184 225b 7532     		jne	.L168
 766:main.c        **** 			printf("Writing the standard FPGALink firmware to the FX2's EEPROM...\n");
 3185              		.loc 1 766 0
 3186 225d BF000000 		movl	$.LC112, %edi
 3186      00
 3187 2262 E8000000 		call	puts
 3187      00
 767:main.c        **** 			fStatus = flFlashStandardFirmware(handle, vp, &error);
 3188              		.loc 1 767 0
 3189 2267 488B85A0 		movq	-608(%rbp), %rax
 3189      FDFFFF
 3190 226e 488D95A8 		leaq	-600(%rbp), %rdx
 3190      FDFFFF
 3191 2275 488B8D60 		movq	-416(%rbp), %rcx
 3191      FEFFFF
 3192 227c 4889CE   		movq	%rcx, %rsi
 3193 227f 4889C7   		movq	%rax, %rdi
 3194 2282 E8000000 		call	flFlashStandardFirmware
 3194      00
 3195 2287 89853CFD 		movl	%eax, -708(%rbp)
 3195      FFFF
 3196 228d EB4D     		jmp	.L169
 3197              	.L168:
 768:main.c        **** 		} else {
 769:main.c        **** 			printf("Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n", eepromOpt->sval[0]);
 3198              		.loc 1 769 0
 3199 228f 488B8530 		movq	-464(%rbp), %rax
 3199      FEFFFF
 3200 2296 488B4068 		movq	104(%rax), %rax
 3201 229a 488B00   		movq	(%rax), %rax
 3202 229d 4889C6   		movq	%rax, %rsi
 3203 22a0 BF000000 		movl	$.LC113, %edi
 3203      00
 3204 22a5 B8000000 		movl	$0, %eax
 3204      00
 3205 22aa E8000000 		call	printf
 3205      00
 770:main.c        **** 			fStatus = flFlashCustomFirmware(handle, eepromOpt->sval[0], &error);
 3206              		.loc 1 770 0
 3207 22af 488B8530 		movq	-464(%rbp), %rax
 3207      FEFFFF
 3208 22b6 488B4068 		movq	104(%rax), %rax
 3209 22ba 488B08   		movq	(%rax), %rcx
 3210 22bd 488B85A0 		movq	-608(%rbp), %rax
 3210      FDFFFF
 3211 22c4 488D95A8 		leaq	-600(%rbp), %rdx
 3211      FDFFFF
 3212 22cb 4889CE   		movq	%rcx, %rsi
 3213 22ce 4889C7   		movq	%rax, %rdi
 3214 22d1 E8000000 		call	flFlashCustomFirmware
 3214      00
 3215 22d6 89853CFD 		movl	%eax, -708(%rbp)
 3215      FFFF
 3216              	.L169:
 771:main.c        **** 		}
 772:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3217              		.loc 1 772 0
 3218 22dc 83BD3CFD 		cmpl	$0, -708(%rbp)
 3218      FFFF00
 3219 22e3 740F     		je	.L167
 3220              		.loc 1 772 0 is_stmt 0 discriminator 1
 3221 22e5 C78538FD 		movl	$1, -712(%rbp)
 3221      FFFF0100 
 3221      0000
 3222 22ef E9E51E00 		jmp	.L152
 3222      00
 3223              	.L167:
 773:main.c        **** 	}
 774:main.c        **** 
 775:main.c        **** 	if ( backupOpt->count ) {
 3224              		.loc 1 775 0 is_stmt 1
 3225 22f4 488B8538 		movq	-456(%rbp), %rax
 3225      FEFFFF
 3226 22fb 8B4060   		movl	96(%rax), %eax
 3227 22fe 85C0     		testl	%eax, %eax
 3228 2300 0F84DA00 		je	.L170
 3228      0000
 3229              	.LBB16:
 776:main.c        **** 		const char *fileName;
 777:main.c        **** 		const uint32 kbitSize = strtoul(backupOpt->sval[0], (char**)&fileName, 0);
 3230              		.loc 1 777 0
 3231 2306 488B8538 		movq	-456(%rbp), %rax
 3231      FEFFFF
 3232 230d 488B4068 		movq	104(%rax), %rax
 3233 2311 488B00   		movq	(%rax), %rax
 3234 2314 488D8DA0 		leaq	-352(%rbp), %rcx
 3234      FEFFFF
 3235 231b BA000000 		movl	$0, %edx
 3235      00
 3236 2320 4889CE   		movq	%rcx, %rsi
 3237 2323 4889C7   		movq	%rax, %rdi
 3238 2326 E8000000 		call	strtoul
 3238      00
 3239 232b 898574FD 		movl	%eax, -652(%rbp)
 3239      FFFF
 778:main.c        **** 		if ( *fileName != ':' ) {
 3240              		.loc 1 778 0
 3241 2331 488B85A0 		movq	-352(%rbp), %rax
 3241      FEFFFF
 3242 2338 0FB600   		movzbl	(%rax), %eax
 3243 233b 3C3A     		cmpb	$58, %al
 3244 233d 742F     		je	.L171
 779:main.c        **** 			fprintf(stderr, "%s: invalid argument to option --backup=<kbitSize:fw.iic>\n", progName);
 3245              		.loc 1 779 0
 3246 233f 488B0500 		movq	stderr(%rip), %rax
 3246      000000
 3247 2346 488B9550 		movq	-432(%rbp), %rdx
 3247      FEFFFF
 3248 234d BE000000 		movl	$.LC114, %esi
 3248      00
 3249 2352 4889C7   		movq	%rax, %rdi
 3250 2355 B8000000 		movl	$0, %eax
 3250      00
 3251 235a E8000000 		call	fprintf
 3251      00
 780:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3252              		.loc 1 780 0
 3253 235f C78538FD 		movl	$12, -712(%rbp)
 3253      FFFF0C00 
 3253      0000
 3254 2369 E96B1E00 		jmp	.L152
 3254      00
 3255              	.L171:
 781:main.c        **** 		}
 782:main.c        **** 		fileName++;
 3256              		.loc 1 782 0
 3257 236e 488B85A0 		movq	-352(%rbp), %rax
 3257      FEFFFF
 3258 2375 4883C001 		addq	$1, %rax
 3259 2379 488985A0 		movq	%rax, -352(%rbp)
 3259      FEFFFF
 783:main.c        **** 		printf("Saving a backup of %d kbit from the FX2's EEPROM to %s...\n", kbitSize, fileName);
 3260              		.loc 1 783 0
 3261 2380 488B95A0 		movq	-352(%rbp), %rdx
 3261      FEFFFF
 3262 2387 8B8574FD 		movl	-652(%rbp), %eax
 3262      FFFF
 3263 238d 89C6     		movl	%eax, %esi
 3264 238f BF000000 		movl	$.LC115, %edi
 3264      00
 3265 2394 B8000000 		movl	$0, %eax
 3265      00
 3266 2399 E8000000 		call	printf
 3266      00
 784:main.c        **** 		fStatus = flSaveFirmware(handle, kbitSize, fileName, &error);
 3267              		.loc 1 784 0
 3268 239e 488B95A0 		movq	-352(%rbp), %rdx
 3268      FEFFFF
 3269 23a5 488B85A0 		movq	-608(%rbp), %rax
 3269      FDFFFF
 3270 23ac 488D8DA8 		leaq	-600(%rbp), %rcx
 3270      FDFFFF
 3271 23b3 8BB574FD 		movl	-652(%rbp), %esi
 3271      FFFF
 3272 23b9 4889C7   		movq	%rax, %rdi
 3273 23bc E8000000 		call	flSaveFirmware
 3273      00
 3274 23c1 89853CFD 		movl	%eax, -708(%rbp)
 3274      FFFF
 785:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3275              		.loc 1 785 0
 3276 23c7 83BD3CFD 		cmpl	$0, -708(%rbp)
 3276      FFFF00
 3277 23ce 7410     		je	.L170
 3278              		.loc 1 785 0 is_stmt 0 discriminator 1
 3279 23d0 C78538FD 		movl	$1, -712(%rbp)
 3279      FFFF0100 
 3279      0000
 3280 23da 90       		nop
 3281 23db E9F91D00 		jmp	.L152
 3281      00
 3282              	.L170:
 3283              	.LBE16:
 786:main.c        **** 	}
 787:main.c        **** 
 788:main.c        **** 	if ( rstOpt->count ) {
 3284              		.loc 1 788 0 is_stmt 1
 3285 23e0 488B8518 		movq	-488(%rbp), %rax
 3285      FEFFFF
 3286 23e7 8B4060   		movl	96(%rax), %eax
 3287 23ea 85C0     		testl	%eax, %eax
 3288 23ec 7437     		je	.L174
 789:main.c        **** 		// Reset the bulk endpoints (only needed in some virtualised environments)
 790:main.c        **** 		fStatus = flResetToggle(handle, &error);
 3289              		.loc 1 790 0
 3290 23ee 488B85A0 		movq	-608(%rbp), %rax
 3290      FDFFFF
 3291 23f5 488D95A8 		leaq	-600(%rbp), %rdx
 3291      FDFFFF
 3292 23fc 4889D6   		movq	%rdx, %rsi
 3293 23ff 4889C7   		movq	%rax, %rdi
 3294 2402 E8000000 		call	flResetToggle
 3294      00
 3295 2407 89853CFD 		movl	%eax, -708(%rbp)
 3295      FFFF
 791:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3296              		.loc 1 791 0
 3297 240d 83BD3CFD 		cmpl	$0, -708(%rbp)
 3297      FFFF00
 3298 2414 740F     		je	.L174
 3299              		.loc 1 791 0 is_stmt 0 discriminator 1
 3300 2416 C78538FD 		movl	$1, -712(%rbp)
 3300      FFFF0100 
 3300      0000
 3301 2420 E9B41D00 		jmp	.L152
 3301      00
 3302              	.L174:
 792:main.c        **** 	}
 793:main.c        **** 
 794:main.c        **** 	if ( conOpt->count ) {
 3303              		.loc 1 794 0 is_stmt 1
 3304 2425 488B85F8 		movq	-520(%rbp), %rax
 3304      FDFFFF
 3305 242c 8B4060   		movl	96(%rax), %eax
 3306 242f 85C0     		testl	%eax, %eax
 3307 2431 7413     		je	.L175
 795:main.c        **** 		conduit = (uint8)conOpt->ival[0];
 3308              		.loc 1 795 0
 3309 2433 488B85F8 		movq	-520(%rbp), %rax
 3309      FDFFFF
 3310 243a 488B4068 		movq	104(%rax), %rax
 3311 243e 8B00     		movl	(%rax), %eax
 3312 2440 888509FD 		movb	%al, -759(%rbp)
 3312      FFFF
 3313              	.L175:
 796:main.c        **** 	}
 797:main.c        **** 
 798:main.c        **** 	isNeroCapable = flIsNeroCapable(handle);
 3314              		.loc 1 798 0
 3315 2446 488B85A0 		movq	-608(%rbp), %rax
 3315      FDFFFF
 3316 244d 4889C7   		movq	%rax, %rdi
 3317 2450 E8000000 		call	flIsNeroCapable
 3317      00
 3318 2455 84C0     		testb	%al, %al
 3319 2457 0F95C0   		setne	%al
 3320 245a 888519FD 		movb	%al, -743(%rbp)
 3320      FFFF
 799:main.c        **** 	isCommCapable = flIsCommCapable(handle, conduit);
 3321              		.loc 1 799 0
 3322 2460 0FB69509 		movzbl	-759(%rbp), %edx
 3322      FDFFFF
 3323 2467 488B85A0 		movq	-608(%rbp), %rax
 3323      FDFFFF
 3324 246e 89D6     		movl	%edx, %esi
 3325 2470 4889C7   		movq	%rax, %rdi
 3326 2473 E8000000 		call	flIsCommCapable
 3326      00
 3327 2478 84C0     		testb	%al, %al
 3328 247a 0F95C0   		setne	%al
 3329 247d 88851AFD 		movb	%al, -742(%rbp)
 3329      FFFF
 800:main.c        **** 
 801:main.c        **** 	if ( portOpt->count ) {
 3330              		.loc 1 801 0
 3331 2483 488B85E0 		movq	-544(%rbp), %rax
 3331      FDFFFF
 3332 248a 8B4060   		movl	96(%rax), %eax
 3333 248d 85C0     		testl	%eax, %eax
 3334 248f 0F844202 		je	.L176
 3334      0000
 3335              	.LBB17:
 802:main.c        **** 		uint32 readState;
 803:main.c        **** 		char hex[9];
 804:main.c        **** 		const uint8 *p = (const uint8 *)hex;
 3336              		.loc 1 804 0
 3337 2495 488D8570 		leaq	-144(%rbp), %rax
 3337      FFFFFF
 3338 249c 48898568 		movq	%rax, -408(%rbp)
 3338      FEFFFF
 805:main.c        **** 		printf("Configuring ports...\n");
 3339              		.loc 1 805 0
 3340 24a3 BF000000 		movl	$.LC116, %edi
 3340      00
 3341 24a8 E8000000 		call	puts
 3341      00
 806:main.c        **** 		fStatus = flMultiBitPortAccess(handle, portOpt->sval[0], &readState, &error);
 3342              		.loc 1 806 0
 3343 24ad 488B85E0 		movq	-544(%rbp), %rax
 3343      FDFFFF
 3344 24b4 488B4068 		movq	104(%rax), %rax
 3345 24b8 488B30   		movq	(%rax), %rsi
 3346 24bb 488B85A0 		movq	-608(%rbp), %rax
 3346      FDFFFF
 3347 24c2 488D8DA8 		leaq	-600(%rbp), %rcx
 3347      FDFFFF
 3348 24c9 488D95A0 		leaq	-352(%rbp), %rdx
 3348      FEFFFF
 3349 24d0 4889C7   		movq	%rax, %rdi
 3350 24d3 E8000000 		call	flMultiBitPortAccess
 3350      00
 3351 24d8 89853CFD 		movl	%eax, -708(%rbp)
 3351      FFFF
 807:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3352              		.loc 1 807 0
 3353 24de 83BD3CFD 		cmpl	$0, -708(%rbp)
 3353      FFFF00
 3354 24e5 740F     		je	.L177
 3355              		.loc 1 807 0 is_stmt 0 discriminator 1
 3356 24e7 C78538FD 		movl	$1, -712(%rbp)
 3356      FFFF0100 
 3356      0000
 3357 24f1 E9E31C00 		jmp	.L152
 3357      00
 3358              	.L177:
 808:main.c        **** 		sprintf(hex, "%08X", readState);
 3359              		.loc 1 808 0 is_stmt 1
 3360 24f6 8B95A0FE 		movl	-352(%rbp), %edx
 3360      FFFF
 3361 24fc 488D8570 		leaq	-144(%rbp), %rax
 3361      FFFFFF
 3362 2503 BE000000 		movl	$.LC117, %esi
 3362      00
 3363 2508 4889C7   		movq	%rax, %rdi
 3364 250b B8000000 		movl	$0, %eax
 3364      00
 3365 2510 E8000000 		call	sprintf
 3365      00
 809:main.c        **** 		printf("Readback:   28   24   20   16    12    8    4    0\n          %s", nibbles[*p++ - '0']);
 3366              		.loc 1 809 0
 3367 2515 488B8568 		movq	-408(%rbp), %rax
 3367      FEFFFF
 3368 251c 488D5001 		leaq	1(%rax), %rdx
 3369 2520 48899568 		movq	%rdx, -408(%rbp)
 3369      FEFFFF
 3370 2527 0FB600   		movzbl	(%rax), %eax
 3371 252a 0FB6C0   		movzbl	%al, %eax
 3372 252d 83E830   		subl	$48, %eax
 3373 2530 4898     		cltq
 3374 2532 488B04C5 		movq	nibbles(,%rax,8), %rax
 3374      00000000 
 3375 253a 4889C6   		movq	%rax, %rsi
 3376 253d BF000000 		movl	$.LC118, %edi
 3376      00
 3377 2542 B8000000 		movl	$0, %eax
 3377      00
 3378 2547 E8000000 		call	printf
 3378      00
 810:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3379              		.loc 1 810 0
 3380 254c 488B8568 		movq	-408(%rbp), %rax
 3380      FEFFFF
 3381 2553 488D5001 		leaq	1(%rax), %rdx
 3382 2557 48899568 		movq	%rdx, -408(%rbp)
 3382      FEFFFF
 3383 255e 0FB600   		movzbl	(%rax), %eax
 3384 2561 0FB6C0   		movzbl	%al, %eax
 3385 2564 83E830   		subl	$48, %eax
 3386 2567 4898     		cltq
 3387 2569 488B04C5 		movq	nibbles(,%rax,8), %rax
 3387      00000000 
 3388 2571 4889C6   		movq	%rax, %rsi
 3389 2574 BF000000 		movl	$.LC119, %edi
 3389      00
 3390 2579 B8000000 		movl	$0, %eax
 3390      00
 3391 257e E8000000 		call	printf
 3391      00
 811:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3392              		.loc 1 811 0
 3393 2583 488B8568 		movq	-408(%rbp), %rax
 3393      FEFFFF
 3394 258a 488D5001 		leaq	1(%rax), %rdx
 3395 258e 48899568 		movq	%rdx, -408(%rbp)
 3395      FEFFFF
 3396 2595 0FB600   		movzbl	(%rax), %eax
 3397 2598 0FB6C0   		movzbl	%al, %eax
 3398 259b 83E830   		subl	$48, %eax
 3399 259e 4898     		cltq
 3400 25a0 488B04C5 		movq	nibbles(,%rax,8), %rax
 3400      00000000 
 3401 25a8 4889C6   		movq	%rax, %rsi
 3402 25ab BF000000 		movl	$.LC119, %edi
 3402      00
 3403 25b0 B8000000 		movl	$0, %eax
 3403      00
 3404 25b5 E8000000 		call	printf
 3404      00
 812:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3405              		.loc 1 812 0
 3406 25ba 488B8568 		movq	-408(%rbp), %rax
 3406      FEFFFF
 3407 25c1 488D5001 		leaq	1(%rax), %rdx
 3408 25c5 48899568 		movq	%rdx, -408(%rbp)
 3408      FEFFFF
 3409 25cc 0FB600   		movzbl	(%rax), %eax
 3410 25cf 0FB6C0   		movzbl	%al, %eax
 3411 25d2 83E830   		subl	$48, %eax
 3412 25d5 4898     		cltq
 3413 25d7 488B04C5 		movq	nibbles(,%rax,8), %rax
 3413      00000000 
 3414 25df 4889C6   		movq	%rax, %rsi
 3415 25e2 BF000000 		movl	$.LC119, %edi
 3415      00
 3416 25e7 B8000000 		movl	$0, %eax
 3416      00
 3417 25ec E8000000 		call	printf
 3417      00
 813:main.c        **** 		printf("  %s", nibbles[*p++ - '0']);
 3418              		.loc 1 813 0
 3419 25f1 488B8568 		movq	-408(%rbp), %rax
 3419      FEFFFF
 3420 25f8 488D5001 		leaq	1(%rax), %rdx
 3421 25fc 48899568 		movq	%rdx, -408(%rbp)
 3421      FEFFFF
 3422 2603 0FB600   		movzbl	(%rax), %eax
 3423 2606 0FB6C0   		movzbl	%al, %eax
 3424 2609 83E830   		subl	$48, %eax
 3425 260c 4898     		cltq
 3426 260e 488B04C5 		movq	nibbles(,%rax,8), %rax
 3426      00000000 
 3427 2616 4889C6   		movq	%rax, %rsi
 3428 2619 BF000000 		movl	$.LC120, %edi
 3428      00
 3429 261e B8000000 		movl	$0, %eax
 3429      00
 3430 2623 E8000000 		call	printf
 3430      00
 814:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3431              		.loc 1 814 0
 3432 2628 488B8568 		movq	-408(%rbp), %rax
 3432      FEFFFF
 3433 262f 488D5001 		leaq	1(%rax), %rdx
 3434 2633 48899568 		movq	%rdx, -408(%rbp)
 3434      FEFFFF
 3435 263a 0FB600   		movzbl	(%rax), %eax
 3436 263d 0FB6C0   		movzbl	%al, %eax
 3437 2640 83E830   		subl	$48, %eax
 3438 2643 4898     		cltq
 3439 2645 488B04C5 		movq	nibbles(,%rax,8), %rax
 3439      00000000 
 3440 264d 4889C6   		movq	%rax, %rsi
 3441 2650 BF000000 		movl	$.LC119, %edi
 3441      00
 3442 2655 B8000000 		movl	$0, %eax
 3442      00
 3443 265a E8000000 		call	printf
 3443      00
 815:main.c        **** 		printf(" %s", nibbles[*p++ - '0']);
 3444              		.loc 1 815 0
 3445 265f 488B8568 		movq	-408(%rbp), %rax
 3445      FEFFFF
 3446 2666 488D5001 		leaq	1(%rax), %rdx
 3447 266a 48899568 		movq	%rdx, -408(%rbp)
 3447      FEFFFF
 3448 2671 0FB600   		movzbl	(%rax), %eax
 3449 2674 0FB6C0   		movzbl	%al, %eax
 3450 2677 83E830   		subl	$48, %eax
 3451 267a 4898     		cltq
 3452 267c 488B04C5 		movq	nibbles(,%rax,8), %rax
 3452      00000000 
 3453 2684 4889C6   		movq	%rax, %rsi
 3454 2687 BF000000 		movl	$.LC119, %edi
 3454      00
 3455 268c B8000000 		movl	$0, %eax
 3455      00
 3456 2691 E8000000 		call	printf
 3456      00
 816:main.c        **** 		printf(" %s\n", nibbles[*p++ - '0']);
 3457              		.loc 1 816 0
 3458 2696 488B8568 		movq	-408(%rbp), %rax
 3458      FEFFFF
 3459 269d 488D5001 		leaq	1(%rax), %rdx
 3460 26a1 48899568 		movq	%rdx, -408(%rbp)
 3460      FEFFFF
 3461 26a8 0FB600   		movzbl	(%rax), %eax
 3462 26ab 0FB6C0   		movzbl	%al, %eax
 3463 26ae 83E830   		subl	$48, %eax
 3464 26b1 4898     		cltq
 3465 26b3 488B04C5 		movq	nibbles(,%rax,8), %rax
 3465      00000000 
 3466 26bb 4889C6   		movq	%rax, %rsi
 3467 26be BF000000 		movl	$.LC121, %edi
 3467      00
 3468 26c3 B8000000 		movl	$0, %eax
 3468      00
 3469 26c8 E8000000 		call	printf
 3469      00
 817:main.c        **** 		flSleep(100);
 3470              		.loc 1 817 0
 3471 26cd BF640000 		movl	$100, %edi
 3471      00
 3472 26d2 E8000000 		call	flSleep
 3472      00
 3473              	.L176:
 3474              	.LBE17:
 818:main.c        **** 	}
 819:main.c        **** 
 820:main.c        **** 	if ( queryOpt->count ) {
 3475              		.loc 1 820 0
 3476 26d7 488B85E8 		movq	-536(%rbp), %rax
 3476      FDFFFF
 3477 26de 8B4060   		movl	96(%rax), %eax
 3478 26e1 85C0     		testl	%eax, %eax
 3479 26e3 0F844D01 		je	.L178
 3479      0000
 821:main.c        **** 		if ( isNeroCapable ) {
 3480              		.loc 1 821 0
 3481 26e9 80BD19FD 		cmpb	$0, -743(%rbp)
 3481      FFFF00
 3482 26f0 0F841101 		je	.L179
 3482      0000
 822:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 3483              		.loc 1 822 0
 3484 26f6 488B85A0 		movq	-608(%rbp), %rax
 3484      FDFFFF
 3485 26fd 488D95A8 		leaq	-600(%rbp), %rdx
 3485      FDFFFF
 3486 2704 BE000000 		movl	$0, %esi
 3486      00
 3487 2709 4889C7   		movq	%rax, %rdi
 3488 270c E8000000 		call	flSelectConduit
 3488      00
 3489 2711 89853CFD 		movl	%eax, -708(%rbp)
 3489      FFFF
 823:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3490              		.loc 1 823 0
 3491 2717 83BD3CFD 		cmpl	$0, -708(%rbp)
 3491      FFFF00
 3492 271e 740F     		je	.L180
 3493              		.loc 1 823 0 is_stmt 0 discriminator 1
 3494 2720 C78538FD 		movl	$1, -712(%rbp)
 3494      FFFF0100 
 3494      0000
 3495 272a E9AA1A00 		jmp	.L152
 3495      00
 3496              	.L180:
 824:main.c        **** 			fStatus = jtagScanChain(handle, queryOpt->sval[0], &numDevices, scanChain, 16, &error);
 3497              		.loc 1 824 0 is_stmt 1
 3498 272f 488B85E8 		movq	-536(%rbp), %rax
 3498      FDFFFF
 3499 2736 488B4068 		movq	104(%rax), %rax
 3500 273a 488B30   		movq	(%rax), %rsi
 3501 273d 488B85A0 		movq	-608(%rbp), %rax
 3501      FDFFFF
 3502 2744 488DBDA8 		leaq	-600(%rbp), %rdi
 3502      FDFFFF
 3503 274b 488D8DA0 		leaq	-352(%rbp), %rcx
 3503      FEFFFF
 3504 2752 488D9528 		leaq	-728(%rbp), %rdx
 3504      FDFFFF
 3505 2759 4989F9   		movq	%rdi, %r9
 3506 275c 41B81000 		movl	$16, %r8d
 3506      0000
 3507 2762 4889C7   		movq	%rax, %rdi
 3508 2765 E8000000 		call	jtagScanChain
 3508      00
 3509 276a 89853CFD 		movl	%eax, -708(%rbp)
 3509      FFFF
 825:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3510              		.loc 1 825 0
 3511 2770 83BD3CFD 		cmpl	$0, -708(%rbp)
 3511      FFFF00
 3512 2777 740F     		je	.L181
 3513              		.loc 1 825 0 is_stmt 0 discriminator 1
 3514 2779 C78538FD 		movl	$1, -712(%rbp)
 3514      FFFF0100 
 3514      0000
 3515 2783 E9511A00 		jmp	.L152
 3515      00
 3516              	.L181:
 826:main.c        **** 			if ( numDevices ) {
 3517              		.loc 1 826 0 is_stmt 1
 3518 2788 8B8528FD 		movl	-728(%rbp), %eax
 3518      FFFF
 3519 278e 85C0     		testl	%eax, %eax
 3520 2790 745A     		je	.L182
 827:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain, yielding:\n", vp);
 3521              		.loc 1 827 0
 3522 2792 488B8560 		movq	-416(%rbp), %rax
 3522      FEFFFF
 3523 2799 4889C6   		movq	%rax, %rsi
 3524 279c BF000000 		movl	$.LC122, %edi
 3524      00
 3525 27a1 B8000000 		movl	$0, %eax
 3525      00
 3526 27a6 E8000000 		call	printf
 3526      00
 828:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3527              		.loc 1 828 0
 3528 27ab C78540FD 		movl	$0, -704(%rbp)
 3528      FFFF0000 
 3528      0000
 3529 27b5 EB25     		jmp	.L183
 3530              	.L184:
 829:main.c        **** 					printf("  0x%08X\n", scanChain[i]);
 3531              		.loc 1 829 0 discriminator 2
 3532 27b7 8B8540FD 		movl	-704(%rbp), %eax
 3532      FFFF
 3533 27bd 8B8485A0 		movl	-352(%rbp,%rax,4), %eax
 3533      FEFFFF
 3534 27c4 89C6     		movl	%eax, %esi
 3535 27c6 BF000000 		movl	$.LC123, %edi
 3535      00
 3536 27cb B8000000 		movl	$0, %eax
 3536      00
 3537 27d0 E8000000 		call	printf
 3537      00
 828:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3538              		.loc 1 828 0 discriminator 2
 3539 27d5 838540FD 		addl	$1, -704(%rbp)
 3539      FFFF01
 3540              	.L183:
 828:main.c        **** 				for ( i = 0; i < numDevices; i++ ) {
 3541              		.loc 1 828 0 is_stmt 0 discriminator 1
 3542 27dc 8B8528FD 		movl	-728(%rbp), %eax
 3542      FFFF
 3543 27e2 398540FD 		cmpl	%eax, -704(%rbp)
 3543      FFFF
 3544 27e8 72CD     		jb	.L184
 3545 27ea EB4A     		jmp	.L178
 3546              	.L182:
 830:main.c        **** 				}
 831:main.c        **** 			} else {
 832:main.c        **** 				printf("The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\
 3547              		.loc 1 832 0 is_stmt 1
 3548 27ec 488B8560 		movq	-416(%rbp), %rax
 3548      FEFFFF
 3549 27f3 4889C6   		movq	%rax, %rsi
 3550 27f6 BF000000 		movl	$.LC124, %edi
 3550      00
 3551 27fb B8000000 		movl	$0, %eax
 3551      00
 3552 2800 E8000000 		call	printf
 3552      00
 3553 2805 EB2F     		jmp	.L178
 3554              	.L179:
 833:main.c        **** 			}
 834:main.c        **** 		} else {
 835:main.c        **** 			fprintf(stderr, "JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n
 3555              		.loc 1 835 0
 3556 2807 488B0500 		movq	stderr(%rip), %rax
 3556      000000
 3557 280e 488B9560 		movq	-416(%rbp), %rdx
 3557      FEFFFF
 3558 2815 BE000000 		movl	$.LC125, %esi
 3558      00
 3559 281a 4889C7   		movq	%rax, %rdi
 3560 281d B8000000 		movl	$0, %eax
 3560      00
 3561 2822 E8000000 		call	fprintf
 3561      00
 836:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3562              		.loc 1 836 0
 3563 2827 C78538FD 		movl	$12, -712(%rbp)
 3563      FFFF0C00 
 3563      0000
 3564 2831 E9A31900 		jmp	.L152
 3564      00
 3565              	.L178:
 837:main.c        **** 		}
 838:main.c        **** 	}
 839:main.c        **** 
 840:main.c        **** 	if ( progOpt->count ) {
 3566              		.loc 1 840 0
 3567 2836 488B85F0 		movq	-528(%rbp), %rax
 3567      FDFFFF
 3568 283d 8B4060   		movl	96(%rax), %eax
 3569 2840 85C0     		testl	%eax, %eax
 3570 2842 0F84C900 		je	.L186
 3570      0000
 841:main.c        **** 		printf("Programming device...\n");
 3571              		.loc 1 841 0
 3572 2848 BF000000 		movl	$.LC126, %edi
 3572      00
 3573 284d E8000000 		call	puts
 3573      00
 842:main.c        **** 		if ( isNeroCapable ) {
 3574              		.loc 1 842 0
 3575 2852 80BD19FD 		cmpb	$0, -743(%rbp)
 3575      FFFF00
 3576 2859 0F848300 		je	.L187
 3576      0000
 843:main.c        **** 			fStatus = flSelectConduit(handle, 0x00, &error);
 3577              		.loc 1 843 0
 3578 285f 488B85A0 		movq	-608(%rbp), %rax
 3578      FDFFFF
 3579 2866 488D95A8 		leaq	-600(%rbp), %rdx
 3579      FDFFFF
 3580 286d BE000000 		movl	$0, %esi
 3580      00
 3581 2872 4889C7   		movq	%rax, %rdi
 3582 2875 E8000000 		call	flSelectConduit
 3582      00
 3583 287a 89853CFD 		movl	%eax, -708(%rbp)
 3583      FFFF
 844:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3584              		.loc 1 844 0
 3585 2880 83BD3CFD 		cmpl	$0, -708(%rbp)
 3585      FFFF00
 3586 2887 740F     		je	.L188
 3587              		.loc 1 844 0 is_stmt 0 discriminator 1
 3588 2889 C78538FD 		movl	$1, -712(%rbp)
 3588      FFFF0100 
 3588      0000
 3589 2893 E9411900 		jmp	.L152
 3589      00
 3590              	.L188:
 845:main.c        **** 			fStatus = flProgram(handle, progOpt->sval[0], NULL, &error);
 3591              		.loc 1 845 0 is_stmt 1
 3592 2898 488B85F0 		movq	-528(%rbp), %rax
 3592      FDFFFF
 3593 289f 488B4068 		movq	104(%rax), %rax
 3594 28a3 488B30   		movq	(%rax), %rsi
 3595 28a6 488B85A0 		movq	-608(%rbp), %rax
 3595      FDFFFF
 3596 28ad 488D95A8 		leaq	-600(%rbp), %rdx
 3596      FDFFFF
 3597 28b4 4889D1   		movq	%rdx, %rcx
 3598 28b7 BA000000 		movl	$0, %edx
 3598      00
 3599 28bc 4889C7   		movq	%rax, %rdi
 3600 28bf E8000000 		call	flProgram
 3600      00
 3601 28c4 89853CFD 		movl	%eax, -708(%rbp)
 3601      FFFF
 846:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3602              		.loc 1 846 0
 3603 28ca 83BD3CFD 		cmpl	$0, -708(%rbp)
 3603      FFFF00
 3604 28d1 743E     		je	.L186
 3605              		.loc 1 846 0 is_stmt 0 discriminator 1
 3606 28d3 C78538FD 		movl	$1, -712(%rbp)
 3606      FFFF0100 
 3606      0000
 3607 28dd E9F71800 		jmp	.L152
 3607      00
 3608              	.L187:
 847:main.c        **** 		} else {
 848:main.c        **** 			fprintf(stderr, "Program operation requested but device at %s does not support NeroProg\n", vp);
 3609              		.loc 1 848 0 is_stmt 1
 3610 28e2 488B0500 		movq	stderr(%rip), %rax
 3610      000000
 3611 28e9 488B9560 		movq	-416(%rbp), %rdx
 3611      FEFFFF
 3612 28f0 BE000000 		movl	$.LC127, %esi
 3612      00
 3613 28f5 4889C7   		movq	%rax, %rdi
 3614 28f8 B8000000 		movl	$0, %eax
 3614      00
 3615 28fd E8000000 		call	fprintf
 3615      00
 849:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3616              		.loc 1 849 0
 3617 2902 C78538FD 		movl	$12, -712(%rbp)
 3617      FFFF0C00 
 3617      0000
 3618 290c E9C81800 		jmp	.L152
 3618      00
 3619              	.L186:
 850:main.c        **** 		}
 851:main.c        **** 	}
 852:main.c        **** 
 853:main.c        **** 	if ( benOpt->count ) {
 3620              		.loc 1 853 0
 3621 2911 488B8510 		movq	-496(%rbp), %rax
 3621      FEFFFF
 3622 2918 8B4060   		movl	96(%rax), %eax
 3623 291b 85C0     		testl	%eax, %eax
 3624 291d 7407     		je	.L189
 854:main.c        **** 		enableBenchmarking = true;
 3625              		.loc 1 854 0
 3626 291f C6050000 		movb	$1, enableBenchmarking(%rip)
 3626      000001
 3627              	.L189:
 855:main.c        **** 	}
 856:main.c        **** 	
 857:main.c        **** 	if ( actOpt->count ) {
 3628              		.loc 1 857 0
 3629 2926 488B8500 		movq	-512(%rbp), %rax
 3629      FEFFFF
 3630 292d 8B4060   		movl	96(%rax), %eax
 3631 2930 85C0     		testl	%eax, %eax
 3632 2932 0F845401 		je	.L190
 3632      0000
 858:main.c        **** 		printf("Executing CommFPGA actions on FPGALink device %s...\n", vp);
 3633              		.loc 1 858 0
 3634 2938 488B8560 		movq	-416(%rbp), %rax
 3634      FEFFFF
 3635 293f 4889C6   		movq	%rax, %rsi
 3636 2942 BF000000 		movl	$.LC128, %edi
 3636      00
 3637 2947 B8000000 		movl	$0, %eax
 3637      00
 3638 294c E8000000 		call	printf
 3638      00
 859:main.c        **** 		if ( isCommCapable ) {
 3639              		.loc 1 859 0
 3640 2951 80BD1AFD 		cmpb	$0, -742(%rbp)
 3640      FFFF00
 3641 2958 0F84FF00 		je	.L191
 3641      0000
 3642              	.LBB18:
 860:main.c        **** 			uint8 isRunning;
 861:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 3643              		.loc 1 861 0
 3644 295e 0FB68D09 		movzbl	-759(%rbp), %ecx
 3644      FDFFFF
 3645 2965 488B85A0 		movq	-608(%rbp), %rax
 3645      FDFFFF
 3646 296c 488D95A8 		leaq	-600(%rbp), %rdx
 3646      FDFFFF
 3647 2973 89CE     		movl	%ecx, %esi
 3648 2975 4889C7   		movq	%rax, %rdi
 3649 2978 E8000000 		call	flSelectConduit
 3649      00
 3650 297d 89853CFD 		movl	%eax, -708(%rbp)
 3650      FFFF
 862:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3651              		.loc 1 862 0
 3652 2983 83BD3CFD 		cmpl	$0, -708(%rbp)
 3652      FFFF00
 3653 298a 740F     		je	.L192
 3654              		.loc 1 862 0 is_stmt 0 discriminator 1
 3655 298c C78538FD 		movl	$1, -712(%rbp)
 3655      FFFF0100 
 3655      0000
 3656 2996 E93E1800 		jmp	.L152
 3656      00
 3657              	.L192:
 863:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3658              		.loc 1 863 0 is_stmt 1
 3659 299b 488B85A0 		movq	-608(%rbp), %rax
 3659      FDFFFF
 3660 29a2 488D95A8 		leaq	-600(%rbp), %rdx
 3660      FDFFFF
 3661 29a9 488D8DB8 		leaq	-584(%rbp), %rcx
 3661      FDFFFF
 3662 29b0 4889CE   		movq	%rcx, %rsi
 3663 29b3 4889C7   		movq	%rax, %rdi
 3664 29b6 E8000000 		call	flIsFPGARunning
 3664      00
 3665 29bb 89853CFD 		movl	%eax, -708(%rbp)
 3665      FFFF
 864:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3666              		.loc 1 864 0
 3667 29c1 83BD3CFD 		cmpl	$0, -708(%rbp)
 3667      FFFF00
 3668 29c8 740F     		je	.L194
 3669              		.loc 1 864 0 is_stmt 0 discriminator 1
 3670 29ca C78538FD 		movl	$1, -712(%rbp)
 3670      FFFF0100 
 3670      0000
 3671 29d4 E9001800 		jmp	.L152
 3671      00
 3672              	.L194:
 865:main.c        **** 			if ( isRunning ) {
 3673              		.loc 1 865 0 is_stmt 1
 3674 29d9 0FB685B8 		movzbl	-584(%rbp), %eax
 3674      FDFFFF
 3675 29e0 84C0     		testb	%al, %al
 3676 29e2 7447     		je	.L195
 866:main.c        **** 				pStatus = parseLine(handle, actOpt->sval[0], &error);
 3677              		.loc 1 866 0
 3678 29e4 488B8500 		movq	-512(%rbp), %rax
 3678      FEFFFF
 3679 29eb 488B4068 		movq	104(%rax), %rax
 3680 29ef 488B08   		movq	(%rax), %rcx
 3681 29f2 488B85A0 		movq	-608(%rbp), %rax
 3681      FDFFFF
 3682 29f9 488D95A8 		leaq	-600(%rbp), %rdx
 3682      FDFFFF
 3683 2a00 4889CE   		movq	%rcx, %rsi
 3684 2a03 4889C7   		movq	%rax, %rdi
 3685 2a06 E847E0FF 		call	parseLine
 3685      FF
 3686 2a0b 898578FD 		movl	%eax, -648(%rbp)
 3686      FFFF
 867:main.c        **** 				CHECK_STATUS(pStatus, pStatus, cleanup);
 3687              		.loc 1 867 0
 3688 2a11 83BD78FD 		cmpl	$0, -648(%rbp)
 3688      FFFF00
 3689 2a18 7441     		je	.L196
 3690              		.loc 1 867 0 is_stmt 0 discriminator 1
 3691 2a1a 8B8578FD 		movl	-648(%rbp), %eax
 3691      FFFF
 3692 2a20 898538FD 		movl	%eax, -712(%rbp)
 3692      FFFF
 3693 2a26 E9AE1700 		jmp	.L152
 3693      00
 3694              	.L195:
 868:main.c        **** 			} else {
 869:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 3695              		.loc 1 869 0 is_stmt 1
 3696 2a2b 488B0500 		movq	stderr(%rip), %rax
 3696      000000
 3697 2a32 488B9560 		movq	-416(%rbp), %rdx
 3697      FEFFFF
 3698 2a39 BE000000 		movl	$.LC129, %esi
 3698      00
 3699 2a3e 4889C7   		movq	%rax, %rdi
 3700 2a41 B8000000 		movl	$0, %eax
 3700      00
 3701 2a46 E8000000 		call	fprintf
 3701      00
 870:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 3702              		.loc 1 870 0
 3703 2a4b C78538FD 		movl	$12, -712(%rbp)
 3703      FFFF0C00 
 3703      0000
 3704 2a55 90       		nop
 3705 2a56 E97E1700 		jmp	.L152
 3705      00
 3706              	.L196:
 3707              	.LBE18:
 3708 2a5b EB2F     		jmp	.L190
 3709              	.L191:
 871:main.c        **** 			}
 872:main.c        **** 		} else {
 873:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 3710              		.loc 1 873 0
 3711 2a5d 488B0500 		movq	stderr(%rip), %rax
 3711      000000
 3712 2a64 488B9560 		movq	-416(%rbp), %rdx
 3712      FEFFFF
 3713 2a6b BE000000 		movl	$.LC130, %esi
 3713      00
 3714 2a70 4889C7   		movq	%rax, %rdi
 3715 2a73 B8000000 		movl	$0, %eax
 3715      00
 3716 2a78 E8000000 		call	fprintf
 3716      00
 874:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3717              		.loc 1 874 0
 3718 2a7d C78538FD 		movl	$12, -712(%rbp)
 3718      FFFF0C00 
 3718      0000
 3719 2a87 E94D1700 		jmp	.L152
 3719      00
 3720              	.L190:
 875:main.c        **** 		}
 876:main.c        **** 	}
 877:main.c        **** 
 878:main.c        **** 	if ( dumpOpt->count ) {
 3721              		.loc 1 878 0
 3722 2a8c 488B8520 		movq	-480(%rbp), %rax
 3722      FEFFFF
 3723 2a93 8B4060   		movl	96(%rax), %eax
 3724 2a96 85C0     		testl	%eax, %eax
 3725 2a98 0F84C402 		je	.L197
 3725      0000
 3726              	.LBB19:
 879:main.c        **** 		const char *fileName;
 880:main.c        **** 		unsigned long chan = strtoul(dumpOpt->sval[0], (char**)&fileName, 10);
 3727              		.loc 1 880 0
 3728 2a9e 488B8520 		movq	-480(%rbp), %rax
 3728      FEFFFF
 3729 2aa5 488B4068 		movq	104(%rax), %rax
 3730 2aa9 488B00   		movq	(%rax), %rax
 3731 2aac 488D8DB0 		leaq	-592(%rbp), %rcx
 3731      FDFFFF
 3732 2ab3 BA0A0000 		movl	$10, %edx
 3732      00
 3733 2ab8 4889CE   		movq	%rcx, %rsi
 3734 2abb 4889C7   		movq	%rax, %rdi
 3735 2abe E8000000 		call	strtoul
 3735      00
 3736 2ac3 48898570 		movq	%rax, -400(%rbp)
 3736      FEFFFF
 881:main.c        **** 		FILE *file = NULL;
 3737              		.loc 1 881 0
 3738 2aca 48C78578 		movq	$0, -392(%rbp)
 3738      FEFFFF00 
 3738      000000
 882:main.c        **** 		const uint8 *recvData;
 883:main.c        **** 		uint32 actualLength;
 884:main.c        **** 		if ( *fileName != ':' ) {
 3739              		.loc 1 884 0
 3740 2ad5 488B85B0 		movq	-592(%rbp), %rax
 3740      FDFFFF
 3741 2adc 0FB600   		movzbl	(%rax), %eax
 3742 2adf 3C3A     		cmpb	$58, %al
 3743 2ae1 742F     		je	.L198
 885:main.c        **** 			fprintf(stderr, "%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n", progName);
 3744              		.loc 1 885 0
 3745 2ae3 488B0500 		movq	stderr(%rip), %rax
 3745      000000
 3746 2aea 488B9550 		movq	-432(%rbp), %rdx
 3746      FEFFFF
 3747 2af1 BE000000 		movl	$.LC131, %esi
 3747      00
 3748 2af6 4889C7   		movq	%rax, %rdi
 3749 2af9 B8000000 		movl	$0, %eax
 3749      00
 3750 2afe E8000000 		call	fprintf
 3750      00
 886:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 3751              		.loc 1 886 0
 3752 2b03 C78538FD 		movl	$12, -712(%rbp)
 3752      FFFF0C00 
 3752      0000
 3753 2b0d E9C71600 		jmp	.L152
 3753      00
 3754              	.L198:
 887:main.c        **** 		}
 888:main.c        **** 		fileName++;
 3755              		.loc 1 888 0
 3756 2b12 488B85B0 		movq	-592(%rbp), %rax
 3756      FDFFFF
 3757 2b19 4883C001 		addq	$1, %rax
 3758 2b1d 488985B0 		movq	%rax, -592(%rbp)
 3758      FDFFFF
 889:main.c        **** 		printf("Copying from channel %lu to %s", chan, fileName);
 3759              		.loc 1 889 0
 3760 2b24 488B95B0 		movq	-592(%rbp), %rdx
 3760      FDFFFF
 3761 2b2b 488B8570 		movq	-400(%rbp), %rax
 3761      FEFFFF
 3762 2b32 4889C6   		movq	%rax, %rsi
 3763 2b35 BF000000 		movl	$.LC132, %edi
 3763      00
 3764 2b3a B8000000 		movl	$0, %eax
 3764      00
 3765 2b3f E8000000 		call	printf
 3765      00
 890:main.c        **** 		file = fopen(fileName, "wb");
 3766              		.loc 1 890 0
 3767 2b44 488B85B0 		movq	-592(%rbp), %rax
 3767      FDFFFF
 3768 2b4b BE000000 		movl	$.LC15, %esi
 3768      00
 3769 2b50 4889C7   		movq	%rax, %rdi
 3770 2b53 E8000000 		call	fopen
 3770      00
 3771 2b58 48898578 		movq	%rax, -392(%rbp)
 3771      FEFFFF
 891:main.c        **** 		CHECK_STATUS(!file, FLP_CANNOT_SAVE, cleanup);
 3772              		.loc 1 891 0
 3773 2b5f 4883BD78 		cmpq	$0, -392(%rbp)
 3773      FEFFFF00 
 3774 2b67 750F     		jne	.L200
 3775              		.loc 1 891 0 is_stmt 0 discriminator 1
 3776 2b69 C78538FD 		movl	$11, -712(%rbp)
 3776      FFFF0B00 
 3776      0000
 3777 2b73 E9611600 		jmp	.L152
 3777      00
 3778              	.L200:
 892:main.c        **** 		sigRegisterHandler();
 3779              		.loc 1 892 0 is_stmt 1
 3780 2b78 E8000000 		call	sigRegisterHandler
 3780      00
 893:main.c        **** 		fStatus = flSelectConduit(handle, conduit, &error);
 3781              		.loc 1 893 0
 3782 2b7d 0FB68D09 		movzbl	-759(%rbp), %ecx
 3782      FDFFFF
 3783 2b84 488B85A0 		movq	-608(%rbp), %rax
 3783      FDFFFF
 3784 2b8b 488D95A8 		leaq	-600(%rbp), %rdx
 3784      FDFFFF
 3785 2b92 89CE     		movl	%ecx, %esi
 3786 2b94 4889C7   		movq	%rax, %rdi
 3787 2b97 E8000000 		call	flSelectConduit
 3787      00
 3788 2b9c 89853CFD 		movl	%eax, -708(%rbp)
 3788      FFFF
 894:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3789              		.loc 1 894 0
 3790 2ba2 83BD3CFD 		cmpl	$0, -708(%rbp)
 3790      FFFF00
 3791 2ba9 740F     		je	.L201
 3792              		.loc 1 894 0 is_stmt 0 discriminator 1
 3793 2bab C78538FD 		movl	$1, -712(%rbp)
 3793      FFFF0100 
 3793      0000
 3794 2bb5 E91F1600 		jmp	.L152
 3794      00
 3795              	.L201:
 895:main.c        **** 		fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 3796              		.loc 1 895 0 is_stmt 1
 3797 2bba 488B8570 		movq	-400(%rbp), %rax
 3797      FEFFFF
 3798 2bc1 0FB6F0   		movzbl	%al, %esi
 3799 2bc4 488B85A0 		movq	-608(%rbp), %rax
 3799      FDFFFF
 3800 2bcb 488D95A8 		leaq	-600(%rbp), %rdx
 3800      FDFFFF
 3801 2bd2 4989D0   		movq	%rdx, %r8
 3802 2bd5 B9000000 		movl	$0, %ecx
 3802      00
 3803 2bda BA005800 		movl	$22528, %edx
 3803      00
 3804 2bdf 4889C7   		movq	%rax, %rdi
 3805 2be2 E8000000 		call	flReadChannelAsyncSubmit
 3805      00
 3806 2be7 89853CFD 		movl	%eax, -708(%rbp)
 3806      FFFF
 896:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3807              		.loc 1 896 0
 3808 2bed 83BD3CFD 		cmpl	$0, -708(%rbp)
 3808      FFFF00
 3809 2bf4 740F     		je	.L202
 3810              		.loc 1 896 0 is_stmt 0 discriminator 1
 3811 2bf6 C78538FD 		movl	$1, -712(%rbp)
 3811      FFFF0100 
 3811      0000
 3812 2c00 E9D41500 		jmp	.L152
 3812      00
 3813              	.L202:
 897:main.c        **** 		do {
 898:main.c        **** 			fStatus = flReadChannelAsyncSubmit(handle, (uint8)chan, 22528, NULL, &error);
 3814              		.loc 1 898 0 is_stmt 1
 3815 2c05 488B8570 		movq	-400(%rbp), %rax
 3815      FEFFFF
 3816 2c0c 0FB6F0   		movzbl	%al, %esi
 3817 2c0f 488B85A0 		movq	-608(%rbp), %rax
 3817      FDFFFF
 3818 2c16 488D95A8 		leaq	-600(%rbp), %rdx
 3818      FDFFFF
 3819 2c1d 4989D0   		movq	%rdx, %r8
 3820 2c20 B9000000 		movl	$0, %ecx
 3820      00
 3821 2c25 BA005800 		movl	$22528, %edx
 3821      00
 3822 2c2a 4889C7   		movq	%rax, %rdi
 3823 2c2d E8000000 		call	flReadChannelAsyncSubmit
 3823      00
 3824 2c32 89853CFD 		movl	%eax, -708(%rbp)
 3824      FFFF
 899:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3825              		.loc 1 899 0
 3826 2c38 83BD3CFD 		cmpl	$0, -708(%rbp)
 3826      FFFF00
 3827 2c3f 740F     		je	.L203
 3828              		.loc 1 899 0 is_stmt 0 discriminator 1
 3829 2c41 C78538FD 		movl	$1, -712(%rbp)
 3829      FFFF0100 
 3829      0000
 3830 2c4b E9891500 		jmp	.L152
 3830      00
 3831              	.L203:
 900:main.c        **** 			fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 3832              		.loc 1 900 0 is_stmt 1
 3833 2c50 488B85A0 		movq	-608(%rbp), %rax
 3833      FDFFFF
 3834 2c57 488DBDA8 		leaq	-600(%rbp), %rdi
 3834      FDFFFF
 3835 2c5e 488D8D90 		leaq	-624(%rbp), %rcx
 3835      FDFFFF
 3836 2c65 488D9590 		leaq	-624(%rbp), %rdx
 3836      FDFFFF
 3837 2c6c 488DB5B8 		leaq	-584(%rbp), %rsi
 3837      FDFFFF
 3838 2c73 4989F8   		movq	%rdi, %r8
 3839 2c76 4889C7   		movq	%rax, %rdi
 3840 2c79 E8000000 		call	flReadChannelAsyncAwait
 3840      00
 3841 2c7e 89853CFD 		movl	%eax, -708(%rbp)
 3841      FFFF
 901:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3842              		.loc 1 901 0
 3843 2c84 83BD3CFD 		cmpl	$0, -708(%rbp)
 3843      FFFF00
 3844 2c8b 740F     		je	.L204
 3845              		.loc 1 901 0 is_stmt 0 discriminator 1
 3846 2c8d C78538FD 		movl	$1, -712(%rbp)
 3846      FFFF0100 
 3846      0000
 3847 2c97 E93D1500 		jmp	.L152
 3847      00
 3848              	.L204:
 902:main.c        **** 			fwrite(recvData, 1, actualLength, file);
 3849              		.loc 1 902 0 is_stmt 1
 3850 2c9c 8B8590FD 		movl	-624(%rbp), %eax
 3850      FFFF
 3851 2ca2 89C2     		movl	%eax, %edx
 3852 2ca4 488B85B8 		movq	-584(%rbp), %rax
 3852      FDFFFF
 3853 2cab 488B8D78 		movq	-392(%rbp), %rcx
 3853      FEFFFF
 3854 2cb2 BE010000 		movl	$1, %esi
 3854      00
 3855 2cb7 4889C7   		movq	%rax, %rdi
 3856 2cba E8000000 		call	fwrite
 3856      00
 903:main.c        **** 			printf(".");
 3857              		.loc 1 903 0
 3858 2cbf BF2E0000 		movl	$46, %edi
 3858      00
 3859 2cc4 E8000000 		call	putchar
 3859      00
 904:main.c        **** 		} while ( !sigIsRaised() );
 3860              		.loc 1 904 0
 3861 2cc9 E8000000 		call	sigIsRaised
 3861      00
 3862 2cce 83F001   		xorl	$1, %eax
 3863 2cd1 84C0     		testb	%al, %al
 3864 2cd3 0F852CFF 		jne	.L202
 3864      FFFF
 905:main.c        **** 		printf("\nCaught SIGINT, quitting...\n");
 3865              		.loc 1 905 0
 3866 2cd9 BF000000 		movl	$.LC133, %edi
 3866      00
 3867 2cde E8000000 		call	puts
 3867      00
 906:main.c        **** 		fStatus = flReadChannelAsyncAwait(handle, &recvData, &actualLength, &actualLength, &error);
 3868              		.loc 1 906 0
 3869 2ce3 488B85A0 		movq	-608(%rbp), %rax
 3869      FDFFFF
 3870 2cea 488DBDA8 		leaq	-600(%rbp), %rdi
 3870      FDFFFF
 3871 2cf1 488D8D90 		leaq	-624(%rbp), %rcx
 3871      FDFFFF
 3872 2cf8 488D9590 		leaq	-624(%rbp), %rdx
 3872      FDFFFF
 3873 2cff 488DB5B8 		leaq	-584(%rbp), %rsi
 3873      FDFFFF
 3874 2d06 4989F8   		movq	%rdi, %r8
 3875 2d09 4889C7   		movq	%rax, %rdi
 3876 2d0c E8000000 		call	flReadChannelAsyncAwait
 3876      00
 3877 2d11 89853CFD 		movl	%eax, -708(%rbp)
 3877      FFFF
 907:main.c        **** 		CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3878              		.loc 1 907 0
 3879 2d17 83BD3CFD 		cmpl	$0, -708(%rbp)
 3879      FFFF00
 3880 2d1e 7410     		je	.L205
 3881              		.loc 1 907 0 is_stmt 0 discriminator 1
 3882 2d20 C78538FD 		movl	$1, -712(%rbp)
 3882      FFFF0100 
 3882      0000
 3883 2d2a 90       		nop
 3884 2d2b E9A91400 		jmp	.L152
 3884      00
 3885              	.L205:
 908:main.c        **** 		fwrite(recvData, 1, actualLength, file);
 3886              		.loc 1 908 0 is_stmt 1
 3887 2d30 8B8590FD 		movl	-624(%rbp), %eax
 3887      FFFF
 3888 2d36 89C2     		movl	%eax, %edx
 3889 2d38 488B85B8 		movq	-584(%rbp), %rax
 3889      FDFFFF
 3890 2d3f 488B8D78 		movq	-392(%rbp), %rcx
 3890      FEFFFF
 3891 2d46 BE010000 		movl	$1, %esi
 3891      00
 3892 2d4b 4889C7   		movq	%rax, %rdi
 3893 2d4e E8000000 		call	fwrite
 3893      00
 909:main.c        **** 		fclose(file);
 3894              		.loc 1 909 0
 3895 2d53 488B8578 		movq	-392(%rbp), %rax
 3895      FEFFFF
 3896 2d5a 4889C7   		movq	%rax, %rdi
 3897 2d5d E8000000 		call	fclose
 3897      00
 3898              	.L197:
 3899              	.LBE19:
 910:main.c        **** 	}
 911:main.c        **** 
 912:main.c        **** 	if ( shellOpt->count ) {
 3900              		.loc 1 912 0
 3901 2d62 488B8508 		movq	-504(%rbp), %rax
 3901      FEFFFF
 3902 2d69 8B4060   		movl	96(%rax), %eax
 3903 2d6c 85C0     		testl	%eax, %eax
 3904 2d6e 0F84CD01 		je	.L206
 3904      0000
 913:main.c        **** 		printf("\nEntering CommFPGA command-line mode:\n");
 3905              		.loc 1 913 0
 3906 2d74 BF000000 		movl	$.LC134, %edi
 3906      00
 3907 2d79 E8000000 		call	puts
 3907      00
 914:main.c        **** 		if ( isCommCapable ) {
 3908              		.loc 1 914 0
 3909 2d7e 80BD1AFD 		cmpb	$0, -742(%rbp)
 3909      FFFF00
 3910 2d85 0F848701 		je	.L207
 3910      0000
 3911              	.LBB20:
 915:main.c        **** 		   uint8 isRunning;
 916:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 3912              		.loc 1 916 0
 3913 2d8b 0FB68D09 		movzbl	-759(%rbp), %ecx
 3913      FDFFFF
 3914 2d92 488B85A0 		movq	-608(%rbp), %rax
 3914      FDFFFF
 3915 2d99 488D95A8 		leaq	-600(%rbp), %rdx
 3915      FDFFFF
 3916 2da0 89CE     		movl	%ecx, %esi
 3917 2da2 4889C7   		movq	%rax, %rdi
 3918 2da5 E8000000 		call	flSelectConduit
 3918      00
 3919 2daa 89853CFD 		movl	%eax, -708(%rbp)
 3919      FFFF
 917:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3920              		.loc 1 917 0
 3921 2db0 83BD3CFD 		cmpl	$0, -708(%rbp)
 3921      FFFF00
 3922 2db7 740F     		je	.L208
 3923              		.loc 1 917 0 is_stmt 0 discriminator 1
 3924 2db9 C78538FD 		movl	$1, -712(%rbp)
 3924      FFFF0100 
 3924      0000
 3925 2dc3 E9111400 		jmp	.L152
 3925      00
 3926              	.L208:
 918:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 3927              		.loc 1 918 0 is_stmt 1
 3928 2dc8 488B85A0 		movq	-608(%rbp), %rax
 3928      FDFFFF
 3929 2dcf 488D95A8 		leaq	-600(%rbp), %rdx
 3929      FDFFFF
 3930 2dd6 488D8DB8 		leaq	-584(%rbp), %rcx
 3930      FDFFFF
 3931 2ddd 4889CE   		movq	%rcx, %rsi
 3932 2de0 4889C7   		movq	%rax, %rdi
 3933 2de3 E8000000 		call	flIsFPGARunning
 3933      00
 3934 2de8 89853CFD 		movl	%eax, -708(%rbp)
 3934      FFFF
 919:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 3935              		.loc 1 919 0
 3936 2dee 83BD3CFD 		cmpl	$0, -708(%rbp)
 3936      FFFF00
 3937 2df5 740F     		je	.L210
 3938              		.loc 1 919 0 is_stmt 0 discriminator 1
 3939 2df7 C78538FD 		movl	$1, -712(%rbp)
 3939      FFFF0100 
 3939      0000
 3940 2e01 E9D31300 		jmp	.L152
 3940      00
 3941              	.L210:
 920:main.c        **** 			if ( isRunning ) {
 3942              		.loc 1 920 0 is_stmt 1
 3943 2e06 0FB685B8 		movzbl	-584(%rbp), %eax
 3943      FDFFFF
 3944 2e0d 84C0     		testb	%al, %al
 3945 2e0f 0F84CB00 		je	.L211
 3945      0000
 3946              	.L213:
 921:main.c        **** 				do {
 922:main.c        **** 					do {
 923:main.c        **** 						line = readline("> ");
 3947              		.loc 1 923 0 discriminator 1
 3948 2e15 BF000000 		movl	$.LC135, %edi
 3948      00
 3949 2e1a E8000000 		call	readline
 3949      00
 3950 2e1f 488985C0 		movq	%rax, -576(%rbp)
 3950      FDFFFF
 924:main.c        **** 					} while ( line && !line[0] );
 3951              		.loc 1 924 0 discriminator 1
 3952 2e26 4883BDC0 		cmpq	$0, -576(%rbp)
 3952      FDFFFF00 
 3953 2e2e 740E     		je	.L212
 3954 2e30 488B85C0 		movq	-576(%rbp), %rax
 3954      FDFFFF
 3955 2e37 0FB600   		movzbl	(%rax), %eax
 3956 2e3a 84C0     		testb	%al, %al
 3957 2e3c 74D7     		je	.L213
 3958              	.L212:
 925:main.c        **** 					if ( line && line[0] && line[0] != 'q' ) {
 3959              		.loc 1 925 0
 3960 2e3e 4883BDC0 		cmpq	$0, -576(%rbp)
 3960      FDFFFF00 
 3961 2e46 747A     		je	.L214
 3962              		.loc 1 925 0 is_stmt 0 discriminator 1
 3963 2e48 488B85C0 		movq	-576(%rbp), %rax
 3963      FDFFFF
 3964 2e4f 0FB600   		movzbl	(%rax), %eax
 3965 2e52 84C0     		testb	%al, %al
 3966 2e54 746C     		je	.L214
 3967 2e56 488B85C0 		movq	-576(%rbp), %rax
 3967      FDFFFF
 3968 2e5d 0FB600   		movzbl	(%rax), %eax
 3969 2e60 3C71     		cmpb	$113, %al
 3970 2e62 745E     		je	.L214
 926:main.c        **** 						add_history(line);
 3971              		.loc 1 926 0 is_stmt 1
 3972 2e64 488B85C0 		movq	-576(%rbp), %rax
 3972      FDFFFF
 3973 2e6b 4889C7   		movq	%rax, %rdi
 3974 2e6e E8000000 		call	add_history
 3974      00
 927:main.c        **** 						pStatus = parseLine(handle, line, &error);
 3975              		.loc 1 927 0
 3976 2e73 488B85A0 		movq	-608(%rbp), %rax
 3976      FDFFFF
 3977 2e7a 488D95A8 		leaq	-600(%rbp), %rdx
 3977      FDFFFF
 3978 2e81 488B8DC0 		movq	-576(%rbp), %rcx
 3978      FDFFFF
 3979 2e88 4889CE   		movq	%rcx, %rsi
 3980 2e8b 4889C7   		movq	%rax, %rdi
 3981 2e8e E8BFDBFF 		call	parseLine
 3981      FF
 3982 2e93 898578FD 		movl	%eax, -648(%rbp)
 3982      FFFF
 928:main.c        **** 						CHECK_STATUS(pStatus, pStatus, cleanup);
 3983              		.loc 1 928 0
 3984 2e99 83BD78FD 		cmpl	$0, -648(%rbp)
 3984      FFFF00
 3985 2ea0 7411     		je	.L215
 3986              		.loc 1 928 0 is_stmt 0 discriminator 1
 3987 2ea2 8B8578FD 		movl	-648(%rbp), %eax
 3987      FFFF
 3988 2ea8 898538FD 		movl	%eax, -712(%rbp)
 3988      FFFF
 3989 2eae E9261300 		jmp	.L152
 3989      00
 3990              	.L215:
 929:main.c        **** 						free((void*)line);
 3991              		.loc 1 929 0 is_stmt 1
 3992 2eb3 488B85C0 		movq	-576(%rbp), %rax
 3992      FDFFFF
 3993 2eba 4889C7   		movq	%rax, %rdi
 3994 2ebd E8000000 		call	free
 3994      00
 3995              	.L214:
 930:main.c        **** 					}
 931:main.c        **** 				} while ( line && line[0] != 'q' );
 3996              		.loc 1 931 0
 3997 2ec2 4883BDC0 		cmpq	$0, -576(%rbp)
 3997      FDFFFF00 
 3998 2eca 7444     		je	.L216
 3999              		.loc 1 931 0 is_stmt 0 discriminator 1
 4000 2ecc 488B85C0 		movq	-576(%rbp), %rax
 4000      FDFFFF
 4001 2ed3 0FB600   		movzbl	(%rax), %eax
 4002 2ed6 3C71     		cmpb	$113, %al
 4003 2ed8 0F8537FF 		jne	.L213
 4003      FFFF
 4004              	.LBE20:
 4005 2ede EB61     		jmp	.L206
 4006              	.L211:
 4007              	.LBB21:
 932:main.c        **** 			} else {
 933:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n", vp
 4008              		.loc 1 933 0 is_stmt 1
 4009 2ee0 488B0500 		movq	stderr(%rip), %rax
 4009      000000
 4010 2ee7 488B9560 		movq	-416(%rbp), %rdx
 4010      FEFFFF
 4011 2eee BE000000 		movl	$.LC136, %esi
 4011      00
 4012 2ef3 4889C7   		movq	%rax, %rdi
 4013 2ef6 B8000000 		movl	$0, %eax
 4013      00
 4014 2efb E8000000 		call	fprintf
 4014      00
 934:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 4015              		.loc 1 934 0
 4016 2f00 C78538FD 		movl	$12, -712(%rbp)
 4016      FFFF0C00 
 4016      0000
 4017 2f0a 90       		nop
 4018 2f0b E9C91200 		jmp	.L152
 4018      00
 4019              	.L216:
 4020              	.LBE21:
 4021 2f10 EB2F     		jmp	.L206
 4022              	.L207:
 935:main.c        **** 			}
 936:main.c        **** 		} else {
 937:main.c        **** 			fprintf(stderr, "Shell requested but device at %s does not support CommFPGA\n", vp);
 4023              		.loc 1 937 0
 4024 2f12 488B0500 		movq	stderr(%rip), %rax
 4024      000000
 4025 2f19 488B9560 		movq	-416(%rbp), %rdx
 4025      FEFFFF
 4026 2f20 BE000000 		movl	$.LC137, %esi
 4026      00
 4027 2f25 4889C7   		movq	%rax, %rdi
 4028 2f28 B8000000 		movl	$0, %eax
 4028      00
 4029 2f2d E8000000 		call	fprintf
 4029      00
 938:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 4030              		.loc 1 938 0
 4031 2f32 C78538FD 		movl	$12, -712(%rbp)
 4031      FFFF0C00 
 4031      0000
 4032 2f3c E9981200 		jmp	.L152
 4032      00
 4033              	.L206:
 939:main.c        **** 		}
 940:main.c        **** 	}
 941:main.c        **** 
 942:main.c        **** 	// -y reads in from csv and initiates the while loop 
 943:main.c        **** 	if ( loopOpt->count > 0 ) {
 4034              		.loc 1 943 0
 4035 2f41 488B8548 		movq	-440(%rbp), %rax
 4035      FEFFFF
 4036 2f48 8B4060   		movl	96(%rax), %eax
 4037 2f4b 85C0     		testl	%eax, %eax
 4038 2f4d 0F8E8612 		jle	.L152
 4038      0000
 944:main.c        **** 		if ( isCommCapable ) {
 4039              		.loc 1 944 0
 4040 2f53 80BD1AFD 		cmpb	$0, -742(%rbp)
 4040      FFFF00
 4041 2f5a 0F844E12 		je	.L217
 4041      0000
 4042              	.LBB22:
 945:main.c        **** 			uint8 isRunning;
 946:main.c        **** 			fStatus = flSelectConduit(handle, conduit, &error);
 4043              		.loc 1 946 0
 4044 2f60 0FB68D09 		movzbl	-759(%rbp), %ecx
 4044      FDFFFF
 4045 2f67 488B85A0 		movq	-608(%rbp), %rax
 4045      FDFFFF
 4046 2f6e 488D95A8 		leaq	-600(%rbp), %rdx
 4046      FDFFFF
 4047 2f75 89CE     		movl	%ecx, %esi
 4048 2f77 4889C7   		movq	%rax, %rdi
 4049 2f7a E8000000 		call	flSelectConduit
 4049      00
 4050 2f7f 89853CFD 		movl	%eax, -708(%rbp)
 4050      FFFF
 947:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4051              		.loc 1 947 0
 4052 2f85 83BD3CFD 		cmpl	$0, -708(%rbp)
 4052      FFFF00
 4053 2f8c 740F     		je	.L218
 4054              		.loc 1 947 0 is_stmt 0 discriminator 1
 4055 2f8e C78538FD 		movl	$1, -712(%rbp)
 4055      FFFF0100 
 4055      0000
 4056 2f98 E93C1200 		jmp	.L152
 4056      00
 4057              	.L218:
 948:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 4058              		.loc 1 948 0 is_stmt 1
 4059 2f9d 488B85A0 		movq	-608(%rbp), %rax
 4059      FDFFFF
 4060 2fa4 488D95A8 		leaq	-600(%rbp), %rdx
 4060      FDFFFF
 4061 2fab 488D8D06 		leaq	-762(%rbp), %rcx
 4061      FDFFFF
 4062 2fb2 4889CE   		movq	%rcx, %rsi
 4063 2fb5 4889C7   		movq	%rax, %rdi
 4064 2fb8 E8000000 		call	flIsFPGARunning
 4064      00
 4065 2fbd 89853CFD 		movl	%eax, -708(%rbp)
 4065      FFFF
 949:main.c        **** 			CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4066              		.loc 1 949 0
 4067 2fc3 83BD3CFD 		cmpl	$0, -708(%rbp)
 4067      FFFF00
 4068 2fca 740F     		je	.L220
 4069              		.loc 1 949 0 is_stmt 0 discriminator 1
 4070 2fcc C78538FD 		movl	$1, -712(%rbp)
 4070      FFFF0100 
 4070      0000
 4071 2fd6 E9FE1100 		jmp	.L152
 4071      00
 4072              	.L220:
 950:main.c        **** 			if ( isRunning ) {
 4073              		.loc 1 950 0 is_stmt 1
 4074 2fdb 0FB68506 		movzbl	-762(%rbp), %eax
 4074      FDFFFF
 4075 2fe2 84C0     		testb	%al, %al
 4076 2fe4 0F849711 		je	.L221
 4076      0000
 4077              	.LBB23:
 951:main.c        **** 
 952:main.c        **** 				FILE * fPtr;
 953:main.c        **** 				char filename[] = "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/makestuff/apps/flc
 4078              		.loc 1 953 0
 4079 2fea 48B82F68 		movabsq	$7021163931744823343, %rax
 4079      6F6D652F 
 4079      7061
 4080 2ff4 48898570 		movq	%rax, -144(%rbp)
 4080      FFFFFF
 4081 2ffb 48B86E64 		movabsq	$7742643527908418670, %rax
 4081      752F4465 
 4081      736B
 4082 3005 48898578 		movq	%rax, -136(%rbp)
 4082      FFFFFF
 4083 300c 48B8746F 		movabsq	$7595155038158221172, %rax
 4083      702F4469 
 4083      6769
 4084 3016 48894580 		movq	%rax, -128(%rbp)
 4085 301a 48B87461 		movabsq	$7163370410030686580, %rax
 4085      6C4C6F67 
 4085      6963
 4086 3024 48894588 		movq	%rax, -120(%rbp)
 4087 3028 48B84465 		movabsq	$5489727861217781060, %rax
 4087      7369676E 
 4087      2F4C
 4088 3032 48894590 		movq	%rax, -112(%rbp)
 4089 3036 48B86162 		movabsq	$7594807519481913953, %rax
 4089      2F30332D 
 4089      6669
 4090 3040 48894598 		movq	%rax, -104(%rbp)
 4091 3044 48B86E69 		movabsq	$8459851824041781614, %rax
 4091      7368696E 
 4091      6775
 4092 304e 488945A0 		movq	%rax, -96(%rbp)
 4093 3052 48B8702F 		movabsq	$8391162042591817584, %rax
 4093      6D616B65 
 4093      7374
 4094 305c 488945A8 		movq	%rax, -88(%rbp)
 4095 3060 48B87566 		movabsq	$8318272074462684789, %rax
 4095      662F6170 
 4095      7073
 4096 306a 488945B0 		movq	%rax, -80(%rbp)
 4097 306e 48B82F66 		movabsq	$5994125543298852399, %rax
 4097      6C636C69 
 4097      2F53
 4098 3078 488945B8 		movq	%rax, -72(%rbp)
 4099 307c 48B8616D 		movabsq	$7161077885874236769, %rax
 4099      706C6542 
 4099      6163
 4100 3086 488945C0 		movq	%rax, -64(%rbp)
 4101 308a 48B86B45 		movabsq	$7022344665348064619, %rax
 4101      6E644461 
 4101      7461
 4102 3094 488945C8 		movq	%rax, -56(%rbp)
 4103 3098 48B86261 		movabsq	$8535274769718927714, %rax
 4103      73652E63 
 4103      7376
 4104 30a2 488945D0 		movq	%rax, -48(%rbp)
 4105 30a6 C645D800 		movb	$0, -40(%rbp)
 954:main.c        **** 				fPtr = fopen(filename,"r+"); // change flag according to need
 4106              		.loc 1 954 0
 4107 30aa 488D8570 		leaq	-144(%rbp), %rax
 4107      FFFFFF
 4108 30b1 BE000000 		movl	$.LC138, %esi
 4108      00
 4109 30b6 4889C7   		movq	%rax, %rdi
 4110 30b9 E8000000 		call	fopen
 4110      00
 4111 30be 48898580 		movq	%rax, -384(%rbp)
 4111      FEFFFF
 955:main.c        **** 				if(fPtr == NULL) {
 4112              		.loc 1 955 0
 4113 30c5 4883BD80 		cmpq	$0, -384(%rbp)
 4113      FEFFFF00 
 4114 30cd 7514     		jne	.L222
 956:main.c        **** 				   printf("Csv doesn't exist \n");
 4115              		.loc 1 956 0
 4116 30cf BF000000 		movl	$.LC139, %edi
 4116      00
 4117 30d4 E8000000 		call	puts
 4117      00
 957:main.c        **** 				   return 0;    
 4118              		.loc 1 957 0
 4119 30d9 B8000000 		movl	$0, %eax
 4119      00
 4120 30de E9551100 		jmp	.L327
 4120      00
 4121              	.L222:
 958:main.c        **** 				}
 959:main.c        **** 			    size_t lineSize = 100;
 4122              		.loc 1 959 0
 4123 30e3 48C785B0 		movq	$100, -592(%rbp)
 4123      FDFFFF64 
 4123      000000
 960:main.c        **** 			    char * lineFromFile = malloc(lineSize * sizeof(char));
 4124              		.loc 1 960 0
 4125 30ee 488B85B0 		movq	-592(%rbp), %rax
 4125      FDFFFF
 4126 30f5 4889C7   		movq	%rax, %rdi
 4127 30f8 E8000000 		call	malloc
 4127      00
 4128 30fd 488985B8 		movq	%rax, -584(%rbp)
 4128      FDFFFF
 961:main.c        **** 			   	
 962:main.c        **** 			    while ((getline(&lineFromFile, &lineSize, fPtr)) != -1) {
 4129              		.loc 1 962 0
 4130 3104 EB28     		jmp	.L224
 4131              	.L226:
 963:main.c        **** 			        if(numLines != 0) format(lineFromFile);
 4132              		.loc 1 963 0
 4133 3106 8B050000 		movl	numLines(%rip), %eax
 4133      0000
 4134 310c 85C0     		testl	%eax, %eax
 4135 310e 740F     		je	.L225
 4136              		.loc 1 963 0 is_stmt 0 discriminator 1
 4137 3110 488B85B8 		movq	-584(%rbp), %rax
 4137      FDFFFF
 4138 3117 4889C7   		movq	%rax, %rdi
 4139 311a E8000000 		call	format
 4139      00
 4140              	.L225:
 964:main.c        **** 			        numLines++;
 4141              		.loc 1 964 0 is_stmt 1
 4142 311f 8B050000 		movl	numLines(%rip), %eax
 4142      0000
 4143 3125 83C001   		addl	$1, %eax
 4144 3128 89050000 		movl	%eax, numLines(%rip)
 4144      0000
 4145              	.L224:
 962:main.c        **** 			        if(numLines != 0) format(lineFromFile);
 4146              		.loc 1 962 0 discriminator 1
 4147 312e 488B9580 		movq	-384(%rbp), %rdx
 4147      FEFFFF
 4148 3135 488D8DB0 		leaq	-592(%rbp), %rcx
 4148      FDFFFF
 4149 313c 488D85B8 		leaq	-584(%rbp), %rax
 4149      FDFFFF
 4150 3143 4889CE   		movq	%rcx, %rsi
 4151 3146 4889C7   		movq	%rax, %rdi
 4152 3149 E8000000 		call	getline
 4152      00
 4153 314e 4883F8FF 		cmpq	$-1, %rax
 4154 3152 75B2     		jne	.L226
 965:main.c        **** 			    }
 966:main.c        **** 			    numLines--;
 4155              		.loc 1 966 0
 4156 3154 8B050000 		movl	numLines(%rip), %eax
 4156      0000
 4157 315a 83E801   		subl	$1, %eax
 4158 315d 89050000 		movl	%eax, numLines(%rip)
 4158      0000
 967:main.c        **** 			    free(lineFromFile);
 4159              		.loc 1 967 0
 4160 3163 488B85B8 		movq	-584(%rbp), %rax
 4160      FDFFFF
 4161 316a 4889C7   		movq	%rax, %rdi
 4162 316d E8000000 		call	free
 4162      00
 968:main.c        **** 			    fclose(fPtr);
 4163              		.loc 1 968 0
 4164 3172 488B8580 		movq	-384(%rbp), %rax
 4164      FEFFFF
 4165 3179 4889C7   		movq	%rax, %rdi
 4166 317c E8000000 		call	fclose
 4166      00
 4167              	.L325:
 4168              	.LBB24:
 969:main.c        **** 				
 970:main.c        **** 				while(true) {
 971:main.c        **** 					uint32_t length = 1;
 4169              		.loc 1 971 0
 4170 3181 C7857CFD 		movl	$1, -644(%rbp)
 4170      FFFF0100 
 4170      0000
 972:main.c        **** 					uint8_t *readFromChannelZero = malloc(sizeof(uint8_t));
 4171              		.loc 1 972 0
 4172 318b BF010000 		movl	$1, %edi
 4172      00
 4173 3190 E8000000 		call	malloc
 4173      00
 4174 3195 48898588 		movq	%rax, -376(%rbp)
 4174      FEFFFF
 973:main.c        **** 					
 974:main.c        **** 					fStatus = flReadChannel(handle,(uint8_t)0,length,readFromChannelZero,&error);
 4175              		.loc 1 974 0
 4176 319c 8B957CFD 		movl	-644(%rbp), %edx
 4176      FFFF
 4177 31a2 488B85A0 		movq	-608(%rbp), %rax
 4177      FDFFFF
 4178 31a9 488DB5A8 		leaq	-600(%rbp), %rsi
 4178      FDFFFF
 4179 31b0 488B8D88 		movq	-376(%rbp), %rcx
 4179      FEFFFF
 4180 31b7 4989F0   		movq	%rsi, %r8
 4181 31ba BE000000 		movl	$0, %esi
 4181      00
 4182 31bf 4889C7   		movq	%rax, %rdi
 4183 31c2 E8000000 		call	flReadChannel
 4183      00
 4184 31c7 89853CFD 		movl	%eax, -708(%rbp)
 4184      FFFF
 975:main.c        **** 					CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4185              		.loc 1 975 0
 4186 31cd 83BD3CFD 		cmpl	$0, -708(%rbp)
 4186      FFFF00
 4187 31d4 740F     		je	.L227
 4188              		.loc 1 975 0 is_stmt 0 discriminator 1
 4189 31d6 C78538FD 		movl	$1, -712(%rbp)
 4189      FFFF0100 
 4189      0000
 4190 31e0 E99A0F00 		jmp	.L228
 4190      00
 4191              	.L227:
 976:main.c        **** 					printf("data in channel 0 = %u \n", *readFromChannelZero);
 4192              		.loc 1 976 0 is_stmt 1
 4193 31e5 488B8588 		movq	-376(%rbp), %rax
 4193      FEFFFF
 4194 31ec 0FB600   		movzbl	(%rax), %eax
 4195 31ef 0FB6C0   		movzbl	%al, %eax
 4196 31f2 89C6     		movl	%eax, %esi
 4197 31f4 BF000000 		movl	$.LC140, %edi
 4197      00
 4198 31f9 B8000000 		movl	$0, %eax
 4198      00
 4199 31fe E8000000 		call	printf
 4199      00
 977:main.c        **** 
 978:main.c        **** 					if( ((*readFromChannelZero) == 1) || ((*readFromChannelZero) == 2)) {
 4200              		.loc 1 978 0
 4201 3203 488B8588 		movq	-376(%rbp), %rax
 4201      FEFFFF
 4202 320a 0FB600   		movzbl	(%rax), %eax
 4203 320d 3C01     		cmpb	$1, %al
 4204 320f 7412     		je	.L229
 4205              		.loc 1 978 0 is_stmt 0 discriminator 1
 4206 3211 488B8588 		movq	-376(%rbp), %rax
 4206      FEFFFF
 4207 3218 0FB600   		movzbl	(%rax), %eax
 4208 321b 3C02     		cmpb	$2, %al
 4209 321d 0F854D0F 		jne	.L230
 4209      0000
 4210              	.L229:
 4211              	.LBB25:
 979:main.c        **** 						uint8_t cnt = 1,valRead = *readFromChannelZero;
 4212              		.loc 1 979 0 is_stmt 1
 4213 3223 C6850AFD 		movb	$1, -758(%rbp)
 4213      FFFF01
 4214 322a 488B8588 		movq	-376(%rbp), %rax
 4214      FEFFFF
 4215 3231 0FB600   		movzbl	(%rax), %eax
 4216 3234 88851BFD 		movb	%al, -741(%rbp)
 4216      FFFF
 980:main.c        **** 						bool cont = true;
 4217              		.loc 1 980 0
 4218 323a C6850BFD 		movb	$1, -757(%rbp)
 4218      FFFF01
 981:main.c        **** 						while(cnt < 3) {
 4219              		.loc 1 981 0
 4220 3241 E99E0000 		jmp	.L231
 4220      00
 4221              	.L235:
 982:main.c        **** 
 983:main.c        **** 							flSleep(1000);
 4222              		.loc 1 983 0
 4223 3246 BFE80300 		movl	$1000, %edi
 4223      00
 4224 324b E8000000 		call	flSleep
 4224      00
 984:main.c        **** 							fStatus = flReadChannel(handle,0,length,readFromChannelZero,&error);
 4225              		.loc 1 984 0
 4226 3250 8B957CFD 		movl	-644(%rbp), %edx
 4226      FFFF
 4227 3256 488B85A0 		movq	-608(%rbp), %rax
 4227      FDFFFF
 4228 325d 488DB5A8 		leaq	-600(%rbp), %rsi
 4228      FDFFFF
 4229 3264 488B8D88 		movq	-376(%rbp), %rcx
 4229      FEFFFF
 4230 326b 4989F0   		movq	%rsi, %r8
 4231 326e BE000000 		movl	$0, %esi
 4231      00
 4232 3273 4889C7   		movq	%rax, %rdi
 4233 3276 E8000000 		call	flReadChannel
 4233      00
 4234 327b 89853CFD 		movl	%eax, -708(%rbp)
 4234      FFFF
 985:main.c        **** 							CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4235              		.loc 1 985 0
 4236 3281 83BD3CFD 		cmpl	$0, -708(%rbp)
 4236      FFFF00
 4237 3288 740F     		je	.L232
 4238              		.loc 1 985 0 is_stmt 0 discriminator 1
 4239 328a C78538FD 		movl	$1, -712(%rbp)
 4239      FFFF0100 
 4239      0000
 4240 3294 E9E60E00 		jmp	.L228
 4240      00
 4241              	.L232:
 986:main.c        **** 							printf("data in channel 0 = %u \n", *readFromChannelZero);
 4242              		.loc 1 986 0 is_stmt 1
 4243 3299 488B8588 		movq	-376(%rbp), %rax
 4243      FEFFFF
 4244 32a0 0FB600   		movzbl	(%rax), %eax
 4245 32a3 0FB6C0   		movzbl	%al, %eax
 4246 32a6 89C6     		movl	%eax, %esi
 4247 32a8 BF000000 		movl	$.LC140, %edi
 4247      00
 4248 32ad B8000000 		movl	$0, %eax
 4248      00
 4249 32b2 E8000000 		call	printf
 4249      00
 987:main.c        **** 							
 988:main.c        **** 							if(*readFromChannelZero == valRead) cnt++;
 4250              		.loc 1 988 0
 4251 32b7 488B8588 		movq	-376(%rbp), %rax
 4251      FEFFFF
 4252 32be 0FB600   		movzbl	(%rax), %eax
 4253 32c1 3A851BFD 		cmpb	-741(%rbp), %al
 4253      FFFF
 4254 32c7 7512     		jne	.L233
 4255              		.loc 1 988 0 is_stmt 0 discriminator 1
 4256 32c9 0FB6850A 		movzbl	-758(%rbp), %eax
 4256      FDFFFF
 4257 32d0 83C001   		addl	$1, %eax
 4258 32d3 88850AFD 		movb	%al, -758(%rbp)
 4258      FFFF
 4259 32d9 EB09     		jmp	.L231
 4260              	.L233:
 989:main.c        **** 							else {
 990:main.c        **** 								cont = false; break;
 4261              		.loc 1 990 0 is_stmt 1
 4262 32db C6850BFD 		movb	$0, -757(%rbp)
 4262      FFFF00
 4263 32e2 EB0D     		jmp	.L234
 4264              	.L231:
 981:main.c        **** 
 4265              		.loc 1 981 0 discriminator 1
 4266 32e4 80BD0AFD 		cmpb	$2, -758(%rbp)
 4266      FFFF02
 4267 32eb 0F8655FF 		jbe	.L235
 4267      FFFF
 4268              	.L234:
 991:main.c        **** 							}
 992:main.c        **** 						}
 993:main.c        **** 						if(cont) {
 4269              		.loc 1 993 0
 4270 32f1 80BD0BFD 		cmpb	$0, -757(%rbp)
 4270      FFFF00
 4271 32f8 0F84720E 		je	.L230
 4271      0000
 4272              	.LBB26:
 4273              	.LBB27:
 994:main.c        **** 							uint32_t inpFromFrontEnd[2];
 995:main.c        **** 							for(int i=0;i<2;i++) inpFromFrontEnd[i] = 0;
 4274              		.loc 1 995 0
 4275 32fe C78548FD 		movl	$0, -696(%rbp)
 4275      FFFF0000 
 4275      0000
 4276 3308 EB1A     		jmp	.L236
 4277              	.L237:
 4278              		.loc 1 995 0 is_stmt 0 discriminator 2
 4279 330a 8B8548FD 		movl	-696(%rbp), %eax
 4279      FFFF
 4280 3310 4898     		cltq
 4281 3312 C7848580 		movl	$0, -640(%rbp,%rax,4)
 4281      FDFFFF00 
 4281      000000
 4282 331d 838548FD 		addl	$1, -696(%rbp)
 4282      FFFF01
 4283              	.L236:
 4284              		.loc 1 995 0 discriminator 1
 4285 3324 83BD48FD 		cmpl	$1, -696(%rbp)
 4285      FFFF01
 4286 332b 7EDD     		jle	.L237
 4287              	.LBE27:
 4288              	.LBB28:
 996:main.c        **** 							for(uint32_t i=1;i <= 8;i++) {
 4289              		.loc 1 996 0 is_stmt 1
 4290 332d C7854CFD 		movl	$1, -692(%rbp)
 4290      FFFF0100 
 4290      0000
 4291 3337 E9F20000 		jmp	.L238
 4291      00
 4292              	.L243:
 4293              	.LBB29:
 997:main.c        **** 								uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 4294              		.loc 1 997 0
 4295 333c BF010000 		movl	$1, %edi
 4295      00
 4296 3341 E8000000 		call	malloc
 4296      00
 4297 3346 48898590 		movq	%rax, -368(%rbp)
 4297      FEFFFF
 998:main.c        **** 
 999:main.c        **** 								flSleep(1000);
 4298              		.loc 1 999 0
 4299 334d BFE80300 		movl	$1000, %edi
 4299      00
 4300 3352 E8000000 		call	flSleep
 4300      00
1000:main.c        **** 								fStatus = flReadChannel(handle,(uint8_t)i,length,readFromChannel_i,&error);
 4301              		.loc 1 1000 0
 4302 3357 8B957CFD 		movl	-644(%rbp), %edx
 4302      FFFF
 4303 335d 8B854CFD 		movl	-692(%rbp), %eax
 4303      FFFF
 4304 3363 0FB6F0   		movzbl	%al, %esi
 4305 3366 488B85A0 		movq	-608(%rbp), %rax
 4305      FDFFFF
 4306 336d 488DBDA8 		leaq	-600(%rbp), %rdi
 4306      FDFFFF
 4307 3374 488B8D90 		movq	-368(%rbp), %rcx
 4307      FEFFFF
 4308 337b 4989F8   		movq	%rdi, %r8
 4309 337e 4889C7   		movq	%rax, %rdi
 4310 3381 E8000000 		call	flReadChannel
 4310      00
 4311 3386 89853CFD 		movl	%eax, -708(%rbp)
 4311      FFFF
1001:main.c        **** 								CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4312              		.loc 1 1001 0
 4313 338c 83BD3CFD 		cmpl	$0, -708(%rbp)
 4313      FFFF00
 4314 3393 740F     		je	.L239
 4315              		.loc 1 1001 0 is_stmt 0 discriminator 1
 4316 3395 C78538FD 		movl	$1, -712(%rbp)
 4316      FFFF0100 
 4316      0000
 4317 339f E9CA0D00 		jmp	.L240
 4317      00
 4318              	.L239:
1002:main.c        **** 								printf("data in channel %u = %u \n", i ,*readFromChannel_i);
 4319              		.loc 1 1002 0 is_stmt 1
 4320 33a4 488B8590 		movq	-368(%rbp), %rax
 4320      FEFFFF
 4321 33ab 0FB600   		movzbl	(%rax), %eax
 4322 33ae 0FB6D0   		movzbl	%al, %edx
 4323 33b1 8B854CFD 		movl	-692(%rbp), %eax
 4323      FFFF
 4324 33b7 89C6     		movl	%eax, %esi
 4325 33b9 BF000000 		movl	$.LC141, %edi
 4325      00
 4326 33be B8000000 		movl	$0, %eax
 4326      00
 4327 33c3 E8000000 		call	printf
 4327      00
1003:main.c        **** 
1004:main.c        **** 								if(i <= 4) inpFromFrontEnd[0] += (*readFromChannel_i)*(1 << (i-1));
 4328              		.loc 1 1004 0
 4329 33c8 83BD4CFD 		cmpl	$4, -692(%rbp)
 4329      FFFF04
 4330 33cf 772C     		ja	.L241
 4331              		.loc 1 1004 0 is_stmt 0 discriminator 1
 4332 33d1 8B9580FD 		movl	-640(%rbp), %edx
 4332      FFFF
 4333 33d7 488B8590 		movq	-368(%rbp), %rax
 4333      FEFFFF
 4334 33de 0FB600   		movzbl	(%rax), %eax
 4335 33e1 0FB6F0   		movzbl	%al, %esi
 4336 33e4 8B854CFD 		movl	-692(%rbp), %eax
 4336      FFFF
 4337 33ea 83E801   		subl	$1, %eax
 4338 33ed 89C1     		movl	%eax, %ecx
 4339 33ef D3E6     		sall	%cl, %esi
 4340 33f1 89F0     		movl	%esi, %eax
 4341 33f3 01D0     		addl	%edx, %eax
 4342 33f5 898580FD 		movl	%eax, -640(%rbp)
 4342      FFFF
 4343 33fb EB2A     		jmp	.L242
 4344              	.L241:
1005:main.c        **** 								else inpFromFrontEnd[1] += (*readFromChannel_i)*(1 << (i-5));
 4345              		.loc 1 1005 0 is_stmt 1
 4346 33fd 8B9584FD 		movl	-636(%rbp), %edx
 4346      FFFF
 4347 3403 488B8590 		movq	-368(%rbp), %rax
 4347      FEFFFF
 4348 340a 0FB600   		movzbl	(%rax), %eax
 4349 340d 0FB6F0   		movzbl	%al, %esi
 4350 3410 8B854CFD 		movl	-692(%rbp), %eax
 4350      FFFF
 4351 3416 83E805   		subl	$5, %eax
 4352 3419 89C1     		movl	%eax, %ecx
 4353 341b D3E6     		sall	%cl, %esi
 4354 341d 89F0     		movl	%esi, %eax
 4355 341f 01D0     		addl	%edx, %eax
 4356 3421 898584FD 		movl	%eax, -636(%rbp)
 4356      FFFF
 4357              	.L242:
 4358              	.LBE29:
 996:main.c        **** 								uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 4359              		.loc 1 996 0
 4360 3427 83854CFD 		addl	$1, -692(%rbp)
 4360      FFFF01
 4361              	.L238:
 996:main.c        **** 								uint8_t *readFromChannel_i = malloc(sizeof(uint8_t));
 4362              		.loc 1 996 0 is_stmt 0 discriminator 1
 4363 342e 83BD4CFD 		cmpl	$8, -692(%rbp)
 4363      FFFF08
 4364 3435 0F8601FF 		jbe	.L243
 4364      FFFF
 4365              	.LBE28:
1006:main.c        **** 							}
1007:main.c        **** 							decrypt64(inpFromFrontEnd);
 4366              		.loc 1 1007 0 is_stmt 1
 4367 343b 488D8580 		leaq	-640(%rbp), %rax
 4367      FDFFFF
 4368 3442 4889C7   		movq	%rax, %rdi
 4369 3445 E8000000 		call	decrypt64
 4369      00
1008:main.c        **** 							uint8_t num_100 = 0, num_500 = 0, num_1000 = 0,num_2000 = 0; 
 4370              		.loc 1 1008 0
 4371 344a C6850CFD 		movb	$0, -756(%rbp)
 4371      FFFF00
 4372 3451 C6850DFD 		movb	$0, -755(%rbp)
 4372      FFFF00
 4373 3458 C6850EFD 		movb	$0, -754(%rbp)
 4373      FFFF00
 4374 345f C6850FFD 		movb	$0, -753(%rbp)
 4374      FFFF00
1009:main.c        **** 							uint16_t userID = 0, unhashedPin = 0;
 4375              		.loc 1 1009 0
 4376 3466 66C78520 		movw	$0, -736(%rbp)
 4376      FDFFFF00 
 4376      00
 4377 346f 66C78522 		movw	$0, -734(%rbp)
 4377      FDFFFF00 
 4377      00
 4378              	.LBB30:
1010:main.c        **** 							for(uint8_t i=1;i <= 32;i++) {
 4379              		.loc 1 1010 0
 4380 3478 C68510FD 		movb	$1, -752(%rbp)
 4380      FFFF01
 4381 347f E92F0100 		jmp	.L244
 4381      00
 4382              	.L252:
1011:main.c        **** 								if(i <= 8) {
 4383              		.loc 1 1011 0
 4384 3484 80BD10FD 		cmpb	$8, -752(%rbp)
 4384      FFFF08
 4385 348b 7745     		ja	.L245
1012:main.c        **** 									if((inpFromFrontEnd[0] & (1 << (i-1))) != 0)  num_100 += ((1 << (i-1)));
 4386              		.loc 1 1012 0
 4387 348d 8B9580FD 		movl	-640(%rbp), %edx
 4387      FFFF
 4388 3493 0FB68510 		movzbl	-752(%rbp), %eax
 4388      FDFFFF
 4389 349a 83E801   		subl	$1, %eax
 4390 349d BE010000 		movl	$1, %esi
 4390      00
 4391 34a2 89C1     		movl	%eax, %ecx
 4392 34a4 D3E6     		sall	%cl, %esi
 4393 34a6 89F0     		movl	%esi, %eax
 4394 34a8 21D0     		andl	%edx, %eax
 4395 34aa 85C0     		testl	%eax, %eax
 4396 34ac 0F84F100 		je	.L247
 4396      0000
 4397              		.loc 1 1012 0 is_stmt 0 discriminator 1
 4398 34b2 0FB68510 		movzbl	-752(%rbp), %eax
 4398      FDFFFF
 4399 34b9 83E801   		subl	$1, %eax
 4400 34bc BA010000 		movl	$1, %edx
 4400      00
 4401 34c1 89C1     		movl	%eax, %ecx
 4402 34c3 D3E2     		sall	%cl, %edx
 4403 34c5 89D0     		movl	%edx, %eax
 4404 34c7 00850CFD 		addb	%al, -756(%rbp)
 4404      FFFF
 4405 34cd E9D10000 		jmp	.L247
 4405      00
 4406              	.L245:
1013:main.c        **** 								}	
1014:main.c        **** 								else if(i <= 16) {
 4407              		.loc 1 1014 0 is_stmt 1
 4408 34d2 80BD10FD 		cmpb	$16, -752(%rbp)
 4408      FFFF10
 4409 34d9 7745     		ja	.L248
1015:main.c        **** 									if((inpFromFrontEnd[0] & (1 << (i-1))) != 0)  num_500 += ((1 << (i-9)));
 4410              		.loc 1 1015 0
 4411 34db 8B9580FD 		movl	-640(%rbp), %edx
 4411      FFFF
 4412 34e1 0FB68510 		movzbl	-752(%rbp), %eax
 4412      FDFFFF
 4413 34e8 83E801   		subl	$1, %eax
 4414 34eb BE010000 		movl	$1, %esi
 4414      00
 4415 34f0 89C1     		movl	%eax, %ecx
 4416 34f2 D3E6     		sall	%cl, %esi
 4417 34f4 89F0     		movl	%esi, %eax
 4418 34f6 21D0     		andl	%edx, %eax
 4419 34f8 85C0     		testl	%eax, %eax
 4420 34fa 0F84A300 		je	.L247
 4420      0000
 4421              		.loc 1 1015 0 is_stmt 0 discriminator 1
 4422 3500 0FB68510 		movzbl	-752(%rbp), %eax
 4422      FDFFFF
 4423 3507 83E809   		subl	$9, %eax
 4424 350a BA010000 		movl	$1, %edx
 4424      00
 4425 350f 89C1     		movl	%eax, %ecx
 4426 3511 D3E2     		sall	%cl, %edx
 4427 3513 89D0     		movl	%edx, %eax
 4428 3515 00850DFD 		addb	%al, -755(%rbp)
 4428      FFFF
 4429 351b E9830000 		jmp	.L247
 4429      00
 4430              	.L248:
1016:main.c        **** 								}
1017:main.c        **** 								else if(i <= 24) {
 4431              		.loc 1 1017 0 is_stmt 1
 4432 3520 80BD10FD 		cmpb	$24, -752(%rbp)
 4432      FFFF18
 4433 3527 773E     		ja	.L250
1018:main.c        **** 									if((inpFromFrontEnd[0] & (1 << (i-1))) != 0)  num_1000 += ((1 << (i-17)));
 4434              		.loc 1 1018 0
 4435 3529 8B9580FD 		movl	-640(%rbp), %edx
 4435      FFFF
 4436 352f 0FB68510 		movzbl	-752(%rbp), %eax
 4436      FDFFFF
 4437 3536 83E801   		subl	$1, %eax
 4438 3539 BE010000 		movl	$1, %esi
 4438      00
 4439 353e 89C1     		movl	%eax, %ecx
 4440 3540 D3E6     		sall	%cl, %esi
 4441 3542 89F0     		movl	%esi, %eax
 4442 3544 21D0     		andl	%edx, %eax
 4443 3546 85C0     		testl	%eax, %eax
 4444 3548 7459     		je	.L247
 4445              		.loc 1 1018 0 is_stmt 0 discriminator 1
 4446 354a 0FB68510 		movzbl	-752(%rbp), %eax
 4446      FDFFFF
 4447 3551 83E811   		subl	$17, %eax
 4448 3554 BA010000 		movl	$1, %edx
 4448      00
 4449 3559 89C1     		movl	%eax, %ecx
 4450 355b D3E2     		sall	%cl, %edx
 4451 355d 89D0     		movl	%edx, %eax
 4452 355f 00850EFD 		addb	%al, -754(%rbp)
 4452      FFFF
 4453 3565 EB3C     		jmp	.L247
 4454              	.L250:
1019:main.c        **** 								}
1020:main.c        **** 								else {
1021:main.c        **** 									if((inpFromFrontEnd[0] & (1 << (i-1))) != 0)  num_2000 += ((1 << (i-25)));
 4455              		.loc 1 1021 0 is_stmt 1
 4456 3567 8B9580FD 		movl	-640(%rbp), %edx
 4456      FFFF
 4457 356d 0FB68510 		movzbl	-752(%rbp), %eax
 4457      FDFFFF
 4458 3574 83E801   		subl	$1, %eax
 4459 3577 BE010000 		movl	$1, %esi
 4459      00
 4460 357c 89C1     		movl	%eax, %ecx
 4461 357e D3E6     		sall	%cl, %esi
 4462 3580 89F0     		movl	%esi, %eax
 4463 3582 21D0     		andl	%edx, %eax
 4464 3584 85C0     		testl	%eax, %eax
 4465 3586 741B     		je	.L247
 4466              		.loc 1 1021 0 is_stmt 0 discriminator 1
 4467 3588 0FB68510 		movzbl	-752(%rbp), %eax
 4467      FDFFFF
 4468 358f 83E819   		subl	$25, %eax
 4469 3592 BA010000 		movl	$1, %edx
 4469      00
 4470 3597 89C1     		movl	%eax, %ecx
 4471 3599 D3E2     		sall	%cl, %edx
 4472 359b 89D0     		movl	%edx, %eax
 4473 359d 00850FFD 		addb	%al, -753(%rbp)
 4473      FFFF
 4474              	.L247:
1010:main.c        **** 								if(i <= 8) {
 4475              		.loc 1 1010 0 is_stmt 1
 4476 35a3 0FB68510 		movzbl	-752(%rbp), %eax
 4476      FDFFFF
 4477 35aa 83C001   		addl	$1, %eax
 4478 35ad 888510FD 		movb	%al, -752(%rbp)
 4478      FFFF
 4479              	.L244:
1010:main.c        **** 								if(i <= 8) {
 4480              		.loc 1 1010 0 is_stmt 0 discriminator 1
 4481 35b3 80BD10FD 		cmpb	$32, -752(%rbp)
 4481      FFFF20
 4482 35ba 0F86C4FE 		jbe	.L252
 4482      FFFF
 4483              	.LBE30:
 4484              	.LBB31:
1022:main.c        **** 								}
1023:main.c        **** 							}
1024:main.c        **** 							for(uint16_t i=1;i <= 32;i++) {
 4485              		.loc 1 1024 0 is_stmt 1
 4486 35c0 66C78524 		movw	$1, -732(%rbp)
 4486      FDFFFF01 
 4486      00
 4487 35c9 E9970000 		jmp	.L253
 4487      00
 4488              	.L257:
1025:main.c        **** 								if(i <= 16) {
 4489              		.loc 1 1025 0
 4490 35ce 6683BD24 		cmpw	$16, -732(%rbp)
 4490      FDFFFF10 
 4491 35d6 773F     		ja	.L254
1026:main.c        **** 									if((inpFromFrontEnd[1] & (1 << (i-1))) != 0) unhashedPin += ((1 << (i-1)));
 4492              		.loc 1 1026 0
 4493 35d8 8B9584FD 		movl	-636(%rbp), %edx
 4493      FFFF
 4494 35de 0FB78524 		movzwl	-732(%rbp), %eax
 4494      FDFFFF
 4495 35e5 83E801   		subl	$1, %eax
 4496 35e8 BE010000 		movl	$1, %esi
 4496      00
 4497 35ed 89C1     		movl	%eax, %ecx
 4498 35ef D3E6     		sall	%cl, %esi
 4499 35f1 89F0     		movl	%esi, %eax
 4500 35f3 21D0     		andl	%edx, %eax
 4501 35f5 85C0     		testl	%eax, %eax
 4502 35f7 745B     		je	.L256
 4503              		.loc 1 1026 0 is_stmt 0 discriminator 1
 4504 35f9 0FB78524 		movzwl	-732(%rbp), %eax
 4504      FDFFFF
 4505 3600 83E801   		subl	$1, %eax
 4506 3603 BA010000 		movl	$1, %edx
 4506      00
 4507 3608 89C1     		movl	%eax, %ecx
 4508 360a D3E2     		sall	%cl, %edx
 4509 360c 89D0     		movl	%edx, %eax
 4510 360e 66018522 		addw	%ax, -734(%rbp)
 4510      FDFFFF
 4511 3615 EB3D     		jmp	.L256
 4512              	.L254:
1027:main.c        **** 								}	
1028:main.c        **** 								else {
1029:main.c        **** 									if((inpFromFrontEnd[1] & (1 << (i-1))) != 0) userID += ((1 << (i-17)));
 4513              		.loc 1 1029 0 is_stmt 1
 4514 3617 8B9584FD 		movl	-636(%rbp), %edx
 4514      FFFF
 4515 361d 0FB78524 		movzwl	-732(%rbp), %eax
 4515      FDFFFF
 4516 3624 83E801   		subl	$1, %eax
 4517 3627 BE010000 		movl	$1, %esi
 4517      00
 4518 362c 89C1     		movl	%eax, %ecx
 4519 362e D3E6     		sall	%cl, %esi
 4520 3630 89F0     		movl	%esi, %eax
 4521 3632 21D0     		andl	%edx, %eax
 4522 3634 85C0     		testl	%eax, %eax
 4523 3636 741C     		je	.L256
 4524              		.loc 1 1029 0 is_stmt 0 discriminator 1
 4525 3638 0FB78524 		movzwl	-732(%rbp), %eax
 4525      FDFFFF
 4526 363f 83E811   		subl	$17, %eax
 4527 3642 BA010000 		movl	$1, %edx
 4527      00
 4528 3647 89C1     		movl	%eax, %ecx
 4529 3649 D3E2     		sall	%cl, %edx
 4530 364b 89D0     		movl	%edx, %eax
 4531 364d 66018520 		addw	%ax, -736(%rbp)
 4531      FDFFFF
 4532              	.L256:
1024:main.c        **** 								if(i <= 16) {
 4533              		.loc 1 1024 0 is_stmt 1
 4534 3654 0FB78524 		movzwl	-732(%rbp), %eax
 4534      FDFFFF
 4535 365b 83C001   		addl	$1, %eax
 4536 365e 66898524 		movw	%ax, -732(%rbp)
 4536      FDFFFF
 4537              	.L253:
1024:main.c        **** 								if(i <= 16) {
 4538              		.loc 1 1024 0 is_stmt 0 discriminator 1
 4539 3665 6683BD24 		cmpw	$32, -732(%rbp)
 4539      FDFFFF20 
 4540 366d 0F865BFF 		jbe	.L257
 4540      FFFF
 4541              	.LBE31:
1030:main.c        **** 								}
1031:main.c        **** 							}
1032:main.c        **** 							// unhashedPin = 51173; userID = 29;
1033:main.c        **** 							uint16_t hashedPin = myHash(unhashedPin);
 4542              		.loc 1 1033 0 is_stmt 1
 4543 3673 0FB78522 		movzwl	-734(%rbp), %eax
 4543      FDFFFF
 4544 367a 89C7     		movl	%eax, %edi
 4545 367c E8000000 		call	myHash
 4545      00
 4546 3681 66898526 		movw	%ax, -730(%rbp)
 4546      FDFFFF
1034:main.c        **** 							// hashedPin = 8828; userID = 12838;
1035:main.c        **** 							int bal = -1; bool isAdmin = false; int inLineNum = -1;
 4547              		.loc 1 1035 0
 4548 3688 C7852CFD 		movl	$-1, -724(%rbp)
 4548      FFFFFFFF 
 4548      FFFF
 4549 3692 C68507FD 		movb	$0, -761(%rbp)
 4549      FFFF00
 4550 3699 C78530FD 		movl	$-1, -720(%rbp)
 4550      FFFFFFFF 
 4550      FFFF
1036:main.c        **** 							uint8_t * statusOnChan9 = malloc(sizeof(uint8_t));
 4551              		.loc 1 1036 0
 4552 36a3 BF010000 		movl	$1, %edi
 4552      00
 4553 36a8 E8000000 		call	malloc
 4553      00
 4554 36ad 48898598 		movq	%rax, -360(%rbp)
 4554      FEFFFF
1037:main.c        **** 							if(find(userID,hashedPin,&isAdmin,&bal,&inLineNum)) {
 4555              		.loc 1 1037 0
 4556 36b4 0FB7B526 		movzwl	-730(%rbp), %esi
 4556      FDFFFF
 4557 36bb 0FB78520 		movzwl	-736(%rbp), %eax
 4557      FDFFFF
 4558 36c2 488DBD30 		leaq	-720(%rbp), %rdi
 4558      FDFFFF
 4559 36c9 488D8D2C 		leaq	-724(%rbp), %rcx
 4559      FDFFFF
 4560 36d0 488D9507 		leaq	-761(%rbp), %rdx
 4560      FDFFFF
 4561 36d7 4989F8   		movq	%rdi, %r8
 4562 36da 89C7     		movl	%eax, %edi
 4563 36dc E8000000 		call	find
 4563      00
 4564 36e1 84C0     		testb	%al, %al
 4565 36e3 0F84A809 		je	.L258
 4565      0000
1038:main.c        **** 								printf("Valid user found \n");
 4566              		.loc 1 1038 0
 4567 36e9 BF000000 		movl	$.LC142, %edi
 4567      00
 4568 36ee E8000000 		call	puts
 4568      00
1039:main.c        **** 								if(!isAdmin) {
 4569              		.loc 1 1039 0
 4570 36f3 0FB68507 		movzbl	-761(%rbp), %eax
 4570      FDFFFF
 4571 36fa 83F001   		xorl	$1, %eax
 4572 36fd 84C0     		testb	%al, %al
 4573 36ff 0F840A06 		je	.L259
 4573      0000
 4574              	.LBB32:
1040:main.c        **** 									int reqAmo = 0;
 4575              		.loc 1 1040 0
 4576 3705 C78534FD 		movl	$0, -716(%rbp)
 4576      FFFF0000 
 4576      0000
1041:main.c        **** 									if(suffBal(bal,&reqAmo,num_100,num_500,num_1000,num_2000)) {
 4577              		.loc 1 1041 0
 4578 370f 440FB685 		movzbl	-753(%rbp), %r8d
 4578      0FFDFFFF 
 4579 3717 0FB6BD0E 		movzbl	-754(%rbp), %edi
 4579      FDFFFF
 4580 371e 0FB68D0D 		movzbl	-755(%rbp), %ecx
 4580      FDFFFF
 4581 3725 0FB6950C 		movzbl	-756(%rbp), %edx
 4581      FDFFFF
 4582 372c 8B852CFD 		movl	-724(%rbp), %eax
 4582      FFFF
 4583 3732 488DB534 		leaq	-716(%rbp), %rsi
 4583      FDFFFF
 4584 3739 4589C1   		movl	%r8d, %r9d
 4585 373c 4189F8   		movl	%edi, %r8d
 4586 373f 89C7     		movl	%eax, %edi
 4587 3741 E8000000 		call	suffBal
 4587      00
 4588 3746 84C0     		testb	%al, %al
 4589 3748 0F84E304 		je	.L260
 4589      0000
 4590              	.LBB33:
1042:main.c        **** 										* statusOnChan9 = 1;
 4591              		.loc 1 1042 0
 4592 374e 488B8598 		movq	-360(%rbp), %rax
 4592      FEFFFF
 4593 3755 C60001   		movb	$1, (%rax)
1043:main.c        **** 										flSleep(1000);
 4594              		.loc 1 1043 0
 4595 3758 BFE80300 		movl	$1000, %edi
 4595      00
 4596 375d E8000000 		call	flSleep
 4596      00
1044:main.c        **** 										fStatus = flWriteChannel(handle,(uint8_t)9,length,statusOnChan9,&error);
 4597              		.loc 1 1044 0
 4598 3762 8B957CFD 		movl	-644(%rbp), %edx
 4598      FFFF
 4599 3768 488B85A0 		movq	-608(%rbp), %rax
 4599      FDFFFF
 4600 376f 488DB5A8 		leaq	-600(%rbp), %rsi
 4600      FDFFFF
 4601 3776 488B8D98 		movq	-360(%rbp), %rcx
 4601      FEFFFF
 4602 377d 4989F0   		movq	%rsi, %r8
 4603 3780 BE090000 		movl	$9, %esi
 4603      00
 4604 3785 4889C7   		movq	%rax, %rdi
 4605 3788 E8000000 		call	flWriteChannel
 4605      00
 4606 378d 89853CFD 		movl	%eax, -708(%rbp)
 4606      FFFF
1045:main.c        **** 										CHECK_STATUS(fStatus, FLP_LIBERR,cleanup);
 4607              		.loc 1 1045 0
 4608 3793 83BD3CFD 		cmpl	$0, -708(%rbp)
 4608      FFFF00
 4609 379a 740F     		je	.L261
 4610              		.loc 1 1045 0 is_stmt 0 discriminator 1
 4611 379c C78538FD 		movl	$1, -712(%rbp)
 4611      FFFF0100 
 4611      0000
 4612 37a6 E95F0500 		jmp	.L292
 4612      00
 4613              	.L261:
 4614              	.LBB34:
1046:main.c        **** 										uint32_t befEncSen[2];
1047:main.c        **** 										for(int i=0;i<2;i++) befEncSen[i] = 0;
 4615              		.loc 1 1047 0 is_stmt 1
 4616 37ab C78550FD 		movl	$0, -688(%rbp)
 4616      FFFF0000 
 4616      0000
 4617 37b5 EB1A     		jmp	.L263
 4618              	.L264:
 4619              		.loc 1 1047 0 is_stmt 0 discriminator 2
 4620 37b7 8B8550FD 		movl	-688(%rbp), %eax
 4620      FFFF
 4621 37bd 4898     		cltq
 4622 37bf C7848590 		movl	$0, -624(%rbp,%rax,4)
 4622      FDFFFF00 
 4622      000000
 4623 37ca 838550FD 		addl	$1, -688(%rbp)
 4623      FFFF01
 4624              	.L263:
 4625              		.loc 1 1047 0 discriminator 1
 4626 37d1 83BD50FD 		cmpl	$1, -688(%rbp)
 4626      FFFF01
 4627 37d8 7EDD     		jle	.L264
 4628              	.LBE34:
 4629              	.LBB35:
1048:main.c        **** 										for(uint32_t i=0;i <= 31;i += 8) {
 4630              		.loc 1 1048 0 is_stmt 1
 4631 37da C78554FD 		movl	$0, -684(%rbp)
 4631      FFFF0000 
 4631      0000
 4632 37e4 E9AC0000 		jmp	.L265
 4632      00
 4633              	.L270:
1049:main.c        **** 											if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 4634              		.loc 1 1049 0
 4635 37e9 83BD54FD 		cmpl	$0, -684(%rbp)
 4635      FFFF00
 4636 37f0 7523     		jne	.L266
 4637              		.loc 1 1049 0 is_stmt 0 discriminator 1
 4638 37f2 8B9590FD 		movl	-624(%rbp), %edx
 4638      FFFF
 4639 37f8 0FB6B50C 		movzbl	-756(%rbp), %esi
 4639      FDFFFF
 4640 37ff 8B8554FD 		movl	-684(%rbp), %eax
 4640      FFFF
 4641 3805 89C1     		movl	%eax, %ecx
 4642 3807 D3E6     		sall	%cl, %esi
 4643 3809 89F0     		movl	%esi, %eax
 4644 380b 01D0     		addl	%edx, %eax
 4645 380d 898590FD 		movl	%eax, -624(%rbp)
 4645      FFFF
 4646 3813 EB79     		jmp	.L267
 4647              	.L266:
1050:main.c        **** 											else if(i == 8) befEncSen[0] += ((1 << i)*((uint32_t)num_500));
 4648              		.loc 1 1050 0 is_stmt 1
 4649 3815 83BD54FD 		cmpl	$8, -684(%rbp)
 4649      FFFF08
 4650 381c 7523     		jne	.L268
 4651              		.loc 1 1050 0 is_stmt 0 discriminator 1
 4652 381e 8B9590FD 		movl	-624(%rbp), %edx
 4652      FFFF
 4653 3824 0FB6B50D 		movzbl	-755(%rbp), %esi
 4653      FDFFFF
 4654 382b 8B8554FD 		movl	-684(%rbp), %eax
 4654      FFFF
 4655 3831 89C1     		movl	%eax, %ecx
 4656 3833 D3E6     		sall	%cl, %esi
 4657 3835 89F0     		movl	%esi, %eax
 4658 3837 01D0     		addl	%edx, %eax
 4659 3839 898590FD 		movl	%eax, -624(%rbp)
 4659      FFFF
 4660 383f EB4D     		jmp	.L267
 4661              	.L268:
1051:main.c        **** 											else if(i == 16) befEncSen[0] += ((1 << i)*((uint32_t)num_1000));
 4662              		.loc 1 1051 0 is_stmt 1
 4663 3841 83BD54FD 		cmpl	$16, -684(%rbp)
 4663      FFFF10
 4664 3848 7523     		jne	.L269
 4665              		.loc 1 1051 0 is_stmt 0 discriminator 1
 4666 384a 8B9590FD 		movl	-624(%rbp), %edx
 4666      FFFF
 4667 3850 0FB6B50E 		movzbl	-754(%rbp), %esi
 4667      FDFFFF
 4668 3857 8B8554FD 		movl	-684(%rbp), %eax
 4668      FFFF
 4669 385d 89C1     		movl	%eax, %ecx
 4670 385f D3E6     		sall	%cl, %esi
 4671 3861 89F0     		movl	%esi, %eax
 4672 3863 01D0     		addl	%edx, %eax
 4673 3865 898590FD 		movl	%eax, -624(%rbp)
 4673      FFFF
 4674 386b EB21     		jmp	.L267
 4675              	.L269:
1052:main.c        **** 											else befEncSen[0] += ((1 << i)*((uint32_t)num_2000));
 4676              		.loc 1 1052 0 is_stmt 1
 4677 386d 8B9590FD 		movl	-624(%rbp), %edx
 4677      FFFF
 4678 3873 0FB6B50F 		movzbl	-753(%rbp), %esi
 4678      FDFFFF
 4679 387a 8B8554FD 		movl	-684(%rbp), %eax
 4679      FFFF
 4680 3880 89C1     		movl	%eax, %ecx
 4681 3882 D3E6     		sall	%cl, %esi
 4682 3884 89F0     		movl	%esi, %eax
 4683 3886 01D0     		addl	%edx, %eax
 4684 3888 898590FD 		movl	%eax, -624(%rbp)
 4684      FFFF
 4685              	.L267:
1048:main.c        **** 											if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 4686              		.loc 1 1048 0
 4687 388e 838554FD 		addl	$8, -684(%rbp)
 4687      FFFF08
 4688              	.L265:
1048:main.c        **** 											if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 4689              		.loc 1 1048 0 is_stmt 0 discriminator 1
 4690 3895 83BD54FD 		cmpl	$31, -684(%rbp)
 4690      FFFF1F
 4691 389c 0F8647FF 		jbe	.L270
 4691      FFFF
 4692              	.LBE35:
1053:main.c        **** 										}	
1054:main.c        **** 										encrypt64(befEncSen);
 4693              		.loc 1 1054 0 is_stmt 1
 4694 38a2 488D8590 		leaq	-624(%rbp), %rax
 4694      FDFFFF
 4695 38a9 4889C7   		movq	%rax, %rdi
 4696 38ac E8000000 		call	encrypt64
 4696      00
 4697              	.LBB36:
1055:main.c        **** 										for(uint8_t i=10;i <= 13;i++) {
 4698              		.loc 1 1055 0
 4699 38b1 C68511FD 		movb	$10, -751(%rbp)
 4699      FFFF0A
 4700 38b8 E9EF0000 		jmp	.L271
 4700      00
 4701              	.L276:
 4702              	.LBB37:
1056:main.c        **** 											uint8_t tempSto = 0;
 4703              		.loc 1 1056 0
 4704 38bd C68508FD 		movb	$0, -760(%rbp)
 4704      FFFF00
 4705              	.LBB38:
1057:main.c        **** 											for(uint8_t j=0;j <= 7;j++) {
 4706              		.loc 1 1057 0
 4707 38c4 C68512FD 		movb	$0, -750(%rbp)
 4707      FFFF00
 4708 38cb EB71     		jmp	.L272
 4709              	.L274:
 4710              	.LBB39:
1058:main.c        **** 												uint8_t temp = j + (i-10)*8;
 4711              		.loc 1 1058 0
 4712 38cd 0FB68511 		movzbl	-751(%rbp), %eax
 4712      FDFFFF
 4713 38d4 83E80A   		subl	$10, %eax
 4714 38d7 8D14C500 		leal	0(,%rax,8), %edx
 4714      000000
 4715 38de 0FB68512 		movzbl	-750(%rbp), %eax
 4715      FDFFFF
 4716 38e5 01D0     		addl	%edx, %eax
 4717 38e7 88851CFD 		movb	%al, -740(%rbp)
 4717      FFFF
1059:main.c        **** 												if( (befEncSen[0] & (1 << temp)) != 0) {
 4718              		.loc 1 1059 0
 4719 38ed 8B9590FD 		movl	-624(%rbp), %edx
 4719      FFFF
 4720 38f3 0FB6851C 		movzbl	-740(%rbp), %eax
 4720      FDFFFF
 4721 38fa BE010000 		movl	$1, %esi
 4721      00
 4722 38ff 89C1     		movl	%eax, %ecx
 4723 3901 D3E6     		sall	%cl, %esi
 4724 3903 89F0     		movl	%esi, %eax
 4725 3905 21D0     		andl	%edx, %eax
 4726 3907 85C0     		testl	%eax, %eax
 4727 3909 7423     		je	.L273
1060:main.c        **** 													tempSto += (1 << j);
 4728              		.loc 1 1060 0
 4729 390b 0FB68512 		movzbl	-750(%rbp), %eax
 4729      FDFFFF
 4730 3912 BA010000 		movl	$1, %edx
 4730      00
 4731 3917 89C1     		movl	%eax, %ecx
 4732 3919 D3E2     		sall	%cl, %edx
 4733 391b 89D0     		movl	%edx, %eax
 4734 391d 89C2     		movl	%eax, %edx
 4735 391f 0FB68508 		movzbl	-760(%rbp), %eax
 4735      FDFFFF
 4736 3926 01D0     		addl	%edx, %eax
 4737 3928 888508FD 		movb	%al, -760(%rbp)
 4737      FFFF
 4738              	.L273:
 4739              	.LBE39:
1057:main.c        **** 												uint8_t temp = j + (i-10)*8;
 4740              		.loc 1 1057 0
 4741 392e 0FB68512 		movzbl	-750(%rbp), %eax
 4741      FDFFFF
 4742 3935 83C001   		addl	$1, %eax
 4743 3938 888512FD 		movb	%al, -750(%rbp)
 4743      FFFF
 4744              	.L272:
1057:main.c        **** 												uint8_t temp = j + (i-10)*8;
 4745              		.loc 1 1057 0 is_stmt 0 discriminator 1
 4746 393e 80BD12FD 		cmpb	$7, -750(%rbp)
 4746      FFFF07
 4747 3945 7686     		jbe	.L274
 4748              	.LBE38:
1061:main.c        **** 												}
1062:main.c        **** 											}
1063:main.c        **** 											flSleep(1000);
 4749              		.loc 1 1063 0 is_stmt 1
 4750 3947 BFE80300 		movl	$1000, %edi
 4750      00
 4751 394c E8000000 		call	flSleep
 4751      00
1064:main.c        **** 											fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 4752              		.loc 1 1064 0
 4753 3951 8B957CFD 		movl	-644(%rbp), %edx
 4753      FFFF
 4754 3957 0FB6B511 		movzbl	-751(%rbp), %esi
 4754      FDFFFF
 4755 395e 488B85A0 		movq	-608(%rbp), %rax
 4755      FDFFFF
 4756 3965 488DBDA8 		leaq	-600(%rbp), %rdi
 4756      FDFFFF
 4757 396c 488D8D08 		leaq	-760(%rbp), %rcx
 4757      FDFFFF
 4758 3973 4989F8   		movq	%rdi, %r8
 4759 3976 4889C7   		movq	%rax, %rdi
 4760 3979 E8000000 		call	flWriteChannel
 4760      00
 4761 397e 89853CFD 		movl	%eax, -708(%rbp)
 4761      FFFF
1065:main.c        **** 											CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4762              		.loc 1 1065 0
 4763 3984 83BD3CFD 		cmpl	$0, -708(%rbp)
 4763      FFFF00
 4764 398b 740F     		je	.L275
 4765              		.loc 1 1065 0 is_stmt 0 discriminator 1
 4766 398d C78538FD 		movl	$1, -712(%rbp)
 4766      FFFF0100 
 4766      0000
 4767              	.LBE37:
 4768              	.LBE36:
1045:main.c        **** 										uint32_t befEncSen[2];
 4769              		.loc 1 1045 0 is_stmt 1 discriminator 1
 4770 3997 E96E0300 		jmp	.L292
 4770      00
 4771              	.L275:
 4772              	.LBB40:
1055:main.c        **** 											uint8_t tempSto = 0;
 4773              		.loc 1 1055 0
 4774 399c 0FB68511 		movzbl	-751(%rbp), %eax
 4774      FDFFFF
 4775 39a3 83C001   		addl	$1, %eax
 4776 39a6 888511FD 		movb	%al, -751(%rbp)
 4776      FFFF
 4777              	.L271:
1055:main.c        **** 											uint8_t tempSto = 0;
 4778              		.loc 1 1055 0 is_stmt 0 discriminator 1
 4779 39ac 80BD11FD 		cmpb	$13, -751(%rbp)
 4779      FFFF0D
 4780 39b3 0F8604FF 		jbe	.L276
 4780      FFFF
 4781              	.LBE40:
 4782              	.LBB41:
1066:main.c        **** 										}
1067:main.c        **** 										
1068:main.c        **** 										for(uint8_t i=14;i <= 17;i++) {
 4783              		.loc 1 1068 0 is_stmt 1
 4784 39b9 C68513FD 		movb	$14, -749(%rbp)
 4784      FFFF0E
 4785 39c0 E9EF0000 		jmp	.L277
 4785      00
 4786              	.L282:
 4787              	.LBB42:
1069:main.c        **** 											uint8_t tempSto = 0;
 4788              		.loc 1 1069 0
 4789 39c5 C68508FD 		movb	$0, -760(%rbp)
 4789      FFFF00
 4790              	.LBB43:
1070:main.c        **** 											for(uint8_t j=0;j <= 7;j++) {
 4791              		.loc 1 1070 0
 4792 39cc C68514FD 		movb	$0, -748(%rbp)
 4792      FFFF00
 4793 39d3 EB71     		jmp	.L278
 4794              	.L280:
 4795              	.LBB44:
1071:main.c        **** 												uint8_t temp = j + (i-14)*8;
 4796              		.loc 1 1071 0
 4797 39d5 0FB68513 		movzbl	-749(%rbp), %eax
 4797      FDFFFF
 4798 39dc 83E80E   		subl	$14, %eax
 4799 39df 8D14C500 		leal	0(,%rax,8), %edx
 4799      000000
 4800 39e6 0FB68514 		movzbl	-748(%rbp), %eax
 4800      FDFFFF
 4801 39ed 01D0     		addl	%edx, %eax
 4802 39ef 88851DFD 		movb	%al, -739(%rbp)
 4802      FFFF
1072:main.c        **** 												if( (befEncSen[1] & (1 << temp)) != 0) {
 4803              		.loc 1 1072 0
 4804 39f5 8B9594FD 		movl	-620(%rbp), %edx
 4804      FFFF
 4805 39fb 0FB6851D 		movzbl	-739(%rbp), %eax
 4805      FDFFFF
 4806 3a02 BE010000 		movl	$1, %esi
 4806      00
 4807 3a07 89C1     		movl	%eax, %ecx
 4808 3a09 D3E6     		sall	%cl, %esi
 4809 3a0b 89F0     		movl	%esi, %eax
 4810 3a0d 21D0     		andl	%edx, %eax
 4811 3a0f 85C0     		testl	%eax, %eax
 4812 3a11 7423     		je	.L279
1073:main.c        **** 													tempSto += (1 << j);
 4813              		.loc 1 1073 0
 4814 3a13 0FB68514 		movzbl	-748(%rbp), %eax
 4814      FDFFFF
 4815 3a1a BA010000 		movl	$1, %edx
 4815      00
 4816 3a1f 89C1     		movl	%eax, %ecx
 4817 3a21 D3E2     		sall	%cl, %edx
 4818 3a23 89D0     		movl	%edx, %eax
 4819 3a25 89C2     		movl	%eax, %edx
 4820 3a27 0FB68508 		movzbl	-760(%rbp), %eax
 4820      FDFFFF
 4821 3a2e 01D0     		addl	%edx, %eax
 4822 3a30 888508FD 		movb	%al, -760(%rbp)
 4822      FFFF
 4823              	.L279:
 4824              	.LBE44:
1070:main.c        **** 												uint8_t temp = j + (i-14)*8;
 4825              		.loc 1 1070 0
 4826 3a36 0FB68514 		movzbl	-748(%rbp), %eax
 4826      FDFFFF
 4827 3a3d 83C001   		addl	$1, %eax
 4828 3a40 888514FD 		movb	%al, -748(%rbp)
 4828      FFFF
 4829              	.L278:
1070:main.c        **** 												uint8_t temp = j + (i-14)*8;
 4830              		.loc 1 1070 0 is_stmt 0 discriminator 1
 4831 3a46 80BD14FD 		cmpb	$7, -748(%rbp)
 4831      FFFF07
 4832 3a4d 7686     		jbe	.L280
 4833              	.LBE43:
1074:main.c        **** 												}
1075:main.c        **** 											}
1076:main.c        **** 											flSleep(1000);
 4834              		.loc 1 1076 0 is_stmt 1
 4835 3a4f BFE80300 		movl	$1000, %edi
 4835      00
 4836 3a54 E8000000 		call	flSleep
 4836      00
1077:main.c        **** 											fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 4837              		.loc 1 1077 0
 4838 3a59 8B957CFD 		movl	-644(%rbp), %edx
 4838      FFFF
 4839 3a5f 0FB6B513 		movzbl	-749(%rbp), %esi
 4839      FDFFFF
 4840 3a66 488B85A0 		movq	-608(%rbp), %rax
 4840      FDFFFF
 4841 3a6d 488DBDA8 		leaq	-600(%rbp), %rdi
 4841      FDFFFF
 4842 3a74 488D8D08 		leaq	-760(%rbp), %rcx
 4842      FDFFFF
 4843 3a7b 4989F8   		movq	%rdi, %r8
 4844 3a7e 4889C7   		movq	%rax, %rdi
 4845 3a81 E8000000 		call	flWriteChannel
 4845      00
 4846 3a86 89853CFD 		movl	%eax, -708(%rbp)
 4846      FFFF
1078:main.c        **** 											CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4847              		.loc 1 1078 0
 4848 3a8c 83BD3CFD 		cmpl	$0, -708(%rbp)
 4848      FFFF00
 4849 3a93 740F     		je	.L281
 4850              		.loc 1 1078 0 is_stmt 0 discriminator 1
 4851 3a95 C78538FD 		movl	$1, -712(%rbp)
 4851      FFFF0100 
 4851      0000
 4852              	.LBE42:
 4853              	.LBE41:
1045:main.c        **** 										uint32_t befEncSen[2];
 4854              		.loc 1 1045 0 is_stmt 1 discriminator 1
 4855 3a9f E9660200 		jmp	.L292
 4855      00
 4856              	.L281:
 4857              	.LBB45:
1068:main.c        **** 											uint8_t tempSto = 0;
 4858              		.loc 1 1068 0
 4859 3aa4 0FB68513 		movzbl	-749(%rbp), %eax
 4859      FDFFFF
 4860 3aab 83C001   		addl	$1, %eax
 4861 3aae 888513FD 		movb	%al, -749(%rbp)
 4861      FFFF
 4862              	.L277:
1068:main.c        **** 											uint8_t tempSto = 0;
 4863              		.loc 1 1068 0 is_stmt 0 discriminator 1
 4864 3ab4 80BD13FD 		cmpb	$17, -749(%rbp)
 4864      FFFF11
 4865 3abb 0F8604FF 		jbe	.L282
 4865      FFFF
 4866              	.LBE45:
1079:main.c        **** 										}
1080:main.c        **** 										/* update the balance in the global variable now and update the csv here itself */
1081:main.c        **** 										if((*readFromChannelZero) == 1) {
 4867              		.loc 1 1081 0 is_stmt 1
 4868 3ac1 488B8588 		movq	-376(%rbp), %rax
 4868      FEFFFF
 4869 3ac8 0FB600   		movzbl	(%rax), %eax
 4870 3acb 3C01     		cmpb	$1, %al
 4871 3acd 0F855901 		jne	.L283
 4871      0000
1082:main.c        **** 											dataFromCSV[inLineNum][3] -= reqAmo;
 4872              		.loc 1 1082 0
 4873 3ad3 8B8530FD 		movl	-720(%rbp), %eax
 4873      FFFF
 4874 3ad9 8B9530FD 		movl	-720(%rbp), %edx
 4874      FFFF
 4875 3adf 4863D2   		movslq	%edx, %rdx
 4876 3ae2 48C1E204 		salq	$4, %rdx
 4877 3ae6 4881C200 		addq	$dataFromCSV+12, %rdx
 4877      000000
 4878 3aed 8B0A     		movl	(%rdx), %ecx
 4879 3aef 8B9534FD 		movl	-716(%rbp), %edx
 4879      FFFF
 4880 3af5 29D1     		subl	%edx, %ecx
 4881 3af7 89CA     		movl	%ecx, %edx
 4882 3af9 4898     		cltq
 4883 3afb 48C1E004 		salq	$4, %rax
 4884 3aff 48050000 		addq	$dataFromCSV+12, %rax
 4884      0000
 4885 3b05 8910     		movl	%edx, (%rax)
1083:main.c        **** 
1084:main.c        **** 											/* Updating csv file in place */
1085:main.c        **** 											fPtr = fopen(filename,"w+"); // change flag according to need
 4886              		.loc 1 1085 0
 4887 3b07 488D8570 		leaq	-144(%rbp), %rax
 4887      FFFFFF
 4888 3b0e BE000000 		movl	$.LC143, %esi
 4888      00
 4889 3b13 4889C7   		movq	%rax, %rdi
 4890 3b16 E8000000 		call	fopen
 4890      00
 4891 3b1b 48898580 		movq	%rax, -384(%rbp)
 4891      FEFFFF
1086:main.c        **** 										    fprintf(fPtr,"%s","\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (
 4892              		.loc 1 1086 0
 4893 3b22 488B8580 		movq	-384(%rbp), %rax
 4893      FEFFFF
 4894 3b29 4889C1   		movq	%rax, %rcx
 4895 3b2c BA440000 		movl	$68, %edx
 4895      00
 4896 3b31 BE010000 		movl	$1, %esi
 4896      00
 4897 3b36 BF000000 		movl	$.LC144, %edi
 4897      00
 4898 3b3b E8000000 		call	fwrite
 4898      00
1087:main.c        **** 										    fprintf(fPtr,"\n");
 4899              		.loc 1 1087 0
 4900 3b40 488B8580 		movq	-384(%rbp), %rax
 4900      FEFFFF
 4901 3b47 4889C6   		movq	%rax, %rsi
 4902 3b4a BF0A0000 		movl	$10, %edi
 4902      00
 4903 3b4f E8000000 		call	fputc
 4903      00
 4904              	.LBB46:
1088:main.c        **** 										    for(int i=1;i <= numLines;i++) {
 4905              		.loc 1 1088 0
 4906 3b54 C78558FD 		movl	$1, -680(%rbp)
 4906      FFFF0100 
 4906      0000
 4907 3b5e E9A30000 		jmp	.L284
 4907      00
 4908              	.L290:
 4909              	.LBB47:
1089:main.c        **** 										        for(int k=0;k < 4;k++) {
 4910              		.loc 1 1089 0
 4911 3b63 C7855CFD 		movl	$0, -676(%rbp)
 4911      FFFF0000 
 4911      0000
 4912 3b6d E9800000 		jmp	.L285
 4912      00
 4913              	.L289:
1090:main.c        **** 										            fprintf(fPtr,"%d",dataFromCSV[i][k]);
 4914              		.loc 1 1090 0
 4915 3b72 8B855CFD 		movl	-676(%rbp), %eax
 4915      FFFF
 4916 3b78 4898     		cltq
 4917 3b7a 8B9558FD 		movl	-680(%rbp), %edx
 4917      FFFF
 4918 3b80 4863D2   		movslq	%edx, %rdx
 4919 3b83 48C1E202 		salq	$2, %rdx
 4920 3b87 4801D0   		addq	%rdx, %rax
 4921 3b8a 8B148500 		movl	dataFromCSV(,%rax,4), %edx
 4921      000000
 4922 3b91 488B8580 		movq	-384(%rbp), %rax
 4922      FEFFFF
 4923 3b98 BE000000 		movl	$.LC1, %esi
 4923      00
 4924 3b9d 4889C7   		movq	%rax, %rdi
 4925 3ba0 B8000000 		movl	$0, %eax
 4925      00
 4926 3ba5 E8000000 		call	fprintf
 4926      00
1091:main.c        **** 										            if(k == 3) {
 4927              		.loc 1 1091 0
 4928 3baa 83BD5CFD 		cmpl	$3, -676(%rbp)
 4928      FFFF03
 4929 3bb1 7524     		jne	.L286
1092:main.c        **** 										                if(i != numLines) fprintf(fPtr,"\n");
 4930              		.loc 1 1092 0
 4931 3bb3 8B050000 		movl	numLines(%rip), %eax
 4931      0000
 4932 3bb9 398558FD 		cmpl	%eax, -680(%rbp)
 4932      FFFF
 4933 3bbf 742A     		je	.L288
 4934              		.loc 1 1092 0 is_stmt 0 discriminator 1
 4935 3bc1 488B8580 		movq	-384(%rbp), %rax
 4935      FEFFFF
 4936 3bc8 4889C6   		movq	%rax, %rsi
 4937 3bcb BF0A0000 		movl	$10, %edi
 4937      00
 4938 3bd0 E8000000 		call	fputc
 4938      00
 4939 3bd5 EB14     		jmp	.L288
 4940              	.L286:
1093:main.c        **** 										            } 
1094:main.c        **** 										            else fprintf(fPtr,",");
 4941              		.loc 1 1094 0 is_stmt 1
 4942 3bd7 488B8580 		movq	-384(%rbp), %rax
 4942      FEFFFF
 4943 3bde 4889C6   		movq	%rax, %rsi
 4944 3be1 BF2C0000 		movl	$44, %edi
 4944      00
 4945 3be6 E8000000 		call	fputc
 4945      00
 4946              	.L288:
1089:main.c        **** 										            fprintf(fPtr,"%d",dataFromCSV[i][k]);
 4947              		.loc 1 1089 0
 4948 3beb 83855CFD 		addl	$1, -676(%rbp)
 4948      FFFF01
 4949              	.L285:
1089:main.c        **** 										            fprintf(fPtr,"%d",dataFromCSV[i][k]);
 4950              		.loc 1 1089 0 is_stmt 0 discriminator 1
 4951 3bf2 83BD5CFD 		cmpl	$3, -676(%rbp)
 4951      FFFF03
 4952 3bf9 0F8E73FF 		jle	.L289
 4952      FFFF
 4953              	.LBE47:
1088:main.c        **** 										        for(int k=0;k < 4;k++) {
 4954              		.loc 1 1088 0 is_stmt 1
 4955 3bff 838558FD 		addl	$1, -680(%rbp)
 4955      FFFF01
 4956              	.L284:
1088:main.c        **** 										        for(int k=0;k < 4;k++) {
 4957              		.loc 1 1088 0 is_stmt 0 discriminator 1
 4958 3c06 8B050000 		movl	numLines(%rip), %eax
 4958      0000
 4959 3c0c 398558FD 		cmpl	%eax, -680(%rbp)
 4959      FFFF
 4960 3c12 0F8E4BFF 		jle	.L290
 4960      FFFF
 4961              	.LBE46:
1095:main.c        **** 										        }    
1096:main.c        **** 										    }
1097:main.c        **** 										    fclose(fPtr);
 4962              		.loc 1 1097 0 is_stmt 1
 4963 3c18 488B8580 		movq	-384(%rbp), %rax
 4963      FEFFFF
 4964 3c1f 4889C7   		movq	%rax, %rdi
 4965 3c22 E8000000 		call	fclose
 4965      00
 4966              	.LBE33:
 4967 3c27 E9D90000 		jmp	.L291
 4967      00
 4968              	.L283:
 4969 3c2c E9D40000 		jmp	.L291
 4969      00
 4970              	.L260:
1098:main.c        **** 										}
1099:main.c        **** 									}
1100:main.c        **** 									else {
1101:main.c        **** 										*statusOnChan9 = 2;
 4971              		.loc 1 1101 0
 4972 3c31 488B8598 		movq	-360(%rbp), %rax
 4972      FEFFFF
 4973 3c38 C60002   		movb	$2, (%rax)
1102:main.c        **** 										flSleep(1000);
 4974              		.loc 1 1102 0
 4975 3c3b BFE80300 		movl	$1000, %edi
 4975      00
 4976 3c40 E8000000 		call	flSleep
 4976      00
1103:main.c        **** 										fStatus = flWriteChannel(handle,(uint8_t)9,length,statusOnChan9,&error);
 4977              		.loc 1 1103 0
 4978 3c45 8B957CFD 		movl	-644(%rbp), %edx
 4978      FFFF
 4979 3c4b 488B85A0 		movq	-608(%rbp), %rax
 4979      FDFFFF
 4980 3c52 488DB5A8 		leaq	-600(%rbp), %rsi
 4980      FDFFFF
 4981 3c59 488B8D98 		movq	-360(%rbp), %rcx
 4981      FEFFFF
 4982 3c60 4989F0   		movq	%rsi, %r8
 4983 3c63 BE090000 		movl	$9, %esi
 4983      00
 4984 3c68 4889C7   		movq	%rax, %rdi
 4985 3c6b E8000000 		call	flWriteChannel
 4985      00
 4986 3c70 89853CFD 		movl	%eax, -708(%rbp)
 4986      FFFF
1104:main.c        **** 										CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 4987              		.loc 1 1104 0
 4988 3c76 83BD3CFD 		cmpl	$0, -708(%rbp)
 4988      FFFF00
 4989 3c7d 740C     		je	.L293
 4990              		.loc 1 1104 0 is_stmt 0 discriminator 1
 4991 3c7f C78538FD 		movl	$1, -712(%rbp)
 4991      FFFF0100 
 4991      0000
 4992 3c89 EB7F     		jmp	.L292
 4993              	.L293:
 4994              	.LBB48:
1105:main.c        **** 										for(int i=10;i <= 17;i++) {
 4995              		.loc 1 1105 0 is_stmt 1
 4996 3c8b C78560FD 		movl	$10, -672(%rbp)
 4996      FFFF0A00 
 4996      0000
 4997 3c95 EB65     		jmp	.L294
 4998              	.L296:
 4999              	.LBB49:
1106:main.c        **** 											uint8_t tempSto = 0;
 5000              		.loc 1 1106 0
 5001 3c97 C68590FD 		movb	$0, -624(%rbp)
 5001      FFFF00
1107:main.c        **** 											flSleep(1000);
 5002              		.loc 1 1107 0
 5003 3c9e BFE80300 		movl	$1000, %edi
 5003      00
 5004 3ca3 E8000000 		call	flSleep
 5004      00
1108:main.c        **** 											fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 5005              		.loc 1 1108 0
 5006 3ca8 8B957CFD 		movl	-644(%rbp), %edx
 5006      FFFF
 5007 3cae 8B8560FD 		movl	-672(%rbp), %eax
 5007      FFFF
 5008 3cb4 0FB6F0   		movzbl	%al, %esi
 5009 3cb7 488B85A0 		movq	-608(%rbp), %rax
 5009      FDFFFF
 5010 3cbe 488DBDA8 		leaq	-600(%rbp), %rdi
 5010      FDFFFF
 5011 3cc5 488D8D90 		leaq	-624(%rbp), %rcx
 5011      FDFFFF
 5012 3ccc 4989F8   		movq	%rdi, %r8
 5013 3ccf 4889C7   		movq	%rax, %rdi
 5014 3cd2 E8000000 		call	flWriteChannel
 5014      00
 5015 3cd7 89853CFD 		movl	%eax, -708(%rbp)
 5015      FFFF
1109:main.c        **** 											CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5016              		.loc 1 1109 0
 5017 3cdd 83BD3CFD 		cmpl	$0, -708(%rbp)
 5017      FFFF00
 5018 3ce4 740F     		je	.L295
 5019              		.loc 1 1109 0 is_stmt 0 discriminator 1
 5020 3ce6 C78538FD 		movl	$1, -712(%rbp)
 5020      FFFF0100 
 5020      0000
 5021              	.LBE49:
 5022              	.LBE48:
 5023 3cf0 E9790400 		jmp	.L240
 5023      00
 5024              	.L295:
 5025              	.LBB50:
1105:main.c        **** 											uint8_t tempSto = 0;
 5026              		.loc 1 1105 0 is_stmt 1
 5027 3cf5 838560FD 		addl	$1, -672(%rbp)
 5027      FFFF01
 5028              	.L294:
1105:main.c        **** 											uint8_t tempSto = 0;
 5029              		.loc 1 1105 0 is_stmt 0 discriminator 1
 5030 3cfc 83BD60FD 		cmpl	$17, -672(%rbp)
 5030      FFFF11
 5031 3d03 7E92     		jle	.L296
 5032              	.L291:
 5033              	.LBE50:
 5034              	.LBE32:
 5035 3d05 E9660400 		jmp	.L230
 5035      00
 5036              	.L292:
1001:main.c        **** 								printf("data in channel %u = %u \n", i ,*readFromChannel_i);
 5037              		.loc 1 1001 0 is_stmt 1
 5038 3d0a E9700400 		jmp	.L228
 5038      00
 5039              	.L259:
 5040              	.LBB51:
1110:main.c        **** 										}
1111:main.c        **** 									}
1112:main.c        **** 								}
1113:main.c        **** 								else {
1114:main.c        **** 									printf("User has admin privileges \n");
 5041              		.loc 1 1114 0
 5042 3d0f BF000000 		movl	$.LC145, %edi
 5042      00
 5043 3d14 E8000000 		call	puts
 5043      00
1115:main.c        **** 									*statusOnChan9 = 3;
 5044              		.loc 1 1115 0
 5045 3d19 488B8598 		movq	-360(%rbp), %rax
 5045      FEFFFF
 5046 3d20 C60003   		movb	$3, (%rax)
1116:main.c        **** 									flSleep(1000);
 5047              		.loc 1 1116 0
 5048 3d23 BFE80300 		movl	$1000, %edi
 5048      00
 5049 3d28 E8000000 		call	flSleep
 5049      00
1117:main.c        **** 									fStatus = flWriteChannel(handle,(uint8_t)9,length,statusOnChan9,&error);
 5050              		.loc 1 1117 0
 5051 3d2d 8B957CFD 		movl	-644(%rbp), %edx
 5051      FFFF
 5052 3d33 488B85A0 		movq	-608(%rbp), %rax
 5052      FDFFFF
 5053 3d3a 488DB5A8 		leaq	-600(%rbp), %rsi
 5053      FDFFFF
 5054 3d41 488B8D98 		movq	-360(%rbp), %rcx
 5054      FEFFFF
 5055 3d48 4989F0   		movq	%rsi, %r8
 5056 3d4b BE090000 		movl	$9, %esi
 5056      00
 5057 3d50 4889C7   		movq	%rax, %rdi
 5058 3d53 E8000000 		call	flWriteChannel
 5058      00
 5059 3d58 89853CFD 		movl	%eax, -708(%rbp)
 5059      FFFF
1118:main.c        **** 									CHECK_STATUS(fStatus, FLP_LIBERR,cleanup);
 5060              		.loc 1 1118 0
 5061 3d5e 83BD3CFD 		cmpl	$0, -708(%rbp)
 5061      FFFF00
 5062 3d65 740F     		je	.L298
 5063              		.loc 1 1118 0 is_stmt 0 discriminator 1
 5064 3d67 C78538FD 		movl	$1, -712(%rbp)
 5064      FFFF0100 
 5064      0000
 5065 3d71 E9F80300 		jmp	.L240
 5065      00
 5066              	.L298:
 5067              	.LBB52:
1119:main.c        **** 									uint32_t befEncSen[2];
1120:main.c        **** 									for(int i=0;i<2;i++) befEncSen[i] = 0;
 5068              		.loc 1 1120 0 is_stmt 1
 5069 3d76 C78564FD 		movl	$0, -668(%rbp)
 5069      FFFF0000 
 5069      0000
 5070 3d80 EB1A     		jmp	.L300
 5071              	.L301:
 5072              		.loc 1 1120 0 is_stmt 0 discriminator 2
 5073 3d82 8B8564FD 		movl	-668(%rbp), %eax
 5073      FFFF
 5074 3d88 4898     		cltq
 5075 3d8a C7848590 		movl	$0, -624(%rbp,%rax,4)
 5075      FDFFFF00 
 5075      000000
 5076 3d95 838564FD 		addl	$1, -668(%rbp)
 5076      FFFF01
 5077              	.L300:
 5078              		.loc 1 1120 0 discriminator 1
 5079 3d9c 83BD64FD 		cmpl	$1, -668(%rbp)
 5079      FFFF01
 5080 3da3 7EDD     		jle	.L301
 5081              	.LBE52:
 5082              	.LBB53:
1121:main.c        **** 									for(uint32_t i=0;i <= 31;i += 8) {
 5083              		.loc 1 1121 0 is_stmt 1
 5084 3da5 C78568FD 		movl	$0, -664(%rbp)
 5084      FFFF0000 
 5084      0000
 5085 3daf E9AC0000 		jmp	.L302
 5085      00
 5086              	.L307:
1122:main.c        **** 										if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 5087              		.loc 1 1122 0
 5088 3db4 83BD68FD 		cmpl	$0, -664(%rbp)
 5088      FFFF00
 5089 3dbb 7523     		jne	.L303
 5090              		.loc 1 1122 0 is_stmt 0 discriminator 1
 5091 3dbd 8B9590FD 		movl	-624(%rbp), %edx
 5091      FFFF
 5092 3dc3 0FB6B50C 		movzbl	-756(%rbp), %esi
 5092      FDFFFF
 5093 3dca 8B8568FD 		movl	-664(%rbp), %eax
 5093      FFFF
 5094 3dd0 89C1     		movl	%eax, %ecx
 5095 3dd2 D3E6     		sall	%cl, %esi
 5096 3dd4 89F0     		movl	%esi, %eax
 5097 3dd6 01D0     		addl	%edx, %eax
 5098 3dd8 898590FD 		movl	%eax, -624(%rbp)
 5098      FFFF
 5099 3dde EB79     		jmp	.L304
 5100              	.L303:
1123:main.c        **** 										else if(i == 8) befEncSen[0] += ((1 << i)*((uint32_t)num_500));
 5101              		.loc 1 1123 0 is_stmt 1
 5102 3de0 83BD68FD 		cmpl	$8, -664(%rbp)
 5102      FFFF08
 5103 3de7 7523     		jne	.L305
 5104              		.loc 1 1123 0 is_stmt 0 discriminator 1
 5105 3de9 8B9590FD 		movl	-624(%rbp), %edx
 5105      FFFF
 5106 3def 0FB6B50D 		movzbl	-755(%rbp), %esi
 5106      FDFFFF
 5107 3df6 8B8568FD 		movl	-664(%rbp), %eax
 5107      FFFF
 5108 3dfc 89C1     		movl	%eax, %ecx
 5109 3dfe D3E6     		sall	%cl, %esi
 5110 3e00 89F0     		movl	%esi, %eax
 5111 3e02 01D0     		addl	%edx, %eax
 5112 3e04 898590FD 		movl	%eax, -624(%rbp)
 5112      FFFF
 5113 3e0a EB4D     		jmp	.L304
 5114              	.L305:
1124:main.c        **** 										else if(i == 16) befEncSen[0] += ((1 << i)*((uint32_t)num_1000));
 5115              		.loc 1 1124 0 is_stmt 1
 5116 3e0c 83BD68FD 		cmpl	$16, -664(%rbp)
 5116      FFFF10
 5117 3e13 7523     		jne	.L306
 5118              		.loc 1 1124 0 is_stmt 0 discriminator 1
 5119 3e15 8B9590FD 		movl	-624(%rbp), %edx
 5119      FFFF
 5120 3e1b 0FB6B50E 		movzbl	-754(%rbp), %esi
 5120      FDFFFF
 5121 3e22 8B8568FD 		movl	-664(%rbp), %eax
 5121      FFFF
 5122 3e28 89C1     		movl	%eax, %ecx
 5123 3e2a D3E6     		sall	%cl, %esi
 5124 3e2c 89F0     		movl	%esi, %eax
 5125 3e2e 01D0     		addl	%edx, %eax
 5126 3e30 898590FD 		movl	%eax, -624(%rbp)
 5126      FFFF
 5127 3e36 EB21     		jmp	.L304
 5128              	.L306:
1125:main.c        **** 										else befEncSen[0] += ((1 << i)*((uint32_t)num_2000));
 5129              		.loc 1 1125 0 is_stmt 1
 5130 3e38 8B9590FD 		movl	-624(%rbp), %edx
 5130      FFFF
 5131 3e3e 0FB6B50F 		movzbl	-753(%rbp), %esi
 5131      FDFFFF
 5132 3e45 8B8568FD 		movl	-664(%rbp), %eax
 5132      FFFF
 5133 3e4b 89C1     		movl	%eax, %ecx
 5134 3e4d D3E6     		sall	%cl, %esi
 5135 3e4f 89F0     		movl	%esi, %eax
 5136 3e51 01D0     		addl	%edx, %eax
 5137 3e53 898590FD 		movl	%eax, -624(%rbp)
 5137      FFFF
 5138              	.L304:
1121:main.c        **** 										if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 5139              		.loc 1 1121 0
 5140 3e59 838568FD 		addl	$8, -664(%rbp)
 5140      FFFF08
 5141              	.L302:
1121:main.c        **** 										if(i == 0) befEncSen[0] += ((1 << i)*((uint32_t)num_100));
 5142              		.loc 1 1121 0 is_stmt 0 discriminator 1
 5143 3e60 83BD68FD 		cmpl	$31, -664(%rbp)
 5143      FFFF1F
 5144 3e67 0F8647FF 		jbe	.L307
 5144      FFFF
 5145              	.LBE53:
1126:main.c        **** 									}	
1127:main.c        **** 									encrypt64(befEncSen);
 5146              		.loc 1 1127 0 is_stmt 1
 5147 3e6d 488D8590 		leaq	-624(%rbp), %rax
 5147      FDFFFF
 5148 3e74 4889C7   		movq	%rax, %rdi
 5149 3e77 E8000000 		call	encrypt64
 5149      00
 5150              	.LBB54:
1128:main.c        **** 									for(uint8_t i=10;i <= 13;i++) {
 5151              		.loc 1 1128 0
 5152 3e7c C68515FD 		movb	$10, -747(%rbp)
 5152      FFFF0A
 5153 3e83 E9EF0000 		jmp	.L308
 5153      00
 5154              	.L313:
 5155              	.LBB55:
1129:main.c        **** 										uint8_t tempSto = 0;
 5156              		.loc 1 1129 0
 5157 3e88 C68534FD 		movb	$0, -716(%rbp)
 5157      FFFF00
 5158              	.LBB56:
1130:main.c        **** 										for(uint8_t j=0;j <= 7;j++) {
 5159              		.loc 1 1130 0
 5160 3e8f C68516FD 		movb	$0, -746(%rbp)
 5160      FFFF00
 5161 3e96 EB71     		jmp	.L309
 5162              	.L311:
 5163              	.LBB57:
1131:main.c        **** 											uint8_t temp = j + (i-10)*8;
 5164              		.loc 1 1131 0
 5165 3e98 0FB68515 		movzbl	-747(%rbp), %eax
 5165      FDFFFF
 5166 3e9f 83E80A   		subl	$10, %eax
 5167 3ea2 8D14C500 		leal	0(,%rax,8), %edx
 5167      000000
 5168 3ea9 0FB68516 		movzbl	-746(%rbp), %eax
 5168      FDFFFF
 5169 3eb0 01D0     		addl	%edx, %eax
 5170 3eb2 88851EFD 		movb	%al, -738(%rbp)
 5170      FFFF
1132:main.c        **** 											if( (befEncSen[0] & (1 << temp)) != 0) {
 5171              		.loc 1 1132 0
 5172 3eb8 8B9590FD 		movl	-624(%rbp), %edx
 5172      FFFF
 5173 3ebe 0FB6851E 		movzbl	-738(%rbp), %eax
 5173      FDFFFF
 5174 3ec5 BE010000 		movl	$1, %esi
 5174      00
 5175 3eca 89C1     		movl	%eax, %ecx
 5176 3ecc D3E6     		sall	%cl, %esi
 5177 3ece 89F0     		movl	%esi, %eax
 5178 3ed0 21D0     		andl	%edx, %eax
 5179 3ed2 85C0     		testl	%eax, %eax
 5180 3ed4 7423     		je	.L310
1133:main.c        **** 												tempSto += (1 << j);
 5181              		.loc 1 1133 0
 5182 3ed6 0FB68516 		movzbl	-746(%rbp), %eax
 5182      FDFFFF
 5183 3edd BA010000 		movl	$1, %edx
 5183      00
 5184 3ee2 89C1     		movl	%eax, %ecx
 5185 3ee4 D3E2     		sall	%cl, %edx
 5186 3ee6 89D0     		movl	%edx, %eax
 5187 3ee8 89C2     		movl	%eax, %edx
 5188 3eea 0FB68534 		movzbl	-716(%rbp), %eax
 5188      FDFFFF
 5189 3ef1 01D0     		addl	%edx, %eax
 5190 3ef3 888534FD 		movb	%al, -716(%rbp)
 5190      FFFF
 5191              	.L310:
 5192              	.LBE57:
1130:main.c        **** 											uint8_t temp = j + (i-10)*8;
 5193              		.loc 1 1130 0
 5194 3ef9 0FB68516 		movzbl	-746(%rbp), %eax
 5194      FDFFFF
 5195 3f00 83C001   		addl	$1, %eax
 5196 3f03 888516FD 		movb	%al, -746(%rbp)
 5196      FFFF
 5197              	.L309:
1130:main.c        **** 											uint8_t temp = j + (i-10)*8;
 5198              		.loc 1 1130 0 is_stmt 0 discriminator 1
 5199 3f09 80BD16FD 		cmpb	$7, -746(%rbp)
 5199      FFFF07
 5200 3f10 7686     		jbe	.L311
 5201              	.LBE56:
1134:main.c        **** 											}
1135:main.c        **** 										}
1136:main.c        **** 										flSleep(1000);
 5202              		.loc 1 1136 0 is_stmt 1
 5203 3f12 BFE80300 		movl	$1000, %edi
 5203      00
 5204 3f17 E8000000 		call	flSleep
 5204      00
1137:main.c        **** 										fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 5205              		.loc 1 1137 0
 5206 3f1c 8B957CFD 		movl	-644(%rbp), %edx
 5206      FFFF
 5207 3f22 0FB6B515 		movzbl	-747(%rbp), %esi
 5207      FDFFFF
 5208 3f29 488B85A0 		movq	-608(%rbp), %rax
 5208      FDFFFF
 5209 3f30 488DBDA8 		leaq	-600(%rbp), %rdi
 5209      FDFFFF
 5210 3f37 488D8D34 		leaq	-716(%rbp), %rcx
 5210      FDFFFF
 5211 3f3e 4989F8   		movq	%rdi, %r8
 5212 3f41 4889C7   		movq	%rax, %rdi
 5213 3f44 E8000000 		call	flWriteChannel
 5213      00
 5214 3f49 89853CFD 		movl	%eax, -708(%rbp)
 5214      FFFF
1138:main.c        **** 										CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5215              		.loc 1 1138 0
 5216 3f4f 83BD3CFD 		cmpl	$0, -708(%rbp)
 5216      FFFF00
 5217 3f56 740F     		je	.L312
 5218              		.loc 1 1138 0 is_stmt 0 discriminator 1
 5219 3f58 C78538FD 		movl	$1, -712(%rbp)
 5219      FFFF0100 
 5219      0000
 5220              	.LBE55:
 5221              	.LBE54:
1118:main.c        **** 									uint32_t befEncSen[2];
 5222              		.loc 1 1118 0 is_stmt 1 discriminator 1
 5223 3f62 E9070200 		jmp	.L240
 5223      00
 5224              	.L312:
 5225              	.LBB58:
1128:main.c        **** 										uint8_t tempSto = 0;
 5226              		.loc 1 1128 0
 5227 3f67 0FB68515 		movzbl	-747(%rbp), %eax
 5227      FDFFFF
 5228 3f6e 83C001   		addl	$1, %eax
 5229 3f71 888515FD 		movb	%al, -747(%rbp)
 5229      FFFF
 5230              	.L308:
1128:main.c        **** 										uint8_t tempSto = 0;
 5231              		.loc 1 1128 0 is_stmt 0 discriminator 1
 5232 3f77 80BD15FD 		cmpb	$13, -747(%rbp)
 5232      FFFF0D
 5233 3f7e 0F8604FF 		jbe	.L313
 5233      FFFF
 5234              	.LBE58:
 5235              	.LBB59:
1139:main.c        **** 									}
1140:main.c        **** 
1141:main.c        **** 									for(uint8_t i=14;i <= 17;i++) {
 5236              		.loc 1 1141 0 is_stmt 1
 5237 3f84 C68517FD 		movb	$14, -745(%rbp)
 5237      FFFF0E
 5238 3f8b E9EF0000 		jmp	.L314
 5238      00
 5239              	.L319:
 5240              	.LBB60:
1142:main.c        **** 										uint8_t tempSto = 0;
 5241              		.loc 1 1142 0
 5242 3f90 C68534FD 		movb	$0, -716(%rbp)
 5242      FFFF00
 5243              	.LBB61:
1143:main.c        **** 										for(uint8_t j=0;j <= 7;j++) {
 5244              		.loc 1 1143 0
 5245 3f97 C68518FD 		movb	$0, -744(%rbp)
 5245      FFFF00
 5246 3f9e EB71     		jmp	.L315
 5247              	.L317:
 5248              	.LBB62:
1144:main.c        **** 											uint8_t temp = j + (i-14)*8;
 5249              		.loc 1 1144 0
 5250 3fa0 0FB68517 		movzbl	-745(%rbp), %eax
 5250      FDFFFF
 5251 3fa7 83E80E   		subl	$14, %eax
 5252 3faa 8D14C500 		leal	0(,%rax,8), %edx
 5252      000000
 5253 3fb1 0FB68518 		movzbl	-744(%rbp), %eax
 5253      FDFFFF
 5254 3fb8 01D0     		addl	%edx, %eax
 5255 3fba 88851FFD 		movb	%al, -737(%rbp)
 5255      FFFF
1145:main.c        **** 											if( (befEncSen[1] & (1 << temp)) != 0) {
 5256              		.loc 1 1145 0
 5257 3fc0 8B9594FD 		movl	-620(%rbp), %edx
 5257      FFFF
 5258 3fc6 0FB6851F 		movzbl	-737(%rbp), %eax
 5258      FDFFFF
 5259 3fcd BE010000 		movl	$1, %esi
 5259      00
 5260 3fd2 89C1     		movl	%eax, %ecx
 5261 3fd4 D3E6     		sall	%cl, %esi
 5262 3fd6 89F0     		movl	%esi, %eax
 5263 3fd8 21D0     		andl	%edx, %eax
 5264 3fda 85C0     		testl	%eax, %eax
 5265 3fdc 7423     		je	.L316
1146:main.c        **** 												tempSto += (1 << j);
 5266              		.loc 1 1146 0
 5267 3fde 0FB68518 		movzbl	-744(%rbp), %eax
 5267      FDFFFF
 5268 3fe5 BA010000 		movl	$1, %edx
 5268      00
 5269 3fea 89C1     		movl	%eax, %ecx
 5270 3fec D3E2     		sall	%cl, %edx
 5271 3fee 89D0     		movl	%edx, %eax
 5272 3ff0 89C2     		movl	%eax, %edx
 5273 3ff2 0FB68534 		movzbl	-716(%rbp), %eax
 5273      FDFFFF
 5274 3ff9 01D0     		addl	%edx, %eax
 5275 3ffb 888534FD 		movb	%al, -716(%rbp)
 5275      FFFF
 5276              	.L316:
 5277              	.LBE62:
1143:main.c        **** 											uint8_t temp = j + (i-14)*8;
 5278              		.loc 1 1143 0
 5279 4001 0FB68518 		movzbl	-744(%rbp), %eax
 5279      FDFFFF
 5280 4008 83C001   		addl	$1, %eax
 5281 400b 888518FD 		movb	%al, -744(%rbp)
 5281      FFFF
 5282              	.L315:
1143:main.c        **** 											uint8_t temp = j + (i-14)*8;
 5283              		.loc 1 1143 0 is_stmt 0 discriminator 1
 5284 4011 80BD18FD 		cmpb	$7, -744(%rbp)
 5284      FFFF07
 5285 4018 7686     		jbe	.L317
 5286              	.LBE61:
1147:main.c        **** 											}
1148:main.c        **** 										}
1149:main.c        **** 										flSleep(1000);
 5287              		.loc 1 1149 0 is_stmt 1
 5288 401a BFE80300 		movl	$1000, %edi
 5288      00
 5289 401f E8000000 		call	flSleep
 5289      00
1150:main.c        **** 										fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 5290              		.loc 1 1150 0
 5291 4024 8B957CFD 		movl	-644(%rbp), %edx
 5291      FFFF
 5292 402a 0FB6B517 		movzbl	-745(%rbp), %esi
 5292      FDFFFF
 5293 4031 488B85A0 		movq	-608(%rbp), %rax
 5293      FDFFFF
 5294 4038 488DBDA8 		leaq	-600(%rbp), %rdi
 5294      FDFFFF
 5295 403f 488D8D34 		leaq	-716(%rbp), %rcx
 5295      FDFFFF
 5296 4046 4989F8   		movq	%rdi, %r8
 5297 4049 4889C7   		movq	%rax, %rdi
 5298 404c E8000000 		call	flWriteChannel
 5298      00
 5299 4051 89853CFD 		movl	%eax, -708(%rbp)
 5299      FFFF
1151:main.c        **** 										CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5300              		.loc 1 1151 0
 5301 4057 83BD3CFD 		cmpl	$0, -708(%rbp)
 5301      FFFF00
 5302 405e 740F     		je	.L318
 5303              		.loc 1 1151 0 is_stmt 0 discriminator 1
 5304 4060 C78538FD 		movl	$1, -712(%rbp)
 5304      FFFF0100 
 5304      0000
 5305              	.LBE60:
 5306              	.LBE59:
1118:main.c        **** 									uint32_t befEncSen[2];
 5307              		.loc 1 1118 0 is_stmt 1 discriminator 1
 5308 406a E9FF0000 		jmp	.L240
 5308      00
 5309              	.L318:
 5310              	.LBB63:
1141:main.c        **** 										uint8_t tempSto = 0;
 5311              		.loc 1 1141 0
 5312 406f 0FB68517 		movzbl	-745(%rbp), %eax
 5312      FDFFFF
 5313 4076 83C001   		addl	$1, %eax
 5314 4079 888517FD 		movb	%al, -745(%rbp)
 5314      FFFF
 5315              	.L314:
1141:main.c        **** 										uint8_t tempSto = 0;
 5316              		.loc 1 1141 0 is_stmt 0 discriminator 1
 5317 407f 80BD17FD 		cmpb	$17, -745(%rbp)
 5317      FFFF11
 5318 4086 0F8604FF 		jbe	.L319
 5318      FFFF
 5319              	.LBE63:
 5320 408c E9DB0000 		jmp	.L320
 5320      00
 5321              	.L258:
 5322              	.LBE51:
1152:main.c        **** 									}
1153:main.c        **** 								}
1154:main.c        **** 							}
1155:main.c        **** 							else {
1156:main.c        **** 								printf("Invalid user \n");
 5323              		.loc 1 1156 0 is_stmt 1
 5324 4091 BF000000 		movl	$.LC146, %edi
 5324      00
 5325 4096 E8000000 		call	puts
 5325      00
1157:main.c        **** 								*statusOnChan9 = 4;
 5326              		.loc 1 1157 0
 5327 409b 488B8598 		movq	-360(%rbp), %rax
 5327      FEFFFF
 5328 40a2 C60004   		movb	$4, (%rax)
1158:main.c        **** 								flSleep(1000);
 5329              		.loc 1 1158 0
 5330 40a5 BFE80300 		movl	$1000, %edi
 5330      00
 5331 40aa E8000000 		call	flSleep
 5331      00
1159:main.c        **** 								fStatus = flWriteChannel(handle,(uint8_t)9,length,statusOnChan9,&error);
 5332              		.loc 1 1159 0
 5333 40af 8B957CFD 		movl	-644(%rbp), %edx
 5333      FFFF
 5334 40b5 488B85A0 		movq	-608(%rbp), %rax
 5334      FDFFFF
 5335 40bc 488DB5A8 		leaq	-600(%rbp), %rsi
 5335      FDFFFF
 5336 40c3 488B8D98 		movq	-360(%rbp), %rcx
 5336      FEFFFF
 5337 40ca 4989F0   		movq	%rsi, %r8
 5338 40cd BE090000 		movl	$9, %esi
 5338      00
 5339 40d2 4889C7   		movq	%rax, %rdi
 5340 40d5 E8000000 		call	flWriteChannel
 5340      00
 5341 40da 89853CFD 		movl	%eax, -708(%rbp)
 5341      FFFF
1160:main.c        **** 								CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5342              		.loc 1 1160 0
 5343 40e0 83BD3CFD 		cmpl	$0, -708(%rbp)
 5343      FFFF00
 5344 40e7 740C     		je	.L321
 5345              		.loc 1 1160 0 is_stmt 0 discriminator 1
 5346 40e9 C78538FD 		movl	$1, -712(%rbp)
 5346      FFFF0100 
 5346      0000
 5347 40f3 EB79     		jmp	.L240
 5348              	.L321:
 5349              	.LBB64:
1161:main.c        **** 								for(int i=10;i <= 17;i++) {
 5350              		.loc 1 1161 0 is_stmt 1
 5351 40f5 C7856CFD 		movl	$10, -660(%rbp)
 5351      FFFF0A00 
 5351      0000
 5352 40ff EB62     		jmp	.L322
 5353              	.L324:
 5354              	.LBB65:
1162:main.c        **** 									uint8_t tempSto = 0;
 5355              		.loc 1 1162 0
 5356 4101 C68590FD 		movb	$0, -624(%rbp)
 5356      FFFF00
1163:main.c        **** 									flSleep(1000);
 5357              		.loc 1 1163 0
 5358 4108 BFE80300 		movl	$1000, %edi
 5358      00
 5359 410d E8000000 		call	flSleep
 5359      00
1164:main.c        **** 									fStatus = flWriteChannel(handle,(uint8_t)i,length,&tempSto,&error);
 5360              		.loc 1 1164 0
 5361 4112 8B957CFD 		movl	-644(%rbp), %edx
 5361      FFFF
 5362 4118 8B856CFD 		movl	-660(%rbp), %eax
 5362      FFFF
 5363 411e 0FB6F0   		movzbl	%al, %esi
 5364 4121 488B85A0 		movq	-608(%rbp), %rax
 5364      FDFFFF
 5365 4128 488DBDA8 		leaq	-600(%rbp), %rdi
 5365      FDFFFF
 5366 412f 488D8D90 		leaq	-624(%rbp), %rcx
 5366      FDFFFF
 5367 4136 4989F8   		movq	%rdi, %r8
 5368 4139 4889C7   		movq	%rax, %rdi
 5369 413c E8000000 		call	flWriteChannel
 5369      00
 5370 4141 89853CFD 		movl	%eax, -708(%rbp)
 5370      FFFF
1165:main.c        **** 									CHECK_STATUS(fStatus, FLP_LIBERR, cleanup);
 5371              		.loc 1 1165 0
 5372 4147 83BD3CFD 		cmpl	$0, -708(%rbp)
 5372      FFFF00
 5373 414e 740C     		je	.L323
 5374              		.loc 1 1165 0 is_stmt 0 discriminator 1
 5375 4150 C78538FD 		movl	$1, -712(%rbp)
 5375      FFFF0100 
 5375      0000
 5376              	.LBE65:
 5377              	.LBE64:
1001:main.c        **** 								printf("data in channel %u = %u \n", i ,*readFromChannel_i);
 5378              		.loc 1 1001 0 is_stmt 1 discriminator 1
 5379 415a EB23     		jmp	.L228
 5380              	.L323:
 5381              	.LBB66:
1161:main.c        **** 									uint8_t tempSto = 0;
 5382              		.loc 1 1161 0
 5383 415c 83856CFD 		addl	$1, -660(%rbp)
 5383      FFFF01
 5384              	.L322:
1161:main.c        **** 									uint8_t tempSto = 0;
 5385              		.loc 1 1161 0 is_stmt 0 discriminator 1
 5386 4163 83BD6CFD 		cmpl	$17, -660(%rbp)
 5386      FFFF11
 5387 416a 7E95     		jle	.L324
 5388              	.L320:
 5389              	.LBE66:
 5390 416c EB02     		jmp	.L230
 5391              	.L240:
 5392              	.LBE26:
 5393              	.LBE25:
 5394              	.LBE24:
 975:main.c        **** 					printf("data in channel 0 = %u \n", *readFromChannelZero);
 5395              		.loc 1 975 0 is_stmt 1 discriminator 1
 5396 416e EB69     		jmp	.L152
 5397              	.L230:
 5398              	.LBB67:
1166:main.c        **** 								}
1167:main.c        **** 							}
1168:main.c        **** 						}
1169:main.c        **** 					}
1170:main.c        **** 					flSleep(1000);
 5399              		.loc 1 1170 0
 5400 4170 BFE80300 		movl	$1000, %edi
 5400      00
 5401 4175 E8000000 		call	flSleep
 5401      00
 5402              	.LBE67:
1171:main.c        **** 				}			
 5403              		.loc 1 1171 0
 5404 417a E902F0FF 		jmp	.L325
 5404      FF
 5405              	.L228:
 5406              	.LBE23:
 947:main.c        **** 			fStatus = flIsFPGARunning(handle, &isRunning, &error);
 5407              		.loc 1 947 0 discriminator 1
 5408 417f EB58     		jmp	.L152
 5409              	.L221:
1172:main.c        **** 
1173:main.c        **** 			} else {
1174:main.c        **** 				fprintf(stderr, "The FPGALink device at %s is not ready to talk - did you forget --program?\n",
 5410              		.loc 1 1174 0
 5411 4181 488B0500 		movq	stderr(%rip), %rax
 5411      000000
 5412 4188 488B9560 		movq	-416(%rbp), %rdx
 5412      FEFFFF
 5413 418f BE000000 		movl	$.LC129, %esi
 5413      00
 5414 4194 4889C7   		movq	%rax, %rdi
 5415 4197 B8000000 		movl	$0, %eax
 5415      00
 5416 419c E8000000 		call	fprintf
 5416      00
1175:main.c        **** 				FAIL(FLP_ARGS, cleanup);
 5417              		.loc 1 1175 0
 5418 41a1 C78538FD 		movl	$12, -712(%rbp)
 5418      FFFF0C00 
 5418      0000
 5419 41ab 90       		nop
 5420 41ac EB2B     		jmp	.L152
 5421              	.L217:
 5422              	.LBE22:
1176:main.c        **** 			}
1177:main.c        **** 		} else {
1178:main.c        **** 			fprintf(stderr, "Action requested but device at %s does not support CommFPGA\n", vp);
 5423              		.loc 1 1178 0
 5424 41ae 488B0500 		movq	stderr(%rip), %rax
 5424      000000
 5425 41b5 488B9560 		movq	-416(%rbp), %rdx
 5425      FEFFFF
 5426 41bc BE000000 		movl	$.LC130, %esi
 5426      00
 5427 41c1 4889C7   		movq	%rax, %rdi
 5428 41c4 B8000000 		movl	$0, %eax
 5428      00
 5429 41c9 E8000000 		call	fprintf
 5429      00
1179:main.c        **** 			FAIL(FLP_ARGS, cleanup);
 5430              		.loc 1 1179 0
 5431 41ce C78538FD 		movl	$12, -712(%rbp)
 5431      FFFF0C00 
 5431      0000
 5432 41d8 90       		nop
 5433              	.L152:
1180:main.c        **** 		}
1181:main.c        **** 	}
1182:main.c        **** 	cleanup:
1183:main.c        **** 	free((void*)line);
 5434              		.loc 1 1183 0
 5435 41d9 488B85C0 		movq	-576(%rbp), %rax
 5435      FDFFFF
 5436 41e0 4889C7   		movq	%rax, %rdi
 5437 41e3 E8000000 		call	free
 5437      00
1184:main.c        **** 	flClose(handle);
 5438              		.loc 1 1184 0
 5439 41e8 488B85A0 		movq	-608(%rbp), %rax
 5439      FDFFFF
 5440 41ef 4889C7   		movq	%rax, %rdi
 5441 41f2 E8000000 		call	flClose
 5441      00
1185:main.c        **** 	if ( error ) {
 5442              		.loc 1 1185 0
 5443 41f7 488B85A8 		movq	-600(%rbp), %rax
 5443      FDFFFF
 5444 41fe 4885C0   		testq	%rax, %rax
 5445 4201 742F     		je	.L326
1186:main.c        **** 		fprintf(stderr, "%s\n", error);
 5446              		.loc 1 1186 0
 5447 4203 488B95A8 		movq	-600(%rbp), %rdx
 5447      FDFFFF
 5448 420a 488B0500 		movq	stderr(%rip), %rax
 5448      000000
 5449 4211 BE000000 		movl	$.LC147, %esi
 5449      00
 5450 4216 4889C7   		movq	%rax, %rdi
 5451 4219 B8000000 		movl	$0, %eax
 5451      00
 5452 421e E8000000 		call	fprintf
 5452      00
1187:main.c        **** 		flFreeError(error);
 5453              		.loc 1 1187 0
 5454 4223 488B85A8 		movq	-600(%rbp), %rax
 5454      FDFFFF
 5455 422a 4889C7   		movq	%rax, %rdi
 5456 422d E8000000 		call	flFreeError
 5456      00
 5457              	.L326:
1188:main.c        **** 	}
1189:main.c        **** 	return retVal;
 5458              		.loc 1 1189 0
 5459 4232 8B8538FD 		movl	-712(%rbp), %eax
 5459      FFFF
 5460              	.L327:
1190:main.c        **** }...
 5461              		.loc 1 1190 0
 5462 4238 488B5DE8 		movq	-24(%rbp), %rbx
 5463 423c 6448331C 		xorq	%fs:40, %rbx
 5463      25280000 
 5463      00
 5464 4245 7405     		je	.L328
 5465 4247 E8000000 		call	__stack_chk_fail
 5465      00
 5466              	.L328:
 5467 424c 4881C408 		addq	$776, %rsp
 5467      030000
 5468 4253 5B       		popq	%rbx
 5469 4254 5D       		popq	%rbp
 5470              		.cfi_def_cfa 7, 8
 5471 4255 C3       		ret
 5472              		.cfi_endproc
 5473              	.LFE21:
 5475              		.section	.rodata
 5476 0e62 00000000 		.align 8
 5476      0000
 5477              	.LC16:
 5478 0e68 00000000 		.long	0
 5479 0e6c 80842E41 		.long	1093567616
 5480              		.align 8
 5481              	.LC17:
 5482 0e70 00000000 		.long	0
 5483 0e74 00003041 		.long	1093664768
 5484              		.text
 5485              	.Letext0:
 5486              		.file 2 "/usr/include/stdint.h"
 5487              		.file 3 "/usr/lib/gcc/x86_64-linux-gnu/4.8/include/stddef.h"
 5488              		.file 4 "/usr/include/x86_64-linux-gnu/bits/types.h"
 5489              		.file 5 "/usr/include/stdio.h"
 5490              		.file 6 "/usr/include/libio.h"
 5491              		.file 7 "/usr/include/x86_64-linux-gnu/bits/time.h"
 5492              		.file 8 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/makestuff/common/makestuff.h"
 5493              		.file 9 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/makestuff/libs/libfpgalink/libf
 5494              		.file 10 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/makestuff/libs/libbuffer/libbu
 5495              		.file 11 "/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/makestuff/libs/libargtable2/ar
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
                            *COM*:0000000000186a50 dataFromCSV
     /tmp/cc38w27d.s:10     .bss:0000000000000000 numLines
     /tmp/cc38w27d.s:13     .bss:0000000000000008 ptr
     /tmp/cc38w27d.s:13     .bss:0000000000000010 enableBenchmarking
     /tmp/cc38w27d.s:19     .text:0000000000000000 decrypt
     /tmp/cc38w27d.s:120    .text:00000000000000dd encrypt
     /tmp/cc38w27d.s:220    .text:00000000000001ba decrypt64
     /tmp/cc38w27d.s:251    .text:00000000000001f7 encrypt64
     /tmp/cc38w27d.s:282    .text:0000000000000234 myHash
     /tmp/cc38w27d.s:356    .text:00000000000002a8 format
     /tmp/cc38w27d.s:412    .text:0000000000000328 find
     /tmp/cc38w27d.s:498    .text:00000000000003d5 suffBal
     /tmp/cc38w27d.s:568    .text:000000000000046b isHexDigit
     /tmp/cc38w27d.s:616    .text:00000000000004a9 calcChecksum
     /tmp/cc38w27d.s:656    .text:00000000000004ea getHexNibble
     /tmp/cc38w27d.s:724    .text:000000000000055e getHexByte
     /tmp/cc38w27d.s:810    .rodata:00000000000000e0 errMessages
     /tmp/cc38w27d.s:828    .text:00000000000005df doRead
     /tmp/cc38w27d.s:1063   .text:0000000000000855 doWrite
     /tmp/cc38w27d.s:1216   .text:0000000000000a52 parseLine
     /tmp/cc38w27d.s:2428   .data:0000000000000000 nibbles
     /tmp/cc38w27d.s:2712   .text:0000000000001a9b main

UNDEFINED SYMBOLS
strtok
sscanf
flReadChannelAsyncSubmit
errPrefix
flReadChannelAsyncAwait
fwrite
fread
flWriteChannelAsync
flAwaitAsyncWrites
__stack_chk_fail
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
printf
fclose
bufAppendConst
flReadChannel
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
fprintf
fputc
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
arg_parse
stdout
arg_print_syntax
puts
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flLoadStandardFirmware
flSleep
putchar
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
strcmp
flFlashStandardFirmware
flFlashCustomFirmware
flSaveFirmware
flResetToggle
flIsNeroCapable
flIsCommCapable
flMultiBitPortAccess
sprintf
jtagScanChain
flProgram
flIsFPGARunning
sigRegisterHandler
sigIsRaised
readline
add_history
getline
flClose
flFreeError
