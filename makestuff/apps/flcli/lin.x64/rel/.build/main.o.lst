   1              		.file	"main.c"
   2              		.section	.rodata.str1.1,"aMS",@progbits,1
   3              	.LC0:
   4 0000 646F5772 		.string	"doWrite()"
   4      69746528 
   4      2900
   5              		.section	.text.unlikely,"ax",@progbits
   7              	doWrite:
   8              	.LFB88:
   9              		.cfi_startproc
  10 0000 4157     		pushq	%r15
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 15, -16
  13 0002 4531FF   		xorl	%r15d, %r15d
  14 0005 4156     		pushq	%r14
  15              		.cfi_def_cfa_offset 24
  16              		.cfi_offset 14, -24
  17 0007 4155     		pushq	%r13
  18              		.cfi_def_cfa_offset 32
  19              		.cfi_offset 13, -32
  20 0009 4989FD   		movq	%rdi, %r13
  21 000c 4154     		pushq	%r12
  22              		.cfi_def_cfa_offset 40
  23              		.cfi_offset 12, -40
  24 000e 4D89CC   		movq	%r9, %r12
  25 0011 55       		pushq	%rbp
  26              		.cfi_def_cfa_offset 48
  27              		.cfi_offset 6, -48
  28 0012 31ED     		xorl	%ebp, %ebp
  29 0014 53       		pushq	%rbx
  30              		.cfi_def_cfa_offset 56
  31              		.cfi_offset 3, -56
  32 0015 4889D3   		movq	%rdx, %rbx
  33 0018 4881EC38 		subq	$65592, %rsp
  33      000100
  34              		.cfi_def_cfa_offset 65648
  35 001f 64488B04 		movq	%fs:40, %rax
  35      25280000 
  35      00
  36 0028 48898424 		movq	%rax, 65576(%rsp)
  36      28000100 
  37 0030 31C0     		xorl	%eax, %eax
  38 0032 400FB6C6 		movzbl	%sil, %eax
  39 0036 48894C24 		movq	%rcx, 16(%rsp)
  39      10
  40 003b 4C894424 		movq	%r8, 24(%rsp)
  40      18
  41 0040 8944240C 		movl	%eax, 12(%rsp)
  42              	.L7:
  43 0044 488D7C24 		leaq	32(%rsp), %rdi
  43      20
  44 0049 4889D9   		movq	%rbx, %rcx
  45 004c BAFBFF00 		movl	$65531, %edx
  45      00
  46 0051 BE010000 		movl	$1, %esi
  46      00
  47 0056 E8000000 		call	fread
  47      00
  48 005b 4885C0   		testq	%rax, %rax
  49 005e 4989C6   		movq	%rax, %r14
  50 0061 745A     		je	.L2
  51 0063 8B74240C 		movl	12(%rsp), %esi
  52 0067 488D4C24 		leaq	32(%rsp), %rcx
  52      20
  53 006c 4D89E0   		movq	%r12, %r8
  54 006f 4889C2   		movq	%rax, %rdx
  55 0072 4C89EF   		movq	%r13, %rdi
  56 0075 4801C5   		addq	%rax, %rbp
  57 0078 E8000000 		call	flWriteChannelAsync
  57      00
  58 007d 85C0     		testl	%eax, %eax
  59 007f 750E     		jne	.L3
  60 0081 488D4424 		leaq	32(%rsp), %rax
  60      20
  61 0086 4A8D1430 		leaq	(%rax,%r14), %rdx
  62 008a 4889C1   		movq	%rax, %rcx
  63 008d EB14     		jmp	.L4
  64              	.L3:
  65 008f BE000000 		movl	$.LC0, %esi
  65      00
  66 0094 4C89E7   		movq	%r12, %rdi
  67 0097 E8000000 		call	errPrefix
  67      00
  68 009c B8010000 		movl	$1, %eax
  68      00
  69 00a1 EB3C     		jmp	.L5
  70              	.L4:
  71 00a3 4839D1   		cmpq	%rdx, %rcx
  72 00a6 740C     		je	.L14
  73 00a8 48FFC1   		incq	%rcx
  74 00ab 0FB641FF 		movzbl	-1(%rcx), %eax
  75 00af 4101C7   		addl	%eax, %r15d
  76 00b2 EBEF     		jmp	.L4
  77              	.L14:
  78 00b4 4981FEFB 		cmpq	$65531, %r14
  78      FF0000
  79 00bb 7487     		je	.L7
  80              	.L2:
  81 00bd 4C89E6   		movq	%r12, %rsi
  82 00c0 4C89EF   		movq	%r13, %rdi
  83 00c3 E8000000 		call	flAwaitAsyncWrites
  83      00
  84 00c8 85C0     		testl	%eax, %eax
  85 00ca 75C3     		jne	.L3
  86 00cc 488B4424 		movq	24(%rsp), %rax
  86      18
  87 00d1 66448938 		movw	%r15w, (%rax)
  88 00d5 488B4424 		movq	16(%rsp), %rax
  88      10
  89 00da 488928   		movq	%rbp, (%rax)
  90 00dd 31C0     		xorl	%eax, %eax
  91              	.L5:
  92 00df 488B9C24 		movq	65576(%rsp), %rbx
  92      28000100 
  93 00e7 6448331C 		xorq	%fs:40, %rbx
  93      25280000 
  93      00
  94 00f0 7405     		je	.L8
  95 00f2 E8000000 		call	__stack_chk_fail
  95      00
  96              	.L8:
  97 00f7 4881C438 		addq	$65592, %rsp
  97      000100
  98              		.cfi_def_cfa_offset 56
  99 00fe 5B       		popq	%rbx
 100              		.cfi_def_cfa_offset 48
 101 00ff 5D       		popq	%rbp
 102              		.cfi_def_cfa_offset 40
 103 0100 415C     		popq	%r12
 104              		.cfi_def_cfa_offset 32
 105 0102 415D     		popq	%r13
 106              		.cfi_def_cfa_offset 24
 107 0104 415E     		popq	%r14
 108              		.cfi_def_cfa_offset 16
 109 0106 415F     		popq	%r15
 110              		.cfi_def_cfa_offset 8
 111 0108 C3       		ret
 112              		.cfi_endproc
 113              	.LFE88:
 115              		.section	.rodata.str1.1
 116              	.LC1:
 117 000a 776200   		.string	"wb"
 118              	.LC2:
 119 000d 646F5265 		.string	"doRead()"
 119      61642829 
 119      00
 120              		.section	.rodata.str1.8,"aMS",@progbits,1
 121              		.align 8
 122              	.LC5:
 123 0000 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 123      20256420 
 123      62797465 
 123      73202863 
 123      6865636B 
 124              		.section	.rodata.str1.1
 125              	.LC6:
 126 0016 726200   		.string	"rb"
 127              		.section	.rodata.str1.8
 128 003d 000000   		.align 8
 129              	.LC7:
 130 0040 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 130      6520257A 
 130      75206279 
 130      74657320 
 130      28636865 
 131              		.section	.rodata.str1.1
 132              	.LC8:
 133 0019 25732061 		.string	"%s at column %d\n  %s\n  "
 133      7420636F 
 133      6C756D6E 
 133      2025640A 
 133      20202573 
 134              	.LC9:
 135 0031 2000     		.string	" "
 136              	.LC10:
 137 0033 5E0A00   		.string	"^\n"
 138              		.section	.text.unlikely
 140              	parseLine:
 141              	.LFB89:
 142              		.cfi_startproc
 143 0109 4157     		pushq	%r15
 144              		.cfi_def_cfa_offset 16
 145              		.cfi_offset 15, -16
 146 010b 31C0     		xorl	%eax, %eax
 147 010d B9080000 		movl	$8, %ecx
 147      00
 148 0112 4156     		pushq	%r14
 149              		.cfi_def_cfa_offset 24
 150              		.cfi_offset 14, -24
 151 0114 4155     		pushq	%r13
 152              		.cfi_def_cfa_offset 32
 153              		.cfi_offset 13, -32
 154 0116 4154     		pushq	%r12
 155              		.cfi_def_cfa_offset 40
 156              		.cfi_offset 12, -40
 157 0118 55       		pushq	%rbp
 158              		.cfi_def_cfa_offset 48
 159              		.cfi_offset 6, -48
 160 0119 4889FD   		movq	%rdi, %rbp
 161 011c 53       		pushq	%rbx
 162              		.cfi_def_cfa_offset 56
 163              		.cfi_offset 3, -56
 164 011d 4889D3   		movq	%rdx, %rbx
 165 0120 4881EC98 		subq	$152, %rsp
 165      000000
 166              		.cfi_def_cfa_offset 208
 167 0127 488D7C24 		leaq	112(%rsp), %rdi
 167      70
 168 012c 48897424 		movq	%rsi, 8(%rsp)
 168      08
 169 0131 BE000400 		movl	$1024, %esi
 169      00
 170 0136 F3AB     		rep stosl
 171 0138 488D7C24 		leaq	112(%rsp), %rdi
 171      70
 172 013d 4889D1   		movq	%rdx, %rcx
 173 0140 31D2     		xorl	%edx, %edx
 174 0142 E8000000 		call	bufInitialise
 174      00
 175 0147 85C0     		testl	%eax, %eax
 176 0149 0F852D09 		jne	.L96
 176      0000
 177 014f 488B4424 		movq	8(%rsp), %rax
 177      08
 178 0154 48890500 		movq	%rax, ptr(%rip)
 178      000000
 179              	.L17:
 180 015b 488B1500 		movq	ptr(%rip), %rdx
 180      000000
 181 0162 8A02     		movb	(%rdx), %al
 182 0164 3C3B     		cmpb	$59, %al
 183 0166 750C     		jne	.L167
 184 0168 48FFC2   		incq	%rdx
 185 016b 48891500 		movq	%rdx, ptr(%rip)
 185      000000
 186 0172 EBE7     		jmp	.L17
 187              	.L167:
 188 0174 3C72     		cmpb	$114, %al
 189 0176 7415     		je	.L19
 190 0178 3C77     		cmpb	$119, %al
 191 017a 0F84A603 		je	.L20
 191      0000
 192 0180 3C2B     		cmpb	$43, %al
 193 0182 0F850509 		jne	.L119
 193      0000
 194 0188 E9CF0700 		jmp	.L168
 194      00
 195              	.L19:
 196 018d 4C8D6201 		leaq	1(%rdx), %r12
 197 0191 4C892500 		movq	%r12, ptr(%rip)
 197      000000
 198 0198 E8000000 		call	__errno_location
 198      00
 199 019d 488D7424 		leaq	48(%rsp), %rsi
 199      30
 200 01a2 4989C5   		movq	%rax, %r13
 201 01a5 C7000000 		movl	$0, (%rax)
 201      0000
 202 01ab BA100000 		movl	$16, %edx
 202      00
 203 01b0 4C89E7   		movq	%r12, %rdi
 204 01b3 E8000000 		call	strtoul
 204      00
 205 01b8 41837D00 		cmpl	$0, 0(%r13)
 205      00
 206 01bd 48894424 		movq	%rax, 16(%rsp)
 206      10
 207 01c2 7411     		je	.L22
 208              	.L27:
 209 01c4 4531E4   		xorl	%r12d, %r12d
 210 01c7 4531FF   		xorl	%r15d, %r15d
 211 01ca 41BD0200 		movl	$2, %r13d
 211      0000
 212 01d0 E96D0500 		jmp	.L63
 212      00
 213              	.L22:
 214 01d5 837C2410 		cmpl	$127, 16(%rsp)
 214      7F
 215 01da 0F872A03 		ja	.L98
 215      0000
 216 01e0 488B4424 		movq	48(%rsp), %rax
 216      30
 217 01e5 8A08     		movb	(%rax), %cl
 218 01e7 48890500 		movq	%rax, ptr(%rip)
 218      000000
 219 01ee 80F93B   		cmpb	$59, %cl
 220 01f1 741A     		je	.L24
 221 01f3 84C9     		testb	%cl, %cl
 222 01f5 7416     		je	.L24
 223 01f7 80F920   		cmpb	$32, %cl
 224 01fa 7420     		je	.L25
 225              	.L29:
 226 01fc 4531E4   		xorl	%r12d, %r12d
 227 01ff 4531FF   		xorl	%r15d, %r15d
 228 0202 41BD0500 		movl	$5, %r13d
 228      0000
 229 0208 E9350500 		jmp	.L63
 229      00
 230              	.L24:
 231 020d 80F920   		cmpb	$32, %cl
 232 0210 41BC0100 		movl	$1, %r12d
 232      0000
 233 0216 0F852509 		jne	.L26
 233      0000
 234              	.L25:
 235 021c 488D7801 		leaq	1(%rax), %rdi
 236 0220 488D7424 		leaq	48(%rsp), %rsi
 236      30
 237 0225 41C74500 		movl	$0, 0(%r13)
 237      00000000 
 238 022d BA100000 		movl	$16, %edx
 238      00
 239 0232 48893D00 		movq	%rdi, ptr(%rip)
 239      000000
 240 0239 E8000000 		call	strtoul
 240      00
 241 023e 41837D00 		cmpl	$0, 0(%r13)
 241      00
 242 0243 48894424 		movq	%rax, 24(%rsp)
 242      18
 243 0248 4189C4   		movl	%eax, %r12d
 244 024b 0F8573FF 		jne	.L27
 244      FFFF
 245 0251 4C8B7424 		movq	48(%rsp), %r14
 245      30
 246 0256 418A06   		movb	(%r14), %al
 247 0259 4C893500 		movq	%r14, ptr(%rip)
 247      000000
 248 0260 3C3B     		cmpb	$59, %al
 249 0262 740A     		je	.L28
 250 0264 84C0     		testb	%al, %al
 251 0266 7406     		je	.L28
 252 0268 3C20     		cmpb	$32, %al
 253 026a 740A     		je	.L30
 254 026c EB8E     		jmp	.L29
 255              	.L28:
 256 026e 3C20     		cmpb	$32, %al
 257 0270 0F85CB08 		jne	.L26
 257      0000
 258              	.L30:
 259 0276 418A5601 		movb	1(%r14), %dl
 260 027a 498D4601 		leaq	1(%r14), %rax
 261 027e 48890500 		movq	%rax, ptr(%rip)
 261      000000
 262 0285 80FA27   		cmpb	$39, %dl
 263 0288 7409     		je	.L120
 264 028a 80FA22   		cmpb	$34, %dl
 265 028d 0F8569FF 		jne	.L29
 265      FFFF
 266              	.L120:
 267 0293 4983C602 		addq	$2, %r14
 268 0297 4C893500 		movq	%r14, ptr(%rip)
 268      000000
 269 029e 4D89F5   		movq	%r14, %r13
 270              	.L32:
 271 02a1 418A4500 		movb	0(%r13), %al
 272 02a5 38D0     		cmpb	%dl, %al
 273 02a7 740D     		je	.L33
 274 02a9 84C0     		testb	%al, %al
 275 02ab 0F846204 		je	.L107
 275      0000
 276 02b1 49FFC5   		incq	%r13
 277 02b4 EBEB     		jmp	.L32
 278              	.L33:
 279 02b6 84D2     		testb	%dl, %dl
 280 02b8 0F845504 		je	.L107
 280      0000
 281 02be 4D89EC   		movq	%r13, %r12
 282 02c1 4D29F4   		subq	%r14, %r12
 283 02c4 498D7C24 		leaq	1(%r12), %rdi
 283      01
 284 02c9 E8000000 		call	malloc
 284      00
 285 02ce 4885C0   		testq	%rax, %rax
 286 02d1 4989C7   		movq	%rax, %r15
 287 02d4 0F844704 		je	.L108
 287      0000
 288 02da 4D39F5   		cmpq	%r14, %r13
 289 02dd 0F844904 		je	.L109
 289      0000
 290 02e3 4C89E2   		movq	%r12, %rdx
 291 02e6 4C89F6   		movq	%r14, %rsi
 292 02e9 4889C7   		movq	%rax, %rdi
 293 02ec E8000000 		call	strncpy
 293      00
 294 02f1 49FFC5   		incq	%r13
 295 02f4 43C60427 		movb	$0, (%r15,%r12)
 295      00
 296 02f9 BE000000 		movl	$.LC1, %esi
 296      00
 297 02fe 4C89FF   		movq	%r15, %rdi
 298 0301 4C892D00 		movq	%r13, ptr(%rip)
 298      000000
 299 0308 E8000000 		call	fopen
 299      00
 300 030d 4885C0   		testq	%rax, %rax
 301 0310 4989C4   		movq	%rax, %r12
 302 0313 0F840202 		je	.L103
 302      0000
 303 0319 4C89FF   		movq	%r15, %rdi
 304 031c 41BD0000 		movl	$65536, %r13d
 304      0100
 305 0322 E8000000 		call	free
 305      00
 306 0327 488D7C24 		leaq	80(%rsp), %rdi
 306      50
 307 032c 31F6     		xorl	%esi, %esi
 308 032e E8000000 		call	gettimeofday
 308      00
 309 0333 488B4424 		movq	24(%rsp), %rax
 309      18
 310 0338 4989D8   		movq	%rbx, %r8
 311 033b 4889EF   		movq	%rbp, %rdi
 312 033e 3D000001 		cmpl	$65536, %eax
 312      00
 313 0343 440F46E8 		cmovbe	%eax, %r13d
 314 0347 0FB64424 		movzbl	16(%rsp), %eax
 314      10
 315 034c 31C9     		xorl	%ecx, %ecx
 316 034e 4489EA   		movl	%r13d, %edx
 317 0351 89C6     		movl	%eax, %esi
 318 0353 890424   		movl	%eax, (%rsp)
 319 0356 E8000000 		call	flReadChannelAsyncSubmit
 319      00
 320 035b 85C0     		testl	%eax, %eax
 321 035d 741B     		je	.L35
 322              	.L38:
 323 035f BE000000 		movl	$.LC2, %esi
 323      00
 324 0364 4889DF   		movq	%rbx, %rdi
 325 0367 4531FF   		xorl	%r15d, %r15d
 326 036a E8000000 		call	errPrefix
 326      00
 327 036f 41BD0100 		movl	$1, %r13d
 327      0000
 328 0375 E9060100 		jmp	.L36
 328      00
 329              	.L35:
 330 037a 8B442418 		movl	24(%rsp), %eax
 331 037e 4531FF   		xorl	%r15d, %r15d
 332 0381 4429E8   		subl	%r13d, %eax
 333 0384 4189C5   		movl	%eax, %r13d
 334              	.L37:
 335 0387 4585ED   		testl	%r13d, %r13d
 336 038a 0F849800 		je	.L169
 336      0000
 337 0390 4181FD00 		cmpl	$65536, %r13d
 337      000100
 338 0397 41BE0000 		movl	$65536, %r14d
 338      0100
 339 039d 8B3424   		movl	(%rsp), %esi
 340 03a0 450F46F5 		cmovbe	%r13d, %r14d
 341 03a4 4989D8   		movq	%rbx, %r8
 342 03a7 31C9     		xorl	%ecx, %ecx
 343 03a9 4489F2   		movl	%r14d, %edx
 344 03ac 4889EF   		movq	%rbp, %rdi
 345 03af E8000000 		call	flReadChannelAsyncSubmit
 345      00
 346 03b4 85C0     		testl	%eax, %eax
 347 03b6 75A7     		jne	.L38
 348 03b8 488D4C24 		leaq	32(%rsp), %rcx
 348      20
 349 03bd 488D7424 		leaq	64(%rsp), %rsi
 349      40
 350 03c2 4989D8   		movq	%rbx, %r8
 351 03c5 4889EF   		movq	%rbp, %rdi
 352 03c8 4529F5   		subl	%r14d, %r13d
 353 03cb 4889CA   		movq	%rcx, %rdx
 354 03ce E8000000 		call	flReadChannelAsyncAwait
 354      00
 355 03d3 85C0     		testl	%eax, %eax
 356 03d5 7588     		jne	.L38
 357 03d7 8B542420 		movl	32(%rsp), %edx
 358 03db 488B7C24 		movq	64(%rsp), %rdi
 358      40
 359 03e0 4C89E1   		movq	%r12, %rcx
 360 03e3 BE010000 		movl	$1, %esi
 360      00
 361 03e8 E8000000 		call	fwrite
 361      00
 362 03ed 3B442420 		cmpl	32(%rsp), %eax
 363 03f1 89C1     		movl	%eax, %ecx
 364 03f3 7418     		je	.L39
 365              	.L43:
 366 03f5 BE000000 		movl	$.LC2, %esi
 366      00
 367 03fa 4889DF   		movq	%rbx, %rdi
 368 03fd 4531FF   		xorl	%r15d, %r15d
 369 0400 E8000000 		call	errPrefix
 369      00
 370 0405 41BD0B00 		movl	$11, %r13d
 370      0000
 371 040b EB73     		jmp	.L36
 372              	.L39:
 373 040d 488B7424 		movq	64(%rsp), %rsi
 373      40
 374 0412 31C0     		xorl	%eax, %eax
 375              	.L40:
 376 0414 39C1     		cmpl	%eax, %ecx
 377 0416 0F846BFF 		je	.L37
 377      FFFF
 378 041c 0FB61406 		movzbl	(%rsi,%rax), %edx
 379 0420 48FFC0   		incq	%rax
 380 0423 4101D7   		addl	%edx, %r15d
 381 0426 EBEC     		jmp	.L40
 382              	.L169:
 383 0428 488D4C24 		leaq	32(%rsp), %rcx
 383      20
 384 042d 488D7424 		leaq	64(%rsp), %rsi
 384      40
 385 0432 4989D8   		movq	%rbx, %r8
 386 0435 4889EF   		movq	%rbp, %rdi
 387 0438 4889CA   		movq	%rcx, %rdx
 388 043b E8000000 		call	flReadChannelAsyncAwait
 388      00
 389 0440 85C0     		testl	%eax, %eax
 390 0442 0F8517FF 		jne	.L38
 390      FFFF
 391 0448 8B542420 		movl	32(%rsp), %edx
 392 044c 488B7C24 		movq	64(%rsp), %rdi
 392      40
 393 0451 BE010000 		movl	$1, %esi
 393      00
 394 0456 4C89E1   		movq	%r12, %rcx
 395 0459 E8000000 		call	fwrite
 395      00
 396 045e 3B442420 		cmpl	32(%rsp), %eax
 397 0462 89C6     		movl	%eax, %esi
 398 0464 758F     		jne	.L43
 399 0466 488B4C24 		movq	64(%rsp), %rcx
 399      40
 400 046b 31C0     		xorl	%eax, %eax
 401              	.L44:
 402 046d 39C6     		cmpl	%eax, %esi
 403 046f 740C     		je	.L170
 404 0471 0FB61401 		movzbl	(%rcx,%rax), %edx
 405 0475 48FFC0   		incq	%rax
 406 0478 4101D7   		addl	%edx, %r15d
 407 047b EBF0     		jmp	.L44
 408              	.L170:
 409 047d 4531ED   		xorl	%r13d, %r13d
 410              	.L36:
 411 0480 488D7C24 		leaq	96(%rsp), %rdi
 411      60
 412 0485 31F6     		xorl	%esi, %esi
 413 0487 E8000000 		call	gettimeofday
 413      00
 414 048c 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 414      000000
 415 0493 488B4C24 		movq	80(%rsp), %rcx
 415      50
 416 0498 488B4424 		movq	88(%rsp), %rax
 416      58
 417 049d 488B7424 		movq	96(%rsp), %rsi
 417      60
 418 04a2 488B5424 		movq	104(%rsp), %rdx
 418      68
 419 04a7 0F845402 		je	.L64
 419      0000
 420 04ad 4869F640 		imulq	$1000000, %rsi, %rsi
 420      420F00
 421 04b4 488B7C24 		movq	24(%rsp), %rdi
 421      18
 422 04b9 448B4424 		movl	16(%rsp), %r8d
 422      10
 423 04be 4869C940 		imulq	$1000000, %rcx, %rcx
 423      420F00
 424 04c5 4801F2   		addq	%rsi, %rdx
 425 04c8 BE000000 		movl	$.LC5, %esi
 425      00
 426 04cd 4801C8   		addq	%rcx, %rax
 427 04d0 410FB7CF 		movzwl	%r15w, %ecx
 428 04d4 4829C2   		subq	%rax, %rdx
 429 04d7 89F8     		movl	%edi, %eax
 430 04d9 F2480F2A 		cvtsi2sdq	%rdx, %xmm1
 430      CA
 431 04de 89FA     		movl	%edi, %edx
 432 04e0 BF010000 		movl	$1, %edi
 432      00
 433 04e5 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 433      C0
 434 04ea B001     		movb	$1, %al
 435 04ec F20F5E0D 		divsd	.LC3(%rip), %xmm1
 435      00000000 
 436 04f4 F20F590D 		mulsd	.LC4(%rip), %xmm1
 436      00000000 
 437 04fc F20F5EC1 		divsd	%xmm1, %xmm0
 438 0500 E8000000 		call	__printf_chk
 438      00
 439 0505 E9F70100 		jmp	.L64
 439      00
 440              	.L98:
 441 050a 4531E4   		xorl	%r12d, %r12d
 442 050d 4531FF   		xorl	%r15d, %r15d
 443 0510 41BD0300 		movl	$3, %r13d
 443      0000
 444 0516 E9270200 		jmp	.L63
 444      00
 445              	.L103:
 446 051b 41BD0B00 		movl	$11, %r13d
 446      0000
 447 0521 E91C0200 		jmp	.L63
 447      00
 448              	.L20:
 449 0526 4C8D6A01 		leaq	1(%rdx), %r13
 450 052a 48C74424 		movq	$1, 48(%rsp)
 450      30010000 
 450      00
 451 0533 4C892D00 		movq	%r13, ptr(%rip)
 451      000000
 452 053a E8000000 		call	__errno_location
 452      00
 453 053f 488D7424 		leaq	64(%rsp), %rsi
 453      40
 454 0544 4989C4   		movq	%rax, %r12
 455 0547 C7000000 		movl	$0, (%rax)
 455      0000
 456 054d BA100000 		movl	$16, %edx
 456      00
 457 0552 4C89EF   		movq	%r13, %rdi
 458 0555 E8000000 		call	strtoul
 458      00
 459 055a 41833C24 		cmpl	$0, (%r12)
 459      00
 460 055f 4989C6   		movq	%rax, %r14
 461 0562 0F85A403 		jne	.L105
 461      0000
 462 0568 4883F87F 		cmpq	$127, %rax
 463 056c 0F87AE03 		ja	.L106
 463      0000
 464 0572 488B4424 		movq	64(%rsp), %rax
 464      40
 465 0577 803820   		cmpb	$32, (%rax)
 466 057a 48890500 		movq	%rax, ptr(%rip)
 466      000000
 467 0581 0F850605 		jne	.L119
 467      0000
 468 0587 8A5001   		movb	1(%rax), %dl
 469 058a 488D7801 		leaq	1(%rax), %rdi
 470 058e 48893D00 		movq	%rdi, ptr(%rip)
 470      000000
 471 0595 80FA27   		cmpb	$39, %dl
 472 0598 7409     		je	.L121
 473 059a 80FA22   		cmpb	$34, %dl
 474 059d 0F85A701 		jne	.L58
 474      0000
 475              	.L121:
 476 05a3 488D7002 		leaq	2(%rax), %rsi
 477 05a7 66C74424 		movw	$0, 32(%rsp)
 477      200000
 478 05ae 48893500 		movq	%rsi, ptr(%rip)
 478      000000
 479 05b5 4989F4   		movq	%rsi, %r12
 480              	.L60:
 481 05b8 418A0424 		movb	(%r12), %al
 482 05bc 38D0     		cmpb	%dl, %al
 483 05be 740D     		je	.L61
 484 05c0 84C0     		testb	%al, %al
 485 05c2 0F844B01 		je	.L107
 485      0000
 486 05c8 49FFC4   		incq	%r12
 487 05cb EBEB     		jmp	.L60
 488              	.L61:
 489 05cd 84D2     		testb	%dl, %dl
 490 05cf 0F843E01 		je	.L107
 490      0000
 491 05d5 4D89E5   		movq	%r12, %r13
 492 05d8 48893424 		movq	%rsi, (%rsp)
 493 05dc 4929F5   		subq	%rsi, %r13
 494 05df 498D7D01 		leaq	1(%r13), %rdi
 495 05e3 E8000000 		call	malloc
 495      00
 496 05e8 4885C0   		testq	%rax, %rax
 497 05eb 4989C7   		movq	%rax, %r15
 498 05ee 0F842D01 		je	.L108
 498      0000
 499 05f4 488B3424 		movq	(%rsp), %rsi
 500 05f8 4939F4   		cmpq	%rsi, %r12
 501 05fb 0F842B01 		je	.L109
 501      0000
 502 0601 4C89EA   		movq	%r13, %rdx
 503 0604 4889C7   		movq	%rax, %rdi
 504 0607 49FFC4   		incq	%r12
 505 060a E8000000 		call	strncpy
 505      00
 506 060f 43C6042F 		movb	$0, (%r15,%r13)
 506      00
 507 0614 BE000000 		movl	$.LC6, %esi
 507      00
 508 0619 4C89FF   		movq	%r15, %rdi
 509 061c 4C892500 		movq	%r12, ptr(%rip)
 509      000000
 510 0623 E8000000 		call	fopen
 510      00
 511 0628 4885C0   		testq	%rax, %rax
 512 062b 4989C4   		movq	%rax, %r12
 513 062e 0F840301 		je	.L110
 513      0000
 514 0634 4C89FF   		movq	%r15, %rdi
 515 0637 E8000000 		call	free
 515      00
 516 063c 488D7C24 		leaq	80(%rsp), %rdi
 516      50
 517 0641 31F6     		xorl	%esi, %esi
 518 0643 E8000000 		call	gettimeofday
 518      00
 519 0648 488D4C24 		leaq	48(%rsp), %rcx
 519      30
 520 064d 4C8D4424 		leaq	32(%rsp), %r8
 520      20
 521 0652 4C89E2   		movq	%r12, %rdx
 522 0655 4989D9   		movq	%rbx, %r9
 523 0658 4489F6   		movl	%r14d, %esi
 524 065b 4889EF   		movq	%rbp, %rdi
 525 065e E89DF9FF 		call	doWrite
 525      FF
 526 0663 488D7C24 		leaq	96(%rsp), %rdi
 526      60
 527 0668 31F6     		xorl	%esi, %esi
 528 066a 4189C5   		movl	%eax, %r13d
 529 066d E8000000 		call	gettimeofday
 529      00
 530 0672 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 530      000000
 531 0679 488B7424 		movq	80(%rsp), %rsi
 531      50
 532 067e 488B4424 		movq	88(%rsp), %rax
 532      58
 533 0683 488B7C24 		movq	96(%rsp), %rdi
 533      60
 534 0688 488B4C24 		movq	104(%rsp), %rcx
 534      68
 535 068d 488B5424 		movq	48(%rsp), %rdx
 535      30
 536 0692 746D     		je	.L64
 537 0694 4869FF40 		imulq	$1000000, %rdi, %rdi
 537      420F00
 538 069b 4869F640 		imulq	$1000000, %rsi, %rsi
 538      420F00
 539 06a2 4801F9   		addq	%rdi, %rcx
 540 06a5 4801F0   		addq	%rsi, %rax
 541 06a8 4829C1   		subq	%rax, %rcx
 542 06ab 4885D2   		testq	%rdx, %rdx
 543 06ae F2480F2A 		cvtsi2sdq	%rcx, %xmm1
 543      C9
 544 06b3 7807     		js	.L65
 545 06b5 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 545      C2
 546 06ba EB18     		jmp	.L66
 547              	.L65:
 548 06bc 4889D0   		movq	%rdx, %rax
 549 06bf 4889D1   		movq	%rdx, %rcx
 550 06c2 48D1E8   		shrq	%rax
 551 06c5 83E101   		andl	$1, %ecx
 552 06c8 4809C8   		orq	%rcx, %rax
 553 06cb F2480F2A 		cvtsi2sdq	%rax, %xmm0
 553      C0
 554 06d0 F20F58C0 		addsd	%xmm0, %xmm0
 555              	.L66:
 556 06d4 F20F5E0D 		divsd	.LC3(%rip), %xmm1
 556      00000000 
 557 06dc 0FB74C24 		movzwl	32(%rsp), %ecx
 557      20
 558 06e1 4D89F0   		movq	%r14, %r8
 559 06e4 BE000000 		movl	$.LC7, %esi
 559      00
 560 06e9 BF010000 		movl	$1, %edi
 560      00
 561 06ee B001     		movb	$1, %al
 562 06f0 F20F590D 		mulsd	.LC4(%rip), %xmm1
 562      00000000 
 563 06f8 F20F5EC1 		divsd	%xmm1, %xmm0
 564 06fc E8000000 		call	__printf_chk
 564      00
 565              	.L64:
 566 0701 4585ED   		testl	%r13d, %r13d
 567 0704 7539     		jne	.L111
 568 0706 4C89E7   		movq	%r12, %rdi
 569 0709 E8000000 		call	fclose
 569      00
 570 070e E9350300 		jmp	.L55
 570      00
 571              	.L107:
 572 0713 4531E4   		xorl	%r12d, %r12d
 573 0716 4531FF   		xorl	%r15d, %r15d
 574 0719 41BD0600 		movl	$6, %r13d
 574      0000
 575 071f EB21     		jmp	.L63
 576              	.L108:
 577 0721 4531E4   		xorl	%r12d, %r12d
 578 0724 41BD0700 		movl	$7, %r13d
 578      0000
 579 072a EB16     		jmp	.L63
 580              	.L109:
 581 072c 4531E4   		xorl	%r12d, %r12d
 582 072f 41BD0800 		movl	$8, %r13d
 582      0000
 583 0735 EB0B     		jmp	.L63
 584              	.L110:
 585 0737 41BD0A00 		movl	$10, %r13d
 585      0000
 586 073d EB03     		jmp	.L63
 587              	.L111:
 588 073f 4531FF   		xorl	%r15d, %r15d
 589              	.L63:
 590 0742 4531F6   		xorl	%r14d, %r14d
 591 0745 E9520300 		jmp	.L16
 591      00
 592              	.L58:
 593 074a 8D72D0   		leal	-48(%rdx), %esi
 594 074d B9010000 		movl	$1, %ecx
 594      00
 595 0752 4080FE09 		cmpb	$9, %sil
 596 0756 760E     		jbe	.L68
 597 0758 83E2DF   		andl	$-33, %edx
 598 075b 31C9     		xorl	%ecx, %ecx
 599 075d 83EA41   		subl	$65, %edx
 600 0760 80FA05   		cmpb	$5, %dl
 601 0763 0F96C1   		setbe	%cl
 602              	.L68:
 603 0766 85C9     		testl	%ecx, %ecx
 604 0768 0F841F03 		je	.L119
 604      0000
 605 076e 4883C002 		addq	$2, %rax
 606              	.L70:
 607 0772 8A08     		movb	(%rax), %cl
 608 0774 BA010000 		movl	$1, %edx
 608      00
 609 0779 8D71D0   		leal	-48(%rcx), %esi
 610 077c 4080FE09 		cmpb	$9, %sil
 611 0780 760E     		jbe	.L71
 612 0782 83E1DF   		andl	$-33, %ecx
 613 0785 31D2     		xorl	%edx, %edx
 614 0787 83E941   		subl	$65, %ecx
 615 078a 80F905   		cmpb	$5, %cl
 616 078d 0F96C2   		setbe	%dl
 617              	.L71:
 618 0790 85D2     		testl	%edx, %edx
 619 0792 7405     		je	.L171
 620 0794 48FFC0   		incq	%rax
 621 0797 EBD9     		jmp	.L70
 622              	.L171:
 623 0799 4829F8   		subq	%rdi, %rax
 624 079c A801     		testb	$1, %al
 625 079e 0F859001 		jne	.L114
 625      0000
 626 07a4 48D1E8   		shrq	%rax
 627 07a7 4889C7   		movq	%rax, %rdi
 628 07aa 4989C5   		movq	%rax, %r13
 629 07ad 48894424 		movq	%rax, 48(%rsp)
 629      30
 630 07b2 E8000000 		call	malloc
 630      00
 631 07b7 488B0D00 		movq	ptr(%rip), %rcx
 631      000000
 632 07be 4989C4   		movq	%rax, %r12
 633 07c1 31D2     		xorl	%edx, %edx
 634              	.L73:
 635 07c3 4C39EA   		cmpq	%r13, %rdx
 636 07c6 744E     		je	.L172
 637 07c8 8A0451   		movb	(%rcx,%rdx,2), %al
 638 07cb 8D70D0   		leal	-48(%rax), %esi
 639 07ce 4080FE09 		cmpb	$9, %sil
 640 07d2 761A     		jbe	.L74
 641 07d4 8D709F   		leal	-97(%rax), %esi
 642 07d7 4080FE05 		cmpb	$5, %sil
 643 07db 7705     		ja	.L75
 644 07dd 8D70A9   		leal	-87(%rax), %esi
 645 07e0 EB0C     		jmp	.L74
 646              	.L75:
 647 07e2 8D70BF   		leal	-65(%rax), %esi
 648 07e5 4080FE05 		cmpb	$5, %sil
 649 07e9 7726     		ja	.L76
 650 07eb 8D70C9   		leal	-55(%rax), %esi
 651              	.L74:
 652 07ee 408A7C51 		movb	1(%rcx,%rdx,2), %dil
 652      01
 653 07f3 8D47D0   		leal	-48(%rdi), %eax
 654 07f6 3C09     		cmpb	$9, %al
 655 07f8 760E     		jbe	.L78
 656 07fa 8D479F   		leal	-97(%rdi), %eax
 657 07fd 3C05     		cmpb	$5, %al
 658 07ff 0F87E003 		ja	.L77
 658      0000
 659 0805 8D47A9   		leal	-87(%rdi), %eax
 660              	.L78:
 661 0808 C1E604   		sall	$4, %esi
 662 080b 09C6     		orl	%eax, %esi
 663 080d 41883414 		movb	%sil, (%r12,%rdx)
 664              	.L76:
 665 0811 48FFC2   		incq	%rdx
 666 0814 EBAD     		jmp	.L73
 667              	.L172:
 668 0816 4801D2   		addq	%rdx, %rdx
 669 0819 488D7C24 		leaq	80(%rsp), %rdi
 669      50
 670 081e 31F6     		xorl	%esi, %esi
 671 0820 4801D1   		addq	%rdx, %rcx
 672 0823 48890D00 		movq	%rcx, ptr(%rip)
 672      000000
 673 082a E8000000 		call	gettimeofday
 673      00
 674 082f 488B5424 		movq	48(%rsp), %rdx
 674      30
 675 0834 4989D8   		movq	%rbx, %r8
 676 0837 4C89E1   		movq	%r12, %rcx
 677 083a 4489F6   		movl	%r14d, %esi
 678 083d 4889EF   		movq	%rbp, %rdi
 679 0840 E8000000 		call	flWriteChannel
 679      00
 680 0845 488D7C24 		leaq	96(%rsp), %rdi
 680      60
 681 084a 31F6     		xorl	%esi, %esi
 682 084c 4189C5   		movl	%eax, %r13d
 683 084f E8000000 		call	gettimeofday
 683      00
 684 0854 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 684      000000
 685 085b 4C8B4C24 		movq	80(%rsp), %r9
 685      50
 686 0860 488B7C24 		movq	88(%rsp), %rdi
 686      58
 687 0865 4C8B5424 		movq	96(%rsp), %r10
 687      60
 688 086a 4C8B4424 		movq	104(%rsp), %r8
 688      68
 689 086f 488B5424 		movq	48(%rsp), %rdx
 689      30
 690 0874 0F848000 		je	.L80
 690      0000
 691 087a 31C9     		xorl	%ecx, %ecx
 692 087c 31C0     		xorl	%eax, %eax
 693              	.L81:
 694 087e 4839D1   		cmpq	%rdx, %rcx
 695 0881 740C     		je	.L173
 696 0883 410FB634 		movzbl	(%r12,%rcx), %esi
 696      0C
 697 0888 48FFC1   		incq	%rcx
 698 088b 01F0     		addl	%esi, %eax
 699 088d EBEF     		jmp	.L81
 700              	.L173:
 701 088f 4969CA40 		imulq	$1000000, %r10, %rcx
 701      420F00
 702 0896 4D69C940 		imulq	$1000000, %r9, %r9
 702      420F00
 703 089d 4C01C1   		addq	%r8, %rcx
 704 08a0 4C01CF   		addq	%r9, %rdi
 705 08a3 4829F9   		subq	%rdi, %rcx
 706 08a6 4885D2   		testq	%rdx, %rdx
 707 08a9 F2480F2A 		cvtsi2sdq	%rcx, %xmm1
 707      C9
 708 08ae 7807     		js	.L83
 709 08b0 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 709      C2
 710 08b5 EB18     		jmp	.L84
 711              	.L83:
 712 08b7 4889D1   		movq	%rdx, %rcx
 713 08ba 4889D6   		movq	%rdx, %rsi
 714 08bd 48D1E9   		shrq	%rcx
 715 08c0 83E601   		andl	$1, %esi
 716 08c3 4809F1   		orq	%rsi, %rcx
 717 08c6 F2480F2A 		cvtsi2sdq	%rcx, %xmm0
 717      C1
 718 08cb F20F58C0 		addsd	%xmm0, %xmm0
 719              	.L84:
 720 08cf F20F5E0D 		divsd	.LC3(%rip), %xmm1
 720      00000000 
 721 08d7 0FB7C8   		movzwl	%ax, %ecx
 722 08da 4D89F0   		movq	%r14, %r8
 723 08dd BE000000 		movl	$.LC7, %esi
 723      00
 724 08e2 BF010000 		movl	$1, %edi
 724      00
 725 08e7 B001     		movb	$1, %al
 726 08e9 F20F590D 		mulsd	.LC4(%rip), %xmm1
 726      00000000 
 727 08f1 F20F5EC1 		divsd	%xmm1, %xmm0
 728 08f5 E8000000 		call	__printf_chk
 728      00
 729              	.L80:
 730 08fa 4585ED   		testl	%r13d, %r13d
 731 08fd 7549     		jne	.L115
 732 08ff 4C89E7   		movq	%r12, %rdi
 733 0902 E8000000 		call	free
 733      00
 734 0907 E93C0100 		jmp	.L55
 734      00
 735              	.L105:
 736 090c 4531E4   		xorl	%r12d, %r12d
 737 090f 4531FF   		xorl	%r15d, %r15d
 738 0912 4531F6   		xorl	%r14d, %r14d
 739 0915 41BD0200 		movl	$2, %r13d
 739      0000
 740 091b E97C0100 		jmp	.L16
 740      00
 741              	.L106:
 742 0920 4531E4   		xorl	%r12d, %r12d
 743 0923 4531FF   		xorl	%r15d, %r15d
 744 0926 4531F6   		xorl	%r14d, %r14d
 745 0929 41BD0300 		movl	$3, %r13d
 745      0000
 746 092f E9680100 		jmp	.L16
 746      00
 747              	.L114:
 748 0934 4531E4   		xorl	%r12d, %r12d
 749 0937 4531FF   		xorl	%r15d, %r15d
 750 093a 4531F6   		xorl	%r14d, %r14d
 751 093d 41BD0900 		movl	$9, %r13d
 751      0000
 752 0943 E9540100 		jmp	.L16
 752      00
 753              	.L115:
 754 0948 4D89E6   		movq	%r12, %r14
 755 094b 4531FF   		xorl	%r15d, %r15d
 756 094e 4531E4   		xorl	%r12d, %r12d
 757 0951 41BD0100 		movl	$1, %r13d
 757      0000
 758 0957 E9400100 		jmp	.L16
 758      00
 759              	.L168:
 760 095c 4C8D6A01 		leaq	1(%rdx), %r13
 761 0960 4C892D00 		movq	%r13, ptr(%rip)
 761      000000
 762 0967 E8000000 		call	__errno_location
 762      00
 763 096c 488D7424 		leaq	64(%rsp), %rsi
 763      40
 764 0971 4989C4   		movq	%rax, %r12
 765 0974 C7000000 		movl	$0, (%rax)
 765      0000
 766 097a BA100000 		movl	$16, %edx
 766      00
 767 097f 4C89EF   		movq	%r13, %rdi
 768 0982 E8000000 		call	strtoul
 768      00
 769 0987 41833C24 		cmpl	$0, (%r12)
 769      00
 770 098c 753C     		jne	.L116
 771 098e 3DFF0000 		cmpl	$255, %eax
 771      00
 772 0993 773D     		ja	.L117
 773 0995 488B5424 		movq	64(%rsp), %rdx
 773      40
 774 099a 48891500 		movq	%rdx, ptr(%rip)
 774      000000
 775 09a1 8A12     		movb	(%rdx), %dl
 776 09a3 80FA3B   		cmpb	$59, %dl
 777 09a6 7404     		je	.L122
 778 09a8 84D2     		testb	%dl, %dl
 779 09aa 752E     		jne	.L118
 780              	.L122:
 781 09ac 0FB6F0   		movzbl	%al, %esi
 782 09af 4889DA   		movq	%rbx, %rdx
 783 09b2 4889EF   		movq	%rbp, %rdi
 784 09b5 E8000000 		call	flSelectConduit
 784      00
 785 09ba 85C0     		testl	%eax, %eax
 786 09bc 0F848600 		je	.L55
 786      0000
 787 09c2 41BD0100 		movl	$1, %r13d
 787      0000
 788 09c8 EB16     		jmp	.L85
 789              	.L116:
 790 09ca 41BD0200 		movl	$2, %r13d
 790      0000
 791 09d0 EB0E     		jmp	.L85
 792              	.L117:
 793 09d2 41BD0400 		movl	$4, %r13d
 793      0000
 794 09d8 EB06     		jmp	.L85
 795              	.L118:
 796 09da 41BD0500 		movl	$5, %r13d
 796      0000
 797              	.L85:
 798 09e0 4531E4   		xorl	%r12d, %r12d
 799 09e3 4531FF   		xorl	%r15d, %r15d
 800 09e6 4531F6   		xorl	%r14d, %r14d
 801 09e9 E9AE0000 		jmp	.L16
 801      00
 802              	.L175:
 803 09ee 4969C840 		imulq	$1000000, %r8, %rcx
 803      420F00
 804 09f5 F2490F2A 		cvtsi2sdq	%r15, %xmm0
 804      C7
 805 09fa 4969D140 		imulq	$1000000, %r9, %rdx
 805      420F00
 806 0a01 448B4424 		movl	16(%rsp), %r8d
 806      10
 807 0a06 4801F1   		addq	%rsi, %rcx
 808 0a09 BE000000 		movl	$.LC5, %esi
 808      00
 809 0a0e 4801FA   		addq	%rdi, %rdx
 810 0a11 BF010000 		movl	$1, %edi
 810      00
 811 0a16 4829CA   		subq	%rcx, %rdx
 812 0a19 0FB7C8   		movzwl	%ax, %ecx
 813 0a1c B001     		movb	$1, %al
 814 0a1e F2480F2A 		cvtsi2sdq	%rdx, %xmm1
 814      CA
 815 0a23 4489E2   		movl	%r12d, %edx
 816 0a26 F20F5E0D 		divsd	.LC3(%rip), %xmm1
 816      00000000 
 817 0a2e F20F590D 		mulsd	.LC4(%rip), %xmm1
 817      00000000 
 818 0a36 F20F5EC1 		divsd	%xmm1, %xmm0
 819 0a3a E8000000 		call	__printf_chk
 819      00
 820              	.L50:
 821 0a3f 4585ED   		testl	%r13d, %r13d
 822 0a42 0F858C01 		jne	.L93
 822      0000
 823              	.L55:
 824 0a48 488B0500 		movq	ptr(%rip), %rax
 824      000000
 825 0a4f 8A00     		movb	(%rax), %al
 826 0a51 3C3B     		cmpb	$59, %al
 827 0a53 0F8402F7 		je	.L17
 827      FFFF
 828 0a59 84C0     		testb	%al, %al
 829 0a5b 7530     		jne	.L119
 830 0a5d 488B5424 		movq	120(%rsp), %rdx
 830      78
 831 0a62 488B7424 		movq	112(%rsp), %rsi
 831      70
 832 0a67 31FF     		xorl	%edi, %edi
 833 0a69 4531E4   		xorl	%r12d, %r12d
 834 0a6c 4531FF   		xorl	%r15d, %r15d
 835 0a6f 4531F6   		xorl	%r14d, %r14d
 836 0a72 4531ED   		xorl	%r13d, %r13d
 837 0a75 E8000000 		call	dump
 837      00
 838 0a7a EB20     		jmp	.L16
 839              	.L96:
 840 0a7c 4531E4   		xorl	%r12d, %r12d
 841 0a7f 4531FF   		xorl	%r15d, %r15d
 842 0a82 4531F6   		xorl	%r14d, %r14d
 843 0a85 41BD0100 		movl	$1, %r13d
 843      0000
 844 0a8b EB0F     		jmp	.L16
 845              	.L119:
 846 0a8d 4531E4   		xorl	%r12d, %r12d
 847 0a90 4531FF   		xorl	%r15d, %r15d
 848 0a93 4531F6   		xorl	%r14d, %r14d
 849 0a96 41BD0500 		movl	$5, %r13d
 849      0000
 850              	.L16:
 851 0a9c 488D7C24 		leaq	112(%rsp), %rdi
 851      70
 852 0aa1 E8000000 		call	bufDestroy
 852      00
 853 0aa6 4D85E4   		testq	%r12, %r12
 854 0aa9 7408     		je	.L89
 855 0aab 4C89E7   		movq	%r12, %rdi
 856 0aae E8000000 		call	fclose
 856      00
 857              	.L89:
 858 0ab3 4C89FF   		movq	%r15, %rdi
 859 0ab6 E8000000 		call	free
 859      00
 860 0abb 4C89F7   		movq	%r14, %rdi
 861 0abe E8000000 		call	free
 861      00
 862 0ac3 4183FD01 		cmpl	$1, %r13d
 863 0ac7 0F862B01 		jbe	.L123
 863      0000
 864 0acd 4C8B0500 		movq	ptr(%rip), %r8
 864      000000
 865 0ad4 4C8B4C24 		movq	8(%rsp), %r9
 865      08
 866 0ad9 4489E8   		movl	%r13d, %eax
 867 0adc 488B0CC5 		movq	errMessages(,%rax,8), %rcx
 867      00000000 
 868 0ae4 488B3D00 		movq	stderr(%rip), %rdi
 868      000000
 869 0aeb BA000000 		movl	$.LC8, %edx
 869      00
 870 0af0 BE010000 		movl	$1, %esi
 870      00
 871 0af5 31C0     		xorl	%eax, %eax
 872 0af7 31DB     		xorl	%ebx, %ebx
 873 0af9 4D29C8   		subq	%r9, %r8
 874 0afc 4489C5   		movl	%r8d, %ebp
 875 0aff E8000000 		call	__fprintf_chk
 875      00
 876              	.L91:
 877 0b04 39EB     		cmpl	%ebp, %ebx
 878 0b06 7D1C     		jge	.L174
 879 0b08 488B3D00 		movq	stderr(%rip), %rdi
 879      000000
 880 0b0f BA000000 		movl	$.LC9, %edx
 880      00
 881 0b14 BE010000 		movl	$1, %esi
 881      00
 882 0b19 31C0     		xorl	%eax, %eax
 883 0b1b FFC3     		incl	%ebx
 884 0b1d E8000000 		call	__fprintf_chk
 884      00
 885 0b22 EBE0     		jmp	.L91
 886              	.L174:
 887 0b24 488B3D00 		movq	stderr(%rip), %rdi
 887      000000
 888 0b2b BA000000 		movl	$.LC10, %edx
 888      00
 889 0b30 BE010000 		movl	$1, %esi
 889      00
 890 0b35 31C0     		xorl	%eax, %eax
 891 0b37 E8000000 		call	__fprintf_chk
 891      00
 892 0b3c E9B70000 		jmp	.L123
 892      00
 893              	.L26:
 894 0b41 4589E7   		movl	%r12d, %r15d
 895 0b44 488D7C24 		leaq	112(%rsp), %rdi
 895      70
 896 0b49 31F6     		xorl	%esi, %esi
 897 0b4b 4889D9   		movq	%rbx, %rcx
 898 0b4e 4C89FA   		movq	%r15, %rdx
 899 0b51 4C8B7424 		movq	120(%rsp), %r14
 899      78
 900 0b56 E8000000 		call	bufAppendConst
 900      00
 901 0b5b 85C0     		testl	%eax, %eax
 902 0b5d 7575     		jne	.L93
 903 0b5f 488D7C24 		leaq	80(%rsp), %rdi
 903      50
 904 0b64 31F6     		xorl	%esi, %esi
 905 0b66 E8000000 		call	gettimeofday
 905      00
 906 0b6b 0FB67424 		movzbl	16(%rsp), %esi
 906      10
 907 0b70 4C89F1   		movq	%r14, %rcx
 908 0b73 48034C24 		addq	112(%rsp), %rcx
 908      70
 909 0b78 4989D8   		movq	%rbx, %r8
 910 0b7b 4C89FA   		movq	%r15, %rdx
 911 0b7e 4889EF   		movq	%rbp, %rdi
 912 0b81 E8000000 		call	flReadChannel
 912      00
 913 0b86 488D7C24 		leaq	96(%rsp), %rdi
 913      60
 914 0b8b 31F6     		xorl	%esi, %esi
 915 0b8d 4189C5   		movl	%eax, %r13d
 916 0b90 E8000000 		call	gettimeofday
 916      00
 917 0b95 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 917      000000
 918 0b9c 4C8B4424 		movq	80(%rsp), %r8
 918      50
 919 0ba1 488B7424 		movq	88(%rsp), %rsi
 919      58
 920 0ba6 4C8B4C24 		movq	96(%rsp), %r9
 920      60
 921 0bab 488B7C24 		movq	104(%rsp), %rdi
 921      68
 922 0bb0 0F8489FE 		je	.L50
 922      FFFF
 923 0bb6 4C037424 		addq	112(%rsp), %r14
 923      70
 924 0bbb 31C9     		xorl	%ecx, %ecx
 925 0bbd 31C0     		xorl	%eax, %eax
 926              	.L51:
 927 0bbf 4939CF   		cmpq	%rcx, %r15
 928 0bc2 0F8426FE 		je	.L175
 928      FFFF
 929 0bc8 410FB614 		movzbl	(%r14,%rcx), %edx
 929      0E
 930 0bcd 48FFC1   		incq	%rcx
 931 0bd0 01D0     		addl	%edx, %eax
 932 0bd2 EBEB     		jmp	.L51
 933              	.L93:
 934 0bd4 4531E4   		xorl	%r12d, %r12d
 935 0bd7 4531FF   		xorl	%r15d, %r15d
 936 0bda 41BD0100 		movl	$1, %r13d
 936      0000
 937 0be0 E95DFBFF 		jmp	.L63
 937      FF
 938              	.L77:
 939 0be5 8D47BF   		leal	-65(%rdi), %eax
 940 0be8 3C05     		cmpb	$5, %al
 941 0bea 0F8721FC 		ja	.L76
 941      FFFF
 942 0bf0 8D47C9   		leal	-55(%rdi), %eax
 943 0bf3 E910FCFF 		jmp	.L78
 943      FF
 944              	.L123:
 945 0bf8 4881C498 		addq	$152, %rsp
 945      000000
 946              		.cfi_def_cfa_offset 56
 947 0bff 4489E8   		movl	%r13d, %eax
 948 0c02 5B       		popq	%rbx
 949              		.cfi_def_cfa_offset 48
 950 0c03 5D       		popq	%rbp
 951              		.cfi_def_cfa_offset 40
 952 0c04 415C     		popq	%r12
 953              		.cfi_def_cfa_offset 32
 954 0c06 415D     		popq	%r13
 955              		.cfi_def_cfa_offset 24
 956 0c08 415E     		popq	%r14
 957              		.cfi_def_cfa_offset 16
 958 0c0a 415F     		popq	%r15
 959              		.cfi_def_cfa_offset 8
 960 0c0c C3       		ret
 961              		.cfi_endproc
 962              	.LFE89:
 964              		.text
 965              		.p2align 4,,15
 966              		.globl	decrypt
 968              	decrypt:
 969              	.LFB75:
 970              		.cfi_startproc
 971 0000 53       		pushq	%rbx
 972              		.cfi_def_cfa_offset 16
 973              		.cfi_offset 3, -16
 974 0001 8B0F     		movl	(%rdi), %ecx
 975 0003 8B5704   		movl	4(%rdi), %edx
 976 0006 8B1E     		movl	(%rsi), %ebx
 977 0008 448B5E04 		movl	4(%rsi), %r11d
 978 000c 448B5608 		movl	8(%rsi), %r10d
 979 0010 448B4E0C 		movl	12(%rsi), %r9d
 980 0014 BE2037EF 		movl	$-957401312, %esi
 980      C6
 981 0019 0F1F8000 		.p2align 4,,10
 981      000000
 982              		.p2align 3
 983              	.L178:
 984 0020 89C8     		movl	%ecx, %eax
 985 0022 4189C8   		movl	%ecx, %r8d
 986 0025 C1E004   		sall	$4, %eax
 987 0028 41C1E805 		shrl	$5, %r8d
 988 002c 4501C8   		addl	%r9d, %r8d
 989 002f 4401D0   		addl	%r10d, %eax
 990 0032 4431C0   		xorl	%r8d, %eax
 991 0035 448D040E 		leal	(%rsi,%rcx), %r8d
 992 0039 4431C0   		xorl	%r8d, %eax
 993 003c 29C2     		subl	%eax, %edx
 994 003e 89D0     		movl	%edx, %eax
 995 0040 4189D0   		movl	%edx, %r8d
 996 0043 C1E004   		sall	$4, %eax
 997 0046 41C1E805 		shrl	$5, %r8d
 998 004a 4501D8   		addl	%r11d, %r8d
 999 004d 01D8     		addl	%ebx, %eax
 1000 004f 4431C0   		xorl	%r8d, %eax
 1001 0052 448D0432 		leal	(%rdx,%rsi), %r8d
 1002 0056 4431C0   		xorl	%r8d, %eax
 1003 0059 29C1     		subl	%eax, %ecx
 1004 005b 81C64786 		addl	$1640531527, %esi
 1004      C861
 1005 0061 75BD     		jne	.L178
 1006 0063 895704   		movl	%edx, 4(%rdi)
 1007 0066 890F     		movl	%ecx, (%rdi)
 1008 0068 5B       		popq	%rbx
 1009              		.cfi_def_cfa_offset 8
 1010 0069 C3       		ret
 1011              		.cfi_endproc
 1012              	.LFE75:
 1014 006a 660F1F44 		.p2align 4,,15
 1014      0000
 1015              		.globl	encrypt
 1017              	encrypt:
 1018              	.LFB76:
 1019              		.cfi_startproc
 1020 0070 53       		pushq	%rbx
 1021              		.cfi_def_cfa_offset 16
 1022              		.cfi_offset 3, -16
 1023 0071 8B0F     		movl	(%rdi), %ecx
 1024 0073 8B5704   		movl	4(%rdi), %edx
 1025 0076 8B1E     		movl	(%rsi), %ebx
 1026 0078 448B5E04 		movl	4(%rsi), %r11d
 1027 007c 448B5608 		movl	8(%rsi), %r10d
 1028 0080 448B4E0C 		movl	12(%rsi), %r9d
 1029 0084 31F6     		xorl	%esi, %esi
 1030 0086 662E0F1F 		.p2align 4,,10
 1030      84000000 
 1030      0000
 1031              		.p2align 3
 1032              	.L182:
 1033 0090 89D0     		movl	%edx, %eax
 1034 0092 4189D0   		movl	%edx, %r8d
 1035 0095 81EE4786 		subl	$1640531527, %esi
 1035      C861
 1036 009b C1E004   		sall	$4, %eax
 1037 009e 41C1E805 		shrl	$5, %r8d
 1038 00a2 4501D8   		addl	%r11d, %r8d
 1039 00a5 01D8     		addl	%ebx, %eax
 1040 00a7 4431C0   		xorl	%r8d, %eax
 1041 00aa 448D0432 		leal	(%rdx,%rsi), %r8d
 1042 00ae 4431C0   		xorl	%r8d, %eax
 1043 00b1 01C1     		addl	%eax, %ecx
 1044 00b3 89C8     		movl	%ecx, %eax
 1045 00b5 4189C8   		movl	%ecx, %r8d
 1046 00b8 C1E004   		sall	$4, %eax
 1047 00bb 41C1E805 		shrl	$5, %r8d
 1048 00bf 4501C8   		addl	%r9d, %r8d
 1049 00c2 4401D0   		addl	%r10d, %eax
 1050 00c5 4431C0   		xorl	%r8d, %eax
 1051 00c8 448D0431 		leal	(%rcx,%rsi), %r8d
 1052 00cc 4431C0   		xorl	%r8d, %eax
 1053 00cf 01C2     		addl	%eax, %edx
 1054 00d1 81FE2037 		cmpl	$-957401312, %esi
 1054      EFC6
 1055 00d7 75B7     		jne	.L182
 1056 00d9 895704   		movl	%edx, 4(%rdi)
 1057 00dc 890F     		movl	%ecx, (%rdi)
 1058 00de 5B       		popq	%rbx
 1059              		.cfi_def_cfa_offset 8
 1060 00df C3       		ret
 1061              		.cfi_endproc
 1062              	.LFE76:
 1064              		.p2align 4,,15
 1065              		.globl	decrypt64
 1067              	decrypt64:
 1068              	.LFB77:
 1069              		.cfi_startproc
 1070 00e0 8B0F     		movl	(%rdi), %ecx
 1071 00e2 8B5704   		movl	4(%rdi), %edx
 1072 00e5 BE2037EF 		movl	$-957401312, %esi
 1072      C6
 1073 00ea 660F1F44 		.p2align 4,,10
 1073      0000
 1074              		.p2align 3
 1075              	.L186:
 1076 00f0 89C8     		movl	%ecx, %eax
 1077 00f2 4189C8   		movl	%ecx, %r8d
 1078 00f5 C1E004   		sall	$4, %eax
 1079 00f8 41C1E805 		shrl	$5, %r8d
 1080 00fc 4181E8A9 		subl	$15764393, %r8d
 1080      8BF000
 1081 0103 05F799FD 		addl	$1140693495, %eax
 1081      43
 1082 0108 4431C0   		xorl	%r8d, %eax
 1083 010b 448D040E 		leal	(%rsi,%rcx), %r8d
 1084 010f 4431C0   		xorl	%r8d, %eax
 1085 0112 29C2     		subl	%eax, %edx
 1086 0114 89D0     		movl	%edx, %eax
 1087 0116 4189D0   		movl	%edx, %r8d
 1088 0119 C1E004   		sall	$4, %eax
 1089 011c 41C1E805 		shrl	$5, %r8d
 1090 0120 4181C08F 		addl	$1979237519, %r8d
 1090      C4F875
 1091 0127 058CC127 		addl	$690471308, %eax
 1091      29
 1092 012c 4431C0   		xorl	%r8d, %eax
 1093 012f 448D0432 		leal	(%rdx,%rsi), %r8d
 1094 0133 4431C0   		xorl	%r8d, %eax
 1095 0136 29C1     		subl	%eax, %ecx
 1096 0138 81C64786 		addl	$1640531527, %esi
 1096      C861
 1097 013e 75B0     		jne	.L186
 1098 0140 890F     		movl	%ecx, (%rdi)
 1099 0142 895704   		movl	%edx, 4(%rdi)
 1100 0145 C3       		ret
 1101              		.cfi_endproc
 1102              	.LFE77:
 1104 0146 662E0F1F 		.p2align 4,,15
 1104      84000000 
 1104      0000
 1105              		.globl	encrypt64
 1107              	encrypt64:
 1108              	.LFB78:
 1109              		.cfi_startproc
 1110 0150 8B0F     		movl	(%rdi), %ecx
 1111 0152 8B5704   		movl	4(%rdi), %edx
 1112 0155 31F6     		xorl	%esi, %esi
 1113 0157 660F1F84 		.p2align 4,,10
 1113      00000000 
 1113      00
 1114              		.p2align 3
 1115              	.L189:
 1116 0160 89D0     		movl	%edx, %eax
 1117 0162 4189D0   		movl	%edx, %r8d
 1118 0165 81EE4786 		subl	$1640531527, %esi
 1118      C861
 1119 016b C1E004   		sall	$4, %eax
 1120 016e 41C1E805 		shrl	$5, %r8d
 1121 0172 4181C08F 		addl	$1979237519, %r8d
 1121      C4F875
 1122 0179 058CC127 		addl	$690471308, %eax
 1122      29
 1123 017e 4431C0   		xorl	%r8d, %eax
 1124 0181 448D0432 		leal	(%rdx,%rsi), %r8d
 1125 0185 4431C0   		xorl	%r8d, %eax
 1126 0188 01C1     		addl	%eax, %ecx
 1127 018a 89C8     		movl	%ecx, %eax
 1128 018c 4189C8   		movl	%ecx, %r8d
 1129 018f C1E004   		sall	$4, %eax
 1130 0192 41C1E805 		shrl	$5, %r8d
 1131 0196 4181E8A9 		subl	$15764393, %r8d
 1131      8BF000
 1132 019d 05F799FD 		addl	$1140693495, %eax
 1132      43
 1133 01a2 4431C0   		xorl	%r8d, %eax
 1134 01a5 448D0431 		leal	(%rcx,%rsi), %r8d
 1135 01a9 4431C0   		xorl	%r8d, %eax
 1136 01ac 01C2     		addl	%eax, %edx
 1137 01ae 81FE2037 		cmpl	$-957401312, %esi
 1137      EFC6
 1138 01b4 75AA     		jne	.L189
 1139 01b6 890F     		movl	%ecx, (%rdi)
 1140 01b8 895704   		movl	%edx, 4(%rdi)
 1141 01bb C3       		ret
 1142              		.cfi_endproc
 1143              	.LFE78:
 1145 01bc 0F1F4000 		.p2align 4,,15
 1146              		.globl	myHash
 1148              	myHash:
 1149              	.LFB79:
 1150              		.cfi_startproc
 1151 01c0 0FB7D7   		movzwl	%di, %edx
 1152 01c3 83E701   		andl	$1, %edi
 1153 01c6 F7DF     		negl	%edi
 1154 01c8 6681E700 		andw	$2048, %di
 1154      08
 1155 01cd F6C202   		testb	$2, %dl
 1156 01d0 8D8F0010 		leal	4096(%rdi), %ecx
 1156      0000
 1157 01d6 0F44CF   		cmove	%edi, %ecx
 1158 01d9 F6C204   		testb	$4, %dl
 1159 01dc 8D810020 		leal	8192(%rcx), %eax
 1159      0000
 1160 01e2 0F44C1   		cmove	%ecx, %eax
 1161 01e5 F6C208   		testb	$8, %dl
 1162 01e8 8D880040 		leal	16384(%rax), %ecx
 1162      0000
 1163 01ee 0F44C8   		cmove	%eax, %ecx
 1164 01f1 F6C210   		testb	$16, %dl
 1165 01f4 8D810080 		leal	-32768(%rcx), %eax
 1165      FFFF
 1166 01fa 0F44C1   		cmove	%ecx, %eax
 1167 01fd F6C220   		testb	$32, %dl
 1168 0200 8D4801   		leal	1(%rax), %ecx
 1169 0203 0F44C8   		cmove	%eax, %ecx
 1170 0206 F6C240   		testb	$64, %dl
 1171 0209 8D4102   		leal	2(%rcx), %eax
 1172 020c 0F44C1   		cmove	%ecx, %eax
 1173 020f F6C280   		testb	$-128, %dl
 1174 0212 8D4804   		leal	4(%rax), %ecx
 1175 0215 0F44C8   		cmove	%eax, %ecx
 1176 0218 F6C601   		testb	$1, %dh
 1177 021b 8D4108   		leal	8(%rcx), %eax
 1178 021e 0F44C1   		cmove	%ecx, %eax
 1179 0221 F6C602   		testb	$2, %dh
 1180 0224 8D4810   		leal	16(%rax), %ecx
 1181 0227 0F44C8   		cmove	%eax, %ecx
 1182 022a F6C604   		testb	$4, %dh
 1183 022d 8D4120   		leal	32(%rcx), %eax
 1184 0230 0F44C1   		cmove	%ecx, %eax
 1185 0233 F6C608   		testb	$8, %dh
 1186 0236 8D4840   		leal	64(%rax), %ecx
 1187 0239 0F44C8   		cmove	%eax, %ecx
 1188 023c F6C610   		testb	$16, %dh
 1189 023f 8D818000 		leal	128(%rcx), %eax
 1189      0000
 1190 0245 0F44C1   		cmove	%ecx, %eax
 1191 0248 F6C620   		testb	$32, %dh
 1192 024b 8D880001 		leal	256(%rax), %ecx
 1192      0000
 1193 0251 0F44C8   		cmove	%eax, %ecx
 1194 0254 F6C640   		testb	$64, %dh
 1195 0257 8D810002 		leal	512(%rcx), %eax
 1195      0000
 1196 025d 0F44C1   		cmove	%ecx, %eax
 1197 0260 C1FA0F   		sarl	$15, %edx
 1198 0263 8D880004 		leal	1024(%rax), %ecx
 1198      0000
 1199 0269 85D2     		testl	%edx, %edx
 1200 026b 0F45C1   		cmovne	%ecx, %eax
 1201 026e C3       		ret
 1202              		.cfi_endproc
 1203              	.LFE79:
 1205              		.section	.rodata.str1.1
 1206              	.LC11:
 1207 0036 2C00     		.string	","
 1208              	.LC12:
 1209 0038 256400   		.string	"%d"
 1210              		.text
 1211 026f 90       		.p2align 4,,15
 1212              		.globl	format
 1214              	format:
 1215              	.LFB80:
 1216              		.cfi_startproc
 1217 0270 53       		pushq	%rbx
 1218              		.cfi_def_cfa_offset 16
 1219              		.cfi_offset 3, -16
 1220 0271 BE000000 		movl	$.LC11, %esi
 1220      00
 1221 0276 31DB     		xorl	%ebx, %ebx
 1222 0278 E8000000 		call	strtok
 1222      00
 1223 027d 4885C0   		testq	%rax, %rax
 1224 0280 743F     		je	.L191
 1225              		.p2align 4,,10
 1226 0282 660F1F44 		.p2align 3
 1226      0000
 1227              	.L197:
 1228 0288 48630D00 		movslq	numLines(%rip), %rcx
 1228      000000
 1229 028f 4863D3   		movslq	%ebx, %rdx
 1230 0292 4889C7   		movq	%rax, %rdi
 1231 0295 BE000000 		movl	$.LC12, %esi
 1231      00
 1232 029a 31C0     		xorl	%eax, %eax
 1233 029c 83C301   		addl	$1, %ebx
 1234 029f 488D148A 		leaq	(%rdx,%rcx,4), %rdx
 1235 02a3 488D1495 		leaq	dataFromCSV(,%rdx,4), %rdx
 1235      00000000 
 1236 02ab E8000000 		call	sscanf
 1236      00
 1237 02b0 31FF     		xorl	%edi, %edi
 1238 02b2 BE000000 		movl	$.LC11, %esi
 1238      00
 1239 02b7 E8000000 		call	strtok
 1239      00
 1240 02bc 4885C0   		testq	%rax, %rax
 1241 02bf 75C7     		jne	.L197
 1242              	.L191:
 1243 02c1 5B       		popq	%rbx
 1244              		.cfi_def_cfa_offset 8
 1245 02c2 C3       		ret
 1246              		.cfi_endproc
 1247              	.LFE80:
 1249 02c3 66666666 		.p2align 4,,15
 1249      2E0F1F84 
 1249      00000000 
 1249      00
 1250              		.globl	find
 1252              	find:
 1253              	.LFB81:
 1254              		.cfi_startproc
 1255 02d0 448B1500 		movl	numLines(%rip), %r10d
 1255      000000
 1256 02d7 4585D2   		testl	%r10d, %r10d
 1257 02da 7E54     		jle	.L206
 1258 02dc B8000000 		movl	$dataFromCSV+16, %eax
 1258      00
 1259 02e1 41B90100 		movl	$1, %r9d
 1259      0000
 1260 02e7 EB14     		jmp	.L204
 1261 02e9 0F1F8000 		.p2align 4,,10
 1261      000000
 1262              		.p2align 3
 1263              	.L202:
 1264 02f0 4183C101 		addl	$1, %r9d
 1265 02f4 4883C010 		addq	$16, %rax
 1266 02f8 4539D1   		cmpl	%r10d, %r9d
 1267 02fb 7F33     		jg	.L206
 1268              	.L204:
 1269 02fd 663B38   		cmpw	(%rax), %di
 1270 0300 75EE     		jne	.L202
 1271 0302 663B7004 		cmpw	4(%rax), %si
 1272 0306 75E8     		jne	.L202
 1273 0308 4963C1   		movslq	%r9d, %rax
 1274 030b 4889C6   		movq	%rax, %rsi
 1275 030e 48C1E604 		salq	$4, %rsi
 1276 0312 83BE0000 		cmpl	$1, dataFromCSV+8(%rsi)
 1276      000001
 1277 0319 7418     		je	.L207
 1278              	.L203:
 1279 031b 48C1E004 		salq	$4, %rax
 1280 031f 8B800000 		movl	dataFromCSV+12(%rax), %eax
 1280      0000
 1281 0325 8901     		movl	%eax, (%rcx)
 1282 0327 458908   		movl	%r9d, (%r8)
 1283 032a B8010000 		movl	$1, %eax
 1283      00
 1284 032f C3       		ret
 1285              		.p2align 4,,10
 1286              		.p2align 3
 1287              	.L206:
 1288 0330 31C0     		xorl	%eax, %eax
 1289 0332 C3       		ret
 1290              	.L207:
 1291 0333 C60201   		movb	$1, (%rdx)
 1292 0336 EBE3     		jmp	.L203
 1293              		.cfi_endproc
 1294              	.LFE81:
 1296 0338 0F1F8400 		.p2align 4,,15
 1296      00000000 
 1297              		.globl	suffBal
 1299              	suffBal:
 1300              	.LFB82:
 1301              		.cfi_startproc
 1302 0340 B8640000 		movl	$100, %eax
 1302      00
 1303 0345 0FB6D2   		movzbl	%dl, %edx
 1304 0348 0FB6C9   		movzbl	%cl, %ecx
 1305 034b 0FAFD0   		imull	%eax, %edx
 1306 034e 0316     		addl	(%rsi), %edx
 1307 0350 450FB6C0 		movzbl	%r8b, %r8d
 1308 0354 69C9F401 		imull	$500, %ecx, %ecx
 1308      0000
 1309 035a 450FB6C9 		movzbl	%r9b, %r9d
 1310 035e 4569C0E8 		imull	$1000, %r8d, %r8d
 1310      030000
 1311 0365 01CA     		addl	%ecx, %edx
 1312 0367 4569C9D0 		imull	$2000, %r9d, %r9d
 1312      070000
 1313 036e 4401C2   		addl	%r8d, %edx
 1314 0371 4401CA   		addl	%r9d, %edx
 1315 0374 39FA     		cmpl	%edi, %edx
 1316 0376 8916     		movl	%edx, (%rsi)
 1317 0378 0F9EC0   		setle	%al
 1318 037b C3       		ret
 1319              		.cfi_endproc
 1320              	.LFE82:
 1322              		.section	.rodata.str1.8
 1323 007e 0000     		.align 8
 1324              	.LC13:
 1325 0080 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 1325      20202020 
 1325      20202020 
 1325      76656E64 
 1325      6F722049 
 1326              		.section	.rodata.str1.1
 1327              	.LC14:
 1328 003b 3C564944 		.string	"<VID:PID>"
 1328      3A504944 
 1328      3E00
 1329              	.LC15:
 1330 0045 69767000 		.string	"ivp"
 1331              	.LC16:
 1332 0049 6900     		.string	"i"
 1333              		.section	.rodata.str1.8
 1334 00b5 000000   		.align 8
 1335              	.LC17:
 1336 00b8 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 1336      20202056 
 1336      49442C20 
 1336      50494420 
 1336      616E6420 
 1337              		.section	.rodata.str1.1
 1338              	.LC18:
 1339 004b 3C564944 		.string	"<VID:PID[:DID]>"
 1339      3A504944 
 1339      5B3A4449 
 1339      445D3E00 
 1340              	.LC19:
 1341 005b 767000   		.string	"vp"
 1342              	.LC20:
 1343 005e 7600     		.string	"v"
 1344              		.section	.rodata.str1.8
 1345 00ed 000000   		.align 8
 1346              	.LC21:
 1347 00f0 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 1347      20202020 
 1347      6669726D 
 1347      77617265 
 1347      20746F20 
 1348              		.section	.rodata.str1.1
 1349              	.LC22:
 1350 0060 3C666972 		.string	"<firmware.hex>"
 1350      6D776172 
 1350      652E6865 
 1350      783E00
 1351              	.LC23:
 1352 006f 667700   		.string	"fw"
 1353              	.LC24:
 1354 0072 6600     		.string	"f"
 1355              		.section	.rodata.str1.8
 1356 011d 000000   		.align 8
 1357              	.LC25:
 1358 0120 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 1358      642F7772 
 1358      69746520 
 1358      64696769 
 1358      74616C20 
 1359              		.section	.rodata.str1.1
 1360              	.LC26:
 1361 0074 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 1361      4366675B 
 1361      2C626974 
 1361      4366675D 
 1361      2A3E00
 1362              	.LC27:
 1363 0087 706F7274 		.string	"ports"
 1363      7300
 1364              	.LC28:
 1365 008d 6400     		.string	"d"
 1366              	.LC29:
 1367 008f 20202020 		.string	"         query the JTAG chain"
 1367      20202020 
 1367      20717565 
 1367      72792074 
 1367      6865204A 
 1368              	.LC30:
 1369 00ad 3C6A7461 		.string	"<jtagBits>"
 1369      67426974 
 1369      733E00
 1370              	.LC31:
 1371 00b8 71756572 		.string	"query"
 1371      7900
 1372              	.LC32:
 1373 00be 7100     		.string	"q"
 1374              	.LC33:
 1375 00c0 20202020 		.string	"         program a device"
 1375      20202020 
 1375      2070726F 
 1375      6772616D 
 1375      20612064 
 1376              	.LC34:
 1377 00da 3C636F6E 		.string	"<config>"
 1377      6669673E 
 1377      00
 1378              	.LC35:
 1379 00e3 70726F67 		.string	"program"
 1379      72616D00 
 1380              	.LC36:
 1381 00eb 7000     		.string	"p"
 1382              		.section	.rodata.str1.8
 1383 014d 000000   		.align 8
 1384              	.LC37:
 1385 0150 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 1385      20202020 
 1385      77686963 
 1385      6820636F 
 1385      6D6D2063 
 1386              		.section	.rodata.str1.1
 1387              	.LC38:
 1388 00ed 3C636F6E 		.string	"<conduit>"
 1388      64756974 
 1388      3E00
 1389              	.LC39:
 1390 00f7 636F6E64 		.string	"conduit"
 1390      75697400 
 1391              	.LC40:
 1392 00ff 6300     		.string	"c"
 1393              		.section	.rodata.str1.8
 1394 0184 00000000 		.align 8
 1395              	.LC41:
 1396 0188 20202020 		.string	"    a series of CommFPGA actions"
 1396      61207365 
 1396      72696573 
 1396      206F6620 
 1396      436F6D6D 
 1397              		.section	.rodata.str1.1
 1398              	.LC42:
 1399 0101 3C616374 		.string	"<actionString>"
 1399      696F6E53 
 1399      7472696E 
 1399      673E00
 1400              	.LC43:
 1401 0110 61637469 		.string	"action"
 1401      6F6E00
 1402              	.LC44:
 1403 0117 6100     		.string	"a"
 1404              		.section	.rodata.str1.8
 1405 01a9 00000000 		.align 8
 1405      000000
 1406              	.LC45:
 1407 01b0 20202020 		.string	"                    start up an interactive CommFPGA session"
 1407      20202020 
 1407      20202020 
 1407      20202020 
 1407      20202020 
 1408              		.section	.rodata.str1.1
 1409              	.LC46:
 1410 0119 7368656C 		.string	"shell"
 1410      6C00
 1411              	.LC47:
 1412 011f 7300     		.string	"s"
 1413              		.section	.rodata.str1.8
 1414 01ed 000000   		.align 8
 1415              	.LC48:
 1416 01f0 20202020 		.string	"                enable benchmarking & checksumming"
 1416      20202020 
 1416      20202020 
 1416      20202020 
 1416      656E6162 
 1417              		.section	.rodata.str1.1
 1418              	.LC49:
 1419 0121 62656E63 		.string	"benchmark"
 1419      686D6172 
 1419      6B00
 1420              	.LC50:
 1421 012b 6200     		.string	"b"
 1422              		.section	.rodata.str1.8
 1423 0223 00000000 		.align 8
 1423      00
 1424              	.LC51:
 1425 0228 20202020 		.string	"                    reset the bulk endpoints"
 1425      20202020 
 1425      20202020 
 1425      20202020 
 1425      20202020 
 1426              		.section	.rodata.str1.1
 1427              	.LC52:
 1428 012d 72657365 		.string	"reset"
 1428      7400
 1429              	.LC53:
 1430 0133 7200     		.string	"r"
 1431              		.section	.rodata.str1.8
 1432 0255 000000   		.align 8
 1433              	.LC54:
 1434 0258 20202077 		.string	"   write data from channel ch to file"
 1434      72697465 
 1434      20646174 
 1434      61206672 
 1434      6F6D2063 
 1435              		.section	.rodata.str1.1
 1436              	.LC55:
 1437 0135 3C63683A 		.string	"<ch:file.bin>"
 1437      66696C65 
 1437      2E62696E 
 1437      3E00
 1438              	.LC56:
 1439 0143 64756D70 		.string	"dumploop"
 1439      6C6F6F70 
 1439      00
 1440              	.LC57:
 1441 014c 6C00     		.string	"l"
 1442              		.section	.rodata.str1.8
 1443 027e 0000     		.align 8
 1444              	.LC58:
 1445 0280 20202020 		.string	"                     print this help and exit"
 1445      20202020 
 1445      20202020 
 1445      20202020 
 1445      20202020 
 1446              		.section	.rodata.str1.1
 1447              	.LC59:
 1448 014e 68656C70 		.string	"help"
 1448      00
 1449              	.LC60:
 1450 0153 6800     		.string	"h"
 1451              		.section	.rodata.str1.8
 1452 02ae 0000     		.align 8
 1453              	.LC61:
 1454 02b0 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 1454      72697465 
 1454      20666972 
 1454      6D776172 
 1454      6520746F 
 1455              		.section	.rodata.str1.1
 1456              	.LC62:
 1457 0155 3C737464 		.string	"<std|fw.hex|fw.iic>"
 1457      7C66772E 
 1457      6865787C 
 1457      66772E69 
 1457      69633E00 
 1458              	.LC63:
 1459 0169 65657072 		.string	"eeprom"
 1459      6F6D00
 1460              		.section	.rodata.str1.8
 1461 02d7 00       		.align 8
 1462              	.LC64:
 1463 02d8 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 1463      20626163 
 1463      6B757020 
 1463      46583227 
 1463      73204545 
 1464              		.section	.rodata.str1.1
 1465              	.LC65:
 1466 0170 3C6B6269 		.string	"<kbitSize:fw.iic>"
 1466      7453697A 
 1466      653A6677 
 1466      2E696963 
 1466      3E00
 1467              	.LC66:
 1468 0182 6261636B 		.string	"backup"
 1468      757000
 1469              		.section	.rodata.str1.8
 1470 0303 00000000 		.align 8
 1470      00
 1471              	.LC67:
 1472 0308 20202020 		.string	"                    communicates with the atm module"
 1472      20202020 
 1472      20202020 
 1472      20202020 
 1472      20202020 
 1473              		.section	.rodata.str1.1
 1474              	.LC68:
 1475 0189 6C6F6F70 		.string	"loopy"
 1475      7900
 1476              	.LC69:
 1477 018f 7900     		.string	"y"
 1478              	.LC70:
 1479 0191 666C636C 		.string	"flcli"
 1479      6900
 1480              	.LC71:
 1481 0197 25733A20 		.string	"%s: insufficient memory\n"
 1481      696E7375 
 1481      66666963 
 1481      69656E74 
 1481      206D656D 
 1482              		.section	.rodata.str1.8
 1483 033d 000000   		.align 8
 1484              	.LC72:
 1485 0340 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 1485      4C696E6B 
 1485      20436F6D 
 1485      6D616E64 
 1485      2D4C696E 
 1486              		.section	.rodata.str1.1
 1487              	.LC73:
 1488 01b0 0A00     		.string	"\n"
 1489              		.section	.rodata.str1.8
 1490 0394 00000000 		.align 8
 1491              	.LC74:
 1492 0398 0A496E74 		.string	"\nInteract with an FPGALink device.\n\n"
 1492      65726163 
 1492      74207769 
 1492      74682061 
 1492      6E204650 
 1493              		.section	.rodata.str1.1
 1494              	.LC75:
 1495 01b2 2020252D 		.string	"  %-10s %s\n"
 1495      31307320 
 1495      25730A00 
 1496              		.section	.rodata.str1.8
 1497 03bd 000000   		.align 8
 1498              	.LC76:
 1499 03c0 54727920 		.string	"Try '%s --help' for more information.\n"
 1499      27257320 
 1499      2D2D6865 
 1499      6C702720 
 1499      666F7220 
 1500 03e7 00       		.align 8
 1501              	.LC77:
 1502 03e8 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 1502      6D707469 
 1502      6E672074 
 1502      6F206F70 
 1502      656E2063 
 1503              		.section	.rodata.str1.1
 1504              	.LC78:
 1505 01be 4C6F6164 		.string	"Loading firmware into %s...\n"
 1505      696E6720 
 1505      6669726D 
 1505      77617265 
 1505      20696E74 
 1506              	.LC79:
 1507 01db 41776169 		.string	"Awaiting renumeration"
 1507      74696E67 
 1507      2072656E 
 1507      756D6572 
 1507      6174696F 
 1508              	.LC80:
 1509 01f1 2E00     		.string	"."
 1510              		.section	.rodata.str1.8
 1511              		.align 8
 1512              	.LC81:
 1513 0420 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 1513      4C696E6B 
 1513      20646576 
 1513      69636520 
 1513      64696420 
 1514 0453 00000000 		.align 8
 1514      00
 1515              	.LC82:
 1516 0458 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 1516      6D707469 
 1516      6E672074 
 1516      6F206F70 
 1516      656E2063 
 1517 0495 000000   		.align 8
 1518              	.LC83:
 1519 0498 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 1519      64206E6F 
 1519      74206F70 
 1519      656E2046 
 1519      5047414C 
 1520 04e2 00000000 		.align 8
 1520      0000
 1521              	.LC84:
 1522 04e8 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 1522      65637465 
 1522      6420746F 
 1522      20465047 
 1522      414C696E 
 1523 0537 00       		.align 8
 1524              	.LC85:
 1525 0538 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM...\n"
 1525      696E6720 
 1525      74686520 
 1525      7374616E 
 1525      64617264 
 1526 0577 00       		.align 8
 1527              	.LC86:
 1528 0578 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 1528      696E6720 
 1528      63757374 
 1528      6F6D2046 
 1528      5047414C 
 1529 05b9 00000000 		.align 8
 1529      000000
 1530              	.LC87:
 1531 05c0 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 1531      696E7661 
 1531      6C696420 
 1531      61726775 
 1531      6D656E74 
 1532 05fb 00000000 		.align 8
 1532      00
 1533              	.LC88:
 1534 0600 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 1534      6E672061 
 1534      20626163 
 1534      6B757020 
 1534      6F662025 
 1535              		.section	.rodata.str1.1
 1536              	.LC89:
 1537 01f3 436F6E66 		.string	"Configuring ports...\n"
 1537      69677572 
 1537      696E6720 
 1537      706F7274 
 1537      732E2E2E 
 1538              	.LC90:
 1539 0209 25303858 		.string	"%08X"
 1539      00
 1540              		.section	.rodata.str1.8
 1541 063b 00000000 		.align 8
 1541      00
 1542              	.LC91:
 1543 0640 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 1543      6261636B 
 1543      3A202020 
 1543      32382020 
 1543      20323420 
 1544              		.section	.rodata.str1.1
 1545              	.LC92:
 1546 020e 20257300 		.string	" %s"
 1547              	.LC93:
 1548 0212 20202573 		.string	"  %s"
 1548      00
 1549              	.LC94:
 1550 0217 2025730A 		.string	" %s\n"
 1550      00
 1551              		.section	.rodata.str1.8
 1552              		.align 8
 1553              	.LC95:
 1554 0680 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 1554      46504741 
 1554      4C696E6B 
 1554      20646576 
 1554      69636520 
 1555              		.section	.rodata.str1.1
 1556              	.LC96:
 1557 021c 20203078 		.string	"  0x%08X\n"
 1557      25303858 
 1557      0A00
 1558              		.section	.rodata.str1.8
 1559 06bd 000000   		.align 8
 1560              	.LC97:
 1561 06c0 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 1561      46504741 
 1561      4C696E6B 
 1561      20646576 
 1561      69636520 
 1562              		.align 8
 1563              	.LC98:
 1564 0718 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 1564      20636861 
 1564      696E2073 
 1564      63616E20 
 1564      72657175 
 1565              		.section	.rodata.str1.1
 1566              	.LC99:
 1567 0226 50726F67 		.string	"Programming device...\n"
 1567      72616D6D 
 1567      696E6720 
 1567      64657669 
 1567      63652E2E 
 1568              		.section	.rodata.str1.8
 1569 0767 00       		.align 8
 1570              	.LC100:
 1571 0768 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 1571      72616D20 
 1571      6F706572 
 1571      6174696F 
 1571      6E207265 
 1572              		.align 8
 1573              	.LC101:
 1574 07b0 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 1574      7574696E 
 1574      6720436F 
 1574      6D6D4650 
 1574      47412061 
 1575 07e5 000000   		.align 8
 1576              	.LC102:
 1577 07e8 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 1577      46504741 
 1577      4C696E6B 
 1577      20646576 
 1577      69636520 
 1578 0834 00000000 		.align 8
 1579              	.LC103:
 1580 0838 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 1580      6F6E2072 
 1580      65717565 
 1580      73746564 
 1580      20627574 
 1581 0875 000000   		.align 8
 1582              	.LC104:
 1583 0878 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 1583      696E7661 
 1583      6C696420 
 1583      61726775 
 1583      6D656E74 
 1584 08b4 00000000 		.align 8
 1585              	.LC105:
 1586 08b8 436F7079 		.string	"Copying from channel %lu to %s"
 1586      696E6720 
 1586      66726F6D 
 1586      20636861 
 1586      6E6E656C 
 1587              		.section	.rodata.str1.1
 1588              	.LC106:
 1589 023d 0A436175 		.string	"\nCaught SIGINT, quitting...\n"
 1589      67687420 
 1589      53494749 
 1589      4E542C20 
 1589      71756974 
 1590              		.section	.rodata.str1.8
 1591 08d7 00       		.align 8
 1592              	.LC107:
 1593 08d8 0A456E74 		.string	"\nEntering CommFPGA command-line mode:\n"
 1593      6572696E 
 1593      6720436F 
 1593      6D6D4650 
 1593      47412063 
 1594              		.section	.rodata.str1.1
 1595              	.LC108:
 1596 025a 3E2000   		.string	"> "
 1597              		.section	.rodata.str1.8
 1598 08ff 00       		.align 8
 1599              	.LC109:
 1600 0900 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 1600      46504741 
 1600      4C696E6B 
 1600      20646576 
 1600      69636520 
 1601 0949 00000000 		.align 8
 1601      000000
 1602              	.LC110:
 1603 0950 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 1603      6C207265 
 1603      71756573 
 1603      74656420 
 1603      62757420 
 1604              		.section	.rodata.str1.1
 1605              	.LC112:
 1606 025d 722B00   		.string	"r+"
 1607              	.LC113:
 1608 0260 43737620 		.string	"Csv doesn't exist \n"
 1608      646F6573 
 1608      6E277420 
 1608      65786973 
 1608      74200A00 
 1609              	.LC114:
 1610 0274 64617461 		.string	"data in channel 0 = %u \n"
 1610      20696E20 
 1610      6368616E 
 1610      6E656C20 
 1610      30203D20 
 1611              	.LC115:
 1612 028d 64617461 		.string	"data in channel %u = %u \n"
 1612      20696E20 
 1612      6368616E 
 1612      6E656C20 
 1612      2575203D 
 1613              	.LC117:
 1614 02a7 56616C69 		.string	"Valid user found \n"
 1614      64207573 
 1614      65722066 
 1614      6F756E64 
 1614      200A00
 1615              	.LC118:
 1616 02ba 772B00   		.string	"w+"
 1617              		.section	.rodata.str1.8
 1618 098c 00000000 		.align 8
 1619              	.LC119:
 1620 0990 22557365 		.string	"\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (decimal)\""
 1620      72204944 
 1620      20286465 
 1620      63696D61 
 1620      6C29222C 
 1621              		.section	.rodata.str1.1
 1622              	.LC120:
 1623 02bd 257300   		.string	"%s"
 1624              	.LC121:
 1625 02c0 55736572 		.string	"User has admin privileges \n"
 1625      20686173 
 1625      2061646D 
 1625      696E2070 
 1625      72697669 
 1626              	.LC122:
 1627 02dc 25730A00 		.string	"%s\n"
 1628              	.LC123:
 1629 02e0 496E7661 		.string	"Invalid user \n"
 1629      6C696420 
 1629      75736572 
 1629      200A00
 1630              		.section	.rodata.str1.8
 1631 09d5 000000   		.align 8
 1632              	.LC111:
 1633 09d8 2F686F6D 		.string	"/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/makestuff/apps/flcli/SampleBack
 1633      652F7061 
 1633      6E64752F 
 1633      4465736B 
 1633      746F702F 
 1634              		.section	.text.startup,"ax",@progbits
 1635              		.p2align 4,,15
 1636              		.globl	main
 1638              	main:
 1639              	.LFB90:
 1640              		.cfi_startproc
 1641 0000 4157     		pushq	%r15
 1642              		.cfi_def_cfa_offset 16
 1643              		.cfi_offset 15, -16
 1644 0002 B9000000 		movl	$.LC13, %ecx
 1644      00
 1645 0007 BA000000 		movl	$.LC14, %edx
 1645      00
 1646 000c 4156     		pushq	%r14
 1647              		.cfi_def_cfa_offset 24
 1648              		.cfi_offset 14, -24
 1649 000e 4155     		pushq	%r13
 1650              		.cfi_def_cfa_offset 32
 1651              		.cfi_offset 13, -32
 1652 0010 4154     		pushq	%r12
 1653              		.cfi_def_cfa_offset 40
 1654              		.cfi_offset 12, -40
 1655 0012 55       		pushq	%rbp
 1656              		.cfi_def_cfa_offset 48
 1657              		.cfi_offset 6, -48
 1658 0013 53       		pushq	%rbx
 1659              		.cfi_def_cfa_offset 56
 1660              		.cfi_offset 3, -56
 1661 0014 4881EC48 		subq	$584, %rsp
 1661      020000
 1662              		.cfi_def_cfa_offset 640
 1663 001b 897C2454 		movl	%edi, 84(%rsp)
 1664 001f 48897424 		movq	%rsi, 88(%rsp)
 1664      58
 1665 0024 BF000000 		movl	$.LC16, %edi
 1665      00
 1666 0029 BE000000 		movl	$.LC15, %esi
 1666      00
 1667 002e 64488B04 		movq	%fs:40, %rax
 1667      25280000 
 1667      00
 1668 0037 48898424 		movq	%rax, 568(%rsp)
 1668      38020000 
 1669 003f 31C0     		xorl	%eax, %eax
 1670 0041 E8000000 		call	arg_str0
 1670      00
 1671 0046 B9000000 		movl	$.LC17, %ecx
 1671      00
 1672 004b BA000000 		movl	$.LC18, %edx
 1672      00
 1673 0050 BE000000 		movl	$.LC19, %esi
 1673      00
 1674 0055 BF000000 		movl	$.LC20, %edi
 1674      00
 1675 005a 4989C4   		movq	%rax, %r12
 1676 005d E8000000 		call	arg_str1
 1676      00
 1677 0062 B9000000 		movl	$.LC21, %ecx
 1677      00
 1678 0067 BA000000 		movl	$.LC22, %edx
 1678      00
 1679 006c BE000000 		movl	$.LC23, %esi
 1679      00
 1680 0071 BF000000 		movl	$.LC24, %edi
 1680      00
 1681 0076 4989C5   		movq	%rax, %r13
 1682 0079 E8000000 		call	arg_str0
 1682      00
 1683 007e B9000000 		movl	$.LC25, %ecx
 1683      00
 1684 0083 BA000000 		movl	$.LC26, %edx
 1684      00
 1685 0088 BE000000 		movl	$.LC27, %esi
 1685      00
 1686 008d BF000000 		movl	$.LC28, %edi
 1686      00
 1687 0092 4989C6   		movq	%rax, %r14
 1688 0095 48894424 		movq	%rax, 96(%rsp)
 1688      60
 1689 009a E8000000 		call	arg_str0
 1689      00
 1690 009f B9000000 		movl	$.LC29, %ecx
 1690      00
 1691 00a4 BA000000 		movl	$.LC30, %edx
 1691      00
 1692 00a9 BE000000 		movl	$.LC31, %esi
 1692      00
 1693 00ae BF000000 		movl	$.LC32, %edi
 1693      00
 1694 00b3 48894424 		movq	%rax, 8(%rsp)
 1694      08
 1695 00b8 E8000000 		call	arg_str0
 1695      00
 1696 00bd B9000000 		movl	$.LC33, %ecx
 1696      00
 1697 00c2 BA000000 		movl	$.LC34, %edx
 1697      00
 1698 00c7 BE000000 		movl	$.LC35, %esi
 1698      00
 1699 00cc BF000000 		movl	$.LC36, %edi
 1699      00
 1700 00d1 48894424 		movq	%rax, 16(%rsp)
 1700      10
 1701 00d6 E8000000 		call	arg_str0
 1701      00
 1702 00db B9000000 		movl	$.LC37, %ecx
 1702      00
 1703 00e0 BA000000 		movl	$.LC38, %edx
 1703      00
 1704 00e5 BE000000 		movl	$.LC39, %esi
 1704      00
 1705 00ea BF000000 		movl	$.LC40, %edi
 1705      00
 1706 00ef 48894424 		movq	%rax, 40(%rsp)
 1706      28
 1707 00f4 E8000000 		call	arg_uint0
 1707      00
 1708 00f9 B9000000 		movl	$.LC41, %ecx
 1708      00
 1709 00fe BA000000 		movl	$.LC42, %edx
 1709      00
 1710 0103 BE000000 		movl	$.LC43, %esi
 1710      00
 1711 0108 BF000000 		movl	$.LC44, %edi
 1711      00
 1712 010d 48894424 		movq	%rax, 24(%rsp)
 1712      18
 1713 0112 E8000000 		call	arg_str0
 1713      00
 1714 0117 BA000000 		movl	$.LC45, %edx
 1714      00
 1715 011c BE000000 		movl	$.LC46, %esi
 1715      00
 1716 0121 BF000000 		movl	$.LC47, %edi
 1716      00
 1717 0126 48894424 		movq	%rax, 48(%rsp)
 1717      30
 1718 012b E8000000 		call	arg_lit0
 1718      00
 1719 0130 BA000000 		movl	$.LC48, %edx
 1719      00
 1720 0135 BE000000 		movl	$.LC49, %esi
 1720      00
 1721 013a BF000000 		movl	$.LC50, %edi
 1721      00
 1722 013f 48894424 		movq	%rax, 64(%rsp)
 1722      40
 1723 0144 E8000000 		call	arg_lit0
 1723      00
 1724 0149 BA000000 		movl	$.LC51, %edx
 1724      00
 1725 014e BE000000 		movl	$.LC52, %esi
 1725      00
 1726 0153 BF000000 		movl	$.LC53, %edi
 1726      00
 1727 0158 48894424 		movq	%rax, 72(%rsp)
 1727      48
 1728 015d E8000000 		call	arg_lit0
 1728      00
 1729 0162 B9000000 		movl	$.LC54, %ecx
 1729      00
 1730 0167 BA000000 		movl	$.LC55, %edx
 1730      00
 1731 016c BE000000 		movl	$.LC56, %esi
 1731      00
 1732 0171 BF000000 		movl	$.LC57, %edi
 1732      00
 1733 0176 48894424 		movq	%rax, 32(%rsp)
 1733      20
 1734 017b E8000000 		call	arg_str0
 1734      00
 1735 0180 BA000000 		movl	$.LC58, %edx
 1735      00
 1736 0185 BE000000 		movl	$.LC59, %esi
 1736      00
 1737 018a BF000000 		movl	$.LC60, %edi
 1737      00
 1738 018f 48894424 		movq	%rax, 56(%rsp)
 1738      38
 1739 0194 E8000000 		call	arg_lit0
 1739      00
 1740 0199 31FF     		xorl	%edi, %edi
 1741 019b B9000000 		movl	$.LC61, %ecx
 1741      00
 1742 01a0 BA000000 		movl	$.LC62, %edx
 1742      00
 1743 01a5 BE000000 		movl	$.LC63, %esi
 1743      00
 1744 01aa 4889C3   		movq	%rax, %rbx
 1745 01ad E8000000 		call	arg_str0
 1745      00
 1746 01b2 B9000000 		movl	$.LC64, %ecx
 1746      00
 1747 01b7 BA000000 		movl	$.LC65, %edx
 1747      00
 1748 01bc BE000000 		movl	$.LC66, %esi
 1748      00
 1749 01c1 31FF     		xorl	%edi, %edi
 1750 01c3 4989C7   		movq	%rax, %r15
 1751 01c6 E8000000 		call	arg_str0
 1751      00
 1752 01cb BF140000 		movl	$20, %edi
 1752      00
 1753 01d0 48890424 		movq	%rax, (%rsp)
 1754 01d4 E8000000 		call	arg_end
 1754      00
 1755 01d9 BA000000 		movl	$.LC67, %edx
 1755      00
 1756 01de BE000000 		movl	$.LC68, %esi
 1756      00
 1757 01e3 BF000000 		movl	$.LC69, %edi
 1757      00
 1758 01e8 4889C5   		movq	%rax, %rbp
 1759 01eb E8000000 		call	arg_lit0
 1759      00
 1760 01f0 488B4C24 		movq	8(%rsp), %rcx
 1760      08
 1761 01f5 488B5424 		movq	16(%rsp), %rdx
 1761      10
 1762 01fa 488DBC24 		leaq	304(%rsp), %rdi
 1762      30010000 
 1763 0202 488B7424 		movq	24(%rsp), %rsi
 1763      18
 1764 0207 48894424 		movq	%rax, 104(%rsp)
 1764      68
 1765 020c 48898424 		movq	%rax, 400(%rsp)
 1765      90010000 
 1766 0214 488B0424 		movq	(%rsp), %rax
 1767 0218 48898C24 		movq	%rcx, 328(%rsp)
 1767      48010000 
 1768 0220 488B4C24 		movq	40(%rsp), %rcx
 1768      28
 1769 0225 48899424 		movq	%rdx, 336(%rsp)
 1769      50010000 
 1770 022d 488B5424 		movq	48(%rsp), %rdx
 1770      30
 1771 0232 4889B424 		movq	%rsi, 352(%rsp)
 1771      60010000 
 1772 023a 488B7424 		movq	72(%rsp), %rsi
 1772      48
 1773 023f 48898C24 		movq	%rcx, 344(%rsp)
 1773      58010000 
 1774 0247 488B4C24 		movq	64(%rsp), %rcx
 1774      40
 1775 024c 48899424 		movq	%rdx, 360(%rsp)
 1775      68010000 
 1776 0254 488B5424 		movq	32(%rsp), %rdx
 1776      20
 1777 0259 4C89B424 		movq	%r14, 320(%rsp)
 1777      40010000 
 1778 0261 4C89A424 		movq	%r12, 304(%rsp)
 1778      30010000 
 1779 0269 48898C24 		movq	%rcx, 368(%rsp)
 1779      70010000 
 1780 0271 488B4C24 		movq	56(%rsp), %rcx
 1780      38
 1781 0276 4C89AC24 		movq	%r13, 312(%rsp)
 1781      38010000 
 1782 027e 4889B424 		movq	%rsi, 376(%rsp)
 1782      78010000 
 1783 0286 48899424 		movq	%rdx, 384(%rsp)
 1783      80010000 
 1784 028e 48899C24 		movq	%rbx, 408(%rsp)
 1784      98010000 
 1785 0296 48898C24 		movq	%rcx, 392(%rsp)
 1785      88010000 
 1786 029e 4C89BC24 		movq	%r15, 416(%rsp)
 1786      A0010000 
 1787 02a6 48898424 		movq	%rax, 424(%rsp)
 1787      A8010000 
 1788 02ae 4889AC24 		movq	%rbp, 432(%rsp)
 1788      B0010000 
 1789 02b6 48C78424 		movq	$0, 144(%rsp)
 1789      90000000 
 1789      00000000 
 1790 02c2 48C78424 		movq	$0, 216(%rsp)
 1790      D8000000 
 1790      00000000 
 1791 02ce E8000000 		call	arg_nullcheck
 1791      00
 1792 02d3 85C0     		testl	%eax, %eax
 1793 02d5 4189C6   		movl	%eax, %r14d
 1794 02d8 0F849B00 		je	.L210
 1794      0000
 1795 02de 488B3D00 		movq	stderr(%rip), %rdi
 1795      000000
 1796 02e5 B9000000 		movl	$.LC70, %ecx
 1796      00
 1797 02ea BA000000 		movl	$.LC71, %edx
 1797      00
 1798 02ef BE010000 		movl	$1, %esi
 1798      00
 1799 02f4 31C0     		xorl	%eax, %eax
 1800 02f6 4531FF   		xorl	%r15d, %r15d
 1801 02f9 BB010000 		movl	$1, %ebx
 1801      00
 1802 02fe E8000000 		call	__fprintf_chk
 1802      00
 1803              	.L211:
 1804 0303 4C89FF   		movq	%r15, %rdi
 1805 0306 E8000000 		call	free
 1805      00
 1806 030b 488BBC24 		movq	144(%rsp), %rdi
 1806      90000000 
 1807 0313 E8000000 		call	flClose
 1807      00
 1808 0318 488B8C24 		movq	216(%rsp), %rcx
 1808      D8000000 
 1809 0320 4885C9   		testq	%rcx, %rcx
 1810 0323 7425     		je	.L362
 1811 0325 488B3D00 		movq	stderr(%rip), %rdi
 1811      000000
 1812 032c BA000000 		movl	$.LC122, %edx
 1812      00
 1813 0331 BE010000 		movl	$1, %esi
 1813      00
 1814 0336 31C0     		xorl	%eax, %eax
 1815 0338 E8000000 		call	__fprintf_chk
 1815      00
 1816 033d 488BBC24 		movq	216(%rsp), %rdi
 1816      D8000000 
 1817 0345 E8000000 		call	flFreeError
 1817      00
 1818              	.L362:
 1819 034a 4189DE   		movl	%ebx, %r14d
 1820              	.L276:
 1821 034d 488B9C24 		movq	568(%rsp), %rbx
 1821      38020000 
 1822 0355 6448331C 		xorq	%fs:40, %rbx
 1822      25280000 
 1822      00
 1823 035e 4489F0   		movl	%r14d, %eax
 1824 0361 0F85AD05 		jne	.L451
 1824      0000
 1825 0367 4881C448 		addq	$584, %rsp
 1825      020000
 1826              		.cfi_remember_state
 1827              		.cfi_def_cfa_offset 56
 1828 036e 5B       		popq	%rbx
 1829              		.cfi_def_cfa_offset 48
 1830 036f 5D       		popq	%rbp
 1831              		.cfi_def_cfa_offset 40
 1832 0370 415C     		popq	%r12
 1833              		.cfi_def_cfa_offset 32
 1834 0372 415D     		popq	%r13
 1835              		.cfi_def_cfa_offset 24
 1836 0374 415E     		popq	%r14
 1837              		.cfi_def_cfa_offset 16
 1838 0376 415F     		popq	%r15
 1839              		.cfi_def_cfa_offset 8
 1840 0378 C3       		ret
 1841              	.L210:
 1842              		.cfi_restore_state
 1843 0379 488B7424 		movq	88(%rsp), %rsi
 1843      58
 1844 037e 8B7C2454 		movl	84(%rsp), %edi
 1845 0382 488D9424 		leaq	304(%rsp), %rdx
 1845      30010000 
 1846 038a E8000000 		call	arg_parse
 1846      00
 1847 038f 837B6000 		cmpl	$0, 96(%rbx)
 1848 0393 7E63     		jle	.L212
 1849 0395 BA000000 		movl	$.LC70, %edx
 1849      00
 1850 039a BE000000 		movl	$.LC72, %esi
 1850      00
 1851 039f BF010000 		movl	$1, %edi
 1851      00
 1852 03a4 31C0     		xorl	%eax, %eax
 1853 03a6 4531FF   		xorl	%r15d, %r15d
 1854 03a9 31DB     		xorl	%ebx, %ebx
 1855 03ab E8000000 		call	__printf_chk
 1855      00
 1856 03b0 488B3D00 		movq	stdout(%rip), %rdi
 1856      000000
 1857 03b7 488DB424 		leaq	304(%rsp), %rsi
 1857      30010000 
 1858 03bf BA000000 		movl	$.LC73, %edx
 1858      00
 1859 03c4 E8000000 		call	arg_print_syntax
 1859      00
 1860 03c9 BE000000 		movl	$.LC74, %esi
 1860      00
 1861 03ce BF010000 		movl	$1, %edi
 1861      00
 1862 03d3 31C0     		xorl	%eax, %eax
 1863 03d5 E8000000 		call	__printf_chk
 1863      00
 1864 03da 488B3D00 		movq	stdout(%rip), %rdi
 1864      000000
 1865 03e1 488DB424 		leaq	304(%rsp), %rsi
 1865      30010000 
 1866 03e9 BA000000 		movl	$.LC75, %edx
 1866      00
 1867 03ee E8000000 		call	arg_print_glossary
 1867      00
 1868 03f3 E90BFFFF 		jmp	.L211
 1868      FF
 1869              	.L212:
 1870 03f8 85C0     		testl	%eax, %eax
 1871 03fa 7E3E     		jle	.L213
 1872 03fc 488B3D00 		movq	stdout(%rip), %rdi
 1872      000000
 1873 0403 BA000000 		movl	$.LC70, %edx
 1873      00
 1874 0408 4889EE   		movq	%rbp, %rsi
 1875 040b E8000000 		call	arg_print_errors
 1875      00
 1876 0410 B9000000 		movl	$.LC70, %ecx
 1876      00
 1877 0415 BA000000 		movl	$.LC76, %edx
 1877      00
 1878              	.L447:
 1879 041a 488B3D00 		movq	stderr(%rip), %rdi
 1879      000000
 1880 0421 BE010000 		movl	$1, %esi
 1880      00
 1881 0426 31C0     		xorl	%eax, %eax
 1882 0428 4531FF   		xorl	%r15d, %r15d
 1883 042b BB0C0000 		movl	$12, %ebx
 1883      00
 1884 0430 E8000000 		call	__fprintf_chk
 1884      00
 1885 0435 E9C9FEFF 		jmp	.L211
 1885      FF
 1886              	.L213:
 1887 043a 488DB424 		leaq	216(%rsp), %rsi
 1887      D8000000 
 1888 0442 31FF     		xorl	%edi, %edi
 1889 0444 E8000000 		call	flInitialise
 1889      00
 1890 0449 85C0     		testl	%eax, %eax
 1891 044b 740D     		je	.L214
 1892              	.L263:
 1893 044d 4531FF   		xorl	%r15d, %r15d
 1894 0450 BB010000 		movl	$1, %ebx
 1894      00
 1895 0455 E9A9FEFF 		jmp	.L211
 1895      FF
 1896              	.L214:
 1897 045a 498B4568 		movq	104(%r13), %rax
 1898 045e BE000000 		movl	$.LC77, %esi
 1898      00
 1899 0463 BF010000 		movl	$1, %edi
 1899      00
 1900 0468 4C8B28   		movq	(%rax), %r13
 1901 046b 31C0     		xorl	%eax, %eax
 1902 046d 4C89EA   		movq	%r13, %rdx
 1903 0470 E8000000 		call	__printf_chk
 1903      00
 1904 0475 488DB424 		leaq	144(%rsp), %rsi
 1904      90000000 
 1905 047d 31D2     		xorl	%edx, %edx
 1906 047f 4C89EF   		movq	%r13, %rdi
 1907 0482 E8000000 		call	flOpen
 1907      00
 1908 0487 85C0     		testl	%eax, %eax
 1909 0489 0F841901 		je	.L215
 1909      0000
 1910 048f 41837C24 		cmpl	$0, 96(%r12)
 1910      6000
 1911 0495 0F84CC00 		je	.L216
 1911      0000
 1912 049b 498B4424 		movq	104(%r12), %rax
 1912      68
 1913 04a0 BE000000 		movl	$.LC78, %esi
 1913      00
 1914 04a5 BF010000 		movl	$1, %edi
 1914      00
 1915 04aa 488B18   		movq	(%rax), %rbx
 1916 04ad 31C0     		xorl	%eax, %eax
 1917 04af 4889DA   		movq	%rbx, %rdx
 1918 04b2 E8000000 		call	__printf_chk
 1918      00
 1919 04b7 488B4424 		movq	96(%rsp), %rax
 1919      60
 1920 04bc 83786000 		cmpl	$0, 96(%rax)
 1921 04c0 0F844B03 		je	.L217
 1921      0000
 1922 04c6 488B4068 		movq	104(%rax), %rax
 1923 04ca 488D9424 		leaq	216(%rsp), %rdx
 1923      D8000000 
 1924 04d2 4889DF   		movq	%rbx, %rdi
 1925 04d5 488B30   		movq	(%rax), %rsi
 1926 04d8 E8000000 		call	flLoadCustomFirmware
 1926      00
 1927              	.L218:
 1928 04dd 85C0     		testl	%eax, %eax
 1929 04df 0F8568FF 		jne	.L263
 1929      FFFF
 1930 04e5 BE000000 		movl	$.LC79, %esi
 1930      00
 1931 04ea BF010000 		movl	$1, %edi
 1931      00
 1932 04ef BB3C0000 		movl	$60, %ebx
 1932      00
 1933 04f4 E8000000 		call	__printf_chk
 1933      00
 1934 04f9 BFE80300 		movl	$1000, %edi
 1934      00
 1935 04fe 488DAC24 		leaq	240(%rsp), %rbp
 1935      F0000000 
 1936 0506 E8000000 		call	flSleep
 1936      00
 1937 050b EB21     		jmp	.L221
 1938              	.L452:
 1939 050d BFFA0000 		movl	$250, %edi
 1939      00
 1940 0512 E8000000 		call	flSleep
 1940      00
 1941 0517 80BC24F0 		cmpb	$0, 240(%rsp)
 1941      00000000 
 1942 051f 0F858E03 		jne	.L220
 1942      0000
 1943 0525 83EB01   		subl	$1, %ebx
 1944 0528 0F848503 		je	.L220
 1944      0000
 1945              	.L221:
 1946 052e BE000000 		movl	$.LC80, %esi
 1946      00
 1947 0533 BF010000 		movl	$1, %edi
 1947      00
 1948 0538 31C0     		xorl	%eax, %eax
 1949 053a E8000000 		call	__printf_chk
 1949      00
 1950 053f 488B3D00 		movq	stdout(%rip), %rdi
 1950      000000
 1951 0546 E8000000 		call	fflush
 1951      00
 1952 054b 488D9424 		leaq	216(%rsp), %rdx
 1952      D8000000 
 1953 0553 4889EE   		movq	%rbp, %rsi
 1954 0556 4C89EF   		movq	%r13, %rdi
 1955 0559 E8000000 		call	flIsDeviceAvailable
 1955      00
 1956 055e 85C0     		testl	%eax, %eax
 1957 0560 74AB     		je	.L452
 1958 0562 E9E6FEFF 		jmp	.L263
 1958      FF
 1959              	.L216:
 1960 0567 4C89E9   		movq	%r13, %rcx
 1961 056a BA000000 		movl	$.LC83, %edx
 1961      00
 1962 056f E9A6FEFF 		jmp	.L447
 1962      FF
 1963              	.L222:
 1964 0574 4C89EA   		movq	%r13, %rdx
 1965 0577 BE000000 		movl	$.LC82, %esi
 1965      00
 1966 057c BF010000 		movl	$1, %edi
 1966      00
 1967 0581 31C0     		xorl	%eax, %eax
 1968 0583 E8000000 		call	__printf_chk
 1968      00
 1969 0588 488D9424 		leaq	216(%rsp), %rdx
 1969      D8000000 
 1970 0590 488DB424 		leaq	144(%rsp), %rsi
 1970      90000000 
 1971 0598 4C89EF   		movq	%r13, %rdi
 1972 059b E8000000 		call	flOpen
 1972      00
 1973 05a0 85C0     		testl	%eax, %eax
 1974 05a2 0F85A5FE 		jne	.L263
 1974      FFFF
 1975              	.L215:
 1976 05a8 488BBC24 		movq	144(%rsp), %rdi
 1976      90000000 
 1977 05b0 E8000000 		call	flGetFirmwareVersion
 1977      00
 1978 05b5 488BBC24 		movq	144(%rsp), %rdi
 1978      90000000 
 1979 05bd 89C3     		movl	%eax, %ebx
 1980 05bf E8000000 		call	flGetFirmwareID
 1980      00
 1981 05c4 4189D8   		movl	%ebx, %r8d
 1982 05c7 0FB7C8   		movzwl	%ax, %ecx
 1983 05ca 4C89EA   		movq	%r13, %rdx
 1984 05cd 31C0     		xorl	%eax, %eax
 1985 05cf BE000000 		movl	$.LC84, %esi
 1985      00
 1986 05d4 BF010000 		movl	$1, %edi
 1986      00
 1987 05d9 E8000000 		call	__printf_chk
 1987      00
 1988 05de 41837F60 		cmpl	$0, 96(%r15)
 1988      00
 1989 05e3 745F     		je	.L230
 1990 05e5 498B4768 		movq	104(%r15), %rax
 1991 05e9 488B10   		movq	(%rax), %rdx
 1992 05ec 803A73   		cmpb	$115, (%rdx)
 1993 05ef 0F853402 		jne	.L227
 1993      0000
 1994 05f5 807A0174 		cmpb	$116, 1(%rdx)
 1995 05f9 0F852A02 		jne	.L227
 1995      0000
 1996 05ff 807A0264 		cmpb	$100, 2(%rdx)
 1997 0603 0F852002 		jne	.L227
 1997      0000
 1998 0609 807A0300 		cmpb	$0, 3(%rdx)
 1999 060d 0F851602 		jne	.L227
 1999      0000
 2000 0613 BE000000 		movl	$.LC85, %esi
 2000      00
 2001 0618 BF010000 		movl	$1, %edi
 2001      00
 2002 061d 31C0     		xorl	%eax, %eax
 2003 061f E8000000 		call	__printf_chk
 2003      00
 2004 0624 488BBC24 		movq	144(%rsp), %rdi
 2004      90000000 
 2005 062c 488D9424 		leaq	216(%rsp), %rdx
 2005      D8000000 
 2006 0634 4C89EE   		movq	%r13, %rsi
 2007 0637 E8000000 		call	flFlashStandardFirmware
 2007      00
 2008              	.L228:
 2009 063c 85C0     		testl	%eax, %eax
 2010 063e 0F8509FE 		jne	.L263
 2010      FFFF
 2011              	.L230:
 2012 0644 488B0424 		movq	(%rsp), %rax
 2013 0648 83786000 		cmpl	$0, 96(%rax)
 2014 064c 0F850902 		jne	.L453
 2014      0000
 2015              	.L226:
 2016 0652 488B4424 		movq	32(%rsp), %rax
 2016      20
 2017 0657 83786000 		cmpl	$0, 96(%rax)
 2018 065b 0F859102 		jne	.L233
 2018      0000
 2019              	.L236:
 2020 0661 488B4424 		movq	24(%rsp), %rax
 2020      18
 2021 0666 BB010000 		movl	$1, %ebx
 2021      00
 2022 066b 83786000 		cmpl	$0, 96(%rax)
 2023 066f 740C     		je	.L235
 2024 0671 488B4424 		movq	24(%rsp), %rax
 2024      18
 2025 0676 488B4068 		movq	104(%rax), %rax
 2026 067a 0FB618   		movzbl	(%rax), %ebx
 2027              	.L235:
 2028 067d 488BBC24 		movq	144(%rsp), %rdi
 2028      90000000 
 2029 0685 E8000000 		call	flIsNeroCapable
 2029      00
 2030 068a 488BBC24 		movq	144(%rsp), %rdi
 2030      90000000 
 2031 0692 84C0     		testb	%al, %al
 2032 0694 0FB6C3   		movzbl	%bl, %eax
 2033 0697 89C6     		movl	%eax, %esi
 2034 0699 410F95C4 		setne	%r12b
 2035 069d 890424   		movl	%eax, (%rsp)
 2036 06a0 E8000000 		call	flIsCommCapable
 2036      00
 2037 06a5 89C3     		movl	%eax, %ebx
 2038 06a7 488B4424 		movq	8(%rsp), %rax
 2038      08
 2039 06ac 83786000 		cmpl	$0, 96(%rax)
 2040 06b0 0F856302 		jne	.L454
 2040      0000
 2041              	.L237:
 2042 06b6 488B4424 		movq	16(%rsp), %rax
 2042      10
 2043 06bb 83786000 		cmpl	$0, 96(%rax)
 2044 06bf 0F84B300 		je	.L244
 2044      0000
 2045 06c5 4584E4   		testb	%r12b, %r12b
 2046 06c8 0F84F203 		je	.L240
 2046      0000
 2047 06ce 488BBC24 		movq	144(%rsp), %rdi
 2047      90000000 
 2048 06d6 488D9424 		leaq	216(%rsp), %rdx
 2048      D8000000 
 2049 06de 31F6     		xorl	%esi, %esi
 2050 06e0 E8000000 		call	flSelectConduit
 2050      00
 2051 06e5 85C0     		testl	%eax, %eax
 2052 06e7 0F8560FD 		jne	.L263
 2052      FFFF
 2053 06ed 488B4424 		movq	16(%rsp), %rax
 2053      10
 2054 06f2 488DAC24 		leaq	240(%rsp), %rbp
 2054      F0000000 
 2055 06fa 488BBC24 		movq	144(%rsp), %rdi
 2055      90000000 
 2056 0702 4C8D8C24 		leaq	216(%rsp), %r9
 2056      D8000000 
 2057 070a 488D9424 		leaq	128(%rsp), %rdx
 2057      80000000 
 2058 0712 41B81000 		movl	$16, %r8d
 2058      0000
 2059 0718 4889E9   		movq	%rbp, %rcx
 2060 071b 488B4068 		movq	104(%rax), %rax
 2061 071f 488B30   		movq	(%rax), %rsi
 2062 0722 E8000000 		call	jtagScanChain
 2062      00
 2063 0727 85C0     		testl	%eax, %eax
 2064 0729 0F851EFD 		jne	.L263
 2064      FFFF
 2065 072f 83BC2480 		cmpl	$0, 128(%rsp)
 2065      00000000 
 2066 0737 4C89EA   		movq	%r13, %rdx
 2067 073a 0F84CD07 		je	.L241
 2067      0000
 2068 0740 BE000000 		movl	$.LC95, %esi
 2068      00
 2069 0745 BF010000 		movl	$1, %edi
 2069      00
 2070 074a 4531FF   		xorl	%r15d, %r15d
 2071 074d E8000000 		call	__printf_chk
 2071      00
 2072 0752 EB1A     		jmp	.L242
 2073              	.L243:
 2074 0754 428B54BD 		movl	0(%rbp,%r15,4), %edx
 2074      00
 2075 0759 BE000000 		movl	$.LC96, %esi
 2075      00
 2076 075e BF010000 		movl	$1, %edi
 2076      00
 2077 0763 31C0     		xorl	%eax, %eax
 2078 0765 4983C701 		addq	$1, %r15
 2079 0769 E8000000 		call	__printf_chk
 2079      00
 2080              	.L242:
 2081 076e 4439BC24 		cmpl	%r15d, 128(%rsp)
 2081      80000000 
 2082 0776 77DC     		ja	.L243
 2083              	.L244:
 2084 0778 488B4424 		movq	40(%rsp), %rax
 2084      28
 2085 077d 83786000 		cmpl	$0, 96(%rax)
 2086 0781 0F859603 		jne	.L455
 2086      0000
 2087              	.L245:
 2088 0787 488B4424 		movq	72(%rsp), %rax
 2088      48
 2089 078c 83786000 		cmpl	$0, 96(%rax)
 2090 0790 7407     		je	.L247
 2091 0792 C6050000 		movb	$1, enableBenchmarking(%rip)
 2091      000001
 2092              	.L247:
 2093 0799 488B4424 		movq	48(%rsp), %rax
 2093      30
 2094 079e 84DB     		testb	%bl, %bl
 2095 07a0 400F95C5 		setne	%bpl
 2096 07a4 83786000 		cmpl	$0, 96(%rax)
 2097 07a8 0F852A04 		jne	.L456
 2097      0000
 2098              	.L248:
 2099 07ae 488B4424 		movq	56(%rsp), %rax
 2099      38
 2100 07b3 83786000 		cmpl	$0, 96(%rax)
 2101 07b7 0F85DF03 		jne	.L457
 2101      0000
 2102              	.L254:
 2103 07bd 488B4424 		movq	64(%rsp), %rax
 2103      40
 2104 07c2 83786000 		cmpl	$0, 96(%rax)
 2105 07c6 0F85B204 		jne	.L458
 2105      0000
 2106 07cc 488B4424 		movq	104(%rsp), %rax
 2106      68
 2107 07d1 83786000 		cmpl	$0, 96(%rax)
 2108 07d5 0F8E9904 		jle	.L372
 2108      0000
 2109 07db 4084ED   		testb	%bpl, %bpl
 2110 07de 0F849E03 		je	.L249
 2110      0000
 2111 07e4 4531FF   		xorl	%r15d, %r15d
 2112              	.L269:
 2113 07e7 8B3424   		movl	(%rsp), %esi
 2114 07ea 488BBC24 		movq	144(%rsp), %rdi
 2114      90000000 
 2115 07f2 488D9424 		leaq	216(%rsp), %rdx
 2115      D8000000 
 2116 07fa E8000000 		call	flSelectConduit
 2116      00
 2117 07ff 85C0     		testl	%eax, %eax
 2118 0801 0F841C07 		je	.L271
 2118      0000
 2119              	.L446:
 2120 0807 BB010000 		movl	$1, %ebx
 2120      00
 2121 080c E9F2FAFF 		jmp	.L211
 2121      FF
 2122              	.L217:
 2123 0811 488D9424 		leaq	216(%rsp), %rdx
 2123      D8000000 
 2124 0819 4C89EE   		movq	%r13, %rsi
 2125 081c 4889DF   		movq	%rbx, %rdi
 2126 081f E8000000 		call	flLoadStandardFirmware
 2126      00
 2127 0824 E9B4FCFF 		jmp	.L218
 2127      FF
 2128              	.L227:
 2129 0829 BE000000 		movl	$.LC86, %esi
 2129      00
 2130 082e BF010000 		movl	$1, %edi
 2130      00
 2131 0833 31C0     		xorl	%eax, %eax
 2132 0835 E8000000 		call	__printf_chk
 2132      00
 2133 083a 498B4768 		movq	104(%r15), %rax
 2134 083e 488BBC24 		movq	144(%rsp), %rdi
 2134      90000000 
 2135 0846 488D9424 		leaq	216(%rsp), %rdx
 2135      D8000000 
 2136 084e 488B30   		movq	(%rax), %rsi
 2137 0851 E8000000 		call	flFlashCustomFirmware
 2137      00
 2138 0856 E9E1FDFF 		jmp	.L228
 2138      FF
 2139              	.L453:
 2140 085b 488B0424 		movq	(%rsp), %rax
 2141 085f 488DB424 		leaq	240(%rsp), %rsi
 2141      F0000000 
 2142 0867 31D2     		xorl	%edx, %edx
 2143 0869 488B4068 		movq	104(%rax), %rax
 2144 086d 488B38   		movq	(%rax), %rdi
 2145 0870 E8000000 		call	strtoul
 2145      00
 2146 0875 488B8C24 		movq	240(%rsp), %rcx
 2146      F0000000 
 2147 087d 4889C3   		movq	%rax, %rbx
 2148 0880 80393A   		cmpb	$58, (%rcx)
 2149 0883 0F844402 		je	.L231
 2149      0000
 2150 0889 B9000000 		movl	$.LC70, %ecx
 2150      00
 2151 088e BA000000 		movl	$.LC87, %edx
 2151      00
 2152              	.L450:
 2153 0893 488B3D00 		movq	stderr(%rip), %rdi
 2153      000000
 2154 089a BE010000 		movl	$1, %esi
 2154      00
 2155 089f 31C0     		xorl	%eax, %eax
 2156 08a1 BB0C0000 		movl	$12, %ebx
 2156      00
 2157 08a6 E8000000 		call	__fprintf_chk
 2157      00
 2158              	.L256:
 2159 08ab 4531FF   		xorl	%r15d, %r15d
 2160 08ae E950FAFF 		jmp	.L211
 2160      FF
 2161              	.L220:
 2162 08b3 31C0     		xorl	%eax, %eax
 2163 08b5 BE000000 		movl	$.LC73, %esi
 2163      00
 2164 08ba BF010000 		movl	$1, %edi
 2164      00
 2165 08bf E8000000 		call	__printf_chk
 2165      00
 2166 08c4 80BC24F0 		cmpb	$0, 240(%rsp)
 2166      00000000 
 2167 08cc 0F85A2FC 		jne	.L222
 2167      FFFF
 2168 08d2 488B3D00 		movq	stderr(%rip), %rdi
 2168      000000
 2169 08d9 4C89E9   		movq	%r13, %rcx
 2170 08dc BA000000 		movl	$.LC81, %edx
 2170      00
 2171 08e1 BE010000 		movl	$1, %esi
 2171      00
 2172 08e6 31C0     		xorl	%eax, %eax
 2173 08e8 E8000000 		call	__fprintf_chk
 2173      00
 2174 08ed E95BFBFF 		jmp	.L263
 2174      FF
 2175              	.L233:
 2176 08f2 488BBC24 		movq	144(%rsp), %rdi
 2176      90000000 
 2177 08fa 488DB424 		leaq	216(%rsp), %rsi
 2177      D8000000 
 2178 0902 E8000000 		call	flResetToggle
 2178      00
 2179 0907 85C0     		testl	%eax, %eax
 2180 0909 0F853EFB 		jne	.L263
 2180      FFFF
 2181 090f E94DFDFF 		jmp	.L236
 2181      FF
 2182              	.L451:
 2183              		.p2align 4,,9
 2184 0914 E8000000 		call	__stack_chk_fail
 2184      00
 2185              	.L454:
 2186 0919 BE000000 		movl	$.LC89, %esi
 2186      00
 2187 091e BF010000 		movl	$1, %edi
 2187      00
 2188 0923 31C0     		xorl	%eax, %eax
 2189 0925 E8000000 		call	__printf_chk
 2189      00
 2190 092a 488B4424 		movq	8(%rsp), %rax
 2190      08
 2191 092f 488BBC24 		movq	144(%rsp), %rdi
 2191      90000000 
 2192 0937 488D8C24 		leaq	216(%rsp), %rcx
 2192      D8000000 
 2193 093f 488D9424 		leaq	240(%rsp), %rdx
 2193      F0000000 
 2194 0947 488B4068 		movq	104(%rax), %rax
 2195 094b 488B30   		movq	(%rax), %rsi
 2196 094e E8000000 		call	flMultiBitPortAccess
 2196      00
 2197 0953 85C0     		testl	%eax, %eax
 2198 0955 0F85F2FA 		jne	.L263
 2198      FFFF
 2199 095b 448B8424 		movl	240(%rsp), %r8d
 2199      F0000000 
 2200 0963 488DBC24 		leaq	448(%rsp), %rdi
 2200      C0010000 
 2201 096b B9000000 		movl	$.LC90, %ecx
 2201      00
 2202 0970 BA090000 		movl	$9, %edx
 2202      00
 2203 0975 BE010000 		movl	$1, %esi
 2203      00
 2204 097a 31C0     		xorl	%eax, %eax
 2205 097c E8000000 		call	__sprintf_chk
 2205      00
 2206 0981 0FB68424 		movzbl	448(%rsp), %eax
 2206      C0010000 
 2207 0989 BE000000 		movl	$.LC91, %esi
 2207      00
 2208 098e BF010000 		movl	$1, %edi
 2208      00
 2209 0993 83E830   		subl	$48, %eax
 2210 0996 4898     		cltq
 2211 0998 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2211      00000000 
 2212 09a0 31C0     		xorl	%eax, %eax
 2213 09a2 E8000000 		call	__printf_chk
 2213      00
 2214 09a7 0FB68424 		movzbl	449(%rsp), %eax
 2214      C1010000 
 2215 09af BE000000 		movl	$.LC92, %esi
 2215      00
 2216 09b4 BF010000 		movl	$1, %edi
 2216      00
 2217 09b9 83E830   		subl	$48, %eax
 2218 09bc 4898     		cltq
 2219 09be 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2219      00000000 
 2220 09c6 31C0     		xorl	%eax, %eax
 2221 09c8 E8000000 		call	__printf_chk
 2221      00
 2222 09cd 0FB68424 		movzbl	450(%rsp), %eax
 2222      C2010000 
 2223 09d5 BE000000 		movl	$.LC92, %esi
 2223      00
 2224 09da BF010000 		movl	$1, %edi
 2224      00
 2225 09df 83E830   		subl	$48, %eax
 2226 09e2 4898     		cltq
 2227 09e4 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2227      00000000 
 2228 09ec 31C0     		xorl	%eax, %eax
 2229 09ee E8000000 		call	__printf_chk
 2229      00
 2230 09f3 0FB68424 		movzbl	451(%rsp), %eax
 2230      C3010000 
 2231 09fb BE000000 		movl	$.LC92, %esi
 2231      00
 2232 0a00 BF010000 		movl	$1, %edi
 2232      00
 2233 0a05 83E830   		subl	$48, %eax
 2234 0a08 4898     		cltq
 2235 0a0a 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2235      00000000 
 2236 0a12 31C0     		xorl	%eax, %eax
 2237 0a14 E8000000 		call	__printf_chk
 2237      00
 2238 0a19 0FB68424 		movzbl	452(%rsp), %eax
 2238      C4010000 
 2239 0a21 BE000000 		movl	$.LC93, %esi
 2239      00
 2240 0a26 BF010000 		movl	$1, %edi
 2240      00
 2241 0a2b 83E830   		subl	$48, %eax
 2242 0a2e 4898     		cltq
 2243 0a30 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2243      00000000 
 2244 0a38 31C0     		xorl	%eax, %eax
 2245 0a3a E8000000 		call	__printf_chk
 2245      00
 2246 0a3f 0FB68424 		movzbl	453(%rsp), %eax
 2246      C5010000 
 2247 0a47 BE000000 		movl	$.LC92, %esi
 2247      00
 2248 0a4c BF010000 		movl	$1, %edi
 2248      00
 2249 0a51 83E830   		subl	$48, %eax
 2250 0a54 4898     		cltq
 2251 0a56 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2251      00000000 
 2252 0a5e 31C0     		xorl	%eax, %eax
 2253 0a60 E8000000 		call	__printf_chk
 2253      00
 2254 0a65 0FB68424 		movzbl	454(%rsp), %eax
 2254      C6010000 
 2255 0a6d BE000000 		movl	$.LC92, %esi
 2255      00
 2256 0a72 BF010000 		movl	$1, %edi
 2256      00
 2257 0a77 83E830   		subl	$48, %eax
 2258 0a7a 4898     		cltq
 2259 0a7c 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2259      00000000 
 2260 0a84 31C0     		xorl	%eax, %eax
 2261 0a86 E8000000 		call	__printf_chk
 2261      00
 2262 0a8b 0FB68424 		movzbl	455(%rsp), %eax
 2262      C7010000 
 2263 0a93 BE000000 		movl	$.LC94, %esi
 2263      00
 2264 0a98 BF010000 		movl	$1, %edi
 2264      00
 2265 0a9d 83E830   		subl	$48, %eax
 2266 0aa0 4898     		cltq
 2267 0aa2 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2267      00000000 
 2268 0aaa 31C0     		xorl	%eax, %eax
 2269 0aac E8000000 		call	__printf_chk
 2269      00
 2270 0ab1 BF640000 		movl	$100, %edi
 2270      00
 2271 0ab6 E8000000 		call	flSleep
 2271      00
 2272 0abb E9F6FBFF 		jmp	.L237
 2272      FF
 2273              	.L240:
 2274 0ac0 4C89E9   		movq	%r13, %rcx
 2275 0ac3 BA000000 		movl	$.LC98, %edx
 2275      00
 2276 0ac8 E94DF9FF 		jmp	.L447
 2276      FF
 2277              	.L231:
 2278 0acd 4883C101 		addq	$1, %rcx
 2279 0ad1 89C2     		movl	%eax, %edx
 2280 0ad3 BE000000 		movl	$.LC88, %esi
 2280      00
 2281 0ad8 BF010000 		movl	$1, %edi
 2281      00
 2282 0add 31C0     		xorl	%eax, %eax
 2283 0adf 48898C24 		movq	%rcx, 240(%rsp)
 2283      F0000000 
 2284 0ae7 E8000000 		call	__printf_chk
 2284      00
 2285 0aec 488B9424 		movq	240(%rsp), %rdx
 2285      F0000000 
 2286 0af4 488BBC24 		movq	144(%rsp), %rdi
 2286      90000000 
 2287 0afc 488D8C24 		leaq	216(%rsp), %rcx
 2287      D8000000 
 2288 0b04 89DE     		movl	%ebx, %esi
 2289 0b06 E8000000 		call	flSaveFirmware
 2289      00
 2290 0b0b 85C0     		testl	%eax, %eax
 2291 0b0d 0F843FFB 		je	.L226
 2291      FFFF
 2292              	.L258:
 2293 0b13 BB010000 		movl	$1, %ebx
 2293      00
 2294 0b18 E98EFDFF 		jmp	.L256
 2294      FF
 2295              	.L455:
 2296 0b1d 31C0     		xorl	%eax, %eax
 2297 0b1f BE000000 		movl	$.LC99, %esi
 2297      00
 2298 0b24 BF010000 		movl	$1, %edi
 2298      00
 2299 0b29 E8000000 		call	__printf_chk
 2299      00
 2300 0b2e 4584E4   		testb	%r12b, %r12b
 2301 0b31 745C     		je	.L246
 2302 0b33 488BBC24 		movq	144(%rsp), %rdi
 2302      90000000 
 2303 0b3b 488D9424 		leaq	216(%rsp), %rdx
 2303      D8000000 
 2304 0b43 31F6     		xorl	%esi, %esi
 2305 0b45 E8000000 		call	flSelectConduit
 2305      00
 2306 0b4a 85C0     		testl	%eax, %eax
 2307 0b4c 0F85FBF8 		jne	.L263
 2307      FFFF
 2308 0b52 488B4424 		movq	40(%rsp), %rax
 2308      28
 2309 0b57 488BBC24 		movq	144(%rsp), %rdi
 2309      90000000 
 2310 0b5f 488D8C24 		leaq	216(%rsp), %rcx
 2310      D8000000 
 2311 0b67 31D2     		xorl	%edx, %edx
 2312 0b69 488B4068 		movq	104(%rax), %rax
 2313 0b6d 488B30   		movq	(%rax), %rsi
 2314 0b70 E8000000 		call	flProgram
 2314      00
 2315 0b75 85C0     		testl	%eax, %eax
 2316 0b77 0F85D0F8 		jne	.L263
 2316      FFFF
 2317 0b7d E905FCFF 		jmp	.L245
 2317      FF
 2318              	.L249:
 2319 0b82 4C89E9   		movq	%r13, %rcx
 2320 0b85 BA000000 		movl	$.LC103, %edx
 2320      00
 2321 0b8a E98BF8FF 		jmp	.L447
 2321      FF
 2322              	.L246:
 2323 0b8f 4C89E9   		movq	%r13, %rcx
 2324 0b92 BA000000 		movl	$.LC100, %edx
 2324      00
 2325 0b97 E97EF8FF 		jmp	.L447
 2325      FF
 2326              	.L457:
 2327 0b9c 488B4068 		movq	104(%rax), %rax
 2328 0ba0 488DB424 		leaq	208(%rsp), %rsi
 2328      D0000000 
 2329 0ba8 BA0A0000 		movl	$10, %edx
 2329      00
 2330 0bad 488B38   		movq	(%rax), %rdi
 2331 0bb0 E8000000 		call	strtoul
 2331      00
 2332 0bb5 488B8C24 		movq	208(%rsp), %rcx
 2332      D0000000 
 2333 0bbd 4989C4   		movq	%rax, %r12
 2334 0bc0 80393A   		cmpb	$58, (%rcx)
 2335 0bc3 0F84A401 		je	.L255
 2335      0000
 2336 0bc9 B9000000 		movl	$.LC70, %ecx
 2336      00
 2337 0bce BA000000 		movl	$.LC104, %edx
 2337      00
 2338 0bd3 E9BBFCFF 		jmp	.L450
 2338      FF
 2339              	.L456:
 2340 0bd8 31C0     		xorl	%eax, %eax
 2341 0bda 4C89EA   		movq	%r13, %rdx
 2342 0bdd BE000000 		movl	$.LC101, %esi
 2342      00
 2343 0be2 BF010000 		movl	$1, %edi
 2343      00
 2344 0be7 E8000000 		call	__printf_chk
 2344      00
 2345 0bec 4084ED   		testb	%bpl, %bpl
 2346 0bef 7491     		je	.L249
 2347 0bf1 8B3424   		movl	(%rsp), %esi
 2348 0bf4 488BBC24 		movq	144(%rsp), %rdi
 2348      90000000 
 2349 0bfc 488D9424 		leaq	216(%rsp), %rdx
 2349      D8000000 
 2350 0c04 E8000000 		call	flSelectConduit
 2350      00
 2351 0c09 85C0     		testl	%eax, %eax
 2352 0c0b 0F8502FF 		jne	.L258
 2352      FFFF
 2353 0c11 488BBC24 		movq	144(%rsp), %rdi
 2353      90000000 
 2354 0c19 488D9424 		leaq	216(%rsp), %rdx
 2354      D8000000 
 2355 0c21 488DB424 		leaq	224(%rsp), %rsi
 2355      E0000000 
 2356 0c29 E8000000 		call	flIsFPGARunning
 2356      00
 2357 0c2e 85C0     		testl	%eax, %eax
 2358 0c30 0F85DDFE 		jne	.L258
 2358      FFFF
 2359 0c36 80BC24E0 		cmpb	$0, 224(%rsp)
 2359      00000000 
 2360 0c3e 0F84B202 		je	.L251
 2360      0000
 2361 0c44 488B4424 		movq	48(%rsp), %rax
 2361      30
 2362 0c49 488BBC24 		movq	144(%rsp), %rdi
 2362      90000000 
 2363 0c51 488D9424 		leaq	216(%rsp), %rdx
 2363      D8000000 
 2364 0c59 488B4068 		movq	104(%rax), %rax
 2365 0c5d 488B30   		movq	(%rax), %rsi
 2366 0c60 E8000000 		call	parseLine
 2366      00
 2367 0c65 85C0     		testl	%eax, %eax
 2368 0c67 89C3     		movl	%eax, %ebx
 2369 0c69 0F853CFC 		jne	.L256
 2369      FFFF
 2370 0c6f E93AFBFF 		jmp	.L248
 2370      FF
 2371              	.L372:
 2372 0c74 4531FF   		xorl	%r15d, %r15d
 2373 0c77 31DB     		xorl	%ebx, %ebx
 2374              		.p2align 4,,2
 2375 0c79 E985F6FF 		jmp	.L211
 2375      FF
 2376              	.L458:
 2377 0c7e 31C0     		xorl	%eax, %eax
 2378 0c80 BE000000 		movl	$.LC107, %esi
 2378      00
 2379 0c85 BF010000 		movl	$1, %edi
 2379      00
 2380 0c8a E8000000 		call	__printf_chk
 2380      00
 2381 0c8f 4084ED   		testb	%bpl, %bpl
 2382 0c92 0F84B400 		je	.L262
 2382      0000
 2383 0c98 8B3424   		movl	(%rsp), %esi
 2384 0c9b 488BBC24 		movq	144(%rsp), %rdi
 2384      90000000 
 2385 0ca3 488D9424 		leaq	216(%rsp), %rdx
 2385      D8000000 
 2386 0cab E8000000 		call	flSelectConduit
 2386      00
 2387 0cb0 85C0     		testl	%eax, %eax
 2388 0cb2 0F8595F7 		jne	.L263
 2388      FFFF
 2389 0cb8 488BBC24 		movq	144(%rsp), %rdi
 2389      90000000 
 2390 0cc0 488D9424 		leaq	216(%rsp), %rdx
 2390      D8000000 
 2391 0cc8 488DB424 		leaq	224(%rsp), %rsi
 2391      E0000000 
 2392 0cd0 E8000000 		call	flIsFPGARunning
 2392      00
 2393 0cd5 85C0     		testl	%eax, %eax
 2394 0cd7 0F8570F7 		jne	.L263
 2394      FFFF
 2395 0cdd 80BC24E0 		cmpb	$0, 224(%rsp)
 2395      00000000 
 2396 0ce5 7479     		je	.L264
 2397              	.L265:
 2398 0ce7 BF000000 		movl	$.LC108, %edi
 2398      00
 2399 0cec E8000000 		call	readline
 2399      00
 2400 0cf1 4885C0   		testq	%rax, %rax
 2401 0cf4 4989C7   		movq	%rax, %r15
 2402 0cf7 743D     		je	.L266
 2403 0cf9 0FB600   		movzbl	(%rax), %eax
 2404 0cfc 84C0     		testb	%al, %al
 2405 0cfe 74E7     		je	.L265
 2406 0d00 3C71     		cmpb	$113, %al
 2407 0d02 7432     		je	.L266
 2408 0d04 4C89FF   		movq	%r15, %rdi
 2409 0d07 E8000000 		call	add_history
 2409      00
 2410 0d0c 488BBC24 		movq	144(%rsp), %rdi
 2410      90000000 
 2411 0d14 488D9424 		leaq	216(%rsp), %rdx
 2411      D8000000 
 2412 0d1c 4C89FE   		movq	%r15, %rsi
 2413 0d1f E8000000 		call	parseLine
 2413      00
 2414 0d24 85C0     		testl	%eax, %eax
 2415 0d26 7531     		jne	.L432
 2416 0d28 4C89FF   		movq	%r15, %rdi
 2417 0d2b E8000000 		call	free
 2417      00
 2418 0d30 41803F71 		cmpb	$113, (%r15)
 2419 0d34 75B1     		jne	.L265
 2420              	.L266:
 2421 0d36 488B4424 		movq	104(%rsp), %rax
 2421      68
 2422 0d3b 83786000 		cmpl	$0, 96(%rax)
 2423 0d3f 0F8FA2FA 		jg	.L269
 2423      FFFF
 2424 0d45 31DB     		xorl	%ebx, %ebx
 2425 0d47 E9B7F5FF 		jmp	.L211
 2425      FF
 2426              	.L262:
 2427 0d4c 4C89E9   		movq	%r13, %rcx
 2428 0d4f BA000000 		movl	$.LC110, %edx
 2428      00
 2429 0d54 E9C1F6FF 		jmp	.L447
 2429      FF
 2430              	.L432:
 2431 0d59 89C3     		movl	%eax, %ebx
 2432 0d5b E9A3F5FF 		jmp	.L211
 2432      FF
 2433              	.L264:
 2434 0d60 4C89E9   		movq	%r13, %rcx
 2435 0d63 BA000000 		movl	$.LC109, %edx
 2435      00
 2436 0d68 E9ADF6FF 		jmp	.L447
 2436      FF
 2437              	.L255:
 2438 0d6d 4883C101 		addq	$1, %rcx
 2439 0d71 4889C2   		movq	%rax, %rdx
 2440 0d74 BE000000 		movl	$.LC105, %esi
 2440      00
 2441 0d79 BF010000 		movl	$1, %edi
 2441      00
 2442 0d7e 31C0     		xorl	%eax, %eax
 2443 0d80 48898C24 		movq	%rcx, 208(%rsp)
 2443      D0000000 
 2444 0d88 E8000000 		call	__printf_chk
 2444      00
 2445 0d8d 488BBC24 		movq	208(%rsp), %rdi
 2445      D0000000 
 2446 0d95 BE000000 		movl	$.LC1, %esi
 2446      00
 2447 0d9a E8000000 		call	fopen
 2447      00
 2448 0d9f 4885C0   		testq	%rax, %rax
 2449 0da2 4889C3   		movq	%rax, %rbx
 2450 0da5 0F845801 		je	.L371
 2450      0000
 2451 0dab E8000000 		call	sigRegisterHandler
 2451      00
 2452 0db0 8B3424   		movl	(%rsp), %esi
 2453 0db3 488BBC24 		movq	144(%rsp), %rdi
 2453      90000000 
 2454 0dbb 488D9424 		leaq	216(%rsp), %rdx
 2454      D8000000 
 2455 0dc3 E8000000 		call	flSelectConduit
 2455      00
 2456 0dc8 85C0     		testl	%eax, %eax
 2457 0dca 0F8543FD 		jne	.L258
 2457      FFFF
 2458 0dd0 488BBC24 		movq	144(%rsp), %rdi
 2458      90000000 
 2459 0dd8 450FB6E4 		movzbl	%r12b, %r12d
 2460 0ddc 4C8D8424 		leaq	216(%rsp), %r8
 2460      D8000000 
 2461 0de4 31C9     		xorl	%ecx, %ecx
 2462 0de6 BA005800 		movl	$22528, %edx
 2462      00
 2463 0deb 4489E6   		movl	%r12d, %esi
 2464 0dee E8000000 		call	flReadChannelAsyncSubmit
 2464      00
 2465 0df3 85C0     		testl	%eax, %eax
 2466 0df5 0F8518FD 		jne	.L258
 2466      FFFF
 2467              	.L260:
 2468 0dfb 488BBC24 		movq	144(%rsp), %rdi
 2468      90000000 
 2469 0e03 4C8D8424 		leaq	216(%rsp), %r8
 2469      D8000000 
 2470 0e0b 31C9     		xorl	%ecx, %ecx
 2471 0e0d BA005800 		movl	$22528, %edx
 2471      00
 2472 0e12 4489E6   		movl	%r12d, %esi
 2473 0e15 E8000000 		call	flReadChannelAsyncSubmit
 2473      00
 2474 0e1a 85C0     		testl	%eax, %eax
 2475 0e1c 0F85F1FC 		jne	.L258
 2475      FFFF
 2476 0e22 488D8C24 		leaq	192(%rsp), %rcx
 2476      C0000000 
 2477 0e2a 488BBC24 		movq	144(%rsp), %rdi
 2477      90000000 
 2478 0e32 4C8D8424 		leaq	216(%rsp), %r8
 2478      D8000000 
 2479 0e3a 488DB424 		leaq	224(%rsp), %rsi
 2479      E0000000 
 2480 0e42 4889CA   		movq	%rcx, %rdx
 2481 0e45 E8000000 		call	flReadChannelAsyncAwait
 2481      00
 2482 0e4a 85C0     		testl	%eax, %eax
 2483 0e4c 0F85C1FC 		jne	.L258
 2483      FFFF
 2484 0e52 8B9424C0 		movl	192(%rsp), %edx
 2484      000000
 2485 0e59 488BBC24 		movq	224(%rsp), %rdi
 2485      E0000000 
 2486 0e61 4889D9   		movq	%rbx, %rcx
 2487 0e64 BE010000 		movl	$1, %esi
 2487      00
 2488 0e69 E8000000 		call	fwrite
 2488      00
 2489 0e6e BE000000 		movl	$.LC80, %esi
 2489      00
 2490 0e73 BF010000 		movl	$1, %edi
 2490      00
 2491 0e78 31C0     		xorl	%eax, %eax
 2492 0e7a E8000000 		call	__printf_chk
 2492      00
 2493 0e7f E8000000 		call	sigIsRaised
 2493      00
 2494 0e84 84C0     		testb	%al, %al
 2495 0e86 0F846FFF 		je	.L260
 2495      FFFF
 2496 0e8c BE000000 		movl	$.LC106, %esi
 2496      00
 2497 0e91 BF010000 		movl	$1, %edi
 2497      00
 2498 0e96 31C0     		xorl	%eax, %eax
 2499 0e98 E8000000 		call	__printf_chk
 2499      00
 2500 0e9d 488D8C24 		leaq	192(%rsp), %rcx
 2500      C0000000 
 2501 0ea5 488BBC24 		movq	144(%rsp), %rdi
 2501      90000000 
 2502 0ead 4C8D8424 		leaq	216(%rsp), %r8
 2502      D8000000 
 2503 0eb5 488DB424 		leaq	224(%rsp), %rsi
 2503      E0000000 
 2504 0ebd 4889CA   		movq	%rcx, %rdx
 2505 0ec0 E8000000 		call	flReadChannelAsyncAwait
 2505      00
 2506 0ec5 85C0     		testl	%eax, %eax
 2507 0ec7 0F8546FC 		jne	.L258
 2507      FFFF
 2508 0ecd 8B9424C0 		movl	192(%rsp), %edx
 2508      000000
 2509 0ed4 488BBC24 		movq	224(%rsp), %rdi
 2509      E0000000 
 2510 0edc 4889D9   		movq	%rbx, %rcx
 2511 0edf BE010000 		movl	$1, %esi
 2511      00
 2512 0ee4 E8000000 		call	fwrite
 2512      00
 2513 0ee9 4889DF   		movq	%rbx, %rdi
 2514 0eec E8000000 		call	fclose
 2514      00
 2515 0ef1 E9C7F8FF 		jmp	.L254
 2515      FF
 2516              	.L251:
 2517 0ef6 4C89E9   		movq	%r13, %rcx
 2518 0ef9 BA000000 		movl	$.LC102, %edx
 2518      00
 2519 0efe E990F9FF 		jmp	.L450
 2519      FF
 2520              	.L371:
 2521 0f03 BB0B0000 		movl	$11, %ebx
 2521      00
 2522 0f08 E99EF9FF 		jmp	.L256
 2522      FF
 2523              	.L241:
 2524 0f0d BE000000 		movl	$.LC97, %esi
 2524      00
 2525 0f12 BF010000 		movl	$1, %edi
 2525      00
 2526 0f17 31C0     		xorl	%eax, %eax
 2527 0f19 E8000000 		call	__printf_chk
 2527      00
 2528 0f1e E955F8FF 		jmp	.L244
 2528      FF
 2529              	.L271:
 2530 0f23 488BBC24 		movq	144(%rsp), %rdi
 2530      90000000 
 2531 0f2b 488D9424 		leaq	216(%rsp), %rdx
 2531      D8000000 
 2532 0f33 488D7424 		leaq	112(%rsp), %rsi
 2532      70
 2533 0f38 E8000000 		call	flIsFPGARunning
 2533      00
 2534 0f3d 85C0     		testl	%eax, %eax
 2535 0f3f 0F85C2F8 		jne	.L446
 2535      FFFF
 2536 0f45 807C2470 		cmpb	$0, 112(%rsp)
 2536      00
 2537 0f4a 0F840A01 		je	.L274
 2537      0000
 2538 0f50 488DBC24 		leaq	448(%rsp), %rdi
 2538      C0010000 
 2539 0f58 BE000000 		movl	$.LC111, %esi
 2539      00
 2540 0f5d B9690000 		movl	$105, %ecx
 2540      00
 2541 0f62 F3A4     		rep movsb
 2542 0f64 488DBC24 		leaq	448(%rsp), %rdi
 2542      C0010000 
 2543 0f6c BE000000 		movl	$.LC112, %esi
 2543      00
 2544 0f71 E8000000 		call	fopen
 2544      00
 2545 0f76 4885C0   		testq	%rax, %rax
 2546 0f79 4889C3   		movq	%rax, %rbx
 2547 0f7c 0F840F01 		je	.L459
 2547      0000
 2548 0f82 BF640000 		movl	$100, %edi
 2548      00
 2549 0f87 48C78424 		movq	$100, 160(%rsp)
 2549      A0000000 
 2549      64000000 
 2550 0f93 E8000000 		call	malloc
 2550      00
 2551 0f98 48898424 		movq	%rax, 176(%rsp)
 2551      B0000000 
 2552 0fa0 EB14     		jmp	.L277
 2553              	.L279:
 2554 0fa2 833D0000 		cmpl	$0, numLines(%rip)
 2554      000000
 2555 0fa9 0F85D000 		jne	.L460
 2555      0000
 2556              	.L278:
 2557 0faf 83050000 		addl	$1, numLines(%rip)
 2557      000001
 2558              	.L277:
 2559 0fb6 488DB424 		leaq	160(%rsp), %rsi
 2559      A0000000 
 2560 0fbe 488DBC24 		leaq	176(%rsp), %rdi
 2560      B0000000 
 2561 0fc6 4889D9   		movq	%rbx, %rcx
 2562 0fc9 BA0A0000 		movl	$10, %edx
 2562      00
 2563 0fce E8000000 		call	__getdelim
 2563      00
 2564 0fd3 4883C001 		addq	$1, %rax
 2565 0fd7 75C9     		jne	.L279
 2566 0fd9 488BBC24 		movq	176(%rsp), %rdi
 2566      B0000000 
 2567 0fe1 832D0000 		subl	$1, numLines(%rip)
 2567      000001
 2568 0fe8 E8000000 		call	free
 2568      00
 2569 0fed 4889DF   		movq	%rbx, %rdi
 2570 0ff0 E8000000 		call	fclose
 2570      00
 2571 0ff5 4C893C24 		movq	%r15, (%rsp)
 2572              	.L361:
 2573 0ff9 BF010000 		movl	$1, %edi
 2573      00
 2574 0ffe E8000000 		call	malloc
 2574      00
 2575 1003 488BBC24 		movq	144(%rsp), %rdi
 2575      90000000 
 2576 100b 4C8D8424 		leaq	216(%rsp), %r8
 2576      D8000000 
 2577 1013 31F6     		xorl	%esi, %esi
 2578 1015 4889C1   		movq	%rax, %rcx
 2579 1018 BA010000 		movl	$1, %edx
 2579      00
 2580 101d 4889C5   		movq	%rax, %rbp
 2581 1020 E8000000 		call	flReadChannel
 2581      00
 2582 1025 85C0     		testl	%eax, %eax
 2583 1027 0F856B01 		jne	.L444
 2583      0000
 2584 102d 0FB65500 		movzbl	0(%rbp), %edx
 2585 1031 BE000000 		movl	$.LC114, %esi
 2585      00
 2586 1036 BF010000 		movl	$1, %edi
 2586      00
 2587 103b E8000000 		call	__printf_chk
 2587      00
 2588 1040 440FB665 		movzbl	0(%rbp), %r12d
 2588      00
 2589 1045 418D4424 		leal	-1(%r12), %eax
 2589      FF
 2590 104a 3C01     		cmpb	$1, %al
 2591 104c 7659     		jbe	.L461
 2592              	.L359:
 2593 104e BFE80300 		movl	$1000, %edi
 2593      00
 2594 1053 E8000000 		call	flSleep
 2594      00
 2595 1058 EB9F     		jmp	.L361
 2596              	.L274:
 2597 105a 488B3D00 		movq	stderr(%rip), %rdi
 2597      000000
 2598 1061 4C89E9   		movq	%r13, %rcx
 2599 1064 BA000000 		movl	$.LC102, %edx
 2599      00
 2600 1069 BE010000 		movl	$1, %esi
 2600      00
 2601 106e 31C0     		xorl	%eax, %eax
 2602 1070 BB0C0000 		movl	$12, %ebx
 2602      00
 2603 1075 E8000000 		call	__fprintf_chk
 2603      00
 2604 107a E984F2FF 		jmp	.L211
 2604      FF
 2605              	.L460:
 2606 107f 488BBC24 		movq	176(%rsp), %rdi
 2606      B0000000 
 2607 1087 E8000000 		call	format
 2607      00
 2608 108c E91EFFFF 		jmp	.L278
 2608      FF
 2609              	.L459:
 2610 1091 BE000000 		movl	$.LC113, %esi
 2610      00
 2611 1096 BF010000 		movl	$1, %edi
 2611      00
 2612 109b 31C0     		xorl	%eax, %eax
 2613 109d E8000000 		call	__printf_chk
 2613      00
 2614 10a2 E9A6F2FF 		jmp	.L276
 2614      FF
 2615              	.L461:
 2616 10a7 BB020000 		movl	$2, %ebx
 2616      00
 2617              	.L283:
 2618 10ac BFE80300 		movl	$1000, %edi
 2618      00
 2619 10b1 E8000000 		call	flSleep
 2619      00
 2620 10b6 488BBC24 		movq	144(%rsp), %rdi
 2620      90000000 
 2621 10be 4C8D8424 		leaq	216(%rsp), %r8
 2621      D8000000 
 2622 10c6 31F6     		xorl	%esi, %esi
 2623 10c8 4889E9   		movq	%rbp, %rcx
 2624 10cb BA010000 		movl	$1, %edx
 2624      00
 2625 10d0 E8000000 		call	flReadChannel
 2625      00
 2626 10d5 85C0     		testl	%eax, %eax
 2627 10d7 0F85BB00 		jne	.L444
 2627      0000
 2628 10dd 0FB65500 		movzbl	0(%rbp), %edx
 2629 10e1 BE000000 		movl	$.LC114, %esi
 2629      00
 2630 10e6 BF010000 		movl	$1, %edi
 2630      00
 2631 10eb E8000000 		call	__printf_chk
 2631      00
 2632 10f0 443A6500 		cmpb	0(%rbp), %r12b
 2633 10f4 0F8554FF 		jne	.L359
 2633      FFFF
 2634 10fa 80EB01   		subb	$1, %bl
 2635 10fd 75AD     		jne	.L283
 2636 10ff C78424C0 		movl	$0, 192(%rsp)
 2636      00000000 
 2636      000000
 2637 110a C78424C4 		movl	$0, 196(%rsp)
 2637      00000000 
 2637      000000
 2638 1115 BB010000 		movl	$1, %ebx
 2638      00
 2639 111a EB14     		jmp	.L363
 2640              	.L463:
 2641 111c 8D4BFF   		leal	-1(%rbx), %ecx
 2642 111f D3E0     		sall	%cl, %eax
 2643 1121 018424C0 		addl	%eax, 192(%rsp)
 2643      000000
 2644              	.L286:
 2645 1128 83C301   		addl	$1, %ebx
 2646 112b 83FB09   		cmpl	$9, %ebx
 2647 112e 7471     		je	.L462
 2648              	.L363:
 2649 1130 BF010000 		movl	$1, %edi
 2649      00
 2650 1135 E8000000 		call	malloc
 2650      00
 2651 113a BFE80300 		movl	$1000, %edi
 2651      00
 2652 113f 4989C4   		movq	%rax, %r12
 2653 1142 E8000000 		call	flSleep
 2653      00
 2654 1147 488BBC24 		movq	144(%rsp), %rdi
 2654      90000000 
 2655 114f 4C8D8424 		leaq	216(%rsp), %r8
 2655      D8000000 
 2656 1157 4C89E1   		movq	%r12, %rcx
 2657 115a BA010000 		movl	$1, %edx
 2657      00
 2658 115f 89DE     		movl	%ebx, %esi
 2659 1161 E8000000 		call	flReadChannel
 2659      00
 2660 1166 85C0     		testl	%eax, %eax
 2661 1168 752E     		jne	.L444
 2662 116a 410FB60C 		movzbl	(%r12), %ecx
 2662      24
 2663 116f 89DA     		movl	%ebx, %edx
 2664 1171 BE000000 		movl	$.LC115, %esi
 2664      00
 2665 1176 BF010000 		movl	$1, %edi
 2665      00
 2666 117b E8000000 		call	__printf_chk
 2666      00
 2667 1180 83FB04   		cmpl	$4, %ebx
 2668 1183 410FB604 		movzbl	(%r12), %eax
 2668      24
 2669 1188 7692     		jbe	.L463
 2670 118a 8D4BFB   		leal	-5(%rbx), %ecx
 2671 118d D3E0     		sall	%cl, %eax
 2672 118f 018424C4 		addl	%eax, 196(%rsp)
 2672      000000
 2673 1196 EB90     		jmp	.L286
 2674              	.L444:
 2675 1198 4C8B3C24 		movq	(%rsp), %r15
 2676 119c E966F6FF 		jmp	.L446
 2676      FF
 2677              	.L462:
 2678 11a1 660F6F05 		movdqa	.LC116(%rip), %xmm0
 2678      00000000 
 2679 11a9 488DB424 		leaq	224(%rsp), %rsi
 2679      E0000000 
 2680 11b1 488DBC24 		leaq	192(%rsp), %rdi
 2680      C0000000 
 2681 11b9 4531ED   		xorl	%r13d, %r13d
 2682 11bc 4531F6   		xorl	%r14d, %r14d
 2683 11bf 660F7F84 		movdqa	%xmm0, 224(%rsp)
 2683      24E00000 
 2683      00
 2684 11c8 4531FF   		xorl	%r15d, %r15d
 2685 11cb 4531E4   		xorl	%r12d, %r12d
 2686 11ce E8000000 		call	decrypt
 2686      00
 2687 11d3 31C0     		xorl	%eax, %eax
 2688 11d5 BE010000 		movl	$1, %esi
 2688      00
 2689 11da BA010000 		movl	$1, %edx
 2689      00
 2690 11df 8BBC24C0 		movl	192(%rsp), %edi
 2690      000000
 2691 11e6 EB20     		jmp	.L293
 2692              	.L288:
 2693 11e8 4080FE10 		cmpb	$16, %sil
 2694 11ec 7732     		ja	.L290
 2695 11ee 85DF     		testl	%ebx, %edi
 2696 11f0 740A     		je	.L289
 2697 11f2 8D48F8   		leal	-8(%rax), %ecx
 2698 11f5 89D3     		movl	%edx, %ebx
 2699 11f7 D3E3     		sall	%cl, %ebx
 2700 11f9 4101DF   		addl	%ebx, %r15d
 2701              	.L289:
 2702 11fc 83C601   		addl	$1, %esi
 2703 11ff 83C001   		addl	$1, %eax
 2704 1202 4080FE21 		cmpb	$33, %sil
 2705 1206 742E     		je	.L464
 2706              	.L293:
 2707 1208 89D3     		movl	%edx, %ebx
 2708 120a 89C1     		movl	%eax, %ecx
 2709 120c D3E3     		sall	%cl, %ebx
 2710 120e 4080FE08 		cmpb	$8, %sil
 2711 1212 77D4     		ja	.L288
 2712 1214 458D041C 		leal	(%r12,%rbx), %r8d
 2713 1218 85FB     		testl	%edi, %ebx
 2714 121a 450F45E0 		cmovne	%r8d, %r12d
 2715 121e EBDC     		jmp	.L289
 2716              	.L290:
 2717 1220 4080FE18 		cmpb	$24, %sil
 2718 1224 7758     		ja	.L291
 2719 1226 85DF     		testl	%ebx, %edi
 2720 1228 74D2     		je	.L289
 2721 122a 8D48F0   		leal	-16(%rax), %ecx
 2722 122d 89D3     		movl	%edx, %ebx
 2723 122f D3E3     		sall	%cl, %ebx
 2724 1231 4101DE   		addl	%ebx, %r14d
 2725 1234 EBC6     		jmp	.L289
 2726              	.L464:
 2727 1236 8BBC24C4 		movl	196(%rsp), %edi
 2727      000000
 2728 123d 31C0     		xorl	%eax, %eax
 2729 123f 31F6     		xorl	%esi, %esi
 2730 1241 4531C0   		xorl	%r8d, %r8d
 2731 1244 BA010000 		movl	$1, %edx
 2731      00
 2732 1249 EB14     		jmp	.L297
 2733              	.L466:
 2734 124b D3E3     		sall	%cl, %ebx
 2735 124d 448D0C1E 		leal	(%rsi,%rbx), %r9d
 2736 1251 85FB     		testl	%edi, %ebx
 2737 1253 410F45F1 		cmovne	%r9d, %esi
 2738              	.L295:
 2739 1257 83C001   		addl	$1, %eax
 2740 125a 83F820   		cmpl	$32, %eax
 2741 125d 7436     		je	.L465
 2742              	.L297:
 2743 125f 8D4801   		leal	1(%rax), %ecx
 2744 1262 89D3     		movl	%edx, %ebx
 2745 1264 6683F910 		cmpw	$16, %cx
 2746 1268 89C1     		movl	%eax, %ecx
 2747 126a 76DF     		jbe	.L466
 2748 126c D3E3     		sall	%cl, %ebx
 2749 126e 85DF     		testl	%ebx, %edi
 2750 1270 74E5     		je	.L295
 2751 1272 8D48F0   		leal	-16(%rax), %ecx
 2752 1275 89D3     		movl	%edx, %ebx
 2753 1277 D3E3     		sall	%cl, %ebx
 2754 1279 4101D8   		addl	%ebx, %r8d
 2755 127c EBD9     		jmp	.L295
 2756              	.L291:
 2757 127e 85DF     		testl	%ebx, %edi
 2758 1280 0F8476FF 		je	.L289
 2758      FFFF
 2759 1286 8D48E8   		leal	-24(%rax), %ecx
 2760 1289 89D3     		movl	%edx, %ebx
 2761 128b D3E3     		sall	%cl, %ebx
 2762 128d 4101DD   		addl	%ebx, %r13d
 2763 1290 E967FFFF 		jmp	.L289
 2763      FF
 2764              	.L465:
 2765 1295 31C0     		xorl	%eax, %eax
 2766 1297 31D2     		xorl	%edx, %edx
 2767 1299 0FB7F6   		movzwl	%si, %esi
 2768 129c BF010000 		movl	$1, %edi
 2768      00
 2769              	.L299:
 2770 12a1 8D480B   		leal	11(%rax), %ecx
 2771 12a4 89FB     		movl	%edi, %ebx
 2772 12a6 83E10F   		andl	$15, %ecx
 2773 12a9 D3E3     		sall	%cl, %ebx
 2774 12ab 89C1     		movl	%eax, %ecx
 2775 12ad 448D0C1A 		leal	(%rdx,%rbx), %r9d
 2776 12b1 89F3     		movl	%esi, %ebx
 2777 12b3 D3FB     		sarl	%cl, %ebx
 2778 12b5 89D9     		movl	%ebx, %ecx
 2779 12b7 80E101   		andb	$1, %cl
 2780 12ba 410F45D1 		cmovne	%r9d, %edx
 2781 12be 4883C001 		addq	$1, %rax
 2782 12c2 4883F810 		cmpq	$16, %rax
 2783 12c6 75D9     		jne	.L299
 2784 12c8 BF010000 		movl	$1, %edi
 2784      00
 2785 12cd 89542410 		movl	%edx, 16(%rsp)
 2786 12d1 44894424 		movl	%r8d, 8(%rsp)
 2786      08
 2787 12d6 E8000000 		call	malloc
 2787      00
 2788 12db 8B350000 		movl	numLines(%rip), %esi
 2788      0000
 2789 12e1 4889C3   		movq	%rax, %rbx
 2790 12e4 B9000000 		movl	$dataFromCSV+20, %ecx
 2790      00
 2791 12e9 B8010000 		movl	$1, %eax
 2791      00
 2792 12ee 448B4424 		movl	8(%rsp), %r8d
 2792      08
 2793 12f3 8B542410 		movl	16(%rsp), %edx
 2794 12f7 EB12     		jmp	.L300
 2795              	.L304:
 2796 12f9 66443B41 		cmpw	-4(%rcx), %r8w
 2796      FC
 2797 12fe 0F84A300 		je	.L467
 2797      0000
 2798              	.L301:
 2799 1304 83C001   		addl	$1, %eax
 2800 1307 4883C110 		addq	$16, %rcx
 2801              	.L300:
 2802 130b 39F0     		cmpl	%esi, %eax
 2803 130d 7EEA     		jle	.L304
 2804 130f BE000000 		movl	$.LC123, %esi
 2804      00
 2805 1314 BF010000 		movl	$1, %edi
 2805      00
 2806 1319 31C0     		xorl	%eax, %eax
 2807 131b E8000000 		call	__printf_chk
 2807      00
 2808 1320 BFE80300 		movl	$1000, %edi
 2808      00
 2809 1325 C60304   		movb	$4, (%rbx)
 2810 1328 E8000000 		call	flSleep
 2810      00
 2811 132d 488BBC24 		movq	144(%rsp), %rdi
 2811      90000000 
 2812 1335 4C8D8424 		leaq	216(%rsp), %r8
 2812      D8000000 
 2813 133d 4889D9   		movq	%rbx, %rcx
 2814 1340 BA010000 		movl	$1, %edx
 2814      00
 2815 1345 BE090000 		movl	$9, %esi
 2815      00
 2816 134a E8000000 		call	flWriteChannel
 2816      00
 2817 134f 85C0     		testl	%eax, %eax
 2818 1351 0F8541FE 		jne	.L444
 2818      FFFF
 2819 1357 BB0A0000 		movl	$10, %ebx
 2819      00
 2820              	.L364:
 2821 135c BFE80300 		movl	$1000, %edi
 2821      00
 2822 1361 C68424E0 		movb	$0, 224(%rsp)
 2822      00000000 
 2823 1369 E8000000 		call	flSleep
 2823      00
 2824 136e 488BBC24 		movq	144(%rsp), %rdi
 2824      90000000 
 2825 1376 4C8D8424 		leaq	216(%rsp), %r8
 2825      D8000000 
 2826 137e 488D8C24 		leaq	224(%rsp), %rcx
 2826      E0000000 
 2827 1386 BA010000 		movl	$1, %edx
 2827      00
 2828 138b 89DE     		movl	%ebx, %esi
 2829 138d E8000000 		call	flWriteChannel
 2829      00
 2830 1392 85C0     		testl	%eax, %eax
 2831 1394 0F85FEFD 		jne	.L444
 2831      FFFF
 2832 139a 83C301   		addl	$1, %ebx
 2833 139d 83FB12   		cmpl	$18, %ebx
 2834 13a0 75BA     		jne	.L364
 2835              		.p2align 4,,3
 2836 13a2 E9A7FCFF 		jmp	.L359
 2836      FF
 2837              	.L467:
 2838 13a7 663B11   		cmpw	(%rcx), %dx
 2839              		.p2align 4,,2
 2840 13aa 0F8554FF 		jne	.L301
 2840      FFFF
 2841 13b0 4898     		cltq
 2842 13b2 BE000000 		movl	$.LC117, %esi
 2842      00
 2843 13b7 BF010000 		movl	$1, %edi
 2843      00
 2844 13bc 48894424 		movq	%rax, 24(%rsp)
 2844      18
 2845 13c1 48C1E004 		salq	$4, %rax
 2846 13c5 8B880000 		movl	dataFromCSV+8(%rax), %ecx
 2846      0000
 2847 13cb 8B800000 		movl	dataFromCSV+12(%rax), %eax
 2847      0000
 2848 13d1 89442410 		movl	%eax, 16(%rsp)
 2849 13d5 31C0     		xorl	%eax, %eax
 2850 13d7 894C2408 		movl	%ecx, 8(%rsp)
 2851 13db E8000000 		call	__printf_chk
 2851      00
 2852 13e0 837C2408 		cmpl	$1, 8(%rsp)
 2852      01
 2853 13e5 0F84C400 		je	.L468
 2853      0000
 2854 13eb 450FB6E4 		movzbl	%r12b, %r12d
 2855 13ef 450FB6FF 		movzbl	%r15b, %r15d
 2856 13f3 450FB6F6 		movzbl	%r14b, %r14d
 2857 13f7 4169C7F4 		imull	$500, %r15d, %eax
 2857      010000
 2858 13fe 450FB6ED 		movzbl	%r13b, %r13d
 2859 1402 416BD464 		imull	$100, %r12d, %edx
 2860 1406 01C2     		addl	%eax, %edx
 2861 1408 4169C6E8 		imull	$1000, %r14d, %eax
 2861      030000
 2862 140f 01C2     		addl	%eax, %edx
 2863 1411 4169C5D0 		imull	$2000, %r13d, %eax
 2863      070000
 2864 1418 01D0     		addl	%edx, %eax
 2865 141a 39442410 		cmpl	%eax, 16(%rsp)
 2866 141e 89442408 		movl	%eax, 8(%rsp)
 2867 1422 0F8D2B01 		jge	.L469
 2867      0000
 2868 1428 BFE80300 		movl	$1000, %edi
 2868      00
 2869 142d C60302   		movb	$2, (%rbx)
 2870 1430 E8000000 		call	flSleep
 2870      00
 2871 1435 488BBC24 		movq	144(%rsp), %rdi
 2871      90000000 
 2872 143d 4C8D8424 		leaq	216(%rsp), %r8
 2872      D8000000 
 2873 1445 4889D9   		movq	%rbx, %rcx
 2874 1448 BA010000 		movl	$1, %edx
 2874      00
 2875 144d BE090000 		movl	$9, %esi
 2875      00
 2876 1452 E8000000 		call	flWriteChannel
 2876      00
 2877 1457 85C0     		testl	%eax, %eax
 2878 1459 0F8539FD 		jne	.L444
 2878      FFFF
 2879 145f BB0A0000 		movl	$10, %ebx
 2879      00
 2880              	.L365:
 2881 1464 BFE80300 		movl	$1000, %edi
 2881      00
 2882 1469 C68424E0 		movb	$0, 224(%rsp)
 2882      00000000 
 2883 1471 E8000000 		call	flSleep
 2883      00
 2884 1476 488BBC24 		movq	144(%rsp), %rdi
 2884      90000000 
 2885 147e 4C8D8424 		leaq	216(%rsp), %r8
 2885      D8000000 
 2886 1486 488D8C24 		leaq	224(%rsp), %rcx
 2886      E0000000 
 2887 148e BA010000 		movl	$1, %edx
 2887      00
 2888 1493 89DE     		movl	%ebx, %esi
 2889 1495 E8000000 		call	flWriteChannel
 2889      00
 2890 149a 85C0     		testl	%eax, %eax
 2891 149c 0F85F6FC 		jne	.L444
 2891      FFFF
 2892 14a2 83C301   		addl	$1, %ebx
 2893 14a5 83FB12   		cmpl	$18, %ebx
 2894 14a8 75BA     		jne	.L365
 2895              		.p2align 4,,3
 2896 14aa E99FFBFF 		jmp	.L359
 2896      FF
 2897              	.L468:
 2898 14af BE000000 		movl	$.LC121, %esi
 2898      00
 2899 14b4 BF010000 		movl	$1, %edi
 2899      00
 2900 14b9 31C0     		xorl	%eax, %eax
 2901 14bb E8000000 		call	__printf_chk
 2901      00
 2902 14c0 BFE80300 		movl	$1000, %edi
 2902      00
 2903 14c5 C60303   		movb	$3, (%rbx)
 2904 14c8 E8000000 		call	flSleep
 2904      00
 2905 14cd 488BBC24 		movq	144(%rsp), %rdi
 2905      90000000 
 2906 14d5 4C8D8424 		leaq	216(%rsp), %r8
 2906      D8000000 
 2907 14dd 4889D9   		movq	%rbx, %rcx
 2908 14e0 BA010000 		movl	$1, %edx
 2908      00
 2909 14e5 BE090000 		movl	$9, %esi
 2909      00
 2910 14ea E8000000 		call	flWriteChannel
 2910      00
 2911 14ef 85C0     		testl	%eax, %eax
 2912 14f1 0F85A1FC 		jne	.L444
 2912      FFFF
 2913 14f7 450FB6FF 		movzbl	%r15b, %r15d
 2914 14fb 450FB6F6 		movzbl	%r14b, %r14d
 2915 14ff C78424D4 		movl	$0, 212(%rsp)
 2915      00000000 
 2915      000000
 2916 150a 41C1E708 		sall	$8, %r15d
 2917 150e 41C1E610 		sall	$16, %r14d
 2918 1512 BA080000 		movl	$8, %edx
 2918      00
 2919 1517 31C9     		xorl	%ecx, %ecx
 2920 1519 450FB6ED 		movzbl	%r13b, %r13d
 2921 151d 450FB6E4 		movzbl	%r12b, %r12d
 2922              	.L338:
 2923 1521 85C9     		testl	%ecx, %ecx
 2924 1523 0F84F001 		je	.L470
 2924      0000
 2925 1529 83F908   		cmpl	$8, %ecx
 2926 152c 0F84DF01 		je	.L471
 2926      0000
 2927 1532 83F910   		cmpl	$16, %ecx
 2928 1535 0F84CE01 		je	.L472
 2928      0000
 2929 153b 4489EE   		movl	%r13d, %esi
 2930 153e D3E6     		sall	%cl, %esi
 2931 1540 01F0     		addl	%esi, %eax
 2932 1542 83FA20   		cmpl	$32, %edx
 2933 1545 0F848D00 		je	.L473
 2933      0000
 2934              	.L343:
 2935 154b 83C108   		addl	$8, %ecx
 2936 154e 83C208   		addl	$8, %edx
 2937 1551 EBCE     		jmp	.L338
 2938              	.L469:
 2939 1553 BFE80300 		movl	$1000, %edi
 2939      00
 2940 1558 C60301   		movb	$1, (%rbx)
 2941 155b E8000000 		call	flSleep
 2941      00
 2942 1560 488BBC24 		movq	144(%rsp), %rdi
 2942      90000000 
 2943 1568 4C8D8424 		leaq	216(%rsp), %r8
 2943      D8000000 
 2944 1570 4889D9   		movq	%rbx, %rcx
 2945 1573 BA010000 		movl	$1, %edx
 2945      00
 2946 1578 BE090000 		movl	$9, %esi
 2946      00
 2947 157d E8000000 		call	flWriteChannel
 2947      00
 2948 1582 85C0     		testl	%eax, %eax
 2949 1584 0F850EFC 		jne	.L444
 2949      FFFF
 2950 158a C78424D4 		movl	$0, 212(%rsp)
 2950      00000000 
 2950      000000
 2951 1595 41C1E708 		sall	$8, %r15d
 2952 1599 41C1E610 		sall	$16, %r14d
 2953 159d 31C0     		xorl	%eax, %eax
 2954 159f BA080000 		movl	$8, %edx
 2954      00
 2955 15a4 31C9     		xorl	%ecx, %ecx
 2956              	.L308:
 2957 15a6 85C9     		testl	%ecx, %ecx
 2958 15a8 0F84A803 		je	.L474
 2958      0000
 2959 15ae 83F908   		cmpl	$8, %ecx
 2960 15b1 0F849703 		je	.L475
 2960      0000
 2961 15b7 83F910   		cmpl	$16, %ecx
 2962 15ba 0F848603 		je	.L476
 2962      0000
 2963 15c0 4489EE   		movl	%r13d, %esi
 2964 15c3 D3E6     		sall	%cl, %esi
 2965 15c5 01F0     		addl	%esi, %eax
 2966 15c7 83FA20   		cmpl	$32, %edx
 2967 15ca 0F845101 		je	.L477
 2967      0000
 2968              	.L313:
 2969 15d0 83C108   		addl	$8, %ecx
 2970 15d3 83C208   		addl	$8, %edx
 2971 15d6 EBCE     		jmp	.L308
 2972              	.L473:
 2973 15d8 660F6F15 		movdqa	.LC116(%rip), %xmm2
 2973      00000000 
 2974 15e0 488DB424 		leaq	224(%rsp), %rsi
 2974      E0000000 
 2975 15e8 488DBC24 		leaq	208(%rsp), %rdi
 2975      D0000000 
 2976 15f0 BB0A0000 		movl	$10, %ebx
 2976      00
 2977 15f5 BD010000 		movl	$1, %ebp
 2977      00
 2978 15fa 898424D0 		movl	%eax, 208(%rsp)
 2978      000000
 2979 1601 660F7F94 		movdqa	%xmm2, 224(%rsp)
 2979      24E00000 
 2979      00
 2980 160a E8000000 		call	encrypt
 2980      00
 2981              	.L349:
 2982 160f 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 2982      FFFFFF
 2983 1616 31C0     		xorl	%eax, %eax
 2984 1618 31D2     		xorl	%edx, %edx
 2985 161a 8BB424D0 		movl	208(%rsp), %esi
 2985      000000
 2986              	.L346:
 2987 1621 8D0C07   		leal	(%rdi,%rax), %ecx
 2988 1624 4189E9   		movl	%ebp, %r9d
 2989 1627 41D3E1   		sall	%cl, %r9d
 2990 162a 4185F1   		testl	%esi, %r9d
 2991 162d 740B     		je	.L344
 2992 162f 4189EA   		movl	%ebp, %r10d
 2993 1632 89C1     		movl	%eax, %ecx
 2994 1634 41D3E2   		sall	%cl, %r10d
 2995 1637 4401D2   		addl	%r10d, %edx
 2996              	.L344:
 2997 163a 83C001   		addl	$1, %eax
 2998 163d 83F808   		cmpl	$8, %eax
 2999 1640 75DF     		jne	.L346
 3000 1642 BFE80300 		movl	$1000, %edi
 3000      00
 3001 1647 889424E0 		movb	%dl, 224(%rsp)
 3001      000000
 3002 164e E8000000 		call	flSleep
 3002      00
 3003 1653 488BBC24 		movq	144(%rsp), %rdi
 3003      90000000 
 3004 165b 4C8D8424 		leaq	216(%rsp), %r8
 3004      D8000000 
 3005 1663 488D8C24 		leaq	224(%rsp), %rcx
 3005      E0000000 
 3006 166b BA010000 		movl	$1, %edx
 3006      00
 3007 1670 89DE     		movl	%ebx, %esi
 3008 1672 E8000000 		call	flWriteChannel
 3008      00
 3009 1677 85C0     		testl	%eax, %eax
 3010 1679 0F8519FB 		jne	.L444
 3010      FFFF
 3011 167f 83C301   		addl	$1, %ebx
 3012 1682 83FB0E   		cmpl	$14, %ebx
 3013 1685 7588     		jne	.L349
 3014 1687 BD010000 		movl	$1, %ebp
 3014      00
 3015              	.L355:
 3016 168c 8BB424D4 		movl	212(%rsp), %esi
 3016      000000
 3017 1693 8D3CDD90 		leal	-112(,%rbx,8), %edi
 3017      FFFFFF
 3018 169a 31C0     		xorl	%eax, %eax
 3019 169c 31D2     		xorl	%edx, %edx
 3020              	.L352:
 3021 169e 8D0C07   		leal	(%rdi,%rax), %ecx
 3022 16a1 4189EB   		movl	%ebp, %r11d
 3023 16a4 41D3E3   		sall	%cl, %r11d
 3024 16a7 4185F3   		testl	%esi, %r11d
 3025 16aa 740B     		je	.L350
 3026 16ac 4189E9   		movl	%ebp, %r9d
 3027 16af 89C1     		movl	%eax, %ecx
 3028 16b1 41D3E1   		sall	%cl, %r9d
 3029 16b4 4401CA   		addl	%r9d, %edx
 3030              	.L350:
 3031 16b7 83C001   		addl	$1, %eax
 3032 16ba 83F808   		cmpl	$8, %eax
 3033 16bd 75DF     		jne	.L352
 3034 16bf BFE80300 		movl	$1000, %edi
 3034      00
 3035 16c4 889424E0 		movb	%dl, 224(%rsp)
 3035      000000
 3036 16cb E8000000 		call	flSleep
 3036      00
 3037 16d0 488BBC24 		movq	144(%rsp), %rdi
 3037      90000000 
 3038 16d8 4C8D8424 		leaq	216(%rsp), %r8
 3038      D8000000 
 3039 16e0 488D8C24 		leaq	224(%rsp), %rcx
 3039      E0000000 
 3040 16e8 BA010000 		movl	$1, %edx
 3040      00
 3041 16ed 89DE     		movl	%ebx, %esi
 3042 16ef E8000000 		call	flWriteChannel
 3042      00
 3043 16f4 85C0     		testl	%eax, %eax
 3044 16f6 0F859CFA 		jne	.L444
 3044      FFFF
 3045 16fc 83C301   		addl	$1, %ebx
 3046 16ff 83FB12   		cmpl	$18, %ebx
 3047 1702 7588     		jne	.L355
 3048              		.p2align 4,,3
 3049 1704 E945F9FF 		jmp	.L359
 3049      FF
 3050              	.L472:
 3051 1709 4401F0   		addl	%r14d, %eax
 3052              		.p2align 4,,2
 3053 170c E93AFEFF 		jmp	.L343
 3053      FF
 3054              	.L471:
 3055 1711 4401F8   		addl	%r15d, %eax
 3056              		.p2align 4,,5
 3057 1714 E932FEFF 		jmp	.L343
 3057      FF
 3058              	.L470:
 3059 1719 4401E0   		addl	%r12d, %eax
 3060              		.p2align 4,,2
 3061 171c E92AFEFF 		jmp	.L343
 3061      FF
 3062              	.L477:
 3063 1721 660F6F0D 		movdqa	.LC116(%rip), %xmm1
 3063      00000000 
 3064 1729 488DB424 		leaq	224(%rsp), %rsi
 3064      E0000000 
 3065 1731 488DBC24 		leaq	208(%rsp), %rdi
 3065      D0000000 
 3066 1739 BB0A0000 		movl	$10, %ebx
 3066      00
 3067 173e 41BC0100 		movl	$1, %r12d
 3067      0000
 3068 1744 898424D0 		movl	%eax, 208(%rsp)
 3068      000000
 3069 174b 660F7F8C 		movdqa	%xmm1, 224(%rsp)
 3069      24E00000 
 3069      00
 3070 1754 E8000000 		call	encrypt
 3070      00
 3071              	.L320:
 3072 1759 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 3072      FFFFFF
 3073 1760 31C0     		xorl	%eax, %eax
 3074 1762 31D2     		xorl	%edx, %edx
 3075 1764 8BB424D0 		movl	208(%rsp), %esi
 3075      000000
 3076              	.L316:
 3077 176b 8D0C07   		leal	(%rdi,%rax), %ecx
 3078 176e 4589E2   		movl	%r12d, %r10d
 3079 1771 41D3E2   		sall	%cl, %r10d
 3080 1774 4185F2   		testl	%esi, %r10d
 3081 1777 740B     		je	.L314
 3082 1779 4589E3   		movl	%r12d, %r11d
 3083 177c 89C1     		movl	%eax, %ecx
 3084 177e 41D3E3   		sall	%cl, %r11d
 3085 1781 4401DA   		addl	%r11d, %edx
 3086              	.L314:
 3087 1784 83C001   		addl	$1, %eax
 3088 1787 83F808   		cmpl	$8, %eax
 3089 178a 75DF     		jne	.L316
 3090 178c BFE80300 		movl	$1000, %edi
 3090      00
 3091 1791 889424E0 		movb	%dl, 224(%rsp)
 3091      000000
 3092 1798 E8000000 		call	flSleep
 3092      00
 3093 179d 488BBC24 		movq	144(%rsp), %rdi
 3093      90000000 
 3094 17a5 4C8D8424 		leaq	216(%rsp), %r8
 3094      D8000000 
 3095 17ad 488D8C24 		leaq	224(%rsp), %rcx
 3095      E0000000 
 3096 17b5 BA010000 		movl	$1, %edx
 3096      00
 3097 17ba 89DE     		movl	%ebx, %esi
 3098 17bc E8000000 		call	flWriteChannel
 3098      00
 3099 17c1 85C0     		testl	%eax, %eax
 3100 17c3 0F85CFF9 		jne	.L444
 3100      FFFF
 3101 17c9 83C301   		addl	$1, %ebx
 3102 17cc 83FB0E   		cmpl	$14, %ebx
 3103 17cf 7588     		jne	.L320
 3104 17d1 41BC0100 		movl	$1, %r12d
 3104      0000
 3105              	.L326:
 3106 17d7 8BB424D4 		movl	212(%rsp), %esi
 3106      000000
 3107 17de 8D3CDD90 		leal	-112(,%rbx,8), %edi
 3107      FFFFFF
 3108 17e5 31C0     		xorl	%eax, %eax
 3109 17e7 31D2     		xorl	%edx, %edx
 3110              	.L323:
 3111 17e9 8D0C07   		leal	(%rdi,%rax), %ecx
 3112 17ec 4589E2   		movl	%r12d, %r10d
 3113 17ef 41D3E2   		sall	%cl, %r10d
 3114 17f2 4185F2   		testl	%esi, %r10d
 3115 17f5 740B     		je	.L321
 3116 17f7 4589E3   		movl	%r12d, %r11d
 3117 17fa 89C1     		movl	%eax, %ecx
 3118 17fc 41D3E3   		sall	%cl, %r11d
 3119 17ff 4401DA   		addl	%r11d, %edx
 3120              	.L321:
 3121 1802 83C001   		addl	$1, %eax
 3122 1805 83F808   		cmpl	$8, %eax
 3123 1808 75DF     		jne	.L323
 3124 180a BFE80300 		movl	$1000, %edi
 3124      00
 3125 180f 889424E0 		movb	%dl, 224(%rsp)
 3125      000000
 3126 1816 E8000000 		call	flSleep
 3126      00
 3127 181b 488BBC24 		movq	144(%rsp), %rdi
 3127      90000000 
 3128 1823 4C8D8424 		leaq	216(%rsp), %r8
 3128      D8000000 
 3129 182b 488D8C24 		leaq	224(%rsp), %rcx
 3129      E0000000 
 3130 1833 BA010000 		movl	$1, %edx
 3130      00
 3131 1838 89DE     		movl	%ebx, %esi
 3132 183a E8000000 		call	flWriteChannel
 3132      00
 3133 183f 85C0     		testl	%eax, %eax
 3134 1841 0F8551F9 		jne	.L444
 3134      FFFF
 3135 1847 83C301   		addl	$1, %ebx
 3136 184a 83FB12   		cmpl	$18, %ebx
 3137 184d 7588     		jne	.L326
 3138 184f 807D0001 		cmpb	$1, 0(%rbp)
 3139 1853 0F85F5F7 		jne	.L359
 3139      FFFF
 3140 1859 488B4424 		movq	24(%rsp), %rax
 3140      18
 3141 185e 488DBC24 		leaq	448(%rsp), %rdi
 3141      C0010000 
 3142 1866 BE000000 		movl	$.LC118, %esi
 3142      00
 3143 186b 8B5C2408 		movl	8(%rsp), %ebx
 3144 186f 41BC1000 		movl	$16, %r12d
 3144      0000
 3145 1875 BD010000 		movl	$1, %ebp
 3145      00
 3146 187a 48C1E004 		salq	$4, %rax
 3147 187e 29980000 		subl	%ebx, dataFromCSV+12(%rax)
 3147      0000
 3148 1884 E8000000 		call	fopen
 3148      00
 3149 1889 B9000000 		movl	$.LC119, %ecx
 3149      00
 3150 188e 4889C7   		movq	%rax, %rdi
 3151 1891 4889C3   		movq	%rax, %rbx
 3152 1894 BA000000 		movl	$.LC120, %edx
 3152      00
 3153 1899 BE010000 		movl	$1, %esi
 3153      00
 3154 189e 31C0     		xorl	%eax, %eax
 3155 18a0 E8000000 		call	__fprintf_chk
 3155      00
 3156 18a5 BA000000 		movl	$.LC73, %edx
 3156      00
 3157 18aa BE010000 		movl	$1, %esi
 3157      00
 3158 18af 4889DF   		movq	%rbx, %rdi
 3159 18b2 31C0     		xorl	%eax, %eax
 3160 18b4 E8000000 		call	__fprintf_chk
 3160      00
 3161              	.L328:
 3162 18b9 3B2D0000 		cmpl	numLines(%rip), %ebp
 3162      0000
 3163 18bf 0F8F9900 		jg	.L478
 3163      0000
 3164 18c5 418B8C24 		movl	dataFromCSV(%r12), %ecx
 3164      00000000 
 3165 18cd BA000000 		movl	$.LC12, %edx
 3165      00
 3166 18d2 BE010000 		movl	$1, %esi
 3166      00
 3167 18d7 4889DF   		movq	%rbx, %rdi
 3168 18da 31C0     		xorl	%eax, %eax
 3169 18dc 4531ED   		xorl	%r13d, %r13d
 3170 18df E8000000 		call	__fprintf_chk
 3170      00
 3171              	.L368:
 3172 18e4 BA000000 		movl	$.LC11, %edx
 3172      00
 3173 18e9 BE010000 		movl	$1, %esi
 3173      00
 3174 18ee 4889DF   		movq	%rbx, %rdi
 3175 18f1 31C0     		xorl	%eax, %eax
 3176 18f3 E8000000 		call	__fprintf_chk
 3176      00
 3177 18f8 438B8C2C 		movl	dataFromCSV+4(%r12,%r13), %ecx
 3177      00000000 
 3178 1900 31C0     		xorl	%eax, %eax
 3179 1902 BA000000 		movl	$.LC12, %edx
 3179      00
 3180 1907 BE010000 		movl	$1, %esi
 3180      00
 3181 190c 4889DF   		movq	%rbx, %rdi
 3182 190f 4983C504 		addq	$4, %r13
 3183 1913 E8000000 		call	__fprintf_chk
 3183      00
 3184 1918 4983FD0C 		cmpq	$12, %r13
 3185 191c 75C6     		jne	.L368
 3186 191e 3B2D0000 		cmpl	numLines(%rip), %ebp
 3186      0000
 3187 1924 7414     		je	.L367
 3188 1926 BA000000 		movl	$.LC73, %edx
 3188      00
 3189 192b BE010000 		movl	$1, %esi
 3189      00
 3190 1930 4889DF   		movq	%rbx, %rdi
 3191 1933 31C0     		xorl	%eax, %eax
 3192 1935 E8000000 		call	__fprintf_chk
 3192      00
 3193              	.L367:
 3194 193a 83C501   		addl	$1, %ebp
 3195 193d 4983C410 		addq	$16, %r12
 3196 1941 E973FFFF 		jmp	.L328
 3196      FF
 3197              	.L476:
 3198 1946 4401F0   		addl	%r14d, %eax
 3199 1949 E982FCFF 		jmp	.L313
 3199      FF
 3200              	.L475:
 3201 194e 4401F8   		addl	%r15d, %eax
 3202 1951 E97AFCFF 		jmp	.L313
 3202      FF
 3203              	.L474:
 3204 1956 4401E0   		addl	%r12d, %eax
 3205              		.p2align 4,,2
 3206 1959 E972FCFF 		jmp	.L313
 3206      FF
 3207              	.L478:
 3208 195e 4889DF   		movq	%rbx, %rdi
 3209 1961 E8000000 		call	fclose
 3209      00
 3210              		.p2align 4,,2
 3211 1966 E9E3F6FF 		jmp	.L359
 3211      FF
 3212              		.cfi_endproc
 3213              	.LFE90:
 3215              		.section	.rodata.str1.1
 3216              	.LC124:
 3217 02ef 30303030 		.string	"0000"
 3217      00
 3218              	.LC125:
 3219 02f4 30303031 		.string	"0001"
 3219      00
 3220              	.LC126:
 3221 02f9 30303130 		.string	"0010"
 3221      00
 3222              	.LC127:
 3223 02fe 30303131 		.string	"0011"
 3223      00
 3224              	.LC128:
 3225 0303 30313030 		.string	"0100"
 3225      00
 3226              	.LC129:
 3227 0308 30313031 		.string	"0101"
 3227      00
 3228              	.LC130:
 3229 030d 30313130 		.string	"0110"
 3229      00
 3230              	.LC131:
 3231 0312 30313131 		.string	"0111"
 3231      00
 3232              	.LC132:
 3233 0317 31303030 		.string	"1000"
 3233      00
 3234              	.LC133:
 3235 031c 31303031 		.string	"1001"
 3235      00
 3236              	.LC134:
 3237 0321 58585858 		.string	"XXXX"
 3237      00
 3238              	.LC135:
 3239 0326 31303130 		.string	"1010"
 3239      00
 3240              	.LC136:
 3241 032b 31303131 		.string	"1011"
 3241      00
 3242              	.LC137:
 3243 0330 31313030 		.string	"1100"
 3243      00
 3244              	.LC138:
 3245 0335 31313031 		.string	"1101"
 3245      00
 3246              	.LC139:
 3247 033a 31313130 		.string	"1110"
 3247      00
 3248              	.LC140:
 3249 033f 31313131 		.string	"1111"
 3249      00
 3250              		.section	.rodata
 3251              		.align 32
 3254              	nibbles:
 3255 0000 00000000 		.quad	.LC124
 3255      00000000 
 3256 0008 00000000 		.quad	.LC125
 3256      00000000 
 3257 0010 00000000 		.quad	.LC126
 3257      00000000 
 3258 0018 00000000 		.quad	.LC127
 3258      00000000 
 3259 0020 00000000 		.quad	.LC128
 3259      00000000 
 3260 0028 00000000 		.quad	.LC129
 3260      00000000 
 3261 0030 00000000 		.quad	.LC130
 3261      00000000 
 3262 0038 00000000 		.quad	.LC131
 3262      00000000 
 3263 0040 00000000 		.quad	.LC132
 3263      00000000 
 3264 0048 00000000 		.quad	.LC133
 3264      00000000 
 3265 0050 00000000 		.quad	.LC134
 3265      00000000 
 3266 0058 00000000 		.quad	.LC134
 3266      00000000 
 3267 0060 00000000 		.quad	.LC134
 3267      00000000 
 3268 0068 00000000 		.quad	.LC134
 3268      00000000 
 3269 0070 00000000 		.quad	.LC134
 3269      00000000 
 3270 0078 00000000 		.quad	.LC134
 3270      00000000 
 3271 0080 00000000 		.quad	.LC134
 3271      00000000 
 3272 0088 00000000 		.quad	.LC135
 3272      00000000 
 3273 0090 00000000 		.quad	.LC136
 3273      00000000 
 3274 0098 00000000 		.quad	.LC137
 3274      00000000 
 3275 00a0 00000000 		.quad	.LC138
 3275      00000000 
 3276 00a8 00000000 		.quad	.LC139
 3276      00000000 
 3277 00b0 00000000 		.quad	.LC140
 3277      00000000 
 3278              		.section	.rodata.str1.1
 3279              	.LC141:
 3280 0344 556E7061 		.string	"Unparseable hex number"
 3280      72736561 
 3280      626C6520 
 3280      68657820 
 3280      6E756D62 
 3281              	.LC142:
 3282 035b 4368616E 		.string	"Channel out of range"
 3282      6E656C20 
 3282      6F757420 
 3282      6F662072 
 3282      616E6765 
 3283              	.LC143:
 3284 0370 436F6E64 		.string	"Conduit out of range"
 3284      75697420 
 3284      6F757420 
 3284      6F662072 
 3284      616E6765 
 3285              	.LC144:
 3286 0385 496C6C65 		.string	"Illegal character"
 3286      67616C20 
 3286      63686172 
 3286      61637465 
 3286      7200
 3287              	.LC145:
 3288 0397 556E7465 		.string	"Unterminated string"
 3288      726D696E 
 3288      61746564 
 3288      20737472 
 3288      696E6700 
 3289              	.LC146:
 3290 03ab 4E6F206D 		.string	"No memory"
 3290      656D6F72 
 3290      7900
 3291              	.LC147:
 3292 03b5 456D7074 		.string	"Empty string"
 3292      79207374 
 3292      72696E67 
 3292      00
 3293              	.LC148:
 3294 03c2 4F646420 		.string	"Odd number of digits"
 3294      6E756D62 
 3294      6572206F 
 3294      66206469 
 3294      67697473 
 3295              	.LC149:
 3296 03d7 43616E6E 		.string	"Cannot load file"
 3296      6F74206C 
 3296      6F616420 
 3296      66696C65 
 3296      00
 3297              	.LC150:
 3298 03e8 43616E6E 		.string	"Cannot save file"
 3298      6F742073 
 3298      61766520 
 3298      66696C65 
 3298      00
 3299              	.LC151:
 3300 03f9 42616420 		.string	"Bad arguments"
 3300      61726775 
 3300      6D656E74 
 3300      7300
 3301              		.section	.rodata
 3302 00b8 00000000 		.align 32
 3302      00000000 
 3305              	errMessages:
 3306 00c0 00000000 		.quad	0
 3306      00000000 
 3307 00c8 00000000 		.quad	0
 3307      00000000 
 3308 00d0 00000000 		.quad	.LC141
 3308      00000000 
 3309 00d8 00000000 		.quad	.LC142
 3309      00000000 
 3310 00e0 00000000 		.quad	.LC143
 3310      00000000 
 3311 00e8 00000000 		.quad	.LC144
 3311      00000000 
 3312 00f0 00000000 		.quad	.LC145
 3312      00000000 
 3313 00f8 00000000 		.quad	.LC146
 3313      00000000 
 3314 0100 00000000 		.quad	.LC147
 3314      00000000 
 3315 0108 00000000 		.quad	.LC148
 3315      00000000 
 3316 0110 00000000 		.quad	.LC149
 3316      00000000 
 3317 0118 00000000 		.quad	.LC150
 3317      00000000 
 3318 0120 00000000 		.quad	.LC151
 3318      00000000 
 3319              		.local	enableBenchmarking
 3320              		.comm	enableBenchmarking,1,16
 3321              		.local	ptr
 3322              		.comm	ptr,8,16
 3323              		.globl	numLines
 3324              		.bss
 3325              		.align 16
 3328              	numLines:
 3329 0000 00000000 		.zero	4
 3330              		.comm	dataFromCSV,1600080,32
 3331              		.section	.rodata.cst8,"aM",@progbits,8
 3332              		.align 8
 3333              	.LC3:
 3334 0000 00000000 		.long	0
 3335 0004 80842E41 		.long	1093567616
 3336              		.align 8
 3337              	.LC4:
 3338 0008 00000000 		.long	0
 3339 000c 00003041 		.long	1093664768
 3340              		.section	.rodata.cst16,"aM",@progbits,16
 3341              		.align 16
 3342              	.LC116:
 3343 0000 8CC12729 		.long	690471308
 3344 0004 8FC4F875 		.long	1979237519
 3345 0008 F799FD43 		.long	1140693495
 3346 000c 57740FFF 		.long	-15764393
 3347              		.ident	"GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4"
 3348              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/cc3kzkXp.s:7      .text.unlikely:0000000000000000 doWrite
     /tmp/cc3kzkXp.s:140    .text.unlikely:0000000000000109 parseLine
     /tmp/cc3kzkXp.s:3322   .bss:0000000000000020 ptr
     /tmp/cc3kzkXp.s:3320   .bss:0000000000000010 enableBenchmarking
     /tmp/cc3kzkXp.s:3305   .rodata:00000000000000c0 errMessages
     /tmp/cc3kzkXp.s:968    .text:0000000000000000 decrypt
     /tmp/cc3kzkXp.s:1017   .text:0000000000000070 encrypt
     /tmp/cc3kzkXp.s:1067   .text:00000000000000e0 decrypt64
     /tmp/cc3kzkXp.s:1107   .text:0000000000000150 encrypt64
     /tmp/cc3kzkXp.s:1148   .text:00000000000001c0 myHash
     /tmp/cc3kzkXp.s:1214   .text:0000000000000270 format
     /tmp/cc3kzkXp.s:3328   .bss:0000000000000000 numLines
                            *COM*:0000000000186a50 dataFromCSV
     /tmp/cc3kzkXp.s:1252   .text:00000000000002d0 find
     /tmp/cc3kzkXp.s:1299   .text:0000000000000340 suffBal
     /tmp/cc3kzkXp.s:1638   .text.startup:0000000000000000 main
     /tmp/cc3kzkXp.s:3254   .rodata:0000000000000000 nibbles
     /tmp/cc3kzkXp.s:3333   .rodata.cst8:0000000000000000 .LC3
     /tmp/cc3kzkXp.s:3337   .rodata.cst8:0000000000000008 .LC4
     /tmp/cc3kzkXp.s:3342   .rodata.cst16:0000000000000000 .LC116

UNDEFINED SYMBOLS
fread
flWriteChannelAsync
errPrefix
flAwaitAsyncWrites
__stack_chk_fail
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
flReadChannelAsyncSubmit
flReadChannelAsyncAwait
fwrite
__printf_chk
fclose
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
__fprintf_chk
bufAppendConst
flReadChannel
strtok
sscanf
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
flClose
flFreeError
arg_parse
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flSleep
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
flFlashStandardFirmware
flIsNeroCapable
flIsCommCapable
jtagScanChain
flLoadStandardFirmware
flFlashCustomFirmware
flResetToggle
flMultiBitPortAccess
__sprintf_chk
flSaveFirmware
flProgram
flIsFPGARunning
readline
add_history
sigRegisterHandler
sigIsRaised
__getdelim
