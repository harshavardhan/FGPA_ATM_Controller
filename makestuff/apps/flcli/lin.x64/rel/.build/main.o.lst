   1              		.file	"main.c"
   2              		.section	.rodata.str1.1,"aMS",@progbits,1
   3              	.LC0:
   4 0000 646F5772 		.string	"doWrite()"
   4      69746528 
   4      2900
   5              		.section	.text.unlikely,"ax",@progbits
   7              	doWrite:
   8              	.LFB88:
   9              		.cfi_startproc
  10 0000 4157     		pushq	%r15
  11              		.cfi_def_cfa_offset 16
  12              		.cfi_offset 15, -16
  13 0002 4531FF   		xorl	%r15d, %r15d
  14 0005 4156     		pushq	%r14
  15              		.cfi_def_cfa_offset 24
  16              		.cfi_offset 14, -24
  17 0007 4155     		pushq	%r13
  18              		.cfi_def_cfa_offset 32
  19              		.cfi_offset 13, -32
  20 0009 4989FD   		movq	%rdi, %r13
  21 000c 4154     		pushq	%r12
  22              		.cfi_def_cfa_offset 40
  23              		.cfi_offset 12, -40
  24 000e 4D89CC   		movq	%r9, %r12
  25 0011 55       		pushq	%rbp
  26              		.cfi_def_cfa_offset 48
  27              		.cfi_offset 6, -48
  28 0012 31ED     		xorl	%ebp, %ebp
  29 0014 53       		pushq	%rbx
  30              		.cfi_def_cfa_offset 56
  31              		.cfi_offset 3, -56
  32 0015 4889D3   		movq	%rdx, %rbx
  33 0018 4881EC38 		subq	$65592, %rsp
  33      000100
  34              		.cfi_def_cfa_offset 65648
  35 001f 64488B04 		movq	%fs:40, %rax
  35      25280000 
  35      00
  36 0028 48898424 		movq	%rax, 65576(%rsp)
  36      28000100 
  37 0030 31C0     		xorl	%eax, %eax
  38 0032 400FB6C6 		movzbl	%sil, %eax
  39 0036 48894C24 		movq	%rcx, 16(%rsp)
  39      10
  40 003b 4C894424 		movq	%r8, 24(%rsp)
  40      18
  41 0040 8944240C 		movl	%eax, 12(%rsp)
  42              	.L7:
  43 0044 488D7C24 		leaq	32(%rsp), %rdi
  43      20
  44 0049 4889D9   		movq	%rbx, %rcx
  45 004c BAFBFF00 		movl	$65531, %edx
  45      00
  46 0051 BE010000 		movl	$1, %esi
  46      00
  47 0056 E8000000 		call	fread
  47      00
  48 005b 4885C0   		testq	%rax, %rax
  49 005e 4989C6   		movq	%rax, %r14
  50 0061 745A     		je	.L2
  51 0063 8B74240C 		movl	12(%rsp), %esi
  52 0067 488D4C24 		leaq	32(%rsp), %rcx
  52      20
  53 006c 4D89E0   		movq	%r12, %r8
  54 006f 4889C2   		movq	%rax, %rdx
  55 0072 4C89EF   		movq	%r13, %rdi
  56 0075 4801C5   		addq	%rax, %rbp
  57 0078 E8000000 		call	flWriteChannelAsync
  57      00
  58 007d 85C0     		testl	%eax, %eax
  59 007f 750E     		jne	.L3
  60 0081 488D4424 		leaq	32(%rsp), %rax
  60      20
  61 0086 4A8D1430 		leaq	(%rax,%r14), %rdx
  62 008a 4889C1   		movq	%rax, %rcx
  63 008d EB14     		jmp	.L4
  64              	.L3:
  65 008f BE000000 		movl	$.LC0, %esi
  65      00
  66 0094 4C89E7   		movq	%r12, %rdi
  67 0097 E8000000 		call	errPrefix
  67      00
  68 009c B8010000 		movl	$1, %eax
  68      00
  69 00a1 EB3C     		jmp	.L5
  70              	.L4:
  71 00a3 4839D1   		cmpq	%rdx, %rcx
  72 00a6 740C     		je	.L14
  73 00a8 48FFC1   		incq	%rcx
  74 00ab 0FB641FF 		movzbl	-1(%rcx), %eax
  75 00af 4101C7   		addl	%eax, %r15d
  76 00b2 EBEF     		jmp	.L4
  77              	.L14:
  78 00b4 4981FEFB 		cmpq	$65531, %r14
  78      FF0000
  79 00bb 7487     		je	.L7
  80              	.L2:
  81 00bd 4C89E6   		movq	%r12, %rsi
  82 00c0 4C89EF   		movq	%r13, %rdi
  83 00c3 E8000000 		call	flAwaitAsyncWrites
  83      00
  84 00c8 85C0     		testl	%eax, %eax
  85 00ca 75C3     		jne	.L3
  86 00cc 488B4424 		movq	24(%rsp), %rax
  86      18
  87 00d1 66448938 		movw	%r15w, (%rax)
  88 00d5 488B4424 		movq	16(%rsp), %rax
  88      10
  89 00da 488928   		movq	%rbp, (%rax)
  90 00dd 31C0     		xorl	%eax, %eax
  91              	.L5:
  92 00df 488B9C24 		movq	65576(%rsp), %rbx
  92      28000100 
  93 00e7 6448331C 		xorq	%fs:40, %rbx
  93      25280000 
  93      00
  94 00f0 7405     		je	.L8
  95 00f2 E8000000 		call	__stack_chk_fail
  95      00
  96              	.L8:
  97 00f7 4881C438 		addq	$65592, %rsp
  97      000100
  98              		.cfi_def_cfa_offset 56
  99 00fe 5B       		popq	%rbx
 100              		.cfi_def_cfa_offset 48
 101 00ff 5D       		popq	%rbp
 102              		.cfi_def_cfa_offset 40
 103 0100 415C     		popq	%r12
 104              		.cfi_def_cfa_offset 32
 105 0102 415D     		popq	%r13
 106              		.cfi_def_cfa_offset 24
 107 0104 415E     		popq	%r14
 108              		.cfi_def_cfa_offset 16
 109 0106 415F     		popq	%r15
 110              		.cfi_def_cfa_offset 8
 111 0108 C3       		ret
 112              		.cfi_endproc
 113              	.LFE88:
 115              		.section	.rodata.str1.1
 116              	.LC1:
 117 000a 776200   		.string	"wb"
 118              	.LC2:
 119 000d 646F5265 		.string	"doRead()"
 119      61642829 
 119      00
 120              		.section	.rodata.str1.8,"aMS",@progbits,1
 121              		.align 8
 122              	.LC5:
 123 0000 52656164 		.string	"Read %d bytes (checksum 0x%04X) from channel %d at %f MiB/s\n"
 123      20256420 
 123      62797465 
 123      73202863 
 123      6865636B 
 124              		.section	.rodata.str1.1
 125              	.LC6:
 126 0016 726200   		.string	"rb"
 127              		.section	.rodata.str1.8
 128 003d 000000   		.align 8
 129              	.LC7:
 130 0040 57726F74 		.string	"Wrote %zu bytes (checksum 0x%04X) to channel %lu at %f MiB/s\n"
 130      6520257A 
 130      75206279 
 130      74657320 
 130      28636865 
 131              		.section	.rodata.str1.1
 132              	.LC8:
 133 0019 25732061 		.string	"%s at column %d\n  %s\n  "
 133      7420636F 
 133      6C756D6E 
 133      2025640A 
 133      20202573 
 134              	.LC9:
 135 0031 2000     		.string	" "
 136              	.LC10:
 137 0033 5E0A00   		.string	"^\n"
 138              		.section	.text.unlikely
 140              	parseLine:
 141              	.LFB89:
 142              		.cfi_startproc
 143 0109 4157     		pushq	%r15
 144              		.cfi_def_cfa_offset 16
 145              		.cfi_offset 15, -16
 146 010b 31C0     		xorl	%eax, %eax
 147 010d B9080000 		movl	$8, %ecx
 147      00
 148 0112 4156     		pushq	%r14
 149              		.cfi_def_cfa_offset 24
 150              		.cfi_offset 14, -24
 151 0114 4155     		pushq	%r13
 152              		.cfi_def_cfa_offset 32
 153              		.cfi_offset 13, -32
 154 0116 4154     		pushq	%r12
 155              		.cfi_def_cfa_offset 40
 156              		.cfi_offset 12, -40
 157 0118 55       		pushq	%rbp
 158              		.cfi_def_cfa_offset 48
 159              		.cfi_offset 6, -48
 160 0119 4889FD   		movq	%rdi, %rbp
 161 011c 53       		pushq	%rbx
 162              		.cfi_def_cfa_offset 56
 163              		.cfi_offset 3, -56
 164 011d 4889D3   		movq	%rdx, %rbx
 165 0120 4881EC98 		subq	$152, %rsp
 165      000000
 166              		.cfi_def_cfa_offset 208
 167 0127 488D7C24 		leaq	112(%rsp), %rdi
 167      70
 168 012c 48897424 		movq	%rsi, 8(%rsp)
 168      08
 169 0131 BE000400 		movl	$1024, %esi
 169      00
 170 0136 F3AB     		rep stosl
 171 0138 488D7C24 		leaq	112(%rsp), %rdi
 171      70
 172 013d 4889D1   		movq	%rdx, %rcx
 173 0140 31D2     		xorl	%edx, %edx
 174 0142 E8000000 		call	bufInitialise
 174      00
 175 0147 85C0     		testl	%eax, %eax
 176 0149 0F852D09 		jne	.L96
 176      0000
 177 014f 488B4424 		movq	8(%rsp), %rax
 177      08
 178 0154 48890500 		movq	%rax, ptr(%rip)
 178      000000
 179              	.L17:
 180 015b 488B1500 		movq	ptr(%rip), %rdx
 180      000000
 181 0162 8A02     		movb	(%rdx), %al
 182 0164 3C3B     		cmpb	$59, %al
 183 0166 750C     		jne	.L167
 184 0168 48FFC2   		incq	%rdx
 185 016b 48891500 		movq	%rdx, ptr(%rip)
 185      000000
 186 0172 EBE7     		jmp	.L17
 187              	.L167:
 188 0174 3C72     		cmpb	$114, %al
 189 0176 7415     		je	.L19
 190 0178 3C77     		cmpb	$119, %al
 191 017a 0F84A603 		je	.L20
 191      0000
 192 0180 3C2B     		cmpb	$43, %al
 193 0182 0F850509 		jne	.L119
 193      0000
 194 0188 E9CF0700 		jmp	.L168
 194      00
 195              	.L19:
 196 018d 4C8D6201 		leaq	1(%rdx), %r12
 197 0191 4C892500 		movq	%r12, ptr(%rip)
 197      000000
 198 0198 E8000000 		call	__errno_location
 198      00
 199 019d 488D7424 		leaq	48(%rsp), %rsi
 199      30
 200 01a2 4989C5   		movq	%rax, %r13
 201 01a5 C7000000 		movl	$0, (%rax)
 201      0000
 202 01ab BA100000 		movl	$16, %edx
 202      00
 203 01b0 4C89E7   		movq	%r12, %rdi
 204 01b3 E8000000 		call	strtoul
 204      00
 205 01b8 41837D00 		cmpl	$0, 0(%r13)
 205      00
 206 01bd 48894424 		movq	%rax, 16(%rsp)
 206      10
 207 01c2 7411     		je	.L22
 208              	.L27:
 209 01c4 4531E4   		xorl	%r12d, %r12d
 210 01c7 4531FF   		xorl	%r15d, %r15d
 211 01ca 41BD0200 		movl	$2, %r13d
 211      0000
 212 01d0 E96D0500 		jmp	.L63
 212      00
 213              	.L22:
 214 01d5 837C2410 		cmpl	$127, 16(%rsp)
 214      7F
 215 01da 0F872A03 		ja	.L98
 215      0000
 216 01e0 488B4424 		movq	48(%rsp), %rax
 216      30
 217 01e5 8A08     		movb	(%rax), %cl
 218 01e7 48890500 		movq	%rax, ptr(%rip)
 218      000000
 219 01ee 80F93B   		cmpb	$59, %cl
 220 01f1 741A     		je	.L24
 221 01f3 84C9     		testb	%cl, %cl
 222 01f5 7416     		je	.L24
 223 01f7 80F920   		cmpb	$32, %cl
 224 01fa 7420     		je	.L25
 225              	.L29:
 226 01fc 4531E4   		xorl	%r12d, %r12d
 227 01ff 4531FF   		xorl	%r15d, %r15d
 228 0202 41BD0500 		movl	$5, %r13d
 228      0000
 229 0208 E9350500 		jmp	.L63
 229      00
 230              	.L24:
 231 020d 80F920   		cmpb	$32, %cl
 232 0210 41BC0100 		movl	$1, %r12d
 232      0000
 233 0216 0F852509 		jne	.L26
 233      0000
 234              	.L25:
 235 021c 488D7801 		leaq	1(%rax), %rdi
 236 0220 488D7424 		leaq	48(%rsp), %rsi
 236      30
 237 0225 41C74500 		movl	$0, 0(%r13)
 237      00000000 
 238 022d BA100000 		movl	$16, %edx
 238      00
 239 0232 48893D00 		movq	%rdi, ptr(%rip)
 239      000000
 240 0239 E8000000 		call	strtoul
 240      00
 241 023e 41837D00 		cmpl	$0, 0(%r13)
 241      00
 242 0243 48894424 		movq	%rax, 24(%rsp)
 242      18
 243 0248 4189C4   		movl	%eax, %r12d
 244 024b 0F8573FF 		jne	.L27
 244      FFFF
 245 0251 4C8B7424 		movq	48(%rsp), %r14
 245      30
 246 0256 418A06   		movb	(%r14), %al
 247 0259 4C893500 		movq	%r14, ptr(%rip)
 247      000000
 248 0260 3C3B     		cmpb	$59, %al
 249 0262 740A     		je	.L28
 250 0264 84C0     		testb	%al, %al
 251 0266 7406     		je	.L28
 252 0268 3C20     		cmpb	$32, %al
 253 026a 740A     		je	.L30
 254 026c EB8E     		jmp	.L29
 255              	.L28:
 256 026e 3C20     		cmpb	$32, %al
 257 0270 0F85CB08 		jne	.L26
 257      0000
 258              	.L30:
 259 0276 418A5601 		movb	1(%r14), %dl
 260 027a 498D4601 		leaq	1(%r14), %rax
 261 027e 48890500 		movq	%rax, ptr(%rip)
 261      000000
 262 0285 80FA27   		cmpb	$39, %dl
 263 0288 7409     		je	.L120
 264 028a 80FA22   		cmpb	$34, %dl
 265 028d 0F8569FF 		jne	.L29
 265      FFFF
 266              	.L120:
 267 0293 4983C602 		addq	$2, %r14
 268 0297 4C893500 		movq	%r14, ptr(%rip)
 268      000000
 269 029e 4D89F5   		movq	%r14, %r13
 270              	.L32:
 271 02a1 418A4500 		movb	0(%r13), %al
 272 02a5 38D0     		cmpb	%dl, %al
 273 02a7 740D     		je	.L33
 274 02a9 84C0     		testb	%al, %al
 275 02ab 0F846204 		je	.L107
 275      0000
 276 02b1 49FFC5   		incq	%r13
 277 02b4 EBEB     		jmp	.L32
 278              	.L33:
 279 02b6 84D2     		testb	%dl, %dl
 280 02b8 0F845504 		je	.L107
 280      0000
 281 02be 4D89EC   		movq	%r13, %r12
 282 02c1 4D29F4   		subq	%r14, %r12
 283 02c4 498D7C24 		leaq	1(%r12), %rdi
 283      01
 284 02c9 E8000000 		call	malloc
 284      00
 285 02ce 4885C0   		testq	%rax, %rax
 286 02d1 4989C7   		movq	%rax, %r15
 287 02d4 0F844704 		je	.L108
 287      0000
 288 02da 4D39F5   		cmpq	%r14, %r13
 289 02dd 0F844904 		je	.L109
 289      0000
 290 02e3 4C89E2   		movq	%r12, %rdx
 291 02e6 4C89F6   		movq	%r14, %rsi
 292 02e9 4889C7   		movq	%rax, %rdi
 293 02ec E8000000 		call	strncpy
 293      00
 294 02f1 49FFC5   		incq	%r13
 295 02f4 43C60427 		movb	$0, (%r15,%r12)
 295      00
 296 02f9 BE000000 		movl	$.LC1, %esi
 296      00
 297 02fe 4C89FF   		movq	%r15, %rdi
 298 0301 4C892D00 		movq	%r13, ptr(%rip)
 298      000000
 299 0308 E8000000 		call	fopen
 299      00
 300 030d 4885C0   		testq	%rax, %rax
 301 0310 4989C4   		movq	%rax, %r12
 302 0313 0F840202 		je	.L103
 302      0000
 303 0319 4C89FF   		movq	%r15, %rdi
 304 031c 41BD0000 		movl	$65536, %r13d
 304      0100
 305 0322 E8000000 		call	free
 305      00
 306 0327 488D7C24 		leaq	80(%rsp), %rdi
 306      50
 307 032c 31F6     		xorl	%esi, %esi
 308 032e E8000000 		call	gettimeofday
 308      00
 309 0333 488B4424 		movq	24(%rsp), %rax
 309      18
 310 0338 4989D8   		movq	%rbx, %r8
 311 033b 4889EF   		movq	%rbp, %rdi
 312 033e 3D000001 		cmpl	$65536, %eax
 312      00
 313 0343 440F46E8 		cmovbe	%eax, %r13d
 314 0347 0FB64424 		movzbl	16(%rsp), %eax
 314      10
 315 034c 31C9     		xorl	%ecx, %ecx
 316 034e 4489EA   		movl	%r13d, %edx
 317 0351 89C6     		movl	%eax, %esi
 318 0353 890424   		movl	%eax, (%rsp)
 319 0356 E8000000 		call	flReadChannelAsyncSubmit
 319      00
 320 035b 85C0     		testl	%eax, %eax
 321 035d 741B     		je	.L35
 322              	.L38:
 323 035f BE000000 		movl	$.LC2, %esi
 323      00
 324 0364 4889DF   		movq	%rbx, %rdi
 325 0367 4531FF   		xorl	%r15d, %r15d
 326 036a E8000000 		call	errPrefix
 326      00
 327 036f 41BD0100 		movl	$1, %r13d
 327      0000
 328 0375 E9060100 		jmp	.L36
 328      00
 329              	.L35:
 330 037a 8B442418 		movl	24(%rsp), %eax
 331 037e 4531FF   		xorl	%r15d, %r15d
 332 0381 4429E8   		subl	%r13d, %eax
 333 0384 4189C5   		movl	%eax, %r13d
 334              	.L37:
 335 0387 4585ED   		testl	%r13d, %r13d
 336 038a 0F849800 		je	.L169
 336      0000
 337 0390 4181FD00 		cmpl	$65536, %r13d
 337      000100
 338 0397 41BE0000 		movl	$65536, %r14d
 338      0100
 339 039d 8B3424   		movl	(%rsp), %esi
 340 03a0 450F46F5 		cmovbe	%r13d, %r14d
 341 03a4 4989D8   		movq	%rbx, %r8
 342 03a7 31C9     		xorl	%ecx, %ecx
 343 03a9 4489F2   		movl	%r14d, %edx
 344 03ac 4889EF   		movq	%rbp, %rdi
 345 03af E8000000 		call	flReadChannelAsyncSubmit
 345      00
 346 03b4 85C0     		testl	%eax, %eax
 347 03b6 75A7     		jne	.L38
 348 03b8 488D4C24 		leaq	32(%rsp), %rcx
 348      20
 349 03bd 488D7424 		leaq	64(%rsp), %rsi
 349      40
 350 03c2 4989D8   		movq	%rbx, %r8
 351 03c5 4889EF   		movq	%rbp, %rdi
 352 03c8 4529F5   		subl	%r14d, %r13d
 353 03cb 4889CA   		movq	%rcx, %rdx
 354 03ce E8000000 		call	flReadChannelAsyncAwait
 354      00
 355 03d3 85C0     		testl	%eax, %eax
 356 03d5 7588     		jne	.L38
 357 03d7 8B542420 		movl	32(%rsp), %edx
 358 03db 488B7C24 		movq	64(%rsp), %rdi
 358      40
 359 03e0 4C89E1   		movq	%r12, %rcx
 360 03e3 BE010000 		movl	$1, %esi
 360      00
 361 03e8 E8000000 		call	fwrite
 361      00
 362 03ed 3B442420 		cmpl	32(%rsp), %eax
 363 03f1 89C1     		movl	%eax, %ecx
 364 03f3 7418     		je	.L39
 365              	.L43:
 366 03f5 BE000000 		movl	$.LC2, %esi
 366      00
 367 03fa 4889DF   		movq	%rbx, %rdi
 368 03fd 4531FF   		xorl	%r15d, %r15d
 369 0400 E8000000 		call	errPrefix
 369      00
 370 0405 41BD0B00 		movl	$11, %r13d
 370      0000
 371 040b EB73     		jmp	.L36
 372              	.L39:
 373 040d 488B7424 		movq	64(%rsp), %rsi
 373      40
 374 0412 31C0     		xorl	%eax, %eax
 375              	.L40:
 376 0414 39C1     		cmpl	%eax, %ecx
 377 0416 0F846BFF 		je	.L37
 377      FFFF
 378 041c 0FB61406 		movzbl	(%rsi,%rax), %edx
 379 0420 48FFC0   		incq	%rax
 380 0423 4101D7   		addl	%edx, %r15d
 381 0426 EBEC     		jmp	.L40
 382              	.L169:
 383 0428 488D4C24 		leaq	32(%rsp), %rcx
 383      20
 384 042d 488D7424 		leaq	64(%rsp), %rsi
 384      40
 385 0432 4989D8   		movq	%rbx, %r8
 386 0435 4889EF   		movq	%rbp, %rdi
 387 0438 4889CA   		movq	%rcx, %rdx
 388 043b E8000000 		call	flReadChannelAsyncAwait
 388      00
 389 0440 85C0     		testl	%eax, %eax
 390 0442 0F8517FF 		jne	.L38
 390      FFFF
 391 0448 8B542420 		movl	32(%rsp), %edx
 392 044c 488B7C24 		movq	64(%rsp), %rdi
 392      40
 393 0451 BE010000 		movl	$1, %esi
 393      00
 394 0456 4C89E1   		movq	%r12, %rcx
 395 0459 E8000000 		call	fwrite
 395      00
 396 045e 3B442420 		cmpl	32(%rsp), %eax
 397 0462 89C6     		movl	%eax, %esi
 398 0464 758F     		jne	.L43
 399 0466 488B4C24 		movq	64(%rsp), %rcx
 399      40
 400 046b 31C0     		xorl	%eax, %eax
 401              	.L44:
 402 046d 39C6     		cmpl	%eax, %esi
 403 046f 740C     		je	.L170
 404 0471 0FB61401 		movzbl	(%rcx,%rax), %edx
 405 0475 48FFC0   		incq	%rax
 406 0478 4101D7   		addl	%edx, %r15d
 407 047b EBF0     		jmp	.L44
 408              	.L170:
 409 047d 4531ED   		xorl	%r13d, %r13d
 410              	.L36:
 411 0480 488D7C24 		leaq	96(%rsp), %rdi
 411      60
 412 0485 31F6     		xorl	%esi, %esi
 413 0487 E8000000 		call	gettimeofday
 413      00
 414 048c 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 414      000000
 415 0493 488B4C24 		movq	80(%rsp), %rcx
 415      50
 416 0498 488B4424 		movq	88(%rsp), %rax
 416      58
 417 049d 488B7424 		movq	96(%rsp), %rsi
 417      60
 418 04a2 488B5424 		movq	104(%rsp), %rdx
 418      68
 419 04a7 0F845402 		je	.L64
 419      0000
 420 04ad 4869F640 		imulq	$1000000, %rsi, %rsi
 420      420F00
 421 04b4 488B7C24 		movq	24(%rsp), %rdi
 421      18
 422 04b9 448B4424 		movl	16(%rsp), %r8d
 422      10
 423 04be 4869C940 		imulq	$1000000, %rcx, %rcx
 423      420F00
 424 04c5 4801F2   		addq	%rsi, %rdx
 425 04c8 BE000000 		movl	$.LC5, %esi
 425      00
 426 04cd 4801C8   		addq	%rcx, %rax
 427 04d0 410FB7CF 		movzwl	%r15w, %ecx
 428 04d4 4829C2   		subq	%rax, %rdx
 429 04d7 89F8     		movl	%edi, %eax
 430 04d9 F2480F2A 		cvtsi2sdq	%rdx, %xmm1
 430      CA
 431 04de 89FA     		movl	%edi, %edx
 432 04e0 BF010000 		movl	$1, %edi
 432      00
 433 04e5 F2480F2A 		cvtsi2sdq	%rax, %xmm0
 433      C0
 434 04ea B001     		movb	$1, %al
 435 04ec F20F5E0D 		divsd	.LC3(%rip), %xmm1
 435      00000000 
 436 04f4 F20F590D 		mulsd	.LC4(%rip), %xmm1
 436      00000000 
 437 04fc F20F5EC1 		divsd	%xmm1, %xmm0
 438 0500 E8000000 		call	__printf_chk
 438      00
 439 0505 E9F70100 		jmp	.L64
 439      00
 440              	.L98:
 441 050a 4531E4   		xorl	%r12d, %r12d
 442 050d 4531FF   		xorl	%r15d, %r15d
 443 0510 41BD0300 		movl	$3, %r13d
 443      0000
 444 0516 E9270200 		jmp	.L63
 444      00
 445              	.L103:
 446 051b 41BD0B00 		movl	$11, %r13d
 446      0000
 447 0521 E91C0200 		jmp	.L63
 447      00
 448              	.L20:
 449 0526 4C8D6A01 		leaq	1(%rdx), %r13
 450 052a 48C74424 		movq	$1, 48(%rsp)
 450      30010000 
 450      00
 451 0533 4C892D00 		movq	%r13, ptr(%rip)
 451      000000
 452 053a E8000000 		call	__errno_location
 452      00
 453 053f 488D7424 		leaq	64(%rsp), %rsi
 453      40
 454 0544 4989C4   		movq	%rax, %r12
 455 0547 C7000000 		movl	$0, (%rax)
 455      0000
 456 054d BA100000 		movl	$16, %edx
 456      00
 457 0552 4C89EF   		movq	%r13, %rdi
 458 0555 E8000000 		call	strtoul
 458      00
 459 055a 41833C24 		cmpl	$0, (%r12)
 459      00
 460 055f 4989C6   		movq	%rax, %r14
 461 0562 0F85A403 		jne	.L105
 461      0000
 462 0568 4883F87F 		cmpq	$127, %rax
 463 056c 0F87AE03 		ja	.L106
 463      0000
 464 0572 488B4424 		movq	64(%rsp), %rax
 464      40
 465 0577 803820   		cmpb	$32, (%rax)
 466 057a 48890500 		movq	%rax, ptr(%rip)
 466      000000
 467 0581 0F850605 		jne	.L119
 467      0000
 468 0587 8A5001   		movb	1(%rax), %dl
 469 058a 488D7801 		leaq	1(%rax), %rdi
 470 058e 48893D00 		movq	%rdi, ptr(%rip)
 470      000000
 471 0595 80FA27   		cmpb	$39, %dl
 472 0598 7409     		je	.L121
 473 059a 80FA22   		cmpb	$34, %dl
 474 059d 0F85A701 		jne	.L58
 474      0000
 475              	.L121:
 476 05a3 488D7002 		leaq	2(%rax), %rsi
 477 05a7 66C74424 		movw	$0, 32(%rsp)
 477      200000
 478 05ae 48893500 		movq	%rsi, ptr(%rip)
 478      000000
 479 05b5 4989F4   		movq	%rsi, %r12
 480              	.L60:
 481 05b8 418A0424 		movb	(%r12), %al
 482 05bc 38D0     		cmpb	%dl, %al
 483 05be 740D     		je	.L61
 484 05c0 84C0     		testb	%al, %al
 485 05c2 0F844B01 		je	.L107
 485      0000
 486 05c8 49FFC4   		incq	%r12
 487 05cb EBEB     		jmp	.L60
 488              	.L61:
 489 05cd 84D2     		testb	%dl, %dl
 490 05cf 0F843E01 		je	.L107
 490      0000
 491 05d5 4D89E5   		movq	%r12, %r13
 492 05d8 48893424 		movq	%rsi, (%rsp)
 493 05dc 4929F5   		subq	%rsi, %r13
 494 05df 498D7D01 		leaq	1(%r13), %rdi
 495 05e3 E8000000 		call	malloc
 495      00
 496 05e8 4885C0   		testq	%rax, %rax
 497 05eb 4989C7   		movq	%rax, %r15
 498 05ee 0F842D01 		je	.L108
 498      0000
 499 05f4 488B3424 		movq	(%rsp), %rsi
 500 05f8 4939F4   		cmpq	%rsi, %r12
 501 05fb 0F842B01 		je	.L109
 501      0000
 502 0601 4C89EA   		movq	%r13, %rdx
 503 0604 4889C7   		movq	%rax, %rdi
 504 0607 49FFC4   		incq	%r12
 505 060a E8000000 		call	strncpy
 505      00
 506 060f 43C6042F 		movb	$0, (%r15,%r13)
 506      00
 507 0614 BE000000 		movl	$.LC6, %esi
 507      00
 508 0619 4C89FF   		movq	%r15, %rdi
 509 061c 4C892500 		movq	%r12, ptr(%rip)
 509      000000
 510 0623 E8000000 		call	fopen
 510      00
 511 0628 4885C0   		testq	%rax, %rax
 512 062b 4989C4   		movq	%rax, %r12
 513 062e 0F840301 		je	.L110
 513      0000
 514 0634 4C89FF   		movq	%r15, %rdi
 515 0637 E8000000 		call	free
 515      00
 516 063c 488D7C24 		leaq	80(%rsp), %rdi
 516      50
 517 0641 31F6     		xorl	%esi, %esi
 518 0643 E8000000 		call	gettimeofday
 518      00
 519 0648 488D4C24 		leaq	48(%rsp), %rcx
 519      30
 520 064d 4C8D4424 		leaq	32(%rsp), %r8
 520      20
 521 0652 4C89E2   		movq	%r12, %rdx
 522 0655 4989D9   		movq	%rbx, %r9
 523 0658 4489F6   		movl	%r14d, %esi
 524 065b 4889EF   		movq	%rbp, %rdi
 525 065e E89DF9FF 		call	doWrite
 525      FF
 526 0663 488D7C24 		leaq	96(%rsp), %rdi
 526      60
 527 0668 31F6     		xorl	%esi, %esi
 528 066a 4189C5   		movl	%eax, %r13d
 529 066d E8000000 		call	gettimeofday
 529      00
 530 0672 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 530      000000
 531 0679 488B7424 		movq	80(%rsp), %rsi
 531      50
 532 067e 488B4424 		movq	88(%rsp), %rax
 532      58
 533 0683 488B7C24 		movq	96(%rsp), %rdi
 533      60
 534 0688 488B4C24 		movq	104(%rsp), %rcx
 534      68
 535 068d 488B5424 		movq	48(%rsp), %rdx
 535      30
 536 0692 746D     		je	.L64
 537 0694 4869FF40 		imulq	$1000000, %rdi, %rdi
 537      420F00
 538 069b 4869F640 		imulq	$1000000, %rsi, %rsi
 538      420F00
 539 06a2 4801F9   		addq	%rdi, %rcx
 540 06a5 4801F0   		addq	%rsi, %rax
 541 06a8 4829C1   		subq	%rax, %rcx
 542 06ab 4885D2   		testq	%rdx, %rdx
 543 06ae F2480F2A 		cvtsi2sdq	%rcx, %xmm1
 543      C9
 544 06b3 7807     		js	.L65
 545 06b5 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 545      C2
 546 06ba EB18     		jmp	.L66
 547              	.L65:
 548 06bc 4889D0   		movq	%rdx, %rax
 549 06bf 4889D1   		movq	%rdx, %rcx
 550 06c2 48D1E8   		shrq	%rax
 551 06c5 83E101   		andl	$1, %ecx
 552 06c8 4809C8   		orq	%rcx, %rax
 553 06cb F2480F2A 		cvtsi2sdq	%rax, %xmm0
 553      C0
 554 06d0 F20F58C0 		addsd	%xmm0, %xmm0
 555              	.L66:
 556 06d4 F20F5E0D 		divsd	.LC3(%rip), %xmm1
 556      00000000 
 557 06dc 0FB74C24 		movzwl	32(%rsp), %ecx
 557      20
 558 06e1 4D89F0   		movq	%r14, %r8
 559 06e4 BE000000 		movl	$.LC7, %esi
 559      00
 560 06e9 BF010000 		movl	$1, %edi
 560      00
 561 06ee B001     		movb	$1, %al
 562 06f0 F20F590D 		mulsd	.LC4(%rip), %xmm1
 562      00000000 
 563 06f8 F20F5EC1 		divsd	%xmm1, %xmm0
 564 06fc E8000000 		call	__printf_chk
 564      00
 565              	.L64:
 566 0701 4585ED   		testl	%r13d, %r13d
 567 0704 7539     		jne	.L111
 568 0706 4C89E7   		movq	%r12, %rdi
 569 0709 E8000000 		call	fclose
 569      00
 570 070e E9350300 		jmp	.L55
 570      00
 571              	.L107:
 572 0713 4531E4   		xorl	%r12d, %r12d
 573 0716 4531FF   		xorl	%r15d, %r15d
 574 0719 41BD0600 		movl	$6, %r13d
 574      0000
 575 071f EB21     		jmp	.L63
 576              	.L108:
 577 0721 4531E4   		xorl	%r12d, %r12d
 578 0724 41BD0700 		movl	$7, %r13d
 578      0000
 579 072a EB16     		jmp	.L63
 580              	.L109:
 581 072c 4531E4   		xorl	%r12d, %r12d
 582 072f 41BD0800 		movl	$8, %r13d
 582      0000
 583 0735 EB0B     		jmp	.L63
 584              	.L110:
 585 0737 41BD0A00 		movl	$10, %r13d
 585      0000
 586 073d EB03     		jmp	.L63
 587              	.L111:
 588 073f 4531FF   		xorl	%r15d, %r15d
 589              	.L63:
 590 0742 4531F6   		xorl	%r14d, %r14d
 591 0745 E9520300 		jmp	.L16
 591      00
 592              	.L58:
 593 074a 8D72D0   		leal	-48(%rdx), %esi
 594 074d B9010000 		movl	$1, %ecx
 594      00
 595 0752 4080FE09 		cmpb	$9, %sil
 596 0756 760E     		jbe	.L68
 597 0758 83E2DF   		andl	$-33, %edx
 598 075b 31C9     		xorl	%ecx, %ecx
 599 075d 83EA41   		subl	$65, %edx
 600 0760 80FA05   		cmpb	$5, %dl
 601 0763 0F96C1   		setbe	%cl
 602              	.L68:
 603 0766 85C9     		testl	%ecx, %ecx
 604 0768 0F841F03 		je	.L119
 604      0000
 605 076e 4883C002 		addq	$2, %rax
 606              	.L70:
 607 0772 8A08     		movb	(%rax), %cl
 608 0774 BA010000 		movl	$1, %edx
 608      00
 609 0779 8D71D0   		leal	-48(%rcx), %esi
 610 077c 4080FE09 		cmpb	$9, %sil
 611 0780 760E     		jbe	.L71
 612 0782 83E1DF   		andl	$-33, %ecx
 613 0785 31D2     		xorl	%edx, %edx
 614 0787 83E941   		subl	$65, %ecx
 615 078a 80F905   		cmpb	$5, %cl
 616 078d 0F96C2   		setbe	%dl
 617              	.L71:
 618 0790 85D2     		testl	%edx, %edx
 619 0792 7405     		je	.L171
 620 0794 48FFC0   		incq	%rax
 621 0797 EBD9     		jmp	.L70
 622              	.L171:
 623 0799 4829F8   		subq	%rdi, %rax
 624 079c A801     		testb	$1, %al
 625 079e 0F859001 		jne	.L114
 625      0000
 626 07a4 48D1E8   		shrq	%rax
 627 07a7 4889C7   		movq	%rax, %rdi
 628 07aa 4989C5   		movq	%rax, %r13
 629 07ad 48894424 		movq	%rax, 48(%rsp)
 629      30
 630 07b2 E8000000 		call	malloc
 630      00
 631 07b7 488B0D00 		movq	ptr(%rip), %rcx
 631      000000
 632 07be 4989C4   		movq	%rax, %r12
 633 07c1 31D2     		xorl	%edx, %edx
 634              	.L73:
 635 07c3 4C39EA   		cmpq	%r13, %rdx
 636 07c6 744E     		je	.L172
 637 07c8 8A0451   		movb	(%rcx,%rdx,2), %al
 638 07cb 8D70D0   		leal	-48(%rax), %esi
 639 07ce 4080FE09 		cmpb	$9, %sil
 640 07d2 761A     		jbe	.L74
 641 07d4 8D709F   		leal	-97(%rax), %esi
 642 07d7 4080FE05 		cmpb	$5, %sil
 643 07db 7705     		ja	.L75
 644 07dd 8D70A9   		leal	-87(%rax), %esi
 645 07e0 EB0C     		jmp	.L74
 646              	.L75:
 647 07e2 8D70BF   		leal	-65(%rax), %esi
 648 07e5 4080FE05 		cmpb	$5, %sil
 649 07e9 7726     		ja	.L76
 650 07eb 8D70C9   		leal	-55(%rax), %esi
 651              	.L74:
 652 07ee 408A7C51 		movb	1(%rcx,%rdx,2), %dil
 652      01
 653 07f3 8D47D0   		leal	-48(%rdi), %eax
 654 07f6 3C09     		cmpb	$9, %al
 655 07f8 760E     		jbe	.L78
 656 07fa 8D479F   		leal	-97(%rdi), %eax
 657 07fd 3C05     		cmpb	$5, %al
 658 07ff 0F87E003 		ja	.L77
 658      0000
 659 0805 8D47A9   		leal	-87(%rdi), %eax
 660              	.L78:
 661 0808 C1E604   		sall	$4, %esi
 662 080b 09C6     		orl	%eax, %esi
 663 080d 41883414 		movb	%sil, (%r12,%rdx)
 664              	.L76:
 665 0811 48FFC2   		incq	%rdx
 666 0814 EBAD     		jmp	.L73
 667              	.L172:
 668 0816 4801D2   		addq	%rdx, %rdx
 669 0819 488D7C24 		leaq	80(%rsp), %rdi
 669      50
 670 081e 31F6     		xorl	%esi, %esi
 671 0820 4801D1   		addq	%rdx, %rcx
 672 0823 48890D00 		movq	%rcx, ptr(%rip)
 672      000000
 673 082a E8000000 		call	gettimeofday
 673      00
 674 082f 488B5424 		movq	48(%rsp), %rdx
 674      30
 675 0834 4989D8   		movq	%rbx, %r8
 676 0837 4C89E1   		movq	%r12, %rcx
 677 083a 4489F6   		movl	%r14d, %esi
 678 083d 4889EF   		movq	%rbp, %rdi
 679 0840 E8000000 		call	flWriteChannel
 679      00
 680 0845 488D7C24 		leaq	96(%rsp), %rdi
 680      60
 681 084a 31F6     		xorl	%esi, %esi
 682 084c 4189C5   		movl	%eax, %r13d
 683 084f E8000000 		call	gettimeofday
 683      00
 684 0854 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 684      000000
 685 085b 4C8B4C24 		movq	80(%rsp), %r9
 685      50
 686 0860 488B7C24 		movq	88(%rsp), %rdi
 686      58
 687 0865 4C8B5424 		movq	96(%rsp), %r10
 687      60
 688 086a 4C8B4424 		movq	104(%rsp), %r8
 688      68
 689 086f 488B5424 		movq	48(%rsp), %rdx
 689      30
 690 0874 0F848000 		je	.L80
 690      0000
 691 087a 31C9     		xorl	%ecx, %ecx
 692 087c 31C0     		xorl	%eax, %eax
 693              	.L81:
 694 087e 4839D1   		cmpq	%rdx, %rcx
 695 0881 740C     		je	.L173
 696 0883 410FB634 		movzbl	(%r12,%rcx), %esi
 696      0C
 697 0888 48FFC1   		incq	%rcx
 698 088b 01F0     		addl	%esi, %eax
 699 088d EBEF     		jmp	.L81
 700              	.L173:
 701 088f 4969CA40 		imulq	$1000000, %r10, %rcx
 701      420F00
 702 0896 4D69C940 		imulq	$1000000, %r9, %r9
 702      420F00
 703 089d 4C01C1   		addq	%r8, %rcx
 704 08a0 4C01CF   		addq	%r9, %rdi
 705 08a3 4829F9   		subq	%rdi, %rcx
 706 08a6 4885D2   		testq	%rdx, %rdx
 707 08a9 F2480F2A 		cvtsi2sdq	%rcx, %xmm1
 707      C9
 708 08ae 7807     		js	.L83
 709 08b0 F2480F2A 		cvtsi2sdq	%rdx, %xmm0
 709      C2
 710 08b5 EB18     		jmp	.L84
 711              	.L83:
 712 08b7 4889D1   		movq	%rdx, %rcx
 713 08ba 4889D6   		movq	%rdx, %rsi
 714 08bd 48D1E9   		shrq	%rcx
 715 08c0 83E601   		andl	$1, %esi
 716 08c3 4809F1   		orq	%rsi, %rcx
 717 08c6 F2480F2A 		cvtsi2sdq	%rcx, %xmm0
 717      C1
 718 08cb F20F58C0 		addsd	%xmm0, %xmm0
 719              	.L84:
 720 08cf F20F5E0D 		divsd	.LC3(%rip), %xmm1
 720      00000000 
 721 08d7 0FB7C8   		movzwl	%ax, %ecx
 722 08da 4D89F0   		movq	%r14, %r8
 723 08dd BE000000 		movl	$.LC7, %esi
 723      00
 724 08e2 BF010000 		movl	$1, %edi
 724      00
 725 08e7 B001     		movb	$1, %al
 726 08e9 F20F590D 		mulsd	.LC4(%rip), %xmm1
 726      00000000 
 727 08f1 F20F5EC1 		divsd	%xmm1, %xmm0
 728 08f5 E8000000 		call	__printf_chk
 728      00
 729              	.L80:
 730 08fa 4585ED   		testl	%r13d, %r13d
 731 08fd 7549     		jne	.L115
 732 08ff 4C89E7   		movq	%r12, %rdi
 733 0902 E8000000 		call	free
 733      00
 734 0907 E93C0100 		jmp	.L55
 734      00
 735              	.L105:
 736 090c 4531E4   		xorl	%r12d, %r12d
 737 090f 4531FF   		xorl	%r15d, %r15d
 738 0912 4531F6   		xorl	%r14d, %r14d
 739 0915 41BD0200 		movl	$2, %r13d
 739      0000
 740 091b E97C0100 		jmp	.L16
 740      00
 741              	.L106:
 742 0920 4531E4   		xorl	%r12d, %r12d
 743 0923 4531FF   		xorl	%r15d, %r15d
 744 0926 4531F6   		xorl	%r14d, %r14d
 745 0929 41BD0300 		movl	$3, %r13d
 745      0000
 746 092f E9680100 		jmp	.L16
 746      00
 747              	.L114:
 748 0934 4531E4   		xorl	%r12d, %r12d
 749 0937 4531FF   		xorl	%r15d, %r15d
 750 093a 4531F6   		xorl	%r14d, %r14d
 751 093d 41BD0900 		movl	$9, %r13d
 751      0000
 752 0943 E9540100 		jmp	.L16
 752      00
 753              	.L115:
 754 0948 4D89E6   		movq	%r12, %r14
 755 094b 4531FF   		xorl	%r15d, %r15d
 756 094e 4531E4   		xorl	%r12d, %r12d
 757 0951 41BD0100 		movl	$1, %r13d
 757      0000
 758 0957 E9400100 		jmp	.L16
 758      00
 759              	.L168:
 760 095c 4C8D6A01 		leaq	1(%rdx), %r13
 761 0960 4C892D00 		movq	%r13, ptr(%rip)
 761      000000
 762 0967 E8000000 		call	__errno_location
 762      00
 763 096c 488D7424 		leaq	64(%rsp), %rsi
 763      40
 764 0971 4989C4   		movq	%rax, %r12
 765 0974 C7000000 		movl	$0, (%rax)
 765      0000
 766 097a BA100000 		movl	$16, %edx
 766      00
 767 097f 4C89EF   		movq	%r13, %rdi
 768 0982 E8000000 		call	strtoul
 768      00
 769 0987 41833C24 		cmpl	$0, (%r12)
 769      00
 770 098c 753C     		jne	.L116
 771 098e 3DFF0000 		cmpl	$255, %eax
 771      00
 772 0993 773D     		ja	.L117
 773 0995 488B5424 		movq	64(%rsp), %rdx
 773      40
 774 099a 48891500 		movq	%rdx, ptr(%rip)
 774      000000
 775 09a1 8A12     		movb	(%rdx), %dl
 776 09a3 80FA3B   		cmpb	$59, %dl
 777 09a6 7404     		je	.L122
 778 09a8 84D2     		testb	%dl, %dl
 779 09aa 752E     		jne	.L118
 780              	.L122:
 781 09ac 0FB6F0   		movzbl	%al, %esi
 782 09af 4889DA   		movq	%rbx, %rdx
 783 09b2 4889EF   		movq	%rbp, %rdi
 784 09b5 E8000000 		call	flSelectConduit
 784      00
 785 09ba 85C0     		testl	%eax, %eax
 786 09bc 0F848600 		je	.L55
 786      0000
 787 09c2 41BD0100 		movl	$1, %r13d
 787      0000
 788 09c8 EB16     		jmp	.L85
 789              	.L116:
 790 09ca 41BD0200 		movl	$2, %r13d
 790      0000
 791 09d0 EB0E     		jmp	.L85
 792              	.L117:
 793 09d2 41BD0400 		movl	$4, %r13d
 793      0000
 794 09d8 EB06     		jmp	.L85
 795              	.L118:
 796 09da 41BD0500 		movl	$5, %r13d
 796      0000
 797              	.L85:
 798 09e0 4531E4   		xorl	%r12d, %r12d
 799 09e3 4531FF   		xorl	%r15d, %r15d
 800 09e6 4531F6   		xorl	%r14d, %r14d
 801 09e9 E9AE0000 		jmp	.L16
 801      00
 802              	.L175:
 803 09ee 4969C840 		imulq	$1000000, %r8, %rcx
 803      420F00
 804 09f5 F2490F2A 		cvtsi2sdq	%r15, %xmm0
 804      C7
 805 09fa 4969D140 		imulq	$1000000, %r9, %rdx
 805      420F00
 806 0a01 448B4424 		movl	16(%rsp), %r8d
 806      10
 807 0a06 4801F1   		addq	%rsi, %rcx
 808 0a09 BE000000 		movl	$.LC5, %esi
 808      00
 809 0a0e 4801FA   		addq	%rdi, %rdx
 810 0a11 BF010000 		movl	$1, %edi
 810      00
 811 0a16 4829CA   		subq	%rcx, %rdx
 812 0a19 0FB7C8   		movzwl	%ax, %ecx
 813 0a1c B001     		movb	$1, %al
 814 0a1e F2480F2A 		cvtsi2sdq	%rdx, %xmm1
 814      CA
 815 0a23 4489E2   		movl	%r12d, %edx
 816 0a26 F20F5E0D 		divsd	.LC3(%rip), %xmm1
 816      00000000 
 817 0a2e F20F590D 		mulsd	.LC4(%rip), %xmm1
 817      00000000 
 818 0a36 F20F5EC1 		divsd	%xmm1, %xmm0
 819 0a3a E8000000 		call	__printf_chk
 819      00
 820              	.L50:
 821 0a3f 4585ED   		testl	%r13d, %r13d
 822 0a42 0F858C01 		jne	.L93
 822      0000
 823              	.L55:
 824 0a48 488B0500 		movq	ptr(%rip), %rax
 824      000000
 825 0a4f 8A00     		movb	(%rax), %al
 826 0a51 3C3B     		cmpb	$59, %al
 827 0a53 0F8402F7 		je	.L17
 827      FFFF
 828 0a59 84C0     		testb	%al, %al
 829 0a5b 7530     		jne	.L119
 830 0a5d 488B5424 		movq	120(%rsp), %rdx
 830      78
 831 0a62 488B7424 		movq	112(%rsp), %rsi
 831      70
 832 0a67 31FF     		xorl	%edi, %edi
 833 0a69 4531E4   		xorl	%r12d, %r12d
 834 0a6c 4531FF   		xorl	%r15d, %r15d
 835 0a6f 4531F6   		xorl	%r14d, %r14d
 836 0a72 4531ED   		xorl	%r13d, %r13d
 837 0a75 E8000000 		call	dump
 837      00
 838 0a7a EB20     		jmp	.L16
 839              	.L96:
 840 0a7c 4531E4   		xorl	%r12d, %r12d
 841 0a7f 4531FF   		xorl	%r15d, %r15d
 842 0a82 4531F6   		xorl	%r14d, %r14d
 843 0a85 41BD0100 		movl	$1, %r13d
 843      0000
 844 0a8b EB0F     		jmp	.L16
 845              	.L119:
 846 0a8d 4531E4   		xorl	%r12d, %r12d
 847 0a90 4531FF   		xorl	%r15d, %r15d
 848 0a93 4531F6   		xorl	%r14d, %r14d
 849 0a96 41BD0500 		movl	$5, %r13d
 849      0000
 850              	.L16:
 851 0a9c 488D7C24 		leaq	112(%rsp), %rdi
 851      70
 852 0aa1 E8000000 		call	bufDestroy
 852      00
 853 0aa6 4D85E4   		testq	%r12, %r12
 854 0aa9 7408     		je	.L89
 855 0aab 4C89E7   		movq	%r12, %rdi
 856 0aae E8000000 		call	fclose
 856      00
 857              	.L89:
 858 0ab3 4C89FF   		movq	%r15, %rdi
 859 0ab6 E8000000 		call	free
 859      00
 860 0abb 4C89F7   		movq	%r14, %rdi
 861 0abe E8000000 		call	free
 861      00
 862 0ac3 4183FD01 		cmpl	$1, %r13d
 863 0ac7 0F862B01 		jbe	.L123
 863      0000
 864 0acd 4C8B0500 		movq	ptr(%rip), %r8
 864      000000
 865 0ad4 4C8B4C24 		movq	8(%rsp), %r9
 865      08
 866 0ad9 4489E8   		movl	%r13d, %eax
 867 0adc 488B0CC5 		movq	errMessages(,%rax,8), %rcx
 867      00000000 
 868 0ae4 488B3D00 		movq	stderr(%rip), %rdi
 868      000000
 869 0aeb BA000000 		movl	$.LC8, %edx
 869      00
 870 0af0 BE010000 		movl	$1, %esi
 870      00
 871 0af5 31C0     		xorl	%eax, %eax
 872 0af7 31DB     		xorl	%ebx, %ebx
 873 0af9 4D29C8   		subq	%r9, %r8
 874 0afc 4489C5   		movl	%r8d, %ebp
 875 0aff E8000000 		call	__fprintf_chk
 875      00
 876              	.L91:
 877 0b04 39EB     		cmpl	%ebp, %ebx
 878 0b06 7D1C     		jge	.L174
 879 0b08 488B3D00 		movq	stderr(%rip), %rdi
 879      000000
 880 0b0f BA000000 		movl	$.LC9, %edx
 880      00
 881 0b14 BE010000 		movl	$1, %esi
 881      00
 882 0b19 31C0     		xorl	%eax, %eax
 883 0b1b FFC3     		incl	%ebx
 884 0b1d E8000000 		call	__fprintf_chk
 884      00
 885 0b22 EBE0     		jmp	.L91
 886              	.L174:
 887 0b24 488B3D00 		movq	stderr(%rip), %rdi
 887      000000
 888 0b2b BA000000 		movl	$.LC10, %edx
 888      00
 889 0b30 BE010000 		movl	$1, %esi
 889      00
 890 0b35 31C0     		xorl	%eax, %eax
 891 0b37 E8000000 		call	__fprintf_chk
 891      00
 892 0b3c E9B70000 		jmp	.L123
 892      00
 893              	.L26:
 894 0b41 4589E7   		movl	%r12d, %r15d
 895 0b44 488D7C24 		leaq	112(%rsp), %rdi
 895      70
 896 0b49 31F6     		xorl	%esi, %esi
 897 0b4b 4889D9   		movq	%rbx, %rcx
 898 0b4e 4C89FA   		movq	%r15, %rdx
 899 0b51 4C8B7424 		movq	120(%rsp), %r14
 899      78
 900 0b56 E8000000 		call	bufAppendConst
 900      00
 901 0b5b 85C0     		testl	%eax, %eax
 902 0b5d 7575     		jne	.L93
 903 0b5f 488D7C24 		leaq	80(%rsp), %rdi
 903      50
 904 0b64 31F6     		xorl	%esi, %esi
 905 0b66 E8000000 		call	gettimeofday
 905      00
 906 0b6b 0FB67424 		movzbl	16(%rsp), %esi
 906      10
 907 0b70 4C89F1   		movq	%r14, %rcx
 908 0b73 48034C24 		addq	112(%rsp), %rcx
 908      70
 909 0b78 4989D8   		movq	%rbx, %r8
 910 0b7b 4C89FA   		movq	%r15, %rdx
 911 0b7e 4889EF   		movq	%rbp, %rdi
 912 0b81 E8000000 		call	flReadChannel
 912      00
 913 0b86 488D7C24 		leaq	96(%rsp), %rdi
 913      60
 914 0b8b 31F6     		xorl	%esi, %esi
 915 0b8d 4189C5   		movl	%eax, %r13d
 916 0b90 E8000000 		call	gettimeofday
 916      00
 917 0b95 803D0000 		cmpb	$0, enableBenchmarking(%rip)
 917      000000
 918 0b9c 4C8B4424 		movq	80(%rsp), %r8
 918      50
 919 0ba1 488B7424 		movq	88(%rsp), %rsi
 919      58
 920 0ba6 4C8B4C24 		movq	96(%rsp), %r9
 920      60
 921 0bab 488B7C24 		movq	104(%rsp), %rdi
 921      68
 922 0bb0 0F8489FE 		je	.L50
 922      FFFF
 923 0bb6 4C037424 		addq	112(%rsp), %r14
 923      70
 924 0bbb 31C9     		xorl	%ecx, %ecx
 925 0bbd 31C0     		xorl	%eax, %eax
 926              	.L51:
 927 0bbf 4939CF   		cmpq	%rcx, %r15
 928 0bc2 0F8426FE 		je	.L175
 928      FFFF
 929 0bc8 410FB614 		movzbl	(%r14,%rcx), %edx
 929      0E
 930 0bcd 48FFC1   		incq	%rcx
 931 0bd0 01D0     		addl	%edx, %eax
 932 0bd2 EBEB     		jmp	.L51
 933              	.L93:
 934 0bd4 4531E4   		xorl	%r12d, %r12d
 935 0bd7 4531FF   		xorl	%r15d, %r15d
 936 0bda 41BD0100 		movl	$1, %r13d
 936      0000
 937 0be0 E95DFBFF 		jmp	.L63
 937      FF
 938              	.L77:
 939 0be5 8D47BF   		leal	-65(%rdi), %eax
 940 0be8 3C05     		cmpb	$5, %al
 941 0bea 0F8721FC 		ja	.L76
 941      FFFF
 942 0bf0 8D47C9   		leal	-55(%rdi), %eax
 943 0bf3 E910FCFF 		jmp	.L78
 943      FF
 944              	.L123:
 945 0bf8 4881C498 		addq	$152, %rsp
 945      000000
 946              		.cfi_def_cfa_offset 56
 947 0bff 4489E8   		movl	%r13d, %eax
 948 0c02 5B       		popq	%rbx
 949              		.cfi_def_cfa_offset 48
 950 0c03 5D       		popq	%rbp
 951              		.cfi_def_cfa_offset 40
 952 0c04 415C     		popq	%r12
 953              		.cfi_def_cfa_offset 32
 954 0c06 415D     		popq	%r13
 955              		.cfi_def_cfa_offset 24
 956 0c08 415E     		popq	%r14
 957              		.cfi_def_cfa_offset 16
 958 0c0a 415F     		popq	%r15
 959              		.cfi_def_cfa_offset 8
 960 0c0c C3       		ret
 961              		.cfi_endproc
 962              	.LFE89:
 964              		.text
 965              		.p2align 4,,15
 966              		.globl	decrypt
 968              	decrypt:
 969              	.LFB75:
 970              		.cfi_startproc
 971 0000 53       		pushq	%rbx
 972              		.cfi_def_cfa_offset 16
 973              		.cfi_offset 3, -16
 974 0001 8B0F     		movl	(%rdi), %ecx
 975 0003 8B5704   		movl	4(%rdi), %edx
 976 0006 8B1E     		movl	(%rsi), %ebx
 977 0008 448B5E04 		movl	4(%rsi), %r11d
 978 000c 448B5608 		movl	8(%rsi), %r10d
 979 0010 448B4E0C 		movl	12(%rsi), %r9d
 980 0014 BE2037EF 		movl	$-957401312, %esi
 980      C6
 981 0019 0F1F8000 		.p2align 4,,10
 981      000000
 982              		.p2align 3
 983              	.L178:
 984 0020 89C8     		movl	%ecx, %eax
 985 0022 4189C8   		movl	%ecx, %r8d
 986 0025 C1E004   		sall	$4, %eax
 987 0028 41C1E805 		shrl	$5, %r8d
 988 002c 4501C8   		addl	%r9d, %r8d
 989 002f 4401D0   		addl	%r10d, %eax
 990 0032 4431C0   		xorl	%r8d, %eax
 991 0035 448D040E 		leal	(%rsi,%rcx), %r8d
 992 0039 4431C0   		xorl	%r8d, %eax
 993 003c 29C2     		subl	%eax, %edx
 994 003e 89D0     		movl	%edx, %eax
 995 0040 4189D0   		movl	%edx, %r8d
 996 0043 C1E004   		sall	$4, %eax
 997 0046 41C1E805 		shrl	$5, %r8d
 998 004a 4501D8   		addl	%r11d, %r8d
 999 004d 01D8     		addl	%ebx, %eax
 1000 004f 4431C0   		xorl	%r8d, %eax
 1001 0052 448D0432 		leal	(%rdx,%rsi), %r8d
 1002 0056 4431C0   		xorl	%r8d, %eax
 1003 0059 29C1     		subl	%eax, %ecx
 1004 005b 81C64786 		addl	$1640531527, %esi
 1004      C861
 1005 0061 75BD     		jne	.L178
 1006 0063 895704   		movl	%edx, 4(%rdi)
 1007 0066 890F     		movl	%ecx, (%rdi)
 1008 0068 5B       		popq	%rbx
 1009              		.cfi_def_cfa_offset 8
 1010 0069 C3       		ret
 1011              		.cfi_endproc
 1012              	.LFE75:
 1014 006a 660F1F44 		.p2align 4,,15
 1014      0000
 1015              		.globl	encrypt
 1017              	encrypt:
 1018              	.LFB76:
 1019              		.cfi_startproc
 1020 0070 53       		pushq	%rbx
 1021              		.cfi_def_cfa_offset 16
 1022              		.cfi_offset 3, -16
 1023 0071 8B0F     		movl	(%rdi), %ecx
 1024 0073 8B5704   		movl	4(%rdi), %edx
 1025 0076 8B1E     		movl	(%rsi), %ebx
 1026 0078 448B5E04 		movl	4(%rsi), %r11d
 1027 007c 448B5608 		movl	8(%rsi), %r10d
 1028 0080 448B4E0C 		movl	12(%rsi), %r9d
 1029 0084 31F6     		xorl	%esi, %esi
 1030 0086 662E0F1F 		.p2align 4,,10
 1030      84000000 
 1030      0000
 1031              		.p2align 3
 1032              	.L182:
 1033 0090 89D0     		movl	%edx, %eax
 1034 0092 4189D0   		movl	%edx, %r8d
 1035 0095 81EE4786 		subl	$1640531527, %esi
 1035      C861
 1036 009b C1E004   		sall	$4, %eax
 1037 009e 41C1E805 		shrl	$5, %r8d
 1038 00a2 4501D8   		addl	%r11d, %r8d
 1039 00a5 01D8     		addl	%ebx, %eax
 1040 00a7 4431C0   		xorl	%r8d, %eax
 1041 00aa 448D0432 		leal	(%rdx,%rsi), %r8d
 1042 00ae 4431C0   		xorl	%r8d, %eax
 1043 00b1 01C1     		addl	%eax, %ecx
 1044 00b3 89C8     		movl	%ecx, %eax
 1045 00b5 4189C8   		movl	%ecx, %r8d
 1046 00b8 C1E004   		sall	$4, %eax
 1047 00bb 41C1E805 		shrl	$5, %r8d
 1048 00bf 4501C8   		addl	%r9d, %r8d
 1049 00c2 4401D0   		addl	%r10d, %eax
 1050 00c5 4431C0   		xorl	%r8d, %eax
 1051 00c8 448D0431 		leal	(%rcx,%rsi), %r8d
 1052 00cc 4431C0   		xorl	%r8d, %eax
 1053 00cf 01C2     		addl	%eax, %edx
 1054 00d1 81FE2037 		cmpl	$-957401312, %esi
 1054      EFC6
 1055 00d7 75B7     		jne	.L182
 1056 00d9 895704   		movl	%edx, 4(%rdi)
 1057 00dc 890F     		movl	%ecx, (%rdi)
 1058 00de 5B       		popq	%rbx
 1059              		.cfi_def_cfa_offset 8
 1060 00df C3       		ret
 1061              		.cfi_endproc
 1062              	.LFE76:
 1064              		.p2align 4,,15
 1065              		.globl	decrypt64
 1067              	decrypt64:
 1068              	.LFB77:
 1069              		.cfi_startproc
 1070 00e0 8B0F     		movl	(%rdi), %ecx
 1071 00e2 8B5704   		movl	4(%rdi), %edx
 1072 00e5 BE2037EF 		movl	$-957401312, %esi
 1072      C6
 1073 00ea 660F1F44 		.p2align 4,,10
 1073      0000
 1074              		.p2align 3
 1075              	.L186:
 1076 00f0 89C8     		movl	%ecx, %eax
 1077 00f2 4189C8   		movl	%ecx, %r8d
 1078 00f5 C1E004   		sall	$4, %eax
 1079 00f8 41C1E805 		shrl	$5, %r8d
 1080 00fc 4181E8A9 		subl	$15764393, %r8d
 1080      8BF000
 1081 0103 05F799FD 		addl	$1140693495, %eax
 1081      43
 1082 0108 4431C0   		xorl	%r8d, %eax
 1083 010b 448D040E 		leal	(%rsi,%rcx), %r8d
 1084 010f 4431C0   		xorl	%r8d, %eax
 1085 0112 29C2     		subl	%eax, %edx
 1086 0114 89D0     		movl	%edx, %eax
 1087 0116 4189D0   		movl	%edx, %r8d
 1088 0119 C1E004   		sall	$4, %eax
 1089 011c 41C1E805 		shrl	$5, %r8d
 1090 0120 4181C08F 		addl	$1979237519, %r8d
 1090      C4F875
 1091 0127 058CC127 		addl	$690471308, %eax
 1091      29
 1092 012c 4431C0   		xorl	%r8d, %eax
 1093 012f 448D0432 		leal	(%rdx,%rsi), %r8d
 1094 0133 4431C0   		xorl	%r8d, %eax
 1095 0136 29C1     		subl	%eax, %ecx
 1096 0138 81C64786 		addl	$1640531527, %esi
 1096      C861
 1097 013e 75B0     		jne	.L186
 1098 0140 890F     		movl	%ecx, (%rdi)
 1099 0142 895704   		movl	%edx, 4(%rdi)
 1100 0145 C3       		ret
 1101              		.cfi_endproc
 1102              	.LFE77:
 1104 0146 662E0F1F 		.p2align 4,,15
 1104      84000000 
 1104      0000
 1105              		.globl	encrypt64
 1107              	encrypt64:
 1108              	.LFB78:
 1109              		.cfi_startproc
 1110 0150 8B0F     		movl	(%rdi), %ecx
 1111 0152 8B5704   		movl	4(%rdi), %edx
 1112 0155 31F6     		xorl	%esi, %esi
 1113 0157 660F1F84 		.p2align 4,,10
 1113      00000000 
 1113      00
 1114              		.p2align 3
 1115              	.L189:
 1116 0160 89D0     		movl	%edx, %eax
 1117 0162 4189D0   		movl	%edx, %r8d
 1118 0165 81EE4786 		subl	$1640531527, %esi
 1118      C861
 1119 016b C1E004   		sall	$4, %eax
 1120 016e 41C1E805 		shrl	$5, %r8d
 1121 0172 4181C08F 		addl	$1979237519, %r8d
 1121      C4F875
 1122 0179 058CC127 		addl	$690471308, %eax
 1122      29
 1123 017e 4431C0   		xorl	%r8d, %eax
 1124 0181 448D0432 		leal	(%rdx,%rsi), %r8d
 1125 0185 4431C0   		xorl	%r8d, %eax
 1126 0188 01C1     		addl	%eax, %ecx
 1127 018a 89C8     		movl	%ecx, %eax
 1128 018c 4189C8   		movl	%ecx, %r8d
 1129 018f C1E004   		sall	$4, %eax
 1130 0192 41C1E805 		shrl	$5, %r8d
 1131 0196 4181E8A9 		subl	$15764393, %r8d
 1131      8BF000
 1132 019d 05F799FD 		addl	$1140693495, %eax
 1132      43
 1133 01a2 4431C0   		xorl	%r8d, %eax
 1134 01a5 448D0431 		leal	(%rcx,%rsi), %r8d
 1135 01a9 4431C0   		xorl	%r8d, %eax
 1136 01ac 01C2     		addl	%eax, %edx
 1137 01ae 81FE2037 		cmpl	$-957401312, %esi
 1137      EFC6
 1138 01b4 75AA     		jne	.L189
 1139 01b6 890F     		movl	%ecx, (%rdi)
 1140 01b8 895704   		movl	%edx, 4(%rdi)
 1141 01bb C3       		ret
 1142              		.cfi_endproc
 1143              	.LFE78:
 1145 01bc 0F1F4000 		.p2align 4,,15
 1146              		.globl	myHash
 1148              	myHash:
 1149              	.LFB79:
 1150              		.cfi_startproc
 1151 01c0 0FB7D7   		movzwl	%di, %edx
 1152 01c3 83E701   		andl	$1, %edi
 1153 01c6 F7DF     		negl	%edi
 1154 01c8 6681E700 		andw	$2048, %di
 1154      08
 1155 01cd F6C202   		testb	$2, %dl
 1156 01d0 8D8F0010 		leal	4096(%rdi), %ecx
 1156      0000
 1157 01d6 0F44CF   		cmove	%edi, %ecx
 1158 01d9 F6C204   		testb	$4, %dl
 1159 01dc 8D810020 		leal	8192(%rcx), %eax
 1159      0000
 1160 01e2 0F44C1   		cmove	%ecx, %eax
 1161 01e5 F6C208   		testb	$8, %dl
 1162 01e8 8D880040 		leal	16384(%rax), %ecx
 1162      0000
 1163 01ee 0F44C8   		cmove	%eax, %ecx
 1164 01f1 F6C210   		testb	$16, %dl
 1165 01f4 8D810080 		leal	-32768(%rcx), %eax
 1165      FFFF
 1166 01fa 0F44C1   		cmove	%ecx, %eax
 1167 01fd F6C220   		testb	$32, %dl
 1168 0200 8D4801   		leal	1(%rax), %ecx
 1169 0203 0F44C8   		cmove	%eax, %ecx
 1170 0206 F6C240   		testb	$64, %dl
 1171 0209 8D4102   		leal	2(%rcx), %eax
 1172 020c 0F44C1   		cmove	%ecx, %eax
 1173 020f F6C280   		testb	$-128, %dl
 1174 0212 8D4804   		leal	4(%rax), %ecx
 1175 0215 0F44C8   		cmove	%eax, %ecx
 1176 0218 F6C601   		testb	$1, %dh
 1177 021b 8D4108   		leal	8(%rcx), %eax
 1178 021e 0F44C1   		cmove	%ecx, %eax
 1179 0221 F6C602   		testb	$2, %dh
 1180 0224 8D4810   		leal	16(%rax), %ecx
 1181 0227 0F44C8   		cmove	%eax, %ecx
 1182 022a F6C604   		testb	$4, %dh
 1183 022d 8D4120   		leal	32(%rcx), %eax
 1184 0230 0F44C1   		cmove	%ecx, %eax
 1185 0233 F6C608   		testb	$8, %dh
 1186 0236 8D4840   		leal	64(%rax), %ecx
 1187 0239 0F44C8   		cmove	%eax, %ecx
 1188 023c F6C610   		testb	$16, %dh
 1189 023f 8D818000 		leal	128(%rcx), %eax
 1189      0000
 1190 0245 0F44C1   		cmove	%ecx, %eax
 1191 0248 F6C620   		testb	$32, %dh
 1192 024b 8D880001 		leal	256(%rax), %ecx
 1192      0000
 1193 0251 0F44C8   		cmove	%eax, %ecx
 1194 0254 F6C640   		testb	$64, %dh
 1195 0257 8D810002 		leal	512(%rcx), %eax
 1195      0000
 1196 025d 0F44C1   		cmove	%ecx, %eax
 1197 0260 C1FA0F   		sarl	$15, %edx
 1198 0263 8D880004 		leal	1024(%rax), %ecx
 1198      0000
 1199 0269 85D2     		testl	%edx, %edx
 1200 026b 0F45C1   		cmovne	%ecx, %eax
 1201 026e C3       		ret
 1202              		.cfi_endproc
 1203              	.LFE79:
 1205              		.section	.rodata.str1.1
 1206              	.LC11:
 1207 0036 2C00     		.string	","
 1208              	.LC12:
 1209 0038 256400   		.string	"%d"
 1210              		.text
 1211 026f 90       		.p2align 4,,15
 1212              		.globl	format
 1214              	format:
 1215              	.LFB80:
 1216              		.cfi_startproc
 1217 0270 53       		pushq	%rbx
 1218              		.cfi_def_cfa_offset 16
 1219              		.cfi_offset 3, -16
 1220 0271 BE000000 		movl	$.LC11, %esi
 1220      00
 1221 0276 31DB     		xorl	%ebx, %ebx
 1222 0278 E8000000 		call	strtok
 1222      00
 1223 027d 4885C0   		testq	%rax, %rax
 1224 0280 743F     		je	.L191
 1225              		.p2align 4,,10
 1226 0282 660F1F44 		.p2align 3
 1226      0000
 1227              	.L197:
 1228 0288 48630D00 		movslq	numLines(%rip), %rcx
 1228      000000
 1229 028f 4863D3   		movslq	%ebx, %rdx
 1230 0292 4889C7   		movq	%rax, %rdi
 1231 0295 BE000000 		movl	$.LC12, %esi
 1231      00
 1232 029a 31C0     		xorl	%eax, %eax
 1233 029c 83C301   		addl	$1, %ebx
 1234 029f 488D148A 		leaq	(%rdx,%rcx,4), %rdx
 1235 02a3 488D1495 		leaq	dataFromCSV(,%rdx,4), %rdx
 1235      00000000 
 1236 02ab E8000000 		call	sscanf
 1236      00
 1237 02b0 31FF     		xorl	%edi, %edi
 1238 02b2 BE000000 		movl	$.LC11, %esi
 1238      00
 1239 02b7 E8000000 		call	strtok
 1239      00
 1240 02bc 4885C0   		testq	%rax, %rax
 1241 02bf 75C7     		jne	.L197
 1242              	.L191:
 1243 02c1 5B       		popq	%rbx
 1244              		.cfi_def_cfa_offset 8
 1245 02c2 C3       		ret
 1246              		.cfi_endproc
 1247              	.LFE80:
 1249 02c3 66666666 		.p2align 4,,15
 1249      2E0F1F84 
 1249      00000000 
 1249      00
 1250              		.globl	find
 1252              	find:
 1253              	.LFB81:
 1254              		.cfi_startproc
 1255 02d0 448B1500 		movl	numLines(%rip), %r10d
 1255      000000
 1256 02d7 4585D2   		testl	%r10d, %r10d
 1257 02da 7E54     		jle	.L206
 1258 02dc B8000000 		movl	$dataFromCSV+16, %eax
 1258      00
 1259 02e1 41B90100 		movl	$1, %r9d
 1259      0000
 1260 02e7 EB14     		jmp	.L204
 1261 02e9 0F1F8000 		.p2align 4,,10
 1261      000000
 1262              		.p2align 3
 1263              	.L202:
 1264 02f0 4183C101 		addl	$1, %r9d
 1265 02f4 4883C010 		addq	$16, %rax
 1266 02f8 4539D1   		cmpl	%r10d, %r9d
 1267 02fb 7F33     		jg	.L206
 1268              	.L204:
 1269 02fd 663B38   		cmpw	(%rax), %di
 1270 0300 75EE     		jne	.L202
 1271 0302 663B7004 		cmpw	4(%rax), %si
 1272 0306 75E8     		jne	.L202
 1273 0308 4963C1   		movslq	%r9d, %rax
 1274 030b 4889C6   		movq	%rax, %rsi
 1275 030e 48C1E604 		salq	$4, %rsi
 1276 0312 83BE0000 		cmpl	$1, dataFromCSV+8(%rsi)
 1276      000001
 1277 0319 7418     		je	.L207
 1278              	.L203:
 1279 031b 48C1E004 		salq	$4, %rax
 1280 031f 8B800000 		movl	dataFromCSV+12(%rax), %eax
 1280      0000
 1281 0325 8901     		movl	%eax, (%rcx)
 1282 0327 458908   		movl	%r9d, (%r8)
 1283 032a B8010000 		movl	$1, %eax
 1283      00
 1284 032f C3       		ret
 1285              		.p2align 4,,10
 1286              		.p2align 3
 1287              	.L206:
 1288 0330 31C0     		xorl	%eax, %eax
 1289 0332 C3       		ret
 1290              	.L207:
 1291 0333 C60201   		movb	$1, (%rdx)
 1292 0336 EBE3     		jmp	.L203
 1293              		.cfi_endproc
 1294              	.LFE81:
 1296 0338 0F1F8400 		.p2align 4,,15
 1296      00000000 
 1297              		.globl	suffBal
 1299              	suffBal:
 1300              	.LFB82:
 1301              		.cfi_startproc
 1302 0340 B8640000 		movl	$100, %eax
 1302      00
 1303 0345 0FB6D2   		movzbl	%dl, %edx
 1304 0348 0FB6C9   		movzbl	%cl, %ecx
 1305 034b 0FAFD0   		imull	%eax, %edx
 1306 034e 0316     		addl	(%rsi), %edx
 1307 0350 450FB6C0 		movzbl	%r8b, %r8d
 1308 0354 69C9F401 		imull	$500, %ecx, %ecx
 1308      0000
 1309 035a 450FB6C9 		movzbl	%r9b, %r9d
 1310 035e 4569C0E8 		imull	$1000, %r8d, %r8d
 1310      030000
 1311 0365 01CA     		addl	%ecx, %edx
 1312 0367 4569C9D0 		imull	$2000, %r9d, %r9d
 1312      070000
 1313 036e 4401C2   		addl	%r8d, %edx
 1314 0371 4401CA   		addl	%r9d, %edx
 1315 0374 39FA     		cmpl	%edi, %edx
 1316 0376 8916     		movl	%edx, (%rsi)
 1317 0378 0F9EC0   		setle	%al
 1318 037b C3       		ret
 1319              		.cfi_endproc
 1320              	.LFE82:
 1322              		.section	.rodata.str1.8
 1323 007e 0000     		.align 8
 1324              	.LC13:
 1325 0080 20202020 		.string	"            vendor ID and product ID (e.g 04B4:8613)"
 1325      20202020 
 1325      20202020 
 1325      76656E64 
 1325      6F722049 
 1326              		.section	.rodata.str1.1
 1327              	.LC14:
 1328 003b 3C564944 		.string	"<VID:PID>"
 1328      3A504944 
 1328      3E00
 1329              	.LC15:
 1330 0045 69767000 		.string	"ivp"
 1331              	.LC16:
 1332 0049 6900     		.string	"i"
 1333              		.section	.rodata.str1.8
 1334 00b5 000000   		.align 8
 1335              	.LC17:
 1336 00b8 20202020 		.string	"       VID, PID and opt. dev ID (e.g 1D50:602B:0001)"
 1336      20202056 
 1336      49442C20 
 1336      50494420 
 1336      616E6420 
 1337              		.section	.rodata.str1.1
 1338              	.LC18:
 1339 004b 3C564944 		.string	"<VID:PID[:DID]>"
 1339      3A504944 
 1339      5B3A4449 
 1339      445D3E00 
 1340              	.LC19:
 1341 005b 767000   		.string	"vp"
 1342              	.LC20:
 1343 005e 7600     		.string	"v"
 1344              		.section	.rodata.str1.8
 1345 00ed 000000   		.align 8
 1346              	.LC21:
 1347 00f0 20202020 		.string	"        firmware to RAM-load (or use std fw)"
 1347      20202020 
 1347      6669726D 
 1347      77617265 
 1347      20746F20 
 1348              		.section	.rodata.str1.1
 1349              	.LC22:
 1350 0060 3C666972 		.string	"<firmware.hex>"
 1350      6D776172 
 1350      652E6865 
 1350      783E00
 1351              	.LC23:
 1352 006f 667700   		.string	"fw"
 1353              	.LC24:
 1354 0072 6600     		.string	"f"
 1355              		.section	.rodata.str1.8
 1356 011d 000000   		.align 8
 1357              	.LC25:
 1358 0120 20726561 		.string	" read/write digital ports (e.g B13+,C1-,B2?)"
 1358      642F7772 
 1358      69746520 
 1358      64696769 
 1358      74616C20 
 1359              		.section	.rodata.str1.1
 1360              	.LC26:
 1361 0074 3C626974 		.string	"<bitCfg[,bitCfg]*>"
 1361      4366675B 
 1361      2C626974 
 1361      4366675D 
 1361      2A3E00
 1362              	.LC27:
 1363 0087 706F7274 		.string	"ports"
 1363      7300
 1364              	.LC28:
 1365 008d 6400     		.string	"d"
 1366              	.LC29:
 1367 008f 20202020 		.string	"         query the JTAG chain"
 1367      20202020 
 1367      20717565 
 1367      72792074 
 1367      6865204A 
 1368              	.LC30:
 1369 00ad 3C6A7461 		.string	"<jtagBits>"
 1369      67426974 
 1369      733E00
 1370              	.LC31:
 1371 00b8 71756572 		.string	"query"
 1371      7900
 1372              	.LC32:
 1373 00be 7100     		.string	"q"
 1374              	.LC33:
 1375 00c0 20202020 		.string	"         program a device"
 1375      20202020 
 1375      2070726F 
 1375      6772616D 
 1375      20612064 
 1376              	.LC34:
 1377 00da 3C636F6E 		.string	"<config>"
 1377      6669673E 
 1377      00
 1378              	.LC35:
 1379 00e3 70726F67 		.string	"program"
 1379      72616D00 
 1380              	.LC36:
 1381 00eb 7000     		.string	"p"
 1382              		.section	.rodata.str1.8
 1383 014d 000000   		.align 8
 1384              	.LC37:
 1385 0150 20202020 		.string	"        which comm conduit to choose (default 0x01)"
 1385      20202020 
 1385      77686963 
 1385      6820636F 
 1385      6D6D2063 
 1386              		.section	.rodata.str1.1
 1387              	.LC38:
 1388 00ed 3C636F6E 		.string	"<conduit>"
 1388      64756974 
 1388      3E00
 1389              	.LC39:
 1390 00f7 636F6E64 		.string	"conduit"
 1390      75697400 
 1391              	.LC40:
 1392 00ff 6300     		.string	"c"
 1393              		.section	.rodata.str1.8
 1394 0184 00000000 		.align 8
 1395              	.LC41:
 1396 0188 20202020 		.string	"    a series of CommFPGA actions"
 1396      61207365 
 1396      72696573 
 1396      206F6620 
 1396      436F6D6D 
 1397              		.section	.rodata.str1.1
 1398              	.LC42:
 1399 0101 3C616374 		.string	"<actionString>"
 1399      696F6E53 
 1399      7472696E 
 1399      673E00
 1400              	.LC43:
 1401 0110 61637469 		.string	"action"
 1401      6F6E00
 1402              	.LC44:
 1403 0117 6100     		.string	"a"
 1404              		.section	.rodata.str1.8
 1405 01a9 00000000 		.align 8
 1405      000000
 1406              	.LC45:
 1407 01b0 20202020 		.string	"                    start up an interactive CommFPGA session"
 1407      20202020 
 1407      20202020 
 1407      20202020 
 1407      20202020 
 1408              		.section	.rodata.str1.1
 1409              	.LC46:
 1410 0119 7368656C 		.string	"shell"
 1410      6C00
 1411              	.LC47:
 1412 011f 7300     		.string	"s"
 1413              		.section	.rodata.str1.8
 1414 01ed 000000   		.align 8
 1415              	.LC48:
 1416 01f0 20202020 		.string	"                enable benchmarking & checksumming"
 1416      20202020 
 1416      20202020 
 1416      20202020 
 1416      656E6162 
 1417              		.section	.rodata.str1.1
 1418              	.LC49:
 1419 0121 62656E63 		.string	"benchmark"
 1419      686D6172 
 1419      6B00
 1420              	.LC50:
 1421 012b 6200     		.string	"b"
 1422              		.section	.rodata.str1.8
 1423 0223 00000000 		.align 8
 1423      00
 1424              	.LC51:
 1425 0228 20202020 		.string	"                    reset the bulk endpoints"
 1425      20202020 
 1425      20202020 
 1425      20202020 
 1425      20202020 
 1426              		.section	.rodata.str1.1
 1427              	.LC52:
 1428 012d 72657365 		.string	"reset"
 1428      7400
 1429              	.LC53:
 1430 0133 7200     		.string	"r"
 1431              		.section	.rodata.str1.8
 1432 0255 000000   		.align 8
 1433              	.LC54:
 1434 0258 20202077 		.string	"   write data from channel ch to file"
 1434      72697465 
 1434      20646174 
 1434      61206672 
 1434      6F6D2063 
 1435              		.section	.rodata.str1.1
 1436              	.LC55:
 1437 0135 3C63683A 		.string	"<ch:file.bin>"
 1437      66696C65 
 1437      2E62696E 
 1437      3E00
 1438              	.LC56:
 1439 0143 64756D70 		.string	"dumploop"
 1439      6C6F6F70 
 1439      00
 1440              	.LC57:
 1441 014c 6C00     		.string	"l"
 1442              		.section	.rodata.str1.8
 1443 027e 0000     		.align 8
 1444              	.LC58:
 1445 0280 20202020 		.string	"                     print this help and exit"
 1445      20202020 
 1445      20202020 
 1445      20202020 
 1445      20202020 
 1446              		.section	.rodata.str1.1
 1447              	.LC59:
 1448 014e 68656C70 		.string	"help"
 1448      00
 1449              	.LC60:
 1450 0153 6800     		.string	"h"
 1451              		.section	.rodata.str1.8
 1452 02ae 0000     		.align 8
 1453              	.LC61:
 1454 02b0 20202077 		.string	"   write firmware to FX2's EEPROM (!!)"
 1454      72697465 
 1454      20666972 
 1454      6D776172 
 1454      6520746F 
 1455              		.section	.rodata.str1.1
 1456              	.LC62:
 1457 0155 3C737464 		.string	"<std|fw.hex|fw.iic>"
 1457      7C66772E 
 1457      6865787C 
 1457      66772E69 
 1457      69633E00 
 1458              	.LC63:
 1459 0169 65657072 		.string	"eeprom"
 1459      6F6D00
 1460              		.section	.rodata.str1.8
 1461 02d7 00       		.align 8
 1462              	.LC64:
 1463 02d8 20202020 		.string	"     backup FX2's EEPROM (e.g 128:fw.iic)\n"
 1463      20626163 
 1463      6B757020 
 1463      46583227 
 1463      73204545 
 1464              		.section	.rodata.str1.1
 1465              	.LC65:
 1466 0170 3C6B6269 		.string	"<kbitSize:fw.iic>"
 1466      7453697A 
 1466      653A6677 
 1466      2E696963 
 1466      3E00
 1467              	.LC66:
 1468 0182 6261636B 		.string	"backup"
 1468      757000
 1469              		.section	.rodata.str1.8
 1470 0303 00000000 		.align 8
 1470      00
 1471              	.LC67:
 1472 0308 20202020 		.string	"                    communicates with the atm module"
 1472      20202020 
 1472      20202020 
 1472      20202020 
 1472      20202020 
 1473              		.section	.rodata.str1.1
 1474              	.LC68:
 1475 0189 6C6F6F70 		.string	"loopy"
 1475      7900
 1476              	.LC69:
 1477 018f 7900     		.string	"y"
 1478              	.LC70:
 1479 0191 666C636C 		.string	"flcli"
 1479      6900
 1480              	.LC71:
 1481 0197 25733A20 		.string	"%s: insufficient memory\n"
 1481      696E7375 
 1481      66666963 
 1481      69656E74 
 1481      206D656D 
 1482              		.section	.rodata.str1.8
 1483 033d 000000   		.align 8
 1484              	.LC72:
 1485 0340 46504741 		.string	"FPGALink Command-Line Interface Copyright (C) 2012-2014 Chris McClelland\n\nUsage: %s"
 1485      4C696E6B 
 1485      20436F6D 
 1485      6D616E64 
 1485      2D4C696E 
 1486              		.section	.rodata.str1.1
 1487              	.LC73:
 1488 01b0 0A00     		.string	"\n"
 1489              		.section	.rodata.str1.8
 1490 0394 00000000 		.align 8
 1491              	.LC74:
 1492 0398 0A496E74 		.string	"\nInteract with an FPGALink device.\n\n"
 1492      65726163 
 1492      74207769 
 1492      74682061 
 1492      6E204650 
 1493              		.section	.rodata.str1.1
 1494              	.LC75:
 1495 01b2 2020252D 		.string	"  %-10s %s\n"
 1495      31307320 
 1495      25730A00 
 1496              		.section	.rodata.str1.8
 1497 03bd 000000   		.align 8
 1498              	.LC76:
 1499 03c0 54727920 		.string	"Try '%s --help' for more information.\n"
 1499      27257320 
 1499      2D2D6865 
 1499      6C702720 
 1499      666F7220 
 1500 03e7 00       		.align 8
 1501              	.LC77:
 1502 03e8 41747465 		.string	"Attempting to open connection to FPGALink device %s...\n"
 1502      6D707469 
 1502      6E672074 
 1502      6F206F70 
 1502      656E2063 
 1503              		.section	.rodata.str1.1
 1504              	.LC78:
 1505 01be 4C6F6164 		.string	"Loading firmware into %s...\n"
 1505      696E6720 
 1505      6669726D 
 1505      77617265 
 1505      20696E74 
 1506              	.LC79:
 1507 01db 41776169 		.string	"Awaiting renumeration"
 1507      74696E67 
 1507      2072656E 
 1507      756D6572 
 1507      6174696F 
 1508              	.LC80:
 1509 01f1 2E00     		.string	"."
 1510              		.section	.rodata.str1.8
 1511              		.align 8
 1512              	.LC81:
 1513 0420 46504741 		.string	"FPGALink device did not renumerate properly as %s\n"
 1513      4C696E6B 
 1513      20646576 
 1513      69636520 
 1513      64696420 
 1514 0453 00000000 		.align 8
 1514      00
 1515              	.LC82:
 1516 0458 41747465 		.string	"Attempting to open connection to FPGLink device %s again...\n"
 1516      6D707469 
 1516      6E672074 
 1516      6F206F70 
 1516      656E2063 
 1517 0495 000000   		.align 8
 1518              	.LC83:
 1519 0498 436F756C 		.string	"Could not open FPGALink device at %s and no initial VID:PID was supplied\n"
 1519      64206E6F 
 1519      74206F70 
 1519      656E2046 
 1519      5047414C 
 1520 04e2 00000000 		.align 8
 1520      0000
 1521              	.LC84:
 1522 04e8 436F6E6E 		.string	"Connected to FPGALink device %s (firmwareID: 0x%04X, firmwareVersion: 0x%08X)\n"
 1522      65637465 
 1522      6420746F 
 1522      20465047 
 1522      414C696E 
 1523 0537 00       		.align 8
 1524              	.LC85:
 1525 0538 57726974 		.string	"Writing the standard FPGALink firmware to the FX2's EEPROM...\n"
 1525      696E6720 
 1525      74686520 
 1525      7374616E 
 1525      64617264 
 1526 0577 00       		.align 8
 1527              	.LC86:
 1528 0578 57726974 		.string	"Writing custom FPGALink firmware from %s to the FX2's EEPROM...\n"
 1528      696E6720 
 1528      63757374 
 1528      6F6D2046 
 1528      5047414C 
 1529 05b9 00000000 		.align 8
 1529      000000
 1530              	.LC87:
 1531 05c0 25733A20 		.string	"%s: invalid argument to option --backup=<kbitSize:fw.iic>\n"
 1531      696E7661 
 1531      6C696420 
 1531      61726775 
 1531      6D656E74 
 1532 05fb 00000000 		.align 8
 1532      00
 1533              	.LC88:
 1534 0600 53617669 		.string	"Saving a backup of %d kbit from the FX2's EEPROM to %s...\n"
 1534      6E672061 
 1534      20626163 
 1534      6B757020 
 1534      6F662025 
 1535              		.section	.rodata.str1.1
 1536              	.LC89:
 1537 01f3 436F6E66 		.string	"Configuring ports...\n"
 1537      69677572 
 1537      696E6720 
 1537      706F7274 
 1537      732E2E2E 
 1538              	.LC90:
 1539 0209 25303858 		.string	"%08X"
 1539      00
 1540              		.section	.rodata.str1.8
 1541 063b 00000000 		.align 8
 1541      00
 1542              	.LC91:
 1543 0640 52656164 		.string	"Readback:   28   24   20   16    12    8    4    0\n          %s"
 1543      6261636B 
 1543      3A202020 
 1543      32382020 
 1543      20323420 
 1544              		.section	.rodata.str1.1
 1545              	.LC92:
 1546 020e 20257300 		.string	" %s"
 1547              	.LC93:
 1548 0212 20202573 		.string	"  %s"
 1548      00
 1549              	.LC94:
 1550 0217 2025730A 		.string	" %s\n"
 1550      00
 1551              		.section	.rodata.str1.8
 1552              		.align 8
 1553              	.LC95:
 1554 0680 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain, yielding:\n"
 1554      46504741 
 1554      4C696E6B 
 1554      20646576 
 1554      69636520 
 1555              		.section	.rodata.str1.1
 1556              	.LC96:
 1557 021c 20203078 		.string	"  0x%08X\n"
 1557      25303858 
 1557      0A00
 1558              		.section	.rodata.str1.8
 1559 06bd 000000   		.align 8
 1560              	.LC97:
 1561 06c0 54686520 		.string	"The FPGALink device at %s scanned its JTAG chain but did not find any attached devices\n"
 1561      46504741 
 1561      4C696E6B 
 1561      20646576 
 1561      69636520 
 1562              		.align 8
 1563              	.LC98:
 1564 0718 4A544147 		.string	"JTAG chain scan requested but FPGALink device at %s does not support NeroProg\n"
 1564      20636861 
 1564      696E2073 
 1564      63616E20 
 1564      72657175 
 1565              		.section	.rodata.str1.1
 1566              	.LC99:
 1567 0226 50726F67 		.string	"Programming device...\n"
 1567      72616D6D 
 1567      696E6720 
 1567      64657669 
 1567      63652E2E 
 1568              		.section	.rodata.str1.8
 1569 0767 00       		.align 8
 1570              	.LC100:
 1571 0768 50726F67 		.string	"Program operation requested but device at %s does not support NeroProg\n"
 1571      72616D20 
 1571      6F706572 
 1571      6174696F 
 1571      6E207265 
 1572              		.align 8
 1573              	.LC101:
 1574 07b0 45786563 		.string	"Executing CommFPGA actions on FPGALink device %s...\n"
 1574      7574696E 
 1574      6720436F 
 1574      6D6D4650 
 1574      47412061 
 1575 07e5 000000   		.align 8
 1576              	.LC102:
 1577 07e8 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --program?\n"
 1577      46504741 
 1577      4C696E6B 
 1577      20646576 
 1577      69636520 
 1578 0834 00000000 		.align 8
 1579              	.LC103:
 1580 0838 41637469 		.string	"Action requested but device at %s does not support CommFPGA\n"
 1580      6F6E2072 
 1580      65717565 
 1580      73746564 
 1580      20627574 
 1581 0875 000000   		.align 8
 1582              	.LC104:
 1583 0878 25733A20 		.string	"%s: invalid argument to option -l|--dumploop=<ch:file.bin>\n"
 1583      696E7661 
 1583      6C696420 
 1583      61726775 
 1583      6D656E74 
 1584 08b4 00000000 		.align 8
 1585              	.LC105:
 1586 08b8 436F7079 		.string	"Copying from channel %lu to %s"
 1586      696E6720 
 1586      66726F6D 
 1586      20636861 
 1586      6E6E656C 
 1587              		.section	.rodata.str1.1
 1588              	.LC106:
 1589 023d 0A436175 		.string	"\nCaught SIGINT, quitting...\n"
 1589      67687420 
 1589      53494749 
 1589      4E542C20 
 1589      71756974 
 1590              		.section	.rodata.str1.8
 1591 08d7 00       		.align 8
 1592              	.LC107:
 1593 08d8 0A456E74 		.string	"\nEntering CommFPGA command-line mode:\n"
 1593      6572696E 
 1593      6720436F 
 1593      6D6D4650 
 1593      47412063 
 1594              		.section	.rodata.str1.1
 1595              	.LC108:
 1596 025a 3E2000   		.string	"> "
 1597              		.section	.rodata.str1.8
 1598 08ff 00       		.align 8
 1599              	.LC109:
 1600 0900 54686520 		.string	"The FPGALink device at %s is not ready to talk - did you forget --xsvf?\n"
 1600      46504741 
 1600      4C696E6B 
 1600      20646576 
 1600      69636520 
 1601 0949 00000000 		.align 8
 1601      000000
 1602              	.LC110:
 1603 0950 5368656C 		.string	"Shell requested but device at %s does not support CommFPGA\n"
 1603      6C207265 
 1603      71756573 
 1603      74656420 
 1603      62757420 
 1604              		.section	.rodata.str1.1
 1605              	.LC112:
 1606 025d 722B00   		.string	"r+"
 1607              	.LC113:
 1608 0260 43737620 		.string	"Csv doesn't exist \n"
 1608      646F6573 
 1608      6E277420 
 1608      65786973 
 1608      74200A00 
 1609              	.LC114:
 1610 0274 64617461 		.string	"data in channel 0 = %u \n"
 1610      20696E20 
 1610      6368616E 
 1610      6E656C20 
 1610      30203D20 
 1611              	.LC115:
 1612 028d 64617461 		.string	"data in channel %u = %u \n"
 1612      20696E20 
 1612      6368616E 
 1612      6E656C20 
 1612      2575203D 
 1613              	.LC117:
 1614 02a7 56616C69 		.string	"Valid user found \n"
 1614      64207573 
 1614      65722066 
 1614      6F756E64 
 1614      200A00
 1615              	.LC118:
 1616 02ba 772B00   		.string	"w+"
 1617              		.section	.rodata.str1.8
 1618 098c 00000000 		.align 8
 1619              	.LC119:
 1620 0990 22557365 		.string	"\"User ID (decimal)\",\"PIN Hash (decimal)\",\"Admin\",\"Balance (decimal)\""
 1620      72204944 
 1620      20286465 
 1620      63696D61 
 1620      6C29222C 
 1621              		.section	.rodata.str1.1
 1622              	.LC120:
 1623 02bd 257300   		.string	"%s"
 1624              	.LC121:
 1625 02c0 55736572 		.string	"User has admin privileges \n"
 1625      20686173 
 1625      2061646D 
 1625      696E2070 
 1625      72697669 
 1626              	.LC122:
 1627 02dc 25730A00 		.string	"%s\n"
 1628              		.section	.rodata.str1.8
 1629 09d5 000000   		.align 8
 1630              	.LC111:
 1631 09d8 2F686F6D 		.string	"/home/pandu/Desktop/DigitalLogicDesign/Lab/03-finishingup/makestuff/apps/flcli/SampleBack
 1631      652F7061 
 1631      6E64752F 
 1631      4465736B 
 1631      746F702F 
 1632              		.section	.text.startup,"ax",@progbits
 1633              		.p2align 4,,15
 1634              		.globl	main
 1636              	main:
 1637              	.LFB90:
 1638              		.cfi_startproc
 1639 0000 4157     		pushq	%r15
 1640              		.cfi_def_cfa_offset 16
 1641              		.cfi_offset 15, -16
 1642 0002 B9000000 		movl	$.LC13, %ecx
 1642      00
 1643 0007 BA000000 		movl	$.LC14, %edx
 1643      00
 1644 000c 4156     		pushq	%r14
 1645              		.cfi_def_cfa_offset 24
 1646              		.cfi_offset 14, -24
 1647 000e 4155     		pushq	%r13
 1648              		.cfi_def_cfa_offset 32
 1649              		.cfi_offset 13, -32
 1650 0010 4154     		pushq	%r12
 1651              		.cfi_def_cfa_offset 40
 1652              		.cfi_offset 12, -40
 1653 0012 55       		pushq	%rbp
 1654              		.cfi_def_cfa_offset 48
 1655              		.cfi_offset 6, -48
 1656 0013 53       		pushq	%rbx
 1657              		.cfi_def_cfa_offset 56
 1658              		.cfi_offset 3, -56
 1659 0014 4881EC38 		subq	$568, %rsp
 1659      020000
 1660              		.cfi_def_cfa_offset 624
 1661 001b 897C2468 		movl	%edi, 104(%rsp)
 1662 001f 48897424 		movq	%rsi, 88(%rsp)
 1662      58
 1663 0024 BF000000 		movl	$.LC16, %edi
 1663      00
 1664 0029 BE000000 		movl	$.LC15, %esi
 1664      00
 1665 002e 64488B04 		movq	%fs:40, %rax
 1665      25280000 
 1665      00
 1666 0037 48898424 		movq	%rax, 552(%rsp)
 1666      28020000 
 1667 003f 31C0     		xorl	%eax, %eax
 1668 0041 E8000000 		call	arg_str0
 1668      00
 1669 0046 B9000000 		movl	$.LC17, %ecx
 1669      00
 1670 004b BA000000 		movl	$.LC18, %edx
 1670      00
 1671 0050 BE000000 		movl	$.LC19, %esi
 1671      00
 1672 0055 BF000000 		movl	$.LC20, %edi
 1672      00
 1673 005a 4989C4   		movq	%rax, %r12
 1674 005d E8000000 		call	arg_str1
 1674      00
 1675 0062 B9000000 		movl	$.LC21, %ecx
 1675      00
 1676 0067 BA000000 		movl	$.LC22, %edx
 1676      00
 1677 006c BE000000 		movl	$.LC23, %esi
 1677      00
 1678 0071 BF000000 		movl	$.LC24, %edi
 1678      00
 1679 0076 4989C5   		movq	%rax, %r13
 1680 0079 E8000000 		call	arg_str0
 1680      00
 1681 007e B9000000 		movl	$.LC25, %ecx
 1681      00
 1682 0083 BA000000 		movl	$.LC26, %edx
 1682      00
 1683 0088 BE000000 		movl	$.LC27, %esi
 1683      00
 1684 008d BF000000 		movl	$.LC28, %edi
 1684      00
 1685 0092 4989C6   		movq	%rax, %r14
 1686 0095 E8000000 		call	arg_str0
 1686      00
 1687 009a B9000000 		movl	$.LC29, %ecx
 1687      00
 1688 009f BA000000 		movl	$.LC30, %edx
 1688      00
 1689 00a4 BE000000 		movl	$.LC31, %esi
 1689      00
 1690 00a9 BF000000 		movl	$.LC32, %edi
 1690      00
 1691 00ae 48894424 		movq	%rax, 16(%rsp)
 1691      10
 1692 00b3 E8000000 		call	arg_str0
 1692      00
 1693 00b8 B9000000 		movl	$.LC33, %ecx
 1693      00
 1694 00bd BA000000 		movl	$.LC34, %edx
 1694      00
 1695 00c2 BE000000 		movl	$.LC35, %esi
 1695      00
 1696 00c7 BF000000 		movl	$.LC36, %edi
 1696      00
 1697 00cc 48894424 		movq	%rax, 24(%rsp)
 1697      18
 1698 00d1 E8000000 		call	arg_str0
 1698      00
 1699 00d6 B9000000 		movl	$.LC37, %ecx
 1699      00
 1700 00db BA000000 		movl	$.LC38, %edx
 1700      00
 1701 00e0 BE000000 		movl	$.LC39, %esi
 1701      00
 1702 00e5 BF000000 		movl	$.LC40, %edi
 1702      00
 1703 00ea 48894424 		movq	%rax, 48(%rsp)
 1703      30
 1704 00ef E8000000 		call	arg_uint0
 1704      00
 1705 00f4 B9000000 		movl	$.LC41, %ecx
 1705      00
 1706 00f9 BA000000 		movl	$.LC42, %edx
 1706      00
 1707 00fe BE000000 		movl	$.LC43, %esi
 1707      00
 1708 0103 BF000000 		movl	$.LC44, %edi
 1708      00
 1709 0108 48894424 		movq	%rax, 32(%rsp)
 1709      20
 1710 010d E8000000 		call	arg_str0
 1710      00
 1711 0112 BA000000 		movl	$.LC45, %edx
 1711      00
 1712 0117 BE000000 		movl	$.LC46, %esi
 1712      00
 1713 011c BF000000 		movl	$.LC47, %edi
 1713      00
 1714 0121 48894424 		movq	%rax, 56(%rsp)
 1714      38
 1715 0126 E8000000 		call	arg_lit0
 1715      00
 1716 012b BA000000 		movl	$.LC48, %edx
 1716      00
 1717 0130 BE000000 		movl	$.LC49, %esi
 1717      00
 1718 0135 BF000000 		movl	$.LC50, %edi
 1718      00
 1719 013a 48894424 		movq	%rax, 72(%rsp)
 1719      48
 1720 013f E8000000 		call	arg_lit0
 1720      00
 1721 0144 BA000000 		movl	$.LC51, %edx
 1721      00
 1722 0149 BE000000 		movl	$.LC52, %esi
 1722      00
 1723 014e BF000000 		movl	$.LC53, %edi
 1723      00
 1724 0153 48894424 		movq	%rax, 80(%rsp)
 1724      50
 1725 0158 E8000000 		call	arg_lit0
 1725      00
 1726 015d B9000000 		movl	$.LC54, %ecx
 1726      00
 1727 0162 BA000000 		movl	$.LC55, %edx
 1727      00
 1728 0167 BE000000 		movl	$.LC56, %esi
 1728      00
 1729 016c BF000000 		movl	$.LC57, %edi
 1729      00
 1730 0171 48894424 		movq	%rax, 40(%rsp)
 1730      28
 1731 0176 E8000000 		call	arg_str0
 1731      00
 1732 017b BA000000 		movl	$.LC58, %edx
 1732      00
 1733 0180 BE000000 		movl	$.LC59, %esi
 1733      00
 1734 0185 BF000000 		movl	$.LC60, %edi
 1734      00
 1735 018a 48894424 		movq	%rax, 64(%rsp)
 1735      40
 1736 018f E8000000 		call	arg_lit0
 1736      00
 1737 0194 31FF     		xorl	%edi, %edi
 1738 0196 B9000000 		movl	$.LC61, %ecx
 1738      00
 1739 019b BA000000 		movl	$.LC62, %edx
 1739      00
 1740 01a0 BE000000 		movl	$.LC63, %esi
 1740      00
 1741 01a5 4889C3   		movq	%rax, %rbx
 1742 01a8 E8000000 		call	arg_str0
 1742      00
 1743 01ad B9000000 		movl	$.LC64, %ecx
 1743      00
 1744 01b2 BA000000 		movl	$.LC65, %edx
 1744      00
 1745 01b7 BE000000 		movl	$.LC66, %esi
 1745      00
 1746 01bc 31FF     		xorl	%edi, %edi
 1747 01be 4989C7   		movq	%rax, %r15
 1748 01c1 E8000000 		call	arg_str0
 1748      00
 1749 01c6 BF140000 		movl	$20, %edi
 1749      00
 1750 01cb 48894424 		movq	%rax, 8(%rsp)
 1750      08
 1751 01d0 E8000000 		call	arg_end
 1751      00
 1752 01d5 BA000000 		movl	$.LC67, %edx
 1752      00
 1753 01da BE000000 		movl	$.LC68, %esi
 1753      00
 1754 01df BF000000 		movl	$.LC69, %edi
 1754      00
 1755 01e4 4889C5   		movq	%rax, %rbp
 1756 01e7 E8000000 		call	arg_lit0
 1756      00
 1757 01ec 488B4C24 		movq	16(%rsp), %rcx
 1757      10
 1758 01f1 488B5424 		movq	48(%rsp), %rdx
 1758      30
 1759 01f6 488DBC24 		leaq	288(%rsp), %rdi
 1759      20010000 
 1760 01fe 488B7424 		movq	56(%rsp), %rsi
 1760      38
 1761 0203 48894424 		movq	%rax, 96(%rsp)
 1761      60
 1762 0208 48898424 		movq	%rax, 384(%rsp)
 1762      80010000 
 1763 0210 488B4424 		movq	8(%rsp), %rax
 1763      08
 1764 0215 48898C24 		movq	%rcx, 312(%rsp)
 1764      38010000 
 1765 021d 488B4C24 		movq	24(%rsp), %rcx
 1765      18
 1766 0222 48899424 		movq	%rdx, 328(%rsp)
 1766      48010000 
 1767 022a 488B5424 		movq	72(%rsp), %rdx
 1767      48
 1768 022f 4889B424 		movq	%rsi, 344(%rsp)
 1768      58010000 
 1769 0237 488B7424 		movq	40(%rsp), %rsi
 1769      28
 1770 023c 48898C24 		movq	%rcx, 320(%rsp)
 1770      40010000 
 1771 0244 488B4C24 		movq	32(%rsp), %rcx
 1771      20
 1772 0249 48899424 		movq	%rdx, 352(%rsp)
 1772      60010000 
 1773 0251 488B5424 		movq	64(%rsp), %rdx
 1773      40
 1774 0256 4C89A424 		movq	%r12, 288(%rsp)
 1774      20010000 
 1775 025e 4C89AC24 		movq	%r13, 296(%rsp)
 1775      28010000 
 1776 0266 48898C24 		movq	%rcx, 336(%rsp)
 1776      50010000 
 1777 026e 488B4C24 		movq	80(%rsp), %rcx
 1777      50
 1778 0273 4C89B424 		movq	%r14, 304(%rsp)
 1778      30010000 
 1779 027b 4889B424 		movq	%rsi, 368(%rsp)
 1779      70010000 
 1780 0283 48899424 		movq	%rdx, 376(%rsp)
 1780      78010000 
 1781 028b 48899C24 		movq	%rbx, 392(%rsp)
 1781      88010000 
 1782 0293 48898C24 		movq	%rcx, 360(%rsp)
 1782      68010000 
 1783 029b 4C89BC24 		movq	%r15, 400(%rsp)
 1783      90010000 
 1784 02a3 48898424 		movq	%rax, 408(%rsp)
 1784      98010000 
 1785 02ab 4889AC24 		movq	%rbp, 416(%rsp)
 1785      A0010000 
 1786 02b3 48C78424 		movq	$0, 128(%rsp)
 1786      80000000 
 1786      00000000 
 1787 02bf 48C78424 		movq	$0, 200(%rsp)
 1787      C8000000 
 1787      00000000 
 1788 02cb E8000000 		call	arg_nullcheck
 1788      00
 1789 02d0 85C0     		testl	%eax, %eax
 1790 02d2 0F849B00 		je	.L210
 1790      0000
 1791 02d8 488B3D00 		movq	stderr(%rip), %rdi
 1791      000000
 1792 02df B9000000 		movl	$.LC70, %ecx
 1792      00
 1793 02e4 BA000000 		movl	$.LC71, %edx
 1793      00
 1794 02e9 BE010000 		movl	$1, %esi
 1794      00
 1795 02ee 31C0     		xorl	%eax, %eax
 1796 02f0 4531FF   		xorl	%r15d, %r15d
 1797 02f3 BD010000 		movl	$1, %ebp
 1797      00
 1798 02f8 E8000000 		call	__fprintf_chk
 1798      00
 1799              	.L211:
 1800 02fd 4C89FF   		movq	%r15, %rdi
 1801 0300 E8000000 		call	free
 1801      00
 1802 0305 488BBC24 		movq	128(%rsp), %rdi
 1802      80000000 
 1803 030d E8000000 		call	flClose
 1803      00
 1804 0312 488B8C24 		movq	200(%rsp), %rcx
 1804      C8000000 
 1805 031a 4885C9   		testq	%rcx, %rcx
 1806 031d 7425     		je	.L356
 1807 031f 488B3D00 		movq	stderr(%rip), %rdi
 1807      000000
 1808 0326 BA000000 		movl	$.LC122, %edx
 1808      00
 1809 032b BE010000 		movl	$1, %esi
 1809      00
 1810 0330 31C0     		xorl	%eax, %eax
 1811 0332 E8000000 		call	__fprintf_chk
 1811      00
 1812 0337 488BBC24 		movq	200(%rsp), %rdi
 1812      C8000000 
 1813 033f E8000000 		call	flFreeError
 1813      00
 1814              	.L356:
 1815 0344 4189EA   		movl	%ebp, %r10d
 1816              	.L270:
 1817 0347 488B9C24 		movq	552(%rsp), %rbx
 1817      28020000 
 1818 034f 6448331C 		xorq	%fs:40, %rbx
 1818      25280000 
 1818      00
 1819 0358 4489D0   		movl	%r10d, %eax
 1820 035b 0F851E06 		jne	.L444
 1820      0000
 1821 0361 4881C438 		addq	$568, %rsp
 1821      020000
 1822              		.cfi_remember_state
 1823              		.cfi_def_cfa_offset 56
 1824 0368 5B       		popq	%rbx
 1825              		.cfi_def_cfa_offset 48
 1826 0369 5D       		popq	%rbp
 1827              		.cfi_def_cfa_offset 40
 1828 036a 415C     		popq	%r12
 1829              		.cfi_def_cfa_offset 32
 1830 036c 415D     		popq	%r13
 1831              		.cfi_def_cfa_offset 24
 1832 036e 415E     		popq	%r14
 1833              		.cfi_def_cfa_offset 16
 1834 0370 415F     		popq	%r15
 1835              		.cfi_def_cfa_offset 8
 1836 0372 C3       		ret
 1837              	.L210:
 1838              		.cfi_restore_state
 1839 0373 488B7424 		movq	88(%rsp), %rsi
 1839      58
 1840 0378 8B7C2468 		movl	104(%rsp), %edi
 1841 037c 488D9424 		leaq	288(%rsp), %rdx
 1841      20010000 
 1842 0384 8944246C 		movl	%eax, 108(%rsp)
 1843 0388 E8000000 		call	arg_parse
 1843      00
 1844 038d 837B6000 		cmpl	$0, 96(%rbx)
 1845 0391 448B5424 		movl	108(%rsp), %r10d
 1845      6C
 1846 0396 7E63     		jle	.L212
 1847 0398 BA000000 		movl	$.LC70, %edx
 1847      00
 1848 039d BE000000 		movl	$.LC72, %esi
 1848      00
 1849 03a2 BF010000 		movl	$1, %edi
 1849      00
 1850 03a7 31C0     		xorl	%eax, %eax
 1851 03a9 4531FF   		xorl	%r15d, %r15d
 1852 03ac 31ED     		xorl	%ebp, %ebp
 1853 03ae E8000000 		call	__printf_chk
 1853      00
 1854 03b3 488B3D00 		movq	stdout(%rip), %rdi
 1854      000000
 1855 03ba 488DB424 		leaq	288(%rsp), %rsi
 1855      20010000 
 1856 03c2 BA000000 		movl	$.LC73, %edx
 1856      00
 1857 03c7 E8000000 		call	arg_print_syntax
 1857      00
 1858 03cc BE000000 		movl	$.LC74, %esi
 1858      00
 1859 03d1 BF010000 		movl	$1, %edi
 1859      00
 1860 03d6 31C0     		xorl	%eax, %eax
 1861 03d8 E8000000 		call	__printf_chk
 1861      00
 1862 03dd 488B3D00 		movq	stdout(%rip), %rdi
 1862      000000
 1863 03e4 488DB424 		leaq	288(%rsp), %rsi
 1863      20010000 
 1864 03ec BA000000 		movl	$.LC75, %edx
 1864      00
 1865 03f1 E8000000 		call	arg_print_glossary
 1865      00
 1866 03f6 E902FFFF 		jmp	.L211
 1866      FF
 1867              	.L212:
 1868 03fb 85C0     		testl	%eax, %eax
 1869 03fd 7E3E     		jle	.L213
 1870 03ff 488B3D00 		movq	stdout(%rip), %rdi
 1870      000000
 1871 0406 BA000000 		movl	$.LC70, %edx
 1871      00
 1872 040b 4889EE   		movq	%rbp, %rsi
 1873 040e E8000000 		call	arg_print_errors
 1873      00
 1874 0413 B9000000 		movl	$.LC70, %ecx
 1874      00
 1875 0418 BA000000 		movl	$.LC76, %edx
 1875      00
 1876              	.L441:
 1877 041d 488B3D00 		movq	stderr(%rip), %rdi
 1877      000000
 1878 0424 BE010000 		movl	$1, %esi
 1878      00
 1879 0429 31C0     		xorl	%eax, %eax
 1880 042b 4531FF   		xorl	%r15d, %r15d
 1881 042e BD0C0000 		movl	$12, %ebp
 1881      00
 1882 0433 E8000000 		call	__fprintf_chk
 1882      00
 1883 0438 E9C0FEFF 		jmp	.L211
 1883      FF
 1884              	.L213:
 1885 043d 488DB424 		leaq	200(%rsp), %rsi
 1885      C8000000 
 1886 0445 31FF     		xorl	%edi, %edi
 1887 0447 44895424 		movl	%r10d, 104(%rsp)
 1887      68
 1888 044c E8000000 		call	flInitialise
 1888      00
 1889 0451 85C0     		testl	%eax, %eax
 1890 0453 448B5424 		movl	104(%rsp), %r10d
 1890      68
 1891 0458 740D     		je	.L214
 1892              	.L263:
 1893 045a 4531FF   		xorl	%r15d, %r15d
 1894 045d BD010000 		movl	$1, %ebp
 1894      00
 1895 0462 E996FEFF 		jmp	.L211
 1895      FF
 1896              	.L214:
 1897 0467 498B4568 		movq	104(%r13), %rax
 1898 046b BE000000 		movl	$.LC77, %esi
 1898      00
 1899 0470 BF010000 		movl	$1, %edi
 1899      00
 1900 0475 44895424 		movl	%r10d, 104(%rsp)
 1900      68
 1901 047a 4C8B28   		movq	(%rax), %r13
 1902 047d 31C0     		xorl	%eax, %eax
 1903 047f 4C89EA   		movq	%r13, %rdx
 1904 0482 E8000000 		call	__printf_chk
 1904      00
 1905 0487 488DB424 		leaq	128(%rsp), %rsi
 1905      80000000 
 1906 048f 31D2     		xorl	%edx, %edx
 1907 0491 4C89EF   		movq	%r13, %rdi
 1908 0494 E8000000 		call	flOpen
 1908      00
 1909 0499 85C0     		testl	%eax, %eax
 1910 049b 448B5424 		movl	104(%rsp), %r10d
 1910      68
 1911 04a0 0F843601 		je	.L215
 1911      0000
 1912 04a6 41837C24 		cmpl	$0, 96(%r12)
 1912      6000
 1913 04ac 0F84DF00 		je	.L216
 1913      0000
 1914 04b2 498B4424 		movq	104(%r12), %rax
 1914      68
 1915 04b7 BE000000 		movl	$.LC78, %esi
 1915      00
 1916 04bc BF010000 		movl	$1, %edi
 1916      00
 1917 04c1 488B18   		movq	(%rax), %rbx
 1918 04c4 31C0     		xorl	%eax, %eax
 1919 04c6 4889DA   		movq	%rbx, %rdx
 1920 04c9 E8000000 		call	__printf_chk
 1920      00
 1921 04ce 41837E60 		cmpl	$0, 96(%r14)
 1921      00
 1922 04d3 448B5424 		movl	104(%rsp), %r10d
 1922      68
 1923 04d8 0F846B03 		je	.L217
 1923      0000
 1924 04de 498B4668 		movq	104(%r14), %rax
 1925 04e2 488D9424 		leaq	200(%rsp), %rdx
 1925      C8000000 
 1926 04ea 4889DF   		movq	%rbx, %rdi
 1927 04ed 488B30   		movq	(%rax), %rsi
 1928 04f0 E8000000 		call	flLoadCustomFirmware
 1928      00
 1929 04f5 448B5424 		movl	104(%rsp), %r10d
 1929      68
 1930              	.L218:
 1931 04fa 85C0     		testl	%eax, %eax
 1932 04fc 0F8558FF 		jne	.L263
 1932      FFFF
 1933 0502 BE000000 		movl	$.LC79, %esi
 1933      00
 1934 0507 BF010000 		movl	$1, %edi
 1934      00
 1935 050c 44895424 		movl	%r10d, 104(%rsp)
 1935      68
 1936 0511 E8000000 		call	__printf_chk
 1936      00
 1937 0516 BFE80300 		movl	$1000, %edi
 1937      00
 1938 051b BB3C0000 		movl	$60, %ebx
 1938      00
 1939 0520 488DAC24 		leaq	224(%rsp), %rbp
 1939      E0000000 
 1940 0528 E8000000 		call	flSleep
 1940      00
 1941 052d 448B5424 		movl	104(%rsp), %r10d
 1941      68
 1942 0532 4589D4   		movl	%r10d, %r12d
 1943 0535 EB21     		jmp	.L221
 1944              	.L445:
 1945 0537 BFFA0000 		movl	$250, %edi
 1945      00
 1946 053c E8000000 		call	flSleep
 1946      00
 1947 0541 80BC24E0 		cmpb	$0, 224(%rsp)
 1947      00000000 
 1948 0549 0F85BB03 		jne	.L220
 1948      0000
 1949 054f 83EB01   		subl	$1, %ebx
 1950 0552 0F84B203 		je	.L220
 1950      0000
 1951              	.L221:
 1952 0558 BE000000 		movl	$.LC80, %esi
 1952      00
 1953 055d BF010000 		movl	$1, %edi
 1953      00
 1954 0562 31C0     		xorl	%eax, %eax
 1955 0564 E8000000 		call	__printf_chk
 1955      00
 1956 0569 488B3D00 		movq	stdout(%rip), %rdi
 1956      000000
 1957 0570 E8000000 		call	fflush
 1957      00
 1958 0575 488D9424 		leaq	200(%rsp), %rdx
 1958      C8000000 
 1959 057d 4889EE   		movq	%rbp, %rsi
 1960 0580 4C89EF   		movq	%r13, %rdi
 1961 0583 E8000000 		call	flIsDeviceAvailable
 1961      00
 1962 0588 85C0     		testl	%eax, %eax
 1963 058a 74AB     		je	.L445
 1964 058c E9C9FEFF 		jmp	.L263
 1964      FF
 1965              	.L216:
 1966 0591 4C89E9   		movq	%r13, %rcx
 1967 0594 BA000000 		movl	$.LC83, %edx
 1967      00
 1968 0599 E97FFEFF 		jmp	.L441
 1968      FF
 1969              	.L222:
 1970 059e 4C89EA   		movq	%r13, %rdx
 1971 05a1 BE000000 		movl	$.LC82, %esi
 1971      00
 1972 05a6 BF010000 		movl	$1, %edi
 1972      00
 1973 05ab 31C0     		xorl	%eax, %eax
 1974 05ad 44895424 		movl	%r10d, 104(%rsp)
 1974      68
 1975 05b2 E8000000 		call	__printf_chk
 1975      00
 1976 05b7 488D9424 		leaq	200(%rsp), %rdx
 1976      C8000000 
 1977 05bf 488DB424 		leaq	128(%rsp), %rsi
 1977      80000000 
 1978 05c7 4C89EF   		movq	%r13, %rdi
 1979 05ca E8000000 		call	flOpen
 1979      00
 1980 05cf 85C0     		testl	%eax, %eax
 1981 05d1 448B5424 		movl	104(%rsp), %r10d
 1981      68
 1982 05d6 0F857EFE 		jne	.L263
 1982      FFFF
 1983              	.L215:
 1984 05dc 488BBC24 		movq	128(%rsp), %rdi
 1984      80000000 
 1985 05e4 44895424 		movl	%r10d, 104(%rsp)
 1985      68
 1986 05e9 E8000000 		call	flGetFirmwareVersion
 1986      00
 1987 05ee 488BBC24 		movq	128(%rsp), %rdi
 1987      80000000 
 1988 05f6 89C3     		movl	%eax, %ebx
 1989 05f8 E8000000 		call	flGetFirmwareID
 1989      00
 1990 05fd 4189D8   		movl	%ebx, %r8d
 1991 0600 0FB7C8   		movzwl	%ax, %ecx
 1992 0603 4C89EA   		movq	%r13, %rdx
 1993 0606 31C0     		xorl	%eax, %eax
 1994 0608 BE000000 		movl	$.LC84, %esi
 1994      00
 1995 060d BF010000 		movl	$1, %edi
 1995      00
 1996 0612 E8000000 		call	__printf_chk
 1996      00
 1997 0617 41837F60 		cmpl	$0, 96(%r15)
 1997      00
 1998 061c 448B5424 		movl	104(%rsp), %r10d
 1998      68
 1999 0621 7469     		je	.L230
 2000 0623 498B4768 		movq	104(%r15), %rax
 2001 0627 488B10   		movq	(%rax), %rdx
 2002 062a 803A73   		cmpb	$115, (%rdx)
 2003 062d 0F853802 		jne	.L227
 2003      0000
 2004 0633 807A0174 		cmpb	$116, 1(%rdx)
 2005 0637 0F852E02 		jne	.L227
 2005      0000
 2006 063d 807A0264 		cmpb	$100, 2(%rdx)
 2007 0641 0F852402 		jne	.L227
 2007      0000
 2008 0647 807A0300 		cmpb	$0, 3(%rdx)
 2009 064b 0F851A02 		jne	.L227
 2009      0000
 2010 0651 BE000000 		movl	$.LC85, %esi
 2010      00
 2011 0656 BF010000 		movl	$1, %edi
 2011      00
 2012 065b 31C0     		xorl	%eax, %eax
 2013 065d 44895424 		movl	%r10d, 104(%rsp)
 2013      68
 2014 0662 E8000000 		call	__printf_chk
 2014      00
 2015 0667 488BBC24 		movq	128(%rsp), %rdi
 2015      80000000 
 2016 066f 488D9424 		leaq	200(%rsp), %rdx
 2016      C8000000 
 2017 0677 4C89EE   		movq	%r13, %rsi
 2018 067a E8000000 		call	flFlashStandardFirmware
 2018      00
 2019 067f 448B5424 		movl	104(%rsp), %r10d
 2019      68
 2020              	.L228:
 2021 0684 85C0     		testl	%eax, %eax
 2022 0686 0F85CEFD 		jne	.L263
 2022      FFFF
 2023              	.L230:
 2024 068c 488B4424 		movq	8(%rsp), %rax
 2024      08
 2025 0691 83786000 		cmpl	$0, 96(%rax)
 2026 0695 0F850C02 		jne	.L446
 2026      0000
 2027              	.L226:
 2028 069b 488B4424 		movq	40(%rsp), %rax
 2028      28
 2029 06a0 83786000 		cmpl	$0, 96(%rax)
 2030 06a4 0F85A902 		jne	.L233
 2030      0000
 2031              	.L236:
 2032 06aa 488B4424 		movq	32(%rsp), %rax
 2032      20
 2033 06af BB010000 		movl	$1, %ebx
 2033      00
 2034 06b4 83786000 		cmpl	$0, 96(%rax)
 2035 06b8 740C     		je	.L235
 2036 06ba 488B4424 		movq	32(%rsp), %rax
 2036      20
 2037 06bf 488B4068 		movq	104(%rax), %rax
 2038 06c3 0FB618   		movzbl	(%rax), %ebx
 2039              	.L235:
 2040 06c6 488BBC24 		movq	128(%rsp), %rdi
 2040      80000000 
 2041 06ce 44895424 		movl	%r10d, 32(%rsp)
 2041      20
 2042 06d3 E8000000 		call	flIsNeroCapable
 2042      00
 2043 06d8 488BBC24 		movq	128(%rsp), %rdi
 2043      80000000 
 2044 06e0 84C0     		testb	%al, %al
 2045 06e2 0FB6C3   		movzbl	%bl, %eax
 2046 06e5 89C6     		movl	%eax, %esi
 2047 06e7 410F95C4 		setne	%r12b
 2048 06eb 89442408 		movl	%eax, 8(%rsp)
 2049 06ef E8000000 		call	flIsCommCapable
 2049      00
 2050 06f4 89C3     		movl	%eax, %ebx
 2051 06f6 488B4424 		movq	16(%rsp), %rax
 2051      10
 2052 06fb 448B5424 		movl	32(%rsp), %r10d
 2052      20
 2053 0700 83786000 		cmpl	$0, 96(%rax)
 2054 0704 0F857A02 		jne	.L447
 2054      0000
 2055              	.L237:
 2056 070a 488B4424 		movq	24(%rsp), %rax
 2056      18
 2057 070f 83786000 		cmpl	$0, 96(%rax)
 2058 0713 0F84BF00 		je	.L244
 2058      0000
 2059 0719 4584E4   		testb	%r12b, %r12b
 2060 071c 0F841804 		je	.L240
 2060      0000
 2061 0722 488BBC24 		movq	128(%rsp), %rdi
 2061      80000000 
 2062 072a 488D9424 		leaq	200(%rsp), %rdx
 2062      C8000000 
 2063 0732 31F6     		xorl	%esi, %esi
 2064 0734 44895424 		movl	%r10d, 16(%rsp)
 2064      10
 2065 0739 E8000000 		call	flSelectConduit
 2065      00
 2066 073e 85C0     		testl	%eax, %eax
 2067 0740 0F8514FD 		jne	.L263
 2067      FFFF
 2068 0746 488B4424 		movq	24(%rsp), %rax
 2068      18
 2069 074b 488DAC24 		leaq	224(%rsp), %rbp
 2069      E0000000 
 2070 0753 488BBC24 		movq	128(%rsp), %rdi
 2070      80000000 
 2071 075b 4C8D8C24 		leaq	200(%rsp), %r9
 2071      C8000000 
 2072 0763 488D5424 		leaq	112(%rsp), %rdx
 2072      70
 2073 0768 41B81000 		movl	$16, %r8d
 2073      0000
 2074 076e 4889E9   		movq	%rbp, %rcx
 2075 0771 488B4068 		movq	104(%rax), %rax
 2076 0775 488B30   		movq	(%rax), %rsi
 2077 0778 E8000000 		call	jtagScanChain
 2077      00
 2078 077d 85C0     		testl	%eax, %eax
 2079 077f 448B5424 		movl	16(%rsp), %r10d
 2079      10
 2080 0784 0F85D0FC 		jne	.L263
 2080      FFFF
 2081 078a 837C2470 		cmpl	$0, 112(%rsp)
 2081      00
 2082 078f 0F841D10 		je	.L241
 2082      0000
 2083 0795 4C89EA   		movq	%r13, %rdx
 2084 0798 BE000000 		movl	$.LC95, %esi
 2084      00
 2085 079d BF010000 		movl	$1, %edi
 2085      00
 2086 07a2 E8000000 		call	__printf_chk
 2086      00
 2087 07a7 448B5424 		movl	16(%rsp), %r10d
 2087      10
 2088 07ac 4531F6   		xorl	%r14d, %r14d
 2089 07af 4589D7   		movl	%r10d, %r15d
 2090 07b2 EB1A     		jmp	.L242
 2091              	.L243:
 2092 07b4 428B54B5 		movl	0(%rbp,%r14,4), %edx
 2092      00
 2093 07b9 BE000000 		movl	$.LC96, %esi
 2093      00
 2094 07be BF010000 		movl	$1, %edi
 2094      00
 2095 07c3 31C0     		xorl	%eax, %eax
 2096 07c5 4983C601 		addq	$1, %r14
 2097 07c9 E8000000 		call	__printf_chk
 2097      00
 2098              	.L242:
 2099 07ce 44397424 		cmpl	%r14d, 112(%rsp)
 2099      70
 2100 07d3 77DF     		ja	.L243
 2101 07d5 4589FA   		movl	%r15d, %r10d
 2102              	.L244:
 2103 07d8 488B4424 		movq	48(%rsp), %rax
 2103      30
 2104 07dd 83786000 		cmpl	$0, 96(%rax)
 2105 07e1 0F85BA03 		jne	.L448
 2105      0000
 2106              	.L245:
 2107 07e7 488B4424 		movq	80(%rsp), %rax
 2107      50
 2108 07ec 83786000 		cmpl	$0, 96(%rax)
 2109 07f0 7407     		je	.L247
 2110 07f2 C6050000 		movb	$1, enableBenchmarking(%rip)
 2110      000001
 2111              	.L247:
 2112 07f9 488B4424 		movq	56(%rsp), %rax
 2112      38
 2113 07fe 84DB     		testb	%bl, %bl
 2114 0800 0F95C3   		setne	%bl
 2115 0803 83786000 		cmpl	$0, 96(%rax)
 2116 0807 0F85E504 		jne	.L449
 2116      0000
 2117              	.L248:
 2118 080d 488B4424 		movq	64(%rsp), %rax
 2118      40
 2119 0812 83786000 		cmpl	$0, 96(%rax)
 2120 0816 0F859004 		jne	.L450
 2120      0000
 2121              	.L254:
 2122 081c 488B4424 		movq	72(%rsp), %rax
 2122      48
 2123 0821 4531FF   		xorl	%r15d, %r15d
 2124 0824 83786000 		cmpl	$0, 96(%rax)
 2125 0828 0F857B05 		jne	.L451
 2125      0000
 2126              	.L261:
 2127 082e 488B4424 		movq	96(%rsp), %rax
 2127      60
 2128 0833 44895424 		movl	%r10d, 8(%rsp)
 2128      08
 2129 0838 83786000 		cmpl	$0, 96(%rax)
 2130 083c 0F8FD203 		jg	.L452
 2130      0000
 2131 0842 31ED     		xorl	%ebp, %ebp
 2132 0844 E9B4FAFF 		jmp	.L211
 2132      FF
 2133              	.L217:
 2134 0849 488D9424 		leaq	200(%rsp), %rdx
 2134      C8000000 
 2135 0851 4C89EE   		movq	%r13, %rsi
 2136 0854 4889DF   		movq	%rbx, %rdi
 2137 0857 44895424 		movl	%r10d, 104(%rsp)
 2137      68
 2138 085c E8000000 		call	flLoadStandardFirmware
 2138      00
 2139 0861 448B5424 		movl	104(%rsp), %r10d
 2139      68
 2140 0866 E98FFCFF 		jmp	.L218
 2140      FF
 2141              	.L227:
 2142 086b BE000000 		movl	$.LC86, %esi
 2142      00
 2143 0870 BF010000 		movl	$1, %edi
 2143      00
 2144 0875 31C0     		xorl	%eax, %eax
 2145 0877 44895424 		movl	%r10d, 104(%rsp)
 2145      68
 2146 087c E8000000 		call	__printf_chk
 2146      00
 2147 0881 498B4768 		movq	104(%r15), %rax
 2148 0885 488BBC24 		movq	128(%rsp), %rdi
 2148      80000000 
 2149 088d 488D9424 		leaq	200(%rsp), %rdx
 2149      C8000000 
 2150 0895 488B30   		movq	(%rax), %rsi
 2151 0898 E8000000 		call	flFlashCustomFirmware
 2151      00
 2152 089d 448B5424 		movl	104(%rsp), %r10d
 2152      68
 2153 08a2 E9DDFDFF 		jmp	.L228
 2153      FF
 2154              	.L446:
 2155 08a7 488B4424 		movq	8(%rsp), %rax
 2155      08
 2156 08ac 488DB424 		leaq	224(%rsp), %rsi
 2156      E0000000 
 2157 08b4 31D2     		xorl	%edx, %edx
 2158 08b6 44895424 		movl	%r10d, 104(%rsp)
 2158      68
 2159 08bb 488B4068 		movq	104(%rax), %rax
 2160 08bf 488B38   		movq	(%rax), %rdi
 2161 08c2 E8000000 		call	strtoul
 2161      00
 2162 08c7 488B8C24 		movq	224(%rsp), %rcx
 2162      E0000000 
 2163 08cf 4889C3   		movq	%rax, %rbx
 2164 08d2 448B5424 		movl	104(%rsp), %r10d
 2164      68
 2165 08d7 80393A   		cmpb	$58, (%rcx)
 2166 08da 0F846702 		je	.L231
 2166      0000
 2167 08e0 B9000000 		movl	$.LC70, %ecx
 2167      00
 2168 08e5 BA000000 		movl	$.LC87, %edx
 2168      00
 2169              	.L443:
 2170 08ea 488B3D00 		movq	stderr(%rip), %rdi
 2170      000000
 2171 08f1 BE010000 		movl	$1, %esi
 2171      00
 2172 08f6 31C0     		xorl	%eax, %eax
 2173 08f8 BD0C0000 		movl	$12, %ebp
 2173      00
 2174 08fd E8000000 		call	__fprintf_chk
 2174      00
 2175              	.L256:
 2176 0902 4531FF   		xorl	%r15d, %r15d
 2177 0905 E9F3F9FF 		jmp	.L211
 2177      FF
 2178              	.L220:
 2179 090a 31C0     		xorl	%eax, %eax
 2180 090c BE000000 		movl	$.LC73, %esi
 2180      00
 2181 0911 BF010000 		movl	$1, %edi
 2181      00
 2182 0916 44896424 		movl	%r12d, 104(%rsp)
 2182      68
 2183 091b E8000000 		call	__printf_chk
 2183      00
 2184 0920 80BC24E0 		cmpb	$0, 224(%rsp)
 2184      00000000 
 2185 0928 448B5424 		movl	104(%rsp), %r10d
 2185      68
 2186 092d 0F856BFC 		jne	.L222
 2186      FFFF
 2187 0933 488B3D00 		movq	stderr(%rip), %rdi
 2187      000000
 2188 093a 4C89E9   		movq	%r13, %rcx
 2189 093d BA000000 		movl	$.LC81, %edx
 2189      00
 2190 0942 BE010000 		movl	$1, %esi
 2190      00
 2191 0947 31C0     		xorl	%eax, %eax
 2192 0949 E8000000 		call	__fprintf_chk
 2192      00
 2193 094e E907FBFF 		jmp	.L263
 2193      FF
 2194              	.L233:
 2195 0953 488BBC24 		movq	128(%rsp), %rdi
 2195      80000000 
 2196 095b 488DB424 		leaq	200(%rsp), %rsi
 2196      C8000000 
 2197 0963 44895424 		movl	%r10d, 8(%rsp)
 2197      08
 2198 0968 E8000000 		call	flResetToggle
 2198      00
 2199 096d 85C0     		testl	%eax, %eax
 2200 096f 448B5424 		movl	8(%rsp), %r10d
 2200      08
 2201 0974 0F85E0FA 		jne	.L263
 2201      FFFF
 2202 097a E92BFDFF 		jmp	.L236
 2202      FF
 2203              	.L444:
 2204 097f E8000000 		call	__stack_chk_fail
 2204      00
 2205              	.L447:
 2206 0984 BE000000 		movl	$.LC89, %esi
 2206      00
 2207 0989 BF010000 		movl	$1, %edi
 2207      00
 2208 098e 31C0     		xorl	%eax, %eax
 2209 0990 E8000000 		call	__printf_chk
 2209      00
 2210 0995 488B4424 		movq	16(%rsp), %rax
 2210      10
 2211 099a 488BBC24 		movq	128(%rsp), %rdi
 2211      80000000 
 2212 09a2 488D8C24 		leaq	200(%rsp), %rcx
 2212      C8000000 
 2213 09aa 488D9424 		leaq	224(%rsp), %rdx
 2213      E0000000 
 2214 09b2 488B4068 		movq	104(%rax), %rax
 2215 09b6 488B30   		movq	(%rax), %rsi
 2216 09b9 E8000000 		call	flMultiBitPortAccess
 2216      00
 2217 09be 85C0     		testl	%eax, %eax
 2218 09c0 448B5424 		movl	32(%rsp), %r10d
 2218      20
 2219 09c5 0F858FFA 		jne	.L263
 2219      FFFF
 2220 09cb 448B8424 		movl	224(%rsp), %r8d
 2220      E0000000 
 2221 09d3 488DBC24 		leaq	432(%rsp), %rdi
 2221      B0010000 
 2222 09db B9000000 		movl	$.LC90, %ecx
 2222      00
 2223 09e0 BA090000 		movl	$9, %edx
 2223      00
 2224 09e5 BE010000 		movl	$1, %esi
 2224      00
 2225 09ea 31C0     		xorl	%eax, %eax
 2226 09ec 44895424 		movl	%r10d, 16(%rsp)
 2226      10
 2227 09f1 E8000000 		call	__sprintf_chk
 2227      00
 2228 09f6 0FB68424 		movzbl	432(%rsp), %eax
 2228      B0010000 
 2229 09fe BE000000 		movl	$.LC91, %esi
 2229      00
 2230 0a03 BF010000 		movl	$1, %edi
 2230      00
 2231 0a08 83E830   		subl	$48, %eax
 2232 0a0b 4898     		cltq
 2233 0a0d 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2233      00000000 
 2234 0a15 31C0     		xorl	%eax, %eax
 2235 0a17 E8000000 		call	__printf_chk
 2235      00
 2236 0a1c 0FB68424 		movzbl	433(%rsp), %eax
 2236      B1010000 
 2237 0a24 BE000000 		movl	$.LC92, %esi
 2237      00
 2238 0a29 BF010000 		movl	$1, %edi
 2238      00
 2239 0a2e 83E830   		subl	$48, %eax
 2240 0a31 4898     		cltq
 2241 0a33 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2241      00000000 
 2242 0a3b 31C0     		xorl	%eax, %eax
 2243 0a3d E8000000 		call	__printf_chk
 2243      00
 2244 0a42 0FB68424 		movzbl	434(%rsp), %eax
 2244      B2010000 
 2245 0a4a BE000000 		movl	$.LC92, %esi
 2245      00
 2246 0a4f BF010000 		movl	$1, %edi
 2246      00
 2247 0a54 83E830   		subl	$48, %eax
 2248 0a57 4898     		cltq
 2249 0a59 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2249      00000000 
 2250 0a61 31C0     		xorl	%eax, %eax
 2251 0a63 E8000000 		call	__printf_chk
 2251      00
 2252 0a68 0FB68424 		movzbl	435(%rsp), %eax
 2252      B3010000 
 2253 0a70 BE000000 		movl	$.LC92, %esi
 2253      00
 2254 0a75 BF010000 		movl	$1, %edi
 2254      00
 2255 0a7a 83E830   		subl	$48, %eax
 2256 0a7d 4898     		cltq
 2257 0a7f 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2257      00000000 
 2258 0a87 31C0     		xorl	%eax, %eax
 2259 0a89 E8000000 		call	__printf_chk
 2259      00
 2260 0a8e 0FB68424 		movzbl	436(%rsp), %eax
 2260      B4010000 
 2261 0a96 BE000000 		movl	$.LC93, %esi
 2261      00
 2262 0a9b BF010000 		movl	$1, %edi
 2262      00
 2263 0aa0 83E830   		subl	$48, %eax
 2264 0aa3 4898     		cltq
 2265 0aa5 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2265      00000000 
 2266 0aad 31C0     		xorl	%eax, %eax
 2267 0aaf E8000000 		call	__printf_chk
 2267      00
 2268 0ab4 0FB68424 		movzbl	437(%rsp), %eax
 2268      B5010000 
 2269 0abc BE000000 		movl	$.LC92, %esi
 2269      00
 2270 0ac1 BF010000 		movl	$1, %edi
 2270      00
 2271 0ac6 83E830   		subl	$48, %eax
 2272 0ac9 4898     		cltq
 2273 0acb 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2273      00000000 
 2274 0ad3 31C0     		xorl	%eax, %eax
 2275 0ad5 E8000000 		call	__printf_chk
 2275      00
 2276 0ada 0FB68424 		movzbl	438(%rsp), %eax
 2276      B6010000 
 2277 0ae2 BE000000 		movl	$.LC92, %esi
 2277      00
 2278 0ae7 BF010000 		movl	$1, %edi
 2278      00
 2279 0aec 83E830   		subl	$48, %eax
 2280 0aef 4898     		cltq
 2281 0af1 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2281      00000000 
 2282 0af9 31C0     		xorl	%eax, %eax
 2283 0afb E8000000 		call	__printf_chk
 2283      00
 2284 0b00 0FB68424 		movzbl	439(%rsp), %eax
 2284      B7010000 
 2285 0b08 BE000000 		movl	$.LC94, %esi
 2285      00
 2286 0b0d BF010000 		movl	$1, %edi
 2286      00
 2287 0b12 83E830   		subl	$48, %eax
 2288 0b15 4898     		cltq
 2289 0b17 488B14C5 		movq	nibbles(,%rax,8), %rdx
 2289      00000000 
 2290 0b1f 31C0     		xorl	%eax, %eax
 2291 0b21 E8000000 		call	__printf_chk
 2291      00
 2292 0b26 BF640000 		movl	$100, %edi
 2292      00
 2293 0b2b E8000000 		call	flSleep
 2293      00
 2294 0b30 448B5424 		movl	16(%rsp), %r10d
 2294      10
 2295 0b35 E9D0FBFF 		jmp	.L237
 2295      FF
 2296              	.L240:
 2297 0b3a 4C89E9   		movq	%r13, %rcx
 2298 0b3d BA000000 		movl	$.LC98, %edx
 2298      00
 2299 0b42 E9D6F8FF 		jmp	.L441
 2299      FF
 2300              	.L231:
 2301 0b47 4883C101 		addq	$1, %rcx
 2302 0b4b 89C2     		movl	%eax, %edx
 2303 0b4d BE000000 		movl	$.LC88, %esi
 2303      00
 2304 0b52 BF010000 		movl	$1, %edi
 2304      00
 2305 0b57 31C0     		xorl	%eax, %eax
 2306 0b59 44895424 		movl	%r10d, 8(%rsp)
 2306      08
 2307 0b5e 48898C24 		movq	%rcx, 224(%rsp)
 2307      E0000000 
 2308 0b66 E8000000 		call	__printf_chk
 2308      00
 2309 0b6b 488B9424 		movq	224(%rsp), %rdx
 2309      E0000000 
 2310 0b73 488BBC24 		movq	128(%rsp), %rdi
 2310      80000000 
 2311 0b7b 488D8C24 		leaq	200(%rsp), %rcx
 2311      C8000000 
 2312 0b83 89DE     		movl	%ebx, %esi
 2313 0b85 E8000000 		call	flSaveFirmware
 2313      00
 2314 0b8a 85C0     		testl	%eax, %eax
 2315 0b8c 448B5424 		movl	8(%rsp), %r10d
 2315      08
 2316 0b91 0F8404FB 		je	.L226
 2316      FFFF
 2317              	.L258:
 2318 0b97 BD010000 		movl	$1, %ebp
 2318      00
 2319 0b9c E961FDFF 		jmp	.L256
 2319      FF
 2320              	.L448:
 2321 0ba1 31C0     		xorl	%eax, %eax
 2322 0ba3 BE000000 		movl	$.LC99, %esi
 2322      00
 2323 0ba8 BF010000 		movl	$1, %edi
 2323      00
 2324 0bad 44895424 		movl	%r10d, 16(%rsp)
 2324      10
 2325 0bb2 E8000000 		call	__printf_chk
 2325      00
 2326 0bb7 4584E4   		testb	%r12b, %r12b
 2327 0bba 0F84DC01 		je	.L246
 2327      0000
 2328 0bc0 488BBC24 		movq	128(%rsp), %rdi
 2328      80000000 
 2329 0bc8 488D9424 		leaq	200(%rsp), %rdx
 2329      C8000000 
 2330 0bd0 31F6     		xorl	%esi, %esi
 2331 0bd2 E8000000 		call	flSelectConduit
 2331      00
 2332 0bd7 85C0     		testl	%eax, %eax
 2333 0bd9 0F857BF8 		jne	.L263
 2333      FFFF
 2334 0bdf 488B4424 		movq	48(%rsp), %rax
 2334      30
 2335 0be4 488BBC24 		movq	128(%rsp), %rdi
 2335      80000000 
 2336 0bec 488D8C24 		leaq	200(%rsp), %rcx
 2336      C8000000 
 2337 0bf4 31D2     		xorl	%edx, %edx
 2338 0bf6 488B4068 		movq	104(%rax), %rax
 2339 0bfa 488B30   		movq	(%rax), %rsi
 2340 0bfd E8000000 		call	flProgram
 2340      00
 2341 0c02 85C0     		testl	%eax, %eax
 2342 0c04 448B5424 		movl	16(%rsp), %r10d
 2342      10
 2343 0c09 0F854BF8 		jne	.L263
 2343      FFFF
 2344 0c0f E9D3FBFF 		jmp	.L245
 2344      FF
 2345              	.L452:
 2346 0c14 488DBC24 		leaq	432(%rsp), %rdi
 2346      B0010000 
 2347 0c1c BE000000 		movl	$.LC111, %esi
 2347      00
 2348 0c21 B9690000 		movl	$105, %ecx
 2348      00
 2349 0c26 F3A4     		rep movsb
 2350 0c28 488DBC24 		leaq	432(%rsp), %rdi
 2350      B0010000 
 2351 0c30 BE000000 		movl	$.LC112, %esi
 2351      00
 2352 0c35 E8000000 		call	fopen
 2352      00
 2353 0c3a 4885C0   		testq	%rax, %rax
 2354 0c3d 4889C3   		movq	%rax, %rbx
 2355 0c40 0F84510B 		je	.L453
 2355      0000
 2356 0c46 BF640000 		movl	$100, %edi
 2356      00
 2357 0c4b 48C78424 		movq	$100, 144(%rsp)
 2357      90000000 
 2357      64000000 
 2358 0c57 E8000000 		call	malloc
 2358      00
 2359 0c5c 48898424 		movq	%rax, 160(%rsp)
 2359      A0000000 
 2360 0c64 EB07     		jmp	.L271
 2361              	.L272:
 2362 0c66 83050000 		addl	$1, numLines(%rip)
 2362      000001
 2363              	.L271:
 2364 0c6d 488DB424 		leaq	144(%rsp), %rsi
 2364      90000000 
 2365 0c75 488DBC24 		leaq	160(%rsp), %rdi
 2365      A0000000 
 2366 0c7d 4889D9   		movq	%rbx, %rcx
 2367 0c80 BA0A0000 		movl	$10, %edx
 2367      00
 2368 0c85 E8000000 		call	__getdelim
 2368      00
 2369 0c8a 4883C001 		addq	$1, %rax
 2370 0c8e 0F842602 		je	.L454
 2370      0000
 2371 0c94 833D0000 		cmpl	$0, numLines(%rip)
 2371      000000
 2372 0c9b 74C9     		je	.L272
 2373 0c9d 488BBC24 		movq	160(%rsp), %rdi
 2373      A0000000 
 2374 0ca5 E8000000 		call	format
 2374      00
 2375 0caa EBBA     		jmp	.L272
 2376              	.L450:
 2377 0cac 488B4068 		movq	104(%rax), %rax
 2378 0cb0 488DB424 		leaq	192(%rsp), %rsi
 2378      C0000000 
 2379 0cb8 BA0A0000 		movl	$10, %edx
 2379      00
 2380 0cbd 44895424 		movl	%r10d, 16(%rsp)
 2380      10
 2381 0cc2 488B38   		movq	(%rax), %rdi
 2382 0cc5 E8000000 		call	strtoul
 2382      00
 2383 0cca 488B8C24 		movq	192(%rsp), %rcx
 2383      C0000000 
 2384 0cd2 4989C4   		movq	%rax, %r12
 2385 0cd5 448B5424 		movl	16(%rsp), %r10d
 2385      10
 2386 0cda 80393A   		cmpb	$58, (%rcx)
 2387 0cdd 0F84F20A 		je	.L255
 2387      0000
 2388 0ce3 B9000000 		movl	$.LC70, %ecx
 2388      00
 2389 0ce8 BA000000 		movl	$.LC104, %edx
 2389      00
 2390 0ced E9F8FBFF 		jmp	.L443
 2390      FF
 2391              	.L449:
 2392 0cf2 31C0     		xorl	%eax, %eax
 2393 0cf4 4C89EA   		movq	%r13, %rdx
 2394 0cf7 BE000000 		movl	$.LC101, %esi
 2394      00
 2395 0cfc BF010000 		movl	$1, %edi
 2395      00
 2396 0d01 44895424 		movl	%r10d, 16(%rsp)
 2396      10
 2397 0d06 E8000000 		call	__printf_chk
 2397      00
 2398 0d0b 84DB     		testb	%bl, %bl
 2399 0d0d 0F847501 		je	.L249
 2399      0000
 2400 0d13 8B742408 		movl	8(%rsp), %esi
 2401 0d17 488BBC24 		movq	128(%rsp), %rdi
 2401      80000000 
 2402 0d1f 488D9424 		leaq	200(%rsp), %rdx
 2402      C8000000 
 2403 0d27 E8000000 		call	flSelectConduit
 2403      00
 2404 0d2c 85C0     		testl	%eax, %eax
 2405 0d2e 0F8563FE 		jne	.L258
 2405      FFFF
 2406 0d34 488BBC24 		movq	128(%rsp), %rdi
 2406      80000000 
 2407 0d3c 488D9424 		leaq	200(%rsp), %rdx
 2407      C8000000 
 2408 0d44 488DB424 		leaq	208(%rsp), %rsi
 2408      D0000000 
 2409 0d4c E8000000 		call	flIsFPGARunning
 2409      00
 2410 0d51 85C0     		testl	%eax, %eax
 2411 0d53 0F853EFE 		jne	.L258
 2411      FFFF
 2412 0d59 80BC24D0 		cmpb	$0, 208(%rsp)
 2412      00000000 
 2413 0d61 0F84190C 		je	.L251
 2413      0000
 2414 0d67 488B4424 		movq	56(%rsp), %rax
 2414      38
 2415 0d6c 488BBC24 		movq	128(%rsp), %rdi
 2415      80000000 
 2416 0d74 488D9424 		leaq	200(%rsp), %rdx
 2416      C8000000 
 2417 0d7c 488B4068 		movq	104(%rax), %rax
 2418 0d80 488B30   		movq	(%rax), %rsi
 2419 0d83 E8000000 		call	parseLine
 2419      00
 2420 0d88 85C0     		testl	%eax, %eax
 2421 0d8a 89C5     		movl	%eax, %ebp
 2422 0d8c 448B5424 		movl	16(%rsp), %r10d
 2422      10
 2423 0d91 0F856BFB 		jne	.L256
 2423      FFFF
 2424 0d97 E971FAFF 		jmp	.L248
 2424      FF
 2425              	.L246:
 2426 0d9c 4C89E9   		movq	%r13, %rcx
 2427 0d9f BA000000 		movl	$.LC100, %edx
 2427      00
 2428 0da4 E974F6FF 		jmp	.L441
 2428      FF
 2429              	.L451:
 2430 0da9 31C0     		xorl	%eax, %eax
 2431 0dab BE000000 		movl	$.LC107, %esi
 2431      00
 2432 0db0 BF010000 		movl	$1, %edi
 2432      00
 2433 0db5 44895424 		movl	%r10d, 16(%rsp)
 2433      10
 2434 0dba E8000000 		call	__printf_chk
 2434      00
 2435 0dbf 84DB     		testb	%bl, %bl
 2436 0dc1 0F84CE00 		je	.L262
 2436      0000
 2437 0dc7 8B742408 		movl	8(%rsp), %esi
 2438 0dcb 488BBC24 		movq	128(%rsp), %rdi
 2438      80000000 
 2439 0dd3 488D9424 		leaq	200(%rsp), %rdx
 2439      C8000000 
 2440 0ddb E8000000 		call	flSelectConduit
 2440      00
 2441 0de0 85C0     		testl	%eax, %eax
 2442 0de2 448B5424 		movl	16(%rsp), %r10d
 2442      10
 2443 0de7 0F856DF6 		jne	.L263
 2443      FFFF
 2444 0ded 488BBC24 		movq	128(%rsp), %rdi
 2444      80000000 
 2445 0df5 488D9424 		leaq	200(%rsp), %rdx
 2445      C8000000 
 2446 0dfd 488DB424 		leaq	208(%rsp), %rsi
 2446      D0000000 
 2447 0e05 44895424 		movl	%r10d, 8(%rsp)
 2447      08
 2448 0e0a E8000000 		call	flIsFPGARunning
 2448      00
 2449 0e0f 85C0     		testl	%eax, %eax
 2450 0e11 448B5424 		movl	8(%rsp), %r10d
 2450      08
 2451 0e16 0F853EF6 		jne	.L263
 2451      FFFF
 2452 0e1c 80BC24D0 		cmpb	$0, 208(%rsp)
 2452      00000000 
 2453 0e24 0F846009 		je	.L264
 2453      0000
 2454 0e2a 4489D3   		movl	%r10d, %ebx
 2455              	.L265:
 2456 0e2d BF000000 		movl	$.LC108, %edi
 2456      00
 2457 0e32 E8000000 		call	readline
 2457      00
 2458 0e37 4885C0   		testq	%rax, %rax
 2459 0e3a 4989C7   		movq	%rax, %r15
 2460 0e3d 7441     		je	.L426
 2461 0e3f 0FB600   		movzbl	(%rax), %eax
 2462 0e42 84C0     		testb	%al, %al
 2463 0e44 74E7     		je	.L265
 2464 0e46 3C71     		cmpb	$113, %al
 2465 0e48 7436     		je	.L426
 2466 0e4a 4C89FF   		movq	%r15, %rdi
 2467 0e4d E8000000 		call	add_history
 2467      00
 2468 0e52 488BBC24 		movq	128(%rsp), %rdi
 2468      80000000 
 2469 0e5a 488D9424 		leaq	200(%rsp), %rdx
 2469      C8000000 
 2470 0e62 4C89FE   		movq	%r15, %rsi
 2471 0e65 E8000000 		call	parseLine
 2471      00
 2472 0e6a 85C0     		testl	%eax, %eax
 2473 0e6c 0F85250B 		jne	.L427
 2473      0000
 2474 0e72 4C89FF   		movq	%r15, %rdi
 2475 0e75 E8000000 		call	free
 2475      00
 2476 0e7a 41803F71 		cmpb	$113, (%r15)
 2477 0e7e 75AD     		jne	.L265
 2478              	.L426:
 2479 0e80 4189DA   		movl	%ebx, %r10d
 2480 0e83 E9A6F9FF 		jmp	.L261
 2480      FF
 2481              	.L249:
 2482 0e88 4C89E9   		movq	%r13, %rcx
 2483 0e8b BA000000 		movl	$.LC103, %edx
 2483      00
 2484 0e90 E988F5FF 		jmp	.L441
 2484      FF
 2485              	.L262:
 2486 0e95 4C89E9   		movq	%r13, %rcx
 2487 0e98 BA000000 		movl	$.LC110, %edx
 2487      00
 2488              	.L442:
 2489 0e9d 488B3D00 		movq	stderr(%rip), %rdi
 2489      000000
 2490 0ea4 BE010000 		movl	$1, %esi
 2490      00
 2491 0ea9 31C0     		xorl	%eax, %eax
 2492 0eab BD0C0000 		movl	$12, %ebp
 2492      00
 2493 0eb0 E8000000 		call	__fprintf_chk
 2493      00
 2494 0eb5 E943F4FF 		jmp	.L211
 2494      FF
 2495              	.L454:
 2496 0eba 488BBC24 		movq	160(%rsp), %rdi
 2496      A0000000 
 2497 0ec2 832D0000 		subl	$1, numLines(%rip)
 2497      000001
 2498 0ec9 E8000000 		call	free
 2498      00
 2499 0ece 4889DF   		movq	%rbx, %rdi
 2500 0ed1 E8000000 		call	fclose
 2500      00
 2501 0ed6 4C897C24 		movq	%r15, 8(%rsp)
 2501      08
 2502              	.L355:
 2503 0edb BF010000 		movl	$1, %edi
 2503      00
 2504 0ee0 E8000000 		call	malloc
 2504      00
 2505 0ee5 488BBC24 		movq	128(%rsp), %rdi
 2505      80000000 
 2506 0eed 4C8D8424 		leaq	200(%rsp), %r8
 2506      C8000000 
 2507 0ef5 31F6     		xorl	%esi, %esi
 2508 0ef7 4889C1   		movq	%rax, %rcx
 2509 0efa BA010000 		movl	$1, %edx
 2509      00
 2510 0eff 4889C3   		movq	%rax, %rbx
 2511 0f02 E8000000 		call	flReadChannel
 2511      00
 2512 0f07 85C0     		testl	%eax, %eax
 2513 0f09 0F858203 		jne	.L439
 2513      0000
 2514 0f0f 0FB613   		movzbl	(%rbx), %edx
 2515 0f12 BE000000 		movl	$.LC114, %esi
 2515      00
 2516 0f17 BF010000 		movl	$1, %edi
 2516      00
 2517 0f1c E8000000 		call	__printf_chk
 2517      00
 2518 0f21 440FB623 		movzbl	(%rbx), %r12d
 2519 0f25 418D4424 		leal	-1(%r12), %eax
 2519      FF
 2520 0f2a 3C01     		cmpb	$1, %al
 2521 0f2c 760C     		jbe	.L455
 2522              	.L353:
 2523 0f2e BFE80300 		movl	$1000, %edi
 2523      00
 2524 0f33 E8000000 		call	flSleep
 2524      00
 2525 0f38 EBA1     		jmp	.L355
 2526              	.L455:
 2527 0f3a BD020000 		movl	$2, %ebp
 2527      00
 2528              	.L277:
 2529 0f3f BFE80300 		movl	$1000, %edi
 2529      00
 2530 0f44 E8000000 		call	flSleep
 2530      00
 2531 0f49 488BBC24 		movq	128(%rsp), %rdi
 2531      80000000 
 2532 0f51 4C8D8424 		leaq	200(%rsp), %r8
 2532      C8000000 
 2533 0f59 31F6     		xorl	%esi, %esi
 2534 0f5b 4889D9   		movq	%rbx, %rcx
 2535 0f5e BA010000 		movl	$1, %edx
 2535      00
 2536 0f63 E8000000 		call	flReadChannel
 2536      00
 2537 0f68 85C0     		testl	%eax, %eax
 2538 0f6a 0F852103 		jne	.L439
 2538      0000
 2539 0f70 0FB613   		movzbl	(%rbx), %edx
 2540 0f73 BE000000 		movl	$.LC114, %esi
 2540      00
 2541 0f78 BF010000 		movl	$1, %edi
 2541      00
 2542 0f7d E8000000 		call	__printf_chk
 2542      00
 2543 0f82 443A23   		cmpb	(%rbx), %r12b
 2544 0f85 75A7     		jne	.L353
 2545 0f87 4080ED01 		subb	$1, %bpl
 2546 0f8b 75B2     		jne	.L277
 2547 0f8d C78424B0 		movl	$0, 176(%rsp)
 2547      00000000 
 2547      000000
 2548 0f98 C78424B4 		movl	$0, 180(%rsp)
 2548      00000000 
 2548      000000
 2549 0fa3 BD010000 		movl	$1, %ebp
 2549      00
 2550              	.L357:
 2551 0fa8 BF010000 		movl	$1, %edi
 2551      00
 2552 0fad E8000000 		call	malloc
 2552      00
 2553 0fb2 488BBC24 		movq	128(%rsp), %rdi
 2553      80000000 
 2554 0fba 4C8D8424 		leaq	200(%rsp), %r8
 2554      C8000000 
 2555 0fc2 4889C1   		movq	%rax, %rcx
 2556 0fc5 BA010000 		movl	$1, %edx
 2556      00
 2557 0fca 89EE     		movl	%ebp, %esi
 2558 0fcc 4989C4   		movq	%rax, %r12
 2559 0fcf E8000000 		call	flReadChannel
 2559      00
 2560 0fd4 85C0     		testl	%eax, %eax
 2561 0fd6 0F85B502 		jne	.L439
 2561      0000
 2562 0fdc 410FB60C 		movzbl	(%r12), %ecx
 2562      24
 2563 0fe1 89EA     		movl	%ebp, %edx
 2564 0fe3 BE000000 		movl	$.LC115, %esi
 2564      00
 2565 0fe8 BF010000 		movl	$1, %edi
 2565      00
 2566 0fed E8000000 		call	__printf_chk
 2566      00
 2567 0ff2 83FD04   		cmpl	$4, %ebp
 2568 0ff5 410FB604 		movzbl	(%r12), %eax
 2568      24
 2569 0ffa 0F87BA00 		ja	.L279
 2569      0000
 2570 1000 8D4DFF   		leal	-1(%rbp), %ecx
 2571 1003 D3E0     		sall	%cl, %eax
 2572 1005 018424B0 		addl	%eax, 176(%rsp)
 2572      000000
 2573              	.L280:
 2574 100c 83C501   		addl	$1, %ebp
 2575 100f 83FD09   		cmpl	$9, %ebp
 2576 1012 7594     		jne	.L357
 2577 1014 488DB424 		leaq	208(%rsp), %rsi
 2577      D0000000 
 2578 101c 488DBC24 		leaq	176(%rsp), %rdi
 2578      B0000000 
 2579 1024 4531E4   		xorl	%r12d, %r12d
 2580 1027 660F6F05 		movdqa	.LC116(%rip), %xmm0
 2580      00000000 
 2581 102f 4531ED   		xorl	%r13d, %r13d
 2582 1032 4531F6   		xorl	%r14d, %r14d
 2583 1035 31ED     		xorl	%ebp, %ebp
 2584 1037 660F7F84 		movdqa	%xmm0, 208(%rsp)
 2584      24D00000 
 2584      00
 2585 1040 E8000000 		call	decrypt
 2585      00
 2586 1045 31D2     		xorl	%edx, %edx
 2587 1047 B8010000 		movl	$1, %eax
 2587      00
 2588 104c BE010000 		movl	$1, %esi
 2588      00
 2589 1051 8BBC24B0 		movl	176(%rsp), %edi
 2589      000000
 2590 1058 EB23     		jmp	.L287
 2591              	.L458:
 2592 105a 4189F3   		movl	%esi, %r11d
 2593 105d 89D1     		movl	%edx, %ecx
 2594 105f 41D3E3   		sall	%cl, %r11d
 2595 1062 4485DF   		testl	%r11d, %edi
 2596 1065 740C     		je	.L283
 2597 1067 8D4AF8   		leal	-8(%rdx), %ecx
 2598 106a 4189F3   		movl	%esi, %r11d
 2599 106d 41D3E3   		sall	%cl, %r11d
 2600 1070 4501DE   		addl	%r11d, %r14d
 2601              	.L283:
 2602 1073 83C001   		addl	$1, %eax
 2603 1076 83C201   		addl	$1, %edx
 2604 1079 3C21     		cmpb	$33, %al
 2605 107b 7469     		je	.L456
 2606              	.L287:
 2607 107d 3C08     		cmpb	$8, %al
 2608 107f 7623     		jbe	.L457
 2609 1081 3C10     		cmpb	$16, %al
 2610 1083 76D5     		jbe	.L458
 2611 1085 3C18     		cmpb	$24, %al
 2612              		.p2align 4,,5
 2613 1087 7742     		ja	.L285
 2614 1089 4189F3   		movl	%esi, %r11d
 2615 108c 89D1     		movl	%edx, %ecx
 2616 108e 41D3E3   		sall	%cl, %r11d
 2617 1091 4485DF   		testl	%r11d, %edi
 2618 1094 74DD     		je	.L283
 2619 1096 8D4AF0   		leal	-16(%rdx), %ecx
 2620 1099 4189F3   		movl	%esi, %r11d
 2621 109c 41D3E3   		sall	%cl, %r11d
 2622 109f 4501DD   		addl	%r11d, %r13d
 2623 10a2 EBCF     		jmp	.L283
 2624              	.L457:
 2625 10a4 4189F3   		movl	%esi, %r11d
 2626 10a7 89D1     		movl	%edx, %ecx
 2627 10a9 41D3E3   		sall	%cl, %r11d
 2628 10ac 468D441D 		leal	0(%rbp,%r11), %r8d
 2628      00
 2629 10b1 4185FB   		testl	%edi, %r11d
 2630 10b4 410F45E8 		cmovne	%r8d, %ebp
 2631 10b8 EBB9     		jmp	.L283
 2632              	.L279:
 2633 10ba 8D4DFB   		leal	-5(%rbp), %ecx
 2634 10bd D3E0     		sall	%cl, %eax
 2635 10bf 018424B4 		addl	%eax, 180(%rsp)
 2635      000000
 2636 10c6 E941FFFF 		jmp	.L280
 2636      FF
 2637              	.L285:
 2638 10cb 4189F1   		movl	%esi, %r9d
 2639 10ce 89D1     		movl	%edx, %ecx
 2640 10d0 41D3E1   		sall	%cl, %r9d
 2641 10d3 4485CF   		testl	%r9d, %edi
 2642 10d6 749B     		je	.L283
 2643 10d8 8D4AE8   		leal	-24(%rdx), %ecx
 2644 10db 4189F3   		movl	%esi, %r11d
 2645 10de 41D3E3   		sall	%cl, %r11d
 2646 10e1 4501DC   		addl	%r11d, %r12d
 2647 10e4 EB8D     		jmp	.L283
 2648              	.L456:
 2649 10e6 448B8C24 		movl	180(%rsp), %r9d
 2649      B4000000 
 2650 10ee 31C0     		xorl	%eax, %eax
 2651 10f0 31FF     		xorl	%edi, %edi
 2652 10f2 4531FF   		xorl	%r15d, %r15d
 2653 10f5 41B80100 		movl	$1, %r8d
 2653      0000
 2654 10fb EB13     		jmp	.L291
 2655              	.L460:
 2656 10fd D3E2     		sall	%cl, %edx
 2657 10ff 8D0C17   		leal	(%rdi,%rdx), %ecx
 2658 1102 4485CA   		testl	%r9d, %edx
 2659 1105 0F45F9   		cmovne	%ecx, %edi
 2660              	.L289:
 2661 1108 83C001   		addl	$1, %eax
 2662 110b 83F820   		cmpl	$32, %eax
 2663 110e 7422     		je	.L459
 2664              	.L291:
 2665 1110 8D5001   		leal	1(%rax), %edx
 2666 1113 89C1     		movl	%eax, %ecx
 2667 1115 6683FA10 		cmpw	$16, %dx
 2668 1119 4489C2   		movl	%r8d, %edx
 2669 111c 76DF     		jbe	.L460
 2670 111e D3E2     		sall	%cl, %edx
 2671 1120 4185D1   		testl	%edx, %r9d
 2672 1123 74E3     		je	.L289
 2673 1125 8D48F0   		leal	-16(%rax), %ecx
 2674 1128 4489C2   		movl	%r8d, %edx
 2675 112b D3E2     		sall	%cl, %edx
 2676 112d 4101D7   		addl	%edx, %r15d
 2677 1130 EBD6     		jmp	.L289
 2678              	.L459:
 2679 1132 31C0     		xorl	%eax, %eax
 2680 1134 31D2     		xorl	%edx, %edx
 2681 1136 0FB7FF   		movzwl	%di, %edi
 2682 1139 41B90100 		movl	$1, %r9d
 2682      0000
 2683              	.L293:
 2684 113f 8D480B   		leal	11(%rax), %ecx
 2685 1142 4489CE   		movl	%r9d, %esi
 2686 1145 83E10F   		andl	$15, %ecx
 2687 1148 D3E6     		sall	%cl, %esi
 2688 114a 89C1     		movl	%eax, %ecx
 2689 114c 448D0432 		leal	(%rdx,%rsi), %r8d
 2690 1150 89FE     		movl	%edi, %esi
 2691 1152 D3FE     		sarl	%cl, %esi
 2692 1154 89F1     		movl	%esi, %ecx
 2693 1156 80E101   		andb	$1, %cl
 2694 1159 410F45D0 		cmovne	%r8d, %edx
 2695 115d 4883C001 		addq	$1, %rax
 2696 1161 4883F810 		cmpq	$16, %rax
 2697 1165 75D8     		jne	.L293
 2698 1167 BF010000 		movl	$1, %edi
 2698      00
 2699 116c 89542410 		movl	%edx, 16(%rsp)
 2700 1170 E8000000 		call	malloc
 2700      00
 2701 1175 448B0500 		movl	numLines(%rip), %r8d
 2701      000000
 2702 117c 4889C1   		movq	%rax, %rcx
 2703 117f BF000000 		movl	$dataFromCSV+20, %edi
 2703      00
 2704 1184 B8010000 		movl	$1, %eax
 2704      00
 2705 1189 8B542410 		movl	16(%rsp), %edx
 2706 118d EB07     		jmp	.L294
 2707              	.L295:
 2708 118f 83C001   		addl	$1, %eax
 2709 1192 4883C710 		addq	$16, %rdi
 2710              	.L294:
 2711 1196 4439C0   		cmpl	%r8d, %eax
 2712 1199 0F8F0101 		jg	.L461
 2712      0000
 2713 119f 66443B7F 		cmpw	-4(%rdi), %r15w
 2713      FC
 2714 11a4 75E9     		jne	.L295
 2715 11a6 663B17   		cmpw	(%rdi), %dx
 2716 11a9 75E4     		jne	.L295
 2717 11ab 4C63F8   		movslq	%eax, %r15
 2718 11ae 48894C24 		movq	%rcx, 32(%rsp)
 2718      20
 2719 11b3 BE000000 		movl	$.LC117, %esi
 2719      00
 2720 11b8 4C89F8   		movq	%r15, %rax
 2721 11bb BF010000 		movl	$1, %edi
 2721      00
 2722 11c0 48C1E004 		salq	$4, %rax
 2723 11c4 8B880000 		movl	dataFromCSV+8(%rax), %ecx
 2723      0000
 2724 11ca 8B800000 		movl	dataFromCSV+12(%rax), %eax
 2724      0000
 2725 11d0 89442418 		movl	%eax, 24(%rsp)
 2726 11d4 31C0     		xorl	%eax, %eax
 2727 11d6 894C2410 		movl	%ecx, 16(%rsp)
 2728 11da E8000000 		call	__printf_chk
 2728      00
 2729 11df 837C2410 		cmpl	$1, 16(%rsp)
 2729      01
 2730 11e4 488B4C24 		movq	32(%rsp), %rcx
 2730      20
 2731 11e9 0F849C01 		je	.L462
 2731      0000
 2732 11ef 440FB6CD 		movzbl	%bpl, %r9d
 2733 11f3 450FB6F6 		movzbl	%r14b, %r14d
 2734 11f7 450FB6ED 		movzbl	%r13b, %r13d
 2735 11fb 4169C6F4 		imull	$500, %r14d, %eax
 2735      010000
 2736 1202 450FB6E4 		movzbl	%r12b, %r12d
 2737 1206 416BE964 		imull	$100, %r9d, %ebp
 2738 120a 01C5     		addl	%eax, %ebp
 2739 120c 4169C5E8 		imull	$1000, %r13d, %eax
 2739      030000
 2740 1213 01C5     		addl	%eax, %ebp
 2741 1215 4169C4D0 		imull	$2000, %r12d, %eax
 2741      070000
 2742 121c 01C5     		addl	%eax, %ebp
 2743 121e 396C2418 		cmpl	%ebp, 24(%rsp)
 2744 1222 0F8DE000 		jge	.L463
 2744      0000
 2745 1228 488BBC24 		movq	128(%rsp), %rdi
 2745      80000000 
 2746 1230 4C8D8424 		leaq	200(%rsp), %r8
 2746      C8000000 
 2747 1238 C60102   		movb	$2, (%rcx)
 2748 123b BA010000 		movl	$1, %edx
 2748      00
 2749 1240 BE090000 		movl	$9, %esi
 2749      00
 2750 1245 E8000000 		call	flWriteChannel
 2750      00
 2751 124a 85C0     		testl	%eax, %eax
 2752 124c 7543     		jne	.L439
 2753 124e BB0A0000 		movl	$10, %ebx
 2753      00
 2754 1253 EB0C     		jmp	.L360
 2755              	.L464:
 2756 1255 83C301   		addl	$1, %ebx
 2757 1258 83FB12   		cmpl	$18, %ebx
 2758 125b 0F84CDFC 		je	.L353
 2758      FFFF
 2759              	.L360:
 2760 1261 488BBC24 		movq	128(%rsp), %rdi
 2760      80000000 
 2761 1269 4C8D8424 		leaq	200(%rsp), %r8
 2761      C8000000 
 2762 1271 488D8C24 		leaq	208(%rsp), %rcx
 2762      D0000000 
 2763 1279 BA010000 		movl	$1, %edx
 2763      00
 2764 127e 89DE     		movl	%ebx, %esi
 2765 1280 C68424D0 		movb	$0, 208(%rsp)
 2765      00000000 
 2766 1288 E8000000 		call	flWriteChannel
 2766      00
 2767 128d 85C0     		testl	%eax, %eax
 2768 128f 74C4     		je	.L464
 2769              	.L439:
 2770 1291 4C8B7C24 		movq	8(%rsp), %r15
 2770      08
 2771 1296 BD010000 		movl	$1, %ebp
 2771      00
 2772 129b E95DF0FF 		jmp	.L211
 2772      FF
 2773              	.L461:
 2774 12a0 488BBC24 		movq	128(%rsp), %rdi
 2774      80000000 
 2775 12a8 4C8D8424 		leaq	200(%rsp), %r8
 2775      C8000000 
 2776 12b0 C60104   		movb	$4, (%rcx)
 2777 12b3 BA010000 		movl	$1, %edx
 2777      00
 2778 12b8 BE090000 		movl	$9, %esi
 2778      00
 2779 12bd E8000000 		call	flWriteChannel
 2779      00
 2780 12c2 85C0     		testl	%eax, %eax
 2781 12c4 75CB     		jne	.L439
 2782 12c6 BB0A0000 		movl	$10, %ebx
 2782      00
 2783              	.L358:
 2784 12cb 488BBC24 		movq	128(%rsp), %rdi
 2784      80000000 
 2785 12d3 4C8D8424 		leaq	200(%rsp), %r8
 2785      C8000000 
 2786 12db 488D8C24 		leaq	208(%rsp), %rcx
 2786      D0000000 
 2787 12e3 BA010000 		movl	$1, %edx
 2787      00
 2788 12e8 89DE     		movl	%ebx, %esi
 2789 12ea C68424D0 		movb	$0, 208(%rsp)
 2789      00000000 
 2790 12f2 E8000000 		call	flWriteChannel
 2790      00
 2791 12f7 85C0     		testl	%eax, %eax
 2792 12f9 7596     		jne	.L439
 2793 12fb 83C301   		addl	$1, %ebx
 2794 12fe 83FB12   		cmpl	$18, %ebx
 2795 1301 75C8     		jne	.L358
 2796              		.p2align 4,,3
 2797 1303 E926FCFF 		jmp	.L353
 2797      FF
 2798              	.L463:
 2799 1308 488BBC24 		movq	128(%rsp), %rdi
 2799      80000000 
 2800 1310 4C8D8424 		leaq	200(%rsp), %r8
 2800      C8000000 
 2801 1318 C60101   		movb	$1, (%rcx)
 2802 131b BA010000 		movl	$1, %edx
 2802      00
 2803 1320 BE090000 		movl	$9, %esi
 2803      00
 2804 1325 44894C24 		movl	%r9d, 16(%rsp)
 2804      10
 2805 132a E8000000 		call	flWriteChannel
 2805      00
 2806 132f 85C0     		testl	%eax, %eax
 2807 1331 448B4C24 		movl	16(%rsp), %r9d
 2807      10
 2808 1336 0F8555FF 		jne	.L439
 2808      FFFF
 2809 133c C78424C4 		movl	$0, 196(%rsp)
 2809      00000000 
 2809      000000
 2810 1347 41C1E608 		sall	$8, %r14d
 2811 134b 41C1E510 		sall	$16, %r13d
 2812 134f 31C0     		xorl	%eax, %eax
 2813 1351 BA080000 		movl	$8, %edx
 2813      00
 2814 1356 31C9     		xorl	%ecx, %ecx
 2815 1358 EB28     		jmp	.L302
 2816              	.L303:
 2817 135a 83F908   		cmpl	$8, %ecx
 2818 135d 0F84F202 		je	.L465
 2818      0000
 2819 1363 83F910   		cmpl	$16, %ecx
 2820 1366 0F84D302 		je	.L466
 2820      0000
 2821 136c 4489E6   		movl	%r12d, %esi
 2822 136f D3E6     		sall	%cl, %esi
 2823 1371 01F0     		addl	%esi, %eax
 2824 1373 83FA20   		cmpl	$32, %edx
 2825 1376 0F84B000 		je	.L467
 2825      0000
 2826              	.L307:
 2827 137c 83C108   		addl	$8, %ecx
 2828 137f 83C208   		addl	$8, %edx
 2829              	.L302:
 2830 1382 85C9     		testl	%ecx, %ecx
 2831 1384 75D4     		jne	.L303
 2832 1386 4401C8   		addl	%r9d, %eax
 2833 1389 EBF1     		jmp	.L307
 2834              	.L462:
 2835 138b BE000000 		movl	$.LC121, %esi
 2835      00
 2836 1390 BF010000 		movl	$1, %edi
 2836      00
 2837 1395 31C0     		xorl	%eax, %eax
 2838 1397 48894C24 		movq	%rcx, 16(%rsp)
 2838      10
 2839 139c E8000000 		call	__printf_chk
 2839      00
 2840 13a1 488B4C24 		movq	16(%rsp), %rcx
 2840      10
 2841 13a6 488BBC24 		movq	128(%rsp), %rdi
 2841      80000000 
 2842 13ae 4C8D8424 		leaq	200(%rsp), %r8
 2842      C8000000 
 2843 13b6 BA010000 		movl	$1, %edx
 2843      00
 2844 13bb BE090000 		movl	$9, %esi
 2844      00
 2845 13c0 C60103   		movb	$3, (%rcx)
 2846 13c3 E8000000 		call	flWriteChannel
 2846      00
 2847 13c8 85C0     		testl	%eax, %eax
 2848 13ca 0F85C1FE 		jne	.L439
 2848      FFFF
 2849 13d0 450FB6F6 		movzbl	%r14b, %r14d
 2850 13d4 450FB6ED 		movzbl	%r13b, %r13d
 2851 13d8 C78424C4 		movl	$0, 196(%rsp)
 2851      00000000 
 2851      000000
 2852 13e3 41C1E608 		sall	$8, %r14d
 2853 13e7 41C1E510 		sall	$16, %r13d
 2854 13eb BA080000 		movl	$8, %edx
 2854      00
 2855 13f0 31C9     		xorl	%ecx, %ecx
 2856 13f2 450FB6E4 		movzbl	%r12b, %r12d
 2857 13f6 400FB6ED 		movzbl	%bpl, %ebp
 2858 13fa EB28     		jmp	.L332
 2859              	.L333:
 2860 13fc 83F908   		cmpl	$8, %ecx
 2861 13ff 0F847D03 		je	.L468
 2861      0000
 2862 1405 83F910   		cmpl	$16, %ecx
 2863 1408 0F846C03 		je	.L469
 2863      0000
 2864 140e 4489E6   		movl	%r12d, %esi
 2865 1411 D3E6     		sall	%cl, %esi
 2866 1413 01F0     		addl	%esi, %eax
 2867 1415 83FA20   		cmpl	$32, %edx
 2868 1418 0F843F02 		je	.L470
 2868      0000
 2869              	.L337:
 2870 141e 83C108   		addl	$8, %ecx
 2871 1421 83C208   		addl	$8, %edx
 2872              	.L332:
 2873 1424 85C9     		testl	%ecx, %ecx
 2874 1426 75D4     		jne	.L333
 2875 1428 01E8     		addl	%ebp, %eax
 2876 142a EBF2     		jmp	.L337
 2877              	.L467:
 2878 142c 660F6F0D 		movdqa	.LC116(%rip), %xmm1
 2878      00000000 
 2879 1434 488DB424 		leaq	208(%rsp), %rsi
 2879      D0000000 
 2880 143c 488DBC24 		leaq	192(%rsp), %rdi
 2880      C0000000 
 2881 1444 41BC0A00 		movl	$10, %r12d
 2881      0000
 2882 144a 41BD0100 		movl	$1, %r13d
 2882      0000
 2883 1450 898424C0 		movl	%eax, 192(%rsp)
 2883      000000
 2884 1457 660F7F8C 		movdqa	%xmm1, 208(%rsp)
 2884      24D00000 
 2884      00
 2885 1460 E8000000 		call	encrypt
 2885      00
 2886              	.L314:
 2887 1465 428D3CE5 		leal	-80(,%r12,8), %edi
 2887      B0FFFFFF 
 2888 146d 31C0     		xorl	%eax, %eax
 2889 146f 31D2     		xorl	%edx, %edx
 2890 1471 8BB424C0 		movl	192(%rsp), %esi
 2890      000000
 2891              	.L310:
 2892 1478 8D0C07   		leal	(%rdi,%rax), %ecx
 2893 147b 4589E9   		movl	%r13d, %r9d
 2894 147e 41D3E1   		sall	%cl, %r9d
 2895 1481 4185F1   		testl	%esi, %r9d
 2896 1484 740B     		je	.L308
 2897 1486 4589EB   		movl	%r13d, %r11d
 2898 1489 89C1     		movl	%eax, %ecx
 2899 148b 41D3E3   		sall	%cl, %r11d
 2900 148e 4401DA   		addl	%r11d, %edx
 2901              	.L308:
 2902 1491 83C001   		addl	$1, %eax
 2903 1494 83F808   		cmpl	$8, %eax
 2904 1497 75DF     		jne	.L310
 2905 1499 488BBC24 		movq	128(%rsp), %rdi
 2905      80000000 
 2906 14a1 4C8D8424 		leaq	200(%rsp), %r8
 2906      C8000000 
 2907 14a9 488D8C24 		leaq	208(%rsp), %rcx
 2907      D0000000 
 2908 14b1 889424D0 		movb	%dl, 208(%rsp)
 2908      000000
 2909 14b8 4489E6   		movl	%r12d, %esi
 2910 14bb BA010000 		movl	$1, %edx
 2910      00
 2911 14c0 E8000000 		call	flWriteChannel
 2911      00
 2912 14c5 85C0     		testl	%eax, %eax
 2913 14c7 0F85C4FD 		jne	.L439
 2913      FFFF
 2914 14cd 4183C401 		addl	$1, %r12d
 2915 14d1 4183FC0E 		cmpl	$14, %r12d
 2916 14d5 758E     		jne	.L314
 2917 14d7 41BD0100 		movl	$1, %r13d
 2917      0000
 2918              	.L320:
 2919 14dd 8BB424C4 		movl	196(%rsp), %esi
 2919      000000
 2920 14e4 428D3CE5 		leal	-112(,%r12,8), %edi
 2920      90FFFFFF 
 2921 14ec 31C0     		xorl	%eax, %eax
 2922 14ee 31D2     		xorl	%edx, %edx
 2923              	.L317:
 2924 14f0 8D0C07   		leal	(%rdi,%rax), %ecx
 2925 14f3 4589E9   		movl	%r13d, %r9d
 2926 14f6 41D3E1   		sall	%cl, %r9d
 2927 14f9 4185F1   		testl	%esi, %r9d
 2928 14fc 740B     		je	.L315
 2929 14fe 4589EB   		movl	%r13d, %r11d
 2930 1501 89C1     		movl	%eax, %ecx
 2931 1503 41D3E3   		sall	%cl, %r11d
 2932 1506 4401DA   		addl	%r11d, %edx
 2933              	.L315:
 2934 1509 83C001   		addl	$1, %eax
 2935 150c 83F808   		cmpl	$8, %eax
 2936 150f 75DF     		jne	.L317
 2937 1511 488BBC24 		movq	128(%rsp), %rdi
 2937      80000000 
 2938 1519 4C8D8424 		leaq	200(%rsp), %r8
 2938      C8000000 
 2939 1521 488D8C24 		leaq	208(%rsp), %rcx
 2939      D0000000 
 2940 1529 889424D0 		movb	%dl, 208(%rsp)
 2940      000000
 2941 1530 4489E6   		movl	%r12d, %esi
 2942 1533 BA010000 		movl	$1, %edx
 2942      00
 2943 1538 E8000000 		call	flWriteChannel
 2943      00
 2944 153d 85C0     		testl	%eax, %eax
 2945 153f 0F854CFD 		jne	.L439
 2945      FFFF
 2946 1545 4183C401 		addl	$1, %r12d
 2947 1549 4183FC12 		cmpl	$18, %r12d
 2948 154d 758E     		jne	.L320
 2949 154f 803B01   		cmpb	$1, (%rbx)
 2950 1552 0F85D6F9 		jne	.L353
 2950      FFFF
 2951 1558 488DBC24 		leaq	432(%rsp), %rdi
 2951      B0010000 
 2952 1560 4C89F8   		movq	%r15, %rax
 2953 1563 BE000000 		movl	$.LC118, %esi
 2953      00
 2954 1568 48C1E004 		salq	$4, %rax
 2955 156c 41BC1000 		movl	$16, %r12d
 2955      0000
 2956 1572 29A80000 		subl	%ebp, dataFromCSV+12(%rax)
 2956      0000
 2957 1578 BD010000 		movl	$1, %ebp
 2957      00
 2958 157d E8000000 		call	fopen
 2958      00
 2959 1582 B9000000 		movl	$.LC119, %ecx
 2959      00
 2960 1587 4889C7   		movq	%rax, %rdi
 2961 158a 4889C3   		movq	%rax, %rbx
 2962 158d BA000000 		movl	$.LC120, %edx
 2962      00
 2963 1592 BE010000 		movl	$1, %esi
 2963      00
 2964 1597 31C0     		xorl	%eax, %eax
 2965 1599 E8000000 		call	__fprintf_chk
 2965      00
 2966 159e BA000000 		movl	$.LC73, %edx
 2966      00
 2967 15a3 BE010000 		movl	$1, %esi
 2967      00
 2968 15a8 4889DF   		movq	%rbx, %rdi
 2969 15ab 31C0     		xorl	%eax, %eax
 2970 15ad E8000000 		call	__fprintf_chk
 2970      00
 2971              	.L322:
 2972 15b2 3B2D0000 		cmpl	numLines(%rip), %ebp
 2972      0000
 2973 15b8 0F8F8900 		jg	.L471
 2973      0000
 2974 15be 418B8C24 		movl	dataFromCSV(%r12), %ecx
 2974      00000000 
 2975 15c6 BA000000 		movl	$.LC12, %edx
 2975      00
 2976 15cb BE010000 		movl	$1, %esi
 2976      00
 2977 15d0 4889DF   		movq	%rbx, %rdi
 2978 15d3 31C0     		xorl	%eax, %eax
 2979 15d5 4531ED   		xorl	%r13d, %r13d
 2980 15d8 E8000000 		call	__fprintf_chk
 2980      00
 2981              	.L362:
 2982 15dd BA000000 		movl	$.LC11, %edx
 2982      00
 2983 15e2 BE010000 		movl	$1, %esi
 2983      00
 2984 15e7 4889DF   		movq	%rbx, %rdi
 2985 15ea 31C0     		xorl	%eax, %eax
 2986 15ec E8000000 		call	__fprintf_chk
 2986      00
 2987 15f1 438B8C2C 		movl	dataFromCSV+4(%r12,%r13), %ecx
 2987      00000000 
 2988 15f9 31C0     		xorl	%eax, %eax
 2989 15fb BA000000 		movl	$.LC12, %edx
 2989      00
 2990 1600 BE010000 		movl	$1, %esi
 2990      00
 2991 1605 4889DF   		movq	%rbx, %rdi
 2992 1608 4983C504 		addq	$4, %r13
 2993 160c E8000000 		call	__fprintf_chk
 2993      00
 2994 1611 4983FD0C 		cmpq	$12, %r13
 2995 1615 75C6     		jne	.L362
 2996 1617 3B2D0000 		cmpl	numLines(%rip), %ebp
 2996      0000
 2997 161d 7414     		je	.L361
 2998 161f BA000000 		movl	$.LC73, %edx
 2998      00
 2999 1624 BE010000 		movl	$1, %esi
 2999      00
 3000 1629 4889DF   		movq	%rbx, %rdi
 3001 162c 31C0     		xorl	%eax, %eax
 3002 162e E8000000 		call	__fprintf_chk
 3002      00
 3003              	.L361:
 3004 1633 83C501   		addl	$1, %ebp
 3005 1636 4983C410 		addq	$16, %r12
 3006 163a E973FFFF 		jmp	.L322
 3006      FF
 3007              	.L466:
 3008 163f 4401E8   		addl	%r13d, %eax
 3009 1642 E935FDFF 		jmp	.L307
 3009      FF
 3010              	.L471:
 3011 1647 4889DF   		movq	%rbx, %rdi
 3012 164a E8000000 		call	fclose
 3012      00
 3013 164f 90       		.p2align 4,,2
 3014 1650 E9D9F8FF 		jmp	.L353
 3014      FF
 3015              	.L465:
 3016 1655 4401F0   		addl	%r14d, %eax
 3017              		.p2align 4,,2
 3018 1658 E91FFDFF 		jmp	.L307
 3018      FF
 3019              	.L470:
 3020 165d 660F6F15 		movdqa	.LC116(%rip), %xmm2
 3020      00000000 
 3021 1665 488DB424 		leaq	208(%rsp), %rsi
 3021      D0000000 
 3022 166d 488DBC24 		leaq	192(%rsp), %rdi
 3022      C0000000 
 3023 1675 BB0A0000 		movl	$10, %ebx
 3023      00
 3024 167a BD010000 		movl	$1, %ebp
 3024      00
 3025 167f 898424C0 		movl	%eax, 192(%rsp)
 3025      000000
 3026 1686 660F7F94 		movdqa	%xmm2, 208(%rsp)
 3026      24D00000 
 3026      00
 3027 168f E8000000 		call	encrypt
 3027      00
 3028              	.L343:
 3029 1694 8D3CDDB0 		leal	-80(,%rbx,8), %edi
 3029      FFFFFF
 3030 169b 31C0     		xorl	%eax, %eax
 3031 169d 31D2     		xorl	%edx, %edx
 3032 169f 8BB424C0 		movl	192(%rsp), %esi
 3032      000000
 3033              	.L340:
 3034 16a6 8D0C07   		leal	(%rdi,%rax), %ecx
 3035 16a9 4189E9   		movl	%ebp, %r9d
 3036 16ac 41D3E1   		sall	%cl, %r9d
 3037 16af 4185F1   		testl	%esi, %r9d
 3038 16b2 740B     		je	.L338
 3039 16b4 4189EB   		movl	%ebp, %r11d
 3040 16b7 89C1     		movl	%eax, %ecx
 3041 16b9 41D3E3   		sall	%cl, %r11d
 3042 16bc 4401DA   		addl	%r11d, %edx
 3043              	.L338:
 3044 16bf 83C001   		addl	$1, %eax
 3045 16c2 83F808   		cmpl	$8, %eax
 3046 16c5 75DF     		jne	.L340
 3047 16c7 488BBC24 		movq	128(%rsp), %rdi
 3047      80000000 
 3048 16cf 4C8D8424 		leaq	200(%rsp), %r8
 3048      C8000000 
 3049 16d7 488D8C24 		leaq	208(%rsp), %rcx
 3049      D0000000 
 3050 16df 889424D0 		movb	%dl, 208(%rsp)
 3050      000000
 3051 16e6 89DE     		movl	%ebx, %esi
 3052 16e8 BA010000 		movl	$1, %edx
 3052      00
 3053 16ed E8000000 		call	flWriteChannel
 3053      00
 3054 16f2 85C0     		testl	%eax, %eax
 3055 16f4 0F8597FB 		jne	.L439
 3055      FFFF
 3056 16fa 83C301   		addl	$1, %ebx
 3057 16fd 83FB0E   		cmpl	$14, %ebx
 3058 1700 7592     		jne	.L343
 3059 1702 BD010000 		movl	$1, %ebp
 3059      00
 3060              	.L349:
 3061 1707 8BB424C4 		movl	196(%rsp), %esi
 3061      000000
 3062 170e 8D3CDD90 		leal	-112(,%rbx,8), %edi
 3062      FFFFFF
 3063 1715 31C0     		xorl	%eax, %eax
 3064 1717 31D2     		xorl	%edx, %edx
 3065              	.L346:
 3066 1719 8D0C07   		leal	(%rdi,%rax), %ecx
 3067 171c 4189E9   		movl	%ebp, %r9d
 3068 171f 41D3E1   		sall	%cl, %r9d
 3069 1722 4185F1   		testl	%esi, %r9d
 3070 1725 740B     		je	.L344
 3071 1727 4189EB   		movl	%ebp, %r11d
 3072 172a 89C1     		movl	%eax, %ecx
 3073 172c 41D3E3   		sall	%cl, %r11d
 3074 172f 4401DA   		addl	%r11d, %edx
 3075              	.L344:
 3076 1732 83C001   		addl	$1, %eax
 3077 1735 83F808   		cmpl	$8, %eax
 3078 1738 75DF     		jne	.L346
 3079 173a 488BBC24 		movq	128(%rsp), %rdi
 3079      80000000 
 3080 1742 4C8D8424 		leaq	200(%rsp), %r8
 3080      C8000000 
 3081 174a 488D8C24 		leaq	208(%rsp), %rcx
 3081      D0000000 
 3082 1752 889424D0 		movb	%dl, 208(%rsp)
 3082      000000
 3083 1759 89DE     		movl	%ebx, %esi
 3084 175b BA010000 		movl	$1, %edx
 3084      00
 3085 1760 E8000000 		call	flWriteChannel
 3085      00
 3086 1765 85C0     		testl	%eax, %eax
 3087 1767 0F8524FB 		jne	.L439
 3087      FFFF
 3088 176d 83C301   		addl	$1, %ebx
 3089 1770 83FB12   		cmpl	$18, %ebx
 3090 1773 7592     		jne	.L349
 3091              		.p2align 4,,3
 3092 1775 E9B4F7FF 		jmp	.L353
 3092      FF
 3093              	.L469:
 3094 177a 4401E8   		addl	%r13d, %eax
 3095              		.p2align 4,,2
 3096 177d E99CFCFF 		jmp	.L337
 3096      FF
 3097              	.L468:
 3098 1782 4401F0   		addl	%r14d, %eax
 3099              		.p2align 4,,5
 3100 1785 E994FCFF 		jmp	.L337
 3100      FF
 3101              	.L264:
 3102 178a 4C89E9   		movq	%r13, %rcx
 3103 178d BA000000 		movl	$.LC109, %edx
 3103      00
 3104 1792 E906F7FF 		jmp	.L442
 3104      FF
 3105              	.L453:
 3106 1797 BE000000 		movl	$.LC113, %esi
 3106      00
 3107 179c BF010000 		movl	$1, %edi
 3107      00
 3108 17a1 31C0     		xorl	%eax, %eax
 3109 17a3 E8000000 		call	__printf_chk
 3109      00
 3110 17a8 448B5424 		movl	8(%rsp), %r10d
 3110      08
 3111 17ad E995EBFF 		jmp	.L270
 3111      FF
 3112              	.L241:
 3113 17b2 4C89EA   		movq	%r13, %rdx
 3114 17b5 BE000000 		movl	$.LC97, %esi
 3114      00
 3115 17ba BF010000 		movl	$1, %edi
 3115      00
 3116 17bf 31C0     		xorl	%eax, %eax
 3117 17c1 44895424 		movl	%r10d, 16(%rsp)
 3117      10
 3118 17c6 E8000000 		call	__printf_chk
 3118      00
 3119 17cb 448B5424 		movl	16(%rsp), %r10d
 3119      10
 3120 17d0 E903F0FF 		jmp	.L244
 3120      FF
 3121              	.L255:
 3122 17d5 4883C101 		addq	$1, %rcx
 3123 17d9 4889C2   		movq	%rax, %rdx
 3124 17dc BE000000 		movl	$.LC105, %esi
 3124      00
 3125 17e1 BF010000 		movl	$1, %edi
 3125      00
 3126 17e6 31C0     		xorl	%eax, %eax
 3127 17e8 44895424 		movl	%r10d, 16(%rsp)
 3127      10
 3128 17ed 48898C24 		movq	%rcx, 192(%rsp)
 3128      C0000000 
 3129 17f5 E8000000 		call	__printf_chk
 3129      00
 3130 17fa 488BBC24 		movq	192(%rsp), %rdi
 3130      C0000000 
 3131 1802 BE000000 		movl	$.LC1, %esi
 3131      00
 3132 1807 E8000000 		call	fopen
 3132      00
 3133 180c 4885C0   		testq	%rax, %rax
 3134 180f 4889C5   		movq	%rax, %rbp
 3135 1812 0F847501 		je	.L365
 3135      0000
 3136 1818 E8000000 		call	sigRegisterHandler
 3136      00
 3137 181d 8B742408 		movl	8(%rsp), %esi
 3138 1821 488BBC24 		movq	128(%rsp), %rdi
 3138      80000000 
 3139 1829 488D9424 		leaq	200(%rsp), %rdx
 3139      C8000000 
 3140 1831 E8000000 		call	flSelectConduit
 3140      00
 3141 1836 85C0     		testl	%eax, %eax
 3142 1838 448B5424 		movl	16(%rsp), %r10d
 3142      10
 3143 183d 0F8554F3 		jne	.L258
 3143      FFFF
 3144 1843 488BBC24 		movq	128(%rsp), %rdi
 3144      80000000 
 3145 184b 450FB6E4 		movzbl	%r12b, %r12d
 3146 184f 4C8D8424 		leaq	200(%rsp), %r8
 3146      C8000000 
 3147 1857 31C9     		xorl	%ecx, %ecx
 3148 1859 BA005800 		movl	$22528, %edx
 3148      00
 3149 185e 4489E6   		movl	%r12d, %esi
 3150 1861 44895424 		movl	%r10d, 16(%rsp)
 3150      10
 3151 1866 E8000000 		call	flReadChannelAsyncSubmit
 3151      00
 3152 186b 85C0     		testl	%eax, %eax
 3153 186d 448B5424 		movl	16(%rsp), %r10d
 3153      10
 3154 1872 0F851FF3 		jne	.L258
 3154      FFFF
 3155 1878 4589D6   		movl	%r10d, %r14d
 3156              	.L260:
 3157 187b 488BBC24 		movq	128(%rsp), %rdi
 3157      80000000 
 3158 1883 4C8D8424 		leaq	200(%rsp), %r8
 3158      C8000000 
 3159 188b 31C9     		xorl	%ecx, %ecx
 3160 188d BA005800 		movl	$22528, %edx
 3160      00
 3161 1892 4489E6   		movl	%r12d, %esi
 3162 1895 E8000000 		call	flReadChannelAsyncSubmit
 3162      00
 3163 189a 85C0     		testl	%eax, %eax
 3164 189c 0F85F5F2 		jne	.L258
 3164      FFFF
 3165 18a2 488D8C24 		leaq	176(%rsp), %rcx
 3165      B0000000 
 3166 18aa 488BBC24 		movq	128(%rsp), %rdi
 3166      80000000 
 3167 18b2 4C8D8424 		leaq	200(%rsp), %r8
 3167      C8000000 
 3168 18ba 488DB424 		leaq	208(%rsp), %rsi
 3168      D0000000 
 3169 18c2 4889CA   		movq	%rcx, %rdx
 3170 18c5 E8000000 		call	flReadChannelAsyncAwait
 3170      00
 3171 18ca 85C0     		testl	%eax, %eax
 3172 18cc 0F85C5F2 		jne	.L258
 3172      FFFF
 3173 18d2 8B9424B0 		movl	176(%rsp), %edx
 3173      000000
 3174 18d9 488BBC24 		movq	208(%rsp), %rdi
 3174      D0000000 
 3175 18e1 4889E9   		movq	%rbp, %rcx
 3176 18e4 BE010000 		movl	$1, %esi
 3176      00
 3177 18e9 E8000000 		call	fwrite
 3177      00
 3178 18ee BE000000 		movl	$.LC80, %esi
 3178      00
 3179 18f3 BF010000 		movl	$1, %edi
 3179      00
 3180 18f8 31C0     		xorl	%eax, %eax
 3181 18fa E8000000 		call	__printf_chk
 3181      00
 3182 18ff E8000000 		call	sigIsRaised
 3182      00
 3183 1904 84C0     		testb	%al, %al
 3184 1906 0F846FFF 		je	.L260
 3184      FFFF
 3185 190c BE000000 		movl	$.LC106, %esi
 3185      00
 3186 1911 BF010000 		movl	$1, %edi
 3186      00
 3187 1916 31C0     		xorl	%eax, %eax
 3188 1918 44897424 		movl	%r14d, 16(%rsp)
 3188      10
 3189 191d E8000000 		call	__printf_chk
 3189      00
 3190 1922 488D8C24 		leaq	176(%rsp), %rcx
 3190      B0000000 
 3191 192a 488BBC24 		movq	128(%rsp), %rdi
 3191      80000000 
 3192 1932 4C8D8424 		leaq	200(%rsp), %r8
 3192      C8000000 
 3193 193a 488DB424 		leaq	208(%rsp), %rsi
 3193      D0000000 
 3194 1942 4889CA   		movq	%rcx, %rdx
 3195 1945 E8000000 		call	flReadChannelAsyncAwait
 3195      00
 3196 194a 85C0     		testl	%eax, %eax
 3197 194c 0F8545F2 		jne	.L258
 3197      FFFF
 3198 1952 8B9424B0 		movl	176(%rsp), %edx
 3198      000000
 3199 1959 488BBC24 		movq	208(%rsp), %rdi
 3199      D0000000 
 3200 1961 4889E9   		movq	%rbp, %rcx
 3201 1964 BE010000 		movl	$1, %esi
 3201      00
 3202 1969 E8000000 		call	fwrite
 3202      00
 3203 196e 4889EF   		movq	%rbp, %rdi
 3204 1971 E8000000 		call	fclose
 3204      00
 3205 1976 448B5424 		movl	16(%rsp), %r10d
 3205      10
 3206 197b E99CEEFF 		jmp	.L254
 3206      FF
 3207              	.L251:
 3208 1980 4C89E9   		movq	%r13, %rcx
 3209 1983 BA000000 		movl	$.LC102, %edx
 3209      00
 3210 1988 E95DEFFF 		jmp	.L443
 3210      FF
 3211              	.L365:
 3212 198d BD0B0000 		movl	$11, %ebp
 3212      00
 3213 1992 E96BEFFF 		jmp	.L256
 3213      FF
 3214              	.L427:
 3215 1997 89C5     		movl	%eax, %ebp
 3216 1999 E95FE9FF 		jmp	.L211
 3216      FF
 3217              		.cfi_endproc
 3218              	.LFE90:
 3220              		.section	.rodata.str1.1
 3221              	.LC123:
 3222 02e0 30303030 		.string	"0000"
 3222      00
 3223              	.LC124:
 3224 02e5 30303031 		.string	"0001"
 3224      00
 3225              	.LC125:
 3226 02ea 30303130 		.string	"0010"
 3226      00
 3227              	.LC126:
 3228 02ef 30303131 		.string	"0011"
 3228      00
 3229              	.LC127:
 3230 02f4 30313030 		.string	"0100"
 3230      00
 3231              	.LC128:
 3232 02f9 30313031 		.string	"0101"
 3232      00
 3233              	.LC129:
 3234 02fe 30313130 		.string	"0110"
 3234      00
 3235              	.LC130:
 3236 0303 30313131 		.string	"0111"
 3236      00
 3237              	.LC131:
 3238 0308 31303030 		.string	"1000"
 3238      00
 3239              	.LC132:
 3240 030d 31303031 		.string	"1001"
 3240      00
 3241              	.LC133:
 3242 0312 58585858 		.string	"XXXX"
 3242      00
 3243              	.LC134:
 3244 0317 31303130 		.string	"1010"
 3244      00
 3245              	.LC135:
 3246 031c 31303131 		.string	"1011"
 3246      00
 3247              	.LC136:
 3248 0321 31313030 		.string	"1100"
 3248      00
 3249              	.LC137:
 3250 0326 31313031 		.string	"1101"
 3250      00
 3251              	.LC138:
 3252 032b 31313130 		.string	"1110"
 3252      00
 3253              	.LC139:
 3254 0330 31313131 		.string	"1111"
 3254      00
 3255              		.section	.rodata
 3256              		.align 32
 3259              	nibbles:
 3260 0000 00000000 		.quad	.LC123
 3260      00000000 
 3261 0008 00000000 		.quad	.LC124
 3261      00000000 
 3262 0010 00000000 		.quad	.LC125
 3262      00000000 
 3263 0018 00000000 		.quad	.LC126
 3263      00000000 
 3264 0020 00000000 		.quad	.LC127
 3264      00000000 
 3265 0028 00000000 		.quad	.LC128
 3265      00000000 
 3266 0030 00000000 		.quad	.LC129
 3266      00000000 
 3267 0038 00000000 		.quad	.LC130
 3267      00000000 
 3268 0040 00000000 		.quad	.LC131
 3268      00000000 
 3269 0048 00000000 		.quad	.LC132
 3269      00000000 
 3270 0050 00000000 		.quad	.LC133
 3270      00000000 
 3271 0058 00000000 		.quad	.LC133
 3271      00000000 
 3272 0060 00000000 		.quad	.LC133
 3272      00000000 
 3273 0068 00000000 		.quad	.LC133
 3273      00000000 
 3274 0070 00000000 		.quad	.LC133
 3274      00000000 
 3275 0078 00000000 		.quad	.LC133
 3275      00000000 
 3276 0080 00000000 		.quad	.LC133
 3276      00000000 
 3277 0088 00000000 		.quad	.LC134
 3277      00000000 
 3278 0090 00000000 		.quad	.LC135
 3278      00000000 
 3279 0098 00000000 		.quad	.LC136
 3279      00000000 
 3280 00a0 00000000 		.quad	.LC137
 3280      00000000 
 3281 00a8 00000000 		.quad	.LC138
 3281      00000000 
 3282 00b0 00000000 		.quad	.LC139
 3282      00000000 
 3283              		.section	.rodata.str1.1
 3284              	.LC140:
 3285 0335 556E7061 		.string	"Unparseable hex number"
 3285      72736561 
 3285      626C6520 
 3285      68657820 
 3285      6E756D62 
 3286              	.LC141:
 3287 034c 4368616E 		.string	"Channel out of range"
 3287      6E656C20 
 3287      6F757420 
 3287      6F662072 
 3287      616E6765 
 3288              	.LC142:
 3289 0361 436F6E64 		.string	"Conduit out of range"
 3289      75697420 
 3289      6F757420 
 3289      6F662072 
 3289      616E6765 
 3290              	.LC143:
 3291 0376 496C6C65 		.string	"Illegal character"
 3291      67616C20 
 3291      63686172 
 3291      61637465 
 3291      7200
 3292              	.LC144:
 3293 0388 556E7465 		.string	"Unterminated string"
 3293      726D696E 
 3293      61746564 
 3293      20737472 
 3293      696E6700 
 3294              	.LC145:
 3295 039c 4E6F206D 		.string	"No memory"
 3295      656D6F72 
 3295      7900
 3296              	.LC146:
 3297 03a6 456D7074 		.string	"Empty string"
 3297      79207374 
 3297      72696E67 
 3297      00
 3298              	.LC147:
 3299 03b3 4F646420 		.string	"Odd number of digits"
 3299      6E756D62 
 3299      6572206F 
 3299      66206469 
 3299      67697473 
 3300              	.LC148:
 3301 03c8 43616E6E 		.string	"Cannot load file"
 3301      6F74206C 
 3301      6F616420 
 3301      66696C65 
 3301      00
 3302              	.LC149:
 3303 03d9 43616E6E 		.string	"Cannot save file"
 3303      6F742073 
 3303      61766520 
 3303      66696C65 
 3303      00
 3304              	.LC150:
 3305 03ea 42616420 		.string	"Bad arguments"
 3305      61726775 
 3305      6D656E74 
 3305      7300
 3306              		.section	.rodata
 3307 00b8 00000000 		.align 32
 3307      00000000 
 3310              	errMessages:
 3311 00c0 00000000 		.quad	0
 3311      00000000 
 3312 00c8 00000000 		.quad	0
 3312      00000000 
 3313 00d0 00000000 		.quad	.LC140
 3313      00000000 
 3314 00d8 00000000 		.quad	.LC141
 3314      00000000 
 3315 00e0 00000000 		.quad	.LC142
 3315      00000000 
 3316 00e8 00000000 		.quad	.LC143
 3316      00000000 
 3317 00f0 00000000 		.quad	.LC144
 3317      00000000 
 3318 00f8 00000000 		.quad	.LC145
 3318      00000000 
 3319 0100 00000000 		.quad	.LC146
 3319      00000000 
 3320 0108 00000000 		.quad	.LC147
 3320      00000000 
 3321 0110 00000000 		.quad	.LC148
 3321      00000000 
 3322 0118 00000000 		.quad	.LC149
 3322      00000000 
 3323 0120 00000000 		.quad	.LC150
 3323      00000000 
 3324              		.local	enableBenchmarking
 3325              		.comm	enableBenchmarking,1,16
 3326              		.local	ptr
 3327              		.comm	ptr,8,16
 3328              		.globl	numLines
 3329              		.bss
 3330              		.align 16
 3333              	numLines:
 3334 0000 00000000 		.zero	4
 3335              		.comm	dataFromCSV,1600080,32
 3336              		.section	.rodata.cst8,"aM",@progbits,8
 3337              		.align 8
 3338              	.LC3:
 3339 0000 00000000 		.long	0
 3340 0004 80842E41 		.long	1093567616
 3341              		.align 8
 3342              	.LC4:
 3343 0008 00000000 		.long	0
 3344 000c 00003041 		.long	1093664768
 3345              		.section	.rodata.cst16,"aM",@progbits,16
 3346              		.align 16
 3347              	.LC116:
 3348 0000 8CC12729 		.long	690471308
 3349 0004 8FC4F875 		.long	1979237519
 3350 0008 F799FD43 		.long	1140693495
 3351 000c 57740FFF 		.long	-15764393
 3352              		.ident	"GCC: (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4"
 3353              		.section	.note.GNU-stack,"",@progbits
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccJ7Lvuz.s:7      .text.unlikely:0000000000000000 doWrite
     /tmp/ccJ7Lvuz.s:140    .text.unlikely:0000000000000109 parseLine
     /tmp/ccJ7Lvuz.s:3327   .bss:0000000000000020 ptr
     /tmp/ccJ7Lvuz.s:3325   .bss:0000000000000010 enableBenchmarking
     /tmp/ccJ7Lvuz.s:3310   .rodata:00000000000000c0 errMessages
     /tmp/ccJ7Lvuz.s:968    .text:0000000000000000 decrypt
     /tmp/ccJ7Lvuz.s:1017   .text:0000000000000070 encrypt
     /tmp/ccJ7Lvuz.s:1067   .text:00000000000000e0 decrypt64
     /tmp/ccJ7Lvuz.s:1107   .text:0000000000000150 encrypt64
     /tmp/ccJ7Lvuz.s:1148   .text:00000000000001c0 myHash
     /tmp/ccJ7Lvuz.s:1214   .text:0000000000000270 format
     /tmp/ccJ7Lvuz.s:3333   .bss:0000000000000000 numLines
                            *COM*:0000000000186a50 dataFromCSV
     /tmp/ccJ7Lvuz.s:1252   .text:00000000000002d0 find
     /tmp/ccJ7Lvuz.s:1299   .text:0000000000000340 suffBal
     /tmp/ccJ7Lvuz.s:1636   .text.startup:0000000000000000 main
     /tmp/ccJ7Lvuz.s:3259   .rodata:0000000000000000 nibbles
     /tmp/ccJ7Lvuz.s:3338   .rodata.cst8:0000000000000000 .LC3
     /tmp/ccJ7Lvuz.s:3342   .rodata.cst8:0000000000000008 .LC4
     /tmp/ccJ7Lvuz.s:3347   .rodata.cst16:0000000000000000 .LC116

UNDEFINED SYMBOLS
fread
flWriteChannelAsync
errPrefix
flAwaitAsyncWrites
__stack_chk_fail
bufInitialise
__errno_location
strtoul
malloc
strncpy
fopen
free
gettimeofday
flReadChannelAsyncSubmit
flReadChannelAsyncAwait
fwrite
__printf_chk
fclose
flWriteChannel
flSelectConduit
dump
bufDestroy
stderr
__fprintf_chk
bufAppendConst
flReadChannel
strtok
sscanf
arg_str0
arg_str1
arg_uint0
arg_lit0
arg_end
arg_nullcheck
flClose
flFreeError
arg_parse
stdout
arg_print_syntax
arg_print_glossary
arg_print_errors
flInitialise
flOpen
flLoadCustomFirmware
flSleep
fflush
flIsDeviceAvailable
flGetFirmwareVersion
flGetFirmwareID
flFlashStandardFirmware
flIsNeroCapable
flIsCommCapable
jtagScanChain
flLoadStandardFirmware
flFlashCustomFirmware
flResetToggle
flMultiBitPortAccess
__sprintf_chk
flSaveFirmware
flProgram
__getdelim
flIsFPGARunning
readline
add_history
sigRegisterHandler
sigIsRaised
